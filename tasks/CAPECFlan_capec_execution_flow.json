[
  {
    "instruction": "Can you give me the steps for the attack pattern - HTTP Parameter Pollution (HPP)",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Find User Input The adversary finds anywhere in the web application that uses user-supplied input in a form or action. This can also be found by looking at parameters in the URL in the navigation bar of the browser\n\n\n2)Attack phase: Experiment.\nStep overview: Add Duplicate Parameter Values Once the adversary has identified what user input is used as HTTP parameters, they will add duplicates to each parameter one by one to observe the results. If the response from the HTTP request shows the duplicate parameter value concatenated with the original parameter value in some way, or simply just the duplicate parameter value, then HPP is possible.\nPossible techniques to use: In the URL, add a duplicate parameter by using the \"&\" delimiter. For example \"par1=val1\" becomes \"par1=val1&par1=val2\". Depending on the backend API, this could be treated as \"par1=val1, val2\", which could lead to par1 being set to val2, ignoring val1., If the request is created based on user input directly on the page, the adversary will test by adding an encoded delimiter to the input. For example, the adverary might supply \"1000%26action=withdraw\" and the backend might interpret a POST request with the paramters \"action=deposit&amount=1000&action=withdraw\"\n\n\n3)Attack phase: Exploit.\nStep overview: Leverage HPP Once the adversary has identified how the backend handles duplicate parameters, they will leverage this by polluting the paramters in a way that benefits them. In some cases, hardcoded parameters will be disregarded by the backend. In others, the adversary can bypass a WAF that might only check a parameter before it has been concatenated by the backend, resulting in malicious queries getting through.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find User Input The adversary finds anywhere in the web application that uses user-supplied input in a form or action. This can also be found by looking at parameters in the URL in the navigation bar of the browser\n\n",
        "2)Attack phase: Experiment.\nStep overview: Add Duplicate Parameter Values Once the adversary has identified what user input is used as HTTP parameters, they will add duplicates to each parameter one by one to observe the results. If the response from the HTTP request shows the duplicate parameter value concatenated with the original parameter value in some way, or simply just the duplicate parameter value, then HPP is possible.\nPossible techniques to use: In the URL, add a duplicate parameter by using the \"&\" delimiter. For example \"par1=val1\" becomes \"par1=val1&par1=val2\". Depending on the backend API, this could be treated as \"par1=val1, val2\", which could lead to par1 being set to val2, ignoring val1., If the request is created based on user input directly on the page, the adversary will test by adding an encoded delimiter to the input. For example, the adverary might supply \"1000%26action=withdraw\" and the backend might interpret a POST request with the paramters \"action=deposit&amount=1000&action=withdraw\"\n\n",
        "3)Attack phase: Exploit.\nStep overview: Leverage HPP Once the adversary has identified how the backend handles duplicate parameters, they will leverage this by polluting the paramters in a way that benefits them. In some cases, hardcoded parameters will be disregarded by the backend. In others, the adversary can bypass a WAF that might only check a parameter before it has been concatenated by the backend, resulting in malicious queries getting through.\n\n"
      ],
      "@Name": "HTTP Parameter Pollution (HPP)"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Target Influence via Interview and Interrogation",
    "context": "",
    "output": "Execution Flow:\nName:Influence via Psychological Principles\nDescription: The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Influence via Psychological Principles\nDescription: The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Target Influence via Interview and Interrogation"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Modification of Windows Service Configuration",
    "context": "",
    "output": "Here are the steps to implement Modification of Windows Service Configuration:\n1)Attack phase: Explore.\nStep overview: Determine target system The adversary must first determine the system they wish to modify the registry of. This needs to be a windows machine as this attack only works on the windows registry.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Gain access to the system The adversary needs to gain access to the system in some way so that they can modify the windows registry.\nPossible techniques to use: Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked., Gain remote access to a system through a variety of means.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Modify windows registry The adversary will modify the windows registry by changing the configuration settings for a service. Specifically, the adversary will change the path settings to define a path to a malicious binary to be executed.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine target system The adversary must first determine the system they wish to modify the registry of. This needs to be a windows machine as this attack only works on the windows registry.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Gain access to the system The adversary needs to gain access to the system in some way so that they can modify the windows registry.\nPossible techniques to use: Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked., Gain remote access to a system through a variety of means.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Modify windows registry The adversary will modify the windows registry by changing the configuration settings for a service. Specifically, the adversary will change the path settings to define a path to a malicious binary to be executed.\n\n"
      ],
      "@Name": "Modification of Windows Service Configuration"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Encryption Brute Forcing",
    "context": "",
    "output": "The execution flow for Encryption Brute Forcing is the following: 1)Attack phase: Explore.\nStep overview: Determine the ciphertext and the encryption algorithm.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Perform an exhaustive brute force search of the key space, producing candidate plaintexts and observing if they make sense.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine the ciphertext and the encryption algorithm.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Perform an exhaustive brute force search of the key space, producing candidate plaintexts and observing if they make sense.\n\n"
      ],
      "@Name": "Encryption Brute Forcing"
    }
  },
  {
    "instruction": "List the execution flow related to capec: TCP FIN Scan",
    "context": "",
    "output": "Execution Flow:\nName:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP FIN Scan"
    }
  },
  {
    "instruction": "Given attack pattern: Session Credential Falsification through Prediction.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Session Credential Falsification through Prediction are: 1)Attack phase: Explore.\nStep overview: Find Session IDs The attacker interacts with the target host and finds that session IDs are used to authenticate users.\nPossible techniques to use: An attacker makes many anonymous connections and records the session IDs assigned., An attacker makes authorized connections and records the session tokens or credentials issued.\n\n\n* 2)Attack phase: Explore.\nStep overview: Characterize IDs The attacker studies the characteristics of the session ID (size, format, etc.). As a results the attacker finds that legitimate session IDs are predictable.\nPossible techniques to use: Cryptanalysis. The attacker uses cryptanalysis to determine if the session IDs contain any cryptographic protections., Pattern tests. The attacker looks for patterns (odd/even, repetition, multiples, or other arithmetic relationships) between IDs, Comparison against time. The attacker plots or compares the issued IDs to the time they were issued to check for correlation.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Match issued IDs The attacker brute forces different values of session ID and manages to predict a valid session ID.\nPossible techniques to use: The attacker models the session ID algorithm enough to produce a compatible session IDs, or just one match.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Use matched Session ID The attacker uses the falsified session ID to access the target system.\nPossible techniques to use: The attacker loads the session ID into their web browser and browses to restricted data or functionality., The attacker loads the session ID into their network communications and impersonates a legitimate user to gain access to data or functionality.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find Session IDs The attacker interacts with the target host and finds that session IDs are used to authenticate users.\nPossible techniques to use: An attacker makes many anonymous connections and records the session IDs assigned., An attacker makes authorized connections and records the session tokens or credentials issued.\n\n",
        "2)Attack phase: Explore.\nStep overview: Characterize IDs The attacker studies the characteristics of the session ID (size, format, etc.). As a results the attacker finds that legitimate session IDs are predictable.\nPossible techniques to use: Cryptanalysis. The attacker uses cryptanalysis to determine if the session IDs contain any cryptographic protections., Pattern tests. The attacker looks for patterns (odd/even, repetition, multiples, or other arithmetic relationships) between IDs, Comparison against time. The attacker plots or compares the issued IDs to the time they were issued to check for correlation.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Match issued IDs The attacker brute forces different values of session ID and manages to predict a valid session ID.\nPossible techniques to use: The attacker models the session ID algorithm enough to produce a compatible session IDs, or just one match.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Use matched Session ID The attacker uses the falsified session ID to access the target system.\nPossible techniques to use: The attacker loads the session ID into their web browser and browses to restricted data or functionality., The attacker loads the session ID into their network communications and impersonates a legitimate user to gain access to data or functionality.\n\n"
      ],
      "@Name": "Session Credential Falsification through Prediction"
    }
  },
  {
    "instruction": "Given attack pattern: Forceful Browsing.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Forceful Browsing are: 1)Attack phase: Explore.\nStep overview: Spider Using an automated tool, an attacker follows all public links on a web site. They record all the links they find.\nPossible techniques to use: Use a spidering tool to follow and record all links., Use a proxy tool to record all links visited during a manual traversal of the web application.\n\n\n2)Attack phase: Experiment.\nStep overview: Attempt well-known or guessable resource locations Using an automated tool, an attacker requests a variety of well-known URLs that correspond to administrative, debugging, or other useful internal actions. They record all the positive responses from the server.\nPossible techniques to use: Use a spidering tool to follow and record attempts on well-known URLs., Use a proxy tool to record all links visited during a manual traversal of attempts on well-known URLs.\n\n\n3)Attack phase: Exploit.\nStep overview: Use unauthorized resources By visiting the unprotected resource, the attacker makes use of unauthorized functionality.\nPossible techniques to use: Access unprotected functions and execute them.\n\n\n4)Attack phase: Exploit.\nStep overview: View unauthorized data The attacker discovers and views unprotected sensitive data.\nPossible techniques to use: Direct request of protected pages that directly access database back-ends. (e.g., list.jsp, accounts.jsp, status.jsp, etc.)\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Spider Using an automated tool, an attacker follows all public links on a web site. They record all the links they find.\nPossible techniques to use: Use a spidering tool to follow and record all links., Use a proxy tool to record all links visited during a manual traversal of the web application.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attempt well-known or guessable resource locations Using an automated tool, an attacker requests a variety of well-known URLs that correspond to administrative, debugging, or other useful internal actions. They record all the positive responses from the server.\nPossible techniques to use: Use a spidering tool to follow and record attempts on well-known URLs., Use a proxy tool to record all links visited during a manual traversal of attempts on well-known URLs.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Use unauthorized resources By visiting the unprotected resource, the attacker makes use of unauthorized functionality.\nPossible techniques to use: Access unprotected functions and execute them.\n\n",
        "4)Attack phase: Exploit.\nStep overview: View unauthorized data The attacker discovers and views unprotected sensitive data.\nPossible techniques to use: Direct request of protected pages that directly access database back-ends. (e.g., list.jsp, accounts.jsp, status.jsp, etc.)\n\n"
      ],
      "@Name": "Forceful Browsing"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Exploitation of Trusted Identifiers",
    "context": "",
    "output": "The execution flow for Exploitation of Trusted Identifiers is the following: 1)Attack phase: Explore.\nStep overview: Survey the application for Indicators of Susceptibility Using a variety of methods, until one is found that applies to the target, the adversary probes for cookies, session tokens, or entry points that bypass identifiers altogether.\nPossible techniques to use: Spider all available pages, Attack known bad interfaces, Search outward-facing configuration and properties files for identifiers.\n\n\n2)Attack phase: Experiment.\nStep overview: Fetch samples The adversary fetches many samples of identifiers. This may be through legitimate access (logging in, legitimate connections, etc.) or via systematic probing.\nPossible techniques to use: An adversary makes many anonymous connections and records the session IDs assigned., An adversary makes authorized connections and records the session tokens or credentials issued., An adversary gains access to (legitimately or illegitimately) a nearby system (e.g., in the same operations network, DMZ, or local network) and makes a connection from it, attempting to gain the same privileges as a trusted system.\n\n\n3)Attack phase: Exploit.\nStep overview: Impersonate An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application\n\n\n4)Attack phase: Exploit.\nStep overview: Spoofing Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.\n\n\n5)Attack phase: Exploit.\nStep overview: Data Exfiltration The adversary can obtain sensitive data contained within the system or application.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for Indicators of Susceptibility Using a variety of methods, until one is found that applies to the target, the adversary probes for cookies, session tokens, or entry points that bypass identifiers altogether.\nPossible techniques to use: Spider all available pages, Attack known bad interfaces, Search outward-facing configuration and properties files for identifiers.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Fetch samples The adversary fetches many samples of identifiers. This may be through legitimate access (logging in, legitimate connections, etc.) or via systematic probing.\nPossible techniques to use: An adversary makes many anonymous connections and records the session IDs assigned., An adversary makes authorized connections and records the session tokens or credentials issued., An adversary gains access to (legitimately or illegitimately) a nearby system (e.g., in the same operations network, DMZ, or local network) and makes a connection from it, attempting to gain the same privileges as a trusted system.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Impersonate An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application\n\n",
        "4)Attack phase: Exploit.\nStep overview: Spoofing Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.\n\n",
        "5)Attack phase: Exploit.\nStep overview: Data Exfiltration The adversary can obtain sensitive data contained within the system or application.\n\n"
      ],
      "@Name": "Exploitation of Trusted Identifiers"
    }
  },
  {
    "instruction": "Given attack pattern: Malicious Software Implanted.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Malicious Software Implanted are: 1)Attack phase: Explore.\nStep overview: Determine Entry Point The adversary must first identify a system that they wish to target and search for an entry point they can use to install the malicious software. This could be a system which they have prior knowledge of, giving them insight into the software and environment.\nPossible techniques to use: Use a JTAGulator to identify exposed JTAG and UART interfaces in smaller embedded systems., Identify exposed USB connectors that could be used to load software.\n\n\n- 2)Attack phase: Explore.\nStep overview: Discover Vulnerability in Supply Chain The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.\nPossible techniques to use: Procure a system and observe the steps it takes in the shipment process., Identify possible warehouses that systems are stored after manufacturing.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Test Malicious Software Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.\nPossible techniques to use: Design malicious software that will give an adversary a backdoor into the system once it is deployed to the victim., Obtain already designed malicious software that just need to be placed into the system.\n\n\n- 4)Attack phase: Exploit.\nStep overview: Implant Software in the Supply Chain Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary implants the malicious software into the system. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine Entry Point The adversary must first identify a system that they wish to target and search for an entry point they can use to install the malicious software. This could be a system which they have prior knowledge of, giving them insight into the software and environment.\nPossible techniques to use: Use a JTAGulator to identify exposed JTAG and UART interfaces in smaller embedded systems., Identify exposed USB connectors that could be used to load software.\n\n",
        "2)Attack phase: Explore.\nStep overview: Discover Vulnerability in Supply Chain The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.\nPossible techniques to use: Procure a system and observe the steps it takes in the shipment process., Identify possible warehouses that systems are stored after manufacturing.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Test Malicious Software Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.\nPossible techniques to use: Design malicious software that will give an adversary a backdoor into the system once it is deployed to the victim., Obtain already designed malicious software that just need to be placed into the system.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Implant Software in the Supply Chain Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary implants the malicious software into the system. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.\n\n"
      ],
      "@Name": "Malicious Software Implanted"
    }
  },
  {
    "instruction": "List the execution flow related to capec: ICMP Error Message Echoing Integrity Probe",
    "context": "",
    "output": "Execution Flow:\nName:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "ICMP Error Message Echoing Integrity Probe"
    }
  },
  {
    "instruction": "Given attack pattern: XSS Targeting HTML Attributes.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement XSS Targeting HTML Attributes are: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS targeting HTML attributes The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various malicious expressions as input, hoping to embed them as HTML attributes.\nPossible techniques to use: Inject single and double quotes into URL parameters or other inputs to see if they are filtered out. Also use URL encoding to bypass filters., Use single or double quotes to close attribute evaluation and enter a new attribute that contains an expression.\n\n\n3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag., Send information gathered from the malicious script to a remote endpoint.\n\n\n4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS targeting HTML attributes The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various malicious expressions as input, hoping to embed them as HTML attributes.\nPossible techniques to use: Inject single and double quotes into URL parameters or other inputs to see if they are filtered out. Also use URL encoding to bypass filters., Use single or double quotes to close attribute evaluation and enter a new attribute that contains an expression.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag., Send information gathered from the malicious script to a remote endpoint.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n"
      ],
      "@Name": "XSS Targeting HTML Attributes"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Command Delimiters",
    "context": "",
    "output": "Here are the steps to implement Command Delimiters:\n1)Attack phase: Explore.\nStep overview: Assess Target Runtime Environment In situations where the runtime environment is not implicitly known, the attacker makes connections to the target system and tries to determine the system's runtime environment. Knowing the environment is vital to choosing the correct delimiters.\nPossible techniques to use: Port mapping using network connection-based software (e.g., nmap, nessus, etc.), Port mapping by exploring the operating system (netstat, sockstat, etc.), TCP/IP Fingerprinting, Induce errors to find informative error messages\n\n\n- 2)Attack phase: Explore.\nStep overview: Survey the Application The attacker surveys the target application, possibly as a valid and authenticated user\nPossible techniques to use: Spidering web sites for all available links, Inventory all application inputs\n\n\n- 3)Attack phase: Experiment.\nStep overview: Attempt delimiters in inputs The attacker systematically attempts variations of delimiters on known inputs, observing the application's response each time.\nPossible techniques to use: Inject command delimiters using network packet injection tools (netcat, nemesis, etc.), Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.), Enter command delimiters directly in input fields.\n\n\n- 4)Attack phase: Exploit.\nStep overview: Use malicious command delimiters The attacker uses combinations of payload and carefully placed command delimiters to attack the software.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Assess Target Runtime Environment In situations where the runtime environment is not implicitly known, the attacker makes connections to the target system and tries to determine the system's runtime environment. Knowing the environment is vital to choosing the correct delimiters.\nPossible techniques to use: Port mapping using network connection-based software (e.g., nmap, nessus, etc.), Port mapping by exploring the operating system (netstat, sockstat, etc.), TCP/IP Fingerprinting, Induce errors to find informative error messages\n\n",
        "2)Attack phase: Explore.\nStep overview: Survey the Application The attacker surveys the target application, possibly as a valid and authenticated user\nPossible techniques to use: Spidering web sites for all available links, Inventory all application inputs\n\n",
        "3)Attack phase: Experiment.\nStep overview: Attempt delimiters in inputs The attacker systematically attempts variations of delimiters on known inputs, observing the application's response each time.\nPossible techniques to use: Inject command delimiters using network packet injection tools (netcat, nemesis, etc.), Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.), Enter command delimiters directly in input fields.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Use malicious command delimiters The attacker uses combinations of payload and carefully placed command delimiters to attack the software.\n\n"
      ],
      "@Name": "Command Delimiters"
    }
  },
  {
    "instruction": "Given attack pattern: Using Malicious Files.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Using Malicious Files are: 1)Attack phase: Explore.\nStep overview: Determine File/Directory Configuration The adversary looks for misconfigured files or directories on a system that might give executable access to an overly broad group of users.\nPossible techniques to use: Through shell access to a system, use the command \"ls -l\" to view permissions for files and directories.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Upload Malicious Files If the adversary discovers a directory that has executable permissions, they will attempt to upload a malicious file to execute.\nPossible techniques to use: Upload a malicious file through a misconfigured FTP server.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Execute Malicious File The adversary either executes the uploaded malicious file, or executes an existing file that has been misconfigured to allow executable access to the adversary.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine File/Directory Configuration The adversary looks for misconfigured files or directories on a system that might give executable access to an overly broad group of users.\nPossible techniques to use: Through shell access to a system, use the command \"ls -l\" to view permissions for files and directories.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Upload Malicious Files If the adversary discovers a directory that has executable permissions, they will attempt to upload a malicious file to execute.\nPossible techniques to use: Upload a malicious file through a misconfigured FTP server.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Execute Malicious File The adversary either executes the uploaded malicious file, or executes an existing file that has been misconfigured to allow executable access to the adversary.\n\n"
      ],
      "@Name": "Using Malicious Files"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Accessing/Intercepting/Modifying HTTP Cookies",
    "context": "",
    "output": "The execution flow for Accessing/Intercepting/Modifying HTTP Cookies is the following: 1)Attack phase: Explore.\nStep overview: Obtain copy of cookie The adversary first needs to obtain a copy of the cookie. The adversary may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.\nPossible techniques to use: Sniff cookie using a network sniffer such as Wireshark, Obtain cookie using a utility such as the Firefox Cookie Manager, Chrome DevTools or AnEC Cookie Editor., Steal cookie via a cross-site scripting attack., Guess cookie contents if it contains predictable information.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Obtain sensitive information from cookie The adversary may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.\nPossible techniques to use: If cookie shows any signs of being encoded using a standard scheme such as base64, decode it., Analyze the cookie's contents to determine whether it contains any sensitive information.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Modify cookie to subvert security controls. The adversary may be able to modify or replace cookies to bypass security controls in the application.\nPossible techniques to use: Modify logical parts of cookie and send it back to server to observe the effects., Modify numeric parts of cookie arithmetically and send it back to server to observe the effects., Modify cookie bitwise and send it back to server to observe the effects., Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a \"points balance\" for a given user where the points have some value. The user may spend their points and then replace their cookie with an older one to restore their balance.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Obtain copy of cookie The adversary first needs to obtain a copy of the cookie. The adversary may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.\nPossible techniques to use: Sniff cookie using a network sniffer such as Wireshark, Obtain cookie using a utility such as the Firefox Cookie Manager, Chrome DevTools or AnEC Cookie Editor., Steal cookie via a cross-site scripting attack., Guess cookie contents if it contains predictable information.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Obtain sensitive information from cookie The adversary may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.\nPossible techniques to use: If cookie shows any signs of being encoded using a standard scheme such as base64, decode it., Analyze the cookie's contents to determine whether it contains any sensitive information.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Modify cookie to subvert security controls. The adversary may be able to modify or replace cookies to bypass security controls in the application.\nPossible techniques to use: Modify logical parts of cookie and send it back to server to observe the effects., Modify numeric parts of cookie arithmetically and send it back to server to observe the effects., Modify cookie bitwise and send it back to server to observe the effects., Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a \"points balance\" for a given user where the points have some value. The user may spend their points and then replace their cookie with an older one to restore their balance.\n\n"
      ],
      "@Name": "Accessing/Intercepting/Modifying HTTP Cookies"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Install Malicious Extension",
    "context": "",
    "output": "Here are the steps to implement Install Malicious Extension:\n1)Attack phase: Explore.\nStep overview: Identify target(s) The adversary must first identify target software that allows for extensions/plugins and which they wish to exploit, such as a web browser or desktop application. To increase the attack space, this will often be popular software with a large user-base.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Create malicious extension Having identified a suitable target, the adversary crafts a malicious extension/plugin that can be installed by the underlying target software. This malware may be targeted to execute on specific operating systems or be operating system agnostic.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Install malicious extension The malicious extension/plugin is installed by the underlying target software and executes the adversary-created malware, resulting in a variety of negative technical impacts.\nPossible techniques to use: Adversary-Installed: Having already compromised the target system, the adversary simply installs the malicious extension/plugin themself., User-Installed: The adversary tricks the user into installing the malicious extension/plugin, via means such as social engineering, or may upload the malware on a reputable extension/plugin hosting site and wait for unknowing victims to install the malicious component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target(s) The adversary must first identify target software that allows for extensions/plugins and which they wish to exploit, such as a web browser or desktop application. To increase the attack space, this will often be popular software with a large user-base.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Create malicious extension Having identified a suitable target, the adversary crafts a malicious extension/plugin that can be installed by the underlying target software. This malware may be targeted to execute on specific operating systems or be operating system agnostic.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Install malicious extension The malicious extension/plugin is installed by the underlying target software and executes the adversary-created malware, resulting in a variety of negative technical impacts.\nPossible techniques to use: Adversary-Installed: Having already compromised the target system, the adversary simply installs the malicious extension/plugin themself., User-Installed: The adversary tricks the user into installing the malicious extension/plugin, via means such as social engineering, or may upload the malware on a reputable extension/plugin hosting site and wait for unknowing victims to install the malicious component.\n\n"
      ],
      "@Name": "Install Malicious Extension"
    }
  },
  {
    "instruction": "Given attack pattern: Session Hijacking.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Session Hijacking are: 1)Attack phase: Explore.\nStep overview: Discover Existing Session Token Through varrying means, an adversary will discover and store an existing session token for some other authenticated user session.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Insert Found Session Token The attacker attempts to insert a found session token into communication with the targeted application to confirm viability for exploitation.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Session Token Exploitation The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Discover Existing Session Token Through varrying means, an adversary will discover and store an existing session token for some other authenticated user session.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Insert Found Session Token The attacker attempts to insert a found session token into communication with the targeted application to confirm viability for exploitation.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Session Token Exploitation The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.\n\n"
      ],
      "@Name": "Session Hijacking"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - XSS Targeting Non-Script Elements",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side non-script element. These non-script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.\nPossible techniques to use: Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS vulnerability The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.)., Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.)., Use a proxy tool to record results of the created requests.\n\n\n3)Attack phase: Experiment.\nStep overview: Create malicious XSS content Once the adversary has determined which entry points are vulnerable to XSS, they will interact with the web application to store the malicious content. Because of the nature of this attack, it is mostly carried out through stored XSS, although it is possible to perform this attack using reflected XSS. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.\nPossible techniques to use: Store a malicious script on a page, disguised as a non-script element, that will execute when viewed by the victim., Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.\n\n\n4)Attack phase: Exploit.\nStep overview: Get victim to view stored content In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.\nPossible techniques to use: Send a phishing email to the victim containing a URL that will direct them to the malicious stored content., Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side non-script element. These non-script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.\nPossible techniques to use: Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS vulnerability The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.)., Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.)., Use a proxy tool to record results of the created requests.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Create malicious XSS content Once the adversary has determined which entry points are vulnerable to XSS, they will interact with the web application to store the malicious content. Because of the nature of this attack, it is mostly carried out through stored XSS, although it is possible to perform this attack using reflected XSS. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.\nPossible techniques to use: Store a malicious script on a page, disguised as a non-script element, that will execute when viewed by the victim., Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Get victim to view stored content In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.\nPossible techniques to use: Send a phishing email to the victim containing a URL that will direct them to the malicious stored content., Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.\n\n"
      ],
      "@Name": "XSS Targeting Non-Script Elements"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Forceful Browsing",
    "context": "",
    "output": "Execution Flow:\nName:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Forceful Browsing"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Search Order Hijacking",
    "context": "",
    "output": "The execution flow for Search Order Hijacking is the following: 1)Attack phase: Explore.\nStep overview: Identify target general susceptibility An attacker uses an automated tool or manually finds whether the target application uses dynamically linked libraries and the configuration file or look up table (such as Procedure Linkage Table) which contains the entries for dynamically linked libraries.\nPossible techniques to use: The attacker uses a tool such as the OSX \"otool\" utility or manually probes whether the target application uses dynamically linked libraries., The attacker finds the configuration files containing the entries to the dynamically linked libraries and modifies the entries to point to the malicious libraries the attacker crafted.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Craft malicious libraries The attacker uses knowledge gained in the Explore phase to craft malicious libraries that they will redirect the target to leverage. These malicious libraries could have the same APIs as the legitimate library and additional malicious code.\nPossible techniques to use: The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using \"sleep(2)\" and \"usleep()\" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Redirect the access to libraries to the malicious libraries The attacker redirects the target to the malicious libraries they crafted in the Experiment phase. The attacker will be able to force the targeted application to execute arbitrary code when the application attempts to access the legitimate libraries.\nPossible techniques to use: The attacker modifies the entries in the configuration files pointing to the malicious libraries they crafted., The attacker leverages symlink/timing issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-132., The attacker leverages file search path order issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-38.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target general susceptibility An attacker uses an automated tool or manually finds whether the target application uses dynamically linked libraries and the configuration file or look up table (such as Procedure Linkage Table) which contains the entries for dynamically linked libraries.\nPossible techniques to use: The attacker uses a tool such as the OSX \"otool\" utility or manually probes whether the target application uses dynamically linked libraries., The attacker finds the configuration files containing the entries to the dynamically linked libraries and modifies the entries to point to the malicious libraries the attacker crafted.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Craft malicious libraries The attacker uses knowledge gained in the Explore phase to craft malicious libraries that they will redirect the target to leverage. These malicious libraries could have the same APIs as the legitimate library and additional malicious code.\nPossible techniques to use: The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using \"sleep(2)\" and \"usleep()\" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Redirect the access to libraries to the malicious libraries The attacker redirects the target to the malicious libraries they crafted in the Experiment phase. The attacker will be able to force the targeted application to execute arbitrary code when the application attempts to access the legitimate libraries.\nPossible techniques to use: The attacker modifies the entries in the configuration files pointing to the malicious libraries they crafted., The attacker leverages symlink/timing issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-132., The attacker leverages file search path order issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-38.\n\n"
      ],
      "@Name": "Search Order Hijacking"
    }
  },
  {
    "instruction": "Given attack pattern: Screen Temporary Files for Sensitive Information.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Screen Temporary Files for Sensitive Information are: 1)Attack phase: Explore.\nStep overview: Look for temporary files in target application An adversary will try to discover temporary files in a target application. Knowledge of where the temporary files are being stored is important information.\n\n\n2)Attack phase: Experiment.\nStep overview: Attempt to read temporary files An adversary will attempt to read any temporary files they may have discovered through normal means.\nPossible techniques to use: Attempt to get the file by querying the file path to a web server, Using a remote shell into an application, read temporary files and send out information remotely if necessary, Recover temporary information from a user's browser cache\n\n\n3)Attack phase: Exploit.\nStep overview: Use function weaknesses to gain access to temporary files If normal means to read temporary files did not work, an adversary will attempt to exploit weak temporary file functions to gain access to temporary files.\nPossible techniques to use: Some C functions such as tmpnam(), tempnam(), and mktemp() will create a temporary file with a unique name, but do not stop an adversary from creating a file of the same name before it is opened by the application. Because these functions do not create file names that are sufficiently random, an adversary will try to make a file of the same name, causing a collision, and possibly altering file permissions for the temporary file so that it is able to be read., Similar to the last technique, an adversary might also create a file name collision using a linked file in a unix system such that the temporary file contents written out by the application write to a file of the adversaries choosing, allowing them to read the file contents.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Look for temporary files in target application An adversary will try to discover temporary files in a target application. Knowledge of where the temporary files are being stored is important information.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attempt to read temporary files An adversary will attempt to read any temporary files they may have discovered through normal means.\nPossible techniques to use: Attempt to get the file by querying the file path to a web server, Using a remote shell into an application, read temporary files and send out information remotely if necessary, Recover temporary information from a user's browser cache\n\n",
        "3)Attack phase: Exploit.\nStep overview: Use function weaknesses to gain access to temporary files If normal means to read temporary files did not work, an adversary will attempt to exploit weak temporary file functions to gain access to temporary files.\nPossible techniques to use: Some C functions such as tmpnam(), tempnam(), and mktemp() will create a temporary file with a unique name, but do not stop an adversary from creating a file of the same name before it is opened by the application. Because these functions do not create file names that are sufficiently random, an adversary will try to make a file of the same name, causing a collision, and possibly altering file permissions for the temporary file so that it is able to be read., Similar to the last technique, an adversary might also create a file name collision using a linked file in a unix system such that the temporary file contents written out by the application write to a file of the adversaries choosing, allowing them to read the file contents.\n\n"
      ],
      "@Name": "Screen Temporary Files for Sensitive Information"
    }
  },
  {
    "instruction": "List the execution flow related to capec: TCP Flood",
    "context": "",
    "output": "Execution Flow:\nName:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP Flood"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Transparent Proxy Abuse",
    "context": "",
    "output": "Execution Flow:\nName:Functionality Bypass\nDescription: An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Functionality Bypass\nDescription: An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Transparent Proxy Abuse"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Adversary in the Middle (AiTM)",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Determine Communication Mechanism The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.\nPossible techniques to use: Perform a sniffing attack and observe communication to determine a communication protocol., Look for application documentation that might describe a communication mechanism used by a target.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Position In Between Targets The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.\nPossible techniques to use: Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client., Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Use Intercepted Data Maliciously The adversary observes, filters, or alters passed data of its choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.\nPossible techniques to use: Prevent some messages from reaching their destination, causing a denial of service.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine Communication Mechanism The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.\nPossible techniques to use: Perform a sniffing attack and observe communication to determine a communication protocol., Look for application documentation that might describe a communication mechanism used by a target.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Position In Between Targets The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.\nPossible techniques to use: Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client., Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Use Intercepted Data Maliciously The adversary observes, filters, or alters passed data of its choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.\nPossible techniques to use: Prevent some messages from reaching their destination, causing a denial of service.\n\n"
      ],
      "@Name": "Adversary in the Middle (AiTM)"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Find a vulnerable web service The adversary finds a web service that uses a vulnerable authentication scheme, where an authentication token is concatenated with the parameters of a request and then hashed\nPossible techniques to use: Read application documentation to learn about authentication schemes being used, Observe web service traffic to look for vulnerable authentication schemes\n\n\n2)Attack phase: Experiment.\nStep overview: Attempt adding padding to parameters An adversary tests if they can simply add padding to the parameters of a request such that the request is technically changed, with the hash remaining the same\nPossible techniques to use: Exploit the hash function extension / padding weakness with only padding to test the weakness\n\n\n3)Attack phase: Exploit.\nStep overview: Add malicious parameters to request Add malicious parameters to a captured request in addition to what is already present. Do this by exploiting the padding weakness of the hash function and send the request to the web service so that it believes it is authenticated and acts on the extra parameters.\nPossible techniques to use: Exploit the hash function extension / padding weakness by adding malicious parameters to a web service request such that it is still deemed authentic\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find a vulnerable web service The adversary finds a web service that uses a vulnerable authentication scheme, where an authentication token is concatenated with the parameters of a request and then hashed\nPossible techniques to use: Read application documentation to learn about authentication schemes being used, Observe web service traffic to look for vulnerable authentication schemes\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attempt adding padding to parameters An adversary tests if they can simply add padding to the parameters of a request such that the request is technically changed, with the hash remaining the same\nPossible techniques to use: Exploit the hash function extension / padding weakness with only padding to test the weakness\n\n",
        "3)Attack phase: Exploit.\nStep overview: Add malicious parameters to request Add malicious parameters to a captured request in addition to what is already present. Do this by exploiting the padding weakness of the hash function and send the request to the web service so that it believes it is authenticated and acts on the extra parameters.\nPossible techniques to use: Exploit the hash function extension / padding weakness by adding malicious parameters to a web service request such that it is still deemed authentic\n\n"
      ],
      "@Name": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Manipulating User-Controlled Variables",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Probe target application The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on.\n\n\n2)Attack phase: Experiment.\nStep overview: Find user-controlled variables Using the information found by probing the application, the adversary attempts to manipulate many user-controlled variables and observes the effects on the application. If the adversary notices any significant changes to the application, they will know that a certain variable is useful to the application.\nPossible techniques to use: Adversaries will try to alter many common variable names such as \"count\", \"tempFile\", \"i\", etc. The hope is that they can alter the flow of the application without knowing the inner-workings., Adversaries will try to alter known environment variables.\n\n\n3)Attack phase: Exploit.\nStep overview: Manipulate user-controlled variables Once the adversary has found a user-controller variable(s) that is important to the application, they will manipulate it to change the normal behavior in a way that benefits the adversary.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Probe target application The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find user-controlled variables Using the information found by probing the application, the adversary attempts to manipulate many user-controlled variables and observes the effects on the application. If the adversary notices any significant changes to the application, they will know that a certain variable is useful to the application.\nPossible techniques to use: Adversaries will try to alter many common variable names such as \"count\", \"tempFile\", \"i\", etc. The hope is that they can alter the flow of the application without knowing the inner-workings., Adversaries will try to alter known environment variables.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Manipulate user-controlled variables Once the adversary has found a user-controller variable(s) that is important to the application, they will manipulate it to change the normal behavior in a way that benefits the adversary.\n\n"
      ],
      "@Name": "Manipulating User-Controlled Variables"
    }
  },
  {
    "instruction": "Given attack pattern: Cross Zone Scripting.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Cross Zone Scripting are: 1)Attack phase: Explore.\nStep overview: Find systems susceptible to the attack Find systems that contain functionality that is accessed from both the internet zone and the local zone. There needs to be a way to supply input to that functionality from the internet zone and that original input needs to be used later on a page from a local zone.\nPossible techniques to use: Leverage knowledge of common local zone functionality on targeted platforms to guide attempted injection of code through relevant internet zone mechanisms. In some cases this may be due to standard system configurations enabling shared functionality between internet and local zones. The attacker can search for indicators that these standard configurations are in place.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Find the insertion point for the payload The attacker first needs to find some system functionality or possibly another weakness in the system (e.g. susceptibility to cross site scripting) that would provide the attacker with a mechanism to deliver the payload (i.e. the code to be executed) to the user. The location from which this code is executed in the user's browser needs to be within the local machine zone.\nPossible techniques to use: Finding weaknesses in functionality used by both privileged and unprivileged users.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Craft and inject the payload Develop the payload to be executed in the higher privileged zone in the user's browser. Inject the payload and attempt to lure the victim (if possible) into executing the functionality which unleashes the payload.\nPossible techniques to use: The attacker makes it as likely as possible that the vulnerable functionality into which they have injected the payload has a high likelihood of being used by the victim., Leverage cross-site scripting vulnerability to inject payload.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find systems susceptible to the attack Find systems that contain functionality that is accessed from both the internet zone and the local zone. There needs to be a way to supply input to that functionality from the internet zone and that original input needs to be used later on a page from a local zone.\nPossible techniques to use: Leverage knowledge of common local zone functionality on targeted platforms to guide attempted injection of code through relevant internet zone mechanisms. In some cases this may be due to standard system configurations enabling shared functionality between internet and local zones. The attacker can search for indicators that these standard configurations are in place.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find the insertion point for the payload The attacker first needs to find some system functionality or possibly another weakness in the system (e.g. susceptibility to cross site scripting) that would provide the attacker with a mechanism to deliver the payload (i.e. the code to be executed) to the user. The location from which this code is executed in the user's browser needs to be within the local machine zone.\nPossible techniques to use: Finding weaknesses in functionality used by both privileged and unprivileged users.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Craft and inject the payload Develop the payload to be executed in the higher privileged zone in the user's browser. Inject the payload and attempt to lure the victim (if possible) into executing the functionality which unleashes the payload.\nPossible techniques to use: The attacker makes it as likely as possible that the vulnerable functionality into which they have injected the payload has a high likelihood of being used by the victim., Leverage cross-site scripting vulnerability to inject payload.\n\n"
      ],
      "@Name": "Cross Zone Scripting"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Determine which user's credentials to capture Since this is a more targeted attack, an adversary will first identify a particular user they wish the capture the credentials of.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Deploy keylogger Once a user is identified, an adversary will deploy a keylogger to the user's system in one of many ways.\nPossible techniques to use: Send a phishing email with a malicious attachment that installs a keylogger on a user's system, Conceal a keylogger behind fake software and get the user to download the software, Get a user to click on a malicious URL that directs them to a webpage that will install a keylogger without their knowledge, Gain access to the user's system through a vulnerability and manually install a keylogger\n\n\n- 3)Attack phase: Experiment.\nStep overview: Record keystrokes Once the keylogger is deployed on the user's system, the adversary will record keystrokes over a period of time.\n\n\n- 4)Attack phase: Experiment.\nStep overview: Analyze data and determine credentials Using the captured keystrokes, the adversary will be able to determine the credentials of the user.\nPossible techniques to use: Search for repeated sequences that are following by the enter key, Search for repeated sequences that are not found in a dictionary, Search for several backspaces in a row. This could indicate a mistyped password. The correct password can then be inferred using the whole key sequence\n\n\n- 5)Attack phase: Exploit.\nStep overview: Use found credentials After the adversary has found the credentials for the target user, they will then use them to gain access to a system in order to perform some follow-up attack\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Capture Credentials via Keylogger",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine which user's credentials to capture Since this is a more targeted attack, an adversary will first identify a particular user they wish the capture the credentials of.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Deploy keylogger Once a user is identified, an adversary will deploy a keylogger to the user's system in one of many ways.\nPossible techniques to use: Send a phishing email with a malicious attachment that installs a keylogger on a user's system, Conceal a keylogger behind fake software and get the user to download the software, Get a user to click on a malicious URL that directs them to a webpage that will install a keylogger without their knowledge, Gain access to the user's system through a vulnerability and manually install a keylogger\n\n",
        "3)Attack phase: Experiment.\nStep overview: Record keystrokes Once the keylogger is deployed on the user's system, the adversary will record keystrokes over a period of time.\n\n",
        "4)Attack phase: Experiment.\nStep overview: Analyze data and determine credentials Using the captured keystrokes, the adversary will be able to determine the credentials of the user.\nPossible techniques to use: Search for repeated sequences that are following by the enter key, Search for repeated sequences that are not found in a dictionary, Search for several backspaces in a row. This could indicate a mistyped password. The correct password can then be inferred using the whole key sequence\n\n",
        "5)Attack phase: Exploit.\nStep overview: Use found credentials After the adversary has found the credentials for the target user, they will then use them to gain access to a system in order to perform some follow-up attack\n\n"
      ],
      "@Name": "Capture Credentials via Keylogger"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Find a REST-style application that uses SSL The adversary must first find a REST-style application that uses SSL to target. Because this attack is easier to carry out from inside of a server network, it is likely that an adversary could have inside knowledge of how services operate.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Insert a listener to sniff client-server communication The adversary inserts a listener that must exist beyond the point where SSL is terminated. This can be placed on the client side if it is believed that sensitive information is being sent to the client as a response, although most often the listener will be placed on the server side to listen for client authentication information.\nPossible techniques to use: Run wireshark or tcpdump on a device that is on the inside of a firewall, load balancer, or router of a network and capture traffic after SSL has been terminated\n\n\n- 3)Attack phase: Exploit.\nStep overview: Gather information passed in the clear If developers have not hashed or encrypted data sent in the sniffed request, the adversary will be able to read this data in the clear. Most commonly, they will now have a username or password that they can use to submit requests to the web service just as an authorized user\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Utilizing REST's Trust in the System Resource to Obtain Sensitive Data",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find a REST-style application that uses SSL The adversary must first find a REST-style application that uses SSL to target. Because this attack is easier to carry out from inside of a server network, it is likely that an adversary could have inside knowledge of how services operate.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Insert a listener to sniff client-server communication The adversary inserts a listener that must exist beyond the point where SSL is terminated. This can be placed on the client side if it is believed that sensitive information is being sent to the client as a response, although most often the listener will be placed on the server side to listen for client authentication information.\nPossible techniques to use: Run wireshark or tcpdump on a device that is on the inside of a firewall, load balancer, or router of a network and capture traffic after SSL has been terminated\n\n",
        "3)Attack phase: Exploit.\nStep overview: Gather information passed in the clear If developers have not hashed or encrypted data sent in the sniffed request, the adversary will be able to read this data in the clear. Most commonly, they will now have a username or password that they can use to submit requests to the web service just as an authorized user\n\n"
      ],
      "@Name": "Utilizing REST's Trust in the System Resource to Obtain Sensitive Data"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Absolute Path Traversal",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Fingerprinting of the operating system In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.\nPossible techniques to use: Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports., TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system., Induce errors to find informative error messages\n\n\n- 2)Attack phase: Explore.\nStep overview: Survey application Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.\nPossible techniques to use: Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms., Use a browser to manually explore a website and analyze how it is constructed. Many browser's plug-in are available to facilitate the analysis or automate the URL discovery.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Attempt variations on input parameters Using manual or automated means, an adversary attempts varying absolute file paths on all found user input locations and observes the responses.\nPossible techniques to use: Access common files in root directories such as \"/bin\", \"/boot\", \"/lib\", or \"/home\", Access a specific drive letter or windows volume letter by specifying \"C:dirname\" for example, Access a known Windows UNC share by specifying \"\\\\UNC\\share\\name\" for example\n\n\n- 4)Attack phase: Exploit.\nStep overview: Access, modify, or execute arbitrary files. An adversary injects absolute path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.\nPossible techniques to use: Manipulate file and its path by injecting absolute path sequences (e.g. \"/home/file.txt\")., Download files, modify files, or try to execute shell commands (with binary files).\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Fingerprinting of the operating system In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.\nPossible techniques to use: Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports., TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system., Induce errors to find informative error messages\n\n",
        "2)Attack phase: Explore.\nStep overview: Survey application Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.\nPossible techniques to use: Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms., Use a browser to manually explore a website and analyze how it is constructed. Many browser's plug-in are available to facilitate the analysis or automate the URL discovery.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Attempt variations on input parameters Using manual or automated means, an adversary attempts varying absolute file paths on all found user input locations and observes the responses.\nPossible techniques to use: Access common files in root directories such as \"/bin\", \"/boot\", \"/lib\", or \"/home\", Access a specific drive letter or windows volume letter by specifying \"C:dirname\" for example, Access a known Windows UNC share by specifying \"\\\\UNC\\share\\name\" for example\n\n",
        "4)Attack phase: Exploit.\nStep overview: Access, modify, or execute arbitrary files. An adversary injects absolute path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.\nPossible techniques to use: Manipulate file and its path by injecting absolute path sequences (e.g. \"/home/file.txt\")., Download files, modify files, or try to execute shell commands (with binary files).\n\n"
      ],
      "@Name": "Absolute Path Traversal"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Sniffing Attacks",
    "context": "",
    "output": "Execution Flow:\nName:Interception\nDescription: An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.\nNature of relationship: ChildOf\n\n\n- Name:Use of Known Kerberos Credentials\nDescription: An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Interception\nDescription: An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.\nNature of relationship: ChildOf\n\n",
        "Name:Use of Known Kerberos Credentials\nDescription: An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Sniffing Attacks"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Block Access to Libraries",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Determine what external libraries the application accesses.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Block access to the external libraries accessed by the application.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Monitor the behavior of the system to see if it goes into an insecure/inconsistent state.\n\n\n* 4)Attack phase: Experiment.\nStep overview: If the system does go into an insecure/inconsistent state, leverage that to obtain information about the system functionality or data, elevate access control, etc. The rest of this attack will depend on the context and the desired goal.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine what external libraries the application accesses.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Block access to the external libraries accessed by the application.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Monitor the behavior of the system to see if it goes into an insecure/inconsistent state.\n\n",
        "4)Attack phase: Experiment.\nStep overview: If the system does go into an insecure/inconsistent state, leverage that to obtain information about the system functionality or data, elevate access control, etc. The rest of this attack will depend on the context and the desired goal.\n\n"
      ],
      "@Name": "Block Access to Libraries"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Server Side Include (SSI) Injection",
    "context": "",
    "output": "The execution flow for Server Side Include (SSI) Injection is the following: 1)Attack phase: Explore.\nStep overview: Determine applicability The adversary determines whether server side includes are enabled on the target web server.\nPossible techniques to use: Look for popular page file names. The attacker will look for .shtml, .shtm, .asp, .aspx, and other well-known strings in URLs to help determine whether SSI functionality is enabled., Fetch .htaccess file. In Apache web server installations, the .htaccess file may enable server side includes in specific locations. In those cases, the .htaccess file lives inside the directory where SSI is enabled, and is theoretically fetchable from the web server. Although most web servers deny fetching the .htaccess file, a misconfigured server will allow it. Thus, an attacker will frequently try it.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Find Injection Point Look for user controllable input, including HTTP headers, that can carry server side include directives to the web server.\nPossible techniques to use: Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Inject SSI Using the found injection point, the adversary sends arbitrary code to be inlcuded by the application on the server side. They may then need to view a particular page in order to have the server execute the include directive and run a command or open a file on behalf of the adversary.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine applicability The adversary determines whether server side includes are enabled on the target web server.\nPossible techniques to use: Look for popular page file names. The attacker will look for .shtml, .shtm, .asp, .aspx, and other well-known strings in URLs to help determine whether SSI functionality is enabled., Fetch .htaccess file. In Apache web server installations, the .htaccess file may enable server side includes in specific locations. In those cases, the .htaccess file lives inside the directory where SSI is enabled, and is theoretically fetchable from the web server. Although most web servers deny fetching the .htaccess file, a misconfigured server will allow it. Thus, an attacker will frequently try it.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find Injection Point Look for user controllable input, including HTTP headers, that can carry server side include directives to the web server.\nPossible techniques to use: Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Inject SSI Using the found injection point, the adversary sends arbitrary code to be inlcuded by the application on the server side. They may then need to view a particular page in order to have the server execute the include directive and run a command or open a file on behalf of the adversary.\n\n"
      ],
      "@Name": "Server Side Include (SSI) Injection"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Replace Winlogon Helper DLL",
    "context": "",
    "output": "Execution Flow:\nName:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Replace Winlogon Helper DLL"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Buffer Overflow in an API Call",
    "context": "",
    "output": "The execution flow for Buffer Overflow in an API Call is the following: 1)Attack phase: Explore.\nStep overview: Identify target application The adversary, with knowledge of vulnerable libraries or shared code modules, identifies a target application or program that makes use of these.\n\n\n2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary attempts to use the API, and if they can they send a large amount of data to see if the buffer overflow attack really does work.\nPossible techniques to use: Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible.\n\n\n3)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts the content to be injected based on their knowledge of the vulnerability and their desired outcome. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n\n4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the API as the injection vector, the adversary injects the crafted overflow content into the buffer.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target application The adversary, with knowledge of vulnerable libraries or shared code modules, identifies a target application or program that makes use of these.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary attempts to use the API, and if they can they send a large amount of data to see if the buffer overflow attack really does work.\nPossible techniques to use: Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts the content to be injected based on their knowledge of the vulnerability and their desired outcome. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n",
        "4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the API as the injection vector, the adversary injects the crafted overflow content into the buffer.\n\n"
      ],
      "@Name": "Buffer Overflow in an API Call"
    }
  },
  {
    "instruction": "List the execution flow related to capec: XML Ping of the Death",
    "context": "",
    "output": "Execution Flow:\nName:XML Flood\nDescription: An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:XML Flood\nDescription: An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XML Ping of the Death"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: XSS Targeting URI Placeholders",
    "context": "",
    "output": "The execution flow for XSS Targeting URI Placeholders is the following: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms., Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.\n\n\n2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for reflected XSS vulnerability The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various payloads formatted as data URI schemes using base to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Use a list of XSS probe strings using different URI schemes to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier to trace the injected string back to the entry point., Use a proxy tool to record results of manual input of XSS probes in known URLs.\n\n\n3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Change a URL parameter to include a malicious payload formatted as a URI scheme, or use the URL returned when the URI scheme was given as input to the web application., Send information gathered from the malicious script to a remote endpoint.\n\n\n4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms., Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for reflected XSS vulnerability The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various payloads formatted as data URI schemes using base to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Use a list of XSS probe strings using different URI schemes to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier to trace the injected string back to the entry point., Use a proxy tool to record results of manual input of XSS probes in known URLs.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Change a URL parameter to include a malicious payload formatted as a URI scheme, or use the URL returned when the URI scheme was given as input to the web application., Send information gathered from the malicious script to a remote endpoint.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n"
      ],
      "@Name": "XSS Targeting URI Placeholders"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Subverting Environment Variable Values",
    "context": "",
    "output": "The execution flow for Subverting Environment Variable Values is the following: 1)Attack phase: Explore.\nStep overview: Probe target application The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on. Most importantly, the adversary tries to determine what environment variables might be used by the underlying software, or even the application itself.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Find user-controlled environment variables Using the information found by probing the application, the adversary attempts to manipulate any user-controlled environment variables they have found are being used by the application, or suspect are being used by the application, and observe the effects of these changes. If the adversary notices any significant changes to the application, they will know that a certain environment variable is important to the application behavior and indicates a possible attack vector.\nPossible techniques to use: Alter known environment variables such as \"$PATH\", \"$HOSTNAME\", or \"LD_LIBRARY_PATH\" and see if application behavior changes.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Manipulate user-controlled environment variables The adversary manipulates the found environment variable(s) to abuse the normal flow of processes or to gain access to privileged resources.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Probe target application The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on. Most importantly, the adversary tries to determine what environment variables might be used by the underlying software, or even the application itself.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find user-controlled environment variables Using the information found by probing the application, the adversary attempts to manipulate any user-controlled environment variables they have found are being used by the application, or suspect are being used by the application, and observe the effects of these changes. If the adversary notices any significant changes to the application, they will know that a certain environment variable is important to the application behavior and indicates a possible attack vector.\nPossible techniques to use: Alter known environment variables such as \"$PATH\", \"$HOSTNAME\", or \"LD_LIBRARY_PATH\" and see if application behavior changes.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Manipulate user-controlled environment variables The adversary manipulates the found environment variable(s) to abuse the normal flow of processes or to gain access to privileged resources.\n\n"
      ],
      "@Name": "Subverting Environment Variable Values"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Influence via Modes of Thinking",
    "context": "",
    "output": "Execution Flow:\nName:Influence via Psychological Principles\nDescription: The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Influence via Psychological Principles\nDescription: The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Influence via Modes of Thinking"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Collect Data from Registries",
    "context": "",
    "output": "Here are the steps to implement Collect Data from Registries:\n1)Attack phase: Explore.\nStep overview: Gain logical access to system An adversary must first gain logical access to the system it wants to gather registry information from,\nPossible techniques to use: Obtain user account credentials and access the system, Plant malware on the system that will give remote logical access to the adversary\n\n\n2)Attack phase: Experiment.\nStep overview: Determine if the permissions are correct Once logical access is gained, an adversary will determine if they have the proper permissions, or are authorized, to view registry information. If they do not, they will need to escalate privileges on the system through other means\n\n\n3)Attack phase: Experiment.\nStep overview: Peruse registry for information Once an adversary has access to a registry, they will gather all system-specific data and sensitive information that they deem useful.\n\n\n4)Attack phase: Exploit.\nStep overview: Follow-up attack Use any information or weaknesses found to carry out a follow-up attack\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Gain logical access to system An adversary must first gain logical access to the system it wants to gather registry information from,\nPossible techniques to use: Obtain user account credentials and access the system, Plant malware on the system that will give remote logical access to the adversary\n\n",
        "2)Attack phase: Experiment.\nStep overview: Determine if the permissions are correct Once logical access is gained, an adversary will determine if they have the proper permissions, or are authorized, to view registry information. If they do not, they will need to escalate privileges on the system through other means\n\n",
        "3)Attack phase: Experiment.\nStep overview: Peruse registry for information Once an adversary has access to a registry, they will gather all system-specific data and sensitive information that they deem useful.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Follow-up attack Use any information or weaknesses found to carry out a follow-up attack\n\n"
      ],
      "@Name": "Collect Data from Registries"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Password Brute Forcing",
    "context": "",
    "output": "Here are the steps to implement Password Brute Forcing:\n1)Attack phase: Explore.\nStep overview: Determine application's/system's password policy Determine the password policies of the target application/system.\nPossible techniques to use: Determine minimum and maximum allowed password lengths., Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.)., Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).\n\n\n- 2)Attack phase: Exploit.\nStep overview: Brute force password Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.\nPossible techniques to use: Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so., Perform an offline dictionary attack or a rainbow table attack against a known password hash.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine application's/system's password policy Determine the password policies of the target application/system.\nPossible techniques to use: Determine minimum and maximum allowed password lengths., Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.)., Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).\n\n",
        "2)Attack phase: Exploit.\nStep overview: Brute force password Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.\nPossible techniques to use: Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so., Perform an offline dictionary attack or a rainbow table attack against a known password hash.\n\n"
      ],
      "@Name": "Password Brute Forcing"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - HTTP Response Smuggling",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Survey network to identify target The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.\nPossible techniques to use: Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.\n\n\n1)Attack phase: Experiment.\nStep overview: Identify vulnerabilities in targeted HTTP infrastructure and technologies The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure to intended targets in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers.\n\n\n2)Attack phase: Experiment.\nStep overview: Cause differential HTTP responses by experimenting with identified HTTP Response vulnerabilities The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP response. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.\nPossible techniques to use: Continue the monitoring of HTTP traffic., Monitor HTTP traffic using a tool such as a Network Protocol Analyzer.\n\n\n1)Attack phase: Exploit.\nStep overview: Perform HTTP Response Smuggling attack Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.\nPossible techniques to use: Leverage techniques identified in the Experiment Phase.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey network to identify target The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.\nPossible techniques to use: Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.\n\n",
        "1)Attack phase: Experiment.\nStep overview: Identify vulnerabilities in targeted HTTP infrastructure and technologies The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure to intended targets in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Cause differential HTTP responses by experimenting with identified HTTP Response vulnerabilities The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP response. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.\nPossible techniques to use: Continue the monitoring of HTTP traffic., Monitor HTTP traffic using a tool such as a Network Protocol Analyzer.\n\n",
        "1)Attack phase: Exploit.\nStep overview: Perform HTTP Response Smuggling attack Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.\nPossible techniques to use: Leverage techniques identified in the Experiment Phase.\n\n"
      ],
      "@Name": "HTTP Response Smuggling"
    }
  },
  {
    "instruction": "Given attack pattern: Cross-Domain Search Timing.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Cross-Domain Search Timing are: 1)Attack phase: Explore.\nStep overview: Determine service to send cross domain requests to The adversary first determines which service they will be sending the requests to\n\n\n2)Attack phase: Experiment.\nStep overview: Send and time various cross domain requests Adversaries will send a variety of cross domain requests to the target, timing the time it takes for the target to respond. Although they won't be able to read the response, the adversary can use the time to infer information about what the service did upon receiving the request.\nPossible techniques to use: Using a GET request, leverage the \"img\" tag in conjunction with \"onload() / onerror()\" javascript events to time a response, Using a POST request, leverage the \"iframe\" element and use the \"onload()\" event to time a response\n\n\n3)Attack phase: Exploit.\nStep overview: Infer information from the response time After obtaining reponse times to various requests, the adversary will compare these times and infer potentially sensitive information. An example of this could be asking a service to retrieve information and random usernames. If one request took longer to process, it is likely that a user with that username exists, which could be useful knowledge to an adversary.\nPossible techniques to use: Compare timing of different requests to infer potentially sensitive information about a target service\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine service to send cross domain requests to The adversary first determines which service they will be sending the requests to\n\n",
        "2)Attack phase: Experiment.\nStep overview: Send and time various cross domain requests Adversaries will send a variety of cross domain requests to the target, timing the time it takes for the target to respond. Although they won't be able to read the response, the adversary can use the time to infer information about what the service did upon receiving the request.\nPossible techniques to use: Using a GET request, leverage the \"img\" tag in conjunction with \"onload() / onerror()\" javascript events to time a response, Using a POST request, leverage the \"iframe\" element and use the \"onload()\" event to time a response\n\n",
        "3)Attack phase: Exploit.\nStep overview: Infer information from the response time After obtaining reponse times to various requests, the adversary will compare these times and infer potentially sensitive information. An example of this could be asking a service to retrieve information and random usernames. If one request took longer to process, it is likely that a user with that username exists, which could be useful knowledge to an adversary.\nPossible techniques to use: Compare timing of different requests to infer potentially sensitive information about a target service\n\n"
      ],
      "@Name": "Cross-Domain Search Timing"
    }
  },
  {
    "instruction": "Given attack pattern: Inclusion of Code in Existing Process.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Inclusion of Code in Existing Process are: 1)Attack phase: Explore.\nStep overview: Determine target process The adversary determines a process with sufficient privileges that they wish to include code into.\nPossible techniques to use: On Windows, use the process explorer's security tab to see if a process is running with administror privileges., On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Attempt to include simple code with known output The adversary attempts to include very simple code into the existing process to determine if the code inclusion worked. The code will differ based on the approach used to include code into an existing process.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Include arbitrary code into existing process Once an adversary has determined that including code into the existing process is possible, they will include code for a targeted purpose, such as accessing that process's memory.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine target process The adversary determines a process with sufficient privileges that they wish to include code into.\nPossible techniques to use: On Windows, use the process explorer's security tab to see if a process is running with administror privileges., On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attempt to include simple code with known output The adversary attempts to include very simple code into the existing process to determine if the code inclusion worked. The code will differ based on the approach used to include code into an existing process.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Include arbitrary code into existing process Once an adversary has determined that including code into the existing process is possible, they will include code for a targeted purpose, such as accessing that process's memory.\n\n"
      ],
      "@Name": "Inclusion of Code in Existing Process"
    }
  },
  {
    "instruction": "List the execution flow related to capec: PHP Local File Inclusion",
    "context": "",
    "output": "Execution Flow:\nName:Local Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Local Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "PHP Local File Inclusion"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Leveraging Race Conditions via Symbolic Links",
    "context": "",
    "output": "Execution Flow:\nName:Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions\nDescription: This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions\nDescription: This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Leveraging Race Conditions via Symbolic Links"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Relative Path Traversal",
    "context": "",
    "output": "Execution Flow:\nName:Path Traversal\nDescription: An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Path Traversal\nDescription: An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Relative Path Traversal"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Web Application Fingerprinting",
    "context": "",
    "output": "Execution Flow:\nName:Application Fingerprinting\nDescription: An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Application Fingerprinting\nDescription: An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Web Application Fingerprinting"
    }
  },
  {
    "instruction": "Given attack pattern: Serialized Data External Linking.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Serialized Data External Linking are: 1)Attack phase: Explore.\nStep overview: Survey the target Using a browser or an automated tool, an adversary records all instances of web services that process requests with serialized data.\nPossible techniques to use: Use an automated tool to record all instances of URLs that process requests with serialized data., Use a browser to manually explore the website and analyze how the application processes serialized data requests.\n\n\n2)Attack phase: Exploit.\nStep overview: Craft malicious payload The adversary crafts malicious data message that contains references to sensitive files.\n\n\n3)Attack phase: Exploit.\nStep overview: Launch an External Linking attack Send the malicious crafted message containing the reference to a sensitive file to the target URL.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the target Using a browser or an automated tool, an adversary records all instances of web services that process requests with serialized data.\nPossible techniques to use: Use an automated tool to record all instances of URLs that process requests with serialized data., Use a browser to manually explore the website and analyze how the application processes serialized data requests.\n\n",
        "2)Attack phase: Exploit.\nStep overview: Craft malicious payload The adversary crafts malicious data message that contains references to sensitive files.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Launch an External Linking attack Send the malicious crafted message containing the reference to a sensitive file to the target URL.\n\n"
      ],
      "@Name": "Serialized Data External Linking"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Sniff Application Code",
    "context": "",
    "output": "Here are the steps to implement Sniff Application Code:\n1)Attack phase: Explore.\nStep overview: Set up a sniffer The adversary sets up a sniffer in the path between the server and the client and watches the traffic.\nPossible techniques to use: The adversary sets up a sniffer in the path between the server and the client.\n\n\n2)Attack phase: Exploit.\nStep overview: Capturing Application Code Bound During Patchingadversary knows that the computer/OS/application can request new applications to install, or it periodically checks for an available update. The adversary loads the sniffer set up during Explore phase, and extracts the application code from subsequent communication. The adversary then proceeds to reverse engineer the captured code.\nPossible techniques to use: adversary loads the sniffer to capture the application code bound during a dynamic update., The adversary proceeds to reverse engineer the captured code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Set up a sniffer The adversary sets up a sniffer in the path between the server and the client and watches the traffic.\nPossible techniques to use: The adversary sets up a sniffer in the path between the server and the client.\n\n",
        "2)Attack phase: Exploit.\nStep overview: Capturing Application Code Bound During Patchingadversary knows that the computer/OS/application can request new applications to install, or it periodically checks for an available update. The adversary loads the sniffer set up during Explore phase, and extracts the application code from subsequent communication. The adversary then proceeds to reverse engineer the captured code.\nPossible techniques to use: adversary loads the sniffer to capture the application code bound during a dynamic update., The adversary proceeds to reverse engineer the captured code.\n\n"
      ],
      "@Name": "Sniff Application Code"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Hijacking a privileged process",
    "context": "",
    "output": "Here are the steps to implement Hijacking a privileged process:\n1)Attack phase: Explore.\nStep overview: Find process with elevated priveleges The adversary probes for processes running with elevated privileges.\nPossible techniques to use: On Windows, use the process explorer's security tab to see if a process is running with administror privileges., On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user.\n\n\n2)Attack phase: Experiment.\nStep overview: Find vulnerability in running process The adversary looks for a vulnerability in the running process that would allow for arbitrary code execution with the privilege of the running process.\nPossible techniques to use: Look for improper input validation, Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data., Utilize system utilities that support process control that have been inadequately secured\n\n\n3)Attack phase: Exploit.\nStep overview: Execute arbitrary code The adversary exploits the vulnerability that they have found and hijacks the running process.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find process with elevated priveleges The adversary probes for processes running with elevated privileges.\nPossible techniques to use: On Windows, use the process explorer's security tab to see if a process is running with administror privileges., On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find vulnerability in running process The adversary looks for a vulnerability in the running process that would allow for arbitrary code execution with the privilege of the running process.\nPossible techniques to use: Look for improper input validation, Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data., Utilize system utilities that support process control that have been inadequately secured\n\n",
        "3)Attack phase: Exploit.\nStep overview: Execute arbitrary code The adversary exploits the vulnerability that they have found and hijacks the running process.\n\n"
      ],
      "@Name": "Hijacking a privileged process"
    }
  },
  {
    "instruction": "Given attack pattern: XML Routing Detour Attacks.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement XML Routing Detour Attacks are: 1)Attack phase: Explore.\nStep overview: Survey the target Using command line or an automated tool, an attacker records all instances of web services to process XML requests.\nPossible techniques to use: Use automated tool to record all instances to process XML requests or find exposed WSDL., Use tools to crawl WSDL\n\n\n2)Attack phase: Experiment.\nStep overview: Identify SOAP messages that have multiple state processing. Inspect instance to see whether the XML processing has multiple stages or not.\nPossible techniques to use: Inspect the SOAP message routing head to see whether the XML processing has multiple stages or not.\n\n\n3)Attack phase: Exploit.\nStep overview: Launch an XML routing detour attack The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message identified in the Explore phase. Thus, the attacker can route the XML message to the attacker controlled node (and access the message contents).\nPossible techniques to use: The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the target Using command line or an automated tool, an attacker records all instances of web services to process XML requests.\nPossible techniques to use: Use automated tool to record all instances to process XML requests or find exposed WSDL., Use tools to crawl WSDL\n\n",
        "2)Attack phase: Experiment.\nStep overview: Identify SOAP messages that have multiple state processing. Inspect instance to see whether the XML processing has multiple stages or not.\nPossible techniques to use: Inspect the SOAP message routing head to see whether the XML processing has multiple stages or not.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Launch an XML routing detour attack The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message identified in the Explore phase. Thus, the attacker can route the XML message to the attacker controlled node (and access the message contents).\nPossible techniques to use: The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message\n\n"
      ],
      "@Name": "XML Routing Detour Attacks"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - HTTP Request Splitting",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Survey network to identify target The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.\nPossible techniques to use: Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.\n\n\n* 1)Attack phase: Experiment.\nStep overview: Identify vulnerabilities in targeted HTTP infrastructure and technologies The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities The adversary sends maliciously crafted HTTP requests with custom strings and embedded web scripts and objects in HTTP headers to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.\nPossible techniques to use: Continue the monitoring of HTTP traffic., Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.\n\n\n* 1)Attack phase: Exploit.\nStep overview: Perform HTTP Request Splitting attack Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.\nPossible techniques to use: Leverage techniques identified in the Experiment Phase.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey network to identify target The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.\nPossible techniques to use: Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.\n\n",
        "1)Attack phase: Experiment.\nStep overview: Identify vulnerabilities in targeted HTTP infrastructure and technologies The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities The adversary sends maliciously crafted HTTP requests with custom strings and embedded web scripts and objects in HTTP headers to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.\nPossible techniques to use: Continue the monitoring of HTTP traffic., Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.\n\n",
        "1)Attack phase: Exploit.\nStep overview: Perform HTTP Request Splitting attack Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.\nPossible techniques to use: Leverage techniques identified in the Experiment Phase.\n\n"
      ],
      "@Name": "HTTP Request Splitting"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Web Application Fingerprinting",
    "context": "",
    "output": "The execution flow for Web Application Fingerprinting is the following: 1)Attack phase: Explore.\nStep overview: Request fingerprinting Use automated tools or send web server specific commands to web server and wait for server's response.\nPossible techniques to use: Use automated tools or send web server specific commands to web server and then receive server's response.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Increase the accuracy of server fingerprinting of Web servers Attacker usually needs to send several different commands to accurately identify the web server. Attacker can also use automated tools to send requests to the server. The responses of the server may be different in terms of protocol behavior.\nPossible techniques to use: Observe the ordering of the several HTTP response headers. The ordering of the header of each server may have unique identities., Send bad requests or requests of nonexistent pages to the server., Attacker takes existing automated tools to recognize the type and the version of the web server in use.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Identify Web Application Software After the web server platform software has been identified, the attacker start to identify web application technologies such as ASP, .NET, PHP and Java on the server.\nPossible techniques to use: Examine the file name extensions in URL, for example .php indicates PHP script interfaced with Apache server., Examine the HTTP Response Headers. This may leak information about software signatures, Examine Cookies that may contain server's software information., Check error pages.\n\n\n* 4)Attack phase: Experiment.\nStep overview: Identify Backend Database Version Determining the database engine type can assist attackers' attempt to successfully execute SQL injection. Some database API such as ODBC will show a database type as part of the driver information when reporting an error.\nPossible techniques to use: Use tools to send bogus SQL query to the server and check error pages.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Request fingerprinting Use automated tools or send web server specific commands to web server and wait for server's response.\nPossible techniques to use: Use automated tools or send web server specific commands to web server and then receive server's response.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Increase the accuracy of server fingerprinting of Web servers Attacker usually needs to send several different commands to accurately identify the web server. Attacker can also use automated tools to send requests to the server. The responses of the server may be different in terms of protocol behavior.\nPossible techniques to use: Observe the ordering of the several HTTP response headers. The ordering of the header of each server may have unique identities., Send bad requests or requests of nonexistent pages to the server., Attacker takes existing automated tools to recognize the type and the version of the web server in use.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Identify Web Application Software After the web server platform software has been identified, the attacker start to identify web application technologies such as ASP, .NET, PHP and Java on the server.\nPossible techniques to use: Examine the file name extensions in URL, for example .php indicates PHP script interfaced with Apache server., Examine the HTTP Response Headers. This may leak information about software signatures, Examine Cookies that may contain server's software information., Check error pages.\n\n",
        "4)Attack phase: Experiment.\nStep overview: Identify Backend Database Version Determining the database engine type can assist attackers' attempt to successfully execute SQL injection. Some database API such as ODBC will show a database type as part of the driver information when reporting an error.\nPossible techniques to use: Use tools to send bogus SQL query to the server and check error pages.\n\n"
      ],
      "@Name": "Web Application Fingerprinting"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Buffer Overflow via Environment Variables",
    "context": "",
    "output": "Execution Flow:\nName:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Buffer Overflow via Environment Variables"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Server Side Include (SSI) Injection",
    "context": "",
    "output": "Execution Flow:\nName:Remote Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n\nName:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Remote Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n",
        "Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Server Side Include (SSI) Injection"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Lifting Sensitive Data Embedded in Cache",
    "context": "",
    "output": "The execution flow for Lifting Sensitive Data Embedded in Cache is the following: 1)Attack phase: Explore.\nStep overview: Identify Application Cache An adversary first identifies an application that utilizes a cache. This could either be a web application storing data in a browser cache, or an application running on a separate machine. The adversary examines the cache to determine file permissions and possible encryption.\nPossible techniques to use: Use probing tools to look for application cache files on a machine., Use a web application and determine if any sensitive information is stored in browser cache.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Attempt to Access Cache Once the cache has been discovered, the adversary attempts to access the cached data. This often requires previous access to a machine hosting the target application.\nPossible techniques to use: Use priviledge escalation to access cache files that might have strict privileges., If the application cache is encrypted with weak encryption, attempt to understand the encryption technique and break the encryption.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Lift Sensitive Data from Cache After gaining access to cached data, an adversary looks for potentially sensitive information and stores it for malicious use. This sensitive data could possibly be used in follow-up attacks related to authentication or authorization.\nPossible techniques to use: Using a public computer, or gaining access to a victim's computer, examine browser cache to look for sensitive data left over from previous sessions.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify Application Cache An adversary first identifies an application that utilizes a cache. This could either be a web application storing data in a browser cache, or an application running on a separate machine. The adversary examines the cache to determine file permissions and possible encryption.\nPossible techniques to use: Use probing tools to look for application cache files on a machine., Use a web application and determine if any sensitive information is stored in browser cache.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attempt to Access Cache Once the cache has been discovered, the adversary attempts to access the cached data. This often requires previous access to a machine hosting the target application.\nPossible techniques to use: Use priviledge escalation to access cache files that might have strict privileges., If the application cache is encrypted with weak encryption, attempt to understand the encryption technique and break the encryption.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Lift Sensitive Data from Cache After gaining access to cached data, an adversary looks for potentially sensitive information and stores it for malicious use. This sensitive data could possibly be used in follow-up attacks related to authentication or authorization.\nPossible techniques to use: Using a public computer, or gaining access to a victim's computer, examine browser cache to look for sensitive data left over from previous sessions.\n\n"
      ],
      "@Name": "Lifting Sensitive Data Embedded in Cache"
    }
  },
  {
    "instruction": "List the execution flow related to capec: TCP SYN Scan",
    "context": "",
    "output": "Execution Flow:\nName:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP SYN Scan"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Using Slashes and URL Encoding Combined to Bypass Validation Logic",
    "context": "",
    "output": "Execution Flow:\nName:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Serialized Data with Nested Payloads",
    "context": "",
    "output": "The execution flow for Serialized Data with Nested Payloads is the following: 1)Attack phase: Explore.\nStep overview: An adversary determines the input data stream that is being processed by a data parser that supports using substitution on the victim's side.\n\n\n* 2)Attack phase: Exploit.\nStep overview: An adversary crafts input data that may have an adverse effect on the operation of the parser when the data is parsed on the victim's system.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: An adversary determines the input data stream that is being processed by a data parser that supports using substitution on the victim's side.\n\n",
        "2)Attack phase: Exploit.\nStep overview: An adversary crafts input data that may have an adverse effect on the operation of the parser when the data is parsed on the victim's system.\n\n"
      ],
      "@Name": "Serialized Data with Nested Payloads"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Block Logging to Central Repository",
    "context": "",
    "output": "Execution Flow:\nName:Infrastructure Manipulation\nDescription: An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Infrastructure Manipulation\nDescription: An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Block Logging to Central Repository"
    }
  },
  {
    "instruction": "Given attack pattern: Blind SQL Injection.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Blind SQL Injection are: 1)Attack phase: Explore.\nStep overview: Hypothesize SQL queries in application.\nPossible techniques to use: Research types of SQL queries and determine which ones could be used at various places in an application.\n\n\n- 2)Attack phase: Explore.\nStep overview: Determine how to inject information into the queries.\nPossible techniques to use: Add clauses to the SQL queries such that the query logic does not change., Add delays to the SQL queries in case server does not provide clear error messages (e.g. WAITFOR DELAY '0:0:10' in SQL Server or BENCHMARK(1000000000,MD5(1) in MySQL). If these can be injected into the queries, then the length of time that the server takes to respond reveals whether the query is injectable or not.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Determine user-controllable input susceptible to injection Determine the user-controllable input susceptible to injection. For each user-controllable input that the adversary suspects is vulnerable to SQL injection, attempt to inject the values determined in the previous step. If an error does not occur, then the adversary knows that the SQL injection was successful.\nPossible techniques to use: Use web browser to inject input through text fields or through HTTP GET parameters., Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc., Use network-level packet injection tools such as netcat to inject input, Use modified client (modified by reverse engineering) to inject input.\n\n\n- 4)Attack phase: Experiment.\nStep overview: Determine database type Determines the type of the database, such as MS SQL Server or Oracle or MySQL, using logical conditions as part of the injected queries\nPossible techniques to use: Try injecting a string containing char(0x31)=char(0x31) (this evaluates to 1=1 in SQL Server only), Try injecting a string containing 0x313D31 (this evaluates to 1=1 in MySQL only), Inject other database-specific commands into input fields susceptible to SQL Injection. The adversary can determine the type of database that is running by checking whether the query executed successfully or not (i.e. whether the adversary received a normal response from the server or not).\n\n\n- 5)Attack phase: Exploit.\nStep overview: Extract information about database schema Extract information about database schema by getting the database to answer yes/no questions about the schema.\nPossible techniques to use: Automatically extract database schema using a tool such as Absinthe., Manually perform the blind SQL Injection to extract desired information about the database schema.\n\n\n- 6)Attack phase: Exploit.\nStep overview: Exploit SQL Injection vulnerability Use the information obtained in the previous steps to successfully inject the database in order to bypass checks or modify, add, retrieve or delete data from the database\nPossible techniques to use: Use information about how to inject commands into SQL queries as well as information about the database schema to execute attacks such as dropping tables, inserting records, etc.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Hypothesize SQL queries in application.\nPossible techniques to use: Research types of SQL queries and determine which ones could be used at various places in an application.\n\n",
        "2)Attack phase: Explore.\nStep overview: Determine how to inject information into the queries.\nPossible techniques to use: Add clauses to the SQL queries such that the query logic does not change., Add delays to the SQL queries in case server does not provide clear error messages (e.g. WAITFOR DELAY '0:0:10' in SQL Server or BENCHMARK(1000000000,MD5(1) in MySQL). If these can be injected into the queries, then the length of time that the server takes to respond reveals whether the query is injectable or not.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Determine user-controllable input susceptible to injection Determine the user-controllable input susceptible to injection. For each user-controllable input that the adversary suspects is vulnerable to SQL injection, attempt to inject the values determined in the previous step. If an error does not occur, then the adversary knows that the SQL injection was successful.\nPossible techniques to use: Use web browser to inject input through text fields or through HTTP GET parameters., Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc., Use network-level packet injection tools such as netcat to inject input, Use modified client (modified by reverse engineering) to inject input.\n\n",
        "4)Attack phase: Experiment.\nStep overview: Determine database type Determines the type of the database, such as MS SQL Server or Oracle or MySQL, using logical conditions as part of the injected queries\nPossible techniques to use: Try injecting a string containing char(0x31)=char(0x31) (this evaluates to 1=1 in SQL Server only), Try injecting a string containing 0x313D31 (this evaluates to 1=1 in MySQL only), Inject other database-specific commands into input fields susceptible to SQL Injection. The adversary can determine the type of database that is running by checking whether the query executed successfully or not (i.e. whether the adversary received a normal response from the server or not).\n\n",
        "5)Attack phase: Exploit.\nStep overview: Extract information about database schema Extract information about database schema by getting the database to answer yes/no questions about the schema.\nPossible techniques to use: Automatically extract database schema using a tool such as Absinthe., Manually perform the blind SQL Injection to extract desired information about the database schema.\n\n",
        "6)Attack phase: Exploit.\nStep overview: Exploit SQL Injection vulnerability Use the information obtained in the previous steps to successfully inject the database in order to bypass checks or modify, add, retrieve or delete data from the database\nPossible techniques to use: Use information about how to inject commands into SQL queries as well as information about the database schema to execute attacks such as dropping tables, inserting records, etc.\n\n"
      ],
      "@Name": "Blind SQL Injection"
    }
  },
  {
    "instruction": "Given attack pattern: Argument Injection.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Argument Injection are: 1)Attack phase: Explore.\nStep overview: Discovery of potential injection vectors Using an automated tool or manual discovery, the attacker identifies services or methods with arguments that could potentially be used as injection vectors (OS, API, SQL procedures, etc.).\nPossible techniques to use: Manually cover the application and record the possible places where arguments could be passed into external systems., Use a spider, for web applications, to create a list of URLs and associated inputs.\n\n\n2)Attack phase: Experiment.\nStep overview: 1. Attempt variations on argument content Possibly using an automated tool, the attacker will perform injection variations of the arguments.\nPossible techniques to use: Use a very large list of probe strings in order to detect if there is a positive result, and, what type of system has been targeted (if obscure)., Use a proxy tool to record results, error messages and/or log if accessible.\n\n\n3)Attack phase: Exploit.\nStep overview: Abuse of the application The attacker injects specific syntax into a particular argument in order to generate a specific malicious effect in the targeted application.\nPossible techniques to use: Manually inject specific payload into targeted argument.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Discovery of potential injection vectors Using an automated tool or manual discovery, the attacker identifies services or methods with arguments that could potentially be used as injection vectors (OS, API, SQL procedures, etc.).\nPossible techniques to use: Manually cover the application and record the possible places where arguments could be passed into external systems., Use a spider, for web applications, to create a list of URLs and associated inputs.\n\n",
        "2)Attack phase: Experiment.\nStep overview: 1. Attempt variations on argument content Possibly using an automated tool, the attacker will perform injection variations of the arguments.\nPossible techniques to use: Use a very large list of probe strings in order to detect if there is a positive result, and, what type of system has been targeted (if obscure)., Use a proxy tool to record results, error messages and/or log if accessible.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Abuse of the application The attacker injects specific syntax into a particular argument in order to generate a specific malicious effect in the targeted application.\nPossible techniques to use: Manually inject specific payload into targeted argument.\n\n"
      ],
      "@Name": "Argument Injection"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Using Slashes and URL Encoding Combined to Bypass Validation Logic",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: The attacker accesses the server using a specific URL.\n\n\n2)Attack phase: Experiment.\nStep overview: The attacker tries to encode some special characters in the URL. The attacker find out that some characters are not filtered properly.\n\n\n3)Attack phase: Exploit.\nStep overview: The attacker crafts a malicious URL string request and sends it to the server.\n\n\n4)Attack phase: Exploit.\nStep overview: The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters have harmful consequences.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: The attacker accesses the server using a specific URL.\n\n",
        "2)Attack phase: Experiment.\nStep overview: The attacker tries to encode some special characters in the URL. The attacker find out that some characters are not filtered properly.\n\n",
        "3)Attack phase: Exploit.\nStep overview: The attacker crafts a malicious URL string request and sends it to the server.\n\n",
        "4)Attack phase: Exploit.\nStep overview: The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters have harmful consequences.\n\n"
      ],
      "@Name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic"
    }
  },
  {
    "instruction": "List the execution flow related to capec: XML Injection",
    "context": "",
    "output": "Execution Flow:\nName:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XML Injection"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Kerberoasting",
    "context": "",
    "output": "Execution Flow:\nName:Use of Known Kerberos Credentials\nDescription: An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.\nNature of relationship: ChildOf\n\n\n* Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Use of Known Kerberos Credentials\nDescription: An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.\nNature of relationship: ChildOf\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Kerberoasting"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Kerberoasting",
    "context": "",
    "output": "The execution flow for Kerberoasting is the following: 1)Attack phase: Explore.\nStep overview: Scan for user accounts with set SPN values\nPossible techniques to use: These can be found via Powershell or LDAP queries, as well as enumerating startup name accounts and other means.\n\n\n- 2)Attack phase: Explore.\nStep overview: Request service tickets\nPossible techniques to use: Using user account's SPN value, request other service tickets from Active Directory\n\n\n- 3)Attack phase: Experiment.\nStep overview: Extract ticket and save to disk\nPossible techniques to use: Certain tools like Mimikatz can extract local tickets and save them to memory/disk.\n\n\n- 4)Attack phase: Exploit.\nStep overview: Crack the encrypted ticket to harvest plain text credentials\nPossible techniques to use: Leverage a brute force application/script on the hashed value offline until cracked. The shorter the password, the easier it is to crack.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Scan for user accounts with set SPN values\nPossible techniques to use: These can be found via Powershell or LDAP queries, as well as enumerating startup name accounts and other means.\n\n",
        "2)Attack phase: Explore.\nStep overview: Request service tickets\nPossible techniques to use: Using user account's SPN value, request other service tickets from Active Directory\n\n",
        "3)Attack phase: Experiment.\nStep overview: Extract ticket and save to disk\nPossible techniques to use: Certain tools like Mimikatz can extract local tickets and save them to memory/disk.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Crack the encrypted ticket to harvest plain text credentials\nPossible techniques to use: Leverage a brute force application/script on the hashed value offline until cracked. The shorter the password, the easier it is to crack.\n\n"
      ],
      "@Name": "Kerberoasting"
    }
  },
  {
    "instruction": "List the execution flow related to capec: IMAP/SMTP Command Injection",
    "context": "",
    "output": "Execution Flow:\nName:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "IMAP/SMTP Command Injection"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - DTD Injection",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Survey the target Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.\nPossible techniques to use: Use an automated tool to record all instances of URLs to process XML requests., Use a browser to manually explore the website and analyze how the application processes XML requests.\n\n\n- 2)Attack phase: Explore.\nStep overview: Determine use of XML with DTDs Examine application input to identify XML input that leverage the use of one or more DTDs.\nPossible techniques to use: Examine any available documentation for the application that discusses expected XML input., Exercise the application using XML input with and without a DTD specified. Failure without DTD likely indicates use of DTD.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Craft and inject XML containg malicious DTD payload\nPossible techniques to use: Inject XML expansion attack that creates a Denial of Service impact on the targeted server using its DTD., Inject XML External Entity (XEE) attack that can cause the disclosure of confidential information, execute abitrary code, create a Denial of Service of the targeted server, or several other malicious impacts.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the target Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.\nPossible techniques to use: Use an automated tool to record all instances of URLs to process XML requests., Use a browser to manually explore the website and analyze how the application processes XML requests.\n\n",
        "2)Attack phase: Explore.\nStep overview: Determine use of XML with DTDs Examine application input to identify XML input that leverage the use of one or more DTDs.\nPossible techniques to use: Examine any available documentation for the application that discusses expected XML input., Exercise the application using XML input with and without a DTD specified. Failure without DTD likely indicates use of DTD.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Craft and inject XML containg malicious DTD payload\nPossible techniques to use: Inject XML expansion attack that creates a Denial of Service impact on the targeted server using its DTD., Inject XML External Entity (XEE) attack that can cause the disclosure of confidential information, execute abitrary code, create a Denial of Service of the targeted server, or several other malicious impacts.\n\n"
      ],
      "@Name": "DTD Injection"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Eavesdropping on a Monitor",
    "context": "",
    "output": "Here are the steps to implement Eavesdropping on a Monitor:\n1)Attack phase: Explore.\nStep overview: Survey Target The adversary surveys the target location, looking for exposed display cables and locations to hide an SDR. This also includes looking for display cables or monitors placed close to a wall, where the SDR can be in range while behind the wall. The adversary also attempts to discover the resolution and refresh rate of the targeted display.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Find target using SDR The adversary sets up an SDR near the target display cable or monitor. They use the SDR software to locate the corresponding frequency of the display cable. This is done by looking for interference peaks that change depending on what the screen is showing. The adversary notes down the possible frequencies of unintentional emission.\nPossible techniques to use: An adversary can make use of many different commercially available SDR devices which are easy to setup such as a HackRF, Ubertooth, RTL-SDR, and many others.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Visualize Monitor Image Once the SDR software has been used to identify the target, the adversary will record the transmissions and visualize the monitor image using these transmissions, which allows them to eavesdrop on the information visible on the monitor.\nPossible techniques to use: The TempestSDR software can be used in conjunction an SDR device to visualize the monitor image. The adversary will specify the known monitor resolution and refresh rate, or if those are not known they can use the provided auto-correlation graphs to help predict these values. The adversary will then try the different frequencies recorded from the experiment phase, looking for a viewing monitor display. Low pass filters and gain can be manipulated to make the display image clearer.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey Target The adversary surveys the target location, looking for exposed display cables and locations to hide an SDR. This also includes looking for display cables or monitors placed close to a wall, where the SDR can be in range while behind the wall. The adversary also attempts to discover the resolution and refresh rate of the targeted display.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find target using SDR The adversary sets up an SDR near the target display cable or monitor. They use the SDR software to locate the corresponding frequency of the display cable. This is done by looking for interference peaks that change depending on what the screen is showing. The adversary notes down the possible frequencies of unintentional emission.\nPossible techniques to use: An adversary can make use of many different commercially available SDR devices which are easy to setup such as a HackRF, Ubertooth, RTL-SDR, and many others.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Visualize Monitor Image Once the SDR software has been used to identify the target, the adversary will record the transmissions and visualize the monitor image using these transmissions, which allows them to eavesdrop on the information visible on the monitor.\nPossible techniques to use: The TempestSDR software can be used in conjunction an SDR device to visualize the monitor image. The adversary will specify the known monitor resolution and refresh rate, or if those are not known they can use the provided auto-correlation graphs to help predict these values. The adversary will then try the different frequencies recorded from the experiment phase, looking for a viewing monitor display. Low pass filters and gain can be manipulated to make the display image clearer.\n\n"
      ],
      "@Name": "Eavesdropping on a Monitor"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Expanding Control over the Operating System from the Database",
    "context": "",
    "output": "The execution flow for Expanding Control over the Operating System from the Database is the following: 1)Attack phase: Explore.\nStep overview: The adversary identifies a database management system running on a machine they would like to gain control over, or on a network they want to move laterally through.\n\n\n2)Attack phase: Experiment.\nStep overview: The adversary goes about the typical steps of an SQL injection and determines if an injection is possible.\n\n\n3)Attack phase: Experiment.\nStep overview: Once the Adversary determines that an SQL injection is possible, they must ensure that the requirements for the attack are met. These are a high privileged session user and batched query support. This is done in similar ways to discovering if an SQL injection is possible.\n\n\n4)Attack phase: Experiment.\nStep overview: If the requirements are met, based on the database management system that is running, the adversary will find or create user defined functions (UDFs) that can be loaded as DLLs. An example of a DLL can be found at https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql\n\n\n5)Attack phase: Experiment.\nStep overview: In order to load the DLL, the adversary must first find the path to the plugin directory. The command to achieve this is different based on the type of DBMS, but for MySQL, this can be achieved by running the command \"select @@plugin_dir\"\n\n\n6)Attack phase: Exploit.\nStep overview: The DLL is then moved into the previously found plugin directory so that the contained functions can be loaded. This can be done in a number of ways; loading from a network share, writing the entire hex encoded string to a file in the plugin directory, or loading the DLL into a table and then into a file. An example using MySQL to load the hex string is as follows. select 0x4d5a9000... into dump file \"{plugin directory}\\\\udf.dll\";\n\n\n6)Attack phase: Exploit.\nStep overview: Once the DLL is in the plugin directory, a command is then run to load the UDFs. An example of this in MySQL is \"create function sys_eval returns string soname 'udf.dll';\" The function sys_eval is specific to the example DLL listed above.\n\n\n6)Attack phase: Exploit.\nStep overview: Once the adversary has loaded the desired function(s), they will use these to execute arbitrary commands on the compromised system. This is done through a simple select command to the loaded UDF. For example: \"select sys_eval('dir');\". Because the prerequisite to this attack is that the database session user is a super user, this means that the adversary will be able to execute commands with elevated privileges.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: The adversary identifies a database management system running on a machine they would like to gain control over, or on a network they want to move laterally through.\n\n",
        "2)Attack phase: Experiment.\nStep overview: The adversary goes about the typical steps of an SQL injection and determines if an injection is possible.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Once the Adversary determines that an SQL injection is possible, they must ensure that the requirements for the attack are met. These are a high privileged session user and batched query support. This is done in similar ways to discovering if an SQL injection is possible.\n\n",
        "4)Attack phase: Experiment.\nStep overview: If the requirements are met, based on the database management system that is running, the adversary will find or create user defined functions (UDFs) that can be loaded as DLLs. An example of a DLL can be found at https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql\n\n",
        "5)Attack phase: Experiment.\nStep overview: In order to load the DLL, the adversary must first find the path to the plugin directory. The command to achieve this is different based on the type of DBMS, but for MySQL, this can be achieved by running the command \"select @@plugin_dir\"\n\n",
        "6)Attack phase: Exploit.\nStep overview: The DLL is then moved into the previously found plugin directory so that the contained functions can be loaded. This can be done in a number of ways; loading from a network share, writing the entire hex encoded string to a file in the plugin directory, or loading the DLL into a table and then into a file. An example using MySQL to load the hex string is as follows. select 0x4d5a9000... into dump file \"{plugin directory}\\\\udf.dll\";\n\n",
        "6)Attack phase: Exploit.\nStep overview: Once the DLL is in the plugin directory, a command is then run to load the UDFs. An example of this in MySQL is \"create function sys_eval returns string soname 'udf.dll';\" The function sys_eval is specific to the example DLL listed above.\n\n",
        "6)Attack phase: Exploit.\nStep overview: Once the adversary has loaded the desired function(s), they will use these to execute arbitrary commands on the compromised system. This is done through a simple select command to the loaded UDF. For example: \"select sys_eval('dir');\". Because the prerequisite to this attack is that the database session user is a super user, this means that the adversary will be able to execute commands with elevated privileges.\n\n"
      ],
      "@Name": "Expanding Control over the Operating System from the Database"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Exploitation of Transient Instruction Execution",
    "context": "",
    "output": "Here are the steps to implement Exploitation of Transient Instruction Execution:\n1)Attack phase: Explore.\nStep overview: Survey target application and relevant OS shared code libraries Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack.\nPossible techniques to use: Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system.\n\n\n- 2)Attack phase: Explore.\nStep overview: Explore cache and identify impacts Utilize tools to understand the impact of transient instruction execution upon address spaces and CPU operations.\nPossible techniques to use: Run OS or application specific tools that examine the contents of cache.\n\n\n- 1)Attack phase: Experiment.\nStep overview: Cause conditions for identified transient instruction set execution Adversary ensures that specific code/instructions of the target process are executed by CPU, so desired transient instructions are executed.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Cause specific secret data to be cached from restricted address space Executed instruction sets (gadgets) in target address space, initially executed via adversary-chosen transient instructions sets, establish covert channel and transfer secret data across this channel to cache.\nPossible techniques to use: Prediction-based - adversary trains CPU to incorrectly predict/speculate conditions for instruction execution to be true, hence executing adversary-chosen transient instructions. These prediction-based methods include: Pattern History Table (PHT)/Input Validation Bypass, Branch Target Buffer (BTB)/Branch Target Injection, Return Stack Buffer (RSB)/Return Address Injection, and Store To Load (STL)/Speculative Store Bypass., Exception/Fault-based - adversary has CPU execute transient instructions that raise an exception allowing inaccessible memory space to be accessed via out-of-order execution. These exception/fault-based methods include: Supervisor-only Bypass, Virtual Translation Bypass, System Register Bypass, FPU Register Bypass, Read-only Bypass, Protection Key Bypass, and Bounds Check Bypass.\n\n\n- 1)Attack phase: Exploit.\nStep overview: Perform covert channel attack to obtain/access secret data Adversary process code removes instructions/data from shared cache set, waits for target process to reinsert them back into cache, to identify location of secret data via a timing method. Adversary continuously repeat this process to identify and access entirety of targeted secret data.\nPossible techniques to use: Flush+Reload - adversary frequently flushes targeted memory cache line using a dedicated machine flush instruction, and uses another process to measure time taken for CPU to load victim secret data., Evict+Time - adversary causes victim to load target set into cache and measures time for victim process to load this data, setting a baseline. Adversary evicts a specified cache line and causes victim process to execute again, and measures any change in execution time, to determine if cache line was accessed., Prime+Probe - adversary primes cache by filling cache line(s) or set(s) with data, after some time victim process evicts this adversary data to replace it with secret data. The adversary then probes/accesses all the previously accessed cache lines detecting cache misses, which determine that their attacker data has been evicted and replaced with secret data from victim process.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey target application and relevant OS shared code libraries Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack.\nPossible techniques to use: Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system.\n\n",
        "2)Attack phase: Explore.\nStep overview: Explore cache and identify impacts Utilize tools to understand the impact of transient instruction execution upon address spaces and CPU operations.\nPossible techniques to use: Run OS or application specific tools that examine the contents of cache.\n\n",
        "1)Attack phase: Experiment.\nStep overview: Cause conditions for identified transient instruction set execution Adversary ensures that specific code/instructions of the target process are executed by CPU, so desired transient instructions are executed.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Cause specific secret data to be cached from restricted address space Executed instruction sets (gadgets) in target address space, initially executed via adversary-chosen transient instructions sets, establish covert channel and transfer secret data across this channel to cache.\nPossible techniques to use: Prediction-based - adversary trains CPU to incorrectly predict/speculate conditions for instruction execution to be true, hence executing adversary-chosen transient instructions. These prediction-based methods include: Pattern History Table (PHT)/Input Validation Bypass, Branch Target Buffer (BTB)/Branch Target Injection, Return Stack Buffer (RSB)/Return Address Injection, and Store To Load (STL)/Speculative Store Bypass., Exception/Fault-based - adversary has CPU execute transient instructions that raise an exception allowing inaccessible memory space to be accessed via out-of-order execution. These exception/fault-based methods include: Supervisor-only Bypass, Virtual Translation Bypass, System Register Bypass, FPU Register Bypass, Read-only Bypass, Protection Key Bypass, and Bounds Check Bypass.\n\n",
        "1)Attack phase: Exploit.\nStep overview: Perform covert channel attack to obtain/access secret data Adversary process code removes instructions/data from shared cache set, waits for target process to reinsert them back into cache, to identify location of secret data via a timing method. Adversary continuously repeat this process to identify and access entirety of targeted secret data.\nPossible techniques to use: Flush+Reload - adversary frequently flushes targeted memory cache line using a dedicated machine flush instruction, and uses another process to measure time taken for CPU to load victim secret data., Evict+Time - adversary causes victim to load target set into cache and measures time for victim process to load this data, setting a baseline. Adversary evicts a specified cache line and causes victim process to execute again, and measures any change in execution time, to determine if cache line was accessed., Prime+Probe - adversary primes cache by filling cache line(s) or set(s) with data, after some time victim process evicts this adversary data to replace it with secret data. The adversary then probes/accesses all the previously accessed cache lines detecting cache misses, which determine that their attacker data has been evicted and replaced with secret data from victim process.\n\n"
      ],
      "@Name": "Exploitation of Transient Instruction Execution"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Observe communication and inputs The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.\nPossible techniques to use: Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system., Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters., Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)\n\n\n2)Attack phase: Experiment.\nStep overview: Generate fuzzed inputs Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.\nPossible techniques to use: Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80)., Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.\n\n\n3)Attack phase: Experiment.\nStep overview: Observe the outcome Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that either provide user/sensitive data or give information about an expected template that could be used to produce this data.\n\n\n4)Attack phase: Exploit.\nStep overview: Craft exploit payloads If the logs did not reveal any user/sensitive data, an adversary will attempt to make the fuzzing inputs form to an expected template\nPossible techniques to use: Create variants of expected templates that request additional information, Create variants that exclude limiting clauses, Create variants that alter fields taht identify the requester in order to subvert access controls, Repeat different fuzzing variants until sensitive information is divulged\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Fuzzing for garnering other adjacent user/sensitive data",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Observe communication and inputs The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.\nPossible techniques to use: Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system., Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters., Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)\n\n",
        "2)Attack phase: Experiment.\nStep overview: Generate fuzzed inputs Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.\nPossible techniques to use: Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80)., Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Observe the outcome Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that either provide user/sensitive data or give information about an expected template that could be used to produce this data.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Craft exploit payloads If the logs did not reveal any user/sensitive data, an adversary will attempt to make the fuzzing inputs form to an expected template\nPossible techniques to use: Create variants of expected templates that request additional information, Create variants that exclude limiting clauses, Create variants that alter fields taht identify the requester in order to subvert access controls, Repeat different fuzzing variants until sensitive information is divulged\n\n"
      ],
      "@Name": "Fuzzing for garnering other adjacent user/sensitive data"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Overflow Binary Resource File",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Identify target software The adversary identifies software that uses external binary files in some way. This could be a file upload, downloading a file from a shared location, or other means.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary creates a malicious binary file by altering the header to make the file seem shorter than it is. Additional bytes are added to the end of the file to be placed in the overflowed location. The adversary then deploys the file to the software to determine if a buffer overflow was successful.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Craft overflow content Once the adversary has determined that this attack is viable, they will specially craft the binary file in a way that achieves the desired behavior. If the source code is available, the adversary can carefully craft the malicious file so that the return address is overwritten to an intended value. If the source code is not available, the adversary will iteratively alter the file in order to overwrite the return address correctly.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n\n* 4)Attack phase: Exploit.\nStep overview: Overflow the buffer Once the adversary has constructed a file that will effectively overflow the targeted software in the intended way. The file is deployed to the software, either by serving it directly to the software or placing it in a shared location for a victim to load into the software.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target software The adversary identifies software that uses external binary files in some way. This could be a file upload, downloading a file from a shared location, or other means.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary creates a malicious binary file by altering the header to make the file seem shorter than it is. Additional bytes are added to the end of the file to be placed in the overflowed location. The adversary then deploys the file to the software to determine if a buffer overflow was successful.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft overflow content Once the adversary has determined that this attack is viable, they will specially craft the binary file in a way that achieves the desired behavior. If the source code is available, the adversary can carefully craft the malicious file so that the return address is overwritten to an intended value. If the source code is not available, the adversary will iteratively alter the file in order to overwrite the return address correctly.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n",
        "4)Attack phase: Exploit.\nStep overview: Overflow the buffer Once the adversary has constructed a file that will effectively overflow the targeted software in the intended way. The file is deployed to the software, either by serving it directly to the software or placing it in a shared location for a victim to load into the software.\n\n"
      ],
      "@Name": "Overflow Binary Resource File"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Influence Perception of Authority",
    "context": "",
    "output": "Execution Flow:\nName:Influence Perception\nDescription: The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Influence Perception\nDescription: The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Influence Perception of Authority"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Target Influence via Framing",
    "context": "",
    "output": "Execution Flow:\nName:Manipulate Human Behavior\nDescription: An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulate Human Behavior\nDescription: An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Target Influence via Framing"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Screen Temporary Files for Sensitive Information",
    "context": "",
    "output": "Execution Flow:\nName:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Screen Temporary Files for Sensitive Information"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Identify Target The adversary identifies the target application and determines what libraries are being used.\nPossible techniques to use: Find public source code and identify library dependencies., Gain access to the system hosting the application and look for libraries in common locations.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Deploy Malicious Libraries The adversary crafts malicious libraries and deploys them on the system where the application is running, or in a remote location that can be loaded by the application.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Redirect Library Calls to Malicious Library Once the malicious library crafted by the adversary is deployed, the adversary will manipulate the flow of the application such that it calls the malicious library. This can be done in a variety of ways based on how the application is loading and calling libraries.\nPossible techniques to use: Poison the DNS cache of the system so that it loads a malicious library from a remote location hosted by the adversary instead of the legitimate location, Create a symlink that tricks the application into thinking that a malicious library is the legitimate library., Use DLL side-loading to place a malicious verison of a DLL in the windows directory.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Redirect Access to Libraries",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify Target The adversary identifies the target application and determines what libraries are being used.\nPossible techniques to use: Find public source code and identify library dependencies., Gain access to the system hosting the application and look for libraries in common locations.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Deploy Malicious Libraries The adversary crafts malicious libraries and deploys them on the system where the application is running, or in a remote location that can be loaded by the application.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Redirect Library Calls to Malicious Library Once the malicious library crafted by the adversary is deployed, the adversary will manipulate the flow of the application such that it calls the malicious library. This can be done in a variety of ways based on how the application is loading and calling libraries.\nPossible techniques to use: Poison the DNS cache of the system so that it loads a malicious library from a remote location hosted by the adversary instead of the legitimate location, Create a symlink that tricks the application into thinking that a malicious library is the legitimate library., Use DLL side-loading to place a malicious verison of a DLL in the windows directory.\n\n"
      ],
      "@Name": "Redirect Access to Libraries"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - XSS Through HTTP Query Strings",
    "context": "",
    "output": "Here are the steps to implement XSS Through HTTP Query Strings:\n1)Attack phase: Explore.\nStep overview: Survey the application for public links Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.\nPossible techniques to use: Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms., Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Probe public links for XSS vulnerability The adversary uses the public links gathered in the \"Explore\" phase as a target list and requests variations on the URLs they spidered before. They send parameters that include variations of payloads. They record all the responses from the server that include unmodified versions of their script.\nPossible techniques to use: Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier., Use a proxy tool to record results of manual input of XSS probes in known URLs.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Change a URL parameter to include a malicious script tag., Send information gathered from the malicious script to a remote endpoint.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for public links Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.\nPossible techniques to use: Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms., Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe public links for XSS vulnerability The adversary uses the public links gathered in the \"Explore\" phase as a target list and requests variations on the URLs they spidered before. They send parameters that include variations of payloads. They record all the responses from the server that include unmodified versions of their script.\nPossible techniques to use: Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier., Use a proxy tool to record results of manual input of XSS probes in known URLs.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Change a URL parameter to include a malicious script tag., Send information gathered from the malicious script to a remote endpoint.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n"
      ],
      "@Name": "XSS Through HTTP Query Strings"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Observe communication and inputs The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.\nPossible techniques to use: Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system., Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters., Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)\n\n\n* 2)Attack phase: Experiment.\nStep overview: Generate fuzzed inputs Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.\nPossible techniques to use: Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80)., Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Observe the outcome Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that might provide information to map the application\n\n\n* 4)Attack phase: Exploit.\nStep overview: Craft exploit payloads An adversary usually needs to modify the fuzzing parameters according to the observed error messages to get the desired sensitive information for the application. To defeat correlation, the adversary may try changing the origin IP addresses or client browser identification strings or start a new session from where they left off in obfuscating the attack.\nPossible techniques to use: Modify the parameters in the fuzzing tool according to the observed error messages. Repeat with enough parameters until the application has been sufficiently mapped., If the application rejects the large amount of fuzzing messages from the same host machine, the adversary needs to hide the attacks by changing the IP addresses or other credentials.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Fuzzing for application mapping",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Observe communication and inputs The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.\nPossible techniques to use: Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system., Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters., Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)\n\n",
        "2)Attack phase: Experiment.\nStep overview: Generate fuzzed inputs Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.\nPossible techniques to use: Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80)., Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Observe the outcome Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that might provide information to map the application\n\n",
        "4)Attack phase: Exploit.\nStep overview: Craft exploit payloads An adversary usually needs to modify the fuzzing parameters according to the observed error messages to get the desired sensitive information for the application. To defeat correlation, the adversary may try changing the origin IP addresses or client browser identification strings or start a new session from where they left off in obfuscating the attack.\nPossible techniques to use: Modify the parameters in the fuzzing tool according to the observed error messages. Repeat with enough parameters until the application has been sufficiently mapped., If the application rejects the large amount of fuzzing messages from the same host machine, the adversary needs to hide the attacks by changing the IP addresses or other credentials.\n\n"
      ],
      "@Name": "Fuzzing for application mapping"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Using Alternative IP Address Encodings",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Survey the application for IP addresses as user input Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application where IP addresses are used.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The adversary uses the entry points gathered in the \"Explore\" phase as a target list and attempts alternate IP address encodings, observing application behavior. The adversary will also attempt to access the application through an alternate IP address encoding to see if access control changes\nPossible techniques to use: Instead of using a URL, use the IP address that the URL resolves to, Specify a port directly to a URL input, Omit or add \"http://\" or \"https://\" to a URL to see if the application behaves differently\n\n\n* 3)Attack phase: Exploit.\nStep overview: Bypass access control Using an alternate IP address encoding, the adversary will either access the application or give the alternate encoding as input, bypassing access control restrictions.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for IP addresses as user input Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application where IP addresses are used.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The adversary uses the entry points gathered in the \"Explore\" phase as a target list and attempts alternate IP address encodings, observing application behavior. The adversary will also attempt to access the application through an alternate IP address encoding to see if access control changes\nPossible techniques to use: Instead of using a URL, use the IP address that the URL resolves to, Specify a port directly to a URL input, Omit or add \"http://\" or \"https://\" to a URL to see if the application behaves differently\n\n",
        "3)Attack phase: Exploit.\nStep overview: Bypass access control Using an alternate IP address encoding, the adversary will either access the application or give the alternate encoding as input, bypassing access control restrictions.\n\n"
      ],
      "@Name": "Using Alternative IP Address Encodings"
    }
  },
  {
    "instruction": "Given attack pattern: String Format Overflow in syslog().\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement String Format Overflow in syslog() are: 1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application or program to perform the buffer overflow on. In this attack, adversaries look for applications that use syslog() incorrectly.\n\n\n2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.\nPossible techniques to use: Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.\n\n\n3)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.\nPossible techniques to use: The formatting characters %s and %d are useful for observing memory and trying to print memory addresses. If an adversary has access to the log being written to they can observer this output and use it to help craft their attack., The formatting character %n is useful for adding extra data onto the buffer.\n\n\n4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the injection vector, the adversary supplies the program with the crafted format string injection, causing a buffer.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application or program to perform the buffer overflow on. In this attack, adversaries look for applications that use syslog() incorrectly.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.\nPossible techniques to use: Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.\nPossible techniques to use: The formatting characters %s and %d are useful for observing memory and trying to print memory addresses. If an adversary has access to the log being written to they can observer this output and use it to help craft their attack., The formatting character %n is useful for adding extra data onto the buffer.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the injection vector, the adversary supplies the program with the crafted format string injection, causing a buffer.\n\n"
      ],
      "@Name": "String Format Overflow in syslog()"
    }
  },
  {
    "instruction": "Given attack pattern: Rainbow Table Password Cracking.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Rainbow Table Password Cracking are: 1)Attack phase: Explore.\nStep overview: Determine application's/system's password policy Determine the password policies of the target application/system.\nPossible techniques to use: Determine minimum and maximum allowed password lengths., Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.)., Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).\n\n\n- 2)Attack phase: Explore.\nStep overview: Obtain password hashes An attacker gets access to the database table storing hashes of passwords or potentially just discovers a hash of an individual password.\nPossible techniques to use: Obtain copy of database table or flat file containing password hashes (by breaking access controls, using SQL Injection, etc.), Obtain password hashes from platform-specific storage locations (e.g. Windows registry), Sniff network packets containing password hashes.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Run rainbow table-based password cracking tool An attacker finds or writes a password cracking tool that uses a previously computed rainbow table for the right hashing algorithm. It helps if the attacker knows what hashing algorithm was used by the password system.\nPossible techniques to use: Run rainbow table-based password cracking tool such as Ophcrack or RainbowCrack. Reduction function must depend on application's/system's password policy.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine application's/system's password policy Determine the password policies of the target application/system.\nPossible techniques to use: Determine minimum and maximum allowed password lengths., Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.)., Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).\n\n",
        "2)Attack phase: Explore.\nStep overview: Obtain password hashes An attacker gets access to the database table storing hashes of passwords or potentially just discovers a hash of an individual password.\nPossible techniques to use: Obtain copy of database table or flat file containing password hashes (by breaking access controls, using SQL Injection, etc.), Obtain password hashes from platform-specific storage locations (e.g. Windows registry), Sniff network packets containing password hashes.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Run rainbow table-based password cracking tool An attacker finds or writes a password cracking tool that uses a previously computed rainbow table for the right hashing algorithm. It helps if the attacker knows what hashing algorithm was used by the password system.\nPossible techniques to use: Run rainbow table-based password cracking tool such as Ophcrack or RainbowCrack. Reduction function must depend on application's/system's password policy.\n\n"
      ],
      "@Name": "Rainbow Table Password Cracking"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Format String Injection",
    "context": "",
    "output": "Here are the steps to implement Format String Injection:\n1)Attack phase: Explore.\nStep overview: Survey application The adversary takes an inventory of the entry points of the application.\nPossible techniques to use: Spider web sites for all available links, List parameters, external variables, configuration files variables, etc. that are possibly used by the application.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Determine user-controllable input susceptible to format string injection Determine the user-controllable input susceptible to format string injection. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.\nPossible techniques to use: Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Try to exploit the Format String Injection vulnerability After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.\nPossible techniques to use: Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey application The adversary takes an inventory of the entry points of the application.\nPossible techniques to use: Spider web sites for all available links, List parameters, external variables, configuration files variables, etc. that are possibly used by the application.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Determine user-controllable input susceptible to format string injection Determine the user-controllable input susceptible to format string injection. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.\nPossible techniques to use: Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Try to exploit the Format String Injection vulnerability After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.\nPossible techniques to use: Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc.\n\n"
      ],
      "@Name": "Format String Injection"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
    "context": "",
    "output": "Execution Flow:\nName:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n\nName:Email Injection\nDescription: An adversary manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n",
        "Name:Email Injection\nDescription: An adversary manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads"
    }
  },
  {
    "instruction": "Given attack pattern: Adversary in the Browser (AiTB).\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Adversary in the Browser (AiTB) are: 1)Attack phase: Experiment.\nStep overview: The adversary tricks the victim into installing the Trojan Horse malware onto their system.\nPossible techniques to use: Conduct phishing attacks, drive-by malware installations, or masquerade malicious browser extensions as being legitimate.\n\n\n- 2)Attack phase: Experiment.\nStep overview: The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.\n\n\n- 3)Attack phase: Exploit.\nStep overview: The adversary observes, filters, or alters passed data of their choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Experiment.\nStep overview: The adversary tricks the victim into installing the Trojan Horse malware onto their system.\nPossible techniques to use: Conduct phishing attacks, drive-by malware installations, or masquerade malicious browser extensions as being legitimate.\n\n",
        "2)Attack phase: Experiment.\nStep overview: The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.\n\n",
        "3)Attack phase: Exploit.\nStep overview: The adversary observes, filters, or alters passed data of their choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.\n\n"
      ],
      "@Name": "Adversary in the Browser (AiTB)"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Serialized Data Parameter Blowup",
    "context": "",
    "output": "Execution Flow:\nName:Oversized Serialized Data Payloads\nDescription: An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Oversized Serialized Data Payloads\nDescription: An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Serialized Data Parameter Blowup"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Privilege Abuse",
    "context": "",
    "output": "Execution Flow:\nName:Server Side Request Forgery\nDescription: An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server\u2019s internal network, or to external third parties. If successful, the adversary\u2019s request will be made with the server\u2019s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server\u2019s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Server Side Request Forgery\nDescription: An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server\u2019s internal network, or to external third parties. If successful, the adversary\u2019s request will be made with the server\u2019s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server\u2019s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Privilege Abuse"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: WebView Injection",
    "context": "",
    "output": "The execution flow for WebView Injection is the following: 1)Attack phase: Explore.\nStep overview: Determine target web application An adversary first needs to determine what web application they wish to target.\nPossible techniques to use: Target web applications that require users to enter sensitive information., Target web applications that an adversary wishes to operate on behalf of a logged in user.\n\n\n2)Attack phase: Experiment.\nStep overview: Create malicious application An adversary creates an application, often mobile, that incorporates a WebView component to display the targeted web application. This malicious application needs to downloaded by a user, so adversaries will make this application useful in some way.\nPossible techniques to use: Create a 3rd party application that adds useful functionality to the targeted web application. Victims will download the application as a means of using the targeted web application., Create a fun game that at some point directs a user to the targeted web application. For example, prompt the user to buy in game currency by directing them to PayPal.\n\n\n3)Attack phase: Experiment.\nStep overview: Get the victim to download and run the application An adversary needs to get the victim to willingly download and run the application.\nPossible techniques to use: Pay for App Store advertisements, Promote the application on social media, either through accounts made by the adversary or by paying for other accounts to advertise.\n\n\n4)Attack phase: Exploit.\nStep overview: Inject malicious code Once the victim runs the malicious application and views the targeted web page in the WebView component, the malicious application will inject malicious JavaScript code into the web application. This is done by using WebView's loadURL() API, which can inject arbitrary JavaScript code into pages loaded by the WebView component with the same privileges. This is often done by adding a script tag to the document body with a src destination to a remote location that serves malicious JavaScript code.\nPossible techniques to use: Execute operations on the targeted web page on behalf of an authenticated user., Steal cookie information from the victim., Add in extra fields to the DOM in an attempt to get a user to divulge sensitive information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine target web application An adversary first needs to determine what web application they wish to target.\nPossible techniques to use: Target web applications that require users to enter sensitive information., Target web applications that an adversary wishes to operate on behalf of a logged in user.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Create malicious application An adversary creates an application, often mobile, that incorporates a WebView component to display the targeted web application. This malicious application needs to downloaded by a user, so adversaries will make this application useful in some way.\nPossible techniques to use: Create a 3rd party application that adds useful functionality to the targeted web application. Victims will download the application as a means of using the targeted web application., Create a fun game that at some point directs a user to the targeted web application. For example, prompt the user to buy in game currency by directing them to PayPal.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Get the victim to download and run the application An adversary needs to get the victim to willingly download and run the application.\nPossible techniques to use: Pay for App Store advertisements, Promote the application on social media, either through accounts made by the adversary or by paying for other accounts to advertise.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Inject malicious code Once the victim runs the malicious application and views the targeted web page in the WebView component, the malicious application will inject malicious JavaScript code into the web application. This is done by using WebView's loadURL() API, which can inject arbitrary JavaScript code into pages loaded by the WebView component with the same privileges. This is often done by adding a script tag to the document body with a src destination to a remote location that serves malicious JavaScript code.\nPossible techniques to use: Execute operations on the targeted web page on behalf of an authenticated user., Steal cookie information from the victim., Add in extra fields to the DOM in an attempt to get a user to divulge sensitive information.\n\n"
      ],
      "@Name": "WebView Injection"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Survey the target Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XPath queries.\nPossible techniques to use: Use an automated tool to record all instances of user-controllable input used to contruct XPath queries., Use a browser to manually explore the website and analyze how the application processes inputs.\n\n\n2)Attack phase: Explore.\nStep overview: Determine the tructure of queries Using manual or automated means, test inputs found for XPath weaknesses.\nPossible techniques to use: Use an automated tool automatically probe the inputs for XPath weaknesses., Manually probe the inputs using characters such as single quote (') that can cause XPath-releated errors, thus indicating an XPath weakness.\n\n\n3)Attack phase: Exploit.\nStep overview: Inject content into XPath query Craft malicious content containing XPath expressions that is not validated by the application and is executed as part of the XPath queries.\nPossible techniques to use: Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker., Use a combination of single quote (') and boolean expressions such as \"or 1=1\" to manipulate XPath logic., Use XPath functions in the malicious content such as \"string-length\", \"substring\", or \"count\" to gain information about the XML document structure being used.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "XPath Injection",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the target Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XPath queries.\nPossible techniques to use: Use an automated tool to record all instances of user-controllable input used to contruct XPath queries., Use a browser to manually explore the website and analyze how the application processes inputs.\n\n",
        "2)Attack phase: Explore.\nStep overview: Determine the tructure of queries Using manual or automated means, test inputs found for XPath weaknesses.\nPossible techniques to use: Use an automated tool automatically probe the inputs for XPath weaknesses., Manually probe the inputs using characters such as single quote (') that can cause XPath-releated errors, thus indicating an XPath weakness.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Inject content into XPath query Craft malicious content containing XPath expressions that is not validated by the application and is executed as part of the XPath queries.\nPossible techniques to use: Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker., Use a combination of single quote (') and boolean expressions such as \"or 1=1\" to manipulate XPath logic., Use XPath functions in the malicious content such as \"string-length\", \"substring\", or \"count\" to gain information about the XML document structure being used.\n\n"
      ],
      "@Name": "XPath Injection"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - DNS Rebinding",
    "context": "",
    "output": "Here are the steps to implement DNS Rebinding:\n1)Attack phase: Explore.\nStep overview: Identify potential DNS rebinding targets An adversary publishes content on their own server with their own name and DNS server. Attract HTTP traffic and explore rebinding vulnerabilities in browsers, flash players of old version.\nPossible techniques to use: Adversary uses Web advertisements to attract the victim to access adversary's DNS. Explore the versions of web browser or flash players in HTTP request.\n\n\n2)Attack phase: Experiment.\nStep overview: Establish initial target access to adversary DNS The first time the target accesses the adversary's content, the adversary's name must be resolved to an IP address. The adversary's DNS server performs this resolution, providing a short Time-To-Live (TTL) in order to prevent the target from caching the value.\n\n\n3)Attack phase: Experiment.\nStep overview: Rebind DNS resolution to target address The target makes a subsequent request to the adversary's content and the adversary's DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source.\n\n\n4)Attack phase: Experiment.\nStep overview: Determine exploitability of DNS rebinding access to target address The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the named internal addresses.\n\n\n5)Attack phase: Exploit.\nStep overview: Access & exfiltrate data within the victim's security zone The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the internal addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise.\nPossible techniques to use: Adversary attempts to use victim's browser as an HTTP proxy to other resources inside the target's security zone. This allows two IP addresses placed in the same security zone., Adversary tries to scan and access all internal hosts in victim's local network by sending multiple short-lived IP addresses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify potential DNS rebinding targets An adversary publishes content on their own server with their own name and DNS server. Attract HTTP traffic and explore rebinding vulnerabilities in browsers, flash players of old version.\nPossible techniques to use: Adversary uses Web advertisements to attract the victim to access adversary's DNS. Explore the versions of web browser or flash players in HTTP request.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Establish initial target access to adversary DNS The first time the target accesses the adversary's content, the adversary's name must be resolved to an IP address. The adversary's DNS server performs this resolution, providing a short Time-To-Live (TTL) in order to prevent the target from caching the value.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Rebind DNS resolution to target address The target makes a subsequent request to the adversary's content and the adversary's DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source.\n\n",
        "4)Attack phase: Experiment.\nStep overview: Determine exploitability of DNS rebinding access to target address The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the named internal addresses.\n\n",
        "5)Attack phase: Exploit.\nStep overview: Access & exfiltrate data within the victim's security zone The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the internal addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise.\nPossible techniques to use: Adversary attempts to use victim's browser as an HTTP proxy to other resources inside the target's security zone. This allows two IP addresses placed in the same security zone., Adversary tries to scan and access all internal hosts in victim's local network by sending multiple short-lived IP addresses.\n\n"
      ],
      "@Name": "DNS Rebinding"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Sniffing Attacks",
    "context": "",
    "output": "The execution flow for Sniffing Attacks is the following: 1)Attack phase: Explore.\nStep overview: Determine Communication Mechanism The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.\nPossible techniques to use: Look for application documentation that might describe a communication mechanism used by a target.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Position In Between Targets The adversary positions themselves somewhere in the middle of the two components. If the communication is encrypted, the adversary will need to act as a proxy and route traffic between the components, exploiting a flaw in the encryption mechanism. Otherwise, the adversary can just observe the communication at either end.\nPossible techniques to use: Use Wireshark or some other packet capturing tool to capture traffic on a network., Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client., Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Listen to Communication The adversary observes communication, but does not alter or block it. The adversary gains access to sensitive information and can potentially utilize this information in a malicious way.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine Communication Mechanism The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.\nPossible techniques to use: Look for application documentation that might describe a communication mechanism used by a target.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Position In Between Targets The adversary positions themselves somewhere in the middle of the two components. If the communication is encrypted, the adversary will need to act as a proxy and route traffic between the components, exploiting a flaw in the encryption mechanism. Otherwise, the adversary can just observe the communication at either end.\nPossible techniques to use: Use Wireshark or some other packet capturing tool to capture traffic on a network., Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client., Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Listen to Communication The adversary observes communication, but does not alter or block it. The adversary gains access to sensitive information and can potentially utilize this information in a malicious way.\n\n"
      ],
      "@Name": "Sniffing Attacks"
    }
  },
  {
    "instruction": "Given attack pattern: Leveraging Race Conditions via Symbolic Links.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Leveraging Race Conditions via Symbolic Links are: 1)Attack phase: Explore.\nStep overview: Verify that target host's platform supports symbolic links. This attack pattern is only applicable on platforms that support symbolic links.\nPossible techniques to use: Research target platform to determine whether it supports symbolic links., Create a symbolic link and ensure that it works as expected on the given platform.\n\n\n2)Attack phase: Explore.\nStep overview: Examine application's file I/O behavior Analyze the application's file I/O behavior to determine where it stores files, as well as the operations it performs to read/write files.\nPossible techniques to use: Use kernel tracing utility such as ktrace to monitor application behavior., Use debugging utility such as File Monitor to monitor the application's filesystem I/O calls, Watch temporary directories to see when temporary files are created, modified and deleted., Analyze source code for open-source systems like Linux, Apache, etc.\n\n\n3)Attack phase: Experiment.\nStep overview: Verify ability to write to filesystem The attacker verifies ability to write to the target host's file system.\nPossible techniques to use: Create a file that does not exist in the target directory (e.g. \"touch temp.txt\" in UNIX-like systems), On platforms that differentiate between file creation and file modification, if the target file that the application writes to already exists, attempt to modify it., Verify permissions on target directory\n\n\n4)Attack phase: Exploit.\nStep overview: Replace file with a symlink to a sensitive system file. Between the time that the application checks to see if a file exists (or if the user has access to it) and the time the application actually opens the file, the attacker replaces the file with a symlink to a sensitive system file.\nPossible techniques to use: Create an infinite loop containing commands such as \"rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat\". Wait for an instance where the following steps occur in the given order: (1) Application ensures that tempfile.dat exists and that the user has access to it, (2) \"rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat\", and (3) Application opens tempfile.dat for writing, and inadvertently opens /etc/shadow for writing instead., Use other techniques with debugging tools to replace the file between the time the application checks the file and the time the application opens it.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Verify that target host's platform supports symbolic links. This attack pattern is only applicable on platforms that support symbolic links.\nPossible techniques to use: Research target platform to determine whether it supports symbolic links., Create a symbolic link and ensure that it works as expected on the given platform.\n\n",
        "2)Attack phase: Explore.\nStep overview: Examine application's file I/O behavior Analyze the application's file I/O behavior to determine where it stores files, as well as the operations it performs to read/write files.\nPossible techniques to use: Use kernel tracing utility such as ktrace to monitor application behavior., Use debugging utility such as File Monitor to monitor the application's filesystem I/O calls, Watch temporary directories to see when temporary files are created, modified and deleted., Analyze source code for open-source systems like Linux, Apache, etc.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Verify ability to write to filesystem The attacker verifies ability to write to the target host's file system.\nPossible techniques to use: Create a file that does not exist in the target directory (e.g. \"touch temp.txt\" in UNIX-like systems), On platforms that differentiate between file creation and file modification, if the target file that the application writes to already exists, attempt to modify it., Verify permissions on target directory\n\n",
        "4)Attack phase: Exploit.\nStep overview: Replace file with a symlink to a sensitive system file. Between the time that the application checks to see if a file exists (or if the user has access to it) and the time the application actually opens the file, the attacker replaces the file with a symlink to a sensitive system file.\nPossible techniques to use: Create an infinite loop containing commands such as \"rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat\". Wait for an instance where the following steps occur in the given order: (1) Application ensures that tempfile.dat exists and that the user has access to it, (2) \"rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat\", and (3) Application opens tempfile.dat for writing, and inadvertently opens /etc/shadow for writing instead., Use other techniques with debugging tools to replace the file between the time the application checks the file and the time the application opens it.\n\n"
      ],
      "@Name": "Leveraging Race Conditions via Symbolic Links"
    }
  },
  {
    "instruction": "Given attack pattern: Embedding Scripts within Scripts.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Embedding Scripts within Scripts are: 1)Attack phase: Explore.\nStep overview: Spider Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side script element. These script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.\nPossible techniques to use: Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS vulnerability The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed., Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed., Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed., Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed., Use a proxy tool to record results of the created requests.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Steal session IDs, credentials, page content, etc. As the adversary succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.\nPossible techniques to use: Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the adversary., Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute appropriately.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Forceful browsing When the adversary targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).\nPossible techniques to use: Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site, Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).\n\n\n* 5)Attack phase: Exploit.\nStep overview: Content spoofing By manipulating the content, the adversary targets the information that the user would like to get from the website.\nPossible techniques to use: Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes adversary-modified invalid information to the user on the current web page.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Spider Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side script element. These script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.\nPossible techniques to use: Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS vulnerability The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed., Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed., Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed., Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed., Use a proxy tool to record results of the created requests.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Steal session IDs, credentials, page content, etc. As the adversary succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.\nPossible techniques to use: Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the adversary., Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute appropriately.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Forceful browsing When the adversary targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).\nPossible techniques to use: Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site, Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).\n\n",
        "5)Attack phase: Exploit.\nStep overview: Content spoofing By manipulating the content, the adversary targets the information that the user would like to get from the website.\nPossible techniques to use: Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes adversary-modified invalid information to the user on the current web page.\n\n"
      ],
      "@Name": "Embedding Scripts within Scripts"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Network Boundary Bridging",
    "context": "",
    "output": "Here are the steps to implement Network Boundary Bridging:\n1)Attack phase: Explore.\nStep overview: Identify potential targets An adversary identifies network boundary devices that can be compromised.\nPossible techniques to use: The adversary traces network traffic to identify which devices the traffic flows through. Additionally, the adversary can identify devices using fingerprinting methods or locating the management page to determine identifying information about the device.\n\n\n2)Attack phase: Experiment.\nStep overview: Compromise targets The adversary must compromise the identified targets in the previous step.\nPossible techniques to use: Once the device is identified, the adversary can attempt to input known default credentials for the device to gain access to the management console., Adversaries with sufficient identifying knowledge about the target device can exploit known vulnerabilities in network devices to obtain administrative access.\n\n\n3)Attack phase: Exploit.\nStep overview: Bridge Networks The adversary changes the configuration of the compromised network device to connect the networks the device was segmenting. Depending on the type of network boundary device and its capabilities, bridging can be implemented using various methods.\nPossible techniques to use: The adversary can abuse Network Address Translation (NAT) in firewalls and routers to manipulate traffic flow to their own design. With control of the network device, the adversary can manipulate NAT by either using existing configurations or creating their own to allow two previously unconnected networks to communicate., Some network devices can be configured to become a proxy server. Adversaries can set up or exploit an existing proxy server on compromised network devices to create a bridge between separate networks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify potential targets An adversary identifies network boundary devices that can be compromised.\nPossible techniques to use: The adversary traces network traffic to identify which devices the traffic flows through. Additionally, the adversary can identify devices using fingerprinting methods or locating the management page to determine identifying information about the device.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Compromise targets The adversary must compromise the identified targets in the previous step.\nPossible techniques to use: Once the device is identified, the adversary can attempt to input known default credentials for the device to gain access to the management console., Adversaries with sufficient identifying knowledge about the target device can exploit known vulnerabilities in network devices to obtain administrative access.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Bridge Networks The adversary changes the configuration of the compromised network device to connect the networks the device was segmenting. Depending on the type of network boundary device and its capabilities, bridging can be implemented using various methods.\nPossible techniques to use: The adversary can abuse Network Address Translation (NAT) in firewalls and routers to manipulate traffic flow to their own design. With control of the network device, the adversary can manipulate NAT by either using existing configurations or creating their own to allow two previously unconnected networks to communicate., Some network devices can be configured to become a proxy server. Adversaries can set up or exploit an existing proxy server on compromised network devices to create a bridge between separate networks.\n\n"
      ],
      "@Name": "Network Boundary Bridging"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Identify and explore caches Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.\nPossible techniques to use: Run tools that check available entries in the cache.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Cause specific data to be cached An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.\nPossible techniques to use: Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).\n\n\n* 3)Attack phase: Exploit.\nStep overview: Redirect users to malicious website As the attacker succeeds in exploiting the vulnerability, they are able to manipulate and interpose malicious response data to targeted victim queries.\nPossible techniques to use: Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID)., Adversary-in-the-Middle attacks (CAPEC-94) intercept secure communication between two parties.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Cache Poisoning",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify and explore caches Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.\nPossible techniques to use: Run tools that check available entries in the cache.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Cause specific data to be cached An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.\nPossible techniques to use: Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).\n\n",
        "3)Attack phase: Exploit.\nStep overview: Redirect users to malicious website As the attacker succeeds in exploiting the vulnerability, they are able to manipulate and interpose malicious response data to targeted victim queries.\nPossible techniques to use: Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID)., Adversary-in-the-Middle attacks (CAPEC-94) intercept secure communication between two parties.\n\n"
      ],
      "@Name": "Cache Poisoning"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Collect Data from Registries",
    "context": "",
    "output": "Execution Flow:\nName:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Collect Data from Registries"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Exploit.\nStep overview: Attacker sets up a system mocking the one trusted by the users. This is usually a website that requires or handles sensitive information.\n\n\n* 2)Attack phase: Exploit.\nStep overview: The attacker then poisons the resolver for the targeted site. This is achieved by poisoning the DNS server, or the local hosts file, that directs the user to the original website\n\n\n* 3)Attack phase: Exploit.\nStep overview: When the victim requests the URL for the site, the poisoned records direct the victim to the attackers' system rather than the original one.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Because of the identical nature of the original site and the attacker controlled one, and the fact that the URL is still the original one, the victim trusts the website reached and the attacker can now \"farm\" sensitive information such as credentials or account numbers.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Pharming",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Exploit.\nStep overview: Attacker sets up a system mocking the one trusted by the users. This is usually a website that requires or handles sensitive information.\n\n",
        "2)Attack phase: Exploit.\nStep overview: The attacker then poisons the resolver for the targeted site. This is achieved by poisoning the DNS server, or the local hosts file, that directs the user to the original website\n\n",
        "3)Attack phase: Exploit.\nStep overview: When the victim requests the URL for the site, the poisoned records direct the victim to the attackers' system rather than the original one.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Because of the identical nature of the original site and the attacker controlled one, and the fact that the URL is still the original one, the victim trusts the website reached and the attacker can now \"farm\" sensitive information such as credentials or account numbers.\n\n"
      ],
      "@Name": "Pharming"
    }
  },
  {
    "instruction": "List the execution flow related to capec: File Discovery",
    "context": "",
    "output": "Execution Flow:\nName:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "File Discovery"
    }
  },
  {
    "instruction": "Given attack pattern: Directory Indexing.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Directory Indexing are: 1)Attack phase: Explore.\nStep overview: Directory Discovery Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.\nPossible techniques to use: Send requests to the web server for common directory names, If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers., Search for uncommon or potentially user created directories that may be present.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Iteratively explore directory/file structures The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods\nPossible techniques to use: Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes., Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'., Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access., Sequentially request a list of common base files to each directory discovered., Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a \"/\" request\n\n\n* 3)Attack phase: Exploit.\nStep overview: Read directories or files which are not intended for public viewing. The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods\nPossible techniques to use: Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a \"/\" request, Try other known exploits to elevate privileges sufficient to bypass protected directories., List the files in the directory by issuing a request with the URL ending in a \"/\" slash., Access the files via direct URL and capture contents., Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access., Sequentially request a list of common base files to each directory discovered.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Directory Discovery Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.\nPossible techniques to use: Send requests to the web server for common directory names, If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers., Search for uncommon or potentially user created directories that may be present.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Iteratively explore directory/file structures The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods\nPossible techniques to use: Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes., Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'., Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access., Sequentially request a list of common base files to each directory discovered., Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a \"/\" request\n\n",
        "3)Attack phase: Exploit.\nStep overview: Read directories or files which are not intended for public viewing. The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods\nPossible techniques to use: Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a \"/\" request, Try other known exploits to elevate privileges sufficient to bypass protected directories., List the files in the directory by issuing a request with the URL ending in a \"/\" slash., Access the files via direct URL and capture contents., Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access., Sequentially request a list of common base files to each directory discovered.\n\n"
      ],
      "@Name": "Directory Indexing"
    }
  },
  {
    "instruction": "List the execution flow related to capec: AJAX Footprinting",
    "context": "",
    "output": "Execution Flow:\nName:System Footprinting\nDescription: An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.\nNature of relationship: ChildOf\n\n\n* Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:System Footprinting\nDescription: An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.\nNature of relationship: ChildOf\n\n",
        "Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "AJAX Footprinting"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Accessing Functionality Not Properly Constrained by ACLs",
    "context": "",
    "output": "Execution Flow:\nName:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n\n* Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n",
        "Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Accessing Functionality Not Properly Constrained by ACLs"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Accessing/Intercepting/Modifying HTTP Cookies",
    "context": "",
    "output": "Execution Flow:\nName:Manipulating Opaque Client-based Data Tokens\nDescription: In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.\nNature of relationship: ChildOf\n\n\n- Name:Sniffing Attacks\nDescription: In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulating Opaque Client-based Data Tokens\nDescription: In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.\nNature of relationship: ChildOf\n\n",
        "Name:Sniffing Attacks\nDescription: In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Accessing/Intercepting/Modifying HTTP Cookies"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Install Rootkit ",
    "context": "",
    "output": "Execution Flow:\nName:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Install Rootkit "
    }
  },
  {
    "instruction": "Given attack pattern: Reflected XSS.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Reflected XSS are: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for reflected XSS vulnerability The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier., Use a proxy tool to record results of manual input of XSS probes in known URLs., Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Change a URL parameter to include a malicious script tag., Send information gathered from the malicious script to a remote endpoint.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for reflected XSS vulnerability The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier., Use a proxy tool to record results of manual input of XSS probes in known URLs., Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Change a URL parameter to include a malicious script tag., Send information gathered from the malicious script to a remote endpoint.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n"
      ],
      "@Name": "Reflected XSS"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Identify attacker-writable terminals Determine if users TTYs are writable by the attacker.\nPossible techniques to use: Determine the permissions for the TTYs found on the system. Any that allow user write to the TTY may be vulnerable., Attempt to write to other user TTYs. This approach could leave a trail or alert a user.\n\n\n- 2)Attack phase: Exploit.\nStep overview: Execute malicious commands Using one or more vulnerable TTY, execute commands to achieve various impacts.\nPossible techniques to use: Commands that allow reading or writing end user files can be executed.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Manipulating Writeable Terminal Devices",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify attacker-writable terminals Determine if users TTYs are writable by the attacker.\nPossible techniques to use: Determine the permissions for the TTYs found on the system. Any that allow user write to the TTY may be vulnerable., Attempt to write to other user TTYs. This approach could leave a trail or alert a user.\n\n",
        "2)Attack phase: Exploit.\nStep overview: Execute malicious commands Using one or more vulnerable TTY, execute commands to achieve various impacts.\nPossible techniques to use: Commands that allow reading or writing end user files can be executed.\n\n"
      ],
      "@Name": "Manipulating Writeable Terminal Devices"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Data Injected During Configuration",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Determine configuration process The adversary, through a previously compromised system, either remotely or physically, determines what the configuration process is. They look at configuration files, data files, and running processes on the system to identify areas where they could inject malicious data.\n\n\n* 2)Attack phase: Explore.\nStep overview: Determine when configuration occurs The adversary needs to then determine when configuration or recalibration of a system occurs so they know when to inject malicious data.\nPossible techniques to use: Look for a weekly update cycle or repeated update schedule., Insert a malicious process into the target system that notifies the adversary when configuration is occurring.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Determine malicious data to inject By looking at the configuration process, the adversary needs to determine what malicious data they want to insert and where to insert it.\nPossible techniques to use: Add false log data, Change configuration files, Change data files\n\n\n* 4)Attack phase: Exploit.\nStep overview: Inject malicious data Right before, or during system configuration, the adversary injects the malicious data. This leads to the system behaving in a way that is beneficial to the adversary and is often followed by other attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine configuration process The adversary, through a previously compromised system, either remotely or physically, determines what the configuration process is. They look at configuration files, data files, and running processes on the system to identify areas where they could inject malicious data.\n\n",
        "2)Attack phase: Explore.\nStep overview: Determine when configuration occurs The adversary needs to then determine when configuration or recalibration of a system occurs so they know when to inject malicious data.\nPossible techniques to use: Look for a weekly update cycle or repeated update schedule., Insert a malicious process into the target system that notifies the adversary when configuration is occurring.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Determine malicious data to inject By looking at the configuration process, the adversary needs to determine what malicious data they want to insert and where to insert it.\nPossible techniques to use: Add false log data, Change configuration files, Change data files\n\n",
        "4)Attack phase: Exploit.\nStep overview: Inject malicious data Right before, or during system configuration, the adversary injects the malicious data. This leads to the system behaving in a way that is beneficial to the adversary and is often followed by other attacks.\n\n"
      ],
      "@Name": "Data Injected During Configuration"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Spear Phishing",
    "context": "",
    "output": "The execution flow for Spear Phishing is the following: 1)Attack phase: Explore.\nStep overview: Obtain useful contextual detailed information about the targeted user or organization An adversary collects useful contextual detailed information about the targeted user or organization in order to craft a more deceptive and enticing message to lure the target into responding.\nPossible techniques to use: Conduct web searching research of target. See also: CAPEC-118., Identify trusted associates, colleagues and friends of target. See also: CAPEC-118., Utilize social engineering attack patterns such as Pretexting. See also: CAPEC-407., Collect social information via dumpster diving. See also: CAPEC-406., Collect social information via traditional sources. See also: CAPEC-118., Collect social information via Non-traditional sources. See also: CAPEC-118.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Optional: Obtain domain name and certificate to spoof legitimate site This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.\nPossible techniques to use: Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)., Optionally obtain a legitimate SSL certificate for the new domain name.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Optional: Explore legitimate website and create duplicate An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.\nPossible techniques to use: Use spidering software to get copy of web pages on legitimate site., Manually save copies of required web pages from legitimate site., Create new web pages that have the legitimate site's look at feel, but contain completely new content.\n\n\n- 4)Attack phase: Experiment.\nStep overview: Optional: Build variants of the website with very specific user information e.g., living area, etc. Once the adversary has their website which duplicates a legitimate website, they need to build very custom user related information in it. For example, they could create multiple variants of the website which would target different living area users by providing information such as local news, local weather, etc. so that the user believes this is a new feature from the website.\nPossible techniques to use: Integrate localized information in the web pages created to duplicate the original website. Those localized information could be dynamically generated based on unique key or IP address of the future victim.\n\n\n- 5)Attack phase: Exploit.\nStep overview: Convince user to enter sensitive information on adversary's site. An adversary sends a message (typically an e-mail) to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to adversary's website) and log in. The key is to get the victim to believe that the message is coming from a legitimate entity trusted by the victim or with which the victim or does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.\nPossible techniques to use: Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link., Place phishing link in post to online forum.\n\n\n- 6)Attack phase: Exploit.\nStep overview: Use stolen credentials to log into legitimate site Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.\nPossible techniques to use: Log in to the legitimate site using another user's supplied credentials.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Obtain useful contextual detailed information about the targeted user or organization An adversary collects useful contextual detailed information about the targeted user or organization in order to craft a more deceptive and enticing message to lure the target into responding.\nPossible techniques to use: Conduct web searching research of target. See also: CAPEC-118., Identify trusted associates, colleagues and friends of target. See also: CAPEC-118., Utilize social engineering attack patterns such as Pretexting. See also: CAPEC-407., Collect social information via dumpster diving. See also: CAPEC-406., Collect social information via traditional sources. See also: CAPEC-118., Collect social information via Non-traditional sources. See also: CAPEC-118.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Optional: Obtain domain name and certificate to spoof legitimate site This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.\nPossible techniques to use: Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)., Optionally obtain a legitimate SSL certificate for the new domain name.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Optional: Explore legitimate website and create duplicate An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.\nPossible techniques to use: Use spidering software to get copy of web pages on legitimate site., Manually save copies of required web pages from legitimate site., Create new web pages that have the legitimate site's look at feel, but contain completely new content.\n\n",
        "4)Attack phase: Experiment.\nStep overview: Optional: Build variants of the website with very specific user information e.g., living area, etc. Once the adversary has their website which duplicates a legitimate website, they need to build very custom user related information in it. For example, they could create multiple variants of the website which would target different living area users by providing information such as local news, local weather, etc. so that the user believes this is a new feature from the website.\nPossible techniques to use: Integrate localized information in the web pages created to duplicate the original website. Those localized information could be dynamically generated based on unique key or IP address of the future victim.\n\n",
        "5)Attack phase: Exploit.\nStep overview: Convince user to enter sensitive information on adversary's site. An adversary sends a message (typically an e-mail) to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to adversary's website) and log in. The key is to get the victim to believe that the message is coming from a legitimate entity trusted by the victim or with which the victim or does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.\nPossible techniques to use: Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link., Place phishing link in post to online forum.\n\n",
        "6)Attack phase: Exploit.\nStep overview: Use stolen credentials to log into legitimate site Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.\nPossible techniques to use: Log in to the legitimate site using another user's supplied credentials.\n\n"
      ],
      "@Name": "Spear Phishing"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Signing Malicious Code",
    "context": "",
    "output": "Execution Flow:\nName:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Signing Malicious Code"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Determine suitable tasks to exploit Determine what tasks exist on the target system that may result in a user providing sensitive information.\nPossible techniques to use: Determine what tasks prompt a user for their credentials., Determine what tasks may prompt a user to authorize a process to execute with elevated privileges.\n\n\n2)Attack phase: Exploit.\nStep overview: Impersonate Task Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials or to ride the user's privileges.\nPossible techniques to use: Prompt a user for their credentials, while making the user believe the credential request is legitimate., Prompt a user to authorize a task to run with elevated privileges, while making the user believe the request is legitimate.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Task Impersonation",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine suitable tasks to exploit Determine what tasks exist on the target system that may result in a user providing sensitive information.\nPossible techniques to use: Determine what tasks prompt a user for their credentials., Determine what tasks may prompt a user to authorize a process to execute with elevated privileges.\n\n",
        "2)Attack phase: Exploit.\nStep overview: Impersonate Task Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials or to ride the user's privileges.\nPossible techniques to use: Prompt a user for their credentials, while making the user believe the credential request is legitimate., Prompt a user to authorize a task to run with elevated privileges, while making the user believe the request is legitimate.\n\n"
      ],
      "@Name": "Task Impersonation"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Manipulating Opaque Client-based Data Tokens",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Enumerate information passed to client side The attacker identifies the parameters used as part of tokens to take business or security decisions\nPossible techniques to use: Use WebScarab to reveal hidden fields while browsing., Use a sniffer to capture packets, View source of web page to find hidden fields, Examine URL to see if any opaque tokens are in it, Disassemble or decompile client-side application, Use debugging tools such as File Monitor, Registry Monitor, Debuggers, etc.\n\n\n2)Attack phase: Explore.\nStep overview: Determine protection mechanism for opaque token The attacker determines the protection mechanism used to protect the confidentiality and integrity of these data tokens. They may be obfuscated or a full blown encryption may be used.\nPossible techniques to use: Look for signs of well-known character encodings, Look for cryptographic signatures, Look for delimiters or other indicators of structure\n\n\n3)Attack phase: Experiment.\nStep overview: Modify parameter/token values Trying each parameter in turn, the attacker modifies the values\nPossible techniques to use: Modify tokens logically, Modify tokens arithmetically, Modify tokens bitwise, Modify structural components of tokens, Modify order of parameters/tokens\n\n\n4)Attack phase: Experiment.\nStep overview: Cycle through values for each parameter. Depending on the nature of the application, the attacker now cycles through values of each parameter and observes the effects of this modification in the data returned by the server\nPossible techniques to use: Use network-level packet injection tools such as netcat, Use application-level data modification tools such as Tamper Data, WebScarab, TamperIE, etc., Use modified client (modified by reverse engineering), Use debugging tools to modify data in client\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Enumerate information passed to client side The attacker identifies the parameters used as part of tokens to take business or security decisions\nPossible techniques to use: Use WebScarab to reveal hidden fields while browsing., Use a sniffer to capture packets, View source of web page to find hidden fields, Examine URL to see if any opaque tokens are in it, Disassemble or decompile client-side application, Use debugging tools such as File Monitor, Registry Monitor, Debuggers, etc.\n\n",
        "2)Attack phase: Explore.\nStep overview: Determine protection mechanism for opaque token The attacker determines the protection mechanism used to protect the confidentiality and integrity of these data tokens. They may be obfuscated or a full blown encryption may be used.\nPossible techniques to use: Look for signs of well-known character encodings, Look for cryptographic signatures, Look for delimiters or other indicators of structure\n\n",
        "3)Attack phase: Experiment.\nStep overview: Modify parameter/token values Trying each parameter in turn, the attacker modifies the values\nPossible techniques to use: Modify tokens logically, Modify tokens arithmetically, Modify tokens bitwise, Modify structural components of tokens, Modify order of parameters/tokens\n\n",
        "4)Attack phase: Experiment.\nStep overview: Cycle through values for each parameter. Depending on the nature of the application, the attacker now cycles through values of each parameter and observes the effects of this modification in the data returned by the server\nPossible techniques to use: Use network-level packet injection tools such as netcat, Use application-level data modification tools such as Tamper Data, WebScarab, TamperIE, etc., Use modified client (modified by reverse engineering), Use debugging tools to modify data in client\n\n"
      ],
      "@Name": "Manipulating Opaque Client-based Data Tokens"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - MIME Conversion",
    "context": "",
    "output": "Here are the steps to implement MIME Conversion:\n1)Attack phase: Explore.\nStep overview: Identify target mail server The adversary identifies a target mail server that they wish to attack.\nPossible techniques to use: Use Nmap on a system to identify a mail server service.\n\n\n* 2)Attack phase: Explore.\nStep overview: Determine viability of attack Determine whether the mail server is unpatched and is potentially vulnerable to one of the known MIME conversion buffer overflows (e.g. Sendmail 8.8.3 and 8.8.4).\n\n\n* 3)Attack phase: Experiment.\nStep overview: Find injection vector Identify places in the system where vulnerable MIME conversion routines may be used.\n\n\n* 4)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts e-mail messages with special headers that will cause a buffer overflow for the vulnerable MIME conversion routine. The intent of this attack is to leverage the overflow for execution of arbitrary code and gain access to the mail server machine, so the adversary will craft an email that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversary's choosing.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n\n* 4)Attack phase: Exploit.\nStep overview: Overflow the buffer Send e-mail messages to the target system with specially crafted headers that trigger the buffer overflow and execute the shell code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target mail server The adversary identifies a target mail server that they wish to attack.\nPossible techniques to use: Use Nmap on a system to identify a mail server service.\n\n",
        "2)Attack phase: Explore.\nStep overview: Determine viability of attack Determine whether the mail server is unpatched and is potentially vulnerable to one of the known MIME conversion buffer overflows (e.g. Sendmail 8.8.3 and 8.8.4).\n\n",
        "3)Attack phase: Experiment.\nStep overview: Find injection vector Identify places in the system where vulnerable MIME conversion routines may be used.\n\n",
        "4)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts e-mail messages with special headers that will cause a buffer overflow for the vulnerable MIME conversion routine. The intent of this attack is to leverage the overflow for execution of arbitrary code and gain access to the mail server machine, so the adversary will craft an email that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversary's choosing.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n",
        "4)Attack phase: Exploit.\nStep overview: Overflow the buffer Send e-mail messages to the target system with specially crafted headers that trigger the buffer overflow and execute the shell code.\n\n"
      ],
      "@Name": "MIME Conversion"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Quadratic Data Expansion",
    "context": "",
    "output": "Here are the steps to implement Quadratic Data Expansion:\n1)Attack phase: Explore.\nStep overview: Survey the target An adversary determines the input data stream that is being processed by a data parser that supports using substituion on the victim's side.\nPossible techniques to use: Use an automated tool to record all instances of URLs to process requests., Use a browser to manually explore the website and analyze how the application processes requests.\n\n\n2)Attack phase: Exploit.\nStep overview: Craft malicious payload The adversary crafts malicious message containing nested quadratic expansion that completely uses up available server resource.\n\n\n3)Attack phase: Exploit.\nStep overview: Send the message Send the malicious crafted message to the target URL.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the target An adversary determines the input data stream that is being processed by a data parser that supports using substituion on the victim's side.\nPossible techniques to use: Use an automated tool to record all instances of URLs to process requests., Use a browser to manually explore the website and analyze how the application processes requests.\n\n",
        "2)Attack phase: Exploit.\nStep overview: Craft malicious payload The adversary crafts malicious message containing nested quadratic expansion that completely uses up available server resource.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Send the message Send the malicious crafted message to the target URL.\n\n"
      ],
      "@Name": "Quadratic Data Expansion"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Homograph Attack via Homoglyphs",
    "context": "",
    "output": "The execution flow for Homograph Attack via Homoglyphs is the following: 1)Attack phase: Explore.\nStep overview: Determine target website The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.\nPossible techniques to use: Research popular or high traffic websites.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Impersonate trusted domain In order to impersonate the trusted domain, the adversary needs to register the URL containing the homoglpyh character(s).\nPossible techniques to use: Register the Homograph domain.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Deceive user into visiting domain Finally, the adversary needs to deceive a user into visiting the Homograph domain.\nPossible techniques to use: Execute a phishing attack and send a user an e-mail convincing the to click on a link leading the user to the malicious domain.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine target website The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.\nPossible techniques to use: Research popular or high traffic websites.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Impersonate trusted domain In order to impersonate the trusted domain, the adversary needs to register the URL containing the homoglpyh character(s).\nPossible techniques to use: Register the Homograph domain.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Deceive user into visiting domain Finally, the adversary needs to deceive a user into visiting the Homograph domain.\nPossible techniques to use: Execute a phishing attack and send a user an e-mail convincing the to click on a link leading the user to the malicious domain.\n\n"
      ],
      "@Name": "Homograph Attack via Homoglyphs"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Infiltration of Software Development Environment",
    "context": "",
    "output": "Execution Flow:\nName:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Infiltration of Software Development Environment"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Cross-Site Flashing",
    "context": "",
    "output": "The execution flow for Cross-Site Flashing is the following: 1)Attack phase: Explore.\nStep overview: Identification Using a browser or an automated tool, an attacker records all instances of URLs (or partial URL such as domain) passed to a flash file (SWF).\nPossible techniques to use: Use an automated tool to record the variables passed to a flash file., Use a browser to manually explore the website and analyze how the flash file receive variables, e.g. JavaScript using SetVariable/GetVariable, HTML FlashVars param tag, etc., Use decompilers to retrieve the flash source code and record all user-controllable variables passed to a loadMovie* directive.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Attempt to inject a remote flash file The attacker makes use of a remotely available flash file (SWF) that generates a uniquely identifiable output when executed inside the targeted flash file.\nPossible techniques to use: Modify the variable of the SWF file that contains the remote movie URL to the attacker controlled flash file.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Access or Modify Flash Application Variables As the attacker succeeds in exploiting the vulnerability, they target the content of the flash application to steal variable content, password, etc.\nPossible techniques to use: Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and loaded by the victim browser's flash plugin and sends document information to the attacker., Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the flash application to execute appropriately.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Execute JavaScript in victim's browser When the attacker targets the current flash application, they can choose to inject JavaScript in the client's DOM and therefore execute cross-site scripting attack.\nPossible techniques to use: Develop malicious JavaScript that is injected from the rogue flash movie to the targeted flash application through vectors identified during the Experiment Phase and loaded by the victim's browser.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identification Using a browser or an automated tool, an attacker records all instances of URLs (or partial URL such as domain) passed to a flash file (SWF).\nPossible techniques to use: Use an automated tool to record the variables passed to a flash file., Use a browser to manually explore the website and analyze how the flash file receive variables, e.g. JavaScript using SetVariable/GetVariable, HTML FlashVars param tag, etc., Use decompilers to retrieve the flash source code and record all user-controllable variables passed to a loadMovie* directive.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attempt to inject a remote flash file The attacker makes use of a remotely available flash file (SWF) that generates a uniquely identifiable output when executed inside the targeted flash file.\nPossible techniques to use: Modify the variable of the SWF file that contains the remote movie URL to the attacker controlled flash file.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Access or Modify Flash Application Variables As the attacker succeeds in exploiting the vulnerability, they target the content of the flash application to steal variable content, password, etc.\nPossible techniques to use: Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and loaded by the victim browser's flash plugin and sends document information to the attacker., Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the flash application to execute appropriately.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Execute JavaScript in victim's browser When the attacker targets the current flash application, they can choose to inject JavaScript in the client's DOM and therefore execute cross-site scripting attack.\nPossible techniques to use: Develop malicious JavaScript that is injected from the rogue flash movie to the targeted flash application through vectors identified during the Experiment Phase and loaded by the victim's browser.\n\n"
      ],
      "@Name": "Cross-Site Flashing"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: PHP Remote File Inclusion",
    "context": "",
    "output": "The execution flow for PHP Remote File Inclusion is the following: 1)Attack phase: Explore.\nStep overview: Survey application Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.\nPossible techniques to use: Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms., Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Attempt variations on input parameters The attack variants make use of a remotely available PHP script that generates a uniquely identifiable output when executed on the target application server. Possibly using an automated tool, an adversary requests variations on the inputs they surveyed before. They send parameters that include variations of payloads which include a reference to the remote PHP script. They record all the responses from the server that include the output of the execution of remote PHP script.\nPossible techniques to use: Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of PHP remote file inclusion payloads which include a reference to the adversary controlled remote PHP script., Use a proxy tool to record results of manual input of remote file inclusion probes in known URLs.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Run arbitrary server-side code As the adversary succeeds in exploiting the vulnerability, they are able to execute server-side code within the application. The malicious code has virtual access to the same resources as the targeted application. Note that the adversary might include shell code in their script and execute commands on the server under the same privileges as the PHP runtime is running with.\nPossible techniques to use: Develop malicious PHP script that is injected through vectors identified during the Experiment Phase and executed by the application server to execute a custom PHP script.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey application Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.\nPossible techniques to use: Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms., Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attempt variations on input parameters The attack variants make use of a remotely available PHP script that generates a uniquely identifiable output when executed on the target application server. Possibly using an automated tool, an adversary requests variations on the inputs they surveyed before. They send parameters that include variations of payloads which include a reference to the remote PHP script. They record all the responses from the server that include the output of the execution of remote PHP script.\nPossible techniques to use: Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of PHP remote file inclusion payloads which include a reference to the adversary controlled remote PHP script., Use a proxy tool to record results of manual input of remote file inclusion probes in known URLs.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Run arbitrary server-side code As the adversary succeeds in exploiting the vulnerability, they are able to execute server-side code within the application. The malicious code has virtual access to the same resources as the targeted application. Note that the adversary might include shell code in their script and execute commands on the server under the same privileges as the PHP runtime is running with.\nPossible techniques to use: Develop malicious PHP script that is injected through vectors identified during the Experiment Phase and executed by the application server to execute a custom PHP script.\n\n"
      ],
      "@Name": "PHP Remote File Inclusion"
    }
  },
  {
    "instruction": "Given attack pattern: TCP Window Scan.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement TCP Window Scan are: 1)Attack phase: Experiment.\nStep overview: An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports.\n\n\n2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine the port's state. Specifically, the adversary views the TCP window size from the returned RST packet if one was received. Depending on the target operating system, a positive window size may indicate an open port while a negative window size may indicate a closed port.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Experiment.\nStep overview: An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports.\n\n",
        "2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine the port's state. Specifically, the adversary views the TCP window size from the returned RST packet if one was received. Depending on the target operating system, a positive window size may indicate an open port while a negative window size may indicate a closed port.\n\n"
      ],
      "@Name": "TCP Window Scan"
    }
  },
  {
    "instruction": "List the execution flow related to capec: System Footprinting",
    "context": "",
    "output": "Execution Flow:\nName:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "System Footprinting"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Using Escaped Slashes in Alternate Encoding",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n\n2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The adversary uses the entry points gathered in the \"Explore\" phase as a target list and attempts to escape multiple different special characters using a backslash.\nPossible techniques to use: Escape a special character with a backslash to bypass input validation., Try different encodings of both the backslash and the special character to see if this bypasses input validation\n\n\n3)Attack phase: Exploit.\nStep overview: Manipulate input Once the adversary determines how to bypass filters that filter out special characters using an escaped slash, they will manipulate the user input in a way that is not intended by the application.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The adversary uses the entry points gathered in the \"Explore\" phase as a target list and attempts to escape multiple different special characters using a backslash.\nPossible techniques to use: Escape a special character with a backslash to bypass input validation., Try different encodings of both the backslash and the special character to see if this bypasses input validation\n\n",
        "3)Attack phase: Exploit.\nStep overview: Manipulate input Once the adversary determines how to bypass filters that filter out special characters using an escaped slash, they will manipulate the user input in a way that is not intended by the application.\n\n"
      ],
      "@Name": "Using Escaped Slashes in Alternate Encoding"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Find and scan debug interface The adversary must first find and scan a debug interface to determine what they are authorized to use and what devices are chained to that interface.\nPossible techniques to use: Use a JTAGulator on a JTAG interface to determine the correct pin configuration, baud rate, and number of devices in the chain\n\n\n* 2)Attack phase: Experiment.\nStep overview: Connect to debug interface The adversary next connects a device to the JTAG interface using the properties found in the explore phase so that they can send commands. The adversary sends some test commands to make sure the connection is working.\nPossible techniques to use: Connect a device such as a BusPirate or UM232H to the JTAG interface and connect using pin layout found from the JTAGulator\n\n\n* 3)Attack phase: Exploit.\nStep overview: Move along debug chain Once the adversary has connected to the main TAP, or JTAG interface, they will move along the TAP chain to see what debug interfaces might be available on that chain.\nPossible techniques to use: Run a command such as \u201cscan_chain\u201d to see what TAPs are available in the chain.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Exploiting Incorrect Chaining or Granularity of Hardware Debug Components",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find and scan debug interface The adversary must first find and scan a debug interface to determine what they are authorized to use and what devices are chained to that interface.\nPossible techniques to use: Use a JTAGulator on a JTAG interface to determine the correct pin configuration, baud rate, and number of devices in the chain\n\n",
        "2)Attack phase: Experiment.\nStep overview: Connect to debug interface The adversary next connects a device to the JTAG interface using the properties found in the explore phase so that they can send commands. The adversary sends some test commands to make sure the connection is working.\nPossible techniques to use: Connect a device such as a BusPirate or UM232H to the JTAG interface and connect using pin layout found from the JTAGulator\n\n",
        "3)Attack phase: Exploit.\nStep overview: Move along debug chain Once the adversary has connected to the main TAP, or JTAG interface, they will move along the TAP chain to see what debug interfaces might be available on that chain.\nPossible techniques to use: Run a command such as \u201cscan_chain\u201d to see what TAPs are available in the chain.\n\n"
      ],
      "@Name": "Exploiting Incorrect Chaining or Granularity of Hardware Debug Components"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Capture Credentials via Keylogger",
    "context": "",
    "output": "Execution Flow:\nName:Collect Data as Provided by Users\nDescription: An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.\nNature of relationship: ChildOf\n\n\n* Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n\n* Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\n* Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n\n* Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n\n* Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Collect Data as Provided by Users\nDescription: An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.\nNature of relationship: ChildOf\n\n",
        "Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n",
        "Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Capture Credentials via Keylogger"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Using UTF-8 Encoding to Bypass Validation Logic",
    "context": "",
    "output": "Here are the steps to implement Using UTF-8 Encoding to Bypass Validation Logic:\n1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various UTF-8 encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Try to use UTF-8 encoding of content in Scripts in order to bypass validation routines., Try to use UTF-8 encoding of content in HTML in order to bypass validation routines., Try to use UTF-8 encoding of content in CSS in order to bypass validation routines.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various UTF-8 encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Try to use UTF-8 encoding of content in Scripts in order to bypass validation routines., Try to use UTF-8 encoding of content in HTML in order to bypass validation routines., Try to use UTF-8 encoding of content in CSS in order to bypass validation routines.\n\n"
      ],
      "@Name": "Using UTF-8 Encoding to Bypass Validation Logic"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Try All Common Switches",
    "context": "",
    "output": "The execution flow for Try All Common Switches is the following: 1)Attack phase: Explore.\nStep overview: Identify application Discover an application of interest by exploring service registry listings or by connecting on a known port or some similar means.\nPossible techniques to use: Search via internet for known, published applications that allow option switches., Use automated tools to scan known ports to identify applications that might be accessible\n\n\n2)Attack phase: Explore.\nStep overview: Authenticate to application Authenticate to the application, if required, in order to explore it.\nPossible techniques to use: Use published credentials to access system., Find unpublished credentails to access service., Use other attack pattern or weakness to bypass authentication.\n\n\n3)Attack phase: Experiment.\nStep overview: Try all common switches Using manual or automated means, attempt to run the application with many different known common switches. Observe the output to see if any switches seemed to put the application in a non production mode that might give more information.\nPossible techniques to use: Manually execute the application with switches such as --debug, --test, --development, --verbose, etc., Use automated tools to run the application with common switches and observe the output\n\n\n4)Attack phase: Exploit.\nStep overview: Use sensitive processing or configuration information Once extra information is observed from an application through the use of a common switch, this information is used to aid other attacks on the application\nPossible techniques to use: Using application information, formulate an attack on the application\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify application Discover an application of interest by exploring service registry listings or by connecting on a known port or some similar means.\nPossible techniques to use: Search via internet for known, published applications that allow option switches., Use automated tools to scan known ports to identify applications that might be accessible\n\n",
        "2)Attack phase: Explore.\nStep overview: Authenticate to application Authenticate to the application, if required, in order to explore it.\nPossible techniques to use: Use published credentials to access system., Find unpublished credentails to access service., Use other attack pattern or weakness to bypass authentication.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Try all common switches Using manual or automated means, attempt to run the application with many different known common switches. Observe the output to see if any switches seemed to put the application in a non production mode that might give more information.\nPossible techniques to use: Manually execute the application with switches such as --debug, --test, --development, --verbose, etc., Use automated tools to run the application with common switches and observe the output\n\n",
        "4)Attack phase: Exploit.\nStep overview: Use sensitive processing or configuration information Once extra information is observed from an application through the use of a common switch, this information is used to aid other attacks on the application\nPossible techniques to use: Using application information, formulate an attack on the application\n\n"
      ],
      "@Name": "Try All Common Switches"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Use of Known Operating System Credentials",
    "context": "",
    "output": "Here are the steps to implement Use of Known Operating System Credentials:\n1)Attack phase: Explore.\nStep overview: Acquire known operating system credentials The adversary must obtain known operating system credentials in order to access the target system, application, or service within the domain.\nPossible techniques to use: An adversary purchases breached operating system username/password combinations or leaked hashed passwords from the dark web., An adversary leverages a key logger or phishing attack to steal user credentials as they are provided., An adversary conducts a sniffing attack to steal operating system credentials as they are transmitted., An adversary gains access to a system/files and exfiltrates password hashes., An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Attempt authentication Try each operating system credential against various systems, applications, and services within the domain until the target grants access.\nPossible techniques to use: Manually or automatically enter each credential through the target's interface.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Impersonate An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the network\n\n\n* 4)Attack phase: Exploit.\nStep overview: Spoofing Malicious data can be injected into the target system or into other systems on the network. The adversary can also pose as a legitimate user to perform social engineering attacks.\n\n\n* 5)Attack phase: Exploit.\nStep overview: Data Exfiltration The adversary can obtain sensitive data contained within system files or application configuration.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Acquire known operating system credentials The adversary must obtain known operating system credentials in order to access the target system, application, or service within the domain.\nPossible techniques to use: An adversary purchases breached operating system username/password combinations or leaked hashed passwords from the dark web., An adversary leverages a key logger or phishing attack to steal user credentials as they are provided., An adversary conducts a sniffing attack to steal operating system credentials as they are transmitted., An adversary gains access to a system/files and exfiltrates password hashes., An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attempt authentication Try each operating system credential against various systems, applications, and services within the domain until the target grants access.\nPossible techniques to use: Manually or automatically enter each credential through the target's interface.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Impersonate An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the network\n\n",
        "4)Attack phase: Exploit.\nStep overview: Spoofing Malicious data can be injected into the target system or into other systems on the network. The adversary can also pose as a legitimate user to perform social engineering attacks.\n\n",
        "5)Attack phase: Exploit.\nStep overview: Data Exfiltration The adversary can obtain sensitive data contained within system files or application configuration.\n\n"
      ],
      "@Name": "Use of Known Operating System Credentials"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - XML Injection",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Survey the Target Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XML queries\nPossible techniques to use: Use an automated tool to record all instances of user-controllable input used to contruct XML queries., Use a browser to manually explore the website and analyze how the application processes inputs.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Determine the Structure of Queries Using manual or automated means, test inputs found for XML weaknesses.\nPossible techniques to use: Use XML reserved characters or words, possibly with other input data to attempt to cause unexpected results and identify improper input validation.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Inject Content into XML Queries Craft malicious content containing XML expressions that is not validated by the application and is executed as part of the XML queries.\nPossible techniques to use: Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the Target Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XML queries\nPossible techniques to use: Use an automated tool to record all instances of user-controllable input used to contruct XML queries., Use a browser to manually explore the website and analyze how the application processes inputs.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Determine the Structure of Queries Using manual or automated means, test inputs found for XML weaknesses.\nPossible techniques to use: Use XML reserved characters or words, possibly with other input data to attempt to cause unexpected results and identify improper input validation.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Inject Content into XML Queries Craft malicious content containing XML expressions that is not validated by the application and is executed as part of the XML queries.\nPossible techniques to use: Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.\n\n"
      ],
      "@Name": "XML Injection"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Lock Bumping",
    "context": "",
    "output": "Execution Flow:\nName:Bypassing Physical Locks\nDescription: An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Bypassing Physical Locks\nDescription: An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Lock Bumping"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Cross Site Request Forgery",
    "context": "",
    "output": "The execution flow for Cross Site Request Forgery is the following: 1)Attack phase: Explore.\nStep overview: Explore target website The attacker first explores the target website to determine pieces of functionality that are of interest to them (e.g. money transfers). The attacker will need a legitimate user account on the target website. It would help to have two accounts.\nPossible techniques to use: Use web application debugging tool such as WebScarab, Tamper Data or TamperIE to analyze the information exchanged between the client and the server, Use network sniffing tool such as Wireshark to analyze the information exchanged between the client and the server, View HTML source of web pages that contain links or buttons that perform actions of interest.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Create a link that when clicked on, will execute the interesting functionality. The attacker needs to create a link that will execute some interesting functionality such as transfer money, change a password, etc.\nPossible techniques to use: Create a GET request containing all required parameters (e.g. https://www.somebank.com/members/transfer.asp?to=012345678901&amt=10000), Create a form that will submit a POST request (e.g. <form method=\"POST\" action=\"https://www.somebank.com/members/transfer.asp\"><input type=\"hidden\" Name=\"to\" value=\"012345678901\"/><input type=\"hidden\" Name=\"amt\" value=\"10000\"/><input type=\"submit\" src=\"clickhere.jpg\"/></form>\n\n\n* 3)Attack phase: Exploit.\nStep overview: Convince user to click on link Finally, the attacker needs to convince a user that is logged into the target website to click on a link to execute the CSRF attack.\nPossible techniques to use: Execute a phishing attack and send the user an e-mail convincing them to click on a link., Execute a stored XSS attack on a website to permanently embed the malicious link into the website., Execute a stored XSS attack on a website where an XMLHTTPRequest object will automatically execute the attack as soon as a user visits the page. This removes the step of convincing a user to click on a link., Include the malicious link on the attackers' own website where the user may have to click on the link, or where an XMLHTTPRequest object may automatically execute the attack when a user visits the site.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Explore target website The attacker first explores the target website to determine pieces of functionality that are of interest to them (e.g. money transfers). The attacker will need a legitimate user account on the target website. It would help to have two accounts.\nPossible techniques to use: Use web application debugging tool such as WebScarab, Tamper Data or TamperIE to analyze the information exchanged between the client and the server, Use network sniffing tool such as Wireshark to analyze the information exchanged between the client and the server, View HTML source of web pages that contain links or buttons that perform actions of interest.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Create a link that when clicked on, will execute the interesting functionality. The attacker needs to create a link that will execute some interesting functionality such as transfer money, change a password, etc.\nPossible techniques to use: Create a GET request containing all required parameters (e.g. https://www.somebank.com/members/transfer.asp?to=012345678901&amt=10000), Create a form that will submit a POST request (e.g. <form method=\"POST\" action=\"https://www.somebank.com/members/transfer.asp\"><input type=\"hidden\" Name=\"to\" value=\"012345678901\"/><input type=\"hidden\" Name=\"amt\" value=\"10000\"/><input type=\"submit\" src=\"clickhere.jpg\"/></form>\n\n",
        "3)Attack phase: Exploit.\nStep overview: Convince user to click on link Finally, the attacker needs to convince a user that is logged into the target website to click on a link to execute the CSRF attack.\nPossible techniques to use: Execute a phishing attack and send the user an e-mail convincing them to click on a link., Execute a stored XSS attack on a website to permanently embed the malicious link into the website., Execute a stored XSS attack on a website where an XMLHTTPRequest object will automatically execute the attack as soon as a user visits the page. This removes the step of convincing a user to click on a link., Include the malicious link on the attackers' own website where the user may have to click on the link, or where an XMLHTTPRequest object may automatically execute the attack when a user visits the site.\n\n"
      ],
      "@Name": "Cross Site Request Forgery"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Target Programs with Elevated Privileges",
    "context": "",
    "output": "The execution flow for Target Programs with Elevated Privileges is the following: 1)Attack phase: Explore.\nStep overview: Find programs with elevated priveleges The adversary probes for programs running with elevated privileges.\nPossible techniques to use: Look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break.\n\n\n- 2)Attack phase: Explore.\nStep overview: Find vulnerability in running program The adversary looks for a vulnerability in the running program that would allow for arbitrary code execution with the privilege of the running program.\nPossible techniques to use: Look for improper input validation, Look for improper failure safety. For instance when a program fails it may authorize restricted access to anyone., Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Execute arbitrary code The adversary exploits the vulnerability that they have found. For instance, they can try to inject and execute arbitrary code or write to OS resources.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find programs with elevated priveleges The adversary probes for programs running with elevated privileges.\nPossible techniques to use: Look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break.\n\n",
        "2)Attack phase: Explore.\nStep overview: Find vulnerability in running program The adversary looks for a vulnerability in the running program that would allow for arbitrary code execution with the privilege of the running program.\nPossible techniques to use: Look for improper input validation, Look for improper failure safety. For instance when a program fails it may authorize restricted access to anyone., Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Execute arbitrary code The adversary exploits the vulnerability that they have found. For instance, they can try to inject and execute arbitrary code or write to OS resources.\n\n"
      ],
      "@Name": "Target Programs with Elevated Privileges"
    }
  },
  {
    "instruction": "Given attack pattern: Relative Path Traversal.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Relative Path Traversal are: 1)Attack phase: Explore.\nStep overview: Fingerprinting of the operating system In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.\nPossible techniques to use: Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports., TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system., Induce errors to find informative error messages\n\n\n2)Attack phase: Explore.\nStep overview: Survey application Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.\nPossible techniques to use: Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms., Use a browser to manually explore a website and analyze how it is constructed. Many browser plug-ins are available to facilitate the analysis or automate the URL discovery.\n\n\n3)Attack phase: Experiment.\nStep overview: Attempt variations on input parameters Using manual or automated means, an adversary attempts varying relative file path combinations on all found user input locations and observes the responses.\nPossible techniques to use: Provide \"../\" or \"..\\\" at the beginning of any filename to traverse to the parent directory, Use a list of probe strings as path traversal payload. Different strings may be used for different platforms. Strings contain relative path sequences such as \"../\"., Use a proxy tool to record results of manual input of relative path traversal probes in known URLs.\n\n\n4)Attack phase: Exploit.\nStep overview: Access, modify, or execute arbitrary files. An adversary injects path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.\nPossible techniques to use: Manipulate file and its path by injecting relative path sequences (e.g. \"../\")., Download files, modify files, or try to execute shell commands (with binary files).\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Fingerprinting of the operating system In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.\nPossible techniques to use: Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports., TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system., Induce errors to find informative error messages\n\n",
        "2)Attack phase: Explore.\nStep overview: Survey application Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.\nPossible techniques to use: Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms., Use a browser to manually explore a website and analyze how it is constructed. Many browser plug-ins are available to facilitate the analysis or automate the URL discovery.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Attempt variations on input parameters Using manual or automated means, an adversary attempts varying relative file path combinations on all found user input locations and observes the responses.\nPossible techniques to use: Provide \"../\" or \"..\\\" at the beginning of any filename to traverse to the parent directory, Use a list of probe strings as path traversal payload. Different strings may be used for different platforms. Strings contain relative path sequences such as \"../\"., Use a proxy tool to record results of manual input of relative path traversal probes in known URLs.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Access, modify, or execute arbitrary files. An adversary injects path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.\nPossible techniques to use: Manipulate file and its path by injecting relative path sequences (e.g. \"../\")., Download files, modify files, or try to execute shell commands (with binary files).\n\n"
      ],
      "@Name": "Relative Path Traversal"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Spoof Open-Source Software Metadata",
    "context": "",
    "output": "Execution Flow:\nName:Metadata Spoofing\nDescription: An adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible.\nNature of relationship: ChildOf\n\n\nName:Software Integrity Attack\nDescription: An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.\nNature of relationship: CanPrecede\n\n\nName:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: CanPrecede\n\n\nName:TypoSquatting\nDescription: An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.\nNature of relationship: PeerOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Metadata Spoofing\nDescription: An adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible.\nNature of relationship: ChildOf\n\n",
        "Name:Software Integrity Attack\nDescription: An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.\nNature of relationship: CanPrecede\n\n",
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: CanPrecede\n\n",
        "Name:TypoSquatting\nDescription: An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.\nNature of relationship: PeerOf\n\n"
      ],
      "@Name": "Spoof Open-Source Software Metadata"
    }
  },
  {
    "instruction": "List the execution flow related to capec: HTTP Flood",
    "context": "",
    "output": "Execution Flow:\nName:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "HTTP Flood"
    }
  },
  {
    "instruction": "Given attack pattern: XSS Targeting Error Pages.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement XSS Targeting Error Pages are: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs as URL parameters Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application, looking for URLs which use parameters.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Cause application to return error page The adversary uses the URLs gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters into the parameters to see if an error page occurs, and if the injected payload is executed by the error page.\nPossible techniques to use: Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier., Use a proxy tool to record results of manual input of XSS probes in known URLs., Use a list of HTML special characters to inject into parameters of known URLs and check if they caused errors\n\n\n* 3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS through an error page, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Change a URL parameter to include a malicious script tag., Send information gathered from the malicious script to a remote endpoint.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs as URL parameters Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application, looking for URLs which use parameters.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Cause application to return error page The adversary uses the URLs gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters into the parameters to see if an error page occurs, and if the injected payload is executed by the error page.\nPossible techniques to use: Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier., Use a proxy tool to record results of manual input of XSS probes in known URLs., Use a list of HTML special characters to inject into parameters of known URLs and check if they caused errors\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS through an error page, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Change a URL parameter to include a malicious script tag., Send information gathered from the malicious script to a remote endpoint.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n"
      ],
      "@Name": "XSS Targeting Error Pages"
    }
  },
  {
    "instruction": "List the execution flow related to capec: DNS Zone Transfers",
    "context": "",
    "output": "Execution Flow:\nName:Network Topology Mapping\nDescription: An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Network Topology Mapping\nDescription: An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "DNS Zone Transfers"
    }
  },
  {
    "instruction": "List the execution flow related to capec: WebView Exposure",
    "context": "",
    "output": "Execution Flow:\nName:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "WebView Exposure"
    }
  },
  {
    "instruction": "Given attack pattern: HTTP Request Smuggling.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement HTTP Request Smuggling are: 1)Attack phase: Explore.\nStep overview: Survey network to identify target The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.\nPossible techniques to use: Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.\n\n\n* 1)Attack phase: Experiment.\nStep overview: Identify vulnerabilities in targeted HTTP infrastructure and technologies The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities The adversary sends maliciously crafted HTTP requests to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.\nPossible techniques to use: Continue the monitoring of HTTP traffic., Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.\n\n\n* 1)Attack phase: Exploit.\nStep overview: Perform HTTP Request Smuggling attack Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.\nPossible techniques to use: Leverage techniques identified in the Experiment Phase.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey network to identify target The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.\nPossible techniques to use: Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.\n\n",
        "1)Attack phase: Experiment.\nStep overview: Identify vulnerabilities in targeted HTTP infrastructure and technologies The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities The adversary sends maliciously crafted HTTP requests to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.\nPossible techniques to use: Continue the monitoring of HTTP traffic., Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.\n\n",
        "1)Attack phase: Exploit.\nStep overview: Perform HTTP Request Smuggling attack Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.\nPossible techniques to use: Leverage techniques identified in the Experiment Phase.\n\n"
      ],
      "@Name": "HTTP Request Smuggling"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Open-Source Library Manipulation",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Determine the relevant open-source code project to target The adversary will make the selection based on various criteria:.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Develop a plan for malicious contribution The adversary develops a plan to contribute malicious code, taking the following into consideration:.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Execute the plan for malicious contribution Write the code to be contributed based on the plan and then submit the contribution. Multiple commits, possibly using multiple identities, will help obscure the attack. Monitor the contribution site to try to determine if the code has been uploaded to the target system.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine the relevant open-source code project to target The adversary will make the selection based on various criteria:.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Develop a plan for malicious contribution The adversary develops a plan to contribute malicious code, taking the following into consideration:.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Execute the plan for malicious contribution Write the code to be contributed based on the plan and then submit the contribution. Multiple commits, possibly using multiple identities, will help obscure the attack. Monitor the contribution site to try to determine if the code has been uploaded to the target system.\n\n"
      ],
      "@Name": "Open-Source Library Manipulation"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Survey target application and relevant OS shared code libraries Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack. The adversary looks for code gadgets which will allow them to load an adversary-controlled value into trusted memory. They also look for code gadgets which might operate on this controlled value.\nPossible techniques to use: Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Fill microarchitectural buffer with controlled value The adversary will utilize the found code gadget from the previous step to load a value into a microarchitectural buffer.\nPossible techniques to use: The adversary may choose the controlled value to be memory address of sensitive information that they want the system to access, The adversary may choose the controlled value to be the memory address of other code gadgets that they wish to execute by hijacking the control flow of the system\n\n\n- 3)Attack phase: Experiment.\nStep overview: Set up instruction to page fault or microcode assist The adversary must manipulate the system such that a page fault or microcode assist occurs when a valid instruction is run. If the instruction that fails is near where the adversary-controlled value was loaded, the system may forward this value from the microarchitectural buffer incorrectly.\nPossible techniques to use: When targeting Intel SGX enclaves, adversaries that have privileges can manipulate PTEs to provoke page-fault exceptions or microcode assists., When targeting Intel SGX enclaves, adversaries can indirectly revoke permissions for enclave code through the \u201cmprotect\u201d system call, An adversary can evict selected virtual memory pages using legacy interfaces or by increasing physical memory utilization, When attacking a Windows machine, wait until the OS clears the PTE accessed bit. When the page is next accessed, the CPU will always issue a microcode assist for re-setting this bit\n\n\n- 4)Attack phase: Exploit.\nStep overview: Operate on adversary-controlled data Once the attack has been set up and the page fault or microcode assist occurs, the system operates on the adversary-controlled data.\nPossible techniques to use: Influence the system to load sensitive information into microarchitectural state which can be read by the adversary using a code gadget., Hijack execution by jumping to second stage gadgets found in the address space. By utilizing return-oriented programming, this can chain gadgets together and allow the adversary to execute a sequence of gadgets.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Load Value Injection",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey target application and relevant OS shared code libraries Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack. The adversary looks for code gadgets which will allow them to load an adversary-controlled value into trusted memory. They also look for code gadgets which might operate on this controlled value.\nPossible techniques to use: Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Fill microarchitectural buffer with controlled value The adversary will utilize the found code gadget from the previous step to load a value into a microarchitectural buffer.\nPossible techniques to use: The adversary may choose the controlled value to be memory address of sensitive information that they want the system to access, The adversary may choose the controlled value to be the memory address of other code gadgets that they wish to execute by hijacking the control flow of the system\n\n",
        "3)Attack phase: Experiment.\nStep overview: Set up instruction to page fault or microcode assist The adversary must manipulate the system such that a page fault or microcode assist occurs when a valid instruction is run. If the instruction that fails is near where the adversary-controlled value was loaded, the system may forward this value from the microarchitectural buffer incorrectly.\nPossible techniques to use: When targeting Intel SGX enclaves, adversaries that have privileges can manipulate PTEs to provoke page-fault exceptions or microcode assists., When targeting Intel SGX enclaves, adversaries can indirectly revoke permissions for enclave code through the \u201cmprotect\u201d system call, An adversary can evict selected virtual memory pages using legacy interfaces or by increasing physical memory utilization, When attacking a Windows machine, wait until the OS clears the PTE accessed bit. When the page is next accessed, the CPU will always issue a microcode assist for re-setting this bit\n\n",
        "4)Attack phase: Exploit.\nStep overview: Operate on adversary-controlled data Once the attack has been set up and the page fault or microcode assist occurs, the system operates on the adversary-controlled data.\nPossible techniques to use: Influence the system to load sensitive information into microarchitectural state which can be read by the adversary using a code gadget., Hijack execution by jumping to second stage gadgets found in the address space. By utilizing return-oriented programming, this can chain gadgets together and allow the adversary to execute a sequence of gadgets.\n\n"
      ],
      "@Name": "Load Value Injection"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Forced Integer Overflow",
    "context": "",
    "output": "The execution flow for Forced Integer Overflow is the following: 1)Attack phase: Explore.\nStep overview: The first step is exploratory meaning the attacker looks for an integer variable that they can control.\n\n\n* 2)Attack phase: Experiment.\nStep overview: The attacker finds an integer variable that they can write into or manipulate and try to get the value of the integer out of the possible range.\n\n\n* 3)Attack phase: Exploit.\nStep overview: The integer variable is forced to have a value out of range which set its final value to an unexpected value.\n\n\n* 4)Attack phase: Exploit.\nStep overview: The target host acts on the data and unexpected behavior may happen.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: The first step is exploratory meaning the attacker looks for an integer variable that they can control.\n\n",
        "2)Attack phase: Experiment.\nStep overview: The attacker finds an integer variable that they can write into or manipulate and try to get the value of the integer out of the possible range.\n\n",
        "3)Attack phase: Exploit.\nStep overview: The integer variable is forced to have a value out of range which set its final value to an unexpected value.\n\n",
        "4)Attack phase: Exploit.\nStep overview: The target host acts on the data and unexpected behavior may happen.\n\n"
      ],
      "@Name": "Forced Integer Overflow"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Leveraging Race Conditions",
    "context": "",
    "output": "Here are the steps to implement Leveraging Race Conditions:\n1)Attack phase: Explore.\nStep overview: The adversary explores to gauge what level of access they have.\n\n\n* 2)Attack phase: Experiment.\nStep overview: The adversary gains access to a resource on the target host. The adversary modifies the targeted resource. The resource's value is used to determine the next normal execution action.\n\n\n* 3)Attack phase: Exploit.\nStep overview: The resource is modified/checked concurrently by multiple processes. By using one of the processes, the adversary is able to modify the value just before it is consumed by a different process. A race condition occurs and is exploited by the adversary to abuse the target host.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: The adversary explores to gauge what level of access they have.\n\n",
        "2)Attack phase: Experiment.\nStep overview: The adversary gains access to a resource on the target host. The adversary modifies the targeted resource. The resource's value is used to determine the next normal execution action.\n\n",
        "3)Attack phase: Exploit.\nStep overview: The resource is modified/checked concurrently by multiple processes. By using one of the processes, the adversary is able to modify the value just before it is consumed by a different process. A race condition occurs and is exploited by the adversary to abuse the target host.\n\n"
      ],
      "@Name": "Leveraging Race Conditions"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Credential Prompt Impersonation",
    "context": "",
    "output": "The execution flow for Credential Prompt Impersonation is the following: 1)Attack phase: Explore.\nStep overview: Determine suitable tasks to exploit Determine what tasks exist on the target system that may result in a user providing their credentials.\nPossible techniques to use: Determine what tasks prompt a user for their credentials.\n\n\n* 2)Attack phase: Exploit.\nStep overview: Impersonate Task Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials.\nPossible techniques to use: Prompt a user for their credentials, while making the user believe the credential request is legitimate.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine suitable tasks to exploit Determine what tasks exist on the target system that may result in a user providing their credentials.\nPossible techniques to use: Determine what tasks prompt a user for their credentials.\n\n",
        "2)Attack phase: Exploit.\nStep overview: Impersonate Task Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials.\nPossible techniques to use: Prompt a user for their credentials, while making the user believe the credential request is legitimate.\n\n"
      ],
      "@Name": "Credential Prompt Impersonation"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Scan for WSDL Documents The adversary scans for WSDL documents. The WDSL document written in XML is like a handbook on how to communicate with the web services provided by the target host. It provides an open view of the application (function details, purpose, functional break down, entry points, message types, etc.). This is very useful information for the adversary.\n\n\n2)Attack phase: Experiment.\nStep overview: Analyze WSDL files An adversary will analyze the WSDL files and try to find potential weaknesses by sending messages matching the pattern described in the WSDL file. The adversary could run through all of the operations with different message request patterns until a breach is identified.\n\n\n3)Attack phase: Exploit.\nStep overview: Craft malicious content Once an adversary finds a potential weakness, they can craft malicious content to be sent to the system. For instance the adversary may try to submit special characters and observe how the system reacts to an invalid request. The message sent by the adversary may not be XML validated and cause unexpected behavior.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "WSDL Scanning",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Scan for WSDL Documents The adversary scans for WSDL documents. The WDSL document written in XML is like a handbook on how to communicate with the web services provided by the target host. It provides an open view of the application (function details, purpose, functional break down, entry points, message types, etc.). This is very useful information for the adversary.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Analyze WSDL files An adversary will analyze the WSDL files and try to find potential weaknesses by sending messages matching the pattern described in the WSDL file. The adversary could run through all of the operations with different message request patterns until a breach is identified.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Craft malicious content Once an adversary finds a potential weakness, they can craft malicious content to be sent to the system. For instance the adversary may try to submit special characters and observe how the system reacts to an invalid request. The message sent by the adversary may not be XML validated and cause unexpected behavior.\n\n"
      ],
      "@Name": "WSDL Scanning"
    }
  },
  {
    "instruction": "List the execution flow related to capec: iFrame Overlay",
    "context": "",
    "output": "Execution Flow:\nName:Clickjacking\nDescription: An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Clickjacking\nDescription: An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "iFrame Overlay"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Fingerprinting of the operating system In order to create a valid file injection, the attacker needs to know what the underlying OS is so that the proper file seperator is used.\nPossible techniques to use: Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports., TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system., Induce errors to find informative error messages\n\n\n- 2)Attack phase: Explore.\nStep overview: Survey the Application to Identify User-controllable Inputs The attacker surveys the target application to identify all user-controllable inputs, possibly as a valid and authenticated user\nPossible techniques to use: Spider web sites for all available links, entry points to the web site., Manually explore application and inventory all application inputs\n\n\n- 3)Attack phase: Experiment.\nStep overview: Vary inputs, looking for malicious results Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application\nPossible techniques to use: Inject context-appropriate malicious file path using network packet injection tools (netcat, nemesis, etc.), Inject context-appropriate malicious file path using web test frameworks (proxies, TamperData, custom programs, etc.) or simple HTTP requests, Inject context-appropriate malicious file system control syntax\n\n\n- 4)Attack phase: Exploit.\nStep overview: Manipulate files accessible by the application The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)\nPossible techniques to use: The attacker injects context-appropriate malicious file path to access the content of the targeted file., The attacker injects context-appropriate malicious file system control syntax to access the content of the targeted file., The attacker injects context-appropriate malicious file path to cause the application to create, delete a targeted file., The attacker injects context-appropriate malicious file system control syntax to cause the application to create, delete a targeted file., The attacker injects context-appropriate malicious file path in order to manipulate the meta-data of the targeted file., The attacker injects context-appropriate malicious file system control syntax in order to manipulate the meta-data of the targeted file.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Manipulating Web Input to File System Calls",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Fingerprinting of the operating system In order to create a valid file injection, the attacker needs to know what the underlying OS is so that the proper file seperator is used.\nPossible techniques to use: Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports., TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system., Induce errors to find informative error messages\n\n",
        "2)Attack phase: Explore.\nStep overview: Survey the Application to Identify User-controllable Inputs The attacker surveys the target application to identify all user-controllable inputs, possibly as a valid and authenticated user\nPossible techniques to use: Spider web sites for all available links, entry points to the web site., Manually explore application and inventory all application inputs\n\n",
        "3)Attack phase: Experiment.\nStep overview: Vary inputs, looking for malicious results Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application\nPossible techniques to use: Inject context-appropriate malicious file path using network packet injection tools (netcat, nemesis, etc.), Inject context-appropriate malicious file path using web test frameworks (proxies, TamperData, custom programs, etc.) or simple HTTP requests, Inject context-appropriate malicious file system control syntax\n\n",
        "4)Attack phase: Exploit.\nStep overview: Manipulate files accessible by the application The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)\nPossible techniques to use: The attacker injects context-appropriate malicious file path to access the content of the targeted file., The attacker injects context-appropriate malicious file system control syntax to access the content of the targeted file., The attacker injects context-appropriate malicious file path to cause the application to create, delete a targeted file., The attacker injects context-appropriate malicious file system control syntax to cause the application to create, delete a targeted file., The attacker injects context-appropriate malicious file path in order to manipulate the meta-data of the targeted file., The attacker injects context-appropriate malicious file system control syntax in order to manipulate the meta-data of the targeted file.\n\n"
      ],
      "@Name": "Manipulating Web Input to File System Calls"
    }
  },
  {
    "instruction": "Given attack pattern: Log Injection-Tampering-Forging.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Log Injection-Tampering-Forging are: 1)Attack phase: Explore.\nStep overview: Determine Application's Log File Format The first step is exploratory meaning the attacker observes the system. The attacker looks for action and data that are likely to be logged. The attacker may be familiar with the log format of the system.\nPossible techniques to use: Determine logging utility being used by application (e.g. log4j), Gain access to application's source code to determine log file formats., Install or obtain access to instance of application and observe its log file format.\n\n\n2)Attack phase: Exploit.\nStep overview: Manipulate Log Files The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted input that the target software will write to the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.\nPossible techniques to use: \n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine Application's Log File Format The first step is exploratory meaning the attacker observes the system. The attacker looks for action and data that are likely to be logged. The attacker may be familiar with the log format of the system.\nPossible techniques to use: Determine logging utility being used by application (e.g. log4j), Gain access to application's source code to determine log file formats., Install or obtain access to instance of application and observe its log file format.\n\n",
        "2)Attack phase: Exploit.\nStep overview: Manipulate Log Files The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted input that the target software will write to the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.\nPossible techniques to use: \n\n"
      ],
      "@Name": "Log Injection-Tampering-Forging"
    }
  },
  {
    "instruction": "Given attack pattern: Repo Jacking.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Repo Jacking are: 1)Attack phase: Explore.\nStep overview: Identify target The adversary must first identify a target repository that is commonly used and whose owner/maintainer has either changed/deleted their username or transferred ownership of the repository and then deleted their account. The target should typically be a popular and widely used package, as to increase the scope of the attack.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Recreate initial repository path The adversary re-registers the account that was renamed/deleted by the target repository's owner/maintainer and recreates the target repository with malicious code intended to exploit an application. These steps may need to happen in reverse (i.e., recreate repository and then rename an existing account to the target account) if protections are in place to prevent repository reuse.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Exploit victims The adversary's malicious code is incorporated into applications that directly reference the initial repository, which further allows the adversary to conduct additional attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target The adversary must first identify a target repository that is commonly used and whose owner/maintainer has either changed/deleted their username or transferred ownership of the repository and then deleted their account. The target should typically be a popular and widely used package, as to increase the scope of the attack.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Recreate initial repository path The adversary re-registers the account that was renamed/deleted by the target repository's owner/maintainer and recreates the target repository with malicious code intended to exploit an application. These steps may need to happen in reverse (i.e., recreate repository and then rename an existing account to the target account) if protections are in place to prevent repository reuse.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Exploit victims The adversary's malicious code is incorporated into applications that directly reference the initial repository, which further allows the adversary to conduct additional attacks.\n\n"
      ],
      "@Name": "Repo Jacking"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Password Recovery Exploitation",
    "context": "",
    "output": "Here are the steps to implement Password Recovery Exploitation:\n1)Attack phase: Explore.\nStep overview: Understand the password recovery mechanism and how it works.\n\n\n2)Attack phase: Exploit.\nStep overview: Find a weakness in the password recovery mechanism and exploit it. For instance, a weakness may be that a standard single security question is used with an easy to determine answer.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Understand the password recovery mechanism and how it works.\n\n",
        "2)Attack phase: Exploit.\nStep overview: Find a weakness in the password recovery mechanism and exploit it. For instance, a weakness may be that a standard single security question is used with an easy to determine answer.\n\n"
      ],
      "@Name": "Password Recovery Exploitation"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - OS Command Injection",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Identify inputs for OS commands The attacker determines user controllable input that gets passed as part of a command to the underlying operating system.\nPossible techniques to use: Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports., TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system., Induce errors to find informative error messages\n\n\n* 2)Attack phase: Explore.\nStep overview: Survey the Application The attacker surveys the target application, possibly as a valid and authenticated user\nPossible techniques to use: Spidering web sites for all available links, Inventory all application inputs\n\n\n* 3)Attack phase: Experiment.\nStep overview: Vary inputs, looking for malicious results. Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input, containing OS commands, to be passed to the application\nPossible techniques to use: Inject command delimiters using network packet injection tools (netcat, nemesis, etc.), Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)\n\n\n* 4)Attack phase: Exploit.\nStep overview: Execute malicious commands The attacker may steal information, install a back door access mechanism, elevate privileges or compromise the system in some other way.\nPossible techniques to use: The attacker executes a command that stores sensitive information into a location where they can retrieve it later (perhaps using a different command injection).\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify inputs for OS commands The attacker determines user controllable input that gets passed as part of a command to the underlying operating system.\nPossible techniques to use: Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports., TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system., Induce errors to find informative error messages\n\n",
        "2)Attack phase: Explore.\nStep overview: Survey the Application The attacker surveys the target application, possibly as a valid and authenticated user\nPossible techniques to use: Spidering web sites for all available links, Inventory all application inputs\n\n",
        "3)Attack phase: Experiment.\nStep overview: Vary inputs, looking for malicious results. Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input, containing OS commands, to be passed to the application\nPossible techniques to use: Inject command delimiters using network packet injection tools (netcat, nemesis, etc.), Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)\n\n",
        "4)Attack phase: Exploit.\nStep overview: Execute malicious commands The attacker may steal information, install a back door access mechanism, elevate privileges or compromise the system in some other way.\nPossible techniques to use: The attacker executes a command that stores sensitive information into a location where they can retrieve it later (perhaps using a different command injection).\n\n"
      ],
      "@Name": "OS Command Injection"
    }
  },
  {
    "instruction": "List the execution flow related to capec: TCP Options Probe",
    "context": "",
    "output": "Execution Flow:\nName:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP Options Probe"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - SoundSquatting",
    "context": "",
    "output": "Here are the steps to implement SoundSquatting:\n1)Attack phase: Explore.\nStep overview: Determine target website The adversary first determines which website to impersonate, generally one that is trusted, receives a consistent amount of traffic, and is a homophone.\nPossible techniques to use: Research popular or high traffic websites which are also homophones.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Impersonate trusted domain In order to impersonate the trusted domain, the adversary needs to register the SoundSquatted URL.\nPossible techniques to use: Register the SoundSquatted domain.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Deceive user into visiting domain Finally, the adversary needs to deceive a user into visiting the SoundSquatted domain.\nPossible techniques to use: Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the SoundSquatted domain., Assume that a user will unintentionally use the homophone in the URL, leading the user to the SoundSquatted domain.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine target website The adversary first determines which website to impersonate, generally one that is trusted, receives a consistent amount of traffic, and is a homophone.\nPossible techniques to use: Research popular or high traffic websites which are also homophones.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Impersonate trusted domain In order to impersonate the trusted domain, the adversary needs to register the SoundSquatted URL.\nPossible techniques to use: Register the SoundSquatted domain.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Deceive user into visiting domain Finally, the adversary needs to deceive a user into visiting the SoundSquatted domain.\nPossible techniques to use: Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the SoundSquatted domain., Assume that a user will unintentionally use the homophone in the URL, leading the user to the SoundSquatted domain.\n\n"
      ],
      "@Name": "SoundSquatting"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Serialized Data External Linking",
    "context": "",
    "output": "Execution Flow:\nName:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n\n- Name:Web Services Protocol Manipulation\nDescription: An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n",
        "Name:Web Services Protocol Manipulation\nDescription: An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Serialized Data External Linking"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Identify Shared Files/Directories on System",
    "context": "",
    "output": "Execution Flow:\nName:Network Topology Mapping\nDescription: An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.\nNature of relationship: ChildOf\n\n\nName:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n\nName:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: CanPrecede\n\n\nName:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Network Topology Mapping\nDescription: An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.\nNature of relationship: ChildOf\n\n",
        "Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n",
        "Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: CanPrecede\n\n",
        "Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Identify Shared Files/Directories on System"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: The adversary explores to gauge what level of access they have.\n\n\n- 2)Attack phase: Experiment.\nStep overview: The adversary confirms access to a resource on the target host. The adversary confirms ability to modify the targeted resource.\n\n\n- 3)Attack phase: Exploit.\nStep overview: The adversary decides to leverage the race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary can replace the resource and cause an escalation of privilege.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: The adversary explores to gauge what level of access they have.\n\n",
        "2)Attack phase: Experiment.\nStep overview: The adversary confirms access to a resource on the target host. The adversary confirms ability to modify the targeted resource.\n\n",
        "3)Attack phase: Exploit.\nStep overview: The adversary decides to leverage the race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary can replace the resource and cause an escalation of privilege.\n\n"
      ],
      "@Name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Bypassing Electronic Locks and Access Controls",
    "context": "",
    "output": "Execution Flow:\nName:Bypassing Physical Security\nDescription: Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Bypassing Physical Security\nDescription: Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Bypassing Electronic Locks and Access Controls"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Oversized Serialized Data Payloads",
    "context": "",
    "output": "The execution flow for Oversized Serialized Data Payloads is the following: 1)Attack phase: Explore.\nStep overview: An adversary determines the input data stream that is being processed by an serialized data parser on the victim's side.\n\n\n2)Attack phase: Experiment.\nStep overview: An adversary crafts input data that may have an adverse effect on the operation of the data parser when the data is parsed on the victim's system.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: An adversary determines the input data stream that is being processed by an serialized data parser on the victim's side.\n\n",
        "2)Attack phase: Experiment.\nStep overview: An adversary crafts input data that may have an adverse effect on the operation of the data parser when the data is parsed on the victim's system.\n\n"
      ],
      "@Name": "Oversized Serialized Data Payloads"
    }
  },
  {
    "instruction": "Given attack pattern: Cross Site Tracing.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Cross Site Tracing are: 1)Attack phase: Explore.\nStep overview: Determine if HTTP Trace is enabled Determine if HTTP Trace is enabled at the web server with which the victim has an active session\nPossible techniques to use: An adversary may issue an HTTP Trace request to the target web server and observe if the response arrives with the original request in the body of the response.\n\n\n2)Attack phase: Experiment.\nStep overview: Identify mechanism to launch HTTP Trace request The adversary attempts to force the victim to issue an HTTP Trace request to the targeted application.\nPossible techniques to use: The adversary probes for cross-site scripting vulnerabilities to force the victim into issuing an HTTP Trace request.\n\n\n3)Attack phase: Exploit.\nStep overview: Create a malicious script that pings the web server with HTTP TRACE request The adversary creates a malicious script that will induce the victim's browser to issue an HTTP TRACE request to the destination system's web server. The script will further intercept the response from the web server, pick up sensitive information out of it, and forward to the site controlled by the adversary.\nPossible techniques to use: The adversary's malicious script circumvents the httpOnly cookie attribute that prevents from hijacking the victim's session cookie directly using document.cookie and instead leverages the HTTP TRACE to catch this information from the header of the HTTP request once it is echoed back from the web server in the body of the HTTP TRACE response.\n\n\n4)Attack phase: Exploit.\nStep overview: Execute malicious HTTP Trace launching script The adversary leverages an XSS vulnerability to force the victim to execute the malicious HTTP Trace launching script\n\n\n5)Attack phase: Exploit.\nStep overview: Intercept HTTP TRACE response The adversary's script intercepts the HTTP TRACE response from teh web server, glance sensitive information from it, and forward that information to a server controlled by the adversary.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine if HTTP Trace is enabled Determine if HTTP Trace is enabled at the web server with which the victim has an active session\nPossible techniques to use: An adversary may issue an HTTP Trace request to the target web server and observe if the response arrives with the original request in the body of the response.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Identify mechanism to launch HTTP Trace request The adversary attempts to force the victim to issue an HTTP Trace request to the targeted application.\nPossible techniques to use: The adversary probes for cross-site scripting vulnerabilities to force the victim into issuing an HTTP Trace request.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Create a malicious script that pings the web server with HTTP TRACE request The adversary creates a malicious script that will induce the victim's browser to issue an HTTP TRACE request to the destination system's web server. The script will further intercept the response from the web server, pick up sensitive information out of it, and forward to the site controlled by the adversary.\nPossible techniques to use: The adversary's malicious script circumvents the httpOnly cookie attribute that prevents from hijacking the victim's session cookie directly using document.cookie and instead leverages the HTTP TRACE to catch this information from the header of the HTTP request once it is echoed back from the web server in the body of the HTTP TRACE response.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Execute malicious HTTP Trace launching script The adversary leverages an XSS vulnerability to force the victim to execute the malicious HTTP Trace launching script\n\n",
        "5)Attack phase: Exploit.\nStep overview: Intercept HTTP TRACE response The adversary's script intercepts the HTTP TRACE response from teh web server, glance sensitive information from it, and forward that information to a server controlled by the adversary.\n\n"
      ],
      "@Name": "Cross Site Tracing"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various leading 'Ghost' character sequences to determine how to application filters them.\nPossible techniques to use: Add additional characters to common sequences such as \"../\" to see how the application will filter them., Try repeating special characters (?, @, #, *, etc.) at the beginning of user input to see how the application filters these out.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Bypass input filtering Using what the adversary learned about how the application filters input data, they craft specific input data that bypasses the filter. This can lead to directory traversal attacks, arbitrary shell command execution, corruption of files, etc.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various leading 'Ghost' character sequences to determine how to application filters them.\nPossible techniques to use: Add additional characters to common sequences such as \"../\" to see how the application will filter them., Try repeating special characters (?, @, #, *, etc.) at the beginning of user input to see how the application filters these out.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Bypass input filtering Using what the adversary learned about how the application filters input data, they craft specific input data that bypasses the filter. This can lead to directory traversal attacks, arbitrary shell command execution, corruption of files, etc.\n\n"
      ],
      "@Name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters"
    }
  },
  {
    "instruction": "Given attack pattern: Stored XSS.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Stored XSS are: 1)Attack phase: Explore.\nStep overview: Survey the application for stored user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application. The adversary is looking for areas where user input is stored, such as user profiles, shopping carts, file managers, forums, blogs, and logs.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for stored XSS vulnerability The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Use a list of XSS probe strings to submit script in input fields that could be stored by the web application. If possible, the probe strings contain a unique identifier so they can be queried for after submitting to see if they are stored., Use a list of HTML special characters to submit in input fields that could be stored by the web application and check if they were properly encoded, replaced, or filtered out.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Store malicious XSS content Once the adversary has determined which stored locations are vulnerable to XSS, they will interact with the web application to store the malicious content. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.\nPossible techniques to use: Store a malicious script on a page that will execute when viewed by the victim., Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Get victim to view stored content In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.\nPossible techniques to use: Send a phishing email to the victim containing a URL that will direct them to the malicious stored content., Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for stored user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application. The adversary is looking for areas where user input is stored, such as user profiles, shopping carts, file managers, forums, blogs, and logs.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for stored XSS vulnerability The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Use a list of XSS probe strings to submit script in input fields that could be stored by the web application. If possible, the probe strings contain a unique identifier so they can be queried for after submitting to see if they are stored., Use a list of HTML special characters to submit in input fields that could be stored by the web application and check if they were properly encoded, replaced, or filtered out.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Store malicious XSS content Once the adversary has determined which stored locations are vulnerable to XSS, they will interact with the web application to store the malicious content. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.\nPossible techniques to use: Store a malicious script on a page that will execute when viewed by the victim., Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Get victim to view stored content In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.\nPossible techniques to use: Send a phishing email to the victim containing a URL that will direct them to the malicious stored content., Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.\n\n"
      ],
      "@Name": "Stored XSS"
    }
  },
  {
    "instruction": "List the execution flow related to capec: TCP Sequence Number Probe",
    "context": "",
    "output": "Execution Flow:\nName:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP Sequence Number Probe"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Modification of Registry Run Keys",
    "context": "",
    "output": "The execution flow for Modification of Registry Run Keys is the following: 1)Attack phase: Explore.\nStep overview: Determine target system The adversary must first determine the system they wish to target. This attack only works on Windows.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Gain access to the system The adversary needs to gain access to the system in some way so that they can modify the Windows registry.\nPossible techniques to use: Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked., Gain remote access to a system through a variety of means.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Modify Windows registry The adversary will modify the Windows registry by adding a new entry to the \"run keys\" referencing a desired program. This program will be run whenever the user logs in.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine target system The adversary must first determine the system they wish to target. This attack only works on Windows.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Gain access to the system The adversary needs to gain access to the system in some way so that they can modify the Windows registry.\nPossible techniques to use: Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked., Gain remote access to a system through a variety of means.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Modify Windows registry The adversary will modify the Windows registry by adding a new entry to the \"run keys\" referencing a desired program. This program will be run whenever the user logs in.\n\n"
      ],
      "@Name": "Modification of Registry Run Keys"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Orbital Jamming",
    "context": "",
    "output": "Execution Flow:\nName:Jamming\nDescription: An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Jamming\nDescription: An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Orbital Jamming"
    }
  },
  {
    "instruction": "Given attack pattern: Leverage Alternate Encoding.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Leverage Alternate Encoding are: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Try to use different encodings of content in order to bypass validation routines.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Try to use different encodings of content in order to bypass validation routines.\n\n"
      ],
      "@Name": "Leverage Alternate Encoding"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Buffer Overflow via Parameter Expansion",
    "context": "",
    "output": "Here are the steps to implement Buffer Overflow via Parameter Expansion:\n1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.\n\n\n2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.\nPossible techniques to use: In this attack, the normal method of providing large user input does not work. The program performs bounds checking on the user input, but not the expanded user input. The adversary needs to provide input that they believe will be expanded by the program to overflow a buffer. To identify where this is possible, an adversary either needs to have knowledge of the inner workings of the program or use a disassembler and other reverse engineering tools to guide the search.\n\n\n3)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts the input to be given to the program. If the intent is to simply cause the software to crash, the input needs only to expand to an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft input that expands in a way that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.\nPossible techniques to use: Create specific files and directories on the system and then give input using path traversal shortcuts to those directories that could expand past an input buffer.\n\n\n4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the injection vector, the adversary gives the crafted input to the program, overflowing the buffer.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.\nPossible techniques to use: In this attack, the normal method of providing large user input does not work. The program performs bounds checking on the user input, but not the expanded user input. The adversary needs to provide input that they believe will be expanded by the program to overflow a buffer. To identify where this is possible, an adversary either needs to have knowledge of the inner workings of the program or use a disassembler and other reverse engineering tools to guide the search.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts the input to be given to the program. If the intent is to simply cause the software to crash, the input needs only to expand to an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft input that expands in a way that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.\nPossible techniques to use: Create specific files and directories on the system and then give input using path traversal shortcuts to those directories that could expand past an input buffer.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the injection vector, the adversary gives the crafted input to the program, overflowing the buffer.\n\n"
      ],
      "@Name": "Buffer Overflow via Parameter Expansion"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Browser in the Middle (BiTM)",
    "context": "",
    "output": "The execution flow for Browser in the Middle (BiTM) is the following: 1)Attack phase: Explore.\nStep overview: Identify potential targets The adversary identifies an application or service that the target is likely to use.\nPossible techniques to use: The adversary stands up a server to host the transparent browser and entices victims to use it by using a domain name similar to the legitimate application. In addition to the transparent browser, the adversary could also install a web proxy, sniffer, keylogger, and other tools to assist in their goals.\n\n\n2)Attack phase: Experiment.\nStep overview: Lure victims The adversary crafts a phishing campaign to lure unsuspecting victims into using the transparent browser.\nPossible techniques to use: An adversary can create a convincing email with a link to download the web client and interact with the transparent browser.\n\n\n3)Attack phase: Exploit.\nStep overview: Monitor and Manipulate Data When the victim establishes the connection to the transparent browser, the adversary can view victim activity and make alterations to what the victim sees when browsing the web.\nPossible techniques to use: Once a victim has established a connection to the transparent browser, the adversary can use installed tools such as a web proxy, keylogger, or additional malicious browser extensions to gather and manipulate data or impersonate the victim.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify potential targets The adversary identifies an application or service that the target is likely to use.\nPossible techniques to use: The adversary stands up a server to host the transparent browser and entices victims to use it by using a domain name similar to the legitimate application. In addition to the transparent browser, the adversary could also install a web proxy, sniffer, keylogger, and other tools to assist in their goals.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Lure victims The adversary crafts a phishing campaign to lure unsuspecting victims into using the transparent browser.\nPossible techniques to use: An adversary can create a convincing email with a link to download the web client and interact with the transparent browser.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Monitor and Manipulate Data When the victim establishes the connection to the transparent browser, the adversary can view victim activity and make alterations to what the victim sees when browsing the web.\nPossible techniques to use: Once a victim has established a connection to the transparent browser, the adversary can use installed tools such as a web proxy, keylogger, or additional malicious browser extensions to gather and manipulate data or impersonate the victim.\n\n"
      ],
      "@Name": "Browser in the Middle (BiTM)"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Analyze and Understand Session IDs The attacker finds that the targeted application use session credentials to identify legitimate users.\nPossible techniques to use: An attacker makes many anonymous connections and records the session IDs., An attacker makes authorized connections and records the session tokens or credentials.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Create Session IDs. Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.\nPossible techniques to use: The attacker manipulates the HTTP request message and adds their forged session IDs in to the requests or cookies.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Abuse the Victim's Session Credentials The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.\nPossible techniques to use: The attacker loads the predefined or predicted session ID into their browser and browses to protected data or functionality., The attacker loads the predefined or predicted session ID into their software and utilizes functionality with the rights of the victim.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Session Credential Falsification through Forging",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Analyze and Understand Session IDs The attacker finds that the targeted application use session credentials to identify legitimate users.\nPossible techniques to use: An attacker makes many anonymous connections and records the session IDs., An attacker makes authorized connections and records the session tokens or credentials.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Create Session IDs. Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.\nPossible techniques to use: The attacker manipulates the HTTP request message and adds their forged session IDs in to the requests or cookies.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Abuse the Victim's Session Credentials The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.\nPossible techniques to use: The attacker loads the predefined or predicted session ID into their browser and browses to protected data or functionality., The attacker loads the predefined or predicted session ID into their software and utilizes functionality with the rights of the victim.\n\n"
      ],
      "@Name": "Session Credential Falsification through Forging"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Identify Target Web-Mail Server The adversary first identifies the web-mail server they wish to exploit.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Identify Vulnerable Parameters Once the adversary has identified a web-mail server, they identify any vulnerable parameters by altering their values in requests. The adversary knows that the parameter is vulnerable if the web-mail server returns an error of any sort. Ideally, the adversary is looking for a descriptive error message.\nPossible techniques to use: Assign a null value to a parameter being used by the web-mail server and observe the response., Assign a random value to a parameter being used by the web-mail server and observe the response., Add additional values to a parameter being used by the web-mail server and observe the response., Add non standard special characters (i.e.: \\, ', \", @, #, !, |) to a parameter being used by the web-mail server and observe the response., Eliminate a parameter being used by the web-mail server and observe the response.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Determine Level of Injection After identifying all vulnerable parameters, the adversary determines what level of injection is possible.\nPossible techniques to use: Evaluate error messages to determine what IMAP/SMTP command is being executed for the vulnerable parameter. Sometimes the actually query will be placed in the error message., If there aren't descriptive error messages, the adversary will analyze the affected functionality to deduce the possible commands that could be being used by the mail-server.\n\n\n- 4)Attack phase: Exploit.\nStep overview: Inject IMAP/SMTP Commands The adversary manipulates the vulnerable parameters to inject an IMAP/SMTP command and execute it on the mail-server.\nPossible techniques to use: Structure the injection as a header, body, and footer. The header contains the ending of the expected message, the body contains the injection of the new command, and the footer contains the beginning of the expected command., Each part of the injection payload needs to be terminated with the CRLF (%0d%0a) sequence.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "IMAP/SMTP Command Injection",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify Target Web-Mail Server The adversary first identifies the web-mail server they wish to exploit.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Identify Vulnerable Parameters Once the adversary has identified a web-mail server, they identify any vulnerable parameters by altering their values in requests. The adversary knows that the parameter is vulnerable if the web-mail server returns an error of any sort. Ideally, the adversary is looking for a descriptive error message.\nPossible techniques to use: Assign a null value to a parameter being used by the web-mail server and observe the response., Assign a random value to a parameter being used by the web-mail server and observe the response., Add additional values to a parameter being used by the web-mail server and observe the response., Add non standard special characters (i.e.: \\, ', \", @, #, !, |) to a parameter being used by the web-mail server and observe the response., Eliminate a parameter being used by the web-mail server and observe the response.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Determine Level of Injection After identifying all vulnerable parameters, the adversary determines what level of injection is possible.\nPossible techniques to use: Evaluate error messages to determine what IMAP/SMTP command is being executed for the vulnerable parameter. Sometimes the actually query will be placed in the error message., If there aren't descriptive error messages, the adversary will analyze the affected functionality to deduce the possible commands that could be being used by the mail-server.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Inject IMAP/SMTP Commands The adversary manipulates the vulnerable parameters to inject an IMAP/SMTP command and execute it on the mail-server.\nPossible techniques to use: Structure the injection as a header, body, and footer. The header contains the ending of the expected message, the body contains the injection of the new command, and the footer contains the beginning of the expected command., Each part of the injection payload needs to be terminated with the CRLF (%0d%0a) sequence.\n\n"
      ],
      "@Name": "IMAP/SMTP Command Injection"
    }
  },
  {
    "instruction": "Given attack pattern: Manipulating Hidden Fields.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Manipulating Hidden Fields are: 1)Attack phase: Explore.\nStep overview: Probe target web application The adversary first probes the target web application to find all possible pages that can be visited on the website.\nPossible techniques to use: Use a spidering tool to follow and record all links, Use a proxy tool to record all links visited during a manual traversal of the web application.\n\n\n* 2)Attack phase: Explore.\nStep overview: Find hidden fields Once the web application has been traversed, the adversary looks for all hidden HTML fields present in the client-side.\nPossible techniques to use: Use the inspect tool on all modern browsers and filter for the keyword \"hidden\", Specifically look for hidden fields inside form elements.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Send modified hidden fields to server-side Once the adversary has found hidden fields in the client-side, they will modify the values of these hidden fields one by one and then interact with the web application so that this data is sent to the server-side. The adversary observes the response from the server to determine if the values of each hidden field are being validated.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Manipulate hidden fields Once the adversary has determined which hidden fields are not being validated by the server, they will manipulate them to change the normal behavior of the web application in a way that benefits the adversary.\nPossible techniques to use: Manipulate a hidden field inside a form element and then submit the form so that the manipulated data is sent to the server.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Probe target web application The adversary first probes the target web application to find all possible pages that can be visited on the website.\nPossible techniques to use: Use a spidering tool to follow and record all links, Use a proxy tool to record all links visited during a manual traversal of the web application.\n\n",
        "2)Attack phase: Explore.\nStep overview: Find hidden fields Once the web application has been traversed, the adversary looks for all hidden HTML fields present in the client-side.\nPossible techniques to use: Use the inspect tool on all modern browsers and filter for the keyword \"hidden\", Specifically look for hidden fields inside form elements.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Send modified hidden fields to server-side Once the adversary has found hidden fields in the client-side, they will modify the values of these hidden fields one by one and then interact with the web application so that this data is sent to the server-side. The adversary observes the response from the server to determine if the values of each hidden field are being validated.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Manipulate hidden fields Once the adversary has determined which hidden fields are not being validated by the server, they will manipulate them to change the normal behavior of the web application in a way that benefits the adversary.\nPossible techniques to use: Manipulate a hidden field inside a form element and then submit the form so that the manipulated data is sent to the server.\n\n"
      ],
      "@Name": "Manipulating Hidden Fields"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Credential Stuffing",
    "context": "",
    "output": "The execution flow for Credential Stuffing is the following: 1)Attack phase: Explore.\nStep overview: Acquire known credentials The adversary must obtain known credentials in order to access the target system, application, or service.\nPossible techniques to use: An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web., An adversary leverages a key logger or phishing attack to steal user credentials as they are provided., An adversary conducts a sniffing attack to steal credentials as they are transmitted., An adversary gains access to a database and exfiltrates password hashes., An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.\n\n\n* 2)Attack phase: Explore.\nStep overview: Determine target's password policy Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.\nPossible techniques to use: Determine minimum and maximum allowed password lengths., Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary)., Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).\n\n\n* 3)Attack phase: Experiment.\nStep overview: Attempt authentication Try each username/password combination until the target grants access.\nPossible techniques to use: Manually or automatically enter each username/password combination through the target's interface.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Impersonate An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application\n\n\n* 4)Attack phase: Exploit.\nStep overview: Spoofing Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.\n\n\n* 5)Attack phase: Exploit.\nStep overview: Data Exfiltration The adversary can obtain sensitive data contained within the system or application.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Acquire known credentials The adversary must obtain known credentials in order to access the target system, application, or service.\nPossible techniques to use: An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web., An adversary leverages a key logger or phishing attack to steal user credentials as they are provided., An adversary conducts a sniffing attack to steal credentials as they are transmitted., An adversary gains access to a database and exfiltrates password hashes., An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.\n\n",
        "2)Attack phase: Explore.\nStep overview: Determine target's password policy Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.\nPossible techniques to use: Determine minimum and maximum allowed password lengths., Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary)., Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).\n\n",
        "3)Attack phase: Experiment.\nStep overview: Attempt authentication Try each username/password combination until the target grants access.\nPossible techniques to use: Manually or automatically enter each username/password combination through the target's interface.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Impersonate An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application\n\n",
        "4)Attack phase: Exploit.\nStep overview: Spoofing Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.\n\n",
        "5)Attack phase: Exploit.\nStep overview: Data Exfiltration The adversary can obtain sensitive data contained within the system or application.\n\n"
      ],
      "@Name": "Credential Stuffing"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Altered Component Firmware",
    "context": "",
    "output": "Execution Flow:\nName:Infected Hardware\nDescription: An adversary inserts malicious logic into hardware, typically in the form of a computer virus or rootkit. This logic is often hidden from the user of the hardware and works behind the scenes to achieve negative impacts. This pattern of attack focuses on hardware already fielded and used in operation as opposed to hardware that is still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Infected Hardware\nDescription: An adversary inserts malicious logic into hardware, typically in the form of a computer virus or rootkit. This logic is often hidden from the user of the hardware and works behind the scenes to achieve negative impacts. This pattern of attack focuses on hardware already fielded and used in operation as opposed to hardware that is still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Altered Component Firmware"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Buffer Overflow via Environment Variables",
    "context": "",
    "output": "Here are the steps to implement Buffer Overflow via Environment Variables:\n1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application or program to perform the buffer overflow on. In this attack the adversary looks for an application that loads the content of an environment variable into a buffer.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.\nPossible techniques to use: Change the values of environment variables thought to be used by the application to contain excessive data. If the program is loading the value of the environment variable into a buffer, this could cause a crash and an attack vector will be found.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n\n* 4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the injection vector, the adversary injects the crafted overflow content into the buffer.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application or program to perform the buffer overflow on. In this attack the adversary looks for an application that loads the content of an environment variable into a buffer.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.\nPossible techniques to use: Change the values of environment variables thought to be used by the application to contain excessive data. If the program is loading the value of the environment variable into a buffer, this could cause a crash and an attack vector will be found.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n",
        "4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the injection vector, the adversary injects the crafted overflow content into the buffer.\n\n"
      ],
      "@Name": "Buffer Overflow via Environment Variables"
    }
  },
  {
    "instruction": "List the execution flow related to capec: StarJacking",
    "context": "",
    "output": "Execution Flow:\nName:Spoof Open-Source Software Metadata\nDescription: An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Spoof Open-Source Software Metadata\nDescription: An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "StarJacking"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Reflection Attack in Authentication Protocol",
    "context": "",
    "output": "Execution Flow:\nName:Protocol Manipulation\nDescription: An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\nNature of relationship: ChildOf\n\n\n- Name:Authentication Abuse\nDescription: An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Protocol Manipulation\nDescription: An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\nNature of relationship: ChildOf\n\n",
        "Name:Authentication Abuse\nDescription: An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Reflection Attack in Authentication Protocol"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Experiment.\nStep overview: Identify and characterize metacharacter-processing vulnerabilities in email headers An attacker creates emails with headers containing various metacharacter-based malicious payloads in order to determine whether the target application processes the malicious content and in what manner it does so.\nPossible techniques to use: Use an automated tool (fuzzer) to create malicious emails headers containing metacharacter-based payloads., Manually tampering email headers to inject malicious metacharacter-based payload content in them.\n\n\n- 2)Attack phase: Exploit.\nStep overview: An attacker leverages vulnerabilities identified during the Experiment Phase to inject malicious email headers and cause the targeted email application to exhibit behavior outside of its expected constraints.\nPossible techniques to use: Send emails with specifically-constructed, metacharacter-based malicious payloads in the email headers to targeted systems running email processing applications identified as vulnerable during the Experiment Phase.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Experiment.\nStep overview: Identify and characterize metacharacter-processing vulnerabilities in email headers An attacker creates emails with headers containing various metacharacter-based malicious payloads in order to determine whether the target application processes the malicious content and in what manner it does so.\nPossible techniques to use: Use an automated tool (fuzzer) to create malicious emails headers containing metacharacter-based payloads., Manually tampering email headers to inject malicious metacharacter-based payload content in them.\n\n",
        "2)Attack phase: Exploit.\nStep overview: An attacker leverages vulnerabilities identified during the Experiment Phase to inject malicious email headers and cause the targeted email application to exhibit behavior outside of its expected constraints.\nPossible techniques to use: Send emails with specifically-constructed, metacharacter-based malicious payloads in the email headers to targeted systems running email processing applications identified as vulnerable during the Experiment Phase.\n\n"
      ],
      "@Name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Windows Admin Shares with Stolen Credentials",
    "context": "",
    "output": "Execution Flow:\nName:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: ChildOf\n\n\nName:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\nName:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: CanPrecede\n\n\nName:Local Execution of Code\nDescription: An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.\nNature of relationship: CanPrecede\n\n\nName:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: ChildOf\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: CanPrecede\n\n",
        "Name:Local Execution of Code\nDescription: An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.\nNature of relationship: CanPrecede\n\n",
        "Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Windows Admin Shares with Stolen Credentials"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Active OS Fingerprinting",
    "context": "",
    "output": "Execution Flow:\nName:Fingerprinting\nDescription: An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Fingerprinting\nDescription: An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Active OS Fingerprinting"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Create Malicious Client",
    "context": "",
    "output": "Execution Flow:\nName:Exploiting Trust in Client\nDescription: An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Exploiting Trust in Client\nDescription: An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Create Malicious Client"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - BitSquatting",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Determine target website The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.\nPossible techniques to use: Research popular or high traffic websites.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Impersonate trusted domain In order to impersonate the trusted domain, the adversary needs to register the BitSquatted URL.\nPossible techniques to use: Register the BitSquatted domain.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Wait for a user to visit the domain Finally, the adversary simply waits for a user to be unintentionally directed to the BitSquatted domain.\nPossible techniques to use: Simply wait for an error in memory to occur, redirecting the user to the malicious domain.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine target website The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.\nPossible techniques to use: Research popular or high traffic websites.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Impersonate trusted domain In order to impersonate the trusted domain, the adversary needs to register the BitSquatted URL.\nPossible techniques to use: Register the BitSquatted domain.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Wait for a user to visit the domain Finally, the adversary simply waits for a user to be unintentionally directed to the BitSquatted domain.\nPossible techniques to use: Simply wait for an error in memory to occur, redirecting the user to the malicious domain.\n\n"
      ],
      "@Name": "BitSquatting"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Pretexting via Tech Support",
    "context": "",
    "output": "Execution Flow:\nName:Pretexting\nDescription: An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Pretexting\nDescription: An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Pretexting via Tech Support"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Key Negotiation of Bluetooth Attack (KNOB)",
    "context": "",
    "output": "Here are the steps to implement Key Negotiation of Bluetooth Attack (KNOB):\n1)Attack phase: Explore.\nStep overview: Discovery Using an established Person in the Middle setup, search for Bluetooth devices beginning the authentication process.\nPossible techniques to use: Use packet capture tools.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Change the entropy bits Upon recieving the initial key negotiation packet from the master, the adversary modifies the entropy bits requested to 1 to allow for easy decryption before it is forwarded.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Capture and decrypt data Once the entropy of encryption is known, the adversary can capture data and then decrypt on their device.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Discovery Using an established Person in the Middle setup, search for Bluetooth devices beginning the authentication process.\nPossible techniques to use: Use packet capture tools.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Change the entropy bits Upon recieving the initial key negotiation packet from the master, the adversary modifies the entropy bits requested to 1 to allow for easy decryption before it is forwarded.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Capture and decrypt data Once the entropy of encryption is known, the adversary can capture data and then decrypt on their device.\n\n"
      ],
      "@Name": "Key Negotiation of Bluetooth Attack (KNOB)"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: URL Encoding",
    "context": "",
    "output": "The execution flow for URL Encoding is the following: 1)Attack phase: Explore.\nStep overview: Survey web application for URLs with parameters Using a browser, an automated tool or by inspecting the application, an adversary records all URLs that contain parameters.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Probe URLs to locate vulnerabilities The adversary uses the URLs gathered in the \"Explore\" phase as a target list and tests parameters with different encodings of special characters to see how the web application will handle them.\nPossible techniques to use: Use URL encodings of special characters such as semi-colons, backslashes, or question marks that might be filtered out normally., Combine the use of URL encodings with other encoding techniques such as the triple dot and escape slashes.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Inject special characters into URL parameters Using the information gathered in the \"Experiment\" phase, the adversary injects special characters into the URL using URL encoding. This can lead to path traversal, cross-site scripting, SQL injection, etc.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey web application for URLs with parameters Using a browser, an automated tool or by inspecting the application, an adversary records all URLs that contain parameters.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe URLs to locate vulnerabilities The adversary uses the URLs gathered in the \"Explore\" phase as a target list and tests parameters with different encodings of special characters to see how the web application will handle them.\nPossible techniques to use: Use URL encodings of special characters such as semi-colons, backslashes, or question marks that might be filtered out normally., Combine the use of URL encodings with other encoding techniques such as the triple dot and escape slashes.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Inject special characters into URL parameters Using the information gathered in the \"Experiment\" phase, the adversary injects special characters into the URL using URL encoding. This can lead to path traversal, cross-site scripting, SQL injection, etc.\n\n"
      ],
      "@Name": "URL Encoding"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - TCP Timestamp Probe",
    "context": "",
    "output": "Here are the steps to implement TCP Timestamp Probe:\n1)Attack phase: Explore.\nStep overview: Determine if timestamps are present. The adversary sends a probe packet to the remote host to identify if timestamps are present.\n\n\n2)Attack phase: Experiment.\nStep overview: Record and analyze timestamp values. If the remote host is using timestamp, obtain several timestamps, analyze them and compare them to known values.\nPossible techniques to use: The adversary sends several requests and records the timestamp values., The adversary analyzes the timestamp values and determines an average increments per second in the timestamps for the target., The adversary compares this result to a database of known TCP timestamp increments for a possible match.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine if timestamps are present. The adversary sends a probe packet to the remote host to identify if timestamps are present.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Record and analyze timestamp values. If the remote host is using timestamp, obtain several timestamps, analyze them and compare them to known values.\nPossible techniques to use: The adversary sends several requests and records the timestamp values., The adversary analyzes the timestamp values and determines an average increments per second in the timestamps for the target., The adversary compares this result to a database of known TCP timestamp increments for a possible match.\n\n"
      ],
      "@Name": "TCP Timestamp Probe"
    }
  },
  {
    "instruction": "List the execution flow related to capec: DNS Domain Seizure",
    "context": "",
    "output": "Execution Flow:\nName:Route Disabling\nDescription: An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an \"Internet kill switch\" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Route Disabling\nDescription: An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an \"Internet kill switch\" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "DNS Domain Seizure"
    }
  },
  {
    "instruction": "Given attack pattern: Query System for Information.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Query System for Information are: 1)Attack phase: Explore.\nStep overview: Determine parameters Determine all user-controllable parameters of the application either by probing or by finding documentation\n\n\n- 2)Attack phase: Experiment.\nStep overview: Cause error condition Inject each parameter with content that causes an error condition to manifest\n\n\n- 3)Attack phase: Experiment.\nStep overview: Modify parameters Modify the content of each parameter according to observed error conditions\n\n\n- 4)Attack phase: Exploit.\nStep overview: Follow up attack Once the above steps have been repeated with enough parameters, the application will be sufficiently mapped out. The adversary can then launch a desired attack (for example, Blind SQL Injection)\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine parameters Determine all user-controllable parameters of the application either by probing or by finding documentation\n\n",
        "2)Attack phase: Experiment.\nStep overview: Cause error condition Inject each parameter with content that causes an error condition to manifest\n\n",
        "3)Attack phase: Experiment.\nStep overview: Modify parameters Modify the content of each parameter according to observed error conditions\n\n",
        "4)Attack phase: Exploit.\nStep overview: Follow up attack Once the above steps have been repeated with enough parameters, the application will be sufficiently mapped out. The adversary can then launch a desired attack (for example, Blind SQL Injection)\n\n"
      ],
      "@Name": "Query System for Information"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Local Code Inclusion",
    "context": "",
    "output": "Execution Flow:\nName:Code Inclusion\nDescription: An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Code Inclusion\nDescription: An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Local Code Inclusion"
    }
  },
  {
    "instruction": "Given attack pattern: Client-side Injection-induced Buffer Overflow.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Client-side Injection-induced Buffer Overflow are: 1)Attack phase: Explore.\nStep overview: Identify target client-side application The adversary identifies a target client-side application to perform the buffer overflow on. The most common are browsers. If there is a known browser vulnerability an adversary could target that.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.\nPossible techniques to use: Many times client side applications will be open source, so an adversary can examine the source code to identify possible injection vectors., Examine APIs of the client-side application and look for areas where a buffer overflow might be possible.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Create hostile service The adversary creates a hostile service that will deliver content to the client-side application. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.\nPossible techniques to use: If the client-side application is a browser, the adversary will create a service that delivers a malicious webpage to the browser., Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n\n- 4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the injection vector, the adversary delivers the content to the client-side application using the hostile service and overflows the buffer.\nPossible techniques to use: If the adversary is targeting a local client-side application, they just need to use the service themselves., If the adversary is attempting to cause an overflow on an external user's client-side application, they must get the user to attach to their service by some other means. This could be getting a user to visit their hostile webpage to target a user's browser.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target client-side application The adversary identifies a target client-side application to perform the buffer overflow on. The most common are browsers. If there is a known browser vulnerability an adversary could target that.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.\nPossible techniques to use: Many times client side applications will be open source, so an adversary can examine the source code to identify possible injection vectors., Examine APIs of the client-side application and look for areas where a buffer overflow might be possible.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Create hostile service The adversary creates a hostile service that will deliver content to the client-side application. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.\nPossible techniques to use: If the client-side application is a browser, the adversary will create a service that delivers a malicious webpage to the browser., Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n",
        "4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the injection vector, the adversary delivers the content to the client-side application using the hostile service and overflows the buffer.\nPossible techniques to use: If the adversary is targeting a local client-side application, they just need to use the service themselves., If the adversary is attempting to cause an overflow on an external user's client-side application, they must get the user to attach to their service by some other means. This could be getting a user to visit their hostile webpage to target a user's browser.\n\n"
      ],
      "@Name": "Client-side Injection-induced Buffer Overflow"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS vulnerability The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier., Use a proxy tool to record results of manual input of XSS probes in known URLs., Use a list of XSS probe strings to inject script into UI entry fields. If possible, the probe strings contain a unique identifier., Use a list of XSS probe strings to inject script into resources accessed by the application. If possible, the probe strings contain a unique identifier.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Steal session IDs, credentials, page content, etc. As the attacker succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.\nPossible techniques to use: Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker., Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Forceful browsing When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).\nPossible techniques to use: Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site, Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).\n\n\n* 5)Attack phase: Exploit.\nStep overview: Content spoofing By manipulating the content, the attacker targets the information that the user would like to get from the website.\nPossible techniques to use: Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Cross-Site Scripting (XSS)",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS vulnerability The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier., Use a proxy tool to record results of manual input of XSS probes in known URLs., Use a list of XSS probe strings to inject script into UI entry fields. If possible, the probe strings contain a unique identifier., Use a list of XSS probe strings to inject script into resources accessed by the application. If possible, the probe strings contain a unique identifier.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Steal session IDs, credentials, page content, etc. As the attacker succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.\nPossible techniques to use: Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker., Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Forceful browsing When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).\nPossible techniques to use: Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site, Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).\n\n",
        "5)Attack phase: Exploit.\nStep overview: Content spoofing By manipulating the content, the attacker targets the information that the user would like to get from the website.\nPossible techniques to use: Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.\n\n"
      ],
      "@Name": "Cross-Site Scripting (XSS)"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Install Malicious Extension",
    "context": "",
    "output": "Execution Flow:\nName:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Install Malicious Extension"
    }
  },
  {
    "instruction": "Given attack pattern: Using Unpublished Interfaces or Functionality.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Using Unpublished Interfaces or Functionality are: 1)Attack phase: Explore.\nStep overview: Identify services Discover a service of interest by exploring service registry listings or by connecting on a known port or some similar means.\nPossible techniques to use: Search via internet for known, published services., Use automated tools to scan known ports to identify internet-enabled services., Dump the code from the chip and then perform reverse engineering to analyze the code.\n\n\n* 2)Attack phase: Explore.\nStep overview: Authenticate to service Authenticate to the service, if required, in order to explore it.\nPossible techniques to use: Use published credentials to access system., Find unpublished credentials to access service., Use other attack pattern or weakness to bypass authentication.\n\n\n* 3)Attack phase: Explore.\nStep overview: Identify all interfaces Determine the exposed interfaces by querying the registry as well as probably sniffing to expose interfaces that are not explicitly listed.\nPossible techniques to use: For any published services, determine exposed interfaces via the documentation provided., For any services found, use error messages from poorly formed service calls to determine valid interfaces. In some cases, services will respond to poorly formed calls with valid ones.\n\n\n* 4)Attack phase: Experiment.\nStep overview: Attempt to discover unpublished functions Using manual or automated means, discover unpublished or undocumented functions exposed by the service.\nPossible techniques to use: Manually attempt calls to the service using an educated guess approach, including the use of terms like' 'test', 'debug', 'delete', etc., Use automated tools to scan the service to attempt to reverse engineer exposed, but undocumented, features.\n\n\n* 5)Attack phase: Exploit.\nStep overview: Exploit unpublished functions Using information determined via experimentation, exploit the unpublished features of the service.\nPossible techniques to use: Execute features that are not intended to be used by general system users., Craft malicious calls to features not intended to be used by general system users that take advantage of security flaws found in the functions.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify services Discover a service of interest by exploring service registry listings or by connecting on a known port or some similar means.\nPossible techniques to use: Search via internet for known, published services., Use automated tools to scan known ports to identify internet-enabled services., Dump the code from the chip and then perform reverse engineering to analyze the code.\n\n",
        "2)Attack phase: Explore.\nStep overview: Authenticate to service Authenticate to the service, if required, in order to explore it.\nPossible techniques to use: Use published credentials to access system., Find unpublished credentials to access service., Use other attack pattern or weakness to bypass authentication.\n\n",
        "3)Attack phase: Explore.\nStep overview: Identify all interfaces Determine the exposed interfaces by querying the registry as well as probably sniffing to expose interfaces that are not explicitly listed.\nPossible techniques to use: For any published services, determine exposed interfaces via the documentation provided., For any services found, use error messages from poorly formed service calls to determine valid interfaces. In some cases, services will respond to poorly formed calls with valid ones.\n\n",
        "4)Attack phase: Experiment.\nStep overview: Attempt to discover unpublished functions Using manual or automated means, discover unpublished or undocumented functions exposed by the service.\nPossible techniques to use: Manually attempt calls to the service using an educated guess approach, including the use of terms like' 'test', 'debug', 'delete', etc., Use automated tools to scan the service to attempt to reverse engineer exposed, but undocumented, features.\n\n",
        "5)Attack phase: Exploit.\nStep overview: Exploit unpublished functions Using information determined via experimentation, exploit the unpublished features of the service.\nPossible techniques to use: Execute features that are not intended to be used by general system users., Craft malicious calls to features not intended to be used by general system users that take advantage of security flaws found in the functions.\n\n"
      ],
      "@Name": "Using Unpublished Interfaces or Functionality"
    }
  },
  {
    "instruction": "List the execution flow related to capec: ICMP Flood",
    "context": "",
    "output": "Execution Flow:\nName:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "ICMP Flood"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: TCP Xmas Scan",
    "context": "",
    "output": "The execution flow for TCP Xmas Scan is the following: 1)Attack phase: Experiment.\nStep overview: An adversary sends TCP packets with all flags set but not associated with an existing connection to target ports.\n\n\n- 2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Experiment.\nStep overview: An adversary sends TCP packets with all flags set but not associated with an existing connection to target ports.\n\n",
        "2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.\n\n"
      ],
      "@Name": "TCP Xmas Scan"
    }
  },
  {
    "instruction": "Given attack pattern: Exploiting Incorrectly Configured Access Control Security Levels.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Exploiting Incorrectly Configured Access Control Security Levels are: 1)Attack phase: Explore.\nStep overview: Survey The attacker surveys the target application, possibly as a valid and authenticated user.\nPossible techniques to use: Spider the web site for all available links., Brute force to guess all function names/action with different privileges.\n\n\n2)Attack phase: Experiment.\nStep overview: Identify weak points in access control configurations The attacker probes the access control for functions and data identified in the Explore phase to identify potential weaknesses in how the access controls are configured.\nPossible techniques to use: The attacker attempts authenticated access to targeted functions and data., The attacker attempts unauthenticated access to targeted functions and data., The attacker attempts indirect and side channel access to targeted functions and data.\n\n\n3)Attack phase: Exploit.\nStep overview: Access the function or data bypassing the access control The attacker executes the function or accesses the data identified in the Explore phase bypassing the access control.\nPossible techniques to use: The attacker executes the function or accesses the data not authorized to them.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey The attacker surveys the target application, possibly as a valid and authenticated user.\nPossible techniques to use: Spider the web site for all available links., Brute force to guess all function names/action with different privileges.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Identify weak points in access control configurations The attacker probes the access control for functions and data identified in the Explore phase to identify potential weaknesses in how the access controls are configured.\nPossible techniques to use: The attacker attempts authenticated access to targeted functions and data., The attacker attempts unauthenticated access to targeted functions and data., The attacker attempts indirect and side channel access to targeted functions and data.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Access the function or data bypassing the access control The attacker executes the function or accesses the data identified in the Explore phase bypassing the access control.\nPossible techniques to use: The attacker executes the function or accesses the data not authorized to them.\n\n"
      ],
      "@Name": "Exploiting Incorrectly Configured Access Control Security Levels"
    }
  },
  {
    "instruction": "List the execution flow related to capec: IP 'ID' Echoed Byte-Order Probe",
    "context": "",
    "output": "Execution Flow:\nName:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "IP 'ID' Echoed Byte-Order Probe"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Probe for SQL Injection vulnerability The attacker injects SQL syntax into user-controllable data inputs to search unfiltered execution of the SQL syntax in a query.\n\n\n2)Attack phase: Exploit.\nStep overview: Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive The attacker leverages a SQL Injection attack to inject shell code to be executed by leveraging the xp_cmdshell directive.\n\n\n3)Attack phase: Exploit.\nStep overview: Inject malicious data in the database Leverage SQL injection to inject data in the database that could later be used to achieve command injection if ever used as a command line argument\n\n\n4)Attack phase: Exploit.\nStep overview: Trigger command line execution with injected arguments The attacker causes execution of command line functionality which leverages previously injected database content as arguments.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Command Line Execution through SQL Injection",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Probe for SQL Injection vulnerability The attacker injects SQL syntax into user-controllable data inputs to search unfiltered execution of the SQL syntax in a query.\n\n",
        "2)Attack phase: Exploit.\nStep overview: Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive The attacker leverages a SQL Injection attack to inject shell code to be executed by leveraging the xp_cmdshell directive.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Inject malicious data in the database Leverage SQL injection to inject data in the database that could later be used to achieve command injection if ever used as a command line argument\n\n",
        "4)Attack phase: Exploit.\nStep overview: Trigger command line execution with injected arguments The attacker causes execution of command line functionality which leverages previously injected database content as arguments.\n\n"
      ],
      "@Name": "Command Line Execution through SQL Injection"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Probing The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.\nPossible techniques to use: The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.\n\n\n- 2)Attack phase: Explore.\nStep overview: Analysis The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.\nPossible techniques to use: The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Verify the exploitable security weaknesses The attacker tries to craft malicious code of another language allowed by the sandbox to verify the security weaknesses of the standard libraries found in the Explore phase.\nPossible techniques to use: The attacker tries to explore the security weaknesses by calling malicious code of another language allowed by the sandbox.\n\n\n- 4)Attack phase: Exploit.\nStep overview: Exploit the security weaknesses in the standard libraries The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries verified in the Experiment phase. The attacker will be able to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox.\nPossible techniques to use: The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Escaping a Sandbox by Calling Code in Another Language",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Probing The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.\nPossible techniques to use: The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.\n\n",
        "2)Attack phase: Explore.\nStep overview: Analysis The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.\nPossible techniques to use: The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Verify the exploitable security weaknesses The attacker tries to craft malicious code of another language allowed by the sandbox to verify the security weaknesses of the standard libraries found in the Explore phase.\nPossible techniques to use: The attacker tries to explore the security weaknesses by calling malicious code of another language allowed by the sandbox.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Exploit the security weaknesses in the standard libraries The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries verified in the Experiment phase. The attacker will be able to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox.\nPossible techniques to use: The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries.\n\n"
      ],
      "@Name": "Escaping a Sandbox by Calling Code in Another Language"
    }
  },
  {
    "instruction": "List the execution flow related to capec: XSS Using MIME Type Mismatch",
    "context": "",
    "output": "Execution Flow:\nName:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XSS Using MIME Type Mismatch"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Creating a Rogue Certification Authority Certificate",
    "context": "",
    "output": "The execution flow for Creating a Rogue Certification Authority Certificate is the following: 1)Attack phase: Experiment.\nStep overview: Craft Certificates The adversary crafts two different, but valid X.509 certificates that when hashed with an insufficiently collision resistant hashing algorithm would yield the same value.\n\n\n2)Attack phase: Experiment.\nStep overview: Send CSR to Certificate Authority The adversary sends the CSR for one of the certificates to the Certification Authority which uses the targeted hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the adversary which is signed with its private key.\n\n\n3)Attack phase: Exploit.\nStep overview: Insert Signed Blob into Unsigned Certificate The adversary takes the signed blob and inserts it into the second X.509 certificate that the attacker generated. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob is valid in the second certificate. The result is two certificates that appear to be signed by a valid certificate authority despite only one having been signed.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Experiment.\nStep overview: Craft Certificates The adversary crafts two different, but valid X.509 certificates that when hashed with an insufficiently collision resistant hashing algorithm would yield the same value.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Send CSR to Certificate Authority The adversary sends the CSR for one of the certificates to the Certification Authority which uses the targeted hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the adversary which is signed with its private key.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Insert Signed Blob into Unsigned Certificate The adversary takes the signed blob and inserts it into the second X.509 certificate that the attacker generated. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob is valid in the second certificate. The result is two certificates that appear to be signed by a valid certificate authority despite only one having been signed.\n\n"
      ],
      "@Name": "Creating a Rogue Certification Authority Certificate"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Embedding Scripts within Scripts",
    "context": "",
    "output": "Execution Flow:\nName:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Embedding Scripts within Scripts"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Object Relational Mapping Injection",
    "context": "",
    "output": "The execution flow for Object Relational Mapping Injection is the following: 1)Attack phase: Explore.\nStep overview: Determine Persistence Framework Used An attacker tries to determine what persistence framework is used by the application in order to leverage a weakness in the generated data access layer code or a weakness in a way that the data access layer may have been used by the developer.\nPossible techniques to use: An attacker provides input to the application in an attempt to induce an error screen that reveals a stack trace that gives an indication of the automated data access layer used. Or an attacker may simply make some educated guesses and assume, for instance, that Hibernate is used and try to craft an attack from there.\n\n\n* 2)Attack phase: Explore.\nStep overview: Probe for ORM Injection vulnerabilities The attacker injects ORM syntax into user-controllable data inputs of the application to determine if it is possible modify data query structure and content.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Perform SQL Injection through the generated data access layer An attacker proceeds to exploit a weakness in the generated data access methods that does not properly separate control plane from the data plan, or potentially a particular way in which developer might have misused the generated code, to modify the structure of the executed SQL queries and/or inject entirely new SQL queries.\nPossible techniques to use: An attacker uses normal SQL injection techniques and adjusts them to reflect the type of data access layer generation framework used by the application.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine Persistence Framework Used An attacker tries to determine what persistence framework is used by the application in order to leverage a weakness in the generated data access layer code or a weakness in a way that the data access layer may have been used by the developer.\nPossible techniques to use: An attacker provides input to the application in an attempt to induce an error screen that reveals a stack trace that gives an indication of the automated data access layer used. Or an attacker may simply make some educated guesses and assume, for instance, that Hibernate is used and try to craft an attack from there.\n\n",
        "2)Attack phase: Explore.\nStep overview: Probe for ORM Injection vulnerabilities The attacker injects ORM syntax into user-controllable data inputs of the application to determine if it is possible modify data query structure and content.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Perform SQL Injection through the generated data access layer An attacker proceeds to exploit a weakness in the generated data access methods that does not properly separate control plane from the data plan, or potentially a particular way in which developer might have misused the generated code, to modify the structure of the executed SQL queries and/or inject entirely new SQL queries.\nPossible techniques to use: An attacker uses normal SQL injection techniques and adjusts them to reflect the type of data access layer generation framework used by the application.\n\n"
      ],
      "@Name": "Object Relational Mapping Injection"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Command Delimiters",
    "context": "",
    "output": "Execution Flow:\nName:Parameter Injection\nDescription: An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Parameter Injection\nDescription: An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Command Delimiters"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - JSON Hijacking (aka JavaScript Hijacking)",
    "context": "",
    "output": "Here are the steps to implement JSON Hijacking (aka JavaScript Hijacking):\n1)Attack phase: Explore.\nStep overview: Understand How to Request JSON Responses from the Target System An attacker first explores the target system to understand what URLs need to be provided to it in order to retrieve JSON objects that contain information of interest to the attacker.\nPossible techniques to use: An attacker creates an account with the target system and observes requests and the corresponding JSON responses from the server. Understanding how to properly elicit responses from the server is crucial to the attackers' ability to craft the exploit.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Craft a malicious website.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Launch JSON hijack An attacker lures the victim to the malicious website or leverages other means to get their malicious code executing in the victim's browser. Once that happens, the malicious code makes a request to the victim target system to retrieve a JSON object with sensitive information. The request includes the victim's session cookie if the victim is logged in.\nPossible techniques to use: An attacker employs a myriad of standard techniques to get the victim to visit their malicious site or by some other means get the attackers' malicious code executing in the victim's browser.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Understand How to Request JSON Responses from the Target System An attacker first explores the target system to understand what URLs need to be provided to it in order to retrieve JSON objects that contain information of interest to the attacker.\nPossible techniques to use: An attacker creates an account with the target system and observes requests and the corresponding JSON responses from the server. Understanding how to properly elicit responses from the server is crucial to the attackers' ability to craft the exploit.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Craft a malicious website.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Launch JSON hijack An attacker lures the victim to the malicious website or leverages other means to get their malicious code executing in the victim's browser. Once that happens, the malicious code makes a request to the victim target system to retrieve a JSON object with sensitive information. The request includes the victim's session cookie if the victim is logged in.\nPossible techniques to use: An attacker employs a myriad of standard techniques to get the victim to visit their malicious site or by some other means get the attackers' malicious code executing in the victim's browser.\n\n"
      ],
      "@Name": "JSON Hijacking (aka JavaScript Hijacking)"
    }
  },
  {
    "instruction": "Given attack pattern: DOM-Based XSS.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement DOM-Based XSS are: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for DOM-based XSS vulnerability The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. Specific to DOM-based XSS, the adversary is looking for areas where input is being used to directly change the DOM.\nPossible techniques to use: Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier., Use a proxy tool to record results of manual input of XSS probes in known URLs., Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim. In DOM-based XSS, the malicious script might not even be sent to the server, since the victim's browser will manipulate the DOM itself. This can help avoid serve-side detection mechanisms.\nPossible techniques to use: Change a URL parameter to include a malicious script tag., Add a URL fragment to alter the value of the expected Document object URL., Send information gathered from the malicious script to a remote endpoint.\n\n\n- 4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for DOM-based XSS vulnerability The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. Specific to DOM-based XSS, the adversary is looking for areas where input is being used to directly change the DOM.\nPossible techniques to use: Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier., Use a proxy tool to record results of manual input of XSS probes in known URLs., Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim. In DOM-based XSS, the malicious script might not even be sent to the server, since the victim's browser will manipulate the DOM itself. This can help avoid serve-side detection mechanisms.\nPossible techniques to use: Change a URL parameter to include a malicious script tag., Add a URL fragment to alter the value of the expected Document object URL., Send information gathered from the malicious script to a remote endpoint.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n"
      ],
      "@Name": "DOM-Based XSS"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - XML Flood",
    "context": "",
    "output": "Here are the steps to implement XML Flood:\n1)Attack phase: Explore.\nStep overview: Survey the target Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.\nPossible techniques to use: Use an automated tool to record all instances of URLs to process XML requests., Use a browser to manually explore the website and analyze how the application processes XML requests.\n\n\n2)Attack phase: Experiment.\nStep overview: An adversary crafts input data that may have an adverse effect on the operation of the web service when the XML data sent to the service.\n\n\n3)Attack phase: Exploit.\nStep overview: Launch a resource depletion attack The attacker delivers a large number of XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.\nPossible techniques to use: Send a large number of crafted XML messages to the target URL.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the target Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.\nPossible techniques to use: Use an automated tool to record all instances of URLs to process XML requests., Use a browser to manually explore the website and analyze how the application processes XML requests.\n\n",
        "2)Attack phase: Experiment.\nStep overview: An adversary crafts input data that may have an adverse effect on the operation of the web service when the XML data sent to the service.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Launch a resource depletion attack The attacker delivers a large number of XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.\nPossible techniques to use: Send a large number of crafted XML messages to the target URL.\n\n"
      ],
      "@Name": "XML Flood"
    }
  },
  {
    "instruction": "Given attack pattern: TCP SYN Scan.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement TCP SYN Scan are: 1)Attack phase: Experiment.\nStep overview: An adversary sends SYN packets to ports they want to scan and checks the response without completing the TCP handshake.\n\n\n- 2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine the port's state. The adversary can determine the state of a port based on the following responses. When a SYN is sent to an open port and unfiltered port, a SYN/ACK will be generated. When a SYN packet is sent to a closed port a RST is generated, indicating the port is closed. When SYN scanning to a particular port generates no response, or when the request triggers ICMP Type 3 unreachable errors, the port is filtered.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Experiment.\nStep overview: An adversary sends SYN packets to ports they want to scan and checks the response without completing the TCP handshake.\n\n",
        "2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine the port's state. The adversary can determine the state of a port based on the following responses. When a SYN is sent to an open port and unfiltered port, a SYN/ACK will be generated. When a SYN packet is sent to a closed port a RST is generated, indicating the port is closed. When SYN scanning to a particular port generates no response, or when the request triggers ICMP Type 3 unreachable errors, the port is filtered.\n\n"
      ],
      "@Name": "TCP SYN Scan"
    }
  },
  {
    "instruction": "Given attack pattern: Overflow Buffers.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Overflow Buffers are: 1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.\nPossible techniques to use: Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n\n- 4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the injection vector, the adversary injects the crafted overflow content into the buffer.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.\nPossible techniques to use: Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n",
        "4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the injection vector, the adversary injects the crafted overflow content into the buffer.\n\n"
      ],
      "@Name": "Overflow Buffers"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Web Server Logs Tampering",
    "context": "",
    "output": "Here are the steps to implement Web Server Logs Tampering:\n1)Attack phase: Explore.\nStep overview: Determine Application Web Server Log File Format The attacker observes the system and looks for indicators of which logging utility is being used by the web server.\nPossible techniques to use: Determine logging utility being used by application web server (e.g. log4j), only possible if the application is known by the attacker or if the application returns error messages with logging utility information.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Determine Injectable Content The attacker launches various logged actions with malicious data to determine what sort of log injection is possible.\nPossible techniques to use: Attacker triggers logged actions with maliciously crafted data as inputs, parameters, arguments, etc.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Manipulate Log Files The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted request that the web server will receive and write into the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.\nPossible techniques to use: Directly through log file or database manipulation, modify existing log entries.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine Application Web Server Log File Format The attacker observes the system and looks for indicators of which logging utility is being used by the web server.\nPossible techniques to use: Determine logging utility being used by application web server (e.g. log4j), only possible if the application is known by the attacker or if the application returns error messages with logging utility information.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Determine Injectable Content The attacker launches various logged actions with malicious data to determine what sort of log injection is possible.\nPossible techniques to use: Attacker triggers logged actions with maliciously crafted data as inputs, parameters, arguments, etc.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Manipulate Log Files The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted request that the web server will receive and write into the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.\nPossible techniques to use: Directly through log file or database manipulation, modify existing log entries.\n\n"
      ],
      "@Name": "Web Server Logs Tampering"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Altered Component Firmware",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Select Target The adversary searches for a suitable target to attack, such as government and/or private industry organizations.\nPossible techniques to use: Conduct reconnaissance to determine potential targets to exploit.\n\n\n- 2)Attack phase: Explore.\nStep overview: Identify Components After selecting a target, the adversary determines whether a vulnerable component, such as a specific make and model of a HDD, is contained within the target system.\nPossible techniques to use: [Remote Access Vector] The adversary gains remote access to the target, typically via additional malware, and explores the system to determine hardware components that are being leveraged., [Physical Access Vector] The adversary intercepts components in transit and determines if the component is vulnerable to attack.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Optional: Create Payload If not using an already existing payload, the adversary creates their own to be executed at defined intervals and upon system boot processes. This payload may then be tested on the target system or a test system to confirm its functionality.\n\n\n- 4)Attack phase: Exploit.\nStep overview: Insert Firmware Altering Malware Once a vulnerable component has been identified, the adversary leverages known malware tools to infect the component's firmware and drop the payload within the component's MBR. This allows the adversary to maintain persistence on the target and execute the payload without being detected.\nPossible techniques to use: The adversary inserts the firmware altering malware on the target component, via the use of known malware tools., [Physical Access Vector] The adversary then sends the component to its original intended destination, where it will be installed onto a victim system.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Select Target The adversary searches for a suitable target to attack, such as government and/or private industry organizations.\nPossible techniques to use: Conduct reconnaissance to determine potential targets to exploit.\n\n",
        "2)Attack phase: Explore.\nStep overview: Identify Components After selecting a target, the adversary determines whether a vulnerable component, such as a specific make and model of a HDD, is contained within the target system.\nPossible techniques to use: [Remote Access Vector] The adversary gains remote access to the target, typically via additional malware, and explores the system to determine hardware components that are being leveraged., [Physical Access Vector] The adversary intercepts components in transit and determines if the component is vulnerable to attack.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Optional: Create Payload If not using an already existing payload, the adversary creates their own to be executed at defined intervals and upon system boot processes. This payload may then be tested on the target system or a test system to confirm its functionality.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Insert Firmware Altering Malware Once a vulnerable component has been identified, the adversary leverages known malware tools to infect the component's firmware and drop the payload within the component's MBR. This allows the adversary to maintain persistence on the target and execute the payload without being detected.\nPossible techniques to use: The adversary inserts the firmware altering malware on the target component, via the use of known malware tools., [Physical Access Vector] The adversary then sends the component to its original intended destination, where it will be installed onto a victim system.\n\n"
      ],
      "@Name": "Altered Component Firmware"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Bluetooth Impersonation AttackS (BIAS)",
    "context": "",
    "output": "Here are the steps to implement Bluetooth Impersonation AttackS (BIAS):\n1)Attack phase: Explore.\nStep overview: Find disguise and target The adversary starts the Bluetooth service on the attacking device and searches for nearby listening devices.\nPossible techniques to use: Knowledge of a trusted MAC address., Scanning for devices other than the target that may be trusted.\n\n\n2)Attack phase: Experiment.\nStep overview: Disguise Using the MAC address of the device the adversary wants to impersonate, they may use a tool such as spooftooth or macchanger to spoof their Bluetooth address and attempt to authenticate with the target.\n\n\n3)Attack phase: Exploit.\nStep overview: Use device capabilities to accomplish goal Finally, if authenticated successfully the adversary can perform tasks/information gathering dependent on the target's capabilities and connections.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find disguise and target The adversary starts the Bluetooth service on the attacking device and searches for nearby listening devices.\nPossible techniques to use: Knowledge of a trusted MAC address., Scanning for devices other than the target that may be trusted.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Disguise Using the MAC address of the device the adversary wants to impersonate, they may use a tool such as spooftooth or macchanger to spoof their Bluetooth address and attempt to authenticate with the target.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Use device capabilities to accomplish goal Finally, if authenticated successfully the adversary can perform tasks/information gathering dependent on the target's capabilities and connections.\n\n"
      ],
      "@Name": "Bluetooth Impersonation AttackS (BIAS)"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - StarJacking",
    "context": "",
    "output": "Here are the steps to implement StarJacking:\n1)Attack phase: Explore.\nStep overview: Identify target The adversary must first identify a target package whose popularity statistics will be leveraged. This will be a popular and widely used package, as to increase the perceived pedigree of the malicious package.\n\n\n2)Attack phase: Experiment.\nStep overview: Spoof package popularity The adversary provides their malicious package to a package manager and uses the source code repository URL identified in Step 1 to spoof the popularity of the package. This malicious package may also closely resemble the legitimate package whose statistics are being utilized.\n\n\n3)Attack phase: Exploit.\nStep overview: Exploit victims The adversary infiltrates development environments with the goal of conducting additional attacks.\nPossible techniques to use: Active: The adversary attempts to trick victims into downloading the malicious package by means such as phishing and social engineering., Passive: The adversary waits for victims to download and leverage the malicious package.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target The adversary must first identify a target package whose popularity statistics will be leveraged. This will be a popular and widely used package, as to increase the perceived pedigree of the malicious package.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Spoof package popularity The adversary provides their malicious package to a package manager and uses the source code repository URL identified in Step 1 to spoof the popularity of the package. This malicious package may also closely resemble the legitimate package whose statistics are being utilized.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Exploit victims The adversary infiltrates development environments with the goal of conducting additional attacks.\nPossible techniques to use: Active: The adversary attempts to trick victims into downloading the malicious package by means such as phishing and social engineering., Passive: The adversary waits for victims to download and leverage the malicious package.\n\n"
      ],
      "@Name": "StarJacking"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Reflection Attack in Authentication Protocol",
    "context": "",
    "output": "Here are the steps to implement Reflection Attack in Authentication Protocol:\n1)Attack phase: Explore.\nStep overview: Identify service with vulnerable handshake authentication The adversary must first identify a vulnerable authentication protocol. The most common indication of an authentication protocol vulnerable to reflection attack is when the client initiates the handshake, rather than the server. This allows the client to get the server to encrypt targeted data using the server's pre-shared key.\n\n\n2)Attack phase: Experiment.\nStep overview: Send challenge to target server The adversary opens a connection to the target server and sends it a challenge. This challenge is arbitrary and is simply used as a placeholder for the protocol in order to get the server to respond.\n\n\n3)Attack phase: Experiment.\nStep overview: Receive server challenge The server responds by returning the challenge sent encrypted with the server's pre-shared key, as well as its own challenge to the attacker sent in plaintext. We will call this challenge sent by the server \"C\". C is very important and is stored off by the adversary for the next step.\n\n\n4)Attack phase: Experiment.\nStep overview: Initiate second handshake Since the adversary does not possess the pre-shared key, they cannot encrypt C from the previous step in order for the server to authenticate them. To get around this, the adversary initiates a second connection to the server while still keeping the first connection alive. In the second connection, the adversary sends C as the initial client challenge, which rather than being arbitary like the first connection, is very intentional.\n\n\n5)Attack phase: Experiment.\nStep overview: Receive encrypted challenge The server treats the intial client challenge in connection two as an arbitrary client challenge and responds by encrypting C with the pre-shared key. The server also sends a new challenge. The adversary ignores the server challenge and stores the encrypted version of C. The second connection is either terminated or left to expire by the adversary as it is no longer needed.\n\n\n6)Attack phase: Exploit.\nStep overview: The adversary now posseses the encrypted version of C that is obtained through connection two. The adversary continues the handshake in connection one by responding to the server with the encrypted version of C, verifying that they have access to the pre-shared key (when they actually do not). Because the server uses the same pre-shared key for all authentication it will decrypt C and authenticate the adversary for the first connection, giving the adversary illegitimate access to the target system.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify service with vulnerable handshake authentication The adversary must first identify a vulnerable authentication protocol. The most common indication of an authentication protocol vulnerable to reflection attack is when the client initiates the handshake, rather than the server. This allows the client to get the server to encrypt targeted data using the server's pre-shared key.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Send challenge to target server The adversary opens a connection to the target server and sends it a challenge. This challenge is arbitrary and is simply used as a placeholder for the protocol in order to get the server to respond.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Receive server challenge The server responds by returning the challenge sent encrypted with the server's pre-shared key, as well as its own challenge to the attacker sent in plaintext. We will call this challenge sent by the server \"C\". C is very important and is stored off by the adversary for the next step.\n\n",
        "4)Attack phase: Experiment.\nStep overview: Initiate second handshake Since the adversary does not possess the pre-shared key, they cannot encrypt C from the previous step in order for the server to authenticate them. To get around this, the adversary initiates a second connection to the server while still keeping the first connection alive. In the second connection, the adversary sends C as the initial client challenge, which rather than being arbitary like the first connection, is very intentional.\n\n",
        "5)Attack phase: Experiment.\nStep overview: Receive encrypted challenge The server treats the intial client challenge in connection two as an arbitrary client challenge and responds by encrypting C with the pre-shared key. The server also sends a new challenge. The adversary ignores the server challenge and stores the encrypted version of C. The second connection is either terminated or left to expire by the adversary as it is no longer needed.\n\n",
        "6)Attack phase: Exploit.\nStep overview: The adversary now posseses the encrypted version of C that is obtained through connection two. The adversary continues the handshake in connection one by responding to the server with the encrypted version of C, verifying that they have access to the pre-shared key (when they actually do not). Because the server uses the same pre-shared key for all authentication it will decrypt C and authenticate the adversary for the first connection, giving the adversary illegitimate access to the target system.\n\n"
      ],
      "@Name": "Reflection Attack in Authentication Protocol"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Pull Data from System Resources",
    "context": "",
    "output": "Execution Flow:\nName:Excavation\nDescription: An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Excavation\nDescription: An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Pull Data from System Resources"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Footprint file input vectors Manually or using an automated tool, an attacker searches for all input locations where a user has control over the filenames or MIME types of files submitted to the web server.\nPossible techniques to use: Attacker manually crawls application to identify file inputs, Attacker uses an automated tool to crawl application identify file inputs, Attacker manually assesses strength of access control protecting native application files from user control, Attacker explores potential for submitting files directly to the web server via independently constructed HTTP Requests\n\n\n2)Attack phase: Experiment.\nStep overview: File misclassification shotgunning An attacker makes changes to file extensions and MIME types typically processed by web servers and looks for abnormal behavior.\nPossible techniques to use: Attacker submits files with switched extensions (e.g. .php on a .jsp file) to web server., Attacker adds extra characters (e.g. adding an extra . after the file extension) to filenames of files submitted to web server.\n\n\n3)Attack phase: Experiment.\nStep overview: File misclassification sniping Understanding how certain file types are processed by web servers, an attacker crafts varying file payloads and modifies their file extension or MIME type to be that of the targeted type to see if the web server is vulnerable to misclassification of that type.\nPossible techniques to use: Craft a malicious file payload, modify file extension to the targeted file type and submit it to the web server., Craft a malicious file payload, modify its associated MIME type to the targeted file type and submit it to the web server.\n\n\n4)Attack phase: Exploit.\nStep overview: Disclose information The attacker, by manipulating a file extension or MIME type is able to make the web server return raw information (not executed).\nPossible techniques to use: Manipulate the file names that are explicitly sent to the server., Manipulate the MIME sent in order to confuse the web server.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Cause Web Server Misclassification",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Footprint file input vectors Manually or using an automated tool, an attacker searches for all input locations where a user has control over the filenames or MIME types of files submitted to the web server.\nPossible techniques to use: Attacker manually crawls application to identify file inputs, Attacker uses an automated tool to crawl application identify file inputs, Attacker manually assesses strength of access control protecting native application files from user control, Attacker explores potential for submitting files directly to the web server via independently constructed HTTP Requests\n\n",
        "2)Attack phase: Experiment.\nStep overview: File misclassification shotgunning An attacker makes changes to file extensions and MIME types typically processed by web servers and looks for abnormal behavior.\nPossible techniques to use: Attacker submits files with switched extensions (e.g. .php on a .jsp file) to web server., Attacker adds extra characters (e.g. adding an extra . after the file extension) to filenames of files submitted to web server.\n\n",
        "3)Attack phase: Experiment.\nStep overview: File misclassification sniping Understanding how certain file types are processed by web servers, an attacker crafts varying file payloads and modifies their file extension or MIME type to be that of the targeted type to see if the web server is vulnerable to misclassification of that type.\nPossible techniques to use: Craft a malicious file payload, modify file extension to the targeted file type and submit it to the web server., Craft a malicious file payload, modify its associated MIME type to the targeted file type and submit it to the web server.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Disclose information The attacker, by manipulating a file extension or MIME type is able to make the web server return raw information (not executed).\nPossible techniques to use: Manipulate the file names that are explicitly sent to the server., Manipulate the MIME sent in order to confuse the web server.\n\n"
      ],
      "@Name": "Cause Web Server Misclassification"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Create files with the same name as files protected with a higher classification",
    "context": "",
    "output": "Execution Flow:\nName:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Create files with the same name as files protected with a higher classification"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Malicious Automated Software Update via Spoofing",
    "context": "",
    "output": "Execution Flow:\nName:Malicious Software Update\nDescription: An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Malicious Software Update\nDescription: An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Malicious Automated Software Update via Spoofing"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Session Credential Falsification through Prediction",
    "context": "",
    "output": "Execution Flow:\nName:Session Credential Falsification through Forging\nDescription: An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Session Credential Falsification through Forging\nDescription: An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Session Credential Falsification through Prediction"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Survey application The attacker takes an inventory of the entry points of the application.\nPossible techniques to use: Spider web sites for all available links, Sniff network communications with application using a utility such as WireShark.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Determine user-controllable input susceptible to LDAP injection For each user-controllable input that the attacker suspects is vulnerable to LDAP injection, attempt to inject characters that have special meaning in LDAP (such as a single quote character, etc.). The goal is to create a LDAP query with an invalid syntax\nPossible techniques to use: Use web browser to inject input through text fields or through HTTP GET parameters, Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header., Use modified client (modified by reverse engineering) to inject input.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Try to exploit the LDAP injection vulnerability After determining that a given input is vulnerable to LDAP Injection, hypothesize what the underlying query looks like. Possibly using a tool, iteratively try to add logic to the query to extract information from the LDAP, or to modify or delete information in the LDAP.\nPossible techniques to use: Add logic to the LDAP query to change the meaning of that command. Automated tools could be used to generate the LDAP injection strings., Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "LDAP Injection",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey application The attacker takes an inventory of the entry points of the application.\nPossible techniques to use: Spider web sites for all available links, Sniff network communications with application using a utility such as WireShark.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Determine user-controllable input susceptible to LDAP injection For each user-controllable input that the attacker suspects is vulnerable to LDAP injection, attempt to inject characters that have special meaning in LDAP (such as a single quote character, etc.). The goal is to create a LDAP query with an invalid syntax\nPossible techniques to use: Use web browser to inject input through text fields or through HTTP GET parameters, Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header., Use modified client (modified by reverse engineering) to inject input.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Try to exploit the LDAP injection vulnerability After determining that a given input is vulnerable to LDAP Injection, hypothesize what the underlying query looks like. Possibly using a tool, iteratively try to add logic to the query to extract information from the LDAP, or to modify or delete information in the LDAP.\nPossible techniques to use: Add logic to the LDAP query to change the meaning of that command. Automated tools could be used to generate the LDAP injection strings., Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.\n\n"
      ],
      "@Name": "LDAP Injection"
    }
  },
  {
    "instruction": "Given attack pattern: Android Intent Intercept.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Android Intent Intercept are: 1)Attack phase: Explore.\nStep overview: Find an android application that uses implicit intents Since this attack only works on android applications that use implicit intents, rather than explicit intents, an adversary must first identify an app that uses implicit intents. They must also determine what the contents of the intents being sent are such that a malicious application can get sent these intents.\n\n\n2)Attack phase: Experiment.\nStep overview: Create a malicious app The adversary must create a malicious android app meant to intercept implicit intents from a target application\nPossible techniques to use: Specify the type of intent wished to be intercepted in the malicious app's manifest file using an intent filter\n\n\n3)Attack phase: Experiment.\nStep overview: Get user to download malicious app The adversary must get a user using the targeted app to download the malicious app by any means necessary\n\n\n4)Attack phase: Exploit.\nStep overview: Intercept Implicit Intents Once the malicious app is downloaded, the android device will forward any implicit intents from the target application to the malicious application, allowing the adversary to gaina access to the contents of the intent. The adversary can proceed with any attack using the contents of the intent.\nPossible techniques to use: Block the intent from reaching the desired location, causing a denial of service, Gather sensitive information from the intercepted intent, Modify the contents of the intent and forward along to another application\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find an android application that uses implicit intents Since this attack only works on android applications that use implicit intents, rather than explicit intents, an adversary must first identify an app that uses implicit intents. They must also determine what the contents of the intents being sent are such that a malicious application can get sent these intents.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Create a malicious app The adversary must create a malicious android app meant to intercept implicit intents from a target application\nPossible techniques to use: Specify the type of intent wished to be intercepted in the malicious app's manifest file using an intent filter\n\n",
        "3)Attack phase: Experiment.\nStep overview: Get user to download malicious app The adversary must get a user using the targeted app to download the malicious app by any means necessary\n\n",
        "4)Attack phase: Exploit.\nStep overview: Intercept Implicit Intents Once the malicious app is downloaded, the android device will forward any implicit intents from the target application to the malicious application, allowing the adversary to gaina access to the contents of the intent. The adversary can proceed with any attack using the contents of the intent.\nPossible techniques to use: Block the intent from reaching the desired location, causing a denial of service, Gather sensitive information from the intercepted intent, Modify the contents of the intent and forward along to another application\n\n"
      ],
      "@Name": "Android Intent Intercept"
    }
  },
  {
    "instruction": "Given attack pattern: Embedding NULL Bytes.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Embedding NULL Bytes are: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects postfix null byte(s) to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.\nPossible techniques to use: Try different encodings for null such as \\0 or %00\n\n\n- 3)Attack phase: Exploit.\nStep overview: Remove data after null byte(s) After determined entry points that are vulnerable, the adversary places a null byte(s) such that they remove data after the null byte(s) in a way that is beneficial to them.\nPossible techniques to use: If the input is a directory as part of a longer file path, add a null byte(s) at the end of the input to try to traverse to the given directory.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects postfix null byte(s) to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.\nPossible techniques to use: Try different encodings for null such as \\0 or %00\n\n",
        "3)Attack phase: Exploit.\nStep overview: Remove data after null byte(s) After determined entry points that are vulnerable, the adversary places a null byte(s) such that they remove data after the null byte(s) in a way that is beneficial to them.\nPossible techniques to use: If the input is a directory as part of a longer file path, add a null byte(s) at the end of the input to try to traverse to the given directory.\n\n"
      ],
      "@Name": "Embedding NULL Bytes"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Escaping Virtualization",
    "context": "",
    "output": "The execution flow for Escaping Virtualization is the following: 1)Attack phase: Explore.\nStep overview: Probing The adversary probes the target application, service, or device to find a possible weakness that would allow escaping the virtualized environment.\nPossible techniques to use: Probing applications, services, or devices for virtualization weaknesses.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Verify the exploitable security weaknesses Using the found weakness, the adversary attempts to escape the virtualized environment.\nPossible techniques to use: Using an application weakness to escape a virtualized environment\n\n\n* 3)Attack phase: Exploit.\nStep overview: Execute more complex attacks Once outside of the virtualized environment, the adversary attempts to perform other more complex attacks such as accessing system resources or executing unauthorized code within the host environment.\nPossible techniques to use: Executing complex attacks when given higher permissions by escaping a virtualized environment\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Probing The adversary probes the target application, service, or device to find a possible weakness that would allow escaping the virtualized environment.\nPossible techniques to use: Probing applications, services, or devices for virtualization weaknesses.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Verify the exploitable security weaknesses Using the found weakness, the adversary attempts to escape the virtualized environment.\nPossible techniques to use: Using an application weakness to escape a virtualized environment\n\n",
        "3)Attack phase: Exploit.\nStep overview: Execute more complex attacks Once outside of the virtualized environment, the adversary attempts to perform other more complex attacks such as accessing system resources or executing unauthorized code within the host environment.\nPossible techniques to use: Executing complex attacks when given higher permissions by escaping a virtualized environment\n\n"
      ],
      "@Name": "Escaping Virtualization"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Flash Parameter Injection",
    "context": "",
    "output": "Here are the steps to implement Flash Parameter Injection:\n1)Attack phase: Explore.\nStep overview: Spider Using a browser or an automated tool, an adversary records all instances of HTML documents that have embedded Flash files. If there is an embedded Flash file, they list how to pass global parameters to the Flash file from the embedding object.\nPossible techniques to use: Use an automated tool to record all instances of URLs which have embedded Flash files and list the parameters passing to the Flash file., Use a browser to manually explore the website to see whether the HTML document has embedded Flash files or not and list the parameters passing to the Flash file.\n\n\n2)Attack phase: Experiment.\nStep overview: Determine the application susceptibility to Flash parameter injection Determine the application susceptibility to Flash parameter injection. For each URL identified in the Explore phase, the adversary attempts to use various techniques such as DOM based, reflected, flashvars, and persistent attacks depending on the type of parameter passed to the embedded Flash file.\nPossible techniques to use: When the JavaScript 'document.location' variable is used as part of the parameter, inject '#' and the payload into the parameter in the URL., When the name of the Flash file is exposed as a form or a URL parameter, the adversary injects '?' and the payload after the file name in the URL to override some global value., When the arguments passed in the 'flashvars' attributes, the adversary injects '&' and payload in the URL., If some of the attributes of the <object> tag are received as parameters, the 'flashvars' attribute is injected into the <object> tag without the creator of the Web page ever intending to allow arguments to be passed into the Flash file., If shared objects are used to save data that is entered by the user persistent Flash parameter injection may occur, with malicious code being injected into the Flash file and executed, every time the Flash file is loaded.\n\n\n3)Attack phase: Exploit.\nStep overview: Execute Flash Parameter Injection Attack Inject parameters into Flash file. Based on the results of the Experiment phase, the adversary crafts the underlying malicious URL containing injected Flash parameters and submits it to the web server. Once the web server receives the request, the embedding HTML document will controllable by the adversary.\nPossible techniques to use: Craft underlying malicious URL and send it to the web server to take control of the embedding HTML document.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Spider Using a browser or an automated tool, an adversary records all instances of HTML documents that have embedded Flash files. If there is an embedded Flash file, they list how to pass global parameters to the Flash file from the embedding object.\nPossible techniques to use: Use an automated tool to record all instances of URLs which have embedded Flash files and list the parameters passing to the Flash file., Use a browser to manually explore the website to see whether the HTML document has embedded Flash files or not and list the parameters passing to the Flash file.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Determine the application susceptibility to Flash parameter injection Determine the application susceptibility to Flash parameter injection. For each URL identified in the Explore phase, the adversary attempts to use various techniques such as DOM based, reflected, flashvars, and persistent attacks depending on the type of parameter passed to the embedded Flash file.\nPossible techniques to use: When the JavaScript 'document.location' variable is used as part of the parameter, inject '#' and the payload into the parameter in the URL., When the name of the Flash file is exposed as a form or a URL parameter, the adversary injects '?' and the payload after the file name in the URL to override some global value., When the arguments passed in the 'flashvars' attributes, the adversary injects '&' and payload in the URL., If some of the attributes of the <object> tag are received as parameters, the 'flashvars' attribute is injected into the <object> tag without the creator of the Web page ever intending to allow arguments to be passed into the Flash file., If shared objects are used to save data that is entered by the user persistent Flash parameter injection may occur, with malicious code being injected into the Flash file and executed, every time the Flash file is loaded.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Execute Flash Parameter Injection Attack Inject parameters into Flash file. Based on the results of the Experiment phase, the adversary crafts the underlying malicious URL containing injected Flash parameters and submits it to the web server. Once the web server receives the request, the embedding HTML document will controllable by the adversary.\nPossible techniques to use: Craft underlying malicious URL and send it to the web server to take control of the embedding HTML document.\n\n"
      ],
      "@Name": "Flash Parameter Injection"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - BlueSmacking",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Scan for Bluetooth Enabled Devices Using BlueZ along with an antenna, an adversary searches for devices with Bluetooth on.\nPossible techniques to use: Note the MAC address of the device you want to attack.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Change L2CAP Packet Length The adversary must change the L2CAP packet length to create packets that will overwhelm a Bluetooth enabled device.\nPossible techniques to use: An adversary downloads and installs BlueZ, the standard Bluetooth utility package for Linux.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Flood An adversary sends the packets to the target device, and floods it until performance is degraded.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Scan for Bluetooth Enabled Devices Using BlueZ along with an antenna, an adversary searches for devices with Bluetooth on.\nPossible techniques to use: Note the MAC address of the device you want to attack.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Change L2CAP Packet Length The adversary must change the L2CAP packet length to create packets that will overwhelm a Bluetooth enabled device.\nPossible techniques to use: An adversary downloads and installs BlueZ, the standard Bluetooth utility package for Linux.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Flood An adversary sends the packets to the target device, and floods it until performance is degraded.\n\n"
      ],
      "@Name": "BlueSmacking"
    }
  },
  {
    "instruction": "Given attack pattern: Using Slashes in Alternate Encoding.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Using Slashes in Alternate Encoding are: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The adversary uses the entry points gathered in the \"Explore\" phase as a target list and looks for areas where user input is used to access resources on the target host. The adversary attempts different encodings of slash characters to bypass input filters.\nPossible techniques to use: Try both backslash and forward slash characters, Try different encodings for slash characters such as %5C\n\n\n- 3)Attack phase: Exploit.\nStep overview: Traverse application directories Once the adversary determines how to bypass filters that filter out slash characters, they will manipulate the user input to include slashes in order to traverse directories and access resources that are not intended for the user.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The adversary uses the entry points gathered in the \"Explore\" phase as a target list and looks for areas where user input is used to access resources on the target host. The adversary attempts different encodings of slash characters to bypass input filters.\nPossible techniques to use: Try both backslash and forward slash characters, Try different encodings for slash characters such as %5C\n\n",
        "3)Attack phase: Exploit.\nStep overview: Traverse application directories Once the adversary determines how to bypass filters that filter out slash characters, they will manipulate the user input to include slashes in order to traverse directories and access resources that are not intended for the user.\n\n"
      ],
      "@Name": "Using Slashes in Alternate Encoding"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Experiment.\nStep overview: An adversary sends UDP packets to target ports.\n\n\n* 2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine the port's state. Whether a port responds to a UDP packet is dependant on what application is listening on that port. No response does not indicate the port is not open.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "UDP Scan",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Experiment.\nStep overview: An adversary sends UDP packets to target ports.\n\n",
        "2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine the port's state. Whether a port responds to a UDP packet is dependant on what application is listening on that port. No response does not indicate the port is not open.\n\n"
      ],
      "@Name": "UDP Scan"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: The adversary first attempts to obtain a digital certificate in order to sign their malware or tools. This certificate could be stolen, created by the adversary, or acquired normally through a certificate authority.\n\n\n- 2)Attack phase: Explore.\nStep overview: Based on the type of certificate obtained, the adversary will create a goal for their attack. This is either a broad or targeted attack. If an adversary was able to steal a certificate from a targeted organization, they could target this organization by pretending to have legitimate code signed by them. In other cases, the adversary would simply sign their malware and pose as legitimate software such that any user might trust it. This is the more broad approach\n\n\n- 3)Attack phase: Experiment.\nStep overview: The adversary creates their malware and signs it with the obtained digital certificate. The adversary then checks if the code that they signed is valid either through downloading from the targeted source or testing locally.\n\n\n- 4)Attack phase: Exploit.\nStep overview: Once the malware has been signed, it is then deployed to the desired location. They wait for a trusting user to run their malware, thinking that it is legitimate software. This malware could do a variety of things based on the motivation of the adversary.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Signing Malicious Code",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: The adversary first attempts to obtain a digital certificate in order to sign their malware or tools. This certificate could be stolen, created by the adversary, or acquired normally through a certificate authority.\n\n",
        "2)Attack phase: Explore.\nStep overview: Based on the type of certificate obtained, the adversary will create a goal for their attack. This is either a broad or targeted attack. If an adversary was able to steal a certificate from a targeted organization, they could target this organization by pretending to have legitimate code signed by them. In other cases, the adversary would simply sign their malware and pose as legitimate software such that any user might trust it. This is the more broad approach\n\n",
        "3)Attack phase: Experiment.\nStep overview: The adversary creates their malware and signs it with the obtained digital certificate. The adversary then checks if the code that they signed is valid either through downloading from the targeted source or testing locally.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Once the malware has been signed, it is then deployed to the desired location. They wait for a trusting user to run their malware, thinking that it is legitimate software. This malware could do a variety of things based on the motivation of the adversary.\n\n"
      ],
      "@Name": "Signing Malicious Code"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Find a target SOA or Web Service The adversary must first indentify a target SOA or Web Service.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Determine desired outcome Because poisoning a web service registry can have different outcomes, the adversary must decide how they wish to effect the webservice.\nPossible techniques to use: An adversary can perform a denial of service attack on a web service., An adversary can redirect requests or responses to a malicious service.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Determine if a malicious service needs to be created If the adversary wishes to redirect requests or responses, they will need to create a malicious service to redirect to.\nPossible techniques to use: Create a service to that requests are sent to in addition to the legitimate service and simply record the requests., Create a service that will give malicious responses to a service provider., Act as a malicious service provider and respond to requests in an arbitrary way.\n\n\n- 4)Attack phase: Exploit.\nStep overview: Poison Web Service Registry Based on the desired outcome, poison the web service registry. This is done by altering the data at rest in the registry or uploading malicious content by spoofing a service provider.\nPossible techniques to use: Intercept and change WS-Adressing headers to route to a malicious service or service provider., Provide incorrect information in schema or metadata to cause a denial of service., Delete information about service procider interfaces to cause a denial of service.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Poison Web Service Registry",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find a target SOA or Web Service The adversary must first indentify a target SOA or Web Service.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Determine desired outcome Because poisoning a web service registry can have different outcomes, the adversary must decide how they wish to effect the webservice.\nPossible techniques to use: An adversary can perform a denial of service attack on a web service., An adversary can redirect requests or responses to a malicious service.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Determine if a malicious service needs to be created If the adversary wishes to redirect requests or responses, they will need to create a malicious service to redirect to.\nPossible techniques to use: Create a service to that requests are sent to in addition to the legitimate service and simply record the requests., Create a service that will give malicious responses to a service provider., Act as a malicious service provider and respond to requests in an arbitrary way.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Poison Web Service Registry Based on the desired outcome, poison the web service registry. This is done by altering the data at rest in the registry or uploading malicious content by spoofing a service provider.\nPossible techniques to use: Intercept and change WS-Adressing headers to route to a malicious service or service provider., Provide incorrect information in schema or metadata to cause a denial of service., Delete information about service procider interfaces to cause a denial of service.\n\n"
      ],
      "@Name": "Poison Web Service Registry"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - TCP FIN Scan",
    "context": "",
    "output": "Here are the steps to implement TCP FIN Scan:\n1)Attack phase: Experiment.\nStep overview: An adversary sends TCP packets with the FIN flag but not associated with an existing connection to target ports.\n\n\n* 2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Experiment.\nStep overview: An adversary sends TCP packets with the FIN flag but not associated with an existing connection to target ports.\n\n",
        "2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.\n\n"
      ],
      "@Name": "TCP FIN Scan"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Removal of filters: Input filters, output filters, data masking",
    "context": "",
    "output": "Execution Flow:\nName:Removing Important Client Functionality\nDescription: An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Removing Important Client Functionality\nDescription: An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Removal of filters: Input filters, output filters, data masking"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - TCP ACK Scan",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Experiment.\nStep overview: An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports.\n\n\n2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine the port's state. If a RST packet is received the target port is either closed or the ACK was sent out-of-sync. If no response is received, the target is likely using a stateful firewall.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Experiment.\nStep overview: An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports.\n\n",
        "2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine the port's state. If a RST packet is received the target port is either closed or the ACK was sent out-of-sync. If no response is received, the target is likely using a stateful firewall.\n\n"
      ],
      "@Name": "TCP ACK Scan"
    }
  },
  {
    "instruction": "Given attack pattern: Forced Deadlock.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Forced Deadlock are: 1)Attack phase: Explore.\nStep overview: The adversary initiates an exploratory phase to get familiar with the system.\n\n\n2)Attack phase: Explore.\nStep overview: The adversary triggers a first action (such as holding a resource) and initiates a second action which will wait for the first one to finish.\n\n\n3)Attack phase: Explore.\nStep overview: If the target program has a deadlock condition, the program waits indefinitely resulting in a denial of service.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: The adversary initiates an exploratory phase to get familiar with the system.\n\n",
        "2)Attack phase: Explore.\nStep overview: The adversary triggers a first action (such as holding a resource) and initiates a second action which will wait for the first one to finish.\n\n",
        "3)Attack phase: Explore.\nStep overview: If the target program has a deadlock condition, the program waits indefinitely resulting in a denial of service.\n\n"
      ],
      "@Name": "Forced Deadlock"
    }
  },
  {
    "instruction": "Given attack pattern: Exploiting Multiple Input Interpretation Layers.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Exploiting Multiple Input Interpretation Layers are: 1)Attack phase: Explore.\nStep overview: Determine application/system inputs where bypassing input validation is desired The attacker first needs to determine all of the application's/system's inputs where input validation is being performed and where they want to bypass it.\nPossible techniques to use: While using an application/system, the attacker discovers an input where validation is stopping them from performing some malicious or unauthorized actions.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Determine which character encodings are accepted by the application/system The attacker then needs to provide various character encodings to the application/system and determine which ones are accepted. The attacker will need to observe the application's/system's response to the encoded data to determine whether the data was interpreted properly.\nPossible techniques to use: Determine which escape characters are accepted by the application/system. A common escape character is the backslash character, '\\', Determine whether URL encoding is accepted by the application/system., Determine whether UTF-8 encoding is accepted by the application/system., Determine whether UTF-16 encoding is accepted by the application/system., Determine if any other encodings are accepted by the application/system.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Combine multiple encodings accepted by the application. The attacker now combines encodings accepted by the application. The attacker may combine different encodings or apply the same encoding multiple times.\nPossible techniques to use: Combine same encoding multiple times and observe its effects. For example, if special characters are encoded with a leading backslash, then the following encoding may be accepted by the application/system: \"\\\\\\.\". With two parsing layers, this may get converted to \"\\.\" after the first parsing layer, and then, to \".\" after the second. If the input validation layer is between the two parsing layers, then \"\\\\\\.\\\\\\.\" might pass a test for \"..\" but still get converted to \"..\" afterwards. This may enable directory traversal attacks., Combine multiple encodings and observe the effects. For example, the attacker might encode \".\" as \"\\.\", and then, encode \"\\.\" as \"&#92;&#46;\", and then, encode that using URL encoding to \"%26%2392%3B%26%2346%3B\"\n\n\n* 4)Attack phase: Exploit.\nStep overview: Leverage ability to bypass input validation Attacker leverages their ability to bypass input validation to gain unauthorized access to system. There are many attacks possible, and a few examples are mentioned here.\nPossible techniques to use: Gain access to sensitive files., Perform command injection., Perform SQL injection., Perform XSS attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine application/system inputs where bypassing input validation is desired The attacker first needs to determine all of the application's/system's inputs where input validation is being performed and where they want to bypass it.\nPossible techniques to use: While using an application/system, the attacker discovers an input where validation is stopping them from performing some malicious or unauthorized actions.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Determine which character encodings are accepted by the application/system The attacker then needs to provide various character encodings to the application/system and determine which ones are accepted. The attacker will need to observe the application's/system's response to the encoded data to determine whether the data was interpreted properly.\nPossible techniques to use: Determine which escape characters are accepted by the application/system. A common escape character is the backslash character, '\\', Determine whether URL encoding is accepted by the application/system., Determine whether UTF-8 encoding is accepted by the application/system., Determine whether UTF-16 encoding is accepted by the application/system., Determine if any other encodings are accepted by the application/system.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Combine multiple encodings accepted by the application. The attacker now combines encodings accepted by the application. The attacker may combine different encodings or apply the same encoding multiple times.\nPossible techniques to use: Combine same encoding multiple times and observe its effects. For example, if special characters are encoded with a leading backslash, then the following encoding may be accepted by the application/system: \"\\\\\\.\". With two parsing layers, this may get converted to \"\\.\" after the first parsing layer, and then, to \".\" after the second. If the input validation layer is between the two parsing layers, then \"\\\\\\.\\\\\\.\" might pass a test for \"..\" but still get converted to \"..\" afterwards. This may enable directory traversal attacks., Combine multiple encodings and observe the effects. For example, the attacker might encode \".\" as \"\\.\", and then, encode \"\\.\" as \"&#92;&#46;\", and then, encode that using URL encoding to \"%26%2392%3B%26%2346%3B\"\n\n",
        "4)Attack phase: Exploit.\nStep overview: Leverage ability to bypass input validation Attacker leverages their ability to bypass input validation to gain unauthorized access to system. There are many attacks possible, and a few examples are mentioned here.\nPossible techniques to use: Gain access to sensitive files., Perform command injection., Perform SQL injection., Perform XSS attacks.\n\n"
      ],
      "@Name": "Exploiting Multiple Input Interpretation Layers"
    }
  },
  {
    "instruction": "List the execution flow related to capec: TCP RPC Scan",
    "context": "",
    "output": "Execution Flow:\nName:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP RPC Scan"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Removing Important Client Functionality",
    "context": "",
    "output": "The execution flow for Removing Important Client Functionality is the following: 1)Attack phase: Explore.\nStep overview: Probing The adversary probes, through brute-forcing, reverse-engineering or other similar means, the functionality on the client that server assumes to be present and trustworthy.\nPossible techniques to use: The adversary probes by exploring an application's functionality and its underlying mapping to server-side components., The adversary reverse engineers client-side code to identify the functionality that the server relies on for the proper or secure operation.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Determine which functionality to disable or remove The adversary tries to determine which functionality to disable or remove through reverse-engineering from the list of functionality identified in the Explore phase.\nPossible techniques to use: The adversary reverse engineers the client-side code to determine which functionality to disable or remove.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Disable or remove the critical functionality from the client code Once the functionality has been determined, the adversary disables or removes the critical functionality from the client code to perform malicious actions that the server believes are prohibited.\nPossible techniques to use: The adversary disables or removes the functionality from the client-side code to perform malicious actions, such as sending of dangerous content (such as scripts) to the server.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Probing The adversary probes, through brute-forcing, reverse-engineering or other similar means, the functionality on the client that server assumes to be present and trustworthy.\nPossible techniques to use: The adversary probes by exploring an application's functionality and its underlying mapping to server-side components., The adversary reverse engineers client-side code to identify the functionality that the server relies on for the proper or secure operation.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Determine which functionality to disable or remove The adversary tries to determine which functionality to disable or remove through reverse-engineering from the list of functionality identified in the Explore phase.\nPossible techniques to use: The adversary reverse engineers the client-side code to determine which functionality to disable or remove.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Disable or remove the critical functionality from the client code Once the functionality has been determined, the adversary disables or removes the critical functionality from the client code to perform malicious actions that the server believes are prohibited.\nPossible techniques to use: The adversary disables or removes the functionality from the client-side code to perform malicious actions, such as sending of dangerous content (such as scripts) to the server.\n\n"
      ],
      "@Name": "Removing Important Client Functionality"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: XSS Using Invalid Characters",
    "context": "",
    "output": "The execution flow for XSS Using Invalid Characters is the following: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS vulnerabilities using invalid characters The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters preceded by an invalid character(s) to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. The adversary is looking for cases where an invalid character causes an input filter to stop processing, allowing the malicious input that follows to bypass the filter\nPossible techniques to use: Use a list of XSS probe strings preceded by an invalid character(s) such as null, carriage return, line feed, or tab to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier., Use a proxy tool to record results of manual input of XSS probes in known URLs., Use a list of HTML special characters preceded by an invalid character(s) to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Change a URL parameter to include a malicious script tag preceded by invalid character(s)., Send information gathered from the malicious script to a remote endpoint.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS vulnerabilities using invalid characters The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters preceded by an invalid character(s) to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. The adversary is looking for cases where an invalid character causes an input filter to stop processing, allowing the malicious input that follows to bypass the filter\nPossible techniques to use: Use a list of XSS probe strings preceded by an invalid character(s) such as null, carriage return, line feed, or tab to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier., Use a proxy tool to record results of manual input of XSS probes in known URLs., Use a list of HTML special characters preceded by an invalid character(s) to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Change a URL parameter to include a malicious script tag preceded by invalid character(s)., Send information gathered from the malicious script to a remote endpoint.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n"
      ],
      "@Name": "XSS Using Invalid Characters"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Voice Phishing",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Obtain domain name and certificate to spoof legitimate site This optional step can be used to help the adversary impersonate the legitimate organization more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. If the adversary leverages cold-calling for this attack, this step is skipped.\nPossible techniques to use: Optionally obtain a domain name that visually looks similar to the legitimate organization's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L), Optionally obtain a legitimate SSL certificate for the new domain name.\n\n\n* 2)Attack phase: Explore.\nStep overview: Explore legitimate website and create duplicate An adversary optionally creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the organization's website that they are trying to impersonate. That website will contain a telephone number for the victim to call to assist them with their issue and initiate the attack. If the adversary leverages cold-calling for this attack, this step is skipped.\nPossible techniques to use: Use spidering software to get copy of web pages on legitimate site., Manually save copies of required web pages from legitimate site., Create new web pages that have the legitimate site's look and feel, but contain completely new content.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Convince user to provide sensitive information to the adversary. An adversary \"cold calls\" the victim or receives a call from the victim via the malicious site and provides a call-to-action, in order to persuade the user into providing sensitive details to the adversary (e.g. login credentials, bank account information, etc.). The key is to get the victim to believe that the individual they are talking to is from a legitimate entity with which the victim does business and that the call is occurring for legitimate reasons. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.\nPossible techniques to use: Call the user a from a spoofed legitimate-looking telephone number.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Use stolen information Once the adversary obtains the sensitive information, this information can be leveraged to log into the victim's bank account and transfer money to an account of their choice, or to make fraudulent purchases with stolen credit card information.\nPossible techniques to use: Login to the legitimate site using another the victim's supplied credentials\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Obtain domain name and certificate to spoof legitimate site This optional step can be used to help the adversary impersonate the legitimate organization more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. If the adversary leverages cold-calling for this attack, this step is skipped.\nPossible techniques to use: Optionally obtain a domain name that visually looks similar to the legitimate organization's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L), Optionally obtain a legitimate SSL certificate for the new domain name.\n\n",
        "2)Attack phase: Explore.\nStep overview: Explore legitimate website and create duplicate An adversary optionally creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the organization's website that they are trying to impersonate. That website will contain a telephone number for the victim to call to assist them with their issue and initiate the attack. If the adversary leverages cold-calling for this attack, this step is skipped.\nPossible techniques to use: Use spidering software to get copy of web pages on legitimate site., Manually save copies of required web pages from legitimate site., Create new web pages that have the legitimate site's look and feel, but contain completely new content.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Convince user to provide sensitive information to the adversary. An adversary \"cold calls\" the victim or receives a call from the victim via the malicious site and provides a call-to-action, in order to persuade the user into providing sensitive details to the adversary (e.g. login credentials, bank account information, etc.). The key is to get the victim to believe that the individual they are talking to is from a legitimate entity with which the victim does business and that the call is occurring for legitimate reasons. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.\nPossible techniques to use: Call the user a from a spoofed legitimate-looking telephone number.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Use stolen information Once the adversary obtains the sensitive information, this information can be leveraged to log into the victim's bank account and transfer money to an account of their choice, or to make fraudulent purchases with stolen credit card information.\nPossible techniques to use: Login to the legitimate site using another the victim's supplied credentials\n\n"
      ],
      "@Name": "Voice Phishing"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Collect Data from Screen Capture",
    "context": "",
    "output": "Execution Flow:\nName:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Collect Data from Screen Capture"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - SQL Injection",
    "context": "",
    "output": "Here are the steps to implement SQL Injection:\n1)Attack phase: Explore.\nStep overview: Survey application The attacker first takes an inventory of the functionality exposed by the application.\nPossible techniques to use: Spider web sites for all available links, Sniff network communications with application using a utility such as WireShark.\n\n\n2)Attack phase: Experiment.\nStep overview: Determine user-controllable input susceptible to injection Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject characters that have special meaning in SQL (such as a single quote character, a double quote character, two hyphens, a parenthesis, etc.). The goal is to create a SQL query with an invalid syntax.\nPossible techniques to use: Use web browser to inject input through text fields or through HTTP GET parameters., Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc., Use network-level packet injection tools such as netcat to inject input, Use modified client (modified by reverse engineering) to inject input.\n\n\n3)Attack phase: Experiment.\nStep overview: Experiment with SQL Injection vulnerabilities After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.\nPossible techniques to use: Use public resources such as \"SQL Injection Cheat Sheet\" at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries., Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : \"' OR 1=1; --\", or something else that would syntactically complete a hypothesized query. Iteratively refine the query., Use \"Blind SQL Injection\" techniques to extract information about the database schema., If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: \"'; DROP TABLE SYSOBJECTS; --\" and \"'); DROP TABLE SYSOBJECTS; --\". These particular queries will likely not work because the SYSOBJECTS table is generally protected.\n\n\n4)Attack phase: Exploit.\nStep overview: Exploit SQL Injection vulnerability After refining and adding various logic to SQL queries, craft and execute the underlying SQL query that will be used to attack the target system. The goal is to reveal, modify, and/or delete database data, using the knowledge obtained in the previous step. This could entail crafting and executing multiple SQL queries if a denial of service attack is the intent.\nPossible techniques to use: Craft and Execute underlying SQL query\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey application The attacker first takes an inventory of the functionality exposed by the application.\nPossible techniques to use: Spider web sites for all available links, Sniff network communications with application using a utility such as WireShark.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Determine user-controllable input susceptible to injection Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject characters that have special meaning in SQL (such as a single quote character, a double quote character, two hyphens, a parenthesis, etc.). The goal is to create a SQL query with an invalid syntax.\nPossible techniques to use: Use web browser to inject input through text fields or through HTTP GET parameters., Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc., Use network-level packet injection tools such as netcat to inject input, Use modified client (modified by reverse engineering) to inject input.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Experiment with SQL Injection vulnerabilities After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.\nPossible techniques to use: Use public resources such as \"SQL Injection Cheat Sheet\" at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries., Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : \"' OR 1=1; --\", or something else that would syntactically complete a hypothesized query. Iteratively refine the query., Use \"Blind SQL Injection\" techniques to extract information about the database schema., If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: \"'; DROP TABLE SYSOBJECTS; --\" and \"'); DROP TABLE SYSOBJECTS; --\". These particular queries will likely not work because the SYSOBJECTS table is generally protected.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Exploit SQL Injection vulnerability After refining and adding various logic to SQL queries, craft and execute the underlying SQL query that will be used to attack the target system. The goal is to reveal, modify, and/or delete database data, using the knowledge obtained in the previous step. This could entail crafting and executing multiple SQL queries if a denial of service attack is the intent.\nPossible techniques to use: Craft and Execute underlying SQL query\n\n"
      ],
      "@Name": "SQL Injection"
    }
  },
  {
    "instruction": "Given attack pattern: SOAP Manipulation.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement SOAP Manipulation are: 1)Attack phase: Exploit.\nStep overview: Find target application The adversary needs to identify an application that uses SOAP as a communication protocol.\nPossible techniques to use: Observe HTTP traffic to an application and look for SOAP headers.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Detect Incorrect SOAP Parameter Handling The adversary tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.\nPossible techniques to use: Send more data than would seem reasonable for a field and see if the server complains., Send nonsense data in a field that expects a certain subset, such as product names or sequence numbers, and see if the server complains., Send XML metacharacters as data and see how the server responds.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Manipulate SOAP parameters The adversary manipulates SOAP parameters in a way that causes undesirable behavior for the server. This can result in denial of service, information disclosure, arbitrary code exection, and more.\nPossible techniques to use: Create a recursive XML payload that will take up all of the memory on the server when parsed, resulting in a denial of service. This is known as the billion laughs attack., Insert XML metacharacters into data fields that could cause the server to go into an error state when parsing. This could lead to a denial of service., Insert a large amount of data into a field that should have a character limit, causing a buffer overflow.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Exploit.\nStep overview: Find target application The adversary needs to identify an application that uses SOAP as a communication protocol.\nPossible techniques to use: Observe HTTP traffic to an application and look for SOAP headers.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Detect Incorrect SOAP Parameter Handling The adversary tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.\nPossible techniques to use: Send more data than would seem reasonable for a field and see if the server complains., Send nonsense data in a field that expects a certain subset, such as product names or sequence numbers, and see if the server complains., Send XML metacharacters as data and see how the server responds.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Manipulate SOAP parameters The adversary manipulates SOAP parameters in a way that causes undesirable behavior for the server. This can result in denial of service, information disclosure, arbitrary code exection, and more.\nPossible techniques to use: Create a recursive XML payload that will take up all of the memory on the server when parsed, resulting in a denial of service. This is known as the billion laughs attack., Insert XML metacharacters into data fields that could cause the server to go into an error state when parsing. This could lead to a denial of service., Insert a large amount of data into a field that should have a character limit, causing a buffer overflow.\n\n"
      ],
      "@Name": "SOAP Manipulation"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - NoSQL Injection",
    "context": "",
    "output": "Here are the steps to implement NoSQL Injection:\n1)Attack phase: Explore.\nStep overview: Survey target application Due to the number of NoSQL databases available and the numerous language/API combinations of each, the adversary must first survey the target application to learn what technologies are being leveraged and how they interact with user-driven data.\nPossible techniques to use: Determine the technology stack leveraged by the target application, such as the application server, drivers, frameworks, APIs, and databases being utilized., Identify areas of the application that interact with user input and may be involved with NoSQL queries.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Identify user-controllable input susceptible to injection After identifying the technology stack being used and where user-driven input is leveraged, determine the user-controllable input susceptible to injection such as authentication or search forms. For each user-controllable input that the adversary suspects is vulnerable to NoSQL injection, attempt to inject characters or keywords that have special meaning in the given NoSQL database or language (e.g., \"$ne\" for MongoDB or \"$exists\" for PHP/MongoDB), or JavaScript that can be executed within the application. The goal is to create a NoSQL query with an invalid syntax.\nPossible techniques to use: Use web browser to inject input through text fields or through HTTP GET parameters., Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc., Use network-level packet injection tools such as netcat to inject input, Use modified client (modified by reverse engineering) to inject input.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Experiment with NoSQL Injection vulnerabilities After determining that a given input is vulnerable to NoSQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, modify/delete information in the database, or execute commands on the server.\nPossible techniques to use: Use public resources such as OWASP's \"Testing for NoSQL Injection\" [REF-668] or Null Sweep's \"NoSQL Injection Cheatsheet\" [REF-669] and try different approaches for adding logic to NoSQL queries., Iteratively add logic to the NoSQL query and use detailed error messages from the server to debug the query., Attempt an HTTP Parameter Pollution attack to replace language-specific keywords, such as \"where\" within PHP [CAPEC-460].\n\n\n* 4)Attack phase: Exploit.\nStep overview: Exploit NoSQL Injection vulnerability After refining and adding various logic to NoSQL queries, craft and execute the underlying NoSQL query that will be used to attack the target system.\nPossible techniques to use: Craft and Execute underlying NoSQL query\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey target application Due to the number of NoSQL databases available and the numerous language/API combinations of each, the adversary must first survey the target application to learn what technologies are being leveraged and how they interact with user-driven data.\nPossible techniques to use: Determine the technology stack leveraged by the target application, such as the application server, drivers, frameworks, APIs, and databases being utilized., Identify areas of the application that interact with user input and may be involved with NoSQL queries.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Identify user-controllable input susceptible to injection After identifying the technology stack being used and where user-driven input is leveraged, determine the user-controllable input susceptible to injection such as authentication or search forms. For each user-controllable input that the adversary suspects is vulnerable to NoSQL injection, attempt to inject characters or keywords that have special meaning in the given NoSQL database or language (e.g., \"$ne\" for MongoDB or \"$exists\" for PHP/MongoDB), or JavaScript that can be executed within the application. The goal is to create a NoSQL query with an invalid syntax.\nPossible techniques to use: Use web browser to inject input through text fields or through HTTP GET parameters., Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc., Use network-level packet injection tools such as netcat to inject input, Use modified client (modified by reverse engineering) to inject input.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Experiment with NoSQL Injection vulnerabilities After determining that a given input is vulnerable to NoSQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, modify/delete information in the database, or execute commands on the server.\nPossible techniques to use: Use public resources such as OWASP's \"Testing for NoSQL Injection\" [REF-668] or Null Sweep's \"NoSQL Injection Cheatsheet\" [REF-669] and try different approaches for adding logic to NoSQL queries., Iteratively add logic to the NoSQL query and use detailed error messages from the server to debug the query., Attempt an HTTP Parameter Pollution attack to replace language-specific keywords, such as \"where\" within PHP [CAPEC-460].\n\n",
        "4)Attack phase: Exploit.\nStep overview: Exploit NoSQL Injection vulnerability After refining and adding various logic to NoSQL queries, craft and execute the underlying NoSQL query that will be used to attack the target system.\nPossible techniques to use: Craft and Execute underlying NoSQL query\n\n"
      ],
      "@Name": "NoSQL Injection"
    }
  },
  {
    "instruction": "Given attack pattern: Filter Failure through Buffer Overflow.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Filter Failure through Buffer Overflow are: 1)Attack phase: Explore.\nStep overview: Survey The attacker surveys the target application, possibly as a valid and authenticated user\nPossible techniques to use: Spidering web sites for inputs that involve potential filtering, Brute force guessing of filtered inputs\n\n\n2)Attack phase: Experiment.\nStep overview: Attempt injections Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.\nPossible techniques to use: Brute force attack through black box penetration test tool., Fuzzing of communications protocols, Manual testing of possible inputs with attack data.\n\n\n3)Attack phase: Experiment.\nStep overview: Monitor responses Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?\nPossible techniques to use: Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data., Check Log files. An attacker with access to log files can look at the outcome of bad input.\n\n\n4)Attack phase: Exploit.\nStep overview: Abuse the system through filter failure An attacker writes a script to consistently induce the filter failure.\nPossible techniques to use: DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly., Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system., An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey The attacker surveys the target application, possibly as a valid and authenticated user\nPossible techniques to use: Spidering web sites for inputs that involve potential filtering, Brute force guessing of filtered inputs\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attempt injections Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.\nPossible techniques to use: Brute force attack through black box penetration test tool., Fuzzing of communications protocols, Manual testing of possible inputs with attack data.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Monitor responses Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?\nPossible techniques to use: Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data., Check Log files. An attacker with access to log files can look at the outcome of bad input.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Abuse the system through filter failure An attacker writes a script to consistently induce the filter failure.\nPossible techniques to use: DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly., Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system., An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists.\n\n"
      ],
      "@Name": "Filter Failure through Buffer Overflow"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Schema Poisoning",
    "context": "",
    "output": "Here are the steps to implement Schema Poisoning:\n1)Attack phase: Explore.\nStep overview: Find target application and schema The adversary first finds the application that they want to target. This application must use schemas in some way, so the adversary also needs to confirm that schemas are being used.\nPossible techniques to use: Gain access to the system that the application is on and look for a schema., Observe HTTP traffic to the application and look for a schema being transmitted.\n\n\n2)Attack phase: Experiment.\nStep overview: Gain access to schema The adversary gains access to the schema so that they can modify the contents.\nPossible techniques to use: For a local scenario, the adversary needs access to the machine that the schema is located on and gain permissions to alter the contents of the schema file., For a remote scenario, the adversary needs to be able to perform an adversary in the middle attack on the HTTP traffic that contains a schema.\n\n\n3)Attack phase: Exploit.\nStep overview: Poison schema Once the adversary gains access to the schema, they will alter it to achieve a desired effect. Locally, they can just modify the file. For remote schemas, the adversary will alter the schema in transit by performing an adversary in the middle attack.\nPossible techniques to use: Cause a denial of service by modifying the schema so that it does not contain required information for subsequent processing., Manipulation of the data types described in the schema may affect the results of calculations. For example, a float field could be changed to an int field., Change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find target application and schema The adversary first finds the application that they want to target. This application must use schemas in some way, so the adversary also needs to confirm that schemas are being used.\nPossible techniques to use: Gain access to the system that the application is on and look for a schema., Observe HTTP traffic to the application and look for a schema being transmitted.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Gain access to schema The adversary gains access to the schema so that they can modify the contents.\nPossible techniques to use: For a local scenario, the adversary needs access to the machine that the schema is located on and gain permissions to alter the contents of the schema file., For a remote scenario, the adversary needs to be able to perform an adversary in the middle attack on the HTTP traffic that contains a schema.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Poison schema Once the adversary gains access to the schema, they will alter it to achieve a desired effect. Locally, they can just modify the file. For remote schemas, the adversary will alter the schema in transit by performing an adversary in the middle attack.\nPossible techniques to use: Cause a denial of service by modifying the schema so that it does not contain required information for subsequent processing., Manipulation of the data types described in the schema may affect the results of calculations. For example, a float field could be changed to an int field., Change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).\n\n"
      ],
      "@Name": "Schema Poisoning"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Cross Site Tracing",
    "context": "",
    "output": "Execution Flow:\nName:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cross Site Tracing"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Use of Known Domain Credentials",
    "context": "",
    "output": "Here are the steps to implement Use of Known Domain Credentials:\n1)Attack phase: Explore.\nStep overview: Acquire known credentials The adversary must obtain known credentials in order to access the target system, application, or service.\nPossible techniques to use: An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web., An adversary leverages a key logger or phishing attack to steal user credentials as they are provided., An adversary conducts a sniffing attack to steal credentials as they are transmitted., An adversary gains access to a database and exfiltrates password hashes., An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.\n\n\n2)Attack phase: Explore.\nStep overview: Determine target's password policy Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.\nPossible techniques to use: Determine minimum and maximum allowed password lengths., Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary)., Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).\n\n\n3)Attack phase: Experiment.\nStep overview: Attempt authentication Try each credential until the target grants access.\nPossible techniques to use: Manually or automatically enter each credential through the target's interface.\n\n\n4)Attack phase: Exploit.\nStep overview: Impersonate An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within a system or application\n\n\n5)Attack phase: Exploit.\nStep overview: Spoofing Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.\n\n\n6)Attack phase: Exploit.\nStep overview: Data Exfiltration The adversary can obtain sensitive data contained within the system or application.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Acquire known credentials The adversary must obtain known credentials in order to access the target system, application, or service.\nPossible techniques to use: An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web., An adversary leverages a key logger or phishing attack to steal user credentials as they are provided., An adversary conducts a sniffing attack to steal credentials as they are transmitted., An adversary gains access to a database and exfiltrates password hashes., An adversary examines outward-facing configuration and properties files to discover hardcoded credentials.\n\n",
        "2)Attack phase: Explore.\nStep overview: Determine target's password policy Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.\nPossible techniques to use: Determine minimum and maximum allowed password lengths., Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary)., Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account).\n\n",
        "3)Attack phase: Experiment.\nStep overview: Attempt authentication Try each credential until the target grants access.\nPossible techniques to use: Manually or automatically enter each credential through the target's interface.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Impersonate An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within a system or application\n\n",
        "5)Attack phase: Exploit.\nStep overview: Spoofing Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.\n\n",
        "6)Attack phase: Exploit.\nStep overview: Data Exfiltration The adversary can obtain sensitive data contained within the system or application.\n\n"
      ],
      "@Name": "Use of Known Domain Credentials"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Malicious Logic Insertion into Product via Inclusion of Third-Party Component",
    "context": "",
    "output": "Execution Flow:\nName:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Malicious Logic Insertion into Product via Inclusion of Third-Party Component"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - TypoSquatting",
    "context": "",
    "output": "Here are the steps to implement TypoSquatting:\n1)Attack phase: Explore.\nStep overview: Determine target website The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.\nPossible techniques to use: Research popular or high traffic websites.\n\n\n2)Attack phase: Experiment.\nStep overview: Impersonate trusted domain In order to impersonate the trusted domain, the adversary needs to register the TypoSquatted URL.\nPossible techniques to use: Register the TypoSquatted domain.\n\n\n3)Attack phase: Exploit.\nStep overview: Deceive user into visiting domain Finally, the adversary needs to deceive a user into visiting the TypoSquatted domain.\nPossible techniques to use: Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the TypoSquatted domain., Assume that a user will incorrectly type the legitimate URL, leading the user to the TypoSquatted domain.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine target website The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.\nPossible techniques to use: Research popular or high traffic websites.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Impersonate trusted domain In order to impersonate the trusted domain, the adversary needs to register the TypoSquatted URL.\nPossible techniques to use: Register the TypoSquatted domain.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Deceive user into visiting domain Finally, the adversary needs to deceive a user into visiting the TypoSquatted domain.\nPossible techniques to use: Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the TypoSquatted domain., Assume that a user will incorrectly type the legitimate URL, leading the user to the TypoSquatted domain.\n\n"
      ],
      "@Name": "TypoSquatting"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Passing Local Filenames to Functions That Expect a URL",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Identify web application URL inputs Review application inputs to find those that are designed to be URLs.\nPossible techniques to use: Manually navigate web site pages to identify URLs., Use automated tools to identify URLs.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Identify URL inputs allowing local access. Execute test local commands via each URL input to determine which are successful.\nPossible techniques to use: Manually execute a local command (such as 'pwd') via the URL inputs., Using an automated tool, test each URL input for weakness.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Execute malicious commands Using the identified URL inputs that allow local command execution, execute malicious commands.\nPossible techniques to use: Execute local commands via the URL input.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify web application URL inputs Review application inputs to find those that are designed to be URLs.\nPossible techniques to use: Manually navigate web site pages to identify URLs., Use automated tools to identify URLs.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Identify URL inputs allowing local access. Execute test local commands via each URL input to determine which are successful.\nPossible techniques to use: Manually execute a local command (such as 'pwd') via the URL inputs., Using an automated tool, test each URL input for weakness.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Execute malicious commands Using the identified URL inputs that allow local command execution, execute malicious commands.\nPossible techniques to use: Execute local commands via the URL input.\n\n"
      ],
      "@Name": "Passing Local Filenames to Functions That Expect a URL"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Bypassing Physical Locks",
    "context": "",
    "output": "Execution Flow:\nName:Bypassing Physical Security\nDescription: Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Bypassing Physical Security\nDescription: Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Bypassing Physical Locks"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Postfix, Null Terminate, and Backslash",
    "context": "",
    "output": "The execution flow for Postfix, Null Terminate, and Backslash is the following: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects postfix null byte(s) followed by a backslash to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.\nPossible techniques to use: Try different encodings for null such as \\0 or %00 followed by an encoding for the backslash character.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Remove data after null byte(s) After determined entry points that are vulnerable, the adversary places a null byte(s) followed by a backslash such that they bypass an input filter and remove data after the null byte(s) in a way that is beneficial to them.\nPossible techniques to use: If the input is a directory as part of a longer file path, add a null byte(s) followed by a backslash at the end of the input to try to traverse to the given directory.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects postfix null byte(s) followed by a backslash to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.\nPossible techniques to use: Try different encodings for null such as \\0 or %00 followed by an encoding for the backslash character.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Remove data after null byte(s) After determined entry points that are vulnerable, the adversary places a null byte(s) followed by a backslash such that they bypass an input filter and remove data after the null byte(s) in a way that is beneficial to them.\nPossible techniques to use: If the input is a directory as part of a longer file path, add a null byte(s) followed by a backslash at the end of the input to try to traverse to the given directory.\n\n"
      ],
      "@Name": "Postfix, Null Terminate, and Backslash"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - PHP Local File Inclusion",
    "context": "",
    "output": "Here are the steps to implement PHP Local File Inclusion:\n1)Attack phase: Explore.\nStep overview: Survey application Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find. The adversary is looking for URLs that show PHP file inclusion is used, which can look something like \"http://vulnerable-website/file.php?file=index.php\".\nPossible techniques to use: Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms., Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.\n\n\n2)Attack phase: Experiment.\nStep overview: Attempt variations on input parameters Once the adversary finds a vulnerable URL that takes file input, they attempt a variety of path traversal techniques to attempt to get the application to display the contents of a local file, or execute a different PHP file already stored locally on the server.\nPossible techniques to use: Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of path traversal techniques used to include well known files., Use a proxy tool to record results of manual input of local file inclusion probes in known URLs.\n\n\n3)Attack phase: Exploit.\nStep overview: Include desired local file Once the adversary has determined which techniques of path traversal successfully work with the vulnerable PHP application, they will target a specific local file to include. These can be files such as \"/etc/passwd\", \"/etc/shadow\", or configuration files for the application that might expose sensitive information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey application Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find. The adversary is looking for URLs that show PHP file inclusion is used, which can look something like \"http://vulnerable-website/file.php?file=index.php\".\nPossible techniques to use: Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms., Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attempt variations on input parameters Once the adversary finds a vulnerable URL that takes file input, they attempt a variety of path traversal techniques to attempt to get the application to display the contents of a local file, or execute a different PHP file already stored locally on the server.\nPossible techniques to use: Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of path traversal techniques used to include well known files., Use a proxy tool to record results of manual input of local file inclusion probes in known URLs.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Include desired local file Once the adversary has determined which techniques of path traversal successfully work with the vulnerable PHP application, they will target a specific local file to include. These can be files such as \"/etc/passwd\", \"/etc/shadow\", or configuration files for the application that might expose sensitive information.\n\n"
      ],
      "@Name": "PHP Local File Inclusion"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: The attacker interacts with the target host and finds that session IDs are used to authenticate users.\n\n\n- 2)Attack phase: Explore.\nStep overview: The attacker steals a session ID from a valid user.\n\n\n- 3)Attack phase: Exploit.\nStep overview: The attacker tries to use the stolen session ID to gain access to the system with the privileges of the session ID's original owner.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Reusing Session IDs (aka Session Replay)",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: The attacker interacts with the target host and finds that session IDs are used to authenticate users.\n\n",
        "2)Attack phase: Explore.\nStep overview: The attacker steals a session ID from a valid user.\n\n",
        "3)Attack phase: Exploit.\nStep overview: The attacker tries to use the stolen session ID to gain access to the system with the privileges of the session ID's original owner.\n\n"
      ],
      "@Name": "Reusing Session IDs (aka Session Replay)"
    }
  },
  {
    "instruction": "Given attack pattern: SQL Injection through SOAP Parameter Tampering.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement SQL Injection through SOAP Parameter Tampering are: 1)Attack phase: Explore.\nStep overview: Detect Incorrect SOAP Parameter Handling The attacker tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.\nPossible techniques to use: The attacker tampers with the SOAP message parameters by injecting some special characters such as single quotes, double quotes, semi columns, etc. The attacker observes system behavior.\n\n\n2)Attack phase: Experiment.\nStep overview: Probe for SQL Injection vulnerability The attacker injects SQL syntax into vulnerable SOAP parameters identified during the Explore phase to search for unfiltered execution of the SQL syntax in a query.\n\n\n3)Attack phase: Exploit.\nStep overview: Inject SQL via SOAP Parameters The attacker injects SQL via SOAP parameters identified as vulnerable during Explore phase to launch a first or second order SQL injection attack.\nPossible techniques to use: An attacker performs a SQL injection attack via the usual methods leveraging SOAP parameters as the injection vector. An attacker has to be careful not to break the XML parser at the service provider which may prevent the payload getting through to the SQL query. The attacker may also look at the WSDL for the web service (if available) to better understand what is expected by the service provider.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Detect Incorrect SOAP Parameter Handling The attacker tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.\nPossible techniques to use: The attacker tampers with the SOAP message parameters by injecting some special characters such as single quotes, double quotes, semi columns, etc. The attacker observes system behavior.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe for SQL Injection vulnerability The attacker injects SQL syntax into vulnerable SOAP parameters identified during the Explore phase to search for unfiltered execution of the SQL syntax in a query.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Inject SQL via SOAP Parameters The attacker injects SQL via SOAP parameters identified as vulnerable during Explore phase to launch a first or second order SQL injection attack.\nPossible techniques to use: An attacker performs a SQL injection attack via the usual methods leveraging SOAP parameters as the injection vector. An attacker has to be careful not to break the XML parser at the service provider which may prevent the payload getting through to the SQL query. The attacker may also look at the WSDL for the web service (if available) to better understand what is expected by the service provider.\n\n"
      ],
      "@Name": "SQL Injection through SOAP Parameter Tampering"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Session Credential Falsification through Forging",
    "context": "",
    "output": "Execution Flow:\nName:Application API Message Manipulation via Man-in-the-Middle\nDescription: An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Adversary-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.\nNature of relationship: CanPrecede\n\n\nName:Session Fixation\nDescription: The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.\nNature of relationship: CanPrecede\n\n\nName:Exploitation of Trusted Identifiers\nDescription: An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Application API Message Manipulation via Man-in-the-Middle\nDescription: An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Adversary-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.\nNature of relationship: CanPrecede\n\n",
        "Name:Session Fixation\nDescription: The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.\nNature of relationship: CanPrecede\n\n",
        "Name:Exploitation of Trusted Identifiers\nDescription: An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Session Credential Falsification through Forging"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - XSS Using MIME Type Mismatch",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Survey the application for stored user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all areas that allow a user to upload content through an HTTP POST request. This is typically found in blogs or forums.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to file upload features, Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for MIME type mismatch The adversary uses the entry points gathered in the \"Explore\" phase as a target list and uploads files with scripting content, but whose MIME type is specified as a file type that cannot execute scripting content. If the application only checks the MIME type of the file, it may let the file through, causing the script to be executed by any user who accesses the file.\nPossible techniques to use: Upload a script file with a MIME type of text/plain to a forum and then access the uploaded file to see if the script is executed. If possible, the script displays a unique identifier so the adversary knows for certain it was executed when testing.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Store malicious XSS content Once the adversary has determined which file upload locations are vulnerable to MIME type mismatch, they will upload a malicious script disguised as a non scripting file. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.\nPossible techniques to use: Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.\n\n\n- 4)Attack phase: Exploit.\nStep overview: Get victim to view stored content In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.\nPossible techniques to use: Send a phishing email to the victim containing a URL that will direct them to the malicious stored content., Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for stored user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all areas that allow a user to upload content through an HTTP POST request. This is typically found in blogs or forums.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to file upload features, Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for MIME type mismatch The adversary uses the entry points gathered in the \"Explore\" phase as a target list and uploads files with scripting content, but whose MIME type is specified as a file type that cannot execute scripting content. If the application only checks the MIME type of the file, it may let the file through, causing the script to be executed by any user who accesses the file.\nPossible techniques to use: Upload a script file with a MIME type of text/plain to a forum and then access the uploaded file to see if the script is executed. If possible, the script displays a unique identifier so the adversary knows for certain it was executed when testing.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Store malicious XSS content Once the adversary has determined which file upload locations are vulnerable to MIME type mismatch, they will upload a malicious script disguised as a non scripting file. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.\nPossible techniques to use: Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Get victim to view stored content In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.\nPossible techniques to use: Send a phishing email to the victim containing a URL that will direct them to the malicious stored content., Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.\n\n"
      ],
      "@Name": "XSS Using MIME Type Mismatch"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Mobile Phishing",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Obtain domain name and certificate to spoof legitimate site This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.\nPossible techniques to use: Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L), Optionally obtain a legitimate SSL certificate for the new domain name.\n\n\n* 2)Attack phase: Explore.\nStep overview: Explore legitimate website and create duplicate An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.\nPossible techniques to use: Use spidering software to get copy of web pages on legitimate site., Manually save copies of required web pages from legitimate site., Create new web pages that have the legitimate site's look and feel, but contain completely new content.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Convince user to enter sensitive information on adversary's site. An adversary sends a text message to the victim that has a call-to-action, in order to persuade the user into clicking the included link (which then takes the victim to the adversary's website) and logging in. The key is to get the victim to believe that the text message originates from a legitimate entity with which the victim does business and that the website pointed to by the URL in the text message is the legitimate website. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.\nPossible techniques to use: Send the user a message from a spoofed legitimate-looking mobile number that asks the user to click on the included link.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Use stolen credentials to log into legitimate site Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.\nPossible techniques to use: Log in to the legitimate site using another user's supplied credentials\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Obtain domain name and certificate to spoof legitimate site This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.\nPossible techniques to use: Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L), Optionally obtain a legitimate SSL certificate for the new domain name.\n\n",
        "2)Attack phase: Explore.\nStep overview: Explore legitimate website and create duplicate An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.\nPossible techniques to use: Use spidering software to get copy of web pages on legitimate site., Manually save copies of required web pages from legitimate site., Create new web pages that have the legitimate site's look and feel, but contain completely new content.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Convince user to enter sensitive information on adversary's site. An adversary sends a text message to the victim that has a call-to-action, in order to persuade the user into clicking the included link (which then takes the victim to the adversary's website) and logging in. The key is to get the victim to believe that the text message originates from a legitimate entity with which the victim does business and that the website pointed to by the URL in the text message is the legitimate website. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.\nPossible techniques to use: Send the user a message from a spoofed legitimate-looking mobile number that asks the user to click on the included link.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Use stolen credentials to log into legitimate site Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.\nPossible techniques to use: Log in to the legitimate site using another user's supplied credentials\n\n"
      ],
      "@Name": "Mobile Phishing"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Retrieve Embedded Sensitive Data",
    "context": "",
    "output": "Here are the steps to implement Retrieve Embedded Sensitive Data:\n1)Attack phase: Explore.\nStep overview: Identify Target Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.\nPossible techniques to use: Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats., Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack.\n\n\n* 2)Attack phase: Exploit.\nStep overview: Retrieve Embedded Data The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to retrieve the information of interest.\nPossible techniques to use: API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information., Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness., Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on., Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, they attempt decoding in that format.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify Target Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.\nPossible techniques to use: Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats., Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack.\n\n",
        "2)Attack phase: Exploit.\nStep overview: Retrieve Embedded Data The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to retrieve the information of interest.\nPossible techniques to use: API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information., Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness., Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on., Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, they attempt decoding in that format.\n\n"
      ],
      "@Name": "Retrieve Embedded Sensitive Data"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Determine vulnerable firmware or ROM code An adversary will attempt to find device models that are known to have unpatchable firmware or ROM code, or are deemed \u201cend-of-support\u201d where a patch will not be made. The adversary looks for vulnerabilities in firmware or ROM code for the identified devices, or looks for devices which have known vulnerabilities\nPossible techniques to use: Many botnets use wireless scanning to discover nearby devices that might have default credentials or commonly used passwords. Once these devices are infected, they can search for other nearby devices and so on.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Determine plan of attack An adversary identifies a specific device/model that they wish to attack. They will also investigate similar devices to determine if the vulnerable firmware or ROM code is also present.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Carry out attack An adversary exploits the vulnerable firmware or ROM code on the identified device(s) to achieve their desired goal.\nPossible techniques to use: Install malware on a device to recruit it for a botnet., Install malware on the device and use it for a ransomware attack., Gain root access and steal information stored on the device., Manipulate the device to behave in unexpected ways which would benefit the adversary.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine vulnerable firmware or ROM code An adversary will attempt to find device models that are known to have unpatchable firmware or ROM code, or are deemed \u201cend-of-support\u201d where a patch will not be made. The adversary looks for vulnerabilities in firmware or ROM code for the identified devices, or looks for devices which have known vulnerabilities\nPossible techniques to use: Many botnets use wireless scanning to discover nearby devices that might have default credentials or commonly used passwords. Once these devices are infected, they can search for other nearby devices and so on.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Determine plan of attack An adversary identifies a specific device/model that they wish to attack. They will also investigate similar devices to determine if the vulnerable firmware or ROM code is also present.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Carry out attack An adversary exploits the vulnerable firmware or ROM code on the identified device(s) to achieve their desired goal.\nPossible techniques to use: Install malware on a device to recruit it for a botnet., Install malware on the device and use it for a ransomware attack., Gain root access and steal information stored on the device., Manipulate the device to behave in unexpected ways which would benefit the adversary.\n\n"
      ],
      "@Name": "Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Fuzzing",
    "context": "",
    "output": "The execution flow for Fuzzing is the following: 1)Attack phase: Explore.\nStep overview: Observe communication and inputs The fuzzing attacker observes the target system looking for inputs and communications between modules, subsystems, or systems.\nPossible techniques to use: Network sniffing. Using a network sniffer such as wireshark, the attacker observes communications into and out of the target system., Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the attacker observes the system calls and API calls that are made by the target system, and the nature of their parameters., Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)\n\n\n* 2)Attack phase: Experiment.\nStep overview: Generate fuzzed inputs Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.\nPossible techniques to use: Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80)., Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Observe the outcome Observe the outputs to the inputs fed into the system by fuzzers and see if anything interesting happens. If failure occurs, determine why that happened. Figure out the underlying assumption that was invalidated by the input.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Craft exploit payloads Put specially crafted input into the system that leverages the weakness identified through fuzzing and allows to achieve the goals of the attacker. Fuzzers often reveal ways to slip through the input validation filters and introduce unwanted data into the system.\nPossible techniques to use: Identify and embed shell code for the target system., Embed higher level attack commands in the payload. (e.g., SQL, PHP, server-side includes, etc.), Induce denial of service by exploiting resource leaks or bad error handling.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Observe communication and inputs The fuzzing attacker observes the target system looking for inputs and communications between modules, subsystems, or systems.\nPossible techniques to use: Network sniffing. Using a network sniffer such as wireshark, the attacker observes communications into and out of the target system., Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the attacker observes the system calls and API calls that are made by the target system, and the nature of their parameters., Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)\n\n",
        "2)Attack phase: Experiment.\nStep overview: Generate fuzzed inputs Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.\nPossible techniques to use: Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80)., Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Observe the outcome Observe the outputs to the inputs fed into the system by fuzzers and see if anything interesting happens. If failure occurs, determine why that happened. Figure out the underlying assumption that was invalidated by the input.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Craft exploit payloads Put specially crafted input into the system that leverages the weakness identified through fuzzing and allows to achieve the goals of the attacker. Fuzzers often reveal ways to slip through the input validation filters and introduce unwanted data into the system.\nPossible techniques to use: Identify and embed shell code for the target system., Embed higher level attack commands in the payload. (e.g., SQL, PHP, server-side includes, etc.), Induce denial of service by exploiting resource leaks or bad error handling.\n\n"
      ],
      "@Name": "Fuzzing"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Leverage Alternate Encoding",
    "context": "",
    "output": "Execution Flow:\nName:Input Data Manipulation\nDescription: An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Input Data Manipulation\nDescription: An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Leverage Alternate Encoding"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Data Serialization External Entities Blowup",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Find target web service The adversary must first find a web service that takes input data in the form of a serialized language such as XML or YAML.\n\n\n2)Attack phase: Experiment.\nStep overview: Host malicious file on a server The adversary will create a web server that contains a malicious file. This file will be extremely large, so that if a web service were to try to load it, the service would most likely hang.\n\n\n2)Attack phase: Experiment.\nStep overview: Craft malicious data Using the serialization language that the web service takes as input, the adversary will craft data that links to the malicious file using an external entity reference to the URL of the file.\n\n\n4)Attack phase: Exploit.\nStep overview: Send serialized data containing URI The adversary will send specially crafted serialized data to the web service. When the web service loads the input, it will attempt to download the malicious file. Depending on the amount of memory the web service has, this could either crash the service or cause it to hang, resulting in a Denial of Service attack.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find target web service The adversary must first find a web service that takes input data in the form of a serialized language such as XML or YAML.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Host malicious file on a server The adversary will create a web server that contains a malicious file. This file will be extremely large, so that if a web service were to try to load it, the service would most likely hang.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Craft malicious data Using the serialization language that the web service takes as input, the adversary will craft data that links to the malicious file using an external entity reference to the URL of the file.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Send serialized data containing URI The adversary will send specially crafted serialized data to the web service. When the web service loads the input, it will attempt to download the malicious file. Depending on the amount of memory the web service has, this could either crash the service or cause it to hang, resulting in a Denial of Service attack.\n\n"
      ],
      "@Name": "Data Serialization External Entities Blowup"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Manipulating State",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Adversary determines the nature of state management employed by the target. This includes determining the location (client-side, server-side or both applications) and possibly the items stored as part of user state.\n\n\n- 2)Attack phase: Experiment.\nStep overview: The adversary now tries to modify the user state contents (possibly indiscriminately if the contents are encrypted or otherwise obfuscated) or cause a state transition and observe the effects of this change on the target.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Having determined how to manipulate the state, the adversary can perform illegitimate actions.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Adversary determines the nature of state management employed by the target. This includes determining the location (client-side, server-side or both applications) and possibly the items stored as part of user state.\n\n",
        "2)Attack phase: Experiment.\nStep overview: The adversary now tries to modify the user state contents (possibly indiscriminately if the contents are encrypted or otherwise obfuscated) or cause a state transition and observe the effects of this change on the target.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Having determined how to manipulate the state, the adversary can perform illegitimate actions.\n\n"
      ],
      "@Name": "Manipulating State"
    }
  },
  {
    "instruction": "Given attack pattern: Choosing Message Identifier.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Choosing Message Identifier are: 1)Attack phase: Explore.\nStep overview: Determine Nature of Messages Determine the nature of messages being transported as well as the identifiers to be used as part of the attack\n\n\n2)Attack phase: Experiment.\nStep overview: Authenticate If required, authenticate to the distribution channel\n\n\n3)Attack phase: Experiment.\nStep overview: Identify Known Client Identifiers If any particular client's information is available through a control channel available to all users, the adversary will discover particular identifiers for targeted clients by observing this channel, or requesting client information through this channel.\n\n\n4)Attack phase: Experiment.\nStep overview: Change Message Identifier Adversaries with client access connecting to output channels could change their channel identifier and see someone else's (perhaps more privileged) data.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine Nature of Messages Determine the nature of messages being transported as well as the identifiers to be used as part of the attack\n\n",
        "2)Attack phase: Experiment.\nStep overview: Authenticate If required, authenticate to the distribution channel\n\n",
        "3)Attack phase: Experiment.\nStep overview: Identify Known Client Identifiers If any particular client's information is available through a control channel available to all users, the adversary will discover particular identifiers for targeted clients by observing this channel, or requesting client information through this channel.\n\n",
        "4)Attack phase: Experiment.\nStep overview: Change Message Identifier Adversaries with client access connecting to output channels could change their channel identifier and see someone else's (perhaps more privileged) data.\n\n"
      ],
      "@Name": "Choosing Message Identifier"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Scanning for Vulnerable Software",
    "context": "",
    "output": "Execution Flow:\nName:Application Fingerprinting\nDescription: An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Application Fingerprinting\nDescription: An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Scanning for Vulnerable Software"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Use of Known Kerberos Credentials",
    "context": "",
    "output": "Here are the steps to implement Use of Known Kerberos Credentials:\n1)Attack phase: Explore.\nStep overview: Acquire known Kerberos credentials The adversary must obtain known Kerberos credentials in order to access the target system, application, or service within the domain.\nPossible techniques to use: An adversary purchases breached Kerberos service account username/password combinations or leaked hashed passwords from the dark web., An adversary guesses the credentials to a weak Kerberos service account., An adversary conducts a sniffing attack to steal Kerberos tickets as they are transmitted., An adversary conducts a Kerberoasting attack.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Attempt Kerberos authentication Try each Kerberos credential against various resources within the domain until the target grants access.\nPossible techniques to use: Manually or automatically enter each Kerberos service account credential through the target's interface., Attempt a Pass the Ticket attack.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Impersonate An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain\n\n\n- 4)Attack phase: Exploit.\nStep overview: Spoofing Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.\n\n\n- 5)Attack phase: Exploit.\nStep overview: Data Exfiltration The adversary can obtain sensitive data contained within domain systems or applications.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Acquire known Kerberos credentials The adversary must obtain known Kerberos credentials in order to access the target system, application, or service within the domain.\nPossible techniques to use: An adversary purchases breached Kerberos service account username/password combinations or leaked hashed passwords from the dark web., An adversary guesses the credentials to a weak Kerberos service account., An adversary conducts a sniffing attack to steal Kerberos tickets as they are transmitted., An adversary conducts a Kerberoasting attack.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attempt Kerberos authentication Try each Kerberos credential against various resources within the domain until the target grants access.\nPossible techniques to use: Manually or automatically enter each Kerberos service account credential through the target's interface., Attempt a Pass the Ticket attack.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Impersonate An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain\n\n",
        "4)Attack phase: Exploit.\nStep overview: Spoofing Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.\n\n",
        "5)Attack phase: Exploit.\nStep overview: Data Exfiltration The adversary can obtain sensitive data contained within domain systems or applications.\n\n"
      ],
      "@Name": "Use of Known Kerberos Credentials"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Owner Footprinting",
    "context": "",
    "output": "Execution Flow:\nName:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Owner Footprinting"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Double Encoding",
    "context": "",
    "output": "Execution Flow:\nName:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Double Encoding"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Password Spraying",
    "context": "",
    "output": "The execution flow for Password Spraying is the following: 1)Attack phase: Explore.\nStep overview: Determine target's password policy Determine the password policies of the target system/application.\nPossible techniques to use: Determine minimum and maximum allowed password lengths., Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary)., Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).\n\n\n- 2)Attack phase: Explore.\nStep overview: Select passwords Pick the passwords to be used in the attack (e.g. commonly used passwords, passwords tailored to individual users, etc.)\nPossible techniques to use: Select passwords based on common use or a particular user's additional details., Select passwords based on the target's password complexity policies.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Brute force password Given the finite space of possible passwords dictated by information determined in the previous steps, try each password for all known user accounts until the target grants access.\nPossible techniques to use: Manually or automatically enter the first password for each known user account through the target's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so., Iterate through the remaining passwords for each known user account.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine target's password policy Determine the password policies of the target system/application.\nPossible techniques to use: Determine minimum and maximum allowed password lengths., Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary)., Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).\n\n",
        "2)Attack phase: Explore.\nStep overview: Select passwords Pick the passwords to be used in the attack (e.g. commonly used passwords, passwords tailored to individual users, etc.)\nPossible techniques to use: Select passwords based on common use or a particular user's additional details., Select passwords based on the target's password complexity policies.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Brute force password Given the finite space of possible passwords dictated by information determined in the previous steps, try each password for all known user accounts until the target grants access.\nPossible techniques to use: Manually or automatically enter the first password for each known user account through the target's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so., Iterate through the remaining passwords for each known user account.\n\n"
      ],
      "@Name": "Password Spraying"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Phishing",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Obtain domain name and certificate to spoof legitimate site This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.\nPossible techniques to use: Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L), Optionally obtain a legitimate SSL certificate for the new domain name.\n\n\n- 2)Attack phase: Explore.\nStep overview: Explore legitimate website and create duplicate An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.\nPossible techniques to use: Use spidering software to get copy of web pages on legitimate site., Manually save copies of required web pages from legitimate site., Create new web pages that have the legitimate site's look and feel, but contain completely new content.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Convince user to enter sensitive information on attacker's site. An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.\nPossible techniques to use: Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link., Place phishing link in post to online forum.\n\n\n- 4)Attack phase: Exploit.\nStep overview: Use stolen credentials to log into legitimate site Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.\nPossible techniques to use: Log in to the legitimate site using another user's supplied credentials\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Obtain domain name and certificate to spoof legitimate site This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.\nPossible techniques to use: Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L), Optionally obtain a legitimate SSL certificate for the new domain name.\n\n",
        "2)Attack phase: Explore.\nStep overview: Explore legitimate website and create duplicate An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.\nPossible techniques to use: Use spidering software to get copy of web pages on legitimate site., Manually save copies of required web pages from legitimate site., Create new web pages that have the legitimate site's look and feel, but contain completely new content.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Convince user to enter sensitive information on attacker's site. An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.\nPossible techniques to use: Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link., Place phishing link in post to online forum.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Use stolen credentials to log into legitimate site Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.\nPossible techniques to use: Log in to the legitimate site using another user's supplied credentials\n\n"
      ],
      "@Name": "Phishing"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Collect Data from Clipboard",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Find an application that allows copying sensititve data to clipboad An adversary first needs to find an application that allows copying and pasting of sensitive information. This could be an application that prints out temporary passwords to the screen, private email addresses, or any other sensitive information or data\n\n\n* 2)Attack phase: Experiment.\nStep overview: Target users of the application An adversary will target users of the application in order to obtain the information in their clipboard on a periodic basic\nPossible techniques to use: Install malware on a user's system designed to log clipboard contents periodically, Get the user to click on a malicious link that will bring them to an application to log the contents of the clipboard\n\n\n* 3)Attack phase: Exploit.\nStep overview: Follow-up attack Use any sensitive information found to carry out a follow-up attack\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find an application that allows copying sensititve data to clipboad An adversary first needs to find an application that allows copying and pasting of sensitive information. This could be an application that prints out temporary passwords to the screen, private email addresses, or any other sensitive information or data\n\n",
        "2)Attack phase: Experiment.\nStep overview: Target users of the application An adversary will target users of the application in order to obtain the information in their clipboard on a periodic basic\nPossible techniques to use: Install malware on a user's system designed to log clipboard contents periodically, Get the user to click on a malicious link that will bring them to an application to log the contents of the clipboard\n\n",
        "3)Attack phase: Exploit.\nStep overview: Follow-up attack Use any sensitive information found to carry out a follow-up attack\n\n"
      ],
      "@Name": "Collect Data from Clipboard"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Manipulating User-Controlled Variables",
    "context": "",
    "output": "Execution Flow:\nName:Exploiting Trust in Client\nDescription: An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Exploiting Trust in Client\nDescription: An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Manipulating User-Controlled Variables"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Brute Force",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Determine secret testing procedure Determine how a potential guess of the secret may be tested. This may be accomplished by comparing some manipulation of the secret to a known value, use of the secret to manipulate some known set of data and determining if the result displays specific characteristics (for example, turning cryptotext into plaintext), or by submitting the secret to some external authority and having the external authority respond as to whether the value was the correct secret. Ideally, the attacker will want to determine the correctness of their guess independently since involvement of an external authority is usually slower and can provide an indication to the defender that a brute-force attack is being attempted.\nPossible techniques to use: Determine if there is a way to parallelize the attack. Most brute force attacks can take advantage of parallel techniques by dividing the search space among available resources, thus dividing the average time to success by the number of resources available. If there is a single choke point, such as a need to check answers with an external authority, the attackers' position is significantly degraded.\n\n\n2)Attack phase: Explore.\nStep overview: Reduce search space Find ways to reduce the secret space. The smaller the attacker can make the space they need to search for the secret value, the greater their chances for success. There are a great many ways in which the search space may be reduced.\nPossible techniques to use: If possible, determine how the secret was selected. If the secret was determined algorithmically (such as by a random number generator) the algorithm may have patterns or dependencies that reduce the size of the secret space. If the secret was created by a human, behavioral factors may, if not completely reduce the space, make some types of secrets more likely than others. (For example, humans may use the same secrets in multiple places or use secrets that look or sound familiar for ease of recall.), If the secret was chosen algorithmically, cryptanalysis can be applied to the algorithm to discover patterns in this algorithm. (This is true even if the secret is not used in cryptography.) Periodicity, the need for seed values, or weaknesses in the generator all can result in a significantly smaller secret space., If the secret was chosen by a person, social engineering and simple espionage can indicate patterns in their secret selection. If old secrets can be learned (and a target may feel they have little need to protect a secret that has been replaced) hints as to their selection preferences can be gleaned. These can include character substitutions a target employs, patterns in sources (dates, famous phrases, music lyrics, family members, etc.). Once these patterns have been determined, the initial efforts of a brute-force attack can focus on these areas., Some algorithmic techniques for secret selection may leave indicators that can be tested for relatively easily and which could then be used to eliminate large areas of the search space for consideration. For example, it may be possible to determine that a secret does or does not start with a given character after a relatively small number of tests. Alternatively, it might be possible to discover the length of the secret relatively easily. These discoveries would significantly reduce the search space, thus increasing speed with which the attacker discovers the secret.\n\n\n3)Attack phase: Explore.\nStep overview: Expand victory conditions It is sometimes possible to expand victory conditions. For example, the attacker might not need to know the exact secret but simply needs a value that produces the same result using a one-way function. While doing this does not reduce the size of the search space, the presence of multiple victory conditions does reduce the likely amount of time that the attacker will need to explore the space before finding a workable value.\n\n\n4)Attack phase: Exploit.\nStep overview: Gather information so attack can be performed independently. If possible, gather the necessary information so a successful search can be determined without consultation of an external authority. This can be accomplished by capturing cryptotext (if the goal is decoding the text) or the encrypted password dictionary (if the goal is learning passwords).\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine secret testing procedure Determine how a potential guess of the secret may be tested. This may be accomplished by comparing some manipulation of the secret to a known value, use of the secret to manipulate some known set of data and determining if the result displays specific characteristics (for example, turning cryptotext into plaintext), or by submitting the secret to some external authority and having the external authority respond as to whether the value was the correct secret. Ideally, the attacker will want to determine the correctness of their guess independently since involvement of an external authority is usually slower and can provide an indication to the defender that a brute-force attack is being attempted.\nPossible techniques to use: Determine if there is a way to parallelize the attack. Most brute force attacks can take advantage of parallel techniques by dividing the search space among available resources, thus dividing the average time to success by the number of resources available. If there is a single choke point, such as a need to check answers with an external authority, the attackers' position is significantly degraded.\n\n",
        "2)Attack phase: Explore.\nStep overview: Reduce search space Find ways to reduce the secret space. The smaller the attacker can make the space they need to search for the secret value, the greater their chances for success. There are a great many ways in which the search space may be reduced.\nPossible techniques to use: If possible, determine how the secret was selected. If the secret was determined algorithmically (such as by a random number generator) the algorithm may have patterns or dependencies that reduce the size of the secret space. If the secret was created by a human, behavioral factors may, if not completely reduce the space, make some types of secrets more likely than others. (For example, humans may use the same secrets in multiple places or use secrets that look or sound familiar for ease of recall.), If the secret was chosen algorithmically, cryptanalysis can be applied to the algorithm to discover patterns in this algorithm. (This is true even if the secret is not used in cryptography.) Periodicity, the need for seed values, or weaknesses in the generator all can result in a significantly smaller secret space., If the secret was chosen by a person, social engineering and simple espionage can indicate patterns in their secret selection. If old secrets can be learned (and a target may feel they have little need to protect a secret that has been replaced) hints as to their selection preferences can be gleaned. These can include character substitutions a target employs, patterns in sources (dates, famous phrases, music lyrics, family members, etc.). Once these patterns have been determined, the initial efforts of a brute-force attack can focus on these areas., Some algorithmic techniques for secret selection may leave indicators that can be tested for relatively easily and which could then be used to eliminate large areas of the search space for consideration. For example, it may be possible to determine that a secret does or does not start with a given character after a relatively small number of tests. Alternatively, it might be possible to discover the length of the secret relatively easily. These discoveries would significantly reduce the search space, thus increasing speed with which the attacker discovers the secret.\n\n",
        "3)Attack phase: Explore.\nStep overview: Expand victory conditions It is sometimes possible to expand victory conditions. For example, the attacker might not need to know the exact secret but simply needs a value that produces the same result using a one-way function. While doing this does not reduce the size of the search space, the presence of multiple victory conditions does reduce the likely amount of time that the attacker will need to explore the space before finding a workable value.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Gather information so attack can be performed independently. If possible, gather the necessary information so a successful search can be determined without consultation of an external authority. This can be accomplished by capturing cryptotext (if the goal is decoding the text) or the encrypted password dictionary (if the goal is learning passwords).\n\n"
      ],
      "@Name": "Brute Force"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Credential Stuffing",
    "context": "",
    "output": "Execution Flow:\nName:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n\n- Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\n- Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Credential Stuffing"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - TCP Null Scan",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Experiment.\nStep overview: An adversary sends TCP packets with no flags set and that are not associated with an existing connection to target ports.\n\n\n2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Experiment.\nStep overview: An adversary sends TCP packets with no flags set and that are not associated with an existing connection to target ports.\n\n",
        "2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.\n\n"
      ],
      "@Name": "TCP Null Scan"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - DHCP Spoofing",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Determine Exsisting DHCP lease An adversary observes network traffic and waits for an existing DHCP lease to expire on a target machine in the LAN.\nPossible techniques to use: Adversary observes LAN traffic for DHCP solicitations\n\n\n- 2)Attack phase: Experiment.\nStep overview: Capture the DHCP DISCOVER message The adversary captures \"DISCOVER\" messages and crafts \"OFFER\" responses for the identified target MAC address. The success of this attack centers on the capturing of and responding to these \"DISCOVER\" messages.\nPossible techniques to use: Adversary captures and responds to DHCP \"DISCOVER\" messages tailored to the target subnet.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Compromise Network Access and Collect Network Activity An adversary successfully acts as a rogue DHCP server by redirecting legitimate DHCP requests to itself.\nPossible techniques to use: Adversary sends repeated DHCP \"REQUEST\" messages to quickly lease all the addresses within network's DHCP pool and forcing new DHCP requests to be handled by the rogue DHCP server.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine Exsisting DHCP lease An adversary observes network traffic and waits for an existing DHCP lease to expire on a target machine in the LAN.\nPossible techniques to use: Adversary observes LAN traffic for DHCP solicitations\n\n",
        "2)Attack phase: Experiment.\nStep overview: Capture the DHCP DISCOVER message The adversary captures \"DISCOVER\" messages and crafts \"OFFER\" responses for the identified target MAC address. The success of this attack centers on the capturing of and responding to these \"DISCOVER\" messages.\nPossible techniques to use: Adversary captures and responds to DHCP \"DISCOVER\" messages tailored to the target subnet.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Compromise Network Access and Collect Network Activity An adversary successfully acts as a rogue DHCP server by redirecting legitimate DHCP requests to itself.\nPossible techniques to use: Adversary sends repeated DHCP \"REQUEST\" messages to quickly lease all the addresses within network's DHCP pool and forcing new DHCP requests to be handled by the rogue DHCP server.\n\n"
      ],
      "@Name": "DHCP Spoofing"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Server Side Request Forgery",
    "context": "",
    "output": "The execution flow for Server Side Request Forgery is the following: 1)Attack phase: Explore.\nStep overview: Find target application Find target web application that accepts a user input and retrieves data from the server\n\n\n2)Attack phase: Experiment.\nStep overview: Examine existing application requests Examine HTTP/GET requests to view the URL query format. Adversaries test to see if this type of attack is possible through weaknesses in an application's protection to Server Side Request Forgery\nPossible techniques to use: Attempt manipulating the URL to retrieve an error response/code from the server to determine if URL/request validation is done., Use a list of XSS probe strings to specify as parameters to known URLs. If possible, use probe strings with unique identifiers., Create a GET request with a common server file path such as /etc/passwd as a parameter and examine output.\n\n\n3)Attack phase: Exploit.\nStep overview: Malicious request Adversary crafts a malicious URL request that assumes the privilege level of the server to query internal or external network services and sends the request to the application\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find target application Find target web application that accepts a user input and retrieves data from the server\n\n",
        "2)Attack phase: Experiment.\nStep overview: Examine existing application requests Examine HTTP/GET requests to view the URL query format. Adversaries test to see if this type of attack is possible through weaknesses in an application's protection to Server Side Request Forgery\nPossible techniques to use: Attempt manipulating the URL to retrieve an error response/code from the server to determine if URL/request validation is done., Use a list of XSS probe strings to specify as parameters to known URLs. If possible, use probe strings with unique identifiers., Create a GET request with a common server file path such as /etc/passwd as a parameter and examine output.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Malicious request Adversary crafts a malicious URL request that assumes the privilege level of the server to query internal or external network services and sends the request to the application\n\n"
      ],
      "@Name": "Server Side Request Forgery"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - TCP Connect Scan",
    "context": "",
    "output": "Here are the steps to implement TCP Connect Scan:\n1)Attack phase: Experiment.\nStep overview: An adversary attempts to initialize a TCP connection with with the target port.\n\n\n- 2)Attack phase: Experiment.\nStep overview: An adversary uses the result of their TCP connection to determine the state of the target port. A successful connection indicates a port is open with a service listening on it while a failed connection indicates the port is not open.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Experiment.\nStep overview: An adversary attempts to initialize a TCP connection with with the target port.\n\n",
        "2)Attack phase: Experiment.\nStep overview: An adversary uses the result of their TCP connection to determine the state of the target port. A successful connection indicates a port is open with a service listening on it while a failed connection indicates the port is not open.\n\n"
      ],
      "@Name": "TCP Connect Scan"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Quadratic Data Expansion",
    "context": "",
    "output": "Execution Flow:\nName:Serialized Data with Nested Payloads\nDescription: Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Serialized Data with Nested Payloads\nDescription: Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Quadratic Data Expansion"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Accessing Functionality Not Properly Constrained by ACLs",
    "context": "",
    "output": "The execution flow for Accessing Functionality Not Properly Constrained by ACLs is the following: 1)Attack phase: Explore.\nStep overview: Survey The attacker surveys the target application, possibly as a valid and authenticated user\nPossible techniques to use: Spidering web sites for all available links, Brute force guessing of resource names, Brute force guessing of user names / credentials, Brute force guessing of function names / actions\n\n\n2)Attack phase: Explore.\nStep overview: Identify Functionality At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions\nPossible techniques to use: Use the web inventory of all forms and inputs and apply attack data to those inputs., Use a packet sniffer to capture and record network traffic, Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment.\n\n\n3)Attack phase: Experiment.\nStep overview: Iterate over access capabilities Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.\nPossible techniques to use: Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey The attacker surveys the target application, possibly as a valid and authenticated user\nPossible techniques to use: Spidering web sites for all available links, Brute force guessing of resource names, Brute force guessing of user names / credentials, Brute force guessing of function names / actions\n\n",
        "2)Attack phase: Explore.\nStep overview: Identify Functionality At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions\nPossible techniques to use: Use the web inventory of all forms and inputs and apply attack data to those inputs., Use a packet sniffer to capture and record network traffic, Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Iterate over access capabilities Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.\nPossible techniques to use: Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)\n\n"
      ],
      "@Name": "Accessing Functionality Not Properly Constrained by ACLs"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various Unicode encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Try to use Unicode encoding of content in Scripts in order to bypass validation routines., Try to use Unicode encoding of content in HTML in order to bypass validation routines., Try to use Unicode encoding of content in CSS in order to bypass validation routines.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Using Unicode Encoding to Bypass Validation Logic",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various Unicode encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Try to use Unicode encoding of content in Scripts in order to bypass validation routines., Try to use Unicode encoding of content in HTML in order to bypass validation routines., Try to use Unicode encoding of content in CSS in order to bypass validation routines.\n\n"
      ],
      "@Name": "Using Unicode Encoding to Bypass Validation Logic"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Pretexting via Delivery Person",
    "context": "",
    "output": "Execution Flow:\nName:Pretexting\nDescription: An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Pretexting\nDescription: An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Pretexting via Delivery Person"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Buffer Overflow via Symbolic Links",
    "context": "",
    "output": "Here are the steps to implement Buffer Overflow via Symbolic Links:\n1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application or program that might load in certain files to memory.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.\nPossible techniques to use: The adversary creates or modifies a symbolic link pointing to those files which contain an excessive amount of data. If creating a symbolic link to one of those files causes different behavior in the application, then an injection vector has been identified.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Craft overflow file content The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n\n- 4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the specially crafted file content, the adversary creates a symbolic link from the identified resource to the malicious file, causing a targeted buffer overflow attack.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application or program that might load in certain files to memory.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.\nPossible techniques to use: The adversary creates or modifies a symbolic link pointing to those files which contain an excessive amount of data. If creating a symbolic link to one of those files causes different behavior in the application, then an injection vector has been identified.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft overflow file content The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n",
        "4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the specially crafted file content, the adversary creates a symbolic link from the identified resource to the malicious file, causing a targeted buffer overflow attack.\n\n"
      ],
      "@Name": "Buffer Overflow via Symbolic Links"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Setup the Attack Setup a session: The attacker has to setup a trap session that provides a valid session identifier, or select an arbitrary identifier, depending on the mechanism employed by the application. A trap session is a dummy session established with the application by the attacker and is used solely for the purpose of obtaining valid session identifiers. The attacker may also be required to periodically refresh the trap session in order to obtain valid session identifiers.\nPossible techniques to use: The attacker chooses a predefined identifier that they know., The attacker creates a trap session for the victim.\n\n\n2)Attack phase: Experiment.\nStep overview: Attract a Victim Fixate the session: The attacker now needs to transfer the session identifier from the trap session to the victim by introducing the session identifier into the victim's browser. This is known as fixating the session. The session identifier can be introduced into the victim's browser by leveraging cross site scripting vulnerability, using META tags or setting HTTP response headers in a variety of ways.\nPossible techniques to use: Attackers can put links on web sites (such as forums, blogs, or comment forms)., Attackers can establish rogue proxy servers for network protocols that give out the session ID and then redirect the connection to the legitimate service., Attackers can email attack URLs to potential victims through spam and phishing techniques.\n\n\n3)Attack phase: Exploit.\nStep overview: Abuse the Victim's Session Takeover the fixated session: Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the fixated session identifier.\nPossible techniques to use: The attacker loads the predefined session ID into their browser and browses to protected data or functionality., The attacker loads the predefined session ID into their software and utilizes functionality with the rights of the victim.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Session Fixation",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Setup the Attack Setup a session: The attacker has to setup a trap session that provides a valid session identifier, or select an arbitrary identifier, depending on the mechanism employed by the application. A trap session is a dummy session established with the application by the attacker and is used solely for the purpose of obtaining valid session identifiers. The attacker may also be required to periodically refresh the trap session in order to obtain valid session identifiers.\nPossible techniques to use: The attacker chooses a predefined identifier that they know., The attacker creates a trap session for the victim.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attract a Victim Fixate the session: The attacker now needs to transfer the session identifier from the trap session to the victim by introducing the session identifier into the victim's browser. This is known as fixating the session. The session identifier can be introduced into the victim's browser by leveraging cross site scripting vulnerability, using META tags or setting HTTP response headers in a variety of ways.\nPossible techniques to use: Attackers can put links on web sites (such as forums, blogs, or comment forms)., Attackers can establish rogue proxy servers for network protocols that give out the session ID and then redirect the connection to the legitimate service., Attackers can email attack URLs to potential victims through spam and phishing techniques.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Abuse the Victim's Session Takeover the fixated session: Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the fixated session identifier.\nPossible techniques to use: The attacker loads the predefined session ID into their browser and browses to protected data or functionality., The attacker loads the predefined session ID into their software and utilizes functionality with the rights of the victim.\n\n"
      ],
      "@Name": "Session Fixation"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Adding a Space to a File Extension",
    "context": "",
    "output": "Execution Flow:\nName:Alternative Execution Due to Deceptive Filenames\nDescription: The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Alternative Execution Due to Deceptive Filenames\nDescription: The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Adding a Space to a File Extension"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Identify Target Adversary identifies the target application by determining whether there is sufficient check before writing data to a file and creating symlinks to files in different directories.\nPossible techniques to use: The adversary writes to files in different directories to check whether the application has sufficient checking before file operations., The adversary creates symlinks to files in different directories.\n\n\n2)Attack phase: Experiment.\nStep overview: Try to create symlinks to different files The adversary then uses a variety of techniques, such as monitoring or guessing to create symlinks to the files accessed by the target application in the directories which are identified in the explore phase.\nPossible techniques to use: The adversary monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the adversary can delay the operations by using \"sleep(2)\" and \"usleep()\" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application., The adversary may need a little guesswork on the filenames on which the target application would operate., The adversary tries to create symlinks to the various filenames.\n\n\n3)Attack phase: Exploit.\nStep overview: Target application operates on created symlinks to sensitive files The adversary is able to create symlinks to sensitive files while the target application is operating on the file.\nPossible techniques to use: Create the symlink to the sensitive file such as configuration files, etc.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Symlink Attack",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify Target Adversary identifies the target application by determining whether there is sufficient check before writing data to a file and creating symlinks to files in different directories.\nPossible techniques to use: The adversary writes to files in different directories to check whether the application has sufficient checking before file operations., The adversary creates symlinks to files in different directories.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Try to create symlinks to different files The adversary then uses a variety of techniques, such as monitoring or guessing to create symlinks to the files accessed by the target application in the directories which are identified in the explore phase.\nPossible techniques to use: The adversary monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the adversary can delay the operations by using \"sleep(2)\" and \"usleep()\" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application., The adversary may need a little guesswork on the filenames on which the target application would operate., The adversary tries to create symlinks to the various filenames.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Target application operates on created symlinks to sensitive files The adversary is able to create symlinks to sensitive files while the target application is operating on the file.\nPossible techniques to use: Create the symlink to the sensitive file such as configuration files, etc.\n\n"
      ],
      "@Name": "Symlink Attack"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Explore resolver caches Check DNS caches on local DNS server and client's browser with DNS cache enabled.\nPossible techniques to use: Run tools that check the resolver cache in the memory to see if it contains a target DNS entry., Figure out if the client's browser has DNS cache enabled.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Attempt sending crafted records to DNS cache A request is sent to the authoritative server for target website and wait for the iterative name resolver. An adversary sends bogus request to the DNS local server, and then floods responses that trick a DNS cache to remember malicious responses, which are wrong answers of DNS query.\nPossible techniques to use: Adversary must know the transaction ID by intercepting a DNS query, or sending a bogus query with known transaction ID., If the transaction ID used to identify each query instance is randomized in some new DNS software, the attack must guess the transaction ID. Slow the response of the real DNS server by causing Denial-of-service. This gives adversaries enough time to guess transaction, Adversary crafts DNS response with the same transaction ID as in the request. The adversary sends out DNS responses before the authorized DNS server. This forces DNS local cache stores fake DNS response (wrong answer). The fake DNS responses usually include a malicious website's IP address.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Redirect users to malicious website As the adversary succeeds in exploiting the vulnerability, the victim connects to a malicious site using a good web site's domain name.\nPossible techniques to use: Redirecting Web traffic to a site that looks enough like the original so as to not raise any suspicion., Adversary-in-the-Middle (CAPEC-94) intercepts secure communication between two parties.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "DNS Cache Poisoning",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Explore resolver caches Check DNS caches on local DNS server and client's browser with DNS cache enabled.\nPossible techniques to use: Run tools that check the resolver cache in the memory to see if it contains a target DNS entry., Figure out if the client's browser has DNS cache enabled.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attempt sending crafted records to DNS cache A request is sent to the authoritative server for target website and wait for the iterative name resolver. An adversary sends bogus request to the DNS local server, and then floods responses that trick a DNS cache to remember malicious responses, which are wrong answers of DNS query.\nPossible techniques to use: Adversary must know the transaction ID by intercepting a DNS query, or sending a bogus query with known transaction ID., If the transaction ID used to identify each query instance is randomized in some new DNS software, the attack must guess the transaction ID. Slow the response of the real DNS server by causing Denial-of-service. This gives adversaries enough time to guess transaction, Adversary crafts DNS response with the same transaction ID as in the request. The adversary sends out DNS responses before the authorized DNS server. This forces DNS local cache stores fake DNS response (wrong answer). The fake DNS responses usually include a malicious website's IP address.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Redirect users to malicious website As the adversary succeeds in exploiting the vulnerability, the victim connects to a malicious site using a good web site's domain name.\nPossible techniques to use: Redirecting Web traffic to a site that looks enough like the original so as to not raise any suspicion., Adversary-in-the-Middle (CAPEC-94) intercepts secure communication between two parties.\n\n"
      ],
      "@Name": "DNS Cache Poisoning"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - iFrame Overlay",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Craft an iFrame Overlay page The adversary crafts a malicious iFrame overlay page.\nPossible techniques to use: The adversary leverages iFrame overlay capabilities to craft a malicious iFrame overlay page.\n\n\n2)Attack phase: Exploit.\nStep overview: adversary tricks victim to load the iFrame overlay page adversary utilizes some form of temptation, misdirection or coercion to trick the victim to loading and interacting with the iFrame overlay page in a way that increases the chances that the victim will visit the malicious page.\nPossible techniques to use: Trick the victim to the malicious site by sending the victim an e-mail with a URL to the site., Trick the victim to the malicious site by manipulating URLs on a site trusted by the victim., Trick the victim to the malicious site through a cross-site scripting attack.\n\n\n3)Attack phase: Exploit.\nStep overview: Trick victim into interacting with the iFrame overlay page in the desired manner The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.\nPossible techniques to use: Hide action controls over very commonly used functionality., Hide action controls over very psychologically tempting content.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Craft an iFrame Overlay page The adversary crafts a malicious iFrame overlay page.\nPossible techniques to use: The adversary leverages iFrame overlay capabilities to craft a malicious iFrame overlay page.\n\n",
        "2)Attack phase: Exploit.\nStep overview: adversary tricks victim to load the iFrame overlay page adversary utilizes some form of temptation, misdirection or coercion to trick the victim to loading and interacting with the iFrame overlay page in a way that increases the chances that the victim will visit the malicious page.\nPossible techniques to use: Trick the victim to the malicious site by sending the victim an e-mail with a URL to the site., Trick the victim to the malicious site by manipulating URLs on a site trusted by the victim., Trick the victim to the malicious site through a cross-site scripting attack.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Trick victim into interacting with the iFrame overlay page in the desired manner The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.\nPossible techniques to use: Hide action controls over very commonly used functionality., Hide action controls over very psychologically tempting content.\n\n"
      ],
      "@Name": "iFrame Overlay"
    }
  },
  {
    "instruction": "List the execution flow related to capec: XML Schema Poisoning",
    "context": "",
    "output": "Execution Flow:\nName:Schema Poisoning\nDescription: An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Schema Poisoning\nDescription: An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XML Schema Poisoning"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Survey the target An adversary determines the input data stream that is being processed by a data parser that supports using subsitituion on the victim's side.\nPossible techniques to use: Use an automated tool to record all instances of URLs to process requests., Use a browser to manually explore the website and analyze how the application processes requests.\n\n\n2)Attack phase: Experiment.\nStep overview: Craft malicious payload The adversary crafts a malicious message containing nested exponential expansion that completely uses up available server resources. See the \"Example Instances\" section for details on how to craft this malicious payload.\n\n\n3)Attack phase: Exploit.\nStep overview: Send the message Send the malicious crafted message to the target URL.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Exponential Data Expansion",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the target An adversary determines the input data stream that is being processed by a data parser that supports using subsitituion on the victim's side.\nPossible techniques to use: Use an automated tool to record all instances of URLs to process requests., Use a browser to manually explore the website and analyze how the application processes requests.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Craft malicious payload The adversary crafts a malicious message containing nested exponential expansion that completely uses up available server resources. See the \"Example Instances\" section for details on how to craft this malicious payload.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Send the message Send the malicious crafted message to the target URL.\n\n"
      ],
      "@Name": "Exponential Data Expansion"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: SOAP Array Overflow",
    "context": "",
    "output": "The execution flow for SOAP Array Overflow is the following: 1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application to perform the buffer overflow on. In this attack, adversaries look for applications that utilize SOAP as a communication mechanism.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.\nPossible techniques to use: The adversary creates a SOAP message that incorrectly specifies the size of its array to be smaller than the size of the actual content by a large margin and sends it to the application. If this causes a crash or some unintended behavior, it is likely that this is a valid injection vector.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs, The adversary will choose a SOAP type that allows them to put shellcode into the buffer when the array is read into the application.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the injection vector, the adversary sends the crafted SOAP message to the program, overflowing the buffer.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application to perform the buffer overflow on. In this attack, adversaries look for applications that utilize SOAP as a communication mechanism.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.\nPossible techniques to use: The adversary creates a SOAP message that incorrectly specifies the size of its array to be smaller than the size of the actual content by a large margin and sends it to the application. If this causes a crash or some unintended behavior, it is likely that this is a valid injection vector.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs, The adversary will choose a SOAP type that allows them to put shellcode into the buffer when the array is read into the application.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the injection vector, the adversary sends the crafted SOAP message to the program, overflowing the buffer.\n\n"
      ],
      "@Name": "SOAP Array Overflow"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Path Traversal",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Fingerprinting of the operating system In order to perform a valid path traversal, the attacker needs to know what the underlying OS is so that the proper file seperator is used.\nPossible techniques to use: Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports., TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system., Induce errors to find informative error messages\n\n\n- 2)Attack phase: Explore.\nStep overview: Survey the Application to Identify User-controllable Inputs The attacker surveys the target application to identify all user-controllable file inputs\n\n\n- 3)Attack phase: Experiment.\nStep overview: Vary inputs, looking for malicious results Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application\n\n\n- 4)Attack phase: Exploit.\nStep overview: Manipulate files accessible by the application The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Fingerprinting of the operating system In order to perform a valid path traversal, the attacker needs to know what the underlying OS is so that the proper file seperator is used.\nPossible techniques to use: Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports., TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system., Induce errors to find informative error messages\n\n",
        "2)Attack phase: Explore.\nStep overview: Survey the Application to Identify User-controllable Inputs The attacker surveys the target application to identify all user-controllable file inputs\n\n",
        "3)Attack phase: Experiment.\nStep overview: Vary inputs, looking for malicious results Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application\n\n",
        "4)Attack phase: Exploit.\nStep overview: Manipulate files accessible by the application The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)\n\n"
      ],
      "@Name": "Path Traversal"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Session Sidejacking",
    "context": "",
    "output": "The execution flow for Session Sidejacking is the following: 1)Attack phase: Explore.\nStep overview: Detect Unprotected Session Token Transfer The attacker sniffs on the wireless network to detect unencrypted traffic that contains session tokens.\nPossible techniques to use: The attacker uses a network sniffer tool like ferret or hamster to monitor the wireless traffic at a WiFi hotspot while examining it for evidence of transmittal of session tokens in unencrypted or recognizably encrypted form. An attacker applies their knowledge of the manner by which session tokens are generated and transmitted by various target systems to identify the session tokens.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Capture session token The attacker uses sniffing tools to capture a session token from traffic.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Insert captured session token The attacker attempts to insert a captured session token into communication with the targeted application to confirm viability for exploitation.\n\n\n- 4)Attack phase: Exploit.\nStep overview: Session Token Exploitation The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Detect Unprotected Session Token Transfer The attacker sniffs on the wireless network to detect unencrypted traffic that contains session tokens.\nPossible techniques to use: The attacker uses a network sniffer tool like ferret or hamster to monitor the wireless traffic at a WiFi hotspot while examining it for evidence of transmittal of session tokens in unencrypted or recognizably encrypted form. An attacker applies their knowledge of the manner by which session tokens are generated and transmitted by various target systems to identify the session tokens.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Capture session token The attacker uses sniffing tools to capture a session token from traffic.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Insert captured session token The attacker attempts to insert a captured session token into communication with the targeted application to confirm viability for exploitation.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Session Token Exploitation The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.\n\n"
      ],
      "@Name": "Session Sidejacking"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Determine SSL/TLS Configuration Determine the SSL/TLS configuration of either the server or client being targeted, preferably both. This is not a hard requirement, as the adversary can simply assume commonly exploitable configuration settings and indiscriminately attempt them.\nPossible techniques to use: If the target is a webpage, some of the SSL/TLS configuration can be viewed through the browser's security information, such as the key sizes and cipher being used.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Intercept Communication Provide controlled access to the server by the client, by either providing a link for the client to click on, or by positioning one's self at a place on the network to intercept and control the flow of data between client and server, e.g. AiTM (adversary in the middle - CAPEC-94).\nPossible techniques to use: Create a malicious webpage that looks identical to the target webpage, but routes client traffic to the server such that the adversary can observe the traffic and perform an adverary in the middle attack., If the adversary has access to the network that either the client or server is on, the can attempt to use a packet sniffer to perform an adversary in the middle attack., Install a packet sniffer through malware directly to a client device that can intercept SSL/TLS traffic and perform an adversary in the middle attack.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Capture or Manipulate Sensitive Data Once the adversary has the ability to intercept the secure communication, they exploit the incorrectly configured SSL to view the encrypted communication. The adversary can choose to just record the secure communication or manipulate the data to achieve a desired effect.\nPossible techniques to use: Use known exploits for old SSL and TLS versions., Use known exploits for weak ciphers such as DES and RC4.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Exploiting Incorrectly Configured SSL/TLS",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine SSL/TLS Configuration Determine the SSL/TLS configuration of either the server or client being targeted, preferably both. This is not a hard requirement, as the adversary can simply assume commonly exploitable configuration settings and indiscriminately attempt them.\nPossible techniques to use: If the target is a webpage, some of the SSL/TLS configuration can be viewed through the browser's security information, such as the key sizes and cipher being used.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Intercept Communication Provide controlled access to the server by the client, by either providing a link for the client to click on, or by positioning one's self at a place on the network to intercept and control the flow of data between client and server, e.g. AiTM (adversary in the middle - CAPEC-94).\nPossible techniques to use: Create a malicious webpage that looks identical to the target webpage, but routes client traffic to the server such that the adversary can observe the traffic and perform an adverary in the middle attack., If the adversary has access to the network that either the client or server is on, the can attempt to use a packet sniffer to perform an adversary in the middle attack., Install a packet sniffer through malware directly to a client device that can intercept SSL/TLS traffic and perform an adversary in the middle attack.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Capture or Manipulate Sensitive Data Once the adversary has the ability to intercept the secure communication, they exploit the incorrectly configured SSL to view the encrypted communication. The adversary can choose to just record the secure communication or manipulate the data to achieve a desired effect.\nPossible techniques to use: Use known exploits for old SSL and TLS versions., Use known exploits for weak ciphers such as DES and RC4.\n\n"
      ],
      "@Name": "Exploiting Incorrectly Configured SSL/TLS"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Cryptanalysis",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: An attacker discovers a weakness in the cryptographic algorithm or a weakness in how it was applied to a particular chunk of plaintext.\n\n\n- 2)Attack phase: Exploit.\nStep overview: An attacker leverages the discovered weakness to decrypt, partially decrypt or infer some information about the contents of the encrypted message. All of that is done without knowing the secret key.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: An attacker discovers a weakness in the cryptographic algorithm or a weakness in how it was applied to a particular chunk of plaintext.\n\n",
        "2)Attack phase: Exploit.\nStep overview: An attacker leverages the discovered weakness to decrypt, partially decrypt or infer some information about the contents of the encrypted message. All of that is done without knowing the secret key.\n\n"
      ],
      "@Name": "Cryptanalysis"
    }
  },
  {
    "instruction": "Given attack pattern: Use of Captured Hashes (Pass The Hash).\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Use of Captured Hashes (Pass The Hash) are: 1)Attack phase: Explore.\nStep overview: Acquire known Windows credential hash value pairs The adversary must obtain known Windows credential hash value pairs of accounts that exist on the domain.\nPossible techniques to use: An adversary purchases breached Windows credential hash value pairs from the dark web., An adversary conducts a sniffing attack to steal Windows credential hash value pairs as they are transmitted., An adversary gains access to a Windows domain system/files and exfiltrates Windows credential hash value pairs., An adversary examines outward-facing configuration and properties files to discover hardcoded Windows credential hash value pairs.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Attempt domain authentication Try each Windows credential hash value pair until the target grants access.\nPossible techniques to use: Manually or automatically enter each Windows credential hash value pair through the target's interface.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Impersonate An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain\n\n\n- 4)Attack phase: Exploit.\nStep overview: Spoofing Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.\n\n\n- 5)Attack phase: Exploit.\nStep overview: Data Exfiltration The adversary can obtain sensitive data contained within domain systems or applications.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Acquire known Windows credential hash value pairs The adversary must obtain known Windows credential hash value pairs of accounts that exist on the domain.\nPossible techniques to use: An adversary purchases breached Windows credential hash value pairs from the dark web., An adversary conducts a sniffing attack to steal Windows credential hash value pairs as they are transmitted., An adversary gains access to a Windows domain system/files and exfiltrates Windows credential hash value pairs., An adversary examines outward-facing configuration and properties files to discover hardcoded Windows credential hash value pairs.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attempt domain authentication Try each Windows credential hash value pair until the target grants access.\nPossible techniques to use: Manually or automatically enter each Windows credential hash value pair through the target's interface.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Impersonate An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain\n\n",
        "4)Attack phase: Exploit.\nStep overview: Spoofing Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.\n\n",
        "5)Attack phase: Exploit.\nStep overview: Data Exfiltration The adversary can obtain sensitive data contained within domain systems or applications.\n\n"
      ],
      "@Name": "Use of Captured Hashes (Pass The Hash)"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: HTTP Response Splitting",
    "context": "",
    "output": "The execution flow for HTTP Response Splitting is the following: 1)Attack phase: Explore.\nStep overview: Survey network to identify target The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets\nPossible techniques to use: Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.\n\n\n1)Attack phase: Experiment.\nStep overview: Identify vulnerabilities in targeted HTTP infrastructure and technologies The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering.\n\n\n2)Attack phase: Experiment.\nStep overview: Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data (in the form of HTTP headers with custom strings and embedded web scripts and objects) into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP responses by intermediary and front-end client/victim HTTP agents. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses to intermediary and front-end client/victim HTTP agents, will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.\nPossible techniques to use: Continue the monitoring of HTTP traffic., Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.\n\n\n1)Attack phase: Exploit.\nStep overview: Perform HTTP Response Splitting attack Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.\nPossible techniques to use: Leverage techniques identified in the Experiment Phase.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey network to identify target The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets\nPossible techniques to use: Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.\n\n",
        "1)Attack phase: Experiment.\nStep overview: Identify vulnerabilities in targeted HTTP infrastructure and technologies The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data (in the form of HTTP headers with custom strings and embedded web scripts and objects) into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP responses by intermediary and front-end client/victim HTTP agents. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses to intermediary and front-end client/victim HTTP agents, will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.\nPossible techniques to use: Continue the monitoring of HTTP traffic., Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.\n\n",
        "1)Attack phase: Exploit.\nStep overview: Perform HTTP Response Splitting attack Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.\nPossible techniques to use: Leverage techniques identified in the Experiment Phase.\n\n"
      ],
      "@Name": "HTTP Response Splitting"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Overflow Binary Resource File",
    "context": "",
    "output": "Execution Flow:\nName:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n\n* Name:File Content Injection\nDescription: An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n",
        "Name:File Content Injection\nDescription: An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Overflow Binary Resource File"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Exploitation of Thunderbolt Protection Flaws",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Survey physical victim environment and potential Thunderbolt system targets The adversary monitors the target's physical environment to identify systems with Thunderbolt interfaces, identify potential weaknesses in physical security in addition to periods of nonattendance by the victim over their Thunderbolt interface equipped devices, and when the devices are in locked or sleep state.\n\n\n* 2)Attack phase: Explore.\nStep overview: Evaluate the target system and its Thunderbolt interface The adversary determines the device's operating system, Thunderbolt interface version, and any implemented Thunderbolt protections to plan the attack.\n\n\n* 1)Attack phase: Experiment.\nStep overview: Obtain and/or clone firmware image The adversary physically manipulates Thunderbolt enabled devices to acquire the firmware image from the target and/or adversary Thunderbolt host controller's SPI (Serial Peripheral Interface) flash.\nPossible techniques to use: Disassemble victim and/or adversary device enclosure with basic tools to gain access to Thunderbolt controller SPI flash by connecting adversary SPI programmer., Adversary connects SPI programmer to adversary-controlled Thunderbolt enabled device to obtain/clone victim thunderbolt controller firmware image through tools/scripts., Clone firmware image with SPI programmer and tools/scripts on adversary-controlled device.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Parse and locate relevant firmware data structures and information based upon Thunderbolt controller model, firmware version, and other information The acquired victim and/or adversary firmware image is parsed for specific data and other relevant identifiers required for exploitation, based upon the victim device information and firmware version.\nPossible techniques to use: Utilize pre-crafted tools/scripts to parse and locate desired firmware data and modify it., Locate DROM (Device Read Only Memory) data structure section and calculate/determine appropriate offset to replicate victim device UUID., Locate ACL (Access Control List) data structure and calculate/determine appropriate offsets to identify victim device UUID., Locate data structure containing challenge-response key information between appropriate offsets.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Disable Thunderbolt security and prevent future Thunderbolt security modifications (if necessary) The adversary overrides the target device's Thunderbolt Security Level to \"None\" (SL0) and/or enables block protections upon the SPI flash to prevent the ability for the victim to perform and/or recognize future Thunderbolt security modifications as well as update the Thunderbolt firmware.\nPossible techniques to use: The adversary-controlled Thunderbolt device, connected to SPI programmer and victim device via Thunderbolt ports, is utilized to execute commands within tools/scripts to disable SPI flash protections, modify Thunderbolt Security Level, and enable malicious SPI flash protections.\n\n\n* 4)Attack phase: Experiment.\nStep overview: Modify/replace victim Thunderbolt firmware image The modified victim and/or adversary thunderbolt firmware image is written to attacker SPI flash.\n\n\n* 1)Attack phase: Exploit.\nStep overview: Connect adversary-controlled thunderbolt enabled device to victim device and verify successful execution of malicious actions The adversary needs to determine if their exploitation of selected vulnerabilities had the intended effects upon victim device.\nPossible techniques to use: Observe victim device identify adversary device as the victim device and enables PCIe tunneling., Resume victim device from sleep, connect adversary-controlled device and observe security is disabled and Thunderbolt connectivity is restored with PCIe tunneling being enabled., Observe that in UEFI or Thunderbolt Management Tool/UI that the Security Level does not match adversary modified Security Level of \"None\" (SL0), Observe after installation of Firmware update that within Thunderbolt Management UI the \"NVM version\" is unchanged/same prior to the prompt of successful Firmware update/installation.\n\n\n* 2)Attack phase: Exploit.\nStep overview: Exfiltration of desired data from victim device to adversary device Utilize PCIe tunneling to transfer desired data and information from victim device across Thunderbolt connection.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey physical victim environment and potential Thunderbolt system targets The adversary monitors the target's physical environment to identify systems with Thunderbolt interfaces, identify potential weaknesses in physical security in addition to periods of nonattendance by the victim over their Thunderbolt interface equipped devices, and when the devices are in locked or sleep state.\n\n",
        "2)Attack phase: Explore.\nStep overview: Evaluate the target system and its Thunderbolt interface The adversary determines the device's operating system, Thunderbolt interface version, and any implemented Thunderbolt protections to plan the attack.\n\n",
        "1)Attack phase: Experiment.\nStep overview: Obtain and/or clone firmware image The adversary physically manipulates Thunderbolt enabled devices to acquire the firmware image from the target and/or adversary Thunderbolt host controller's SPI (Serial Peripheral Interface) flash.\nPossible techniques to use: Disassemble victim and/or adversary device enclosure with basic tools to gain access to Thunderbolt controller SPI flash by connecting adversary SPI programmer., Adversary connects SPI programmer to adversary-controlled Thunderbolt enabled device to obtain/clone victim thunderbolt controller firmware image through tools/scripts., Clone firmware image with SPI programmer and tools/scripts on adversary-controlled device.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Parse and locate relevant firmware data structures and information based upon Thunderbolt controller model, firmware version, and other information The acquired victim and/or adversary firmware image is parsed for specific data and other relevant identifiers required for exploitation, based upon the victim device information and firmware version.\nPossible techniques to use: Utilize pre-crafted tools/scripts to parse and locate desired firmware data and modify it., Locate DROM (Device Read Only Memory) data structure section and calculate/determine appropriate offset to replicate victim device UUID., Locate ACL (Access Control List) data structure and calculate/determine appropriate offsets to identify victim device UUID., Locate data structure containing challenge-response key information between appropriate offsets.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Disable Thunderbolt security and prevent future Thunderbolt security modifications (if necessary) The adversary overrides the target device's Thunderbolt Security Level to \"None\" (SL0) and/or enables block protections upon the SPI flash to prevent the ability for the victim to perform and/or recognize future Thunderbolt security modifications as well as update the Thunderbolt firmware.\nPossible techniques to use: The adversary-controlled Thunderbolt device, connected to SPI programmer and victim device via Thunderbolt ports, is utilized to execute commands within tools/scripts to disable SPI flash protections, modify Thunderbolt Security Level, and enable malicious SPI flash protections.\n\n",
        "4)Attack phase: Experiment.\nStep overview: Modify/replace victim Thunderbolt firmware image The modified victim and/or adversary thunderbolt firmware image is written to attacker SPI flash.\n\n",
        "1)Attack phase: Exploit.\nStep overview: Connect adversary-controlled thunderbolt enabled device to victim device and verify successful execution of malicious actions The adversary needs to determine if their exploitation of selected vulnerabilities had the intended effects upon victim device.\nPossible techniques to use: Observe victim device identify adversary device as the victim device and enables PCIe tunneling., Resume victim device from sleep, connect adversary-controlled device and observe security is disabled and Thunderbolt connectivity is restored with PCIe tunneling being enabled., Observe that in UEFI or Thunderbolt Management Tool/UI that the Security Level does not match adversary modified Security Level of \"None\" (SL0), Observe after installation of Firmware update that within Thunderbolt Management UI the \"NVM version\" is unchanged/same prior to the prompt of successful Firmware update/installation.\n\n",
        "2)Attack phase: Exploit.\nStep overview: Exfiltration of desired data from victim device to adversary device Utilize PCIe tunneling to transfer desired data and information from victim device across Thunderbolt connection.\n\n"
      ],
      "@Name": "Exploitation of Thunderbolt Protection Flaws"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Detect Unpublicized Web Pages",
    "context": "",
    "output": "The execution flow for Detect Unpublicized Web Pages is the following: 1)Attack phase: Explore.\nStep overview: Find target web site An adversary finds a target web site that they think may have unpublicized web pages\n\n\n* 2)Attack phase: Explore.\nStep overview: Map the published web site The adversary will map the published web site either by using an automated tool or by manually accessing well-known debugging or logging pages, or otherwise predictable pages within the site tree\nPossible techniques to use: Use Dirbuster to brute force directories and file names to find unpublicized pages, Find a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked\n\n\n* 3)Attack phase: Experiment.\nStep overview: Try to find weaknesses or information The adversary will try to find weaknesses or information on the unpublicized pages that the targeted site did not intend to be public\nPossible techniques to use: Manually analyze files or pages for information that could be useful in a further attack, Use a static analysis tool to find weaknesses in unpublished web pages\n\n\n* 4)Attack phase: Exploit.\nStep overview: Follow-up attack Use any information or weaknesses found to carry out a follow-up attack\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find target web site An adversary finds a target web site that they think may have unpublicized web pages\n\n",
        "2)Attack phase: Explore.\nStep overview: Map the published web site The adversary will map the published web site either by using an automated tool or by manually accessing well-known debugging or logging pages, or otherwise predictable pages within the site tree\nPossible techniques to use: Use Dirbuster to brute force directories and file names to find unpublicized pages, Find a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked\n\n",
        "3)Attack phase: Experiment.\nStep overview: Try to find weaknesses or information The adversary will try to find weaknesses or information on the unpublicized pages that the targeted site did not intend to be public\nPossible techniques to use: Manually analyze files or pages for information that could be useful in a further attack, Use a static analysis tool to find weaknesses in unpublished web pages\n\n",
        "4)Attack phase: Exploit.\nStep overview: Follow-up attack Use any information or weaknesses found to carry out a follow-up attack\n\n"
      ],
      "@Name": "Detect Unpublicized Web Pages"
    }
  },
  {
    "instruction": "Given attack pattern: XSS Using Doubled Characters.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement XSS Using Doubled Characters are: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS using double characters The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads modified to use double characters and doubled special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Use a list of XSS probe strings using double characters to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier., Use a proxy tool to record results of manual input of XSS probes in known URLs., Use a list of doubled HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.\n\n\n3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag., Send information gathered from the malicious script to a remote endpoint.\n\n\n4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS using double characters The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads modified to use double characters and doubled special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.\nPossible techniques to use: Use a list of XSS probe strings using double characters to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier., Use a proxy tool to record results of manual input of XSS probes in known URLs., Use a list of doubled HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag., Send information gathered from the malicious script to a remote endpoint.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n"
      ],
      "@Name": "XSS Using Doubled Characters"
    }
  },
  {
    "instruction": "Given attack pattern: XQuery Injection.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement XQuery Injection are: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Determine user-controllable input susceptible to injection Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to XQL injection, attempt to inject characters that have special meaning in XQL. The goal is to create an XQL query with an invalid syntax.\nPossible techniques to use: Use web browser to inject input through text fields or through HTTP GET parameters., Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc., Use XML files to inject input., Use network-level packet injection tools such as netcat to inject input, Use modified client (modified by reverse engineering) to inject input.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Information Disclosure The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to inappropriate disclosure of information.\nPossible techniques to use: Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload. The payload aims to get information on the structure of the underlying XML database and/or the content in it.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Manipulate the data in the XML database The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to modification of application data.\nPossible techniques to use: Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload.. The payload tries to insert or replace data in the XML database.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Determine user-controllable input susceptible to injection Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to XQL injection, attempt to inject characters that have special meaning in XQL. The goal is to create an XQL query with an invalid syntax.\nPossible techniques to use: Use web browser to inject input through text fields or through HTTP GET parameters., Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc., Use XML files to inject input., Use network-level packet injection tools such as netcat to inject input, Use modified client (modified by reverse engineering) to inject input.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Information Disclosure The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to inappropriate disclosure of information.\nPossible techniques to use: Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload. The payload aims to get information on the structure of the underlying XML database and/or the content in it.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Manipulate the data in the XML database The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to modification of application data.\nPossible techniques to use: Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload.. The payload tries to insert or replace data in the XML database.\n\n"
      ],
      "@Name": "XQuery Injection"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Dictionary-based Password Attack",
    "context": "",
    "output": "The execution flow for Dictionary-based Password Attack is the following: 1)Attack phase: Explore.\nStep overview: Determine application's/system's password policy Determine the password policies of the target application/system.\nPossible techniques to use: Determine minimum and maximum allowed password lengths., Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary)., Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).\n\n\n2)Attack phase: Explore.\nStep overview: Select dictionaries Pick the dictionaries to be used in the attack (e.g. different languages, specific terminology, etc.)\nPossible techniques to use: Select dictionary based on particular users' preferred languages., Select dictionary based on the application/system's supported languages.\n\n\n3)Attack phase: Explore.\nStep overview: Determine username(s) to target Determine username(s) whose passwords to crack.\nPossible techniques to use: Obtain username(s) by sniffing network packets., Obtain username(s) by querying application/system (e.g. if upon a failed login attempt, the system indicates whether the entered username was valid or not), Obtain usernames from filesystem (e.g. list of directories in C:\\Documents and Settings\\ in Windows, and list in /etc/passwd in UNIX-like systems)\n\n\n4)Attack phase: Exploit.\nStep overview: Use dictionary to crack passwords. Use a password cracking tool that will leverage the dictionary to feed passwords to the system and see if they work.\nPossible techniques to use: Try all words in the dictionary, as well as common misspellings of the words as passwords for the chosen username(s)., Try common combinations of words in the dictionary, as well as common misspellings of the combinations as passwords for the chosen username(s).\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine application's/system's password policy Determine the password policies of the target application/system.\nPossible techniques to use: Determine minimum and maximum allowed password lengths., Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary)., Determine account lockout policy (a strict account lockout policy will prevent brute force attacks).\n\n",
        "2)Attack phase: Explore.\nStep overview: Select dictionaries Pick the dictionaries to be used in the attack (e.g. different languages, specific terminology, etc.)\nPossible techniques to use: Select dictionary based on particular users' preferred languages., Select dictionary based on the application/system's supported languages.\n\n",
        "3)Attack phase: Explore.\nStep overview: Determine username(s) to target Determine username(s) whose passwords to crack.\nPossible techniques to use: Obtain username(s) by sniffing network packets., Obtain username(s) by querying application/system (e.g. if upon a failed login attempt, the system indicates whether the entered username was valid or not), Obtain usernames from filesystem (e.g. list of directories in C:\\Documents and Settings\\ in Windows, and list in /etc/passwd in UNIX-like systems)\n\n",
        "4)Attack phase: Exploit.\nStep overview: Use dictionary to crack passwords. Use a password cracking tool that will leverage the dictionary to feed passwords to the system and see if they work.\nPossible techniques to use: Try all words in the dictionary, as well as common misspellings of the words as passwords for the chosen username(s)., Try common combinations of words in the dictionary, as well as common misspellings of the combinations as passwords for the chosen username(s).\n\n"
      ],
      "@Name": "Dictionary-based Password Attack"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Malicious Software Update",
    "context": "",
    "output": "Here are the steps to implement Malicious Software Update:\n1)Attack phase: Explore.\nStep overview: Identify target The adversary must first identify what they want their target to be. Because malicious software updates can be carried out in a variety of ways, the adversary will first not only identify a target program, but also what users they wish to target. This attack can be targeted (a particular user or group of users) or untargeted (many different users).\n\n\n2)Attack phase: Experiment.\nStep overview: Craft a deployment mechanism based on the target The adversary must craft a deployment mechanism to deploy the malicious software update. This mechanism will differ based on if the attack is targeted or untargeted.\nPossible techniques to use: Targeted attack: hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update., Targeted attack: Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update, Untargeted attack: Spam the malicious update to as many users as possible through unsolicited email, instant messages, or social media messages., Untargeted attack: Send phishing emails to as many users as possible and pretend to be a legitimate source suggesting to download an important software update., Untargeted attack: Use trojans/botnets to aid in either of the two untargeted attacks.\n\n\n3)Attack phase: Exploit.\nStep overview: Deploy malicious software update Using the deployment mechanism from the previous step, the adversary gets a user to install the malicious software update.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target The adversary must first identify what they want their target to be. Because malicious software updates can be carried out in a variety of ways, the adversary will first not only identify a target program, but also what users they wish to target. This attack can be targeted (a particular user or group of users) or untargeted (many different users).\n\n",
        "2)Attack phase: Experiment.\nStep overview: Craft a deployment mechanism based on the target The adversary must craft a deployment mechanism to deploy the malicious software update. This mechanism will differ based on if the attack is targeted or untargeted.\nPossible techniques to use: Targeted attack: hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update., Targeted attack: Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update, Untargeted attack: Spam the malicious update to as many users as possible through unsolicited email, instant messages, or social media messages., Untargeted attack: Send phishing emails to as many users as possible and pretend to be a legitimate source suggesting to download an important software update., Untargeted attack: Use trojans/botnets to aid in either of the two untargeted attacks.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Deploy malicious software update Using the deployment mechanism from the previous step, the adversary gets a user to install the malicious software update.\n\n"
      ],
      "@Name": "Malicious Software Update"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Browser in the Middle (BiTM)",
    "context": "",
    "output": "Execution Flow:\nName:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n\nName:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\nName:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: CanPrecede\n\n\nName:Phishing\nDescription: Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.\nNature of relationship: CanFollow\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: CanPrecede\n\n",
        "Name:Phishing\nDescription: Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.\nNature of relationship: CanFollow\n\n"
      ],
      "@Name": "Browser in the Middle (BiTM)"
    }
  },
  {
    "instruction": "Given attack pattern: Exploit Script-Based APIs.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Exploit Script-Based APIs are: 1)Attack phase: Explore.\nStep overview: Identify API Discover an API of interest by exploring application documentation or observing responses to API calls\nPossible techniques to use: Search via internet for known, published APIs that support scripting instructions as arguments\n\n\n- 2)Attack phase: Experiment.\nStep overview: Test simple script Adversaries will attempt to give a smaller script as input to the API, such as simply printing to the console, to see if the attack is viable.\nPossible techniques to use: Create a general script to be taken as input by the API\n\n\n- 3)Attack phase: Exploit.\nStep overview: Give malicious scripting instructions to API Adversaries will now craft custom scripts to do malicious behavior. Depending on the setup of the application this script could be run with user or admin level priveleges.\nPossible techniques to use: Crafting a malicious script to be run on a system based on priveleges and capabilities of the system\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify API Discover an API of interest by exploring application documentation or observing responses to API calls\nPossible techniques to use: Search via internet for known, published APIs that support scripting instructions as arguments\n\n",
        "2)Attack phase: Experiment.\nStep overview: Test simple script Adversaries will attempt to give a smaller script as input to the API, such as simply printing to the console, to see if the attack is viable.\nPossible techniques to use: Create a general script to be taken as input by the API\n\n",
        "3)Attack phase: Exploit.\nStep overview: Give malicious scripting instructions to API Adversaries will now craft custom scripts to do malicious behavior. Depending on the setup of the application this script could be run with user or admin level priveleges.\nPossible techniques to use: Crafting a malicious script to be run on a system based on priveleges and capabilities of the system\n\n"
      ],
      "@Name": "Exploit Script-Based APIs"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Cross Site Request Forgery",
    "context": "",
    "output": "Execution Flow:\nName:Exploitation of Trusted Identifiers\nDescription: An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Exploitation of Trusted Identifiers\nDescription: An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cross Site Request Forgery"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Dumpster Diving",
    "context": "",
    "output": "Execution Flow:\nName:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n\n* Name:Spear Phishing\nDescription: An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.\nNature of relationship: CanPrecede\n\n\n* Name:Retrieve Data from Decommissioned Devices\nDescription: An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization\u2019s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n",
        "Name:Spear Phishing\nDescription: An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.\nNature of relationship: CanPrecede\n\n",
        "Name:Retrieve Data from Decommissioned Devices\nDescription: An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization\u2019s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Dumpster Diving"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Determine Target System In certain cases, the adversary will explore an organization's network to determine a specific target machine to exploit based on the information it contains or privileges the main user may possess.\nPossible techniques to use: If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.\n\n\n2)Attack phase: Experiment.\nStep overview: Develop or Obtain malware and install on a USB device The adversary develops or obtains the malicious software necessary to exploit the target system, which they then install on an external USB device such as a USB flash drive.\nPossible techniques to use: The adversary can develop or obtain malware for to perform a variety of tasks such as sniffing network traffic or monitoring keystrokes.\n\n\n3)Attack phase: Exploit.\nStep overview: Connect or deceive a user into connecting the infected USB device Once the malware has been placed on an external USB device, the adversary connects the device to the target system or deceives a user into connecting the device to the target system such as in a USB Drop Attack.\nPossible techniques to use: The adversary connects the USB device to a specified target system or performs a USB Drop Attack, hoping a user will find and connect the USB device on their own. Once the device is connected, the malware executes giving the adversary access to network traffic, credentials, etc.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "USB Memory Attacks",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine Target System In certain cases, the adversary will explore an organization's network to determine a specific target machine to exploit based on the information it contains or privileges the main user may possess.\nPossible techniques to use: If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Develop or Obtain malware and install on a USB device The adversary develops or obtains the malicious software necessary to exploit the target system, which they then install on an external USB device such as a USB flash drive.\nPossible techniques to use: The adversary can develop or obtain malware for to perform a variety of tasks such as sniffing network traffic or monitoring keystrokes.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Connect or deceive a user into connecting the infected USB device Once the malware has been placed on an external USB device, the adversary connects the device to the target system or deceives a user into connecting the device to the target system such as in a USB Drop Attack.\nPossible techniques to use: The adversary connects the USB device to a specified target system or performs a USB Drop Attack, hoping a user will find and connect the USB device on their own. Once the device is connected, the malware executes giving the adversary access to network traffic, credentials, etc.\n\n"
      ],
      "@Name": "USB Memory Attacks"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Root/Jailbreak Detection Evasion via Hooking",
    "context": "",
    "output": "The execution flow for Root/Jailbreak Detection Evasion via Hooking is the following: 1)Attack phase: Explore.\nStep overview: Identify application with attack potential The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).\nPossible techniques to use: Search application stores for mobile applications worth exploiting\n\n\n- 2)Attack phase: Experiment.\nStep overview: Develop code to be hooked into chosen target application The adversary develops code or leverages existing code that will be hooked into the target application in order to evade Root/Jailbreak detection methods.\nPossible techniques to use: Develop code or leverage existing code to bypass Root/Jailbreak detection methods., Test the code to see if it works., Iteratively develop the code until Root/Jailbreak detection methods are evaded.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Execute code hooking to evade Root/Jailbreak detection methods Once hooking code has been developed or obtained, execute the code against the target application to evade Root/Jailbreak detection methods.\nPossible techniques to use: Hook code into the target application.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify application with attack potential The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).\nPossible techniques to use: Search application stores for mobile applications worth exploiting\n\n",
        "2)Attack phase: Experiment.\nStep overview: Develop code to be hooked into chosen target application The adversary develops code or leverages existing code that will be hooked into the target application in order to evade Root/Jailbreak detection methods.\nPossible techniques to use: Develop code or leverage existing code to bypass Root/Jailbreak detection methods., Test the code to see if it works., Iteratively develop the code until Root/Jailbreak detection methods are evaded.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Execute code hooking to evade Root/Jailbreak detection methods Once hooking code has been developed or obtained, execute the code against the target application to evade Root/Jailbreak detection methods.\nPossible techniques to use: Hook code into the target application.\n\n"
      ],
      "@Name": "Root/Jailbreak Detection Evasion via Hooking"
    }
  },
  {
    "instruction": "Given attack pattern: AJAX Footprinting.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement AJAX Footprinting are: 1)Attack phase: Explore.\nStep overview: Send request to target webpage and analyze HTML Using a browser or an automated tool, an adversary sends requests to a webpage and records the received HTML response. Adversaries then analyze the HTML to identify any known underlying JavaScript architectures. This can aid in mappiong publicly known vulnerabilities to the webpage and can also helpo the adversary guess application architecture and the inner workings of a system.\nPossible techniques to use: Record all \"src\" values inside script tags. These JavaScript files are compared to lists of files for known architectures. If there is a large match between the \"src\" values and architecture files, then it can be assumed that particular architecture is being used.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Send request to target webpage and analyze HTML Using a browser or an automated tool, an adversary sends requests to a webpage and records the received HTML response. Adversaries then analyze the HTML to identify any known underlying JavaScript architectures. This can aid in mappiong publicly known vulnerabilities to the webpage and can also helpo the adversary guess application architecture and the inner workings of a system.\nPossible techniques to use: Record all \"src\" values inside script tags. These JavaScript files are compared to lists of files for known architectures. If there is a large match between the \"src\" values and architecture files, then it can be assumed that particular architecture is being used.\n\n"
      ],
      "@Name": "AJAX Footprinting"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Malicious Hardware Component Replacement",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Determine Target Hardware The adversary must first identify a system that they wish to target, and a specific hardware component that they can swap out with a malicious replacement.\nPossible techniques to use: Look for datasheets containing the system schematics that can help identify possible target hardware., Procure a system and inspect it manually, looking for possible hardware component targets. Search for manufacturer IDs on hardware chips or FCC IDs on wireless chips to determine their functionality.\n\n\n2)Attack phase: Explore.\nStep overview: Discover Vulnerability in Supply Chain The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.\nPossible techniques to use: Procure a system and observe the steps it takes in the shipment process., Identify possible warehouses that systems are stored after manufacturing.\n\n\n3)Attack phase: Experiment.\nStep overview: Test a Malicious Component Replacement Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.\nPossible techniques to use: Design a malicious hardware component that will perform the same functionality as the target component, but also contains additional functionality., Obtain already designed malicious components that just need to be placed into the system.\n\n\n3)Attack phase: Exploit.\nStep overview: Substitute Components in the Supply Chain Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary substitutes the malicious component for the targeted component. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine Target Hardware The adversary must first identify a system that they wish to target, and a specific hardware component that they can swap out with a malicious replacement.\nPossible techniques to use: Look for datasheets containing the system schematics that can help identify possible target hardware., Procure a system and inspect it manually, looking for possible hardware component targets. Search for manufacturer IDs on hardware chips or FCC IDs on wireless chips to determine their functionality.\n\n",
        "2)Attack phase: Explore.\nStep overview: Discover Vulnerability in Supply Chain The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.\nPossible techniques to use: Procure a system and observe the steps it takes in the shipment process., Identify possible warehouses that systems are stored after manufacturing.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Test a Malicious Component Replacement Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.\nPossible techniques to use: Design a malicious hardware component that will perform the same functionality as the target component, but also contains additional functionality., Obtain already designed malicious components that just need to be placed into the system.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Substitute Components in the Supply Chain Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary substitutes the malicious component for the targeted component. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.\n\n"
      ],
      "@Name": "Malicious Hardware Component Replacement"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Overread Buffers",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application or program to perform the buffer overread on. Adversaries often look for applications that accept user input and that perform manual memory management.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Find attack vector The adversary identifies an attack vector by looking for areas in the application where they can specify to read more data than is required.\n\n\n* 3)Attack phase: Exploit.\nStep overview: Overread the buffer The adversary provides input to the application that gets it to read past the bounds of a buffer, possibly revealing sensitive information that was not intended to be given to the adversary.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application or program to perform the buffer overread on. Adversaries often look for applications that accept user input and that perform manual memory management.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find attack vector The adversary identifies an attack vector by looking for areas in the application where they can specify to read more data than is required.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Overread the buffer The adversary provides input to the application that gets it to read past the bounds of a buffer, possibly revealing sensitive information that was not intended to be given to the adversary.\n\n"
      ],
      "@Name": "Overread Buffers"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Windows Admin Shares with Stolen Credentials",
    "context": "",
    "output": "The execution flow for Windows Admin Shares with Stolen Credentials is the following: 1)Attack phase: Explore.\nStep overview: Acquire known Windows administrator credentials The adversary must obtain known Windows administrator credentials in order to access the administrative network shares.\nPossible techniques to use: An adversary purchases breached Windows administrator credentials from the dark web., An adversary leverages a key logger or phishing attack to steal administrator credentials as they are provided., An adversary conducts a sniffing attack to steal Windows administrator credentials as they are transmitted., An adversary gains access to a Windows domain system/files and exfiltrates Windows administrator password hashes., An adversary examines outward-facing configuration and properties files to discover hardcoded Windows administrator credentials.\n\n\n2)Attack phase: Experiment.\nStep overview: Attempt domain authentication Try each Windows administrator credential against the hidden network shares until the target grants access.\nPossible techniques to use: Manually or automatically enter each administrator credential through the target's interface.\n\n\n3)Attack phase: Exploit.\nStep overview: Malware Execution An adversary can remotely execute malware within the administrative network shares to infect other systems within the domain.\n\n\n4)Attack phase: Exploit.\nStep overview: Data Exfiltration The adversary can remotely obtain sensitive data contained within the administrative network shares.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Acquire known Windows administrator credentials The adversary must obtain known Windows administrator credentials in order to access the administrative network shares.\nPossible techniques to use: An adversary purchases breached Windows administrator credentials from the dark web., An adversary leverages a key logger or phishing attack to steal administrator credentials as they are provided., An adversary conducts a sniffing attack to steal Windows administrator credentials as they are transmitted., An adversary gains access to a Windows domain system/files and exfiltrates Windows administrator password hashes., An adversary examines outward-facing configuration and properties files to discover hardcoded Windows administrator credentials.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Attempt domain authentication Try each Windows administrator credential against the hidden network shares until the target grants access.\nPossible techniques to use: Manually or automatically enter each administrator credential through the target's interface.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Malware Execution An adversary can remotely execute malware within the administrative network shares to infect other systems within the domain.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Data Exfiltration The adversary can remotely obtain sensitive data contained within the administrative network shares.\n\n"
      ],
      "@Name": "Windows Admin Shares with Stolen Credentials"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Reusing Session IDs (aka Session Replay)",
    "context": "",
    "output": "Execution Flow:\nName:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Reusing Session IDs (aka Session Replay)"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Request Footprinting The attacker examines the website information and source code of the website and uses automated tools to get as much information as possible about the system and organization.\nPossible techniques to use: Open Source Footprinting: Examine the website about the organization and skim through the webpage's HTML source to look for comments., Network Enumeration: Perform various queries (Registrar Query, Organizational Query, Domain Query, Network Query, POC Query) on the many whois databases found on the internet to identify domain names and associated networks., DNS Interrogation: Once basic information is gathered the attack could begin to query DNS., Other Techniques: Use ping sweep, TCP scan, UDP scan, OS Identification various techniques to gain more information about the system and network.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Footprinting",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Request Footprinting The attacker examines the website information and source code of the website and uses automated tools to get as much information as possible about the system and organization.\nPossible techniques to use: Open Source Footprinting: Examine the website about the organization and skim through the webpage's HTML source to look for comments., Network Enumeration: Perform various queries (Registrar Query, Organizational Query, Domain Query, Network Query, POC Query) on the many whois databases found on the internet to identify domain names and associated networks., DNS Interrogation: Once basic information is gathered the attack could begin to query DNS., Other Techniques: Use ping sweep, TCP scan, UDP scan, OS Identification various techniques to gain more information about the system and network.\n\n"
      ],
      "@Name": "Footprinting"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Experiment.\nStep overview: An adversary sends RCP packets to target ports.\n\n\n- 2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine which, if any, RPC service is running on that port. Responses will vary based on which RPC service is running.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "TCP RPC Scan",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Experiment.\nStep overview: An adversary sends RCP packets to target ports.\n\n",
        "2)Attack phase: Experiment.\nStep overview: An adversary uses the response from the target to determine which, if any, RPC service is running on that port. Responses will vary based on which RPC service is running.\n\n"
      ],
      "@Name": "TCP RPC Scan"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Identify application with attack potential The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).\nPossible techniques to use: Search application stores for mobile applications worth exploiting\n\n\n* 2)Attack phase: Experiment.\nStep overview: Debug the target application The adversary inserts the debugger into the program entry point of the mobile application, after the application's signature has been identified, to dump its memory contents.\nPossible techniques to use: Insert the debugger at the mobile application's program entry point, after the application's signature has been identified., Dump the memory region containing the now decrypted code from the address space of the binary.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Remove application signature verification methods Remove signature verification methods from the decrypted code and resign the application with a self-signed certificate.\n\n\n* 4)Attack phase: Exploit.\nStep overview: Execute the application and evade Root/Jailbreak detection methods The application executes with the self-signed certificate, while believing it contains a trusted certificate. This now allows the adversary to evade Root/Jailbreak detection via code hooking or other methods.\nPossible techniques to use: Optional: Hook code into the target application.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Root/Jailbreak Detection Evasion via Debugging",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify application with attack potential The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).\nPossible techniques to use: Search application stores for mobile applications worth exploiting\n\n",
        "2)Attack phase: Experiment.\nStep overview: Debug the target application The adversary inserts the debugger into the program entry point of the mobile application, after the application's signature has been identified, to dump its memory contents.\nPossible techniques to use: Insert the debugger at the mobile application's program entry point, after the application's signature has been identified., Dump the memory region containing the now decrypted code from the address space of the binary.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Remove application signature verification methods Remove signature verification methods from the decrypted code and resign the application with a self-signed certificate.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Execute the application and evade Root/Jailbreak detection methods The application executes with the self-signed certificate, while believing it contains a trusted certificate. This now allows the adversary to evade Root/Jailbreak detection via code hooking or other methods.\nPossible techniques to use: Optional: Hook code into the target application.\n\n"
      ],
      "@Name": "Root/Jailbreak Detection Evasion via Debugging"
    }
  },
  {
    "instruction": "I need the execution flow for attack pattern - Detect Unpublicized Web Services",
    "context": "",
    "output": "Here are the steps to implement Detect Unpublicized Web Services:\n1)Attack phase: Explore.\nStep overview: Find target web site An adversary finds a target web site that they think may have unpublicized web services\n\n\n2)Attack phase: Explore.\nStep overview: Map the published web site The adversary will map the published web site either by using an automated tool or by manually accessing well-known debugging or logging pages, or otherwise predictable pages within the site tree\nPossible techniques to use: Use Dirbuster to brute force directories and file names to find unpublicized web services, Find a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked\n\n\n3)Attack phase: Experiment.\nStep overview: Try to find weaknesses or information The adversary will try to find weaknesses in the unpublicized services that the targeted site did not intend to be public\nPossible techniques to use: Use Nikto to look for web service vulnerabilities\n\n\n4)Attack phase: Exploit.\nStep overview: Follow-up attack Use any information or weaknesses found to carry out a follow-up attack\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find target web site An adversary finds a target web site that they think may have unpublicized web services\n\n",
        "2)Attack phase: Explore.\nStep overview: Map the published web site The adversary will map the published web site either by using an automated tool or by manually accessing well-known debugging or logging pages, or otherwise predictable pages within the site tree\nPossible techniques to use: Use Dirbuster to brute force directories and file names to find unpublicized web services, Find a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked\n\n",
        "3)Attack phase: Experiment.\nStep overview: Try to find weaknesses or information The adversary will try to find weaknesses in the unpublicized services that the targeted site did not intend to be public\nPossible techniques to use: Use Nikto to look for web service vulnerabilities\n\n",
        "4)Attack phase: Exploit.\nStep overview: Follow-up attack Use any information or weaknesses found to carry out a follow-up attack\n\n"
      ],
      "@Name": "Detect Unpublicized Web Services"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Overflow Variables and Tags",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application or program to perform the buffer overflow on. Adversaries look for applications or programs that accept formatted files, such as configuration files, as input.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.\nPossible techniques to use: Knowing the type of file that an application takes as input, the adversary takes a normal input file and modifies a single variable or tag to contain a large amount of data. If there is a crash, this means that a buffer overflow attack is possible. The adversary will keep changing single variables or tags one by one until they see a change in behavior.\n\n\n* 3)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n\n* 4)Attack phase: Exploit.\nStep overview: Overflow the buffer The adversary will upload the crafted file to the application, causing a buffer overflow.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target application The adversary identifies a target application or program to perform the buffer overflow on. Adversaries look for applications or programs that accept formatted files, such as configuration files, as input.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Find injection vector The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.\nPossible techniques to use: Knowing the type of file that an application takes as input, the adversary takes a normal input file and modifies a single variable or tag to contain a large amount of data. If there is a crash, this means that a buffer overflow attack is possible. The adversary will keep changing single variables or tags one by one until they see a change in behavior.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft overflow content The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.\nPossible techniques to use: Create malicious shellcode that will execute when the program execution is returned to it., Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs\n\n",
        "4)Attack phase: Exploit.\nStep overview: Overflow the buffer The adversary will upload the crafted file to the application, causing a buffer overflow.\n\n"
      ],
      "@Name": "Overflow Variables and Tags"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Documentation Alteration to Produce Under-performing Systems",
    "context": "",
    "output": "Execution Flow:\nName:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Documentation Alteration to Produce Under-performing Systems"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Identify software with frequent updates The adversary must first identify a target software that has updates at least with some frequency, enough that there is am update infrastructure.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Gain access to udpate infrastructure The adversary must then gain access to the organization's software update infrastructure. This can either be done by gaining remote access from outside the organization, or by having a malicious actor inside the organization gain access. It is often easier if someone within the organization gains access.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Alter the software update Through access to the software update infrastructure, an adversary will alter the software update by injecting malware into the content of an outgoing update.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Alteration of a Software Update",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify software with frequent updates The adversary must first identify a target software that has updates at least with some frequency, enough that there is am update infrastructure.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Gain access to udpate infrastructure The adversary must then gain access to the organization's software update infrastructure. This can either be done by gaining remote access from outside the organization, or by having a malicious actor inside the organization gain access. It is often easier if someone within the organization gains access.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Alter the software update Through access to the software update infrastructure, an adversary will alter the software update by injecting malware into the content of an outgoing update.\n\n"
      ],
      "@Name": "Alteration of a Software Update"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Retrieve Embedded Sensitive Data",
    "context": "",
    "output": "Execution Flow:\nName:White Box Reverse Engineering\nDescription: An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:White Box Reverse Engineering\nDescription: An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Retrieve Embedded Sensitive Data"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Application API Navigation Remapping",
    "context": "",
    "output": "Execution Flow:\nName:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Application API Navigation Remapping"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Determine target thread The adversary determines the underlying system thread that is subject to user-control\n\n\n2)Attack phase: Experiment.\nStep overview: Gain handle to thread The adversary then gains a handle to a process thread.\nPossible techniques to use: Use the \"OpenThread\" API call in Windows on a known thread., Cause an exception in a java privileged block public function and catch it, or catch a normal signal. The thread is then hanging and the adversary can attempt to gain a handle to it.\n\n\n3)Attack phase: Experiment.\nStep overview: Alter process memory Once the adversary has a handle to the target thread, they will suspend the thread and alter the memory using native OS calls.\nPossible techniques to use: On Windows, use \"SuspendThread\" followed by \"VirtualAllocEx\", \"WriteProcessMemory\", and \"SetThreadContext\".\n\n\n4)Attack phase: Exploit.\nStep overview: Resume thread execution Once the process memory has been altered to execute malicious code, the thread is then resumed.\nPossible techniques to use: On Windows, use \"ResumeThread\".\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Hijacking a Privileged Thread of Execution",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine target thread The adversary determines the underlying system thread that is subject to user-control\n\n",
        "2)Attack phase: Experiment.\nStep overview: Gain handle to thread The adversary then gains a handle to a process thread.\nPossible techniques to use: Use the \"OpenThread\" API call in Windows on a known thread., Cause an exception in a java privileged block public function and catch it, or catch a normal signal. The thread is then hanging and the adversary can attempt to gain a handle to it.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Alter process memory Once the adversary has a handle to the target thread, they will suspend the thread and alter the memory using native OS calls.\nPossible techniques to use: On Windows, use \"SuspendThread\" followed by \"VirtualAllocEx\", \"WriteProcessMemory\", and \"SetThreadContext\".\n\n",
        "4)Attack phase: Exploit.\nStep overview: Resume thread execution Once the process memory has been altered to execute malicious code, the thread is then resumed.\nPossible techniques to use: On Windows, use \"ResumeThread\".\n\n"
      ],
      "@Name": "Hijacking a Privileged Thread of Execution"
    }
  },
  {
    "instruction": "List the execution flow related to capec: DNS Cache Poisoning",
    "context": "",
    "output": "Execution Flow:\nName:Cache Poisoning\nDescription: An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\nNature of relationship: ChildOf\n\n\n- Name:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Cache Poisoning\nDescription: An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\nNature of relationship: ChildOf\n\n",
        "Name:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "DNS Cache Poisoning"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Cellular Broadcast Message Request",
    "context": "",
    "output": "Execution Flow:\nName:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cellular Broadcast Message Request"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Android Activity Hijack",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Find an android application that uses implicit intents Since this attack only works on android applications that use implicit intents, rather than explicit intents, an adversary must first identify an app that uses implicit intents to launch an Android-based trusted activity, and what that activity is.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Create a malicious app The adversary must create a malicious android app meant to intercept implicit intents to launch an Adroid-based trusted activity. This malicious app will mimic the trusted activiy's user interface to get the user to enter sensitive data.\nPossible techniques to use: Specify the type of intent wished to be intercepted in the malicious app's manifest file using an intent filter\n\n\n- 3)Attack phase: Experiment.\nStep overview: Get user to download malicious app The adversary must get a user using the targeted app to download the malicious app by any means necessary\n\n\n- 4)Attack phase: Exploit.\nStep overview: Gather sensitive data through malicious app Once the target application sends an implicit intent to launch a trusted activity, the malicious app will be launched instead that looks identical to the interface of that activity. When the user enters sensitive information it will be captured by the malicious app.\nPossible techniques to use: Gather login information from a user using a malicious app\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find an android application that uses implicit intents Since this attack only works on android applications that use implicit intents, rather than explicit intents, an adversary must first identify an app that uses implicit intents to launch an Android-based trusted activity, and what that activity is.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Create a malicious app The adversary must create a malicious android app meant to intercept implicit intents to launch an Adroid-based trusted activity. This malicious app will mimic the trusted activiy's user interface to get the user to enter sensitive data.\nPossible techniques to use: Specify the type of intent wished to be intercepted in the malicious app's manifest file using an intent filter\n\n",
        "3)Attack phase: Experiment.\nStep overview: Get user to download malicious app The adversary must get a user using the targeted app to download the malicious app by any means necessary\n\n",
        "4)Attack phase: Exploit.\nStep overview: Gather sensitive data through malicious app Once the target application sends an implicit intent to launch a trusted activity, the malicious app will be launched instead that looks identical to the interface of that activity. When the user enters sensitive information it will be captured by the malicious app.\nPossible techniques to use: Gather login information from a user using a malicious app\n\n"
      ],
      "@Name": "Android Activity Hijack"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: System Locale Information Discovery The adversary examines system information from various sources such as registry and native API functions and correlates the gathered information to infer the geographical location of the target system\nPossible techniques to use: Registry Query: Query the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ContentIndex\\Language\\Language_Dialect on Windows to obtain system language, Computer\\HKEY_CURRENT_USER\\Keyboard Layout\\Preload to obtain the hexadecimal language IDs of the current user's preloaded keyboard layouts, and Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation to obtain the system timezone configuration, Native API Requests: Parse the outputs of Windows API functions GetTimeZoneInformation, GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID to obtain information about languages, keyboard layouts, and timezones installed on the system or on macOS or Linux systems, query locale to obtain the $LANG environment variable and view keyboard layout information or use timeanddatectl status to show the system clock settings., Read Configuration Files: For macOS and Linux-based systems, view the /etc/vconsole.conf file to get information about the keyboard mapping and console font.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "System Location Discovery",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: System Locale Information Discovery The adversary examines system information from various sources such as registry and native API functions and correlates the gathered information to infer the geographical location of the target system\nPossible techniques to use: Registry Query: Query the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ContentIndex\\Language\\Language_Dialect on Windows to obtain system language, Computer\\HKEY_CURRENT_USER\\Keyboard Layout\\Preload to obtain the hexadecimal language IDs of the current user's preloaded keyboard layouts, and Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation to obtain the system timezone configuration, Native API Requests: Parse the outputs of Windows API functions GetTimeZoneInformation, GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID to obtain information about languages, keyboard layouts, and timezones installed on the system or on macOS or Linux systems, query locale to obtain the $LANG environment variable and view keyboard layout information or use timeanddatectl status to show the system clock settings., Read Configuration Files: For macOS and Linux-based systems, view the /etc/vconsole.conf file to get information about the keyboard mapping and console font.\n\n"
      ],
      "@Name": "System Location Discovery"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Clickjacking",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Experiment.\nStep overview: Craft a clickjacking page The adversary utilizes web page layering techniques to try to craft a malicious clickjacking page\nPossible techniques to use: The adversary leveraged iframe overlay capabilities to craft a malicious clickjacking page, The adversary leveraged Flash file overlay capabilities to craft a malicious clickjacking page, The adversary leveraged Silverlight overlay capabilities to craft a malicious clickjacking page, The adversary leveraged cross-frame scripting to craft a malicious clickjacking page\n\n\n2)Attack phase: Exploit.\nStep overview: Adversary lures victim to clickjacking page Adversary utilizes some form of temptation, misdirection or coercion to lure the victim to loading and interacting with the clickjacking page in a way that increases the chances that the victim will click in the right areas.\nPossible techniques to use: Lure the victim to the malicious site by sending the victim an e-mail with a URL to the site., Lure the victim to the malicious site by manipulating URLs on a site trusted by the victim., Lure the victim to the malicious site through a cross-site scripting attack.\n\n\n3)Attack phase: Exploit.\nStep overview: Trick victim into interacting with the clickjacking page in the desired manner The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.\nPossible techniques to use: Hide action controls over very commonly used functionality., Hide action controls over very psychologically tempting content.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Experiment.\nStep overview: Craft a clickjacking page The adversary utilizes web page layering techniques to try to craft a malicious clickjacking page\nPossible techniques to use: The adversary leveraged iframe overlay capabilities to craft a malicious clickjacking page, The adversary leveraged Flash file overlay capabilities to craft a malicious clickjacking page, The adversary leveraged Silverlight overlay capabilities to craft a malicious clickjacking page, The adversary leveraged cross-frame scripting to craft a malicious clickjacking page\n\n",
        "2)Attack phase: Exploit.\nStep overview: Adversary lures victim to clickjacking page Adversary utilizes some form of temptation, misdirection or coercion to lure the victim to loading and interacting with the clickjacking page in a way that increases the chances that the victim will click in the right areas.\nPossible techniques to use: Lure the victim to the malicious site by sending the victim an e-mail with a URL to the site., Lure the victim to the malicious site by manipulating URLs on a site trusted by the victim., Lure the victim to the malicious site through a cross-site scripting attack.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Trick victim into interacting with the clickjacking page in the desired manner The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.\nPossible techniques to use: Hide action controls over very commonly used functionality., Hide action controls over very psychologically tempting content.\n\n"
      ],
      "@Name": "Clickjacking"
    }
  },
  {
    "instruction": "Given attack pattern: XML Schema Poisoning.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement XML Schema Poisoning are: 1)Attack phase: Explore.\nStep overview: Determine if XML schema is local or remote Because this attack differs slightly if the target uses remote XML schemas versus local schemas, the adversary first needs to determine which of the two are used.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Gain access to XML schema The adversary gains access to the XML schema so that they can modify the contents.\nPossible techniques to use: For a local scenario, the adversary needs access to the machine that the schema is located on and needs to gain permissions to alter the contents of the file., For a remote scenario, the adversary needs to be able to sniff HTTP traffic that contains an XML schema.\n\n\n- 3)Attack phase: Exploit.\nStep overview: Poison XML schema Once the adversary gains access to the XML schema, they will alter it to achieve a desired effect. Locally, they can simply modify the file. For remote schemas, the adversary will alter the schema in transit by performing an adversary in the middle attack.\nPossible techniques to use: Cause a denial of service by modifying the schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the adversary removes this attribute from the schema then documents created using the new grammar may lack this field, which may cause the processing application to enter an unexpected state or record incomplete data., Manipulation of the data types described in the schema may affect the results of calculations. For example, a float field could be changed to an int field., Change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine if XML schema is local or remote Because this attack differs slightly if the target uses remote XML schemas versus local schemas, the adversary first needs to determine which of the two are used.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Gain access to XML schema The adversary gains access to the XML schema so that they can modify the contents.\nPossible techniques to use: For a local scenario, the adversary needs access to the machine that the schema is located on and needs to gain permissions to alter the contents of the file., For a remote scenario, the adversary needs to be able to sniff HTTP traffic that contains an XML schema.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Poison XML schema Once the adversary gains access to the XML schema, they will alter it to achieve a desired effect. Locally, they can simply modify the file. For remote schemas, the adversary will alter the schema in transit by performing an adversary in the middle attack.\nPossible techniques to use: Cause a denial of service by modifying the schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the adversary removes this attribute from the schema then documents created using the new grammar may lack this field, which may cause the processing application to enter an unexpected state or record incomplete data., Manipulation of the data types described in the schema may affect the results of calculations. For example, a float field could be changed to an int field., Change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).\n\n"
      ],
      "@Name": "XML Schema Poisoning"
    }
  },
  {
    "instruction": "Given attack pattern: Serialized Data Parameter Blowup.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Serialized Data Parameter Blowup are: 1)Attack phase: Explore.\nStep overview: Survey the target Using a browser or an automated tool, an attacker records all instances of web services to process requests using serialized data.\nPossible techniques to use: Use an automated tool to record all instances of URLs to process requests from serialized data., Use a browser to manually explore the website and analyze how the application processes requests using serialized data.\n\n\n- 2)Attack phase: Exploit.\nStep overview: Launch a Blowup attack The attacker crafts malicious messages that contain multiple configuration parameters in the same dataset.\nPossible techniques to use: Send the malicious crafted message containing the multiple configuration parameters to the target URL, causing a denial of service.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the target Using a browser or an automated tool, an attacker records all instances of web services to process requests using serialized data.\nPossible techniques to use: Use an automated tool to record all instances of URLs to process requests from serialized data., Use a browser to manually explore the website and analyze how the application processes requests using serialized data.\n\n",
        "2)Attack phase: Exploit.\nStep overview: Launch a Blowup attack The attacker crafts malicious messages that contain multiple configuration parameters in the same dataset.\nPossible techniques to use: Send the malicious crafted message containing the multiple configuration parameters to the target URL, causing a denial of service.\n\n"
      ],
      "@Name": "Serialized Data Parameter Blowup"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Exploit Non-Production Interfaces",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Determine Vulnerable Interface An adversary explores a target system for sample or test interfaces that have not been disabled by a system administrator and which may be exploitable by the adversary.\nPossible techniques to use: If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.\n\n\n- 2)Attack phase: Exploit.\nStep overview: Leverage Test Interface to Execute Attacks Once an adversary has discovered a system with a non-production interface, the interface is leveraged to exploit the system and/or conduct various attacks.\nPossible techniques to use: The adversary can leverage the sample or test interface to conduct several types of attacks such as Adversary-in-the-Middle attacks (CAPEC-94), keylogging, Cross Site Scripting (XSS), hardware manipulation attacks, and more.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Determine Vulnerable Interface An adversary explores a target system for sample or test interfaces that have not been disabled by a system administrator and which may be exploitable by the adversary.\nPossible techniques to use: If needed, the adversary explores an organization's network to determine if any specific systems of interest exist.\n\n",
        "2)Attack phase: Exploit.\nStep overview: Leverage Test Interface to Execute Attacks Once an adversary has discovered a system with a non-production interface, the interface is leveraged to exploit the system and/or conduct various attacks.\nPossible techniques to use: The adversary can leverage the sample or test interface to conduct several types of attacks such as Adversary-in-the-Middle attacks (CAPEC-94), keylogging, Cross Site Scripting (XSS), hardware manipulation attacks, and more.\n\n"
      ],
      "@Name": "Exploit Non-Production Interfaces"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: Buffer Overflow in Local Command-Line Utilities",
    "context": "",
    "output": "The execution flow for Buffer Overflow in Local Command-Line Utilities is the following: 1)Attack phase: Explore.\nStep overview: Identify target system The adversary first finds a target system that they want to gain elevated priveleges on. This could be a system they already have some level of access to or a system that they will gain unauthorized access at a lower privelege using some other means.\n\n\n2)Attack phase: Explore.\nStep overview: Find injection vector The adversary identifies command line utilities exposed by the target host that contain buffer overflow vulnerabilites. The adversary likely knows which utilities have these vulnerabilities and what the effected versions are, so they will also obtain version numbers for these utilities.\n\n\n3)Attack phase: Experiment.\nStep overview: Craft overflow command Once the adversary has found a vulnerable utility, they will use their knownledge of the vulnerabilty to create the command that will exploit the buffer overflow.\n\n\n4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the injection vector, the adversary executes the crafted command, gaining elevated priveleges on the machine.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target system The adversary first finds a target system that they want to gain elevated priveleges on. This could be a system they already have some level of access to or a system that they will gain unauthorized access at a lower privelege using some other means.\n\n",
        "2)Attack phase: Explore.\nStep overview: Find injection vector The adversary identifies command line utilities exposed by the target host that contain buffer overflow vulnerabilites. The adversary likely knows which utilities have these vulnerabilities and what the effected versions are, so they will also obtain version numbers for these utilities.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft overflow command Once the adversary has found a vulnerable utility, they will use their knownledge of the vulnerabilty to create the command that will exploit the buffer overflow.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Overflow the buffer Using the injection vector, the adversary executes the crafted command, gaining elevated priveleges on the machine.\n\n"
      ],
      "@Name": "Buffer Overflow in Local Command-Line Utilities"
    }
  },
  {
    "instruction": "List the execution flow related to capec: Hardware Design Specifications Are Altered",
    "context": "",
    "output": "Execution Flow:\nName:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Hardware Design Specifications Are Altered"
    }
  },
  {
    "instruction": "Given attack pattern: XML Ping of the Death.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement XML Ping of the Death are: 1)Attack phase: Explore.\nStep overview: Survey the target Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.\nPossible techniques to use: Use an automated tool to record all instances of URLs to process XML requests., Use a browser to manually explore the website and analyze how the application processes XML requests.\n\n\n2)Attack phase: Exploit.\nStep overview: Launch a resource depletion attack The attacker delivers a large number of small XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.\nPossible techniques to use: Send a large number of crafted small XML messages to the target URL.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the target Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.\nPossible techniques to use: Use an automated tool to record all instances of URLs to process XML requests., Use a browser to manually explore the website and analyze how the application processes XML requests.\n\n",
        "2)Attack phase: Exploit.\nStep overview: Launch a resource depletion attack The attacker delivers a large number of small XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.\nPossible techniques to use: Send a large number of crafted small XML messages to the target URL.\n\n"
      ],
      "@Name": "XML Ping of the Death"
    }
  },
  {
    "instruction": "Given attack pattern: Flash Injection.\nWhat are its implementation steps",
    "context": "",
    "output": "The steps to implement Flash Injection are: 1)Attack phase: Explore.\nStep overview: Find Injection Entry Points The attacker first takes an inventory of the entry points of the application.\nPossible techniques to use: Spider the website for all available URLs that reference a Flash application., List all uninitialized global variables (such as _root.*, _global.*, _level0.*) in ActionScript, registered global variables in included files, load variables to external movies.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Determine the application's susceptibility to Flash injection Determine the application's susceptibility to Flash injection. For each URL identified in the explore phase, the attacker attempts to use various techniques such as direct load asfunction, controlled evil page/host, Flash HTML injection, and DOM injection to determine whether the application is susceptible to Flash injection.\nPossible techniques to use: Test the page using direct load asfunction, getURL,javascript:gotRoot(\"\")///d.jpg, Test the page using controlled evil page/host, http://example.com/evil.swf, Test the page using Flash HTML injection, \"'><img src='asfunction:getURL,javascript:gotRoot(\"\")//.jpg' >, Test the page using DOM injection, (gotRoot(''))\n\n\n- 3)Attack phase: Exploit.\nStep overview: Inject malicious content into target Inject malicious content into target utilizing vulnerable injection vectors identified in the Experiment phase\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Find Injection Entry Points The attacker first takes an inventory of the entry points of the application.\nPossible techniques to use: Spider the website for all available URLs that reference a Flash application., List all uninitialized global variables (such as _root.*, _global.*, _level0.*) in ActionScript, registered global variables in included files, load variables to external movies.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Determine the application's susceptibility to Flash injection Determine the application's susceptibility to Flash injection. For each URL identified in the explore phase, the attacker attempts to use various techniques such as direct load asfunction, controlled evil page/host, Flash HTML injection, and DOM injection to determine whether the application is susceptible to Flash injection.\nPossible techniques to use: Test the page using direct load asfunction, getURL,javascript:gotRoot(\"\")///d.jpg, Test the page using controlled evil page/host, http://example.com/evil.swf, Test the page using Flash HTML injection, \"'><img src='asfunction:getURL,javascript:gotRoot(\"\")//.jpg' >, Test the page using DOM injection, (gotRoot(''))\n\n",
        "3)Attack phase: Exploit.\nStep overview: Inject malicious content into target Inject malicious content into target utilizing vulnerable injection vectors identified in the Experiment phase\n\n"
      ],
      "@Name": "Flash Injection"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser, an automated tool or by inspecting the application, an attacker records all entry points to the application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n\n* 2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities Try double-encoding for parts of the input in order to try to get past the filters. For instance, by double encoding certain characters in the URL (e.g. dots and slashes) an adversary may try to get access to restricted resources on the web server or force browse to protected pages (thus subverting the authorization service). An adversary can also attempt other injection style attacks using this attack pattern: command injection, SQL injection, etc.\nPossible techniques to use: Try to use double-encoding to bypass validation routines.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Double Encoding",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser, an automated tool or by inspecting the application, an attacker records all entry points to the application.\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL., Use a proxy tool to record all user input entry points visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery., Manually inspect the application to find entry points.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe entry points to locate vulnerabilities Try double-encoding for parts of the input in order to try to get past the filters. For instance, by double encoding certain characters in the URL (e.g. dots and slashes) an adversary may try to get access to restricted resources on the web server or force browse to protected pages (thus subverting the authorization service). An adversary can also attempt other injection style attacks using this attack pattern: command injection, SQL injection, etc.\nPossible techniques to use: Try to use double-encoding to bypass validation routines.\n\n"
      ],
      "@Name": "Double Encoding"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: XSS Using Alternate Syntax",
    "context": "",
    "output": "The execution flow for XSS Using Alternate Syntax is the following: 1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms., Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.\n\n\n- 2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS vulnerability Possibly using an automated tool, an adversary requests variations on the inputs they surveyed before using alternate syntax. These inputs are designed to bypass incomplete filtering (e.g., incomplete HTML encoding etc.) and try many variations of characters injection that would enable the XSS payload. They record all the responses from the server that include unmodified versions of their script.\nPossible techniques to use: Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier. Attempt numerous variations based on form, format, syntax & encoding., Use a proxy tool to record results of manual input of XSS probes in known URLs.\n\n\n- 3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Change a URL parameter to include a malicious script tag created using alternate syntax to bypass filters., Send information gathered from the malicious script to a remote endpoint.\n\n\n- 4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for user-controllable inputs Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.\nPossible techniques to use: Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL., Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms., Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS vulnerability Possibly using an automated tool, an adversary requests variations on the inputs they surveyed before using alternate syntax. These inputs are designed to bypass incomplete filtering (e.g., incomplete HTML encoding etc.) and try many variations of characters injection that would enable the XSS payload. They record all the responses from the server that include unmodified versions of their script.\nPossible techniques to use: Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier. Attempt numerous variations based on form, format, syntax & encoding., Use a proxy tool to record results of manual input of XSS probes in known URLs.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Change a URL parameter to include a malicious script tag created using alternate syntax to bypass filters., Send information gathered from the malicious script to a remote endpoint.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n"
      ],
      "@Name": "XSS Using Alternate Syntax"
    }
  },
  {
    "instruction": "Can you give me the steps for the attack pattern - Spoof Version Control System Commit Metadata",
    "context": "",
    "output": "Sure. Here are the steps to impelement the attack pattern:\n1)Attack phase: Explore.\nStep overview: Identify target The adversary must first identify a target repository for them to spoof. Typically, this will be a popular and widely used repository, as to increase the amount of victims a successful attack will exploit.\n\n\n2)Attack phase: Experiment.\nStep overview: Create malicious repository The adversary must create a malicious repository that imitates the legitimate repository being spoofed. This may include creating a username that closely matches the legitimate repository owner; creating a repository name that closely matches the legitimate repository name; uploading the legitimate source code; and more.\n\n\n3)Attack phase: Experiment.\nStep overview: Spoof commit metadata Once the malicious repository has been created, the adversary must then spoof the commit metadata to make the repository appear to be frequently maintained and originating from trusted sources.\nPossible techniques to use: Git Commit Timestamps: The adversary generates numerous fake commits while setting the \"GIT_AUTHOR_DATE\" and \"GIT_COMMITTER_DATE\" environment variables to a date which is to be spoofed., Git Commit Contributors: The adversary obtains a legitimate and trusted user's email address and then sets this information via the \"git config\" command. The adversary can then commit changes leveraging this username.\n\n\n4)Attack phase: Exploit.\nStep overview: Exploit victims The adversary infiltrates software and/or system environments with the goal of conducting additional attacks.\nPossible techniques to use: Active: The adversary attempts to trick victims into downloading the malicious software by means such as phishing and social engineering., Passive: The adversary waits for victims to download and leverage malicious software.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Identify target The adversary must first identify a target repository for them to spoof. Typically, this will be a popular and widely used repository, as to increase the amount of victims a successful attack will exploit.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Create malicious repository The adversary must create a malicious repository that imitates the legitimate repository being spoofed. This may include creating a username that closely matches the legitimate repository owner; creating a repository name that closely matches the legitimate repository name; uploading the legitimate source code; and more.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Spoof commit metadata Once the malicious repository has been created, the adversary must then spoof the commit metadata to make the repository appear to be frequently maintained and originating from trusted sources.\nPossible techniques to use: Git Commit Timestamps: The adversary generates numerous fake commits while setting the \"GIT_AUTHOR_DATE\" and \"GIT_COMMITTER_DATE\" environment variables to a date which is to be spoofed., Git Commit Contributors: The adversary obtains a legitimate and trusted user's email address and then sets this information via the \"git config\" command. The adversary can then commit changes leveraging this username.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Exploit victims The adversary infiltrates software and/or system environments with the goal of conducting additional attacks.\nPossible techniques to use: Active: The adversary attempts to trick victims into downloading the malicious software by means such as phishing and social engineering., Passive: The adversary waits for victims to download and leverage malicious software.\n\n"
      ],
      "@Name": "Spoof Version Control System Commit Metadata"
    }
  },
  {
    "instruction": "Execution flow: 1)Attack phase: Experiment.\nStep overview: Investigate account lockout behavior of system Investigate the security features present in the system that may trigger an account lockout\nPossible techniques to use: Analyze system documentation to find list of events that could potentially cause account lockout, Obtain user account in system and attempt to lock it out by sending malformed or incorrect data repeatedly, Determine another user's login ID, and attempt to brute force the password (or other credentials) for it a predetermined number of times, or until the system provides an indication that the account is locked out.\n\n\n2)Attack phase: Experiment.\nStep overview: Obtain list of user accounts to lock out Generate a list of valid user accounts to lock out\nPossible techniques to use: Obtain list of authorized users using another attack pattern, such as SQL Injection., Attempt to create accounts if possible; system should indicate if a user ID is already taken., Attempt to brute force user IDs if system reveals whether a given user ID is valid or not upon failed login attempts.\n\n\n3)Attack phase: Exploit.\nStep overview: Lock Out Accounts Perform lockout procedure for all accounts that the attacker wants to lock out.\nPossible techniques to use: For each user ID to be locked out, perform the lockout procedure discovered in the first step.\n\n\n\n What is the attack pattern of the above execution flow?",
    "context": "",
    "output": "Inducing Account Lockout",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Experiment.\nStep overview: Investigate account lockout behavior of system Investigate the security features present in the system that may trigger an account lockout\nPossible techniques to use: Analyze system documentation to find list of events that could potentially cause account lockout, Obtain user account in system and attempt to lock it out by sending malformed or incorrect data repeatedly, Determine another user's login ID, and attempt to brute force the password (or other credentials) for it a predetermined number of times, or until the system provides an indication that the account is locked out.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Obtain list of user accounts to lock out Generate a list of valid user accounts to lock out\nPossible techniques to use: Obtain list of authorized users using another attack pattern, such as SQL Injection., Attempt to create accounts if possible; system should indicate if a user ID is already taken., Attempt to brute force user IDs if system reveals whether a given user ID is valid or not upon failed login attempts.\n\n",
        "3)Attack phase: Exploit.\nStep overview: Lock Out Accounts Perform lockout procedure for all accounts that the attacker wants to lock out.\nPossible techniques to use: For each user ID to be locked out, perform the lockout procedure discovered in the first step.\n\n"
      ],
      "@Name": "Inducing Account Lockout"
    }
  },
  {
    "instruction": "What is the execution flow for CAPEC: XSS Through HTTP Headers",
    "context": "",
    "output": "The execution flow for XSS Through HTTP Headers is the following: 1)Attack phase: Explore.\nStep overview: Survey the application for public links Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the entry points (input) that becomes part of generated HTTP header (not only GET/POST/COOKIE, but also Content-Type, etc.)\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters used in the HTTP headers., Look for HTML meta tags that could be injectable, Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n\n2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS vulnerability.\nPossible techniques to use: Manually inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed., Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed., Use a proxy tool to record results of manual input of XSS probes in known URLs.\n\n\n3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Change a URL parameter which is used in an HTTP header to include a malicious script tag. Because it is in the header it may bypass validation., Send information gathered from the malicious script to a remote endpoint.\n\n\n4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_execution_flow",
    "parsed_raw_data": {
      "Execution_Flow": [
        "1)Attack phase: Explore.\nStep overview: Survey the application for public links Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the entry points (input) that becomes part of generated HTTP header (not only GET/POST/COOKIE, but also Content-Type, etc.)\nPossible techniques to use: Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters used in the HTTP headers., Look for HTML meta tags that could be injectable, Use a proxy tool to record all links visited during a manual traversal of the web application., Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.\n\n",
        "2)Attack phase: Experiment.\nStep overview: Probe identified potential entry points for XSS vulnerability.\nPossible techniques to use: Manually inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed., Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed., Use a proxy tool to record results of manual input of XSS probes in known URLs.\n\n",
        "3)Attack phase: Experiment.\nStep overview: Craft malicious XSS URL Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.\nPossible techniques to use: Change a URL parameter which is used in an HTTP header to include a malicious script tag. Because it is in the header it may bypass validation., Send information gathered from the malicious script to a remote endpoint.\n\n",
        "4)Attack phase: Exploit.\nStep overview: Get victim to click URL In order for the attack to be successful, the victim needs to access the malicious URL.\nPossible techniques to use: Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion., Put the malicious URL on a public forum, where many victims might accidentally click the link.\n\n"
      ],
      "@Name": "XSS Through HTTP Headers"
    }
  }
]