[
  {
    "instruction": "Please help me detect the following: modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence.",
    "context": "",
    "output": "Sure!\nIn order to detect the modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence, you should: Monitor Windows process creation logs for specific command-line patterns that indicate such modifications. Look for usage of the 'sc' command in combination with 'config' and 'binpath=', or 'failure' and 'command=' which can be used to change service configurations or set up custom failure actions - a common technique for establishing persistence by ensuring a payload executes under certain conditions. Additionally, watch for the 'reg add' command modifying 'FailureCommand' or 'ImagePath' registry keys, as this also signifies attempts to alter service behavior or execution paths. Also, be vigilant for commands that involve file extensions typically associated with executable and script files, such as '.exe', '.dll', '.bat', '.cmd', '.ps', and others, as these often indicate the introduction or modification of files to carry malicious payloads. This detection focuses on medium-level threats and, while there might be legitimate uses, any matches should be investigated to confirm whether they are part of a potential attack involving persistence mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence.",
      "answer": "In order to detect the modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence, you should: Monitor Windows process creation logs for specific command-line patterns that indicate such modifications. Look for usage of the 'sc' command in combination with 'config' and 'binpath=', or 'failure' and 'command=' which can be used to change service configurations or set up custom failure actions - a common technique for establishing persistence by ensuring a payload executes under certain conditions. Additionally, watch for the 'reg add' command modifying 'FailureCommand' or 'ImagePath' registry keys, as this also signifies attempts to alter service behavior or execution paths. Also, be vigilant for commands that involve file extensions typically associated with executable and script files, such as '.exe', '.dll', '.bat', '.cmd', '.ps', and others, as these often indicate the introduction or modification of files to carry malicious payloads. This detection focuses on medium-level threats and, while there might be legitimate uses, any matches should be investigated to confirm whether they are part of a potential attack involving persistence mechanisms."
    }
  },
  {
    "instruction": "Please help me detect the following: download of certain file types from hosts in suspicious TLDs",
    "context": "",
    "output": "Sure!\nIn order to detect download of certain file types from hosts in suspicious TLDs, you should focus on monitoring proxy server logs for download activities involving specific file extensions and originating from hosts in certain Top-Level Domains (TLDs) deemed suspicious. The log source of interest is primarily proxy logs, which can provide insights into web requests and the contents being downloaded. The detection process involves identifying web requests for files with particular extensions known to be commonly used in malicious activities or for malware propagation. These extensions include executable files (.exe), scripts (.vbs, .bat, .ps1), compressed archives (.rar, .zip), document files that can contain malicious macros (.doc, .docm, .xls, .xlsm, .pptm), and other types that might be abused for cyber-attacks (.rtf, .hta, .dll, .ws, .wsf, .sct).\n\nAdditionally, the detection focuses on the source of the downloads, specifically looking for hosts within TLDs that have been associated with suspicious activities or are frequently used by attackers. This list includes a wide range of TLDs, such as .country, .stream, .gdn, and many others, which have been identified through various analyses and reports from cybersecurity organizations like Symantec, McAfee, and Spamhaus. This comprehensive list of suspicious TLDs aims to cover a broad spectrum of domains that could be potentially harmful.\n\nThe condition for detection is the occurrence of web requests that match both the specified file extensions and originate from the listed suspicious TLDs. To accurately identify and investigate potential threats, the fields of interest that should be extracted from the logs include the ClientIP address and the full URI (Uniform Resource Identifier) of the requested file. \n\nIt is important to note that while this detection method aims to spotlight potentially malicious activities, it may also yield false positives. Such false positives could stem from legitimate software downloads that coincidentally match the criteria. Thus, a low severity level is suggested for alerts generated by this detection method to encourage further investigation rather than immediate drastic action.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "download of certain file types from hosts in suspicious TLDs",
      "answer": "In order to detect download of certain file types from hosts in suspicious TLDs, you should focus on monitoring proxy server logs for download activities involving specific file extensions and originating from hosts in certain Top-Level Domains (TLDs) deemed suspicious. The log source of interest is primarily proxy logs, which can provide insights into web requests and the contents being downloaded. The detection process involves identifying web requests for files with particular extensions known to be commonly used in malicious activities or for malware propagation. These extensions include executable files (.exe), scripts (.vbs, .bat, .ps1), compressed archives (.rar, .zip), document files that can contain malicious macros (.doc, .docm, .xls, .xlsm, .pptm), and other types that might be abused for cyber-attacks (.rtf, .hta, .dll, .ws, .wsf, .sct).\n\nAdditionally, the detection focuses on the source of the downloads, specifically looking for hosts within TLDs that have been associated with suspicious activities or are frequently used by attackers. This list includes a wide range of TLDs, such as .country, .stream, .gdn, and many others, which have been identified through various analyses and reports from cybersecurity organizations like Symantec, McAfee, and Spamhaus. This comprehensive list of suspicious TLDs aims to cover a broad spectrum of domains that could be potentially harmful.\n\nThe condition for detection is the occurrence of web requests that match both the specified file extensions and originate from the listed suspicious TLDs. To accurately identify and investigate potential threats, the fields of interest that should be extracted from the logs include the ClientIP address and the full URI (Uniform Resource Identifier) of the requested file. \n\nIt is important to note that while this detection method aims to spotlight potentially malicious activities, it may also yield false positives. Such false positives could stem from legitimate software downloads that coincidentally match the criteria. Thus, a low severity level is suggested for alerts generated by this detection method to encourage further investigation rather than immediate drastic action."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may disable security tools to avoid possible detection of their tools and activities by uninstalling Crowdstrike Falcon",
    "context": "",
    "output": "In order to prevent adversaries from disabling security tools to avoid possible detection of their tools and activities by uninstalling Crowdstrike Falcon, you should: monitor Windows process creation logs for instances where the command line contains the specific sequence of '\\WindowsSensor.exe', '/uninstall', and '/quiet'. This detection focuses on spotting the quiet uninstallation command of the Crowdstrike Falcon sensor, which is a common security tool installed on Windows environments. If such behavior is observed, it is considered suspicious since it could indicate an attempt to remove security measures and facilitate malicious activities without detection. It's important to note that while administrators might use similar commands for legitimate purposes like debugging, any occurrence of this activity should be thoroughly investigated due to its high risk level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may disable security tools to avoid possible detection of their tools and activities by uninstalling Crowdstrike Falcon",
      "answer": "In order to prevent adversaries from disabling security tools to avoid possible detection of their tools and activities by uninstalling Crowdstrike Falcon, you should: monitor Windows process creation logs for instances where the command line contains the specific sequence of '\\WindowsSensor.exe', '/uninstall', and '/quiet'. This detection focuses on spotting the quiet uninstallation command of the Crowdstrike Falcon sensor, which is a common security tool installed on Windows environments. If such behavior is observed, it is considered suspicious since it could indicate an attempt to remove security measures and facilitate malicious activities without detection. It's important to note that while administrators might use similar commands for legitimate purposes like debugging, any occurrence of this activity should be thoroughly investigated due to its high risk level."
    }
  },
  {
    "instruction": "How to detect: changes to the registry values related to outlook security settings",
    "context": "",
    "output": "In order to detect changes to the registry values related to outlook security settings, you should: Focus on monitoring changes made to Windows registry settings specifically within the Microsoft Office and Outlook Security paths. This involves capturing instances where the event type is 'SetValue', indicating that a registry value has been added or modified. Any modification targeting paths that contain both '\\SOFTWARE\\Microsoft\\Office\\' and '\\Outlook\\Security\\' should be flagged for further analysis. When analyzing logs, it's essential to account for potential false positives which may arise from legitimate administrative activities that involve changes to these registry areas. The severity of these detections is considered medium, indicating a need for prompt review to confirm whether the modification is benign or part of a malicious attack. Pay special attention to the context of these changes as they relate to tactics and techniques such as Persistent Access and Privilege Escalation, as such modifications to Outlook Security settings may be leveraged by attackers to bypass security mechanisms or maintain persistence within a compromised system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the registry values related to outlook security settings",
      "answer": "In order to detect changes to the registry values related to outlook security settings, you should: Focus on monitoring changes made to Windows registry settings specifically within the Microsoft Office and Outlook Security paths. This involves capturing instances where the event type is 'SetValue', indicating that a registry value has been added or modified. Any modification targeting paths that contain both '\\SOFTWARE\\Microsoft\\Office\\' and '\\Outlook\\Security\\' should be flagged for further analysis. When analyzing logs, it's essential to account for potential false positives which may arise from legitimate administrative activities that involve changes to these registry areas. The severity of these detections is considered medium, indicating a need for prompt review to confirm whether the modification is benign or part of a malicious attack. Pay special attention to the context of these changes as they relate to tactics and techniques such as Persistent Access and Privilege Escalation, as such modifications to Outlook Security settings may be leveraged by attackers to bypass security mechanisms or maintain persistence within a compromised system."
    }
  },
  {
    "instruction": "How can I detect: removal of system firewall rules. Adversaries may only delete or modify a specific system firewall rule to bypass controls limiting network usage or access.\nDetection rules that match only on the disabling of firewalls will miss this.\n",
    "context": "",
    "output": "In order to detect the removal of system firewall rules, where adversaries may only delete or modify a specific system firewall rule to bypass controls limiting network usage or access, you should: Monitor Linux audit logs for commands that are indicative of someone attempting to remove firewall rules. Specifically, look for execution events (`EXECVE`) associated with the key commands `iptables`, `firewall-cmd`, and `ufw`. For `iptables`, the presence of the argument `DROP` should be noted. Similarly, for `firewall-cmd`, watch for the argument containing the term `remove`, and for `ufw`, the argument should contain `delete`. This monitoring helps in identifying potential malicious attempts to modify or delete firewall rules, which could be an indicator of an adversary trying to bypass network security controls. It's important to note that there could be legitimate administrative reasons for these actions, so any detection should be considered with the possibility of false positives, specifically arising from legitimate admin activity. The significance of these activities is considered to be of medium level, emphasizing the need for further investigation upon detection. This approach is aligned with understanding and mitigating tactics where adversaries attempt to manipulate firewall rules for their benefit, directly impacting network defense techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "removal of system firewall rules. Adversaries may only delete or modify a specific system firewall rule to bypass controls limiting network usage or access.\nDetection rules that match only on the disabling of firewalls will miss this.\n",
      "answer": "In order to detect the removal of system firewall rules, where adversaries may only delete or modify a specific system firewall rule to bypass controls limiting network usage or access, you should: Monitor Linux audit logs for commands that are indicative of someone attempting to remove firewall rules. Specifically, look for execution events (`EXECVE`) associated with the key commands `iptables`, `firewall-cmd`, and `ufw`. For `iptables`, the presence of the argument `DROP` should be noted. Similarly, for `firewall-cmd`, watch for the argument containing the term `remove`, and for `ufw`, the argument should contain `delete`. This monitoring helps in identifying potential malicious attempts to modify or delete firewall rules, which could be an indicator of an adversary trying to bypass network security controls. It's important to note that there could be legitimate administrative reasons for these actions, so any detection should be considered with the possibility of false positives, specifically arising from legitimate admin activity. The significance of these activities is considered to be of medium level, emphasizing the need for further investigation upon detection. This approach is aligned with understanding and mitigating tactics where adversaries attempt to manipulate firewall rules for their benefit, directly impacting network defense techniques."
    }
  },
  {
    "instruction": "Can you explain how to detect: multiple failed logins with multiple valid domain accounts from a single source system using the Kerberos protocol.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect multiple failed logins with multiple valid domain accounts from a single source system using the Kerberos protocol, you should focus on analyzing security logs from Windows systems. Specifically, look for events with ID 4771, which indicate a Kerberos pre-authentication failure, accompanied by a status code '0x18'. This status code signals that the failure was due to a bad password, which is a common indicator of attempted unauthorized access.\n\nWhen examining these events, it's essential to exclude any that are targeting computer accounts (those ending in '$'), as these could represent legitimate system activities and thus reduce the accuracy of your detection efforts. Additionally, consider the timeframe of observed activities; occurrences should be aggregated within a 24-hour period.\n\nThe condition for raising an alert should be based on observing more than ten failed login attempts from a single IP address, targeting different user accounts. This pattern of behavior is indicative of an adversary attempting to gain unauthorized access using multiple account credentials, a tactic often employed in brute force or password spraying attacks.\n\nIt's important to be aware of potential sources of false positives, which include vulnerability scanners, misconfigured systems, remote administration tools, VPN terminators, and multi-user environments like Citrix server farms. These legitimate tools and environments can sometimes mimic the behavior of an attempted attack, so additional context and investigation may be required to accurately interpret alerts based on this detection strategy.\n\nBy focusing on these specific criteria and patterns of behavior, organizations can more effectively identify potential unauthorized access attempts using the Kerberos protocol, allowing them to respond swiftly and mitigate potential risks to their environments.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "multiple failed logins with multiple valid domain accounts from a single source system using the Kerberos protocol.",
      "answer": "In order to detect multiple failed logins with multiple valid domain accounts from a single source system using the Kerberos protocol, you should focus on analyzing security logs from Windows systems. Specifically, look for events with ID 4771, which indicate a Kerberos pre-authentication failure, accompanied by a status code '0x18'. This status code signals that the failure was due to a bad password, which is a common indicator of attempted unauthorized access.\n\nWhen examining these events, it's essential to exclude any that are targeting computer accounts (those ending in '$'), as these could represent legitimate system activities and thus reduce the accuracy of your detection efforts. Additionally, consider the timeframe of observed activities; occurrences should be aggregated within a 24-hour period.\n\nThe condition for raising an alert should be based on observing more than ten failed login attempts from a single IP address, targeting different user accounts. This pattern of behavior is indicative of an adversary attempting to gain unauthorized access using multiple account credentials, a tactic often employed in brute force or password spraying attacks.\n\nIt's important to be aware of potential sources of false positives, which include vulnerability scanners, misconfigured systems, remote administration tools, VPN terminators, and multi-user environments like Citrix server farms. These legitimate tools and environments can sometimes mimic the behavior of an attempted attack, so additional context and investigation may be required to accurately interpret alerts based on this detection strategy.\n\nBy focusing on these specific criteria and patterns of behavior, organizations can more effectively identify potential unauthorized access attempts using the Kerberos protocol, allowing them to respond swiftly and mitigate potential risks to their environments."
    }
  },
  {
    "instruction": "How can I detect: attempts to remove Windows Defender configuration using the 'MpPreference' cmdlet",
    "context": "",
    "output": "In order to detect attempts to remove Windows Defender configuration using the 'MpPreference' cmdlet, you should: Monitor PowerShell script executions within Windows environments, ensuring that Script Block Logging is active for detailed analysis. Specifically, lookout for scripts indicating an attempt to delete or modify Windows Defender configurations. This includes any script text containing 'Remove-MpPreference', which directly attempts to alter Defender settings. Further, pay attention to modifications targeting Defender's protective features, like altering controlled folder access, attack surface reduction rules, or the process of checking for signatures before running scans. These actions can significantly weaken a system's defenses and are usually executed via PowerShell scripts. It's crucial to discern between malicious attempts and legitimate administrative use of such scripts to adjust security settings, as both can appear similar in logs. The importance of monitoring for these specific script contents is underscored by the high priority level assigned, reflecting the potential risk to system security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to remove Windows Defender configuration using the 'MpPreference' cmdlet",
      "answer": "In order to detect attempts to remove Windows Defender configuration using the 'MpPreference' cmdlet, you should: Monitor PowerShell script executions within Windows environments, ensuring that Script Block Logging is active for detailed analysis. Specifically, lookout for scripts indicating an attempt to delete or modify Windows Defender configurations. This includes any script text containing 'Remove-MpPreference', which directly attempts to alter Defender settings. Further, pay attention to modifications targeting Defender's protective features, like altering controlled folder access, attack surface reduction rules, or the process of checking for signatures before running scans. These actions can significantly weaken a system's defenses and are usually executed via PowerShell scripts. It's crucial to discern between malicious attempts and legitimate administrative use of such scripts to adjust security settings, as both can appear similar in logs. The importance of monitoring for these specific script contents is underscored by the high priority level assigned, reflecting the potential risk to system security."
    }
  },
  {
    "instruction": "How can I detect: suspicious execution from an uncommon folder",
    "context": "",
    "output": "In order to detect a suspicious execution from an uncommon folder, you should monitor the creation of processes on Windows systems, focusing on executions that originate from certain directories that are unusual for standard software or system processes to execute from. Specifically, watch for processes starting from directories such as the Recycle Bin, system profiles, logs directories (Intel, RSA), user directories (including All Users, Default, NetworkService, Public), and several Windows internal directories (including addins, debug, Fonts, Help, IME, Media, repair, security, System32\\Tasks, and Tasks). Additionally, any process that starts with 'C:\\Perflogs\\' should be regarded as suspicious.\n\nHowever, to reduce false positives, ignore any detections that originate from the IBM Client Solutions start programs directory within the Public user's directory or from specific Citrix Updater Binaries locations, including the CitrixReceiverUpdater.exe executable.\n\nIn your monitoring, specifically look at the CommandLine and ParentCommandLine fields, if available, to gain further context around the suspicious execution. Given the high severity of detecting processes in these locations, it's crucial to maintain an up-to-date list of false positives, although currently, the potential for unknown false positives exists.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious execution from an uncommon folder",
      "answer": "In order to detect a suspicious execution from an uncommon folder, you should monitor the creation of processes on Windows systems, focusing on executions that originate from certain directories that are unusual for standard software or system processes to execute from. Specifically, watch for processes starting from directories such as the Recycle Bin, system profiles, logs directories (Intel, RSA), user directories (including All Users, Default, NetworkService, Public), and several Windows internal directories (including addins, debug, Fonts, Help, IME, Media, repair, security, System32\\Tasks, and Tasks). Additionally, any process that starts with 'C:\\Perflogs\\' should be regarded as suspicious.\n\nHowever, to reduce false positives, ignore any detections that originate from the IBM Client Solutions start programs directory within the Public user's directory or from specific Citrix Updater Binaries locations, including the CitrixReceiverUpdater.exe executable.\n\nIn your monitoring, specifically look at the CommandLine and ParentCommandLine fields, if available, to gain further context around the suspicious execution. Given the high severity of detecting processes in these locations, it's crucial to maintain an up-to-date list of false positives, although currently, the potential for unknown false positives exists."
    }
  },
  {
    "instruction": "Can you explain how to detect: abuse of the cron utility to perform task scheduling for initial or recurring execution of malicious code. Detection will focus on crontab jobs uploaded from the tmp folder.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect abuse of the cron utility to perform task scheduling for initial or recurring execution of malicious code, you should: monitor for the creation of processes on Linux systems where the process image name ends with 'crontab'. Particularly, focus on instances where the command line used to initiate these processes includes a reference to the '/tmp/' directory. This detection strategy aims at identifying attempts to schedule tasks, potentially for malicious purposes, through the cron utility using files or scripts located in the temporary directory. It's important to note that there might be instances of legitimate administration activities that involve crontab and the /tmp/ directory, which could result in false positives. Therefore, a medium level of scrutiny is advised when analyzing alerts generated by this detection strategy. The associated MITRE ATT&CK tactics and techniques include Execution and Persistence, specifically through scheduled tasks/jobs indicating an abuse of the system's task scheduling utility.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "abuse of the cron utility to perform task scheduling for initial or recurring execution of malicious code. Detection will focus on crontab jobs uploaded from the tmp folder.",
      "answer": "In order to detect abuse of the cron utility to perform task scheduling for initial or recurring execution of malicious code, you should: monitor for the creation of processes on Linux systems where the process image name ends with 'crontab'. Particularly, focus on instances where the command line used to initiate these processes includes a reference to the '/tmp/' directory. This detection strategy aims at identifying attempts to schedule tasks, potentially for malicious purposes, through the cron utility using files or scripts located in the temporary directory. It's important to note that there might be instances of legitimate administration activities that involve crontab and the /tmp/ directory, which could result in false positives. Therefore, a medium level of scrutiny is advised when analyzing alerts generated by this detection strategy. The associated MITRE ATT&CK tactics and techniques include Execution and Persistence, specifically through scheduled tasks/jobs indicating an abuse of the system's task scheduling utility."
    }
  },
  {
    "instruction": "Can you explain how to detect: risky authencaition from a non AD registered device without MFA being required.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect risky authentication from a non AD registered device without MFA being required, you should: Monitor Azure sign-in logs for successful authentication attempts that only utilized single factor authentication from devices not registered with Active Directory and are marked as 'atRisk'. This involves focusing on sign-in attempts where 'Status' is marked as 'Success', 'AuthenticationRequirement' indicates 'singleFactorAuthentication', 'DeviceDetail.trusttype' is not specified (indicating a lack of device registration or trust), and 'RiskState' is flagged as 'atRisk', pointing towards a potentially compromised or risky authentication attempt. Noteworthy, this process does not predict all possible false positives, which remain unknown, and the significance level of these detection criteria is considered high.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "risky authencaition from a non AD registered device without MFA being required.",
      "answer": "In order to detect risky authentication from a non AD registered device without MFA being required, you should: Monitor Azure sign-in logs for successful authentication attempts that only utilized single factor authentication from devices not registered with Active Directory and are marked as 'atRisk'. This involves focusing on sign-in attempts where 'Status' is marked as 'Success', 'AuthenticationRequirement' indicates 'singleFactorAuthentication', 'DeviceDetail.trusttype' is not specified (indicating a lack of device registration or trust), and 'RiskState' is flagged as 'atRisk', pointing towards a potentially compromised or risky authentication attempt. Noteworthy, this process does not predict all possible false positives, which remain unknown, and the significance level of these detection criteria is considered high."
    }
  },
  {
    "instruction": "Please help me detect the following: spawning of suspicious child processes by Atlassian Confluence server which may indicate successful exploitation of CVE-2022-26134",
    "context": "",
    "output": "Sure!\nIn order to detect spawning of suspicious child processes by Atlassian Confluence server which may indicate successful exploitation of CVE-2022-26134, you should: Monitor for the creation of processes on Linux where the parent process is a Java application running from the '/opt/atlassian/confluence/' directory. Specifically, look for child processes that begin with common shell and scripting languages such as '/bin/sh', 'bash', 'dash', 'ksh', 'zsh', 'csh', 'fish', and also include tools that can fetch external content or execute code like 'curl', 'wget', 'python'. These indicators suggest a high likelihood of malicious activity, possibly related to the exploitation of vulnerabilities in Confluence servers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "spawning of suspicious child processes by Atlassian Confluence server which may indicate successful exploitation of CVE-2022-26134",
      "answer": "In order to detect spawning of suspicious child processes by Atlassian Confluence server which may indicate successful exploitation of CVE-2022-26134, you should: Monitor for the creation of processes on Linux where the parent process is a Java application running from the '/opt/atlassian/confluence/' directory. Specifically, look for child processes that begin with common shell and scripting languages such as '/bin/sh', 'bash', 'dash', 'ksh', 'zsh', 'csh', 'fish', and also include tools that can fetch external content or execute code like 'curl', 'wget', 'python'. These indicators suggest a high likelihood of malicious activity, possibly related to the exploitation of vulnerabilities in Confluence servers."
    }
  },
  {
    "instruction": "How can I detect: execution of Scheduled Tasks where the Program being run is located in a suspicious location or it's an unusale program to be run from a Scheduled Task",
    "context": "",
    "output": "In order to detect the execution of Scheduled Tasks where the Program being run is located in a suspicious location or it's an unusual program to be run from a Scheduled Task, you should monitor the Windows Task Scheduler for task creation events specifically with the Event ID 129, which signifies a created task process. This detection focuses on tasks that are configured to execute programs located in paths that are commonly used by attackers to stage or execute malicious software, including 'C:\\Windows\\Temp\\', '\\AppData\\Local\\Temp\\', '\\Desktop\\', '\\Downloads\\', '\\Users\\Public\\', and 'C:\\Temp\\'. These locations are typically writable by non-administrative users and are therefore popular choices for temporary storage of malicious files. Monitoring for tasks executing from these directories can help identify potential malicious activity, such as malware launching or persistence mechanisms being established. It's important to have the \"Microsoft-Windows-TaskScheduler/Operational\" logging enabled to capture the necessary information for this detection to work. Be aware that monitoring these events may lead to unknown false positives, which can be reduced by specifically excluding known legitimate tasks from the detection logic if necessary.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Scheduled Tasks where the Program being run is located in a suspicious location or it's an unusale program to be run from a Scheduled Task",
      "answer": "In order to detect the execution of Scheduled Tasks where the Program being run is located in a suspicious location or it's an unusual program to be run from a Scheduled Task, you should monitor the Windows Task Scheduler for task creation events specifically with the Event ID 129, which signifies a created task process. This detection focuses on tasks that are configured to execute programs located in paths that are commonly used by attackers to stage or execute malicious software, including 'C:\\Windows\\Temp\\', '\\AppData\\Local\\Temp\\', '\\Desktop\\', '\\Downloads\\', '\\Users\\Public\\', and 'C:\\Temp\\'. These locations are typically writable by non-administrative users and are therefore popular choices for temporary storage of malicious files. Monitoring for tasks executing from these directories can help identify potential malicious activity, such as malware launching or persistence mechanisms being established. It's important to have the \"Microsoft-Windows-TaskScheduler/Operational\" logging enabled to capture the necessary information for this detection to work. Be aware that monitoring these events may lead to unknown false positives, which can be reduced by specifically excluding known legitimate tasks from the detection logic if necessary."
    }
  },
  {
    "instruction": "How to detect: default filenames output from the execution of CrackMapExec and Impacket-secretsdump against an endpoint.",
    "context": "",
    "output": "In order to detect default filenames output from the execution of CrackMapExec and Impacket-secretsdump against an endpoint, you should focus on monitoring Windows file events. Look specifically for events where the image path ends with '\\svchost.exe'. This is indicative of a potentially malicious service execution. Furthermore, if your logging setup includes command line data for file events, add an additional layer of accuracy by checking for instances where the command line contains 'RemoteRegistry'. Also, pay attention to file creation events, especially files created in the Windows\\System32 directory with a temporary (.tmp) file extension following a specific pattern: an eight-character alphanumeric filename. This detection strategy is considered to have a high level of importance due to the nature of the activities it aims to uncover, which are related to tactics and techniques commonly used in credential access and lateral movement. Be aware that there might be instances where legitimate activities trigger this rule, although they are currently unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "default filenames output from the execution of CrackMapExec and Impacket-secretsdump against an endpoint.",
      "answer": "In order to detect default filenames output from the execution of CrackMapExec and Impacket-secretsdump against an endpoint, you should focus on monitoring Windows file events. Look specifically for events where the image path ends with '\\svchost.exe'. This is indicative of a potentially malicious service execution. Furthermore, if your logging setup includes command line data for file events, add an additional layer of accuracy by checking for instances where the command line contains 'RemoteRegistry'. Also, pay attention to file creation events, especially files created in the Windows\\System32 directory with a temporary (.tmp) file extension following a specific pattern: an eight-character alphanumeric filename. This detection strategy is considered to have a high level of importance due to the nature of the activities it aims to uncover, which are related to tactics and techniques commonly used in credential access and lateral movement. Be aware that there might be instances where legitimate activities trigger this rule, although they are currently unknown."
    }
  },
  {
    "instruction": "Can you explain how to detect: process spawned by the terminal service server process (this could be an indicator for an exploitation of CVE-2019-0708)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a process spawned by the terminal service server process (this could be an indicator for an exploitation of CVE-2019-0708), you should monitor the creation of processes on Windows systems. Specifically, look for processes that are created by the parent command line associated with 'svchost.exe' and include 'termsvcs' in their command line arguments. However, it's important to exclude any process where the image ends with '\\rdpclip.exe', ':\\Windows\\System32\\csrss.exe', ':\\Windows\\System32\\wininit.exe', or ':\\Windows\\System32\\winlogon.exe', as well as any instances where the image is null, to avoid false positives. This detection is critical, given the high severity of potential exploitation attempts, and requires vigilance in monitoring for unusual process hierarchy related to terminal services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process spawned by the terminal service server process (this could be an indicator for an exploitation of CVE-2019-0708)",
      "answer": "In order to detect a process spawned by the terminal service server process (this could be an indicator for an exploitation of CVE-2019-0708), you should monitor the creation of processes on Windows systems. Specifically, look for processes that are created by the parent command line associated with 'svchost.exe' and include 'termsvcs' in their command line arguments. However, it's important to exclude any process where the image ends with '\\rdpclip.exe', ':\\Windows\\System32\\csrss.exe', ':\\Windows\\System32\\wininit.exe', or ':\\Windows\\System32\\winlogon.exe', as well as any instances where the image is null, to avoid false positives. This detection is critical, given the high severity of potential exploitation attempts, and requires vigilance in monitoring for unusual process hierarchy related to terminal services."
    }
  },
  {
    "instruction": "How can I detect: highly relevant Antivirus alert that reports a password dumper",
    "context": "",
    "output": "In order to detect a highly relevant Antivirus alert that reports a password dumper, you should monitor antivirus logs for alerts that report the usage of password dumper tools. Specifically, look for signatures that start with 'PWS' or contain specific keywords indicative of well-known password dumping utilities such as 'DumpCreds', 'Mimikatz', 'PWCrack', 'HTool/WCE', 'PSWTool', 'PWDump', 'SecurityTool', 'PShlSpy', 'Rubeus', 'Kekeo', 'LsassDump', 'Outflank', 'DumpLsass', 'SharpDump', 'PWSX', or 'PWS.'. These signatures are associated with tools and techniques designed to extract or manipulate passwords from systems or software, indicating a potential security threat.\n\nTo effectively detect such activities, focus on any alert generated by the antivirus under the specified conditions. The information most relevant to understanding the extent and specifics of the detection includes the file name involved in the detection and the user account under which the activity was initiated.\n\nDue to the critical nature of password dumpers in enabling further unauthorized access and lateral movement within a network, alerts fitting these criteria are considered critically important. However, false positives are unlikely, suggesting that any detection should be taken seriously and investigated promptly.\n\nBy focusing on these specific signature patterns and tool indicators, organizations can identify attempts to compromise credentials, aiding in the quick response to mitigate potential damage or unauthorized access.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "highly relevant Antivirus alert that reports a password dumper",
      "answer": "In order to detect a highly relevant Antivirus alert that reports a password dumper, you should monitor antivirus logs for alerts that report the usage of password dumper tools. Specifically, look for signatures that start with 'PWS' or contain specific keywords indicative of well-known password dumping utilities such as 'DumpCreds', 'Mimikatz', 'PWCrack', 'HTool/WCE', 'PSWTool', 'PWDump', 'SecurityTool', 'PShlSpy', 'Rubeus', 'Kekeo', 'LsassDump', 'Outflank', 'DumpLsass', 'SharpDump', 'PWSX', or 'PWS.'. These signatures are associated with tools and techniques designed to extract or manipulate passwords from systems or software, indicating a potential security threat.\n\nTo effectively detect such activities, focus on any alert generated by the antivirus under the specified conditions. The information most relevant to understanding the extent and specifics of the detection includes the file name involved in the detection and the user account under which the activity was initiated.\n\nDue to the critical nature of password dumpers in enabling further unauthorized access and lateral movement within a network, alerts fitting these criteria are considered critically important. However, false positives are unlikely, suggesting that any detection should be taken seriously and investigated promptly.\n\nBy focusing on these specific signature patterns and tool indicators, organizations can identify attempts to compromise credentials, aiding in the quick response to mitigate potential damage or unauthorized access."
    }
  },
  {
    "instruction": "How to detect: focuses on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including\nCobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads \nthat often undergo minimal changes by attackers due to bad opsec.\n",
    "context": "",
    "output": "In order to focus on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including Cobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads that often undergo minimal changes by attackers due to bad opsec, you should: monitor Windows PowerShell module logs for specific strings of text that are common to these attack tools. These include '$DoIt', 'harmj0y', 'mattifestation', '_RastaMouse', 'tifkin_', and '0xdeadbeef'. These strings are artifacts that could indicate the use of known malicious PowerShell scripts involved in the execution of these payloads. The detection relies heavily on identifying these strings within the PowerShell module logs. It should be noted that while there may be moderate-to-low false positives, the specificity of these strings to offensive PowerShell operations makes this a critical alert. The analysis and monitoring for these specific strings help in identifying potentially malicious activity associated with well-known attack tools, indicative of bad operational security practices by attackers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "focuses on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including\nCobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads \nthat often undergo minimal changes by attackers due to bad opsec.\n",
      "answer": "In order to focus on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including Cobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads that often undergo minimal changes by attackers due to bad opsec, you should: monitor Windows PowerShell module logs for specific strings of text that are common to these attack tools. These include '$DoIt', 'harmj0y', 'mattifestation', '_RastaMouse', 'tifkin_', and '0xdeadbeef'. These strings are artifacts that could indicate the use of known malicious PowerShell scripts involved in the execution of these payloads. The detection relies heavily on identifying these strings within the PowerShell module logs. It should be noted that while there may be moderate-to-low false positives, the specificity of these strings to offensive PowerShell operations makes this a critical alert. The analysis and monitoring for these specific strings help in identifying potentially malicious activity associated with well-known attack tools, indicative of bad operational security practices by attackers."
    }
  },
  {
    "instruction": "How to detect: Rorschach ransomware execution activity",
    "context": "",
    "output": "In order to detect Rorschach ransomware execution activity, you should: focus on monitoring process creation logs within Windows systems. Specifically, look out for processes that end with paths to the following executables: bcdedit.exe, net.exe, net1.exe, netsh.exe, wevtutil.exe, and vssadmin.exe, which are key indicators. Additionally, any command line arguments that contain '11111111' should raise an alarm. The occurrence of these conditions suggests a critical level of threat, and, although false positives are considered unlikely, they should always be verified to confirm the presence of Rorschach ransomware activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Rorschach ransomware execution activity",
      "answer": "In order to detect Rorschach ransomware execution activity, you should: focus on monitoring process creation logs within Windows systems. Specifically, look out for processes that end with paths to the following executables: bcdedit.exe, net.exe, net1.exe, netsh.exe, wevtutil.exe, and vssadmin.exe, which are key indicators. Additionally, any command line arguments that contain '11111111' should raise an alarm. The occurrence of these conditions suggests a critical level of threat, and, although false positives are considered unlikely, they should always be verified to confirm the presence of Rorschach ransomware activity."
    }
  },
  {
    "instruction": "Explain how should I detect the following: certificate creation with template allowing risk permission subject",
    "context": "",
    "output": "In order to detect certificate creation with a template allowing risk permission subject, you should monitor for specific security events within Windows environments, particularly those generated by certificate services. Specifically, focus on events with ID 4898 indicating that a certificate template has been loaded, and events with ID 4899 signaling that a certificate Services template was updated. Crucial to detecting potential security risks is the presence of the 'CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT' flag within the template content for both of these event types. The inclusion of this flag may point to configurations that allow for a higher risk of permission manipulation, as it suggests that the entity receiving the certificate can specify the subject. \n\nIt's important to be mindful of some legitimate scenarios that could lead to these events and flags being triggered, such as actions performed by system administrators, the generation of proxy SSL certificates that entail subject modification, and smart card enrollment processes. These are normally considered to be false positives from a security alert perspective. Nevertheless, given the nature of these detections and the level of scrutiny they warrant, they are classified at a low level of concern until additional context or behavior suggests a genuine threat. Key to this approach is ensuring that these detections are integrated within an overarching security monitoring strategy that tags these activities under relevant categories for potential investigation, adapting as necessary to the unique risk landscape of your environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "certificate creation with template allowing risk permission subject",
      "answer": "In order to detect certificate creation with a template allowing risk permission subject, you should monitor for specific security events within Windows environments, particularly those generated by certificate services. Specifically, focus on events with ID 4898 indicating that a certificate template has been loaded, and events with ID 4899 signaling that a certificate Services template was updated. Crucial to detecting potential security risks is the presence of the 'CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT' flag within the template content for both of these event types. The inclusion of this flag may point to configurations that allow for a higher risk of permission manipulation, as it suggests that the entity receiving the certificate can specify the subject. \n\nIt's important to be mindful of some legitimate scenarios that could lead to these events and flags being triggered, such as actions performed by system administrators, the generation of proxy SSL certificates that entail subject modification, and smart card enrollment processes. These are normally considered to be false positives from a security alert perspective. Nevertheless, given the nature of these detections and the level of scrutiny they warrant, they are classified at a low level of concern until additional context or behavior suggests a genuine threat. Key to this approach is ensuring that these detections are integrated within an overarching security monitoring strategy that tags these activities under relevant categories for potential investigation, adapting as necessary to the unique risk landscape of your environment."
    }
  },
  {
    "instruction": "Explain how should I detect the following: script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript",
    "context": "",
    "output": "In order to detect script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript, you should monitor for process creation events on Windows systems, specifically focusing on the execution of `wscript.exe` or `cscript.exe`. Detecting the use of these scripting hosts involves looking for their original file names (`wscript.exe` and `cscript.exe`) or paths that end with these executables. Additionally, pay attention to the command line arguments for these processes, as script file executions are indicated by the presence of file extensions such as `.js`, `.jse`, `.vba`, `.vbe`, `.vbs`, and `.wsf`. It's important to note that the effectiveness of this detection might require fine-tuning to reduce potential false positives. One recommended approach is to incorporate the user profile path in the command line analysis if the rule generates too many alerts. This approach will significantly improve the detection's accuracy and utility in identifying actual malicious activity involving script file execution with Wscript or Cscript.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript",
      "answer": "In order to detect script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript, you should monitor for process creation events on Windows systems, specifically focusing on the execution of `wscript.exe` or `cscript.exe`. Detecting the use of these scripting hosts involves looking for their original file names (`wscript.exe` and `cscript.exe`) or paths that end with these executables. Additionally, pay attention to the command line arguments for these processes, as script file executions are indicated by the presence of file extensions such as `.js`, `.jse`, `.vba`, `.vbe`, `.vbs`, and `.wsf`. It's important to note that the effectiveness of this detection might require fine-tuning to reduce potential false positives. One recommended approach is to incorporate the user profile path in the command line analysis if the rule generates too many alerts. This approach will significantly improve the detection's accuracy and utility in identifying actual malicious activity involving script file execution with Wscript or Cscript."
    }
  },
  {
    "instruction": "How can I detect: additions to the Emond Launch Daemon that adversaries may use to gain persistence and elevate privileges.",
    "context": "",
    "output": "In order to detect additions to the Emond Launch Daemon that adversaries may use to gain persistence and elevate privileges, you should: focus on monitoring file events within macOS systems. Specifically, keep an eye on any changes to the \u2018/etc/emond.d/rules/\u2019 directory, including files that have a \u2018.plist\u2019 extension, which are typically related to system configurations and daemon settings. Additionally, watch for any alterations or additions to the \u2018/private/var/db/emondClients/\u2019 directory. These specific locations are critical because modifications or new files within them could indicate that an adversary is attempting to establish persistence or elevate privileges on the system. Be aware that legitimate administration activities may also trigger these alerts, thus they are considered as potential false positives. The alert level for this activity is classified as medium, indicating a notable concern that warrants investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "additions to the Emond Launch Daemon that adversaries may use to gain persistence and elevate privileges.",
      "answer": "In order to detect additions to the Emond Launch Daemon that adversaries may use to gain persistence and elevate privileges, you should: focus on monitoring file events within macOS systems. Specifically, keep an eye on any changes to the \u2018/etc/emond.d/rules/\u2019 directory, including files that have a \u2018.plist\u2019 extension, which are typically related to system configurations and daemon settings. Additionally, watch for any alterations or additions to the \u2018/private/var/db/emondClients/\u2019 directory. These specific locations are critical because modifications or new files within them could indicate that an adversary is attempting to establish persistence or elevate privileges on the system. Be aware that legitimate administration activities may also trigger these alerts, thus they are considered as potential false positives. The alert level for this activity is classified as medium, indicating a notable concern that warrants investigation."
    }
  },
  {
    "instruction": "Please help me detect the following: Wscript or Cscript executing from a drive other than C. This has been observed with Qakbot executing from within a mounted ISO file.",
    "context": "",
    "output": "Sure!\nIn order to detect Wscript or Cscript executing from a drive other than C, which has been observed with Qakbot executing from within a mounted ISO file, you should: Monitor Windows process creation events for executions of 'wscript.exe' or 'cscript.exe'. Specifically, look for command lines that include file extensions '.js', '.vbs', or '.vbe', indicating the execution of a script file. Additionally, ensure these command lines specify a drive path that is not the primary 'C:\\' drive, implying the script is being executed from an alternative location. This could be indicative of malicious activity, such as the execution of malware from a mounted ISO file. It is important to eliminate common legitimate uses by excluding command lines that explicitly reference the 'C:\\' drive, contain environment variables denoted by '%', or use UNC paths which start with '\\\\'. This approach helps in reducing false positives, allowing for a more focused detection of suspicious activity associated with tactics and techniques like execution and persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Wscript or Cscript executing from a drive other than C. This has been observed with Qakbot executing from within a mounted ISO file.",
      "answer": "In order to detect Wscript or Cscript executing from a drive other than C, which has been observed with Qakbot executing from within a mounted ISO file, you should: Monitor Windows process creation events for executions of 'wscript.exe' or 'cscript.exe'. Specifically, look for command lines that include file extensions '.js', '.vbs', or '.vbe', indicating the execution of a script file. Additionally, ensure these command lines specify a drive path that is not the primary 'C:\\' drive, implying the script is being executed from an alternative location. This could be indicative of malicious activity, such as the execution of malware from a mounted ISO file. It is important to eliminate common legitimate uses by excluding command lines that explicitly reference the 'C:\\' drive, contain environment variables denoted by '%', or use UNC paths which start with '\\\\'. This approach helps in reducing false positives, allowing for a more focused detection of suspicious activity associated with tactics and techniques like execution and persistence."
    }
  },
  {
    "instruction": "How can I detect: Detect changes of syslog daemons configuration files",
    "context": "",
    "output": "In order to detect changes of syslog daemons configuration files, you should focus on identifying modifications to critical system logging configuration files within a Linux environment, particularly by monitoring audit trails provided by auditd. Look for any auditd logs that indicate a 'PATH' type of record, specifically pointing to changes made to the following important configuration files: '/etc/syslog.conf', '/etc/rsyslog.conf', and '/etc/syslog-ng/syslog-ng.conf'. These logs should capture relevant fields such as the executable (exe), the command (comm), and a key identifier for the event (key), which can help in further analysis. Be aware that modifications to these files could occur as part of regular administrative tasks, so it is important to distinguish between routine updates and potentially malicious activity. Such activities should be treated with a high level of suspicion due to their critical role in system logging and monitoring.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect changes of syslog daemons configuration files",
      "answer": "In order to detect changes of syslog daemons configuration files, you should focus on identifying modifications to critical system logging configuration files within a Linux environment, particularly by monitoring audit trails provided by auditd. Look for any auditd logs that indicate a 'PATH' type of record, specifically pointing to changes made to the following important configuration files: '/etc/syslog.conf', '/etc/rsyslog.conf', and '/etc/syslog-ng/syslog-ng.conf'. These logs should capture relevant fields such as the executable (exe), the command (comm), and a key identifier for the event (key), which can help in further analysis. Be aware that modifications to these files could occur as part of regular administrative tasks, so it is important to distinguish between routine updates and potentially malicious activity. Such activities should be treated with a high level of suspicion due to their critical role in system logging and monitoring."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of binaries located in potentially suspicious locations via \"nohup\"",
    "context": "",
    "output": "Sure!\nIn order to detect execution of binaries located in potentially suspicious locations via \"nohup\", you should: Monitor the creation of processes on Linux systems, focusing specifically on those initiated with the 'nohup' command that are executing files from the '/tmp/' directory. This detection hinges on identifying processes that end their image path with '/nohup' and contain '/tmp/' within their command line argument, indicating that binaries are being executed from locations that are commonly used by attackers to temporarily store malicious files. The uncertainty about the nature of activities that match this pattern necessitates considering them as high-severity incidents, despite the recognition that not all such detections will represent true security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of binaries located in potentially suspicious locations via \"nohup\"",
      "answer": "In order to detect execution of binaries located in potentially suspicious locations via \"nohup\", you should: Monitor the creation of processes on Linux systems, focusing specifically on those initiated with the 'nohup' command that are executing files from the '/tmp/' directory. This detection hinges on identifying processes that end their image path with '/nohup' and contain '/tmp/' within their command line argument, indicating that binaries are being executed from locations that are commonly used by attackers to temporarily store malicious files. The uncertainty about the nature of activities that match this pattern necessitates considering them as high-severity incidents, despite the recognition that not all such detections will represent true security threats."
    }
  },
  {
    "instruction": "How can I detect: Emotet like process executions that are not covered by the more generic rules",
    "context": "",
    "output": "In order to detect all Emotet like process executions that are not covered by the more generic rules, you should monitor the creation of processes on Windows systems for command lines containing specific base64 and obfuscated components. These components are often indicators of malicious activities related to the Emotet malware family. Specifically, look for command lines that include patterns resembling encoded PowerShell commands, often used to bypass security mechanisms by obfuscating the actual intent of the command. These patterns might include snippets that seemingly appear benign, like sections attempting to refer to the user's profile directory or temporary files directory in a non-standard, encoded manner.\n\nIt's important to exclude from detections those command lines executing benign actions that could mimic the obfuscation patterns used by threat actors, such as certain legitimate scripts that might employ Base64 for encoding for entirely non-malicious reasons.\n\nAlways verify the command line and the parent command line's context when possible to reduce the likelihood of false positives, which are considered unlikely due to the specificity of the detection criteria. The detection strategy is aimed at having a high level of confidence when identifying malicious process execution patterns resembling those used by Emotet, without being overly generic.\n\nThis strategy is critical for spotting sophisticated threats that utilize advanced obfuscation techniques to evade standard detection methods, focusing on those that deploy or execute through the abuse of encoded PowerShell commands or obfuscated scripts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Emotet like process executions that are not covered by the more generic rules",
      "answer": "In order to detect all Emotet like process executions that are not covered by the more generic rules, you should monitor the creation of processes on Windows systems for command lines containing specific base64 and obfuscated components. These components are often indicators of malicious activities related to the Emotet malware family. Specifically, look for command lines that include patterns resembling encoded PowerShell commands, often used to bypass security mechanisms by obfuscating the actual intent of the command. These patterns might include snippets that seemingly appear benign, like sections attempting to refer to the user's profile directory or temporary files directory in a non-standard, encoded manner.\n\nIt's important to exclude from detections those command lines executing benign actions that could mimic the obfuscation patterns used by threat actors, such as certain legitimate scripts that might employ Base64 for encoding for entirely non-malicious reasons.\n\nAlways verify the command line and the parent command line's context when possible to reduce the likelihood of false positives, which are considered unlikely due to the specificity of the detection criteria. The detection strategy is aimed at having a high level of confidence when identifying malicious process execution patterns resembling those used by Emotet, without being overly generic.\n\nThis strategy is critical for spotting sophisticated threats that utilize advanced obfuscation techniques to evade standard detection methods, focusing on those that deploy or execute through the abuse of encoded PowerShell commands or obfuscated scripts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: recovery of a new public database instance from a snapshot. It may be a part of data exfiltration.",
    "context": "",
    "output": "In order to detect the recovery of a new public database instance from a snapshot. It may be a part of data exfiltration, you should: Monitor AWS CloudTrail logs for activities involving the recovery of database instances from snapshots where the database is set to be publicly accessible. Specifically, keep an eye out for events that come from the RDS (Relational Database Service) indicated by the event source `rds.amazonaws.com`. Look for the event name `RestoreDBInstanceFromDBSnapshot` which signifies the action of restoring a database instance from a snapshot. Importantly, ensure that the `responseElements.publiclyAccessible` attribute is set to 'true', indicating that the database instance is publicly accessible post-restoration. This detection is rated with a high-level importance due to the potential risk of exfiltrating data through such publicly accessible databases. Awareness of false positives is essential, although currently unknown, implying that monitoring and context are crucial when interpreting alerts based on this detection criterion. Identifying such activity could signify a breach or an inadvertent configuration that could expose sensitive data publicly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "recovery of a new public database instance from a snapshot. It may be a part of data exfiltration.",
      "answer": "In order to detect the recovery of a new public database instance from a snapshot. It may be a part of data exfiltration, you should: Monitor AWS CloudTrail logs for activities involving the recovery of database instances from snapshots where the database is set to be publicly accessible. Specifically, keep an eye out for events that come from the RDS (Relational Database Service) indicated by the event source `rds.amazonaws.com`. Look for the event name `RestoreDBInstanceFromDBSnapshot` which signifies the action of restoring a database instance from a snapshot. Importantly, ensure that the `responseElements.publiclyAccessible` attribute is set to 'true', indicating that the database instance is publicly accessible post-restoration. This detection is rated with a high-level importance due to the potential risk of exfiltrating data through such publicly accessible databases. Awareness of false positives is essential, although currently unknown, implying that monitoring and context are crucial when interpreting alerts based on this detection criterion. Identifying such activity could signify a breach or an inadvertent configuration that could expose sensitive data publicly."
    }
  },
  {
    "instruction": "How can I detect: set of suspicious network related commands often used in recon stages",
    "context": "",
    "output": "In order to detect a set of suspicious network related commands often used in recon stages, you should: Monitor for the creation of processes in Windows systems, specifically looking for commands that involve the usage of 'nslookup' together with '_ldap._tcp.dc._msdcs.' This particular command sequence is a red flag for reconnaissance activities as it may indicate an attempt to gather information about domain controllers within a Microsoft Domain. Such activities often precede more malicious actions and are key indicators of the initial phases of an attack. It is important to consider that some legitimate scripts and administrative tools could trigger similar alerts, so any detection should be investigated to rule out or confirm malicious intent. This monitoring activity falls under the broader category of identifying reconnaissance techniques, which is a fundamental part of maintaining a secure network environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "set of suspicious network related commands often used in recon stages",
      "answer": "In order to detect a set of suspicious network related commands often used in recon stages, you should: Monitor for the creation of processes in Windows systems, specifically looking for commands that involve the usage of 'nslookup' together with '_ldap._tcp.dc._msdcs.' This particular command sequence is a red flag for reconnaissance activities as it may indicate an attempt to gather information about domain controllers within a Microsoft Domain. Such activities often precede more malicious actions and are key indicators of the initial phases of an attack. It is important to consider that some legitimate scripts and administrative tools could trigger similar alerts, so any detection should be investigated to rule out or confirm malicious intent. This monitoring activity falls under the broader category of identifying reconnaissance techniques, which is a fundamental part of maintaining a secure network environment."
    }
  },
  {
    "instruction": "How to detect: potential exfiltration by looking for a few compression extensions in the uri and signs of compression in the mime type, file type, and http body\n",
    "context": "",
    "output": "In order to detect potential exfiltration by looking for a few compression extensions in the uri and signs of compression in the mime type, file type, and http body, you should: Monitor HTTP traffic for specific patterns indicating compressed file transfers. This involves looking for URIs that end with '.7z', '.zip', or '.rar' extensions, which are common compression formats. Additionally, check for MIME types ending with 'compressed' to detect any content type indicating compression. File types and HTTP body contents ending with 'compressed' should also be scrutinized, especially with HTTP PUT methods, as this could signal an attempt to upload compressed files, potentially for malicious purposes. These detection criteria are based on Zeek logs focused on HTTP service activity. While employing this monitoring strategy, be aware of possible legitimate uploads or downloads of compressed archives, as these can generate false positives. The monitoring is considered of medium level due to the balance between the need for security and the potential for disrupting normal business activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential exfiltration by looking for a few compression extensions in the uri and signs of compression in the mime type, file type, and http body\n",
      "answer": "In order to detect potential exfiltration by looking for a few compression extensions in the uri and signs of compression in the mime type, file type, and http body, you should: Monitor HTTP traffic for specific patterns indicating compressed file transfers. This involves looking for URIs that end with '.7z', '.zip', or '.rar' extensions, which are common compression formats. Additionally, check for MIME types ending with 'compressed' to detect any content type indicating compression. File types and HTTP body contents ending with 'compressed' should also be scrutinized, especially with HTTP PUT methods, as this could signal an attempt to upload compressed files, potentially for malicious purposes. These detection criteria are based on Zeek logs focused on HTTP service activity. While employing this monitoring strategy, be aware of possible legitimate uploads or downloads of compressed archives, as these can generate false positives. The monitoring is considered of medium level due to the balance between the need for security and the potential for disrupting normal business activities."
    }
  },
  {
    "instruction": "How can I detect: known sensitive file extensions via Zeek",
    "context": "",
    "output": "In order to detect known sensitive file extensions via Zeek, you should: monitor for file activities specifically within the SMB (Server Message Block) service, focusing on the interaction with files that have extensions indicative of potentially sensitive information or system files. These include extensions like '.pst' (Outlook Personal Folder File), '.ost' (Offline Outlook Data File), '.msg' (Outlook Mail Message), '.nst' (Microsoft Exchange Server Offline Address Book File), '.oab' (Microsoft Outlook Offline Address Book), '.edb' (Exchange Database File), '.nsf' (Lotus Notes Database), '.bak' (Backup File), '.dmp' (Memory Dump File), '.kirbi' (Kerberos Ticket File), '\\groups.xml' (used in Windows Group Policy Preferences), and '.rdp' (Remote Desktop Protocol File). Activities involving these file types should be carefully examined as they might relate to exfiltration, espionage, or other malicious behavior.\n\nMonitoring should focus on capturing relevant metadata such as the computer name, domain name of the subject, username, and the relative target name involved in the file activity. While surveilling for these specific file extensions is crucial for security, it's also important to consider legitimate scenarios that might generate false positives. Common benign circumstances include help desk operations related to backup or re-imaging of end-user machines and legitimate user activities that involve handling or exchanging such files for business purposes. The security level for alerts based on these detections is considered to be of medium importance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "known sensitive file extensions via Zeek",
      "answer": "In order to detect known sensitive file extensions via Zeek, you should: monitor for file activities specifically within the SMB (Server Message Block) service, focusing on the interaction with files that have extensions indicative of potentially sensitive information or system files. These include extensions like '.pst' (Outlook Personal Folder File), '.ost' (Offline Outlook Data File), '.msg' (Outlook Mail Message), '.nst' (Microsoft Exchange Server Offline Address Book File), '.oab' (Microsoft Outlook Offline Address Book), '.edb' (Exchange Database File), '.nsf' (Lotus Notes Database), '.bak' (Backup File), '.dmp' (Memory Dump File), '.kirbi' (Kerberos Ticket File), '\\groups.xml' (used in Windows Group Policy Preferences), and '.rdp' (Remote Desktop Protocol File). Activities involving these file types should be carefully examined as they might relate to exfiltration, espionage, or other malicious behavior.\n\nMonitoring should focus on capturing relevant metadata such as the computer name, domain name of the subject, username, and the relative target name involved in the file activity. While surveilling for these specific file extensions is crucial for security, it's also important to consider legitimate scenarios that might generate false positives. Common benign circumstances include help desk operations related to backup or re-imaging of end-user machines and legitimate user activities that involve handling or exchanging such files for business purposes. The security level for alerts based on these detections is considered to be of medium importance."
    }
  },
  {
    "instruction": "How can I detect: changes to the AppInstaller (winget) admin settings. Such as enabling local manifest installations or disabling installer hash checks",
    "context": "",
    "output": "In order to detect changes to the AppInstaller (winget) admin settings, such as enabling local manifest installations or disabling installer hash checks, you should monitor Windows registry settings. Specifically, look for events where the type is \"SetValue\" indicating a modification has been made. This event should originate from an executable path ending with '\\winget.exe', ensuring the modification is related to the AppInstaller. Additionally, ensure the target object of this modification begins with '\\REGISTRY\\A\\' and ends with '\\LocalState\\admin_settings', pinpointing the specific part of the registry where admin settings for the AppInstaller are stored. Be aware that these detections might include false positives because the event doesn't specify the type of change made; thus, legitimate modifications to these settings could also trigger alerts. The importance of monitoring these modifications is categorized as low level, indicating they should be tracked but are not typically critical security issues on their own. However, vigilance in detecting these changes is crucial as they relate to the modification of admin settings that could potentially enable actions like local manifest installations or disable installer hash checks, presenting security risks if altered maliciously.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the AppInstaller (winget) admin settings. Such as enabling local manifest installations or disabling installer hash checks",
      "answer": "In order to detect changes to the AppInstaller (winget) admin settings, such as enabling local manifest installations or disabling installer hash checks, you should monitor Windows registry settings. Specifically, look for events where the type is \"SetValue\" indicating a modification has been made. This event should originate from an executable path ending with '\\winget.exe', ensuring the modification is related to the AppInstaller. Additionally, ensure the target object of this modification begins with '\\REGISTRY\\A\\' and ends with '\\LocalState\\admin_settings', pinpointing the specific part of the registry where admin settings for the AppInstaller are stored. Be aware that these detections might include false positives because the event doesn't specify the type of change made; thus, legitimate modifications to these settings could also trigger alerts. The importance of monitoring these modifications is categorized as low level, indicating they should be tracked but are not typically critical security issues on their own. However, vigilance in detecting these changes is crucial as they relate to the modification of admin settings that could potentially enable actions like local manifest installations or disable installer hash checks, presenting security risks if altered maliciously."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of bitsadmin downloading a file to uncommon target folder",
    "context": "",
    "output": "In order to detect the usage of bitsadmin downloading a file to uncommon target folder, you should focus on monitoring process creation events within Windows environments. Specifically, watch for instances where the bitsadmin.exe tool is invoked (paying close attention to cases where the process image ends with '\\bitsadmin.exe' or the original filename matches 'bitsadmin.exe'). Furthermore, it\u2019s crucial to scrutinize the command line arguments looking for flags such as ' /transfer ', ' /create ', or ' /addfile ', which indicate the initiation of a download, creation of a job, or addition of a file to a job, respectively. Equally important, is to observe the specified target folder paths in these command lines. Be watchful for paths including '%AppData%', '%temp%', '%tmp%', '\\AppData\\Local\\', or 'C:\\Windows\\Temp\\', as these may reveal attempts to download files to less common, potentially suspicious locations. For analysis, ensure that you capture both the Command Line and Parent Command Line fields for context. While assessing these indicators, take note that there may be legitimate uses of bitsadmin that could lead to false positives, thus each trigger should be evaluated with caution. The identification strategy is categorized under a medium threat level, emphasizing the need for vigilant monitoring and investigation of detected activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of bitsadmin downloading a file to uncommon target folder",
      "answer": "In order to detect the usage of bitsadmin downloading a file to uncommon target folder, you should focus on monitoring process creation events within Windows environments. Specifically, watch for instances where the bitsadmin.exe tool is invoked (paying close attention to cases where the process image ends with '\\bitsadmin.exe' or the original filename matches 'bitsadmin.exe'). Furthermore, it\u2019s crucial to scrutinize the command line arguments looking for flags such as ' /transfer ', ' /create ', or ' /addfile ', which indicate the initiation of a download, creation of a job, or addition of a file to a job, respectively. Equally important, is to observe the specified target folder paths in these command lines. Be watchful for paths including '%AppData%', '%temp%', '%tmp%', '\\AppData\\Local\\', or 'C:\\Windows\\Temp\\', as these may reveal attempts to download files to less common, potentially suspicious locations. For analysis, ensure that you capture both the Command Line and Parent Command Line fields for context. While assessing these indicators, take note that there may be legitimate uses of bitsadmin that could lead to false positives, thus each trigger should be evaluated with caution. The identification strategy is categorized under a medium threat level, emphasizing the need for vigilant monitoring and investigation of detected activities."
    }
  },
  {
    "instruction": "How can I detect: pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34)",
    "context": "",
    "output": "In order to detect the pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34), you should monitor for process creation events on Windows systems. Specifically, look for instances where the command line ends with \"\\system32\\cleanmgr.exe /autoclean /d C:\", originating from a parent process with the command line \"C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule\". Additionally, these processes must be running with either high integrity levels or system integrity levels. This behavior is indicative of attempts to bypass User Account Control (UAC) using a technique involving scheduled tasks and the exploitation of the Windows cleanmgr.exe utility. Be aware that detections of this nature are considered high-level threats, although it is acknowledged that there could be unknown scenarios where this behavior might not indicate malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34)",
      "answer": "In order to detect the pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34), you should monitor for process creation events on Windows systems. Specifically, look for instances where the command line ends with \"\\system32\\cleanmgr.exe /autoclean /d C:\", originating from a parent process with the command line \"C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule\". Additionally, these processes must be running with either high integrity levels or system integrity levels. This behavior is indicative of attempts to bypass User Account Control (UAC) using a technique involving scheduled tasks and the exploitation of the Windows cleanmgr.exe utility. Be aware that detections of this nature are considered high-level threats, although it is acknowledged that there could be unknown scenarios where this behavior might not indicate malicious activity."
    }
  },
  {
    "instruction": "How to detect: certain command line flag combination used by \"devinit.exe\", which can be abused as a LOLBIN to download arbitrary MSI packages on a Windows system",
    "context": "",
    "output": "In order to detect a certain command line flag combination used by \"devinit.exe\", which can be abused as a LOLBIN to download arbitrary MSI packages on a Windows system, you should: Monitor process creation logs on Windows systems for occurrences where the command line includes both the flags '-t msi-install' and '-i http'. This specific combination of command line flags is indicative of an attempt to download MSI packages, potentially for malicious purposes, utilizing \"devinit.exe\" as a Living Off The Land Binary (LOLBIN). Note that while this activity can be legitimate, it warrants a closer examination due to its potential for abuse in downloading arbitrary MSI packages onto the Windows system. The level of concern for such detections is considered medium, though it's important to keep in mind that there might be instances where this behavior is legitimate and thus could result in unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "certain command line flag combination used by \"devinit.exe\", which can be abused as a LOLBIN to download arbitrary MSI packages on a Windows system",
      "answer": "In order to detect a certain command line flag combination used by \"devinit.exe\", which can be abused as a LOLBIN to download arbitrary MSI packages on a Windows system, you should: Monitor process creation logs on Windows systems for occurrences where the command line includes both the flags '-t msi-install' and '-i http'. This specific combination of command line flags is indicative of an attempt to download MSI packages, potentially for malicious purposes, utilizing \"devinit.exe\" as a Living Off The Land Binary (LOLBIN). Note that while this activity can be legitimate, it warrants a closer examination due to its potential for abuse in downloading arbitrary MSI packages onto the Windows system. The level of concern for such detections is considered medium, though it's important to keep in mind that there might be instances where this behavior is legitimate and thus could result in unknown false positives."
    }
  },
  {
    "instruction": "How can I detect: potential process patterns related to Cobalt Strike beacon activity",
    "context": "",
    "output": "In order to detect potential process patterns related to Cobalt Strike beacon activity, you should monitor Windows process creation logs for specific patterns in command line execution and parent process behavior. Look for processes initiated with the command line ending with 'cmd.exe /C whoami' that originate from a parent image starting with 'C:\\Temp\\'. Also, watch for parent images named 'runonce.exe' or 'dllhost.exe' that execute command lines containing both 'cmd.exe /c echo' and output redirection to a named pipe ('> \\\\\\\\.\\\\pipe'). Furthermore, identify instances where the parent command line contains 'cmd.exe /C echo' along with redirection to a named pipe, and the command line ends with 'conhost.exe 0xffffffff -ForceV1'. Additionally, flag events where the parent command line ends with '/C whoami' and the child process command line ends with 'conhost.exe 0xffffffff -ForceV1'. These specific patterns of process creation and command line execution are indicative of activities commonly associated with the Cobalt Strike beacon, a threat actor toolset used for establishing persistence and command and control in compromised systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential process patterns related to Cobalt Strike beacon activity",
      "answer": "In order to detect potential process patterns related to Cobalt Strike beacon activity, you should monitor Windows process creation logs for specific patterns in command line execution and parent process behavior. Look for processes initiated with the command line ending with 'cmd.exe /C whoami' that originate from a parent image starting with 'C:\\Temp\\'. Also, watch for parent images named 'runonce.exe' or 'dllhost.exe' that execute command lines containing both 'cmd.exe /c echo' and output redirection to a named pipe ('> \\\\\\\\.\\\\pipe'). Furthermore, identify instances where the parent command line contains 'cmd.exe /C echo' along with redirection to a named pipe, and the command line ends with 'conhost.exe 0xffffffff -ForceV1'. Additionally, flag events where the parent command line ends with '/C whoami' and the child process command line ends with 'conhost.exe 0xffffffff -ForceV1'. These specific patterns of process creation and command line execution are indicative of activities commonly associated with the Cobalt Strike beacon, a threat actor toolset used for establishing persistence and command and control in compromised systems."
    }
  },
  {
    "instruction": "How can I detect: conditional access changes. Is Initiated by (actor) approved to make changes? Review Modified Properties and compare \"old\" vs \"new\" value.",
    "context": "",
    "output": "In order to monitor and alert on conditional access changes, you should: Focus on analyzing audit logs from Azure. Look specifically for activities that include \"Update conditional access policy.\" This action might indicate changes being made to conditional access settings. It is essential to assess if the actor initiating these changes is authorized and to carefully review the modifications applied. Comparing the properties before and after the change can provide insights into the nature and impact of the modifications. Be aware of potential false positives, which could arise from misconfigured role permissions or situations where the user identity, user agent, and/or hostname making the changes could be considered normal for your environment. This monitoring has a medium-level severity, indicating a balanced need for scrutiny and alertness regarding these activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "conditional access changes. Is Initiated by (actor) approved to make changes? Review Modified Properties and compare \"old\" vs \"new\" value.",
      "answer": "In order to monitor and alert on conditional access changes, you should: Focus on analyzing audit logs from Azure. Look specifically for activities that include \"Update conditional access policy.\" This action might indicate changes being made to conditional access settings. It is essential to assess if the actor initiating these changes is authorized and to carefully review the modifications applied. Comparing the properties before and after the change can provide insights into the nature and impact of the modifications. Be aware of potential false positives, which could arise from misconfigured role permissions or situations where the user identity, user agent, and/or hostname making the changes could be considered normal for your environment. This monitoring has a medium-level severity, indicating a balanced need for scrutiny and alertness regarding these activities."
    }
  },
  {
    "instruction": "Please help me detect the following: This the exploitation of a NTFS vulnerability as reported without many details via Twitter",
    "context": "",
    "output": "Sure!\nIn order to detect the exploitation of a NTFS vulnerability as reported without many details via Twitter, you should: monitor Windows system logs, specifically looking for entries associated with the NTFS file system provider. Focus on events with an EventID of 55, which indicate an issue within the file system, originating from the 'File System Driver'. Be especially alert for descriptions that mention the filesystem contains a corrupted file record, specifically when the description also points out that the name of the file is \"\\\". Such events are unusual and, due to their specificity, false positives are unlikely. As this behavior may signify an attempt to exploit a known vulnerability in the NTFS file system, it's critical to investigate these alerts promptly. The severity of this detection is considered high due to the potential impact of exploiting NTFS vulnerabilities, highlighting the importance of swift response measures to mitigate possible security incidents.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This the exploitation of a NTFS vulnerability as reported without many details via Twitter",
      "answer": "In order to detect the exploitation of a NTFS vulnerability as reported without many details via Twitter, you should: monitor Windows system logs, specifically looking for entries associated with the NTFS file system provider. Focus on events with an EventID of 55, which indicate an issue within the file system, originating from the 'File System Driver'. Be especially alert for descriptions that mention the filesystem contains a corrupted file record, specifically when the description also points out that the name of the file is \"\\\". Such events are unusual and, due to their specificity, false positives are unlikely. As this behavior may signify an attempt to exploit a known vulnerability in the NTFS file system, it's critical to investigate these alerts promptly. The severity of this detection is considered high due to the potential impact of exploiting NTFS vulnerabilities, highlighting the importance of swift response measures to mitigate possible security incidents."
    }
  },
  {
    "instruction": "How to detect: suspicious start of rundll32.exe with a parent process of Explorer.exe. Variant of Raspberry Robin, as first reported by Red Canary.",
    "context": "",
    "output": "In order to detect suspicious start of rundll32.exe with a parent process of Explorer.exe, indicative of the variant of Raspberry Robin, as first reported by Red Canary, you should observe for process creation events in Windows environments. Specifically, monitor for instances where rundll32.exe is started and has explorer.exe as its parent process. Be cautious of selections based on the image name ending with '\\rundll32.exe' or having the original file name 'RUNDLL32.EXE', while also ensuring that the parent image ends with '\\explorer.exe'. However, to avoid false positives and enhance accuracy, exclude any command line instances that contain ' C:\\Windows\\System32\\' or end with ' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617', as these might indicate legitimate usage of rundll32.exe, such as Windows 10 volume control. This method is essential for identifying potentially malicious activity related to the execution of rundll32.exe under common parent processes which might otherwise seem benign. This detection logic specifically aids in identifying and mitigating strategies employed in the Raspberry Robin malware activity without immediately flagging regular system behaviors as threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious start of rundll32.exe with a parent process of Explorer.exe. Variant of Raspberry Robin, as first reported by Red Canary.",
      "answer": "In order to detect suspicious start of rundll32.exe with a parent process of Explorer.exe, indicative of the variant of Raspberry Robin, as first reported by Red Canary, you should observe for process creation events in Windows environments. Specifically, monitor for instances where rundll32.exe is started and has explorer.exe as its parent process. Be cautious of selections based on the image name ending with '\\rundll32.exe' or having the original file name 'RUNDLL32.EXE', while also ensuring that the parent image ends with '\\explorer.exe'. However, to avoid false positives and enhance accuracy, exclude any command line instances that contain ' C:\\Windows\\System32\\' or end with ' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617', as these might indicate legitimate usage of rundll32.exe, such as Windows 10 volume control. This method is essential for identifying potentially malicious activity related to the execution of rundll32.exe under common parent processes which might otherwise seem benign. This detection logic specifically aids in identifying and mitigating strategies employed in the Raspberry Robin malware activity without immediately flagging regular system behaviors as threats."
    }
  },
  {
    "instruction": "How can I detect: Identifies disabling of default Amazon Elastic Block Store (EBS) encryption in the current region.\nDisabling default encryption does not change the encryption status of your existing volumes.\n",
    "context": "",
    "output": "In order to identify the disabling of default Amazon Elastic Block Store (EBS) encryption in the current region, which does not affect the encryption status of your existing volumes, you should monitor Amazon Web Services (AWS) CloudTrail logs. Focus on logs where the event source is \"ec2.amazonaws.com\" and the event name is \"DisableEbsEncryptionByDefault\". This activity might be legitimate, such as system administrator activities or actions taken in development, user acceptance testing (UAT), or system acceptance testing (SAT) environments. Therefore, it is advised to apply this monitoring specifically to production accounts to avoid false positives. The severity level of this activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies disabling of default Amazon Elastic Block Store (EBS) encryption in the current region.\nDisabling default encryption does not change the encryption status of your existing volumes.\n",
      "answer": "In order to identify the disabling of default Amazon Elastic Block Store (EBS) encryption in the current region, which does not affect the encryption status of your existing volumes, you should monitor Amazon Web Services (AWS) CloudTrail logs. Focus on logs where the event source is \"ec2.amazonaws.com\" and the event name is \"DisableEbsEncryptionByDefault\". This activity might be legitimate, such as system administrator activities or actions taken in development, user acceptance testing (UAT), or system acceptance testing (SAT) environments. Therefore, it is advised to apply this monitoring specifically to production accounts to avoid false positives. The severity level of this activity is considered medium."
    }
  },
  {
    "instruction": "How can I detect: Bitsadmin connections to domains with uncommon TLDs",
    "context": "",
    "output": "In order to detect Bitsadmin connections to domains with uncommon TLDs, you should monitor proxy logs for connections initiated by the Microsoft Background Intelligent Transfer Service (BITS). Look specifically for user agents that start with 'Microsoft BITS/'. However, it's important to filter out connections to common top-level domains (TLDs) such as '.com', '.net', '.org', as well as specific domains known to be benign, like '.scdn.co' (used by Spotify for streaming) and '.sfx.ms' (a Microsoft domain). The presence of requests not directed towards these filtered domains could indicate suspicious activity, potentially linked to the use of Bitsadmin for malicious purposes, such as data exfiltration or malware download from uncommon or suspicious TLDs.\n\nEnsure that you record the client's IP address, the requested URI, and the user-agent string for further investigation. Be aware that there might be legitimate, though rare, cases of programs using Bitsadmin to update from regional TLDs, so it's essential to consider the context of detections and investigate potential false positives thoroughly. This approach is crucial in identifying the misuse of BITS, which could relate to various cyber attack tactics and techniques, primarily focusing on initial access, command and control, and exfiltration activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Bitsadmin connections to domains with uncommon TLDs",
      "answer": "In order to detect Bitsadmin connections to domains with uncommon TLDs, you should monitor proxy logs for connections initiated by the Microsoft Background Intelligent Transfer Service (BITS). Look specifically for user agents that start with 'Microsoft BITS/'. However, it's important to filter out connections to common top-level domains (TLDs) such as '.com', '.net', '.org', as well as specific domains known to be benign, like '.scdn.co' (used by Spotify for streaming) and '.sfx.ms' (a Microsoft domain). The presence of requests not directed towards these filtered domains could indicate suspicious activity, potentially linked to the use of Bitsadmin for malicious purposes, such as data exfiltration or malware download from uncommon or suspicious TLDs.\n\nEnsure that you record the client's IP address, the requested URI, and the user-agent string for further investigation. Be aware that there might be legitimate, though rare, cases of programs using Bitsadmin to update from regional TLDs, so it's essential to consider the context of detections and investigate potential false positives thoroughly. This approach is crucial in identifying the misuse of BITS, which could relate to various cyber attack tactics and techniques, primarily focusing on initial access, command and control, and exfiltration activities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential exploitation of CVE-2021-40444 via suspicious process patterns seen in in-the-wild exploitations",
    "context": "",
    "output": "In order to detect potential exploitation of CVE-2021-40444 via suspicious process patterns seen in in-the-wild exploitations, you should: Monitor the creation of processes on Windows systems with a focus on instances where 'control.exe' is the launched process. Special attention should be paid to situations where 'control.exe' is initiated by parent processes such as 'winword.exe' (Microsoft Word), 'powerpnt.exe' (Microsoft PowerPoint), or 'excel.exe' (Microsoft Excel). However, instances where the command line ends with '\\control.exe input.dll' or '\\control.exe\" input.dll' should be excluded from this scrutiny, as they are not relevant to this specific detection strategy. The presence of 'control.exe' being launched in this manner without these exclusions signals a high-risk activity that could indicate the exploitation of the CVE-2021-40444 vulnerability, leveraging Office applications to initiate potentially malicious processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential exploitation of CVE-2021-40444 via suspicious process patterns seen in in-the-wild exploitations",
      "answer": "In order to detect potential exploitation of CVE-2021-40444 via suspicious process patterns seen in in-the-wild exploitations, you should: Monitor the creation of processes on Windows systems with a focus on instances where 'control.exe' is the launched process. Special attention should be paid to situations where 'control.exe' is initiated by parent processes such as 'winword.exe' (Microsoft Word), 'powerpnt.exe' (Microsoft PowerPoint), or 'excel.exe' (Microsoft Excel). However, instances where the command line ends with '\\control.exe input.dll' or '\\control.exe\" input.dll' should be excluded from this scrutiny, as they are not relevant to this specific detection strategy. The presence of 'control.exe' being launched in this manner without these exclusions signals a high-risk activity that could indicate the exploitation of the CVE-2021-40444 vulnerability, leveraging Office applications to initiate potentially malicious processes."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious execution from ManageEngine as seen used by Mint Sandstorm",
    "context": "",
    "output": "In order to detect suspicious execution from ManageEngine as seen used by Mint Sandstorm, you should:\n\nFocus on the creation of processes within Windows operating systems, specifically monitoring the parent processes for instances of ManageEngine applications or the use of Java. You should be vigilant for child processes that involve PowerShell (either powershell.exe or powershell_ise.exe). Additionally, pay attention to PowerShell command lines that include specific keywords indicating potentially malicious activities, such as commands for dumping credentials, manipulating local group memberships, downloading files, executing web requests, handling encoded commands, and various other suspicious activities.\n\nAlso, monitor for the use of command-line tools targeting the Local Security Authority Subsystem Service (LSASS), including use cases that might involve dumping process memory or querying system information, commands initiating external network connections via tools like `wget` or `curl`, and the manipulation of user groups and system configurations through command-line interfaces. This includes adding users to local administrator groups, making unauthorized network configurations, disabling anti-spyware features, deleting shadow copies, and other actions that could undermine system integrity and security.\n\nPay extra attention to commands attempting to modify critical system settings through the Registry Editor, use of WMIC for process creation or deletion, and the utilization of utilities designed for backup management or shadow copy deletion, indicating an attempt to hamper system recovery.\n\nBe wary of false positive indicators and ensure that legitimate administrative activities, especially those involving ManageEngine sites or downloading Microsoft components, are not incorrectly flagged. The detection thresholds outlined are critical due to the potential impact and sophistication of the tactics involved.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious execution from ManageEngine as seen used by Mint Sandstorm",
      "answer": "In order to detect suspicious execution from ManageEngine as seen used by Mint Sandstorm, you should:\n\nFocus on the creation of processes within Windows operating systems, specifically monitoring the parent processes for instances of ManageEngine applications or the use of Java. You should be vigilant for child processes that involve PowerShell (either powershell.exe or powershell_ise.exe). Additionally, pay attention to PowerShell command lines that include specific keywords indicating potentially malicious activities, such as commands for dumping credentials, manipulating local group memberships, downloading files, executing web requests, handling encoded commands, and various other suspicious activities.\n\nAlso, monitor for the use of command-line tools targeting the Local Security Authority Subsystem Service (LSASS), including use cases that might involve dumping process memory or querying system information, commands initiating external network connections via tools like `wget` or `curl`, and the manipulation of user groups and system configurations through command-line interfaces. This includes adding users to local administrator groups, making unauthorized network configurations, disabling anti-spyware features, deleting shadow copies, and other actions that could undermine system integrity and security.\n\nPay extra attention to commands attempting to modify critical system settings through the Registry Editor, use of WMIC for process creation or deletion, and the utilization of utilities designed for backup management or shadow copy deletion, indicating an attempt to hamper system recovery.\n\nBe wary of false positive indicators and ensure that legitimate administrative activities, especially those involving ManageEngine sites or downloading Microsoft components, are not incorrectly flagged. The detection thresholds outlined are critical due to the potential impact and sophistication of the tactics involved."
    }
  },
  {
    "instruction": "Explain how should I detect the following: pattern of UAC Bypass via WSReset usable by default sysmon-config",
    "context": "",
    "output": "In order to detect the pattern of UAC Bypass via WSReset usable by default sysmon-config, you should monitor process creation events within Windows operating systems. Specifically, look for processes that end with the '\\wsreset.exe' in their image paths. This executable is particularly interesting as it is commonly involved in User Account Control (UAC) bypass techniques. The processes to pay close attention to are those running at High or System integrity levels, which indicates they have elevated privileges. It is essential to react swiftly to alerts regarding such activity given the high threat level, although it's important to note that the nature of false positives in this context is currently unknown. This approach aligns with understanding techniques related to privilege escalation and evasion tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass via WSReset usable by default sysmon-config",
      "answer": "In order to detect the pattern of UAC Bypass via WSReset usable by default sysmon-config, you should monitor process creation events within Windows operating systems. Specifically, look for processes that end with the '\\wsreset.exe' in their image paths. This executable is particularly interesting as it is commonly involved in User Account Control (UAC) bypass techniques. The processes to pay close attention to are those running at High or System integrity levels, which indicates they have elevated privileges. It is essential to react swiftly to alerts regarding such activity given the high threat level, although it's important to note that the nature of false positives in this context is currently unknown. This approach aligns with understanding techniques related to privilege escalation and evasion tactics."
    }
  },
  {
    "instruction": "How to detect: execution of WMIC in order to get a list of firewall and antivirus products",
    "context": "",
    "output": "In order to detect the execution of WMIC in order to get a list of firewall and antivirus products, you should: Monitor process creation logs on Windows systems for occurrences where the process image name ends with '\\wmic.exe' or the original file name is 'wmic.exe'. Additionally, check if the command line used for executing these processes contains the term 'Product'. Both criteria\u2014relating to the process image name and the command line\u2014must be met to consider the activity suspicious. While this detection is set at a medium level of urgency, be aware that not all instances may represent genuine threats, as false positives can occur without known patterns to exclude them reliably. This approach is crucial for identifying potential reconnaissance activities, where attackers use Windows Management Instrumentation Command-line (WMIC) to gather information about installed firewall and antivirus products on a target system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of WMIC in order to get a list of firewall and antivirus products",
      "answer": "In order to detect the execution of WMIC in order to get a list of firewall and antivirus products, you should: Monitor process creation logs on Windows systems for occurrences where the process image name ends with '\\wmic.exe' or the original file name is 'wmic.exe'. Additionally, check if the command line used for executing these processes contains the term 'Product'. Both criteria\u2014relating to the process image name and the command line\u2014must be met to consider the activity suspicious. While this detection is set at a medium level of urgency, be aware that not all instances may represent genuine threats, as false positives can occur without known patterns to exclude them reliably. This approach is crucial for identifying potential reconnaissance activities, where attackers use Windows Management Instrumentation Command-line (WMIC) to gather information about installed firewall and antivirus products on a target system."
    }
  },
  {
    "instruction": "Can you explain how to detect: Suspicious behaviours related to an actor tracked by Microsoft as SOURGUM",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious behaviors related to an actor tracked by Microsoft as SOURGUM, you should monitor the creation of processes on Windows systems, specifically looking for instances where the process image path includes unusual references to system directories or files. These suspicious activities can be indicative of an attack when the image path contains references to 'windows\\system32\\Physmem.sys', 'Windows\\system32\\ime\\SHARED\\WimBootConfigurations.ini', 'Windows\\system32\\ime\\IMEJP\\WimBootConfigurations.ini', or 'Windows\\system32\\ime\\IMETC\\WimBootConfigurations.ini'.\n\nAdditionally, be vigilant for modifications in the Windows registry that could signify malicious attempts to establish persistence or control over the system. This includes commands attempting to add registry values or keys, especially when the command line includes 'reg add' in conjunction with paths that contain 'windows\\system32\\filepath2' or 'windows\\system32\\ime'. Moreover, registry key modifications targeting specific CLSIDs such as '{7c857801-7381-11cf-884d-00aa004b2e24}\\inprocserver32' and '{cf4cc405-e2c5-4ddd-b3ce-5e7582d8c9fa}\\inprocserver32' are critical to monitor.\n\nThis detection strategy is essential due to the high risk and ambiguity surrounding these activities; there's a lack of known benign reasons for such behaviors to occur in a normal system operation context. The tags related to the MITRE ATT&CK framework to watch out for with this detection strategy are `Persistence`, `Privilege Escalation`, and `Defense Evasion`. These signify that the tactics used could involve gaining a persistent foothold on the system, elevating privileges to execute unauthorized actions, and evading detection mechanisms to maintain their presence undetected.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Suspicious behaviours related to an actor tracked by Microsoft as SOURGUM",
      "answer": "In order to detect suspicious behaviors related to an actor tracked by Microsoft as SOURGUM, you should monitor the creation of processes on Windows systems, specifically looking for instances where the process image path includes unusual references to system directories or files. These suspicious activities can be indicative of an attack when the image path contains references to 'windows\\system32\\Physmem.sys', 'Windows\\system32\\ime\\SHARED\\WimBootConfigurations.ini', 'Windows\\system32\\ime\\IMEJP\\WimBootConfigurations.ini', or 'Windows\\system32\\ime\\IMETC\\WimBootConfigurations.ini'.\n\nAdditionally, be vigilant for modifications in the Windows registry that could signify malicious attempts to establish persistence or control over the system. This includes commands attempting to add registry values or keys, especially when the command line includes 'reg add' in conjunction with paths that contain 'windows\\system32\\filepath2' or 'windows\\system32\\ime'. Moreover, registry key modifications targeting specific CLSIDs such as '{7c857801-7381-11cf-884d-00aa004b2e24}\\inprocserver32' and '{cf4cc405-e2c5-4ddd-b3ce-5e7582d8c9fa}\\inprocserver32' are critical to monitor.\n\nThis detection strategy is essential due to the high risk and ambiguity surrounding these activities; there's a lack of known benign reasons for such behaviors to occur in a normal system operation context. The tags related to the MITRE ATT&CK framework to watch out for with this detection strategy are `Persistence`, `Privilege Escalation`, and `Defense Evasion`. These signify that the tactics used could involve gaining a persistent foothold on the system, elevating privileges to execute unauthorized actions, and evading detection mechanisms to maintain their presence undetected."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Detect the creation of a service with a service binary located in a uncommon directory",
    "context": "",
    "output": "In order to detect the creation of a service with a service binary located in an uncommon directory, you should monitor Windows registry settings changes, specifically focusing on the creation or modification of service start options and image paths within the system's service configurations. Start by observing any registry operations where the event type is 'SetValue', indicating a change in value. Specifically, watch for changes within the 'HKLM\\System\\CurrentControlSet\\Services\\' key.\n\nFor the detection of suspicious service creation, look for modifications to the '\\Start' and '\\ImagePath' registry keys. These modifications could indicate attempts to set a service's startup type or specify a service's executable path. Specifically, pay close attention to registry changes where the target object path ends with '\\Start' or '\\ImagePath', and the modifications are made from directories within the user's AppData local or roaming folders, which are uncommon locations for legitimate system services.\n\nThe critical indicators to watch for include:\n- The service's binary being located in '\\AppData\\Local\\' or '\\AppData\\Roaming\\' paths, as legitimate services usually do not reside in these user-specific directories.\n- Changes to the service's start type, particularly settings to boot, system, or automatic start types represented by the specific DWORD values '0x00000000', '0x00000001', and '0x00000002' respectively, which are indicative of a service being configured to start in a manner typical for essential services, thereby raising suspicion when coupled with the uncommon directory location.\n- Ensure to exclude or disregard changes related to benign applications known to legitimately use these directories for their operational services, such as 'Zoom', to avoid unnecessary false positive alerts.\n\nThis monitoring approach utilizes Windows registry logs as its primary log source, focusing on events that indicate a potential unauthorized or malicious service creation. By deploying this strategy, security systems can effectively flag suspicious activities that align with tactics often employed by attackers to gain persistence or execute malicious payloads within a target system, thereby supporting the broader goal of enhancing the detection and prevention of unauthorized system modifications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect the creation of a service with a service binary located in a uncommon directory",
      "answer": "In order to detect the creation of a service with a service binary located in an uncommon directory, you should monitor Windows registry settings changes, specifically focusing on the creation or modification of service start options and image paths within the system's service configurations. Start by observing any registry operations where the event type is 'SetValue', indicating a change in value. Specifically, watch for changes within the 'HKLM\\System\\CurrentControlSet\\Services\\' key.\n\nFor the detection of suspicious service creation, look for modifications to the '\\Start' and '\\ImagePath' registry keys. These modifications could indicate attempts to set a service's startup type or specify a service's executable path. Specifically, pay close attention to registry changes where the target object path ends with '\\Start' or '\\ImagePath', and the modifications are made from directories within the user's AppData local or roaming folders, which are uncommon locations for legitimate system services.\n\nThe critical indicators to watch for include:\n- The service's binary being located in '\\AppData\\Local\\' or '\\AppData\\Roaming\\' paths, as legitimate services usually do not reside in these user-specific directories.\n- Changes to the service's start type, particularly settings to boot, system, or automatic start types represented by the specific DWORD values '0x00000000', '0x00000001', and '0x00000002' respectively, which are indicative of a service being configured to start in a manner typical for essential services, thereby raising suspicion when coupled with the uncommon directory location.\n- Ensure to exclude or disregard changes related to benign applications known to legitimately use these directories for their operational services, such as 'Zoom', to avoid unnecessary false positive alerts.\n\nThis monitoring approach utilizes Windows registry logs as its primary log source, focusing on events that indicate a potential unauthorized or malicious service creation. By deploying this strategy, security systems can effectively flag suspicious activities that align with tactics often employed by attackers to gain persistence or execute malicious payloads within a target system, thereby supporting the broader goal of enhancing the detection and prevention of unauthorized system modifications."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential use of Rubeus via registered new trusted logon process",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential use of Rubeus via registered new trusted logon process, you should: Monitor Windows Security logs for the occurrence of event ID 4611, which signifies a system security state change related to trusted logon processes. Specifically, watch for instances where the LogonProcessName corresponds to 'User32LogonProcesss'. This particular event ID combined with the identified logon process name can indicate a potential malicious activity, as it suggests the registration of a new trusted logon process which could be an attempt to abuse Rubeus, a tool commonly used in exploiting Kerberos authentication. The observation of such activity should be treated with a high level of suspicion due to its implications for security breach attempts, even though there might be situations where it triggers without malicious intent, the certainty of such cases is unknown. This activity relates to various tactics and techniques such as Credential Access, Persistence, and Privilege Escalation, as it potentially indicates an adversary's effort to gain higher-level permissions or maintain access within a compromised system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential use of Rubeus via registered new trusted logon process",
      "answer": "In order to detect potential use of Rubeus via registered new trusted logon process, you should: Monitor Windows Security logs for the occurrence of event ID 4611, which signifies a system security state change related to trusted logon processes. Specifically, watch for instances where the LogonProcessName corresponds to 'User32LogonProcesss'. This particular event ID combined with the identified logon process name can indicate a potential malicious activity, as it suggests the registration of a new trusted logon process which could be an attempt to abuse Rubeus, a tool commonly used in exploiting Kerberos authentication. The observation of such activity should be treated with a high level of suspicion due to its implications for security breach attempts, even though there might be situations where it triggers without malicious intent, the certainty of such cases is unknown. This activity relates to various tactics and techniques such as Credential Access, Persistence, and Privilege Escalation, as it potentially indicates an adversary's effort to gain higher-level permissions or maintain access within a compromised system."
    }
  },
  {
    "instruction": "Please help me detect the following: user log-off activity. Could be used for example to correlate information during forensic investigations",
    "context": "",
    "output": "Sure!\nIn order to detect a user log-off activity, which could be used for example to correlate information during forensic investigations, you should monitor Windows security logs for events with the Event IDs 4634 or 4647. These IDs are indicative of user log-off activities. This monitoring process is vital for gathering data that could be important during forensic investigations, where understanding when a user has logged off could provide crucial context or indicate suspicious behavior following certain actions within a system. It's important to note that while this detection strategy is aimed at capturing log-off events, the nature of what constitutes a false positive in this context is not specified, suggesting that any unexpected findings should be closely analyzed. The severity of findings based on these Event IDs is considered informational, highlighting their role more in investigative or audit scenarios rather than immediate security alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user log-off activity. Could be used for example to correlate information during forensic investigations",
      "answer": "In order to detect a user log-off activity, which could be used for example to correlate information during forensic investigations, you should monitor Windows security logs for events with the Event IDs 4634 or 4647. These IDs are indicative of user log-off activities. This monitoring process is vital for gathering data that could be important during forensic investigations, where understanding when a user has logged off could provide crucial context or indicate suspicious behavior following certain actions within a system. It's important to note that while this detection strategy is aimed at capturing log-off events, the nature of what constitutes a false positive in this context is not specified, suggesting that any unexpected findings should be closely analyzed. The severity of findings based on these Event IDs is considered informational, highlighting their role more in investigative or audit scenarios rather than immediate security alerts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: transferring files from system on a server bitstransfer Powershell cmdlets",
    "context": "",
    "output": "In order to detect transferring files from a system on a server using bitstransfer PowerShell cmdlets, you should: Monitor for the creation of processes associated with PowerShell (specifically powershell.exe, powershell_ise.exe, or pwsh.exe) on Windows systems, where the command line executed contains references to 'Get-BitsTransfer' or 'Add-BitsFile'. These specific cmdlets are indicative of attempts to transfer files, potentially for malicious purposes. It's important to be vigilant as there may be instances where these commands are used legitimately, but any detection should be investigated to determine if it aligns with normal system or user behavior. The severity of this rule is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "transferring files from system on a server bitstransfer Powershell cmdlets",
      "answer": "In order to detect transferring files from a system on a server using bitstransfer PowerShell cmdlets, you should: Monitor for the creation of processes associated with PowerShell (specifically powershell.exe, powershell_ise.exe, or pwsh.exe) on Windows systems, where the command line executed contains references to 'Get-BitsTransfer' or 'Add-BitsFile'. These specific cmdlets are indicative of attempts to transfer files, potentially for malicious purposes. It's important to be vigilant as there may be instances where these commands are used legitimately, but any detection should be investigated to determine if it aligns with normal system or user behavior. The severity of this rule is considered medium."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of Setres.exe to set the screen resolution and then potentially launch a file named \"choice\" (with any executable extension such as \".cmd\" or \".exe\") from the current execution path",
    "context": "",
    "output": "In order to detect the use of Setres.exe to set the screen resolution and then potentially launch a file named \"choice\" (with any executable extension such as \".cmd\" or \".exe\") from the current execution path, you should: Look for instances within the Windows operating environment where processes are created in such a manner that Setres.exe acts as a parent process, and subsequently, a process named \"choice\" (irrespective of its file extension) is initiated. This detection focuses on monitoring process creation logs to identify the sequence where Setres.exe is utilized, possibly to alter screen resolution settings as a precursor activity, followed by the execution of a \"choice\" executable, which could be indicative of unauthorized or malicious operations. Be mindful that there may be legitimate scenarios where Setres is used; therefore, not all detections should be considered malicious without additional context. The severity level of this rule is deemed medium, suggesting that while potentially indicative of suspicious activity, it may not always represent a critical security threat without further evidence of malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Setres.exe to set the screen resolution and then potentially launch a file named \"choice\" (with any executable extension such as \".cmd\" or \".exe\") from the current execution path",
      "answer": "In order to detect the use of Setres.exe to set the screen resolution and then potentially launch a file named \"choice\" (with any executable extension such as \".cmd\" or \".exe\") from the current execution path, you should: Look for instances within the Windows operating environment where processes are created in such a manner that Setres.exe acts as a parent process, and subsequently, a process named \"choice\" (irrespective of its file extension) is initiated. This detection focuses on monitoring process creation logs to identify the sequence where Setres.exe is utilized, possibly to alter screen resolution settings as a precursor activity, followed by the execution of a \"choice\" executable, which could be indicative of unauthorized or malicious operations. Be mindful that there may be legitimate scenarios where Setres is used; therefore, not all detections should be considered malicious without additional context. The severity level of this rule is deemed medium, suggesting that while potentially indicative of suspicious activity, it may not always represent a critical security threat without further evidence of malicious intent."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Identifies when ClusterRoles/Roles are being modified or deleted.",
    "context": "",
    "output": "In order to identify when ClusterRoles/Roles are being modified or deleted, you should monitor Azure Activity Logs for specific operations on Kubernetes clusters. Look for activities related to the write, delete, bind, or escalate actions on both Roles and ClusterRoles within a Microsoft Kubernetes Connected Cluster environment. These operations are indicated by operation names such as MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/WRITE, DELETE, BIND/ACTION, ESCALATE/ACTION and similarly for CLUSTERROLES.\n\nThese actions are significant as they could potentially indicate unauthorized attempts to modify the permissions and capabilities of users within a Kubernetes cluster, which could lead to unauthorized access or escalation of privileges within the cluster environment. It is crucial to verify whether such modifications are being performed by authenticated system administrators and if the identity, user agent, and hostname involved in these operations are expected to make such changes in your Kubernetes cluster environment.\n\nIt is also essential to be aware that modifications from unfamiliar users or unexpected sources should be carefully investigated to rule out any malicious intent or activities. If certain activities are regularly raising flags but are identified as known and safe behavior by system administrators, such actions could be considered for exemption to reduce false positive alerts.\n\nMonitor these activities with a medium level of attention, as while they may be legitimate administrative actions, they could also represent significant security risks if not properly audited and controlled. Identify and analyze any such modifications or deletions of ClusterRoles and Roles to ensure the secure management of access control within your Kubernetes clusters hosted on Azure.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies when ClusterRoles/Roles are being modified or deleted.",
      "answer": "In order to identify when ClusterRoles/Roles are being modified or deleted, you should monitor Azure Activity Logs for specific operations on Kubernetes clusters. Look for activities related to the write, delete, bind, or escalate actions on both Roles and ClusterRoles within a Microsoft Kubernetes Connected Cluster environment. These operations are indicated by operation names such as MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/WRITE, DELETE, BIND/ACTION, ESCALATE/ACTION and similarly for CLUSTERROLES.\n\nThese actions are significant as they could potentially indicate unauthorized attempts to modify the permissions and capabilities of users within a Kubernetes cluster, which could lead to unauthorized access or escalation of privileges within the cluster environment. It is crucial to verify whether such modifications are being performed by authenticated system administrators and if the identity, user agent, and hostname involved in these operations are expected to make such changes in your Kubernetes cluster environment.\n\nIt is also essential to be aware that modifications from unfamiliar users or unexpected sources should be carefully investigated to rule out any malicious intent or activities. If certain activities are regularly raising flags but are identified as known and safe behavior by system administrators, such actions could be considered for exemption to reduce false positive alerts.\n\nMonitor these activities with a medium level of attention, as while they may be legitimate administrative actions, they could also represent significant security risks if not properly audited and controlled. Identify and analyze any such modifications or deletions of ClusterRoles and Roles to ensure the secure management of access control within your Kubernetes clusters hosted on Azure."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious call to the user32.dll function that locks the user workstation",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a suspicious call to the user32.dll function that locks the user workstation, you should monitor for the creation of processes on Windows systems where the following criteria are met: \n\n1. The process image name ends with '\\rundll32.exe' or the original file name matches 'RUNDLL32.EXE'. This indicates the running process is rundll32.exe, which is a legitimate Windows program often misused in attacks.\n\n2. The parent process image name ends with '\\cmd.exe', identifying the command prompt as the parent process. This is common in script-based or command-line attacks.\n\n3. The command line includes 'user32.dll,' pointing to the specific DLL being called, and contains 'LockWorkStation'. Together, these suggest the use of rundll32.exe to call a function within user32.dll that locks the user's workstation. \n\nIt is important to log and review the names of the processes involved (both the Image and ParentImage) for any matches to the above criteria. However, be aware of legitimate scripts or shortcuts that may be used to lock the workstation, such as those that an end-user might have created for convenience. These are noted as potential false positives. The threat level for this activity is considered medium, indicating it's important but not an immediate high-priority threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious call to the user32.dll function that locks the user workstation",
      "answer": "In order to detect a suspicious call to the user32.dll function that locks the user workstation, you should monitor for the creation of processes on Windows systems where the following criteria are met: \n\n1. The process image name ends with '\\rundll32.exe' or the original file name matches 'RUNDLL32.EXE'. This indicates the running process is rundll32.exe, which is a legitimate Windows program often misused in attacks.\n\n2. The parent process image name ends with '\\cmd.exe', identifying the command prompt as the parent process. This is common in script-based or command-line attacks.\n\n3. The command line includes 'user32.dll,' pointing to the specific DLL being called, and contains 'LockWorkStation'. Together, these suggest the use of rundll32.exe to call a function within user32.dll that locks the user's workstation. \n\nIt is important to log and review the names of the processes involved (both the Image and ParentImage) for any matches to the above criteria. However, be aware of legitimate scripts or shortcuts that may be used to lock the workstation, such as those that an end-user might have created for convenience. These are noted as potential false positives. The threat level for this activity is considered medium, indicating it's important but not an immediate high-priority threat."
    }
  },
  {
    "instruction": "Please help me detect the following: potential exploitation attempts that target the Centos Web Panel 7 Unauthenticated Remote Code Execution CVE-2022-44877",
    "context": "",
    "output": "Sure!\nIn order to detect potential exploitation attempts that target the Centos Web Panel 7 Unauthenticated Remote Code Execution CVE-2022-44877, you should monitor web server logs for POST requests to '/login/index.php' that contain 'login=' within the query string. It's crucial to look for specific patterns indicative of reverse shell payloads. These patterns include the presence of 'login=$(' to signify potential shell command injections, as well as keywords associated with Python reverse shells such as 'base64', 'subprocess', 'socket', and '${IFS}'\u2014the latter being used to bypass the need for spaces in commands. Additionally, checking for Base64 encoded versions of the word \"python\" with different offsets like 'cHl0aG9u', 'B5dGhvb', and 'weXRob2' can help identify obfuscated attempts at executing Python code for unauthorized remote code execution. However, it's important to be aware that web vulnerability scanners might trigger similar patterns, which could be considered as false positives in this detection strategy. This approach carries a high level of importance due to the severity of potential exploitation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential exploitation attempts that target the Centos Web Panel 7 Unauthenticated Remote Code Execution CVE-2022-44877",
      "answer": "In order to detect potential exploitation attempts that target the Centos Web Panel 7 Unauthenticated Remote Code Execution CVE-2022-44877, you should monitor web server logs for POST requests to '/login/index.php' that contain 'login=' within the query string. It's crucial to look for specific patterns indicative of reverse shell payloads. These patterns include the presence of 'login=$(' to signify potential shell command injections, as well as keywords associated with Python reverse shells such as 'base64', 'subprocess', 'socket', and '${IFS}'\u2014the latter being used to bypass the need for spaces in commands. Additionally, checking for Base64 encoded versions of the word \"python\" with different offsets like 'cHl0aG9u', 'B5dGhvb', and 'weXRob2' can help identify obfuscated attempts at executing Python code for unauthorized remote code execution. However, it's important to be aware that web vulnerability scanners might trigger similar patterns, which could be considered as false positives in this detection strategy. This approach carries a high level of importance due to the severity of potential exploitation."
    }
  },
  {
    "instruction": "How to detect: Winword.exe loading a custom DLL using the /l flag",
    "context": "",
    "output": "In order to detect Winword.exe loading a custom DLL using the /l flag, you should focus on monitoring the creation of processes in Windows environments. Specifically, look for instances where the Microsoft Word executable, winword.exe, initiates a process and its command line includes the '/l' flag, which indicates that Word is being used to load a custom DLL. This can be a method of defense evasion, as attackers may attempt to stealthily execute malicious code by hijacking legitimate processes. Monitoring for such behavior is crucial, and any detection should capture the command line arguments used in the process creation event. Note that there might be cases where such detections are not indicative of malicious activity, and those should be considered when evaluating alerts. This technique is associated with defense evasion tactics and the specific technique of indirect command execution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Winword.exe loading a custom DLL using the /l flag",
      "answer": "In order to detect Winword.exe loading a custom DLL using the /l flag, you should focus on monitoring the creation of processes in Windows environments. Specifically, look for instances where the Microsoft Word executable, winword.exe, initiates a process and its command line includes the '/l' flag, which indicates that Word is being used to load a custom DLL. This can be a method of defense evasion, as attackers may attempt to stealthily execute malicious code by hijacking legitimate processes. Monitoring for such behavior is crucial, and any detection should capture the command line arguments used in the process creation event. Note that there might be cases where such detections are not indicative of malicious activity, and those should be considered when evaluating alerts. This technique is associated with defense evasion tactics and the specific technique of indirect command execution."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of the \"ConvertTo-SecureString\" cmdlet via the commandline. Which is fairly uncommon and could indicate potential suspicious activity",
    "context": "",
    "output": "Sure!\nIn order to detect usage of the \"ConvertTo-SecureString\" cmdlet via the commandline, which is fairly uncommon and could indicate potential suspicious activity, you should: Monitor process creation logs on Windows systems for instances where `powershell.exe` or `pwsh.exe` are initiated, specifically looking out for the executables named `PowerShell.EXE` or `pwsh.dll`. Further narrow down the detection by identifying command lines that contain the `ConvertTo-SecureString` command. This activity, while unusual, can sometimes be part of legitimate operations where passwords are passed to different PowerShell commands. As such, it's rated at a medium level of concern, and any detections should be investigated to rule out false positives or legitimate usage within the context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"ConvertTo-SecureString\" cmdlet via the commandline. Which is fairly uncommon and could indicate potential suspicious activity",
      "answer": "In order to detect usage of the \"ConvertTo-SecureString\" cmdlet via the commandline, which is fairly uncommon and could indicate potential suspicious activity, you should: Monitor process creation logs on Windows systems for instances where `powershell.exe` or `pwsh.exe` are initiated, specifically looking out for the executables named `PowerShell.EXE` or `pwsh.dll`. Further narrow down the detection by identifying command lines that contain the `ConvertTo-SecureString` command. This activity, while unusual, can sometimes be part of legitimate operations where passwords are passed to different PowerShell commands. As such, it's rated at a medium level of concern, and any detections should be investigated to rule out false positives or legitimate usage within the context."
    }
  },
  {
    "instruction": "How can I detect: command line usage of \"findstr\" to search for the \"passwords\" keyword in a variety of different languages",
    "context": "",
    "output": "In order to detect command line usage of \"findstr\" to search for the \"passwords\" keyword in a variety of different languages, you should: Focus on monitoring process creation activities within Windows operating systems. Specifically, look for instances where the process \"findstr.exe\" is initiated, which can also be identified through its original filename \"FINDSTR.EXE\". Additionally, scrutinize the command line inputs associated with these processes for occurrences of words that denote \"password\" in several languages, including Spanish (\"contrase\u00f1a\"), Polish (\"has\u0142o\"), Czech (\"heslo\"), Italian (\"parola\"), French (\"passe\"), German and English (\"passw\"), Portuguese (\"senha\"), Swedish (\"senord\"), and Cantonese (\"\u5bc6\u78bc\"). This comprehensive detection approach is crucial for identifying attempts to misuse the \"findstr\" utility in order to search for sensitive information, such as passwords, within files on a Windows system. The level of concern for these findings is considered medium, although it's important to note that there might be instances where such activity is legitimate, and thus could lead to unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "command line usage of \"findstr\" to search for the \"passwords\" keyword in a variety of different languages",
      "answer": "In order to detect command line usage of \"findstr\" to search for the \"passwords\" keyword in a variety of different languages, you should: Focus on monitoring process creation activities within Windows operating systems. Specifically, look for instances where the process \"findstr.exe\" is initiated, which can also be identified through its original filename \"FINDSTR.EXE\". Additionally, scrutinize the command line inputs associated with these processes for occurrences of words that denote \"password\" in several languages, including Spanish (\"contrase\u00f1a\"), Polish (\"has\u0142o\"), Czech (\"heslo\"), Italian (\"parola\"), French (\"passe\"), German and English (\"passw\"), Portuguese (\"senha\"), Swedish (\"senord\"), and Cantonese (\"\u5bc6\u78bc\"). This comprehensive detection approach is crucial for identifying attempts to misuse the \"findstr\" utility in order to search for sensitive information, such as passwords, within files on a Windows system. The level of concern for these findings is considered medium, although it's important to note that there might be instances where such activity is legitimate, and thus could lead to unknown false positives."
    }
  },
  {
    "instruction": "Can you explain how to detect: shell open key manipulation (exefile and ms-settings) used for persistence and the pattern of UAC Bypass using fodhelper.exe, computerdefaults.exe, slui.exe via registry keys (e.g. UACMe 33 or 62)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the shell open key manipulation (exefile and ms-settings) used for persistence and the pattern of UAC Bypass using fodhelper.exe, computerdefaults.exe, slui.exe via registry keys (e.g. UACMe 33 or 62), you should monitor Windows registry event logs for specific activities that indicate manipulation. Look for events where the registry `EventType` is `SetValue`, indicating a modification. Specifically, watch for changes to the registry key that ends with `'Classes\\ms-settings\\shell\\open\\command\\SymbolicLinkValue'` if they contain details resembling '\\Software\\Classes\\{'. This pattern is often indicative of attempts to bypass User Account Control (UAC) and achieve persistence by manipulating shell open commands typically protected by UAC.\n\nAdditionally, pay attention to modifications of the registry key ending with `'Classes\\ms-settings\\shell\\open\\command\\DelegateExecute'`. Changes to this key are another way attackers attempt to maintain persistence or bypass UAC without triggering standard security alerts.\n\nFurthermore, another critical pointer to manipulation involves monitoring for the setting of the default value in two specific registry keys: `'Classes\\ms-settings\\shell\\open\\command\\(Default)'` and `'Classes\\exefile\\shell\\open\\command\\(Default)'`. The presence of a modification event for these keys, especially when not merely clearing these values (`'(Empty)'`), is a strong indication of an attempt to hijack legitimate Windows functions for malicious purposes such as maintaining persistence or facilitating attacks that circumvent UAC mechanisms.\n\nKeep in mind that while monitoring for these modifications, some events might not signify malicious activities (`Unknown` false positives), and diligence is required to differentiate between benign and malicious modifications. The monitoring of these registry modifications is crucial for defending against sophisticated attack techniques designed to exploit Windows' settings and mechanisms for persistence and UAC bypasses.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "shell open key manipulation (exefile and ms-settings) used for persistence and the pattern of UAC Bypass using fodhelper.exe, computerdefaults.exe, slui.exe via registry keys (e.g. UACMe 33 or 62)",
      "answer": "In order to detect the shell open key manipulation (exefile and ms-settings) used for persistence and the pattern of UAC Bypass using fodhelper.exe, computerdefaults.exe, slui.exe via registry keys (e.g. UACMe 33 or 62), you should monitor Windows registry event logs for specific activities that indicate manipulation. Look for events where the registry `EventType` is `SetValue`, indicating a modification. Specifically, watch for changes to the registry key that ends with `'Classes\\ms-settings\\shell\\open\\command\\SymbolicLinkValue'` if they contain details resembling '\\Software\\Classes\\{'. This pattern is often indicative of attempts to bypass User Account Control (UAC) and achieve persistence by manipulating shell open commands typically protected by UAC.\n\nAdditionally, pay attention to modifications of the registry key ending with `'Classes\\ms-settings\\shell\\open\\command\\DelegateExecute'`. Changes to this key are another way attackers attempt to maintain persistence or bypass UAC without triggering standard security alerts.\n\nFurthermore, another critical pointer to manipulation involves monitoring for the setting of the default value in two specific registry keys: `'Classes\\ms-settings\\shell\\open\\command\\(Default)'` and `'Classes\\exefile\\shell\\open\\command\\(Default)'`. The presence of a modification event for these keys, especially when not merely clearing these values (`'(Empty)'`), is a strong indication of an attempt to hijack legitimate Windows functions for malicious purposes such as maintaining persistence or facilitating attacks that circumvent UAC mechanisms.\n\nKeep in mind that while monitoring for these modifications, some events might not signify malicious activities (`Unknown` false positives), and diligence is required to differentiate between benign and malicious modifications. The monitoring of these registry modifications is crucial for defending against sophisticated attack techniques designed to exploit Windows' settings and mechanisms for persistence and UAC bypasses."
    }
  },
  {
    "instruction": "How can I detect: Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against",
    "context": "",
    "output": "In order to execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against, you should: monitor the process creation logs on Windows systems for instances where the 'hashcat.exe' application is executed. Specifically, look for executions of 'hashcat.exe' that include the command line flags '-a ', '-m 1000 ', and '-r ', which are indicative of an attack that utilizes Hashcat to crack Windows account passwords by leveraging the SAM file and a list of passwords. Be aware that there may be false positives, as other tools might use similar command line arguments. The severity of this detection is considered high, underscoring the importance of vigilance against such activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against",
      "answer": "In order to execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against, you should: monitor the process creation logs on Windows systems for instances where the 'hashcat.exe' application is executed. Specifically, look for executions of 'hashcat.exe' that include the command line flags '-a ', '-m 1000 ', and '-r ', which are indicative of an attack that utilizes Hashcat to crack Windows account passwords by leveraging the SAM file and a list of passwords. Be aware that there may be false positives, as other tools might use similar command line arguments. The severity of this detection is considered high, underscoring the importance of vigilance against such activities."
    }
  },
  {
    "instruction": "How to detect: shell32.dll executing a DLL in a suspicious directory",
    "context": "",
    "output": "In order to detect shell32.dll executing a DLL in a suspicious directory, you should monitor process creation events on Windows systems. Specifically, keep an eye out for instances where the process image name ends with '\\rundll32.exe' or where the original file name is explicitly 'RUNDLL32.EXE'. Additionally, scrutinize the command line for the following patterns: the command must include both 'shell32.dll' and 'Control_RunDLL' to match, and it may contain references to common ephemeral or user profile directories such as '%AppData%', '%LocalAppData%', '%Temp%', '%tmp%', '\\AppData\\', '\\Temp\\', or '\\Users\\Public\\'. For detection to be considered valid, both the image name or file name criteria and the command line conditions must be met. This approach aims to highlight activities potentially related to malware execution or persistence mechanisms that abuse shell32.dll to load malicious DLLs from directories that attackers often exploit for stealth.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "shell32.dll executing a DLL in a suspicious directory",
      "answer": "In order to detect shell32.dll executing a DLL in a suspicious directory, you should monitor process creation events on Windows systems. Specifically, keep an eye out for instances where the process image name ends with '\\rundll32.exe' or where the original file name is explicitly 'RUNDLL32.EXE'. Additionally, scrutinize the command line for the following patterns: the command must include both 'shell32.dll' and 'Control_RunDLL' to match, and it may contain references to common ephemeral or user profile directories such as '%AppData%', '%LocalAppData%', '%Temp%', '%tmp%', '\\AppData\\', '\\Temp\\', or '\\Users\\Public\\'. For detection to be considered valid, both the image name or file name criteria and the command line conditions must be met. This approach aims to highlight activities potentially related to malware execution or persistence mechanisms that abuse shell32.dll to load malicious DLLs from directories that attackers often exploit for stealth."
    }
  },
  {
    "instruction": "Can you explain how to detect: Attackers can use print.exe for remote file copy",
    "context": "",
    "output": "Certainly!\n\nIn order to prevent attackers from using print.exe for remote file copy, you should monitor for the creation of processes on Windows systems where the process name ends with '\\print.exe'. Additionally, check if the command line initiating the process starts with 'print' and contains both '/D' and '.exe' in any order. However, exclude any instances where the command line explicitly contains 'print.exe' to reduce false positives. This approach focuses on identifying and mitigating tactics and techniques related to Initial Access and Execution, by specifically looking for abuse of the printing utility which can be leveraged in an unconventional way to copy files remotely.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Attackers can use print.exe for remote file copy",
      "answer": "In order to prevent attackers from using print.exe for remote file copy, you should monitor for the creation of processes on Windows systems where the process name ends with '\\print.exe'. Additionally, check if the command line initiating the process starts with 'print' and contains both '/D' and '.exe' in any order. However, exclude any instances where the command line explicitly contains 'print.exe' to reduce false positives. This approach focuses on identifying and mitigating tactics and techniques related to Initial Access and Execution, by specifically looking for abuse of the printing utility which can be leveraged in an unconventional way to copy files remotely."
    }
  },
  {
    "instruction": "How can I detect: remote task creation via at.exe or API interacting with ATSVC namedpipe",
    "context": "",
    "output": "In order to detect remote task creation via at.exe or API interacting with ATSVC namedpipe, you should: Monitor SMB (Server Message Block) file activities for specific patterns that indicate misuse of the SMB service for remote task management. Specifically, pay attention to file activities within the SMB protocol that involve access to the \"IPC$\" share, which is a special share that Windows computers use for inter-process communication. Additionally, look for any interaction with a file or named pipe called \"atsvc\", as this is a common tactic used by attackers to remotely create tasks on a target machine, typically utilizing the \"at.exe\" command or directly interacting with the ATSVC named pipe through an API. As such activities could potentially represent malicious behavior, it's important to log and analyze these interactions. Note that this monitoring is configured with a medium alert level due to the potential for false positives, as the exact circumstances under which these patterns may be benign are currently unknown and therefore any detection should be investigated to confirm the nature of the activity. This detection process is crucial for defending against tactics and techniques that involve Execution through remote task creation, specifically tying back to MITRE ATT&CK framework's documentation on these types of attack methodologies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote task creation via at.exe or API interacting with ATSVC namedpipe",
      "answer": "In order to detect remote task creation via at.exe or API interacting with ATSVC namedpipe, you should: Monitor SMB (Server Message Block) file activities for specific patterns that indicate misuse of the SMB service for remote task management. Specifically, pay attention to file activities within the SMB protocol that involve access to the \"IPC$\" share, which is a special share that Windows computers use for inter-process communication. Additionally, look for any interaction with a file or named pipe called \"atsvc\", as this is a common tactic used by attackers to remotely create tasks on a target machine, typically utilizing the \"at.exe\" command or directly interacting with the ATSVC named pipe through an API. As such activities could potentially represent malicious behavior, it's important to log and analyze these interactions. Note that this monitoring is configured with a medium alert level due to the potential for false positives, as the exact circumstances under which these patterns may be benign are currently unknown and therefore any detection should be investigated to confirm the nature of the activity. This detection process is crucial for defending against tactics and techniques that involve Execution through remote task creation, specifically tying back to MITRE ATT&CK framework's documentation on these types of attack methodologies."
    }
  },
  {
    "instruction": "How to detect: usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files. It can be abused to run malicious \".xbap\" files any bypass AWL",
    "context": "",
    "output": "In order to detect usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files. It can be abused to run malicious \".xbap\" files and bypass AWL, you should monitor for the execution of processes on Windows systems, specifically looking for instances where \"PresentationHost.exe\" is initiated. This detection focuses on identifying the execution of \"PresentationHost.exe\" or any processes ending with \"\\presentationhost.exe\", in combination with command lines that include '.xbap' strings, indicating the running of Browser Application (.xbap) files. However, it's crucial to exclude command lines that contain references to 'C:\\Windows\\' or 'C:\\Program Files' to minimize the chances of flagging legitimate usage of \"PresentationHost\". This approach aims to catch malicious activities involving the abuse of \"PresentationHost\" to bypass Application Whitelisting (AWL) mechanisms by executing potentially harmful \".xbap\" files.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files. It can be abused to run malicious \".xbap\" files any bypass AWL",
      "answer": "In order to detect usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files. It can be abused to run malicious \".xbap\" files and bypass AWL, you should monitor for the execution of processes on Windows systems, specifically looking for instances where \"PresentationHost.exe\" is initiated. This detection focuses on identifying the execution of \"PresentationHost.exe\" or any processes ending with \"\\presentationhost.exe\", in combination with command lines that include '.xbap' strings, indicating the running of Browser Application (.xbap) files. However, it's crucial to exclude command lines that contain references to 'C:\\Windows\\' or 'C:\\Program Files' to minimize the chances of flagging legitimate usage of \"PresentationHost\". This approach aims to catch malicious activities involving the abuse of \"PresentationHost\" to bypass Application Whitelisting (AWL) mechanisms by executing potentially harmful \".xbap\" files."
    }
  },
  {
    "instruction": "Can you explain how to detect: attack technique pass the hash which is used to move laterally inside the network",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the attack technique pass the hash which is used to move laterally inside the network, you should monitor specific events and conditions within Windows security logs. Focus on capturing event IDs 4624, which signify a successful logon, and 4625, which indicate a failed logon attempt. These events are particularly relevant when the logon type is 3, representing a network logon which is commonly used during lateral movement attempts. Additionally, the logon process name should be 'NtLmSsp', which is indicative of NTLM (NT LAN Manager) authentication, often exploited in pass the hash attacks.\n\nIt is crucial to pay attention to the originating and target workstation names in these events. The condition implies that both the workstation from where the logon attempt was made and the target computer should match your network's workstation naming conventions (referred here as '%Workstations%'). This helps in pinpointing the attempts that are specifically targeted at moving laterally within your network.\n\nHowever, it's important to exclude any logon attempts that are recorded with the target username as 'ANONYMOUS LOGON'. These might not be related to malicious activity and can lead to false positives. Speaking of which, legitimate administrator activities could also trigger these conditions and should be considered when evaluating alerts.\n\nThis focused monitoring approach, by analyzing network logon attempts via the NTLM authentication involving specific workstations, aids in discerning potential lateral movement activities facilitated by pass the hash attacks. It stands on the medium level of alert severity due to the balance between the necessity of detecting malicious activities and the potential for false positives, such as routine administrator tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attack technique pass the hash which is used to move laterally inside the network",
      "answer": "In order to detect the attack technique pass the hash which is used to move laterally inside the network, you should monitor specific events and conditions within Windows security logs. Focus on capturing event IDs 4624, which signify a successful logon, and 4625, which indicate a failed logon attempt. These events are particularly relevant when the logon type is 3, representing a network logon which is commonly used during lateral movement attempts. Additionally, the logon process name should be 'NtLmSsp', which is indicative of NTLM (NT LAN Manager) authentication, often exploited in pass the hash attacks.\n\nIt is crucial to pay attention to the originating and target workstation names in these events. The condition implies that both the workstation from where the logon attempt was made and the target computer should match your network's workstation naming conventions (referred here as '%Workstations%'). This helps in pinpointing the attempts that are specifically targeted at moving laterally within your network.\n\nHowever, it's important to exclude any logon attempts that are recorded with the target username as 'ANONYMOUS LOGON'. These might not be related to malicious activity and can lead to false positives. Speaking of which, legitimate administrator activities could also trigger these conditions and should be considered when evaluating alerts.\n\nThis focused monitoring approach, by analyzing network logon attempts via the NTLM authentication involving specific workstations, aids in discerning potential lateral movement activities facilitated by pass the hash attacks. It stands on the medium level of alert severity due to the balance between the necessity of detecting malicious activities and the potential for false positives, such as routine administrator tasks."
    }
  },
  {
    "instruction": "How can I detect: PowerShell creating a PowerShell file (.ps1). While often times this behavior is benign, sometimes it can be a sign of a dropper script trying to achieve persistence.",
    "context": "",
    "output": "In order to detect PowerShell creating a PowerShell file (.ps1), which might indicate benign activity or potentially a dropper script trying to achieve persistence, you should focus on monitoring file events on Windows systems. Specifically, keep an eye out for instances where 'powershell.exe' or 'pwsh.exe' results in the creation of '.ps1' files. This behavior can be captured by evaluating file event logs for occurrences where the image path ends with either '\\powershell.exe' or '\\pwsh.exe' and the target filename ends with '.ps1'. However, it's important to exclude certain cases to reduce false positives: ignore any instances where the target filename contains '__PSScriptPolicyTest_', starts with 'C:\\Users\\' and contains '\\AppData\\Local\\Temp\\', or begins with 'C:\\Windows\\Temp\\'. Keep in mind that the exact nature of false positives may vary based on the environment and the PowerShell scripts being utilized. It may be necessary to apply additional filters based on the specific context to accurately identify suspicious activity without overwhelming the system with benign triggers. This approach aims at striking a balance between vigilance against potential threats and minimizing the noise from false alarms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell creating a PowerShell file (.ps1). While often times this behavior is benign, sometimes it can be a sign of a dropper script trying to achieve persistence.",
      "answer": "In order to detect PowerShell creating a PowerShell file (.ps1), which might indicate benign activity or potentially a dropper script trying to achieve persistence, you should focus on monitoring file events on Windows systems. Specifically, keep an eye out for instances where 'powershell.exe' or 'pwsh.exe' results in the creation of '.ps1' files. This behavior can be captured by evaluating file event logs for occurrences where the image path ends with either '\\powershell.exe' or '\\pwsh.exe' and the target filename ends with '.ps1'. However, it's important to exclude certain cases to reduce false positives: ignore any instances where the target filename contains '__PSScriptPolicyTest_', starts with 'C:\\Users\\' and contains '\\AppData\\Local\\Temp\\', or begins with 'C:\\Windows\\Temp\\'. Keep in mind that the exact nature of false positives may vary based on the environment and the PowerShell scripts being utilized. It may be necessary to apply additional filters based on the specific context to accurately identify suspicious activity without overwhelming the system with benign triggers. This approach aims at striking a balance between vigilance against potential threats and minimizing the noise from false alarms."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location.",
    "context": "",
    "output": "In order to detect potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location, you should: Look for instances where \"SystemResetPlatform.exe\" loads a DLL named \"RjvPlatform.dll\" in the Windows environment, specifically within the image loading category. It is vital to ensure that the \"SystemResetPlatform.exe\" process is not operating from its legitimate path, which is typically \"C:\\Windows\\System32\\SystemResetPlatform\\\". The detection focuses on identifying unusual or suspicious behavior that deviates from the norm, such as the loading of \"RjvPlatform.dll\" from paths other than the designated legitimate one. This is indicative of an attempt to exploit the legitimate \"SystemResetPlatform.exe\" process for malicious purposes, commonly seen in techniques involving DLL sideloading. The effectiveness of this detection is deemed high, with false positives being unlikely, signifying a strong indicator of malicious activity when such criteria are met.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location.",
      "answer": "In order to detect potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location, you should: Look for instances where \"SystemResetPlatform.exe\" loads a DLL named \"RjvPlatform.dll\" in the Windows environment, specifically within the image loading category. It is vital to ensure that the \"SystemResetPlatform.exe\" process is not operating from its legitimate path, which is typically \"C:\\Windows\\System32\\SystemResetPlatform\\\". The detection focuses on identifying unusual or suspicious behavior that deviates from the norm, such as the loading of \"RjvPlatform.dll\" from paths other than the designated legitimate one. This is indicative of an attempt to exploit the legitimate \"SystemResetPlatform.exe\" process for malicious purposes, commonly seen in techniques involving DLL sideloading. The effectiveness of this detection is deemed high, with false positives being unlikely, signifying a strong indicator of malicious activity when such criteria are met."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint, you should focus on monitoring process creation events in Windows systems. Look for particular indicators such as the execution of processes remotely, the use of tools like Sysinternals PsExec, or processes with descriptions starting with \"Windows PowerShell\" or \"pwsh\". Also, pay attention to processes with specific original file names including but not limited to 'powershell.exe', 'pwsh.dll', 'powershell_ise.exe', 'psexec.exe', 'psexec.c', and various others known to be used in malicious activities.\n\nIt's critical to filter out false positives by excluding processes with images ending in common legitimate names such as '\\powershell.exe', '\\pwsh.exe', among others. This is important as attackers might rename binaries to slightly altered names that are hard to distinguish from the originals at a quick glance. Be aware of potential false positives like custom applications using renamed binaries with slight changes to the binary name, or the use of PsExec installed via the Windows Store, which doesn't contain the original filename field leading to possible false negatives.\n\nThis detection strategy is grounded in tactics and techniques akin to Credential Access, Execution, Defense Evasion, and Discovery, with a high importance level assigned due to the criticality of identifying and reacting to such malicious activities promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.",
      "answer": "In order to detect the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint, you should focus on monitoring process creation events in Windows systems. Look for particular indicators such as the execution of processes remotely, the use of tools like Sysinternals PsExec, or processes with descriptions starting with \"Windows PowerShell\" or \"pwsh\". Also, pay attention to processes with specific original file names including but not limited to 'powershell.exe', 'pwsh.dll', 'powershell_ise.exe', 'psexec.exe', 'psexec.c', and various others known to be used in malicious activities.\n\nIt's critical to filter out false positives by excluding processes with images ending in common legitimate names such as '\\powershell.exe', '\\pwsh.exe', among others. This is important as attackers might rename binaries to slightly altered names that are hard to distinguish from the originals at a quick glance. Be aware of potential false positives like custom applications using renamed binaries with slight changes to the binary name, or the use of PsExec installed via the Windows Store, which doesn't contain the original filename field leading to possible false negatives.\n\nThis detection strategy is grounded in tactics and techniques akin to Credential Access, Execution, Defense Evasion, and Discovery, with a high importance level assigned due to the criticality of identifying and reacting to such malicious activities promptly."
    }
  },
  {
    "instruction": "Explain how should I detect the following: presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.\nThis is used as an obfuscation and masquerading techniques. Only \"perfect\" homoglyphs are included; these are characters that\nare indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.\n",
    "context": "",
    "output": "In order to detect the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters, which is used as an obfuscation and masquerading techniques. Only \"perfect\" homoglyphs are included; these are characters that are indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters, you should: Monitor process creation events on Windows systems for command lines that contain specific Unicode characters. These characters include a variety of uppercase and lowercase letters from Cyrillic, Greek, and other alphabets that visually match ASCII letters. Specifically, look for uppercase Cyrillic representations of the letters A through X, as well as a few additional characters resembling S, I, J, Y, G, Q, and W. Also, look for lowercase Cyrillic characters that resemble a, e, o, p, c, x, s, i, l, j, h, d, q, and w. Greek uppercase letters similar to A, B, E, Z, H, I, K, M, N, O, P, T, Y, and X should also be monitored, alongside lowercase Greek character resembling o. Applying this detection strategy will help in identifying attempts to use homoglyphs for obfuscation, which could indicate an attempt at masquerading potentially malicious processes. Be aware of potential false positives, especially in environments where Cyrillic, Greek, or similar alphabets are commonly used, and tune the detection accordingly to minimize these occurrences. The tags associated with this attack technique include Defense Evasion and Execution, which underline the methods adversaries might employ to evade detection and execute malicious code or commands.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.\nThis is used as an obfuscation and masquerading techniques. Only \"perfect\" homoglyphs are included; these are characters that\nare indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.\n",
      "answer": "In order to detect the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters, which is used as an obfuscation and masquerading techniques. Only \"perfect\" homoglyphs are included; these are characters that are indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters, you should: Monitor process creation events on Windows systems for command lines that contain specific Unicode characters. These characters include a variety of uppercase and lowercase letters from Cyrillic, Greek, and other alphabets that visually match ASCII letters. Specifically, look for uppercase Cyrillic representations of the letters A through X, as well as a few additional characters resembling S, I, J, Y, G, Q, and W. Also, look for lowercase Cyrillic characters that resemble a, e, o, p, c, x, s, i, l, j, h, d, q, and w. Greek uppercase letters similar to A, B, E, Z, H, I, K, M, N, O, P, T, Y, and X should also be monitored, alongside lowercase Greek character resembling o. Applying this detection strategy will help in identifying attempts to use homoglyphs for obfuscation, which could indicate an attempt at masquerading potentially malicious processes. Be aware of potential false positives, especially in environments where Cyrillic, Greek, or similar alphabets are commonly used, and tune the detection accordingly to minimize these occurrences. The tags associated with this attack technique include Defense Evasion and Execution, which underline the methods adversaries might employ to evade detection and execute malicious code or commands."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of suspicious accounts similar to ANONYMOUS LOGON, such as using additional spaces. Created as an covering detection for exclusion of Logon Type 3 from ANONYMOUS LOGON accounts.",
    "context": "",
    "output": "In order to detect the creation of suspicious accounts similar to ANONYMOUS LOGON, such as using additional spaces, created as a covering detection for exclusion of Logon Type 3 from ANONYMOUS LOGON accounts, you should: concentrate on Windows security service logs. Specifically, you need to monitor for events with an ID of 4720, which signals the creation of a user account. What's particularly important is to look for user accounts that appear to be attempting to disguise themselves as the built-in Windows \"ANONYMOUS LOGON\" account by incorporating similar naming conventions, like adding extra spaces or slightly altering the name while retaining the words \"ANONYMOUS\" and \"LOGON\". This detection strategy is crucial because it helps identify potential malicious activity where attackers might be trying to create user accounts that could bypass security measures intended to restrict or monitor the usual \"ANONYMOUS LOGON\" accounts. Given the nature of this detection, encountering false positives is acknowledged as possible but unspecified, highlighting the need for careful investigation of each detection. This approach is designed with a high priority level due to the potential security risks associated with unrecognized or unauthorized accounts that look similar to system accounts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of suspicious accounts similar to ANONYMOUS LOGON, such as using additional spaces. Created as an covering detection for exclusion of Logon Type 3 from ANONYMOUS LOGON accounts.",
      "answer": "In order to detect the creation of suspicious accounts similar to ANONYMOUS LOGON, such as using additional spaces, created as a covering detection for exclusion of Logon Type 3 from ANONYMOUS LOGON accounts, you should: concentrate on Windows security service logs. Specifically, you need to monitor for events with an ID of 4720, which signals the creation of a user account. What's particularly important is to look for user accounts that appear to be attempting to disguise themselves as the built-in Windows \"ANONYMOUS LOGON\" account by incorporating similar naming conventions, like adding extra spaces or slightly altering the name while retaining the words \"ANONYMOUS\" and \"LOGON\". This detection strategy is crucial because it helps identify potential malicious activity where attackers might be trying to create user accounts that could bypass security measures intended to restrict or monitor the usual \"ANONYMOUS LOGON\" accounts. Given the nature of this detection, encountering false positives is acknowledged as possible but unspecified, highlighting the need for careful investigation of each detection. This approach is designed with a high priority level due to the potential security risks associated with unrecognized or unauthorized accounts that look similar to system accounts."
    }
  },
  {
    "instruction": "How can I detect: application credential is modified.",
    "context": "",
    "output": "In order to identify when an application credential is modified, you should monitor activity logs in the Azure environment for any events related to the update of application credentials specifically under the certificates and secrets management category. Be watchful for log entries with messages such as \"Update application - Certificates and secrets management\". This monitoring is crucial because changes in application credentials can sometimes indicate unauthorized attempts to gain access or alter application behavior.\n\nIt's important to note that there are cases where the modification of application credentials is part of routine maintenance or administrative work conducted by system administrators. Therefore, when you receive an alert, verify the identity of the user, the user agent, and/or the hostname involved in the change to ensure that it aligns with expected behavior within your environment.\n\nAdditionally, pay special attention to credential modifications from unfamiliar users, as these could potentially signify malicious activities. If upon investigation, you find that certain repetitive behavior is causing false positives and is indeed legitimate, consider creating exceptions for those activities to refine the effectiveness of the monitoring process.\n\nThis procedure is tagged under specific tactics and techniques that include Credential Access, specifically the management of certificates and secrets which could be targeted by attackers attempting to breach or escalate privileges within a network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "application credential is modified.",
      "answer": "In order to identify when an application credential is modified, you should monitor activity logs in the Azure environment for any events related to the update of application credentials specifically under the certificates and secrets management category. Be watchful for log entries with messages such as \"Update application - Certificates and secrets management\". This monitoring is crucial because changes in application credentials can sometimes indicate unauthorized attempts to gain access or alter application behavior.\n\nIt's important to note that there are cases where the modification of application credentials is part of routine maintenance or administrative work conducted by system administrators. Therefore, when you receive an alert, verify the identity of the user, the user agent, and/or the hostname involved in the change to ensure that it aligns with expected behavior within your environment.\n\nAdditionally, pay special attention to credential modifications from unfamiliar users, as these could potentially signify malicious activities. If upon investigation, you find that certain repetitive behavior is causing false positives and is indeed legitimate, consider creating exceptions for those activities to refine the effectiveness of the monitoring process.\n\nThis procedure is tagged under specific tactics and techniques that include Credential Access, specifically the management of certificates and secrets which could be targeted by attackers attempting to breach or escalate privileges within a network."
    }
  },
  {
    "instruction": "How to detect: new and suspicious printer port creation in Registry that could be an attempt to exploit CVE-2020-1048",
    "context": "",
    "output": "In order to detect a new and suspicious printer port creation in Registry that could be an attempt to exploit CVE-2020-1048, you should: Monitor Windows Registry settings, specifically looking for events where a value is being set (SetValue) within the registry path 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Ports'. This path is critical because it is where printer port configurations are stored. You should be vigilant for modifications that include file references, particularly those ending in '.dll', '.exe', '.bat', '.com', or containing 'C:' in their paths. These types of modifications are unusual for printer port configurations and can indicate an attempt to exploit vulnerabilities or execute malicious code via printer ports. It is essential to be aware that legitimate scenarios, such as the installation of a new printer port on a host, can also trigger this alert, so such occurrences should be considered when evaluating alerts to reduce false positives. This detection strategy is classified at a high level of importance due to the potential for this kind of registry modification to be used in exploiting specific security vulnerabilities like CVE-2020-1048.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "new and suspicious printer port creation in Registry that could be an attempt to exploit CVE-2020-1048",
      "answer": "In order to detect a new and suspicious printer port creation in Registry that could be an attempt to exploit CVE-2020-1048, you should: Monitor Windows Registry settings, specifically looking for events where a value is being set (SetValue) within the registry path 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Ports'. This path is critical because it is where printer port configurations are stored. You should be vigilant for modifications that include file references, particularly those ending in '.dll', '.exe', '.bat', '.com', or containing 'C:' in their paths. These types of modifications are unusual for printer port configurations and can indicate an attempt to exploit vulnerabilities or execute malicious code via printer ports. It is essential to be aware that legitimate scenarios, such as the installation of a new printer port on a host, can also trigger this alert, so such occurrences should be considered when evaluating alerts to reduce false positives. This detection strategy is classified at a high level of importance due to the potential for this kind of registry modification to be used in exploiting specific security vulnerabilities like CVE-2020-1048."
    }
  },
  {
    "instruction": "Explain how should I detect the following: artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019.",
    "context": "",
    "output": "In order to detect artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019, you should monitor the Microsoft-Windows-DNS-Server/Analytical event log for events that could indicate suspicious DNS activities. Specifically, look out for DNS server analytic events with an EventID of 257 that reference certain questionable domain names. These domain names include 'asyspy256.ddns.net', 'hotkillmail9sddcc.ddns.net', 'rosaf112.ddns.net', 'cvdfhjh1231.myftp.biz', 'sz2016rose.ddns.net', 'dffwescwer4325.myftp.biz', and 'cvdfhjh1231.ddns.net'. Identifying traffic to or from these domains can be a strong indicator of compromise or an active attack related to the GALLIUM group, known for sophisticated cyber espionage activities. Due to the serious nature of this threat, it's essential to analyze such activities with high priority, although it's worth noting that there could be false positives without additional corroborating evidence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019.",
      "answer": "In order to detect artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019, you should monitor the Microsoft-Windows-DNS-Server/Analytical event log for events that could indicate suspicious DNS activities. Specifically, look out for DNS server analytic events with an EventID of 257 that reference certain questionable domain names. These domain names include 'asyspy256.ddns.net', 'hotkillmail9sddcc.ddns.net', 'rosaf112.ddns.net', 'cvdfhjh1231.myftp.biz', 'sz2016rose.ddns.net', 'dffwescwer4325.myftp.biz', and 'cvdfhjh1231.ddns.net'. Identifying traffic to or from these domains can be a strong indicator of compromise or an active attack related to the GALLIUM group, known for sophisticated cyber espionage activities. Due to the serious nature of this threat, it's essential to analyze such activities with high priority, although it's worth noting that there could be false positives without additional corroborating evidence."
    }
  },
  {
    "instruction": "Please help me detect the following: NKN is a networking service using blockchain technology to support a decentralized network of peers. While there are legitimate uses for it, it can also be used as a C2 channel. This rule looks for a DNS request to the ma>",
    "context": "",
    "output": "Sure!\nIn order to detect potential abuse of the NKN network for command and control (C2) communication, you should monitor DNS traffic for queries that show specific characteristics. These characteristics include DNS queries that contain both 'seed' and '.nkn.org' within the query name. This monitoring should take place on networks that utilize Zeek as a traffic analysis tool. You should specifically look at the originating host identifier (id.orig_h), the responding host identifier (id.resp_h), and the answers section within the DNS query logs.\n\nThis detection strategy is crucial because the NKN network, which leverages blockchain technology to create a decentralized network, can sometimes be repurposed by threat actors for C2 communications. By capturing and analyzing DNS requests of this nature, defenders can spot the early signs of such abuse.\n\nIt's important to note that this detection operates at a low alert level because there could be legitimate reasons for such DNS requests. Nonetheless, understanding and logging DNS queries that fit these criteria can aid in the early identification of malicious activity, particularly those aligned with control and command uses in a decentralized network environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "NKN is a networking service using blockchain technology to support a decentralized network of peers. While there are legitimate uses for it, it can also be used as a C2 channel. This rule looks for a DNS request to the ma>",
      "answer": "In order to detect potential abuse of the NKN network for command and control (C2) communication, you should monitor DNS traffic for queries that show specific characteristics. These characteristics include DNS queries that contain both 'seed' and '.nkn.org' within the query name. This monitoring should take place on networks that utilize Zeek as a traffic analysis tool. You should specifically look at the originating host identifier (id.orig_h), the responding host identifier (id.resp_h), and the answers section within the DNS query logs.\n\nThis detection strategy is crucial because the NKN network, which leverages blockchain technology to create a decentralized network, can sometimes be repurposed by threat actors for C2 communications. By capturing and analyzing DNS requests of this nature, defenders can spot the early signs of such abuse.\n\nIt's important to note that this detection operates at a low alert level because there could be legitimate reasons for such DNS requests. Nonetheless, understanding and logging DNS queries that fit these criteria can aid in the early identification of malicious activity, particularly those aligned with control and command uses in a decentralized network environment."
    }
  },
  {
    "instruction": "Please help me detect the following: an executable in the users directory started from one of the Microsoft Office suite applications (Word, Excel, PowerPoint, Publisher, Visio)",
    "context": "",
    "output": "Sure!\nIn order to detect an executable in the users directory started from one of the Microsoft Office suite applications (Word, Excel, PowerPoint, Publisher, Visio), you should: Monitor the process creation events within Windows environments for instances where parent processes are identifiably part of the Microsoft Office suite, specifically Word, Excel, PowerPoint, Publisher, Visio, Access, or the Equation Editor. These parent processes are recognizable through their executable names ending with typical Office executables like WINWORD.EXE, EXCEL.EXE, POWERPNT.EXE, MSPUB.EXE, VISIO.EXE, MSACCESS.EXE, and EQNEDT32.EXE. You should ensure that the started (child) process is located within the C:\\users\\ directory and ends with '.exe', indicating an executable file. However, processes named Teams.exe should be excluded to minimize false positives. This specific attention should apply to processes where both conditions of being initiated by an Office application and ending with '.exe' in the users folder are met and do not involve specific exclusions such as Teams.exe. This will help in detecting potentially malicious activities where Office applications could be exploited to initiate unauthorized or malicious executables. Ensure to log the command line and parent command line data for further analysis, noting that there may be unknown scenarios leading to false positives, signifying a high importance level on such detections.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an executable in the users directory started from one of the Microsoft Office suite applications (Word, Excel, PowerPoint, Publisher, Visio)",
      "answer": "In order to detect an executable in the users directory started from one of the Microsoft Office suite applications (Word, Excel, PowerPoint, Publisher, Visio), you should: Monitor the process creation events within Windows environments for instances where parent processes are identifiably part of the Microsoft Office suite, specifically Word, Excel, PowerPoint, Publisher, Visio, Access, or the Equation Editor. These parent processes are recognizable through their executable names ending with typical Office executables like WINWORD.EXE, EXCEL.EXE, POWERPNT.EXE, MSPUB.EXE, VISIO.EXE, MSACCESS.EXE, and EQNEDT32.EXE. You should ensure that the started (child) process is located within the C:\\users\\ directory and ends with '.exe', indicating an executable file. However, processes named Teams.exe should be excluded to minimize false positives. This specific attention should apply to processes where both conditions of being initiated by an Office application and ending with '.exe' in the users folder are met and do not involve specific exclusions such as Teams.exe. This will help in detecting potentially malicious activities where Office applications could be exploited to initiate unauthorized or malicious executables. Ensure to log the command line and parent command line data for further analysis, noting that there may be unknown scenarios leading to false positives, signifying a high importance level on such detections."
    }
  },
  {
    "instruction": "How can I detect: method to load DLL via LSASS process using an undocumented Registry key",
    "context": "",
    "output": "In order to detect a method to load DLL via LSASS process using an undocumented Registry key, you should: Monitor registry events on Windows systems specifically for modifications to the registry keys '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt' and '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'. These modifications might indicate attempts to use these undocumented registry keys for the purpose of loading Dynamic Link Libraries (DLLs) into the Local Security Authority Subsystem Service (LSASS) process. It is crucial to exclude events related to the legitimate LSASS executable path 'C:\\Windows\\system32\\lsass.exe' when it loads DLLs from the expected locations '%%systemroot%%\\system32\\ntdsa.dll' and '%%systemroot%%\\system32\\lsadb.dll', as these are recognized and permitted operations. While conducting this monitoring, be aware that false positives are possible and currently classified as unknown; thus, each detected event should be thoroughly investigated. As this behavior is associated with malicious activity, namely the exploitation of systems by loading unauthorized DLLs to manipulate the LSASS process, the alert level for such detections is categorized as high. This method is a tactic employed by adversaries to achieve persistence, execute code, and potentially escalate privileges by injecting malicious code into a process that is critical for the Windows operation, hence its high severity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "method to load DLL via LSASS process using an undocumented Registry key",
      "answer": "In order to detect a method to load DLL via LSASS process using an undocumented Registry key, you should: Monitor registry events on Windows systems specifically for modifications to the registry keys '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt' and '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'. These modifications might indicate attempts to use these undocumented registry keys for the purpose of loading Dynamic Link Libraries (DLLs) into the Local Security Authority Subsystem Service (LSASS) process. It is crucial to exclude events related to the legitimate LSASS executable path 'C:\\Windows\\system32\\lsass.exe' when it loads DLLs from the expected locations '%%systemroot%%\\system32\\ntdsa.dll' and '%%systemroot%%\\system32\\lsadb.dll', as these are recognized and permitted operations. While conducting this monitoring, be aware that false positives are possible and currently classified as unknown; thus, each detected event should be thoroughly investigated. As this behavior is associated with malicious activity, namely the exploitation of systems by loading unauthorized DLLs to manipulate the LSASS process, the alert level for such detections is categorized as high. This method is a tactic employed by adversaries to achieve persistence, execute code, and potentially escalate privileges by injecting malicious code into a process that is critical for the Windows operation, hence its high severity."
    }
  },
  {
    "instruction": "How can I detect: SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
    "context": "",
    "output": "In order to detect SyncAppvPublishingServer process execution which is usually utilized by adversaries to bypass PowerShell execution restrictions, you should: monitor PowerShell script activity for invocations of the 'SyncAppvPublishingServer.exe'. This analysis requires that Script Block Logging is enabled on the Windows systems in question, specifically tracking the script block texts within PowerShell scripts. Any occurrence of 'SyncAppvPublishingServer.exe' within these scripts should be flagged as potentially malicious behavior. However, it's crucial to note that legitimate App-V clients may also invoke this process, which constitutes a known false positive scenario for this detection method. The alert level for this detection has been set to medium, reflecting its importance in identifying possible techniques used to circumvent PowerShell execution policies as part of larger attack strategies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
      "answer": "In order to detect SyncAppvPublishingServer process execution which is usually utilized by adversaries to bypass PowerShell execution restrictions, you should: monitor PowerShell script activity for invocations of the 'SyncAppvPublishingServer.exe'. This analysis requires that Script Block Logging is enabled on the Windows systems in question, specifically tracking the script block texts within PowerShell scripts. Any occurrence of 'SyncAppvPublishingServer.exe' within these scripts should be flagged as potentially malicious behavior. However, it's crucial to note that legitimate App-V clients may also invoke this process, which constitutes a known false positive scenario for this detection method. The alert level for this detection has been set to medium, reflecting its importance in identifying possible techniques used to circumvent PowerShell execution policies as part of larger attack strategies."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of \"getcap\" binary. This is often used during recon activity to determine potential binaries that can be abused as GTFOBins or other.",
    "context": "",
    "output": "Sure!\nIn order to detect usage of \"getcap\" binary, which is often used during recon activity to determine potential binaries that can be abused as GTFOBins or others, you should: monitor process creation events on Linux systems for the execution of the \"getcap\" binary, particularly focusing on command lines that include either \" /r \" or \" -r \". This involves checking the end of the image path for '/getcap' to accurately identify the use of this specific binary. Understanding that there might be unknown cases that could be falsely identified as suspicious, this detection strategy is set with a low level of confidence. Nonetheless, it remains a crucial step in identifying reconnaissance activities where attackers might be searching for exploitable binaries to leverage in their attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"getcap\" binary. This is often used during recon activity to determine potential binaries that can be abused as GTFOBins or other.",
      "answer": "In order to detect usage of \"getcap\" binary, which is often used during recon activity to determine potential binaries that can be abused as GTFOBins or others, you should: monitor process creation events on Linux systems for the execution of the \"getcap\" binary, particularly focusing on command lines that include either \" /r \" or \" -r \". This involves checking the end of the image path for '/getcap' to accurately identify the use of this specific binary. Understanding that there might be unknown cases that could be falsely identified as suspicious, this detection strategy is set with a low level of confidence. Nonetheless, it remains a crucial step in identifying reconnaissance activities where attackers might be searching for exploitable binaries to leverage in their attacks."
    }
  },
  {
    "instruction": "How to detect: uses of a renamed legitimate createdump.exe LOLOBIN utility to dump process memory",
    "context": "",
    "output": "In order to detect uses of a renamed legitimate createdump.exe LOLBIN utility to dump process memory, you should: Monitor the creation of processes on Windows systems, focusing on those that have been initiated with command-line arguments specifically designed for memory dumping operations. Look for processes that are started with an original filename ('FX_VER_INTERNALNAME_STR') that is indicative of a legitimate but potentially renamed utility. Specifically, be alert for command-line instances that include the flags '-u' and '-f', or their full-length equivalents '--full' and '--name', in conjunction with the file extension '.dmp', which suggests the intention to dump memory contents to a file. It is also important to exclude any processes that exactly end with '\\createdump.exe' as the image path, as this indicates the use of the utility in its known, unaltered form. Be aware, some legitimate command-line usage might involve similar flags, thus, these should be considered as potential false positives. This detection strategy is set at a high importance level due to the risk associated with unauthorized memory dumping, which could be indicative of an effort to extract sensitive information from a process' memory space.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "uses of a renamed legitimate createdump.exe LOLOBIN utility to dump process memory",
      "answer": "In order to detect uses of a renamed legitimate createdump.exe LOLBIN utility to dump process memory, you should: Monitor the creation of processes on Windows systems, focusing on those that have been initiated with command-line arguments specifically designed for memory dumping operations. Look for processes that are started with an original filename ('FX_VER_INTERNALNAME_STR') that is indicative of a legitimate but potentially renamed utility. Specifically, be alert for command-line instances that include the flags '-u' and '-f', or their full-length equivalents '--full' and '--name', in conjunction with the file extension '.dmp', which suggests the intention to dump memory contents to a file. It is also important to exclude any processes that exactly end with '\\createdump.exe' as the image path, as this indicates the use of the utility in its known, unaltered form. Be aware, some legitimate command-line usage might involve similar flags, thus, these should be considered as potential false positives. This detection strategy is set at a high importance level due to the risk associated with unauthorized memory dumping, which could be indicative of an effort to extract sensitive information from a process' memory space."
    }
  },
  {
    "instruction": "How can I detect: creation of the file \"rootlog\" which is used by the TripleCross rootkit as a way to check if the backdoor is already running.",
    "context": "",
    "output": "In order to detect the creation of the file \"rootlog\" which is used by the TripleCross rootkit as a way to check if the backdoor is already running, you should monitor file events on Linux systems, specifically watching for any instance where a file named '/tmp/rootlog' is created. This activity is flagged due to its association with a known rootkit attempting to verify the operational status of a backdoor mechanism it employs. The occurrence of such an event is considered highly unusual, suggesting a potential security breach or malicious activity on the system. Identifying this event can aid in the early detection of the TripleCross rootkit's presence, enabling timely intervention and mitigation efforts to secure the compromised system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of the file \"rootlog\" which is used by the TripleCross rootkit as a way to check if the backdoor is already running.",
      "answer": "In order to detect the creation of the file \"rootlog\" which is used by the TripleCross rootkit as a way to check if the backdoor is already running, you should monitor file events on Linux systems, specifically watching for any instance where a file named '/tmp/rootlog' is created. This activity is flagged due to its association with a known rootkit attempting to verify the operational status of a backdoor mechanism it employs. The occurrence of such an event is considered highly unusual, suggesting a potential security breach or malicious activity on the system. Identifying this event can aid in the early detection of the TripleCross rootkit's presence, enabling timely intervention and mitigation efforts to secure the compromised system."
    }
  },
  {
    "instruction": "How to detect: Adversaries may search for common password storage locations to obtain user credentials.\nPasswords are stored in several places on a system, depending on the operating system or application holding the credentials.\n",
    "context": "",
    "output": "In order to detect adversaries who are searching for common password storage locations to obtain user credentials, you should monitor for specific PowerShell script activities on Windows systems. Ensure that Script Block Logging is enabled to allow for this monitoring. Look for scripts that contain both the use of 'vaultcmd' along with the parameter '/listcreds:'. Additionally, scripts that mention 'Windows Credentials' or 'Web Credentials' should also be flagged. Both conditions must be met to consider the activity suspicious. Be aware that there may be instances where legitimate scripts trigger these detections, although such occurrences are unspecified. The detection of these script activities is crucial in identifying potential attempts to access or steal user credentials stored in common locations on the system. This tactic is part of broader efforts by attackers to exploit credentials to gain unauthorized access or escalate their privileges within a network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may search for common password storage locations to obtain user credentials.\nPasswords are stored in several places on a system, depending on the operating system or application holding the credentials.\n",
      "answer": "In order to detect adversaries who are searching for common password storage locations to obtain user credentials, you should monitor for specific PowerShell script activities on Windows systems. Ensure that Script Block Logging is enabled to allow for this monitoring. Look for scripts that contain both the use of 'vaultcmd' along with the parameter '/listcreds:'. Additionally, scripts that mention 'Windows Credentials' or 'Web Credentials' should also be flagged. Both conditions must be met to consider the activity suspicious. Be aware that there may be instances where legitimate scripts trigger these detections, although such occurrences are unspecified. The detection of these script activities is crucial in identifying potential attempts to access or steal user credentials stored in common locations on the system. This tactic is part of broader efforts by attackers to exploit credentials to gain unauthorized access or escalate their privileges within a network."
    }
  },
  {
    "instruction": "Can you explain how to detect: an image load pattern as seen when a tool named PRIVATELOG is used and rarely observed under legitimate circumstances",
    "context": "",
    "output": "Certainly!\n\nIn order to Detects an image load pattern as seen when a tool named PRIVATELOG is used and rarely observed under legitimate circumstances, you should: Focus on monitoring image load activities within Windows. Specifically, watch for instances where the executable 'svchost.exe' loads the dynamic link library 'clfsw32.dll'. This particular pattern of behavior is associated with the use of the tool PRIVATELOG, and it's seldom seen in normal operations, indicating a potentially malicious action. Despite being a strong indicator of suspicious activity, be mindful that it might occur in rare legitimate scenarios. Thus, it's classified with a high level of concern due to its unusual nature and potential security implications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an image load pattern as seen when a tool named PRIVATELOG is used and rarely observed under legitimate circumstances",
      "answer": "In order to Detects an image load pattern as seen when a tool named PRIVATELOG is used and rarely observed under legitimate circumstances, you should: Focus on monitoring image load activities within Windows. Specifically, watch for instances where the executable 'svchost.exe' loads the dynamic link library 'clfsw32.dll'. This particular pattern of behavior is associated with the use of the tool PRIVATELOG, and it's seldom seen in normal operations, indicating a potentially malicious action. Despite being a strong indicator of suspicious activity, be mindful that it might occur in rare legitimate scenarios. Thus, it's classified with a high level of concern due to its unusual nature and potential security implications."
    }
  },
  {
    "instruction": "Can you explain how to detect: Microsoft Excel loading an Add-In (.xll) file",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Microsoft Excel loading an Add-In (.xll) file, you should: monitor for instances where the Microsoft Windows operating system reports the loading of image files specifically related to Microsoft Excel (identified by the file name ending in '\\excel.exe'). Furthermore, you should check if these instances involve Excel loading a file with a '.xll' extension, which refers to Excel Add-In files. It's important to note that this detection might trigger some false positives since the rule is precisely looking for the loading of '.xll' files, which could occasionally include legitimate and allowed XLL Add-Ins. The security level for this alert is considered low, indicating that while it's valuable for identifying potentially suspicious behavior, it's also expected to occasionally flag benign activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Excel loading an Add-In (.xll) file",
      "answer": "In order to detect Microsoft Excel loading an Add-In (.xll) file, you should: monitor for instances where the Microsoft Windows operating system reports the loading of image files specifically related to Microsoft Excel (identified by the file name ending in '\\excel.exe'). Furthermore, you should check if these instances involve Excel loading a file with a '.xll' extension, which refers to Excel Add-In files. It's important to note that this detection might trigger some false positives since the rule is precisely looking for the loading of '.xll' files, which could occasionally include legitimate and allowed XLL Add-Ins. The security level for this alert is considered low, indicating that while it's valuable for identifying potentially suspicious behavior, it's also expected to occasionally flag benign activities."
    }
  },
  {
    "instruction": "Please help me detect the following: use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.",
    "context": "",
    "output": "Sure!\nIn order to detect the use of WSReset.exe to bypass User Account Control (UAC), allowing adversaries to execute privileged processes, you should focus on monitoring process creation events within Windows environments. Specifically, identify cases where processes are launched by 'wsreset.exe' as the parent image. It is crucial, however, to exclude any instances where the newly created process is 'conhost.exe' or has the original file name 'CONHOST.EXE' to reduce false positives, such as unknown subprocesses initiated by wsreset.exe. This approach targets behavior often associated with privilege escalation tactics and techniques, pinpointing a sophisticated method used by attackers to gain elevated access on a system surreptitiously.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.",
      "answer": "In order to detect the use of WSReset.exe to bypass User Account Control (UAC), allowing adversaries to execute privileged processes, you should focus on monitoring process creation events within Windows environments. Specifically, identify cases where processes are launched by 'wsreset.exe' as the parent image. It is crucial, however, to exclude any instances where the newly created process is 'conhost.exe' or has the original file name 'CONHOST.EXE' to reduce false positives, such as unknown subprocesses initiated by wsreset.exe. This approach targets behavior often associated with privilege escalation tactics and techniques, pinpointing a sophisticated method used by attackers to gain elevated access on a system surreptitiously."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when adversaries stop services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities",
    "context": "",
    "output": "In order to detect when adversaries stop services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where the 'schtasks.exe' utility is executed with command-line arguments indicating the deletion of scheduled tasks ('/delete' along with '/tn'). Pay additional attention to the deletion of tasks related to critical Windows services such as System Restore ('\\Windows\\SystemRestore\\SR'), Windows Defender, BitLocker, Windows Backup, Windows Update, Update Orchestrator, and Exploit Guard. It is highly unlikely that legitimate uses involve the deletion of these specific tasks, so alerts triggered by these criteria should be considered high priority and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when adversaries stop services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities",
      "answer": "In order to detect when adversaries stop services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where the 'schtasks.exe' utility is executed with command-line arguments indicating the deletion of scheduled tasks ('/delete' along with '/tn'). Pay additional attention to the deletion of tasks related to critical Windows services such as System Restore ('\\Windows\\SystemRestore\\SR'), Windows Defender, BitLocker, Windows Backup, Windows Update, Update Orchestrator, and Exploit Guard. It is highly unlikely that legitimate uses involve the deletion of these specific tasks, so alerts triggered by these criteria should be considered high priority and investigated promptly."
    }
  },
  {
    "instruction": "Please help me detect the following: renaming of an existing computer account to a account name that doesn't contain a $ symbol as seen in attacks against CVE-2021-42287",
    "context": "",
    "output": "Sure!\nIn order to detect the renaming of an existing computer account to an account name that doesn't contain a $ symbol as seen in attacks against CVE-2021-42287, you should: Monitor Windows security event logs for event ID 4781, which signifies a user account name change. Specifically, focus on instances where the old target username contains the '$' symbol, indicating it was likely a computer account, and ensure the new target username does not contain the '$' symbol. This pattern suggests an attempt to rename a computer account to a format not typical for such accounts, possibly indicating malicious activity linked to exploiting CVE-2021-42287. Be aware that there might be legitimate reasons for account name changes that do not involve a '$' symbol in the new name; hence, this activity is flagged with a high level of concern but should be investigated to rule out false positives. The key fields to review in the logs are the EventID and the SubjectUserName to understand the scope and nature of the change.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "renaming of an existing computer account to a account name that doesn't contain a $ symbol as seen in attacks against CVE-2021-42287",
      "answer": "In order to detect the renaming of an existing computer account to an account name that doesn't contain a $ symbol as seen in attacks against CVE-2021-42287, you should: Monitor Windows security event logs for event ID 4781, which signifies a user account name change. Specifically, focus on instances where the old target username contains the '$' symbol, indicating it was likely a computer account, and ensure the new target username does not contain the '$' symbol. This pattern suggests an attempt to rename a computer account to a format not typical for such accounts, possibly indicating malicious activity linked to exploiting CVE-2021-42287. Be aware that there might be legitimate reasons for account name changes that do not involve a '$' symbol in the new name; hence, this activity is flagged with a high level of concern but should be investigated to rule out false positives. The key fields to review in the logs are the EventID and the SubjectUserName to understand the scope and nature of the change."
    }
  },
  {
    "instruction": "Explain how should I detect the following: modification of autostart extensibility point (ASEP) in registry.",
    "context": "",
    "output": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring registry set activities within the Windows environment, specifically targeting the Internet Explorer settings stored in the Windows registry. Monitoring should flag events where the \"SetValue\" action is performed on registry keys related to Internet Explorer, including both the standard and Wow6432Node paths.\n\nSpecial attention should be paid to modifications aimed at Internet Explorer's toolbar settings, extensions, and explorer bars, as these areas are common targets for attackers seeking to maintain persistence or execute malicious code upon system startup. To accurately detect potential threats, filters should be applied to exclude known benign alterations, like those stemming from legitimate software installations or configurations performed by an administrator. These exclusions involve ignoring certain detailed registry paths that signify legitimate extensions or toolbar settings.\n\nFor effective detection, the analysis should capture specific fields such as the SecurityID, ObjectName, OldValueType, and NewValueType, providing context to the registry modification event.\n\nHowever, it's important to handle alerts with caution, acknowledging that false positives can occur. These can result from legitimate software installations that necessitate changes to autostart configurations or from administrative actions taken for genuine reasons. The level of threat associated with detected alterations is considered medium, underscoring the potential for misuse but also recognizing that not all modifications are indicative of malicious intent.\n\nBy closely observing these specific registry interactions and employing a discerning filtering process, one can robustly detect unauthorized modifications that compromise the autostart extensibility points (ASEP) in the system, thereby protecting against attacks that seek to leverage Internet Explorer as a vector for persistent access or malicious execution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring registry set activities within the Windows environment, specifically targeting the Internet Explorer settings stored in the Windows registry. Monitoring should flag events where the \"SetValue\" action is performed on registry keys related to Internet Explorer, including both the standard and Wow6432Node paths.\n\nSpecial attention should be paid to modifications aimed at Internet Explorer's toolbar settings, extensions, and explorer bars, as these areas are common targets for attackers seeking to maintain persistence or execute malicious code upon system startup. To accurately detect potential threats, filters should be applied to exclude known benign alterations, like those stemming from legitimate software installations or configurations performed by an administrator. These exclusions involve ignoring certain detailed registry paths that signify legitimate extensions or toolbar settings.\n\nFor effective detection, the analysis should capture specific fields such as the SecurityID, ObjectName, OldValueType, and NewValueType, providing context to the registry modification event.\n\nHowever, it's important to handle alerts with caution, acknowledging that false positives can occur. These can result from legitimate software installations that necessitate changes to autostart configurations or from administrative actions taken for genuine reasons. The level of threat associated with detected alterations is considered medium, underscoring the potential for misuse but also recognizing that not all modifications are indicative of malicious intent.\n\nBy closely observing these specific registry interactions and employing a discerning filtering process, one can robustly detect unauthorized modifications that compromise the autostart extensibility points (ASEP) in the system, thereby protecting against attacks that seek to leverage Internet Explorer as a vector for persistent access or malicious execution."
    }
  },
  {
    "instruction": "Explain how should I detect the following: processes requesting access to LSASS memory via suspicious access masks. This is typical for credentials dumping tools",
    "context": "",
    "output": "In order to detect processes requesting access to LSASS memory via suspicious access masks, which is typical for credentials dumping tools, you should: Monitor Windows processes for any attempts to access the LSASS.exe (Local Security Authority Subsystem Service) executable with specific access permissions that are unusual and indicative of malicious intent. Specifically, look out for processes that end with attempting to interact with LSASS.exe using access rights like '0x40', '0x100000', '0x1410', '0x1438', '0x143a', '0x1418', '0x1f0fff', '0x1f1fff', '0x1f2fff', and '0x1f3fff'. These access rights reflect different levels of permission requests, which in the context of LSASS.exe, are often related to credential dumping or other unauthorized information gathering actions.\n\nExclude legitimate system and monitoring tools that might require access to LSASS for non-malicious purposes. This includes filtering out processes like task manager, performance monitor, certain Windows Defender processes, VMware tools, and several others known to legitimately access LSASS.exe for system management or security purposes. Also, consider exclusions for processes related to gaming services, Microsoft Edge installer, WebEx host, Malwarebytes update, Dropbox update, and the MSBuild process as these might legitimately request access to LSASS but are unlikely to be used for credentials dumping.\n\nPay attention to potential false positives, as legitimate software might occasionally need to access LSASS in a manner similar to credential dumping tools, thus requiring a high level of scrutiny and potentially leading to a likely chance of false-positive detections.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "processes requesting access to LSASS memory via suspicious access masks. This is typical for credentials dumping tools",
      "answer": "In order to detect processes requesting access to LSASS memory via suspicious access masks, which is typical for credentials dumping tools, you should: Monitor Windows processes for any attempts to access the LSASS.exe (Local Security Authority Subsystem Service) executable with specific access permissions that are unusual and indicative of malicious intent. Specifically, look out for processes that end with attempting to interact with LSASS.exe using access rights like '0x40', '0x100000', '0x1410', '0x1438', '0x143a', '0x1418', '0x1f0fff', '0x1f1fff', '0x1f2fff', and '0x1f3fff'. These access rights reflect different levels of permission requests, which in the context of LSASS.exe, are often related to credential dumping or other unauthorized information gathering actions.\n\nExclude legitimate system and monitoring tools that might require access to LSASS for non-malicious purposes. This includes filtering out processes like task manager, performance monitor, certain Windows Defender processes, VMware tools, and several others known to legitimately access LSASS.exe for system management or security purposes. Also, consider exclusions for processes related to gaming services, Microsoft Edge installer, WebEx host, Malwarebytes update, Dropbox update, and the MSBuild process as these might legitimately request access to LSASS but are unlikely to be used for credentials dumping.\n\nPay attention to potential false positives, as legitimate software might occasionally need to access LSASS in a manner similar to credential dumping tools, thus requiring a high level of scrutiny and potentially leading to a likely chance of false-positive detections."
    }
  },
  {
    "instruction": "How can I detect: potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
    "context": "",
    "output": "In order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should: Monitor DNS query logs on Windows systems for queries to a specific list of domains that are associated with malicious activities. Look for queries to domains such as 'akamaicontainer.com', 'akamaitechcloudservices.com', 'azuredeploystore.com', 'azureonlinecloud.com', 'azureonlinestorage.com', 'dunamistrd.com', 'glcloudservice.com', 'journalide.org', 'msedgepackageinfo.com', 'msedgeupdate.net', 'msstorageazure.com', 'msstorageboxes.com', 'officeaddons.com', 'officestoragebox.com', 'pbxcloudeservices.com', 'pbxphonenetwork.com', 'pbxsources.com', 'qwepoi123098.com', 'sbmsa.wiki', 'sourceslabs.com', 'visualstudiofactory.com', and 'zacharryblogs.com'. These domains have been linked to beaconing behavior indicative of a compromised 3CXDesktopApp. The detection of queries to these domains should be considered a high-level security concern due to the unlikely chance of false positives, suggesting a very specific and targeted attack behavior. This activity aligns with tactics and techniques related to command and control as well as initial access, where attackers establish communication with compromised systems to control them or exfiltrate data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
      "answer": "In order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should: Monitor DNS query logs on Windows systems for queries to a specific list of domains that are associated with malicious activities. Look for queries to domains such as 'akamaicontainer.com', 'akamaitechcloudservices.com', 'azuredeploystore.com', 'azureonlinecloud.com', 'azureonlinestorage.com', 'dunamistrd.com', 'glcloudservice.com', 'journalide.org', 'msedgepackageinfo.com', 'msedgeupdate.net', 'msstorageazure.com', 'msstorageboxes.com', 'officeaddons.com', 'officestoragebox.com', 'pbxcloudeservices.com', 'pbxphonenetwork.com', 'pbxsources.com', 'qwepoi123098.com', 'sbmsa.wiki', 'sourceslabs.com', 'visualstudiofactory.com', and 'zacharryblogs.com'. These domains have been linked to beaconing behavior indicative of a compromised 3CXDesktopApp. The detection of queries to these domains should be considered a high-level security concern due to the unlikely chance of false positives, suggesting a very specific and targeted attack behavior. This activity aligns with tactics and techniques related to command and control as well as initial access, where attackers establish communication with compromised systems to control them or exfiltrate data."
    }
  },
  {
    "instruction": "How to detect: tampering with attachment manager settings policies attachments (See reference for more information)",
    "context": "",
    "output": "In order to detect tampering with attachment manager settings policies attachments, you should monitor Windows registry settings for specific changes that indicate manipulation of security policies related to how attachments are handled. Look out for registry events where the value is set (`SetValue` event type) under the key path `\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Attachments\\`. Specifically, pay attention to alterations in three areas:\n\n1. Changes to the `\\HideZoneInfoOnProperties` setting, where the DWORD value is set to `0x00000001`. This modification hides the zone information on file properties, potentially allowing a malicious file to appear as if it came from a safe zone.\n   \n2. Adjustments to the `\\SaveZoneInformation` setting, where the DWORD value is switched to `0x00000002`, effectively turning off the saving of zone information. This could prevent the system from warning users about files from potentially unsafe sources.\n   \n3. Modifications to the `\\ScanWithAntiVirus` setting, by setting the DWORD value to `0x00000001`, which disables the scan of attachments with antivirus software, increasing the risk of malware infections.\n\nSuch changes are considered highly suspicious, as they can significantly lower the security barriers, making the system more susceptible to malware infections through email attachments or downloaded files. Monitoring for these specific registry modifications can aid in identifying unauthorized tampering with attachment manager settings. It is unlikely that these changes would occur under normal system operations, making this a high-level concern for security monitoring.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "tampering with attachment manager settings policies attachments (See reference for more information)",
      "answer": "In order to detect tampering with attachment manager settings policies attachments, you should monitor Windows registry settings for specific changes that indicate manipulation of security policies related to how attachments are handled. Look out for registry events where the value is set (`SetValue` event type) under the key path `\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Attachments\\`. Specifically, pay attention to alterations in three areas:\n\n1. Changes to the `\\HideZoneInfoOnProperties` setting, where the DWORD value is set to `0x00000001`. This modification hides the zone information on file properties, potentially allowing a malicious file to appear as if it came from a safe zone.\n   \n2. Adjustments to the `\\SaveZoneInformation` setting, where the DWORD value is switched to `0x00000002`, effectively turning off the saving of zone information. This could prevent the system from warning users about files from potentially unsafe sources.\n   \n3. Modifications to the `\\ScanWithAntiVirus` setting, by setting the DWORD value to `0x00000001`, which disables the scan of attachments with antivirus software, increasing the risk of malware infections.\n\nSuch changes are considered highly suspicious, as they can significantly lower the security barriers, making the system more susceptible to malware infections through email attachments or downloaded files. Monitoring for these specific registry modifications can aid in identifying unauthorized tampering with attachment manager settings. It is unlikely that these changes would occur under normal system operations, making this a high-level concern for security monitoring."
    }
  },
  {
    "instruction": "How to detect: usage of the Sharp Chisel via the commandline arguments",
    "context": "",
    "output": "In order to detect usage of the Sharp Chisel via the commandline arguments, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\SharpChisel.exe' or where the product name is identified as 'SharpChisel'. Such an event is indicative of Sharp Chisel's execution. Given the context, this activity is highly suspicious and is unlikely to generate false positives, underlining its significance in identifying potential malicious behavior. The detection of this activity is crucial as it can point towards an attacker using Sharp Chisel for nefarious purposes, which is flagged at a high severity level due to its potential impact.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the Sharp Chisel via the commandline arguments",
      "answer": "In order to detect usage of the Sharp Chisel via the commandline arguments, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\SharpChisel.exe' or where the product name is identified as 'SharpChisel'. Such an event is indicative of Sharp Chisel's execution. Given the context, this activity is highly suspicious and is unlikely to generate false positives, underlining its significance in identifying potential malicious behavior. The detection of this activity is crucial as it can point towards an attacker using Sharp Chisel for nefarious purposes, which is flagged at a high severity level due to its potential impact."
    }
  },
  {
    "instruction": "How can I detect: exploitation of flaw in path normalization in Apache HTTP server 2.4.49.\nAn attacker could use a path traversal attack to map URLs to files outside the expected document root.\nIf files outside of the document root are not protected by \"require all denied\" these requests can succeed.\nAdditionally this flaw could leak the source of interpreted files like CGI scripts.\nThis issue is known to be exploited in the wild. This issue only affects Apache 2.4.49 and not earlier versions.\n",
    "context": "",
    "output": "In order to detect exploitation of flaw in path normalization in Apache HTTP server 2.4.49, where an attacker could use a path traversal attack to map URLs to files outside the expected document root, leading to potential unauthorized access or information leakage if files outside of the document root are not protected by \"require all denied\", you should monitor web server logs for specific request patterns. Look for requests to the `/cgi-bin/` or `/icons/` directories that contain unusual character sequences like `.%2e/`, `.%%32%65/`, `.%%%25%33` which are indicative of attempts to bypass normal path restrictions and access files or directories that are located outside of the intended document root. Additionally, pay attention to the HTTP status codes in the logs. Specifically, look for the status codes `200` (OK) and `301` (Moved Permanently) associated with these requests, as these codes could indicate that the request was successfully processed by the server, possibly due to this vulnerability. This behavior is a sign that the Apache 2.4.49 server might be under attack, exploiting this specific path normalization flaw, and warrants further investigation. Ensure to keep an eye out for such activities in your webserver logs to safeguard against unauthorized access and information leakage. This issue is known for its exploitation in the wild and is specific to Apache version 2.4.49, without affecting earlier versions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of flaw in path normalization in Apache HTTP server 2.4.49.\nAn attacker could use a path traversal attack to map URLs to files outside the expected document root.\nIf files outside of the document root are not protected by \"require all denied\" these requests can succeed.\nAdditionally this flaw could leak the source of interpreted files like CGI scripts.\nThis issue is known to be exploited in the wild. This issue only affects Apache 2.4.49 and not earlier versions.\n",
      "answer": "In order to detect exploitation of flaw in path normalization in Apache HTTP server 2.4.49, where an attacker could use a path traversal attack to map URLs to files outside the expected document root, leading to potential unauthorized access or information leakage if files outside of the document root are not protected by \"require all denied\", you should monitor web server logs for specific request patterns. Look for requests to the `/cgi-bin/` or `/icons/` directories that contain unusual character sequences like `.%2e/`, `.%%32%65/`, `.%%%25%33` which are indicative of attempts to bypass normal path restrictions and access files or directories that are located outside of the intended document root. Additionally, pay attention to the HTTP status codes in the logs. Specifically, look for the status codes `200` (OK) and `301` (Moved Permanently) associated with these requests, as these codes could indicate that the request was successfully processed by the server, possibly due to this vulnerability. This behavior is a sign that the Apache 2.4.49 server might be under attack, exploiting this specific path normalization flaw, and warrants further investigation. Ensure to keep an eye out for such activities in your webserver logs to safeguard against unauthorized access and information leakage. This issue is known for its exploitation in the wild and is specific to Apache version 2.4.49, without affecting earlier versions."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of files that look like exports of the local SAM (Security Account Manager)",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of files that look like exports of the local SAM (Security Account Manager), you should: Monitor Windows file events for any creation or modification activities where filenames end with specific patterns such as '\\Temp\\sam', '\\sam.sav', '\\Intel\\sam', '\\sam.hive', '\\Perflogs\\sam', '\\ProgramData\\sam', '\\Users\\Public\\sam', '\\AppData\\Local\\sam', '\\AppData\\Roaming\\sam', and '_ShadowSteal.zip', which is associated with the ShadowSteal malware. Also, watch for filenames that contain patterns like '\\hive_sam_', indicating the use of tools like hivenightmare, as well as variations including '\\sam.save', '\\sam.export', '\\~reg_sam.save', '\\sam_backup', '\\sam.bck', and '\\sam.backup'. These indicators suggest an attempt to export or backup the Security Account Manager (SAM) file, which contains sensitive system and user account information. Note that there might be rare instances where similar file activity is part of legitimate administrative activities, however, under a high alert level, these should be scrutinized closely.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of files that look like exports of the local SAM (Security Account Manager)",
      "answer": "In order to detect the creation of files that look like exports of the local SAM (Security Account Manager), you should: Monitor Windows file events for any creation or modification activities where filenames end with specific patterns such as '\\Temp\\sam', '\\sam.sav', '\\Intel\\sam', '\\sam.hive', '\\Perflogs\\sam', '\\ProgramData\\sam', '\\Users\\Public\\sam', '\\AppData\\Local\\sam', '\\AppData\\Roaming\\sam', and '_ShadowSteal.zip', which is associated with the ShadowSteal malware. Also, watch for filenames that contain patterns like '\\hive_sam_', indicating the use of tools like hivenightmare, as well as variations including '\\sam.save', '\\sam.export', '\\~reg_sam.save', '\\sam_backup', '\\sam.bck', and '\\sam.backup'. These indicators suggest an attempt to export or backup the Security Account Manager (SAM) file, which contains sensitive system and user account information. Note that there might be rare instances where similar file activity is part of legitimate administrative activities, however, under a high alert level, these should be scrutinized closely."
    }
  },
  {
    "instruction": "How can I detect: svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443",
    "context": "",
    "output": "In order to detect svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443, you should: monitor network connections on Windows systems for specific patterns. Focus on connections where the process image ends with '\\svchost.exe', which is initiated by this service. Particularly, pay attention to instances where this process, acting as a host, initiates connections from source port 3389, which is traditionally used for remote desktop protocol (RDP) services, to destination ports 80 (commonly used for HTTP traffic) or 443 (used for HTTPS traffic). These connection attempts are unusual for svchost.exe involved in RDP activities, as they indicate possible misuse of RDP services to communicate with external systems over web ports, potentially for command and control or data exfiltration purposes. It's vital to consider all detections related to these patterns with a high level of suspicion due to the possibly unknown nature of false positives, indicating a critical need for immediate investigation upon detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443",
      "answer": "In order to detect svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443, you should: monitor network connections on Windows systems for specific patterns. Focus on connections where the process image ends with '\\svchost.exe', which is initiated by this service. Particularly, pay attention to instances where this process, acting as a host, initiates connections from source port 3389, which is traditionally used for remote desktop protocol (RDP) services, to destination ports 80 (commonly used for HTTP traffic) or 443 (used for HTTPS traffic). These connection attempts are unusual for svchost.exe involved in RDP activities, as they indicate possible misuse of RDP services to communicate with external systems over web ports, potentially for command and control or data exfiltration purposes. It's vital to consider all detections related to these patterns with a high level of suspicion due to the possibly unknown nature of false positives, indicating a critical need for immediate investigation upon detection."
    }
  },
  {
    "instruction": "How can I detect: Obfuscated Powershell via Stdin in Scripts",
    "context": "",
    "output": "In order to detect obfuscated PowerShell via Stdin in scripts, you should focus on monitoring the Windows System service logs, specifically looking for events generated by the Service Control Manager. Pay special attention to events with an ID of 7045 which involve the creation or modification of service entries in the system. These entries are crucial to identifying potential attack vectors.\n\nFor detection, it is essential to scrutinize the 'ImagePath' attribute of these events. The 'ImagePath' should contain certain patterns that are typically associated with obfuscation techniques used in PowerShell scripts. Specifically, look for instances where the 'ImagePath' contains the sequence 'set' followed by '&&', which is a common indicator of script obfuscation or command chaining. Additionally, the presence of keywords like 'environment', 'invoke', or 'input' within close proximity to these patterns further strengthens the suspicion of obfuscated PowerShell activities. These keywords are often used in techniques to obfuscate the script's intent or to execute commands indirectly, making them harder to detect by traditional means.\n\nIt is important to note that while this detection method is aimed at identifying obfuscated PowerShell usage, there may be instances where legitimate system actions trigger similar patterns, thus leading to potential false positives. Therefore, these events should be investigated thoroughly to distinguish between malicious activities and benign system operations.\n\nThis detection strategy relies heavily on understanding and identifying the subtle nuances of obfuscated scripts or commands, paying close attention to specific patterns and keywords within the 'ImagePath' field of relevant system events. Through meticulous monitoring and analysis of these indicators within the Windows System service logs, it is possible to identify and mitigate attempts to use obfuscated PowerShell via Stdin in scripts, thereby enhancing the security stance against such sophisticated attack techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via Stdin in Scripts",
      "answer": "In order to detect obfuscated PowerShell via Stdin in scripts, you should focus on monitoring the Windows System service logs, specifically looking for events generated by the Service Control Manager. Pay special attention to events with an ID of 7045 which involve the creation or modification of service entries in the system. These entries are crucial to identifying potential attack vectors.\n\nFor detection, it is essential to scrutinize the 'ImagePath' attribute of these events. The 'ImagePath' should contain certain patterns that are typically associated with obfuscation techniques used in PowerShell scripts. Specifically, look for instances where the 'ImagePath' contains the sequence 'set' followed by '&&', which is a common indicator of script obfuscation or command chaining. Additionally, the presence of keywords like 'environment', 'invoke', or 'input' within close proximity to these patterns further strengthens the suspicion of obfuscated PowerShell activities. These keywords are often used in techniques to obfuscate the script's intent or to execute commands indirectly, making them harder to detect by traditional means.\n\nIt is important to note that while this detection method is aimed at identifying obfuscated PowerShell usage, there may be instances where legitimate system actions trigger similar patterns, thus leading to potential false positives. Therefore, these events should be investigated thoroughly to distinguish between malicious activities and benign system operations.\n\nThis detection strategy relies heavily on understanding and identifying the subtle nuances of obfuscated scripts or commands, paying close attention to specific patterns and keywords within the 'ImagePath' field of relevant system events. Through meticulous monitoring and analysis of these indicators within the Windows System service logs, it is possible to identify and mitigate attempts to use obfuscated PowerShell via Stdin in scripts, thereby enhancing the security stance against such sophisticated attack techniques."
    }
  },
  {
    "instruction": "How can I detect: regsvr32 execution to download/install/register new DLLs that are hosted on Web or FTP servers.",
    "context": "",
    "output": "In order to detect regsvr32 execution to download/install/register new DLLs that are hosted on Web or FTP servers, you should: Monitor for the creation of processes on Windows systems, specifically looking for execution instances of 'regsvr32.exe' or where the OriginalFileName is 'REGSVR32.EXE'. Pay special attention to the command line arguments accompanying these executions, particularly the presence of '/i' or '-i', which are indicative of an attempt to install using regsvr32. Additionally, examine the command line for references to protocols such as 'ftp' or 'http', as this suggests the regsvr32 tool is being used to retrieve DLLs from Web or FTP servers. Alert on the combination of these flags, as it signifies a potential misuse of regsvr32 for malicious purposes. It's important to note that there might be legitimate uses for these command line arguments, but when combined, they raise a medium level alert that warrants further investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "regsvr32 execution to download/install/register new DLLs that are hosted on Web or FTP servers.",
      "answer": "In order to detect regsvr32 execution to download/install/register new DLLs that are hosted on Web or FTP servers, you should: Monitor for the creation of processes on Windows systems, specifically looking for execution instances of 'regsvr32.exe' or where the OriginalFileName is 'REGSVR32.EXE'. Pay special attention to the command line arguments accompanying these executions, particularly the presence of '/i' or '-i', which are indicative of an attempt to install using regsvr32. Additionally, examine the command line for references to protocols such as 'ftp' or 'http', as this suggests the regsvr32 tool is being used to retrieve DLLs from Web or FTP servers. Alert on the combination of these flags, as it signifies a potential misuse of regsvr32 for malicious purposes. It's important to note that there might be legitimate uses for these command line arguments, but when combined, they raise a medium level alert that warrants further investigation."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of \"reg.exe\" for enabling/disabling the RDP service on the host by tampering with the 'CurrentControlSet\\Control\\Terminal Server' values",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of \"reg.exe\" for enabling/disabling the RDP service on the host by tampering with the 'CurrentControlSet\\Control\\Terminal Server' values, you should: Monitor Windows process creation logs for instances where the \"reg.exe\" program is executed. Specifically, look for command lines that contain ' add ', '\\CurrentControlSet\\Control\\Terminal Server', 'REG_DWORD', and ' /f', indicating modifications to the Terminal Server settings in the registry. Additionally, keep an eye out for specific command line arguments that include 'Licensing Core', 'EnableConcurrentSessions', or other values such as 'WinStations\\RDP-Tcp', 'MaxInstanceCount', and similar, which are associated with concurrent RDP session settings. This detection focuses on changes that could enable or disable RDP services or alter its configuration for possibly malicious purposes. The rule uses high-level conditions to identify suspicious activity related to the Remote Desktop Protocol (RDP) settings, and it's tagged under techniques related to Persistence, Privilege Escalation, and Defense Evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"reg.exe\" for enabling/disabling the RDP service on the host by tampering with the 'CurrentControlSet\\Control\\Terminal Server' values",
      "answer": "In order to detect the execution of \"reg.exe\" for enabling/disabling the RDP service on the host by tampering with the 'CurrentControlSet\\Control\\Terminal Server' values, you should: Monitor Windows process creation logs for instances where the \"reg.exe\" program is executed. Specifically, look for command lines that contain ' add ', '\\CurrentControlSet\\Control\\Terminal Server', 'REG_DWORD', and ' /f', indicating modifications to the Terminal Server settings in the registry. Additionally, keep an eye out for specific command line arguments that include 'Licensing Core', 'EnableConcurrentSessions', or other values such as 'WinStations\\RDP-Tcp', 'MaxInstanceCount', and similar, which are associated with concurrent RDP session settings. This detection focuses on changes that could enable or disable RDP services or alter its configuration for possibly malicious purposes. The rule uses high-level conditions to identify suspicious activity related to the Remote Desktop Protocol (RDP) settings, and it's tagged under techniques related to Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "How can I detect: suspicious child processes spawning from microsoft office suite applications such as word or excel. This could indicates malicious macro execution",
    "context": "",
    "output": "In order to detect suspicious child processes spawning from Microsoft Office suite applications such as Word or Excel, which could indicate malicious macro execution, you should: Monitor your macOS systems for the creation of processes that originate from common Microsoft Office applications (Word, Excel, PowerPoint, OneNote) and subsequently initiate specific scripts or command-line tools. Specifically, be vigilant for the launching of bash, curl, dash, fish, osacompile, osascript, sh, zsh, python, or python3 as child processes of these Office applications. Such occurrences are unusual and may signal an attempt to execute malicious commands or scripts following the enabling of macros or other content. This criteria serves as a red flag, denoting a potentially high-risk activity that necessitates immediate attention.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious child processes spawning from microsoft office suite applications such as word or excel. This could indicates malicious macro execution",
      "answer": "In order to detect suspicious child processes spawning from Microsoft Office suite applications such as Word or Excel, which could indicate malicious macro execution, you should: Monitor your macOS systems for the creation of processes that originate from common Microsoft Office applications (Word, Excel, PowerPoint, OneNote) and subsequently initiate specific scripts or command-line tools. Specifically, be vigilant for the launching of bash, curl, dash, fish, osacompile, osascript, sh, zsh, python, or python3 as child processes of these Office applications. Such occurrences are unusual and may signal an attempt to execute malicious commands or scripts following the enabling of macros or other content. This criteria serves as a red flag, denoting a potentially high-risk activity that necessitates immediate attention."
    }
  },
  {
    "instruction": "How to detect: suspicious copy command to or from an Admin share or remote",
    "context": "",
    "output": "In order to detect a suspicious copy command to or from an Admin share or remote, you should monitor Windows process creation events for the execution of specific file copying tools and commands that are commonly misused in cyber attacks. Look out for instances where either `robocopy.exe` or `xcopy.exe` is used, identifiable by the image name or original file name ending with these tool names. Similarly, watch for the launching of command prompt (`cmd.exe`) or PowerShell (`powershell.exe` or `pwsh.exe`), again identified by the image paths or the names of the original files. Beyond the tools themselves, scrutinize the command line arguments for the presence of keywords associated with copy actions, such as 'copy', 'copy-item', 'cpi', 'cp', 'move', 'move-item', 'mi', and 'mv'. \n\nParticularly, your detection mechanism should be alert to commands that imply interaction with administrative shares or remote systems. This includes command lines containing double backslashes (indicating network paths) followed by a dollar sign ('$') which usually denotes hidden or administrative shares, or explicit references to the '\\Sysvol\\' directory. \n\nIt's necessary to collect the command line and parent command line data to ensure thorough investigation capabilities. However, be aware that legitimate administrative scripts may also trigger this rule, which are considered to be false positives. Paying attention to such activities at a high level of alertness is crucial for identifying potentially malicious behavior related to unauthorized data copying, indicating a breach or lateral movement attempt within a network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious copy command to or from an Admin share or remote",
      "answer": "In order to detect a suspicious copy command to or from an Admin share or remote, you should monitor Windows process creation events for the execution of specific file copying tools and commands that are commonly misused in cyber attacks. Look out for instances where either `robocopy.exe` or `xcopy.exe` is used, identifiable by the image name or original file name ending with these tool names. Similarly, watch for the launching of command prompt (`cmd.exe`) or PowerShell (`powershell.exe` or `pwsh.exe`), again identified by the image paths or the names of the original files. Beyond the tools themselves, scrutinize the command line arguments for the presence of keywords associated with copy actions, such as 'copy', 'copy-item', 'cpi', 'cp', 'move', 'move-item', 'mi', and 'mv'. \n\nParticularly, your detection mechanism should be alert to commands that imply interaction with administrative shares or remote systems. This includes command lines containing double backslashes (indicating network paths) followed by a dollar sign ('$') which usually denotes hidden or administrative shares, or explicit references to the '\\Sysvol\\' directory. \n\nIt's necessary to collect the command line and parent command line data to ensure thorough investigation capabilities. However, be aware that legitimate administrative scripts may also trigger this rule, which are considered to be false positives. Paying attention to such activities at a high level of alertness is crucial for identifying potentially malicious behavior related to unauthorized data copying, indicating a breach or lateral movement attempt within a network."
    }
  },
  {
    "instruction": "How can I detect: attempts to collect data stored in the clipboard from users with the usage of xclip tool.\nXclip has to be installed.\nHighly recommended using rule on servers, due to high usage of clipboard utilities on user workstations.\n",
    "context": "",
    "output": "In order to detect attempts to collect data stored in the clipboard from users with the usage of xclip tool, you should monitor audit logs on Linux systems, particularly for auditd service records. Look for events where the execution command (`EXECVE`) involves the `xclip` tool. Specifically, pay attention to usage patterns where the command-line arguments include '-selection' or '-sel', followed by either 'clipboard' or 'clip', and also the '-o' option. This pattern of arguments is indicative of attempts to output the contents of the clipboard, which could be a sign of malicious activity aiming to steal information.\n\nIt is important to note that the detection of this activity is set at a low level due to the possibility of legitimate uses of the xclip tool, especially on user workstations where clipboard utilities are frequently used for non-malicious purposes. However, the monitoring is highly recommended on servers where such usage patterns are less common and more likely to be indicative of an attack.\n\nThis monitoring strategy aligns with MITRE ATT&CK tactics and techniques focused on the collection of data, specifically from information stored in the clipboard, potentially as part of a larger espionage or data theft operation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to collect data stored in the clipboard from users with the usage of xclip tool.\nXclip has to be installed.\nHighly recommended using rule on servers, due to high usage of clipboard utilities on user workstations.\n",
      "answer": "In order to detect attempts to collect data stored in the clipboard from users with the usage of xclip tool, you should monitor audit logs on Linux systems, particularly for auditd service records. Look for events where the execution command (`EXECVE`) involves the `xclip` tool. Specifically, pay attention to usage patterns where the command-line arguments include '-selection' or '-sel', followed by either 'clipboard' or 'clip', and also the '-o' option. This pattern of arguments is indicative of attempts to output the contents of the clipboard, which could be a sign of malicious activity aiming to steal information.\n\nIt is important to note that the detection of this activity is set at a low level due to the possibility of legitimate uses of the xclip tool, especially on user workstations where clipboard utilities are frequently used for non-malicious purposes. However, the monitoring is highly recommended on servers where such usage patterns are less common and more likely to be indicative of an attack.\n\nThis monitoring strategy aligns with MITRE ATT&CK tactics and techniques focused on the collection of data, specifically from information stored in the clipboard, potentially as part of a larger espionage or data theft operation."
    }
  },
  {
    "instruction": "How can I detect: execution of a Sysinternals Tool via the creation of the \"accepteula\" registry key",
    "context": "",
    "output": "In order to detect the execution of a Sysinternals Tool via the creation of the \"accepteula\" registry key, you should monitor the Windows Registry for events where a new key creation (CreateKey) is detected, specifically targeting keys that end with '\\EulaAccepted'. This activity is logged under the category of registry additions. While this behavior may indicate the usage of Sysinternals tools\u2014which require the acceptance of an End User License Agreement (EULA) before they run\u2014it's important to note that there may be legitimate instances of such activity. Programs other than Sysinternals tools might also use a registry key ending in '\\EulaAccepted', leading to possible false positives. Therefore, although this detection is set at a low level due to the potential for legitimate use cases, it remains a valuable indicator of specific tool execution that aligns with certain operating procedures or attack techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a Sysinternals Tool via the creation of the \"accepteula\" registry key",
      "answer": "In order to detect the execution of a Sysinternals Tool via the creation of the \"accepteula\" registry key, you should monitor the Windows Registry for events where a new key creation (CreateKey) is detected, specifically targeting keys that end with '\\EulaAccepted'. This activity is logged under the category of registry additions. While this behavior may indicate the usage of Sysinternals tools\u2014which require the acceptance of an End User License Agreement (EULA) before they run\u2014it's important to note that there may be legitimate instances of such activity. Programs other than Sysinternals tools might also use a registry key ending in '\\EulaAccepted', leading to possible false positives. Therefore, although this detection is set at a low level due to the potential for legitimate use cases, it remains a valuable indicator of specific tool execution that aligns with certain operating procedures or attack techniques."
    }
  },
  {
    "instruction": "Please help me detect the following: \"iscsicpl.exe\" UAC bypass technique that leverages a DLL Search Order hijacking technique to load a custom DLL's from temp or a any user controlled location in the users %PATH%",
    "context": "",
    "output": "Sure!\nIn order to detect the \"iscsicpl.exe\" UAC bypass technique that leverages a DLL Search Order hijacking technique to load custom DLLs from temp or any user-controlled location in the user's %PATH%, you should focus on monitoring Windows image load events. Specifically, look for instances where the image \"C:\\Windows\\SysWOW64\\iscsicpl.exe\" is loaded, and then it subsequently tries to load a DLL that ends with \"\\iscsiexe.dll\". However, ensure to exclude the cases where \"iscsiexe.dll\" is loaded directly from a path starting with \"C:\\Windows\\\", as this might be legitimate and thus, reduces false positives. This detection methodology is crucial for identifying potentially malicious activities associated with bypassing User Account Control (UAC) by exploiting the DLL search order, indicating a high severity level for such detections.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "\"iscsicpl.exe\" UAC bypass technique that leverages a DLL Search Order hijacking technique to load a custom DLL's from temp or a any user controlled location in the users %PATH%",
      "answer": "In order to detect the \"iscsicpl.exe\" UAC bypass technique that leverages a DLL Search Order hijacking technique to load custom DLLs from temp or any user-controlled location in the user's %PATH%, you should focus on monitoring Windows image load events. Specifically, look for instances where the image \"C:\\Windows\\SysWOW64\\iscsicpl.exe\" is loaded, and then it subsequently tries to load a DLL that ends with \"\\iscsiexe.dll\". However, ensure to exclude the cases where \"iscsiexe.dll\" is loaded directly from a path starting with \"C:\\Windows\\\", as this might be legitimate and thus, reduces false positives. This detection methodology is crucial for identifying potentially malicious activities associated with bypassing User Account Control (UAC) by exploiting the DLL search order, indicating a high severity level for such detections."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious execution of a Microsoft HTML Help (HH.exe)",
    "context": "",
    "output": "Sure!\nIn order to detect a suspicious execution of a Microsoft HTML Help (HH.exe), you should monitor the creation of processes on Windows systems looking specifically for the execution or starting of the Microsoft HTML Help executable, recognized either by its original file name 'HH.exe', or by its image path ending in '\\hh.exe'. Further attention should be paid to the command line paths involved in the execution, especially if they contain references to common temporary and download directories like '.application', '\\AppData\\Local\\Temp\\', '\\Content.Outlook\\', '\\Downloads\\', '\\Users\\Public\\', and '\\Windows\\Temp\\'. These specific paths are often utilized by attackers to execute malicious scripts or programs in seemingly benign or temporary locations on a victim's device, making it vital to scrutinize any process involving them closely. However, it's important to note that there might be legitimate cases leading to false positives, although they are not specifically known or predictable. The seriousness of such detections is regarded as high, highlighting the need for immediate investigation upon alert.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious execution of a Microsoft HTML Help (HH.exe)",
      "answer": "In order to detect a suspicious execution of a Microsoft HTML Help (HH.exe), you should monitor the creation of processes on Windows systems looking specifically for the execution or starting of the Microsoft HTML Help executable, recognized either by its original file name 'HH.exe', or by its image path ending in '\\hh.exe'. Further attention should be paid to the command line paths involved in the execution, especially if they contain references to common temporary and download directories like '.application', '\\AppData\\Local\\Temp\\', '\\Content.Outlook\\', '\\Downloads\\', '\\Users\\Public\\', and '\\Windows\\Temp\\'. These specific paths are often utilized by attackers to execute malicious scripts or programs in seemingly benign or temporary locations on a victim's device, making it vital to scrutinize any process involving them closely. However, it's important to note that there might be legitimate cases leading to false positives, although they are not specifically known or predictable. The seriousness of such detections is regarded as high, highlighting the need for immediate investigation upon alert."
    }
  },
  {
    "instruction": "How can I detect: Point-to-site VPN is Modified or Deleted.",
    "context": "",
    "output": "In order to identify when a Point-to-site VPN is Modified or Deleted, you should: Monitor Azure Activity Logs for specific operations that indicate modifications or deletions to Point-to-Site VPN gateways. These operations include writing to, deleting, resetting, generating a VPN profile for, disconnecting VPN connections from, and writing diagnostic settings to P2S VPN gateways. These activities are captured under operation names like MICROSOFT.NETWORK/P2SVPNGATEWAYS/WRITE, MICROSOFT.NETWORK/P2SVPNGATEWAYS/DELETE, and several others specifically related to VPN gateway modifications.\n\nIt's essential to consider that not all modifications to the VPN may signify malicious intent. For example, system administrators routinely perform modifications or deletions as part of their regular duties. Therefore, it's important to verify the legitimacy of such activities by examining the user identity, user agent, and hostname involved in the changes. Should an unfamiliar user perform these actions, an investigation should be initiated. If known legitimate behaviors are identified as causing alerts, these can be configured as exceptions to reduce false positives. The significance of this monitoring is categorized at a medium level, reflecting its importance in maintaining the security and integrity of VPN gateways within an organization's Azure environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Point-to-site VPN is Modified or Deleted.",
      "answer": "In order to identify when a Point-to-site VPN is Modified or Deleted, you should: Monitor Azure Activity Logs for specific operations that indicate modifications or deletions to Point-to-Site VPN gateways. These operations include writing to, deleting, resetting, generating a VPN profile for, disconnecting VPN connections from, and writing diagnostic settings to P2S VPN gateways. These activities are captured under operation names like MICROSOFT.NETWORK/P2SVPNGATEWAYS/WRITE, MICROSOFT.NETWORK/P2SVPNGATEWAYS/DELETE, and several others specifically related to VPN gateway modifications.\n\nIt's essential to consider that not all modifications to the VPN may signify malicious intent. For example, system administrators routinely perform modifications or deletions as part of their regular duties. Therefore, it's important to verify the legitimacy of such activities by examining the user identity, user agent, and hostname involved in the changes. Should an unfamiliar user perform these actions, an investigation should be initiated. If known legitimate behaviors are identified as causing alerts, these can be configured as exceptions to reduce false positives. The significance of this monitoring is categorized at a medium level, reflecting its importance in maintaining the security and integrity of VPN gateways within an organization's Azure environment."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Hides the file extension through modification of the registry",
    "context": "",
    "output": "In order to hide the file extension through modification of the registry, you should: Monitor Windows registry set actions focusing on detecting any changes made to specific registry keys that control how file extensions are displayed and whether hidden files are shown in the Windows environment. Specifically, pay attention to any event where the \"SetValue\" event type is observed that modifies the \"\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\HideFileExt\" registry key to a value of 'DWORD (0x00000001)', which effectively hides file extensions from being shown to the user. Similarly, look out for modifications to the \"\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Hidden\" registry key, particularly changes made to set its value to 'DWORD (0x00000002)', which configures the system to not display hidden files. Implement detection mechanisms that can identify either one of these modifications as they could indicate malicious activity aimed at concealing potentially harmful file extensions or hiding malicious files in plain sight. It is also important to consider that there may be legitimate cases where administrative scripts perform such actions for valid reasons. Thus, it's essential to verify the context of these modifications to avoid false positives. The urgency for such monitoring and analysis is considered of medium level, reflecting the potential risk posed by successfully hiding malicious files or enabling deceptive file names through hidden extensions. Tactically, this activity is linked to persistence, defense evasion, and potentially the initial access phase of a cyber attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Hides the file extension through modification of the registry",
      "answer": "In order to hide the file extension through modification of the registry, you should: Monitor Windows registry set actions focusing on detecting any changes made to specific registry keys that control how file extensions are displayed and whether hidden files are shown in the Windows environment. Specifically, pay attention to any event where the \"SetValue\" event type is observed that modifies the \"\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\HideFileExt\" registry key to a value of 'DWORD (0x00000001)', which effectively hides file extensions from being shown to the user. Similarly, look out for modifications to the \"\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Hidden\" registry key, particularly changes made to set its value to 'DWORD (0x00000002)', which configures the system to not display hidden files. Implement detection mechanisms that can identify either one of these modifications as they could indicate malicious activity aimed at concealing potentially harmful file extensions or hiding malicious files in plain sight. It is also important to consider that there may be legitimate cases where administrative scripts perform such actions for valid reasons. Thus, it's essential to verify the context of these modifications to avoid false positives. The urgency for such monitoring and analysis is considered of medium level, reflecting the potential risk posed by successfully hiding malicious files or enabling deceptive file names through hidden extensions. Tactically, this activity is linked to persistence, defense evasion, and potentially the initial access phase of a cyber attack."
    }
  },
  {
    "instruction": "How can I detect: execution of perl using the \"-e\"/\"-E\" flags. This is could be used as a way to launch a reverse shell or execute live perl code.",
    "context": "",
    "output": "In order to detect execution of perl using the \"-e\"/\"-E\" flags, which could be used as a way to launch a reverse shell or execute live perl code, you should: monitor for the creation of processes on Windows systems, specifically looking for the execution of perl. This involves checking for processes where the image name ends with '\\perl.exe' or the original file name is identified exactly as 'perl.exe', which also covers variations like 'perlX.XX.exe'. Additionally, it's important to scrutinize the command line arguments for any instances containing ' -e', as this flag is commonly used to execute code directly from the command line. If both conditions regarding the image name and command line arguments are met, it likely indicates a potential security threat. Despite this, be aware that there are scenarios where this detection might lead to false positives, though those instances are not clearly defined. The severity level of this rule is considered medium, emphasizing the need for prompt investigation into alerts generated by these conditions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of perl using the \"-e\"/\"-E\" flags. This is could be used as a way to launch a reverse shell or execute live perl code.",
      "answer": "In order to detect execution of perl using the \"-e\"/\"-E\" flags, which could be used as a way to launch a reverse shell or execute live perl code, you should: monitor for the creation of processes on Windows systems, specifically looking for the execution of perl. This involves checking for processes where the image name ends with '\\perl.exe' or the original file name is identified exactly as 'perl.exe', which also covers variations like 'perlX.XX.exe'. Additionally, it's important to scrutinize the command line arguments for any instances containing ' -e', as this flag is commonly used to execute code directly from the command line. If both conditions regarding the image name and command line arguments are met, it likely indicates a potential security threat. Despite this, be aware that there are scenarios where this detection might lead to false positives, though those instances are not clearly defined. The severity level of this rule is considered medium, emphasizing the need for prompt investigation into alerts generated by these conditions."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when an user account is locked or suspended.",
    "context": "",
    "output": "In order to detect when a user account is locked or suspended, you should: Monitor Onelogin event logs for specific event types that indicate such activities have occurred. Focus on Onelogin's events log source, where you'll primarily be looking for three types of events. First, look for events with an event type ID of 532, which signals that an account has been locked via API. Secondly, watch out for events marked with an event type ID of 553, indicating an account was also locked through API interactions. Thirdly, be aware of events with an event type ID of 551, which points towards an account suspension carried out via API.\n\nThese activities might sometimes generate false positives, as the system may legitimately lock or suspend user accounts for various non-malicious reasons. Therefore, the level of threat associated with these detections is considered low. Focus your efforts on examining these specific event IDs in the Onelogin's events logs to effectively identify cases where a user account might be at risk, aligning with associated detection practices linked to account manipulation and abuse of authentication processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an user account is locked or suspended.",
      "answer": "In order to detect when a user account is locked or suspended, you should: Monitor Onelogin event logs for specific event types that indicate such activities have occurred. Focus on Onelogin's events log source, where you'll primarily be looking for three types of events. First, look for events with an event type ID of 532, which signals that an account has been locked via API. Secondly, watch out for events marked with an event type ID of 553, indicating an account was also locked through API interactions. Thirdly, be aware of events with an event type ID of 551, which points towards an account suspension carried out via API.\n\nThese activities might sometimes generate false positives, as the system may legitimately lock or suspend user accounts for various non-malicious reasons. Therefore, the level of threat associated with these detections is considered low. Focus your efforts on examining these specific event IDs in the Onelogin's events logs to effectively identify cases where a user account might be at risk, aligning with associated detection practices linked to account manipulation and abuse of authentication processes."
    }
  },
  {
    "instruction": "How to detect: creation of files with the \".pub\" extension in suspicious or uncommon locations. This could be a sign of attackers abusing Publisher documents",
    "context": "",
    "output": "In order to detect the creation of files with the \".pub\" extension in suspicious or uncommon locations, which could be a sign of attackers abusing Publisher documents, you should monitor file events on Windows systems. Specifically, look for the creation of \".pub\" files in the following directories: '\\AppData\\Local\\Temp\\', '\\Users\\Public\\', '\\Windows\\Temp\\', and 'C:\\Temp\\'. These locations are typically used by attackers to store malicious files as they are often not monitored closely. The detection of such activities should be treated with caution due to the possibility of legitimate usage of \".pub\" files in these locations, although this should be considered a medium-level threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of files with the \".pub\" extension in suspicious or uncommon locations. This could be a sign of attackers abusing Publisher documents",
      "answer": "In order to detect the creation of files with the \".pub\" extension in suspicious or uncommon locations, which could be a sign of attackers abusing Publisher documents, you should monitor file events on Windows systems. Specifically, look for the creation of \".pub\" files in the following directories: '\\AppData\\Local\\Temp\\', '\\Users\\Public\\', '\\Windows\\Temp\\', and 'C:\\Temp\\'. These locations are typically used by attackers to store malicious files as they are often not monitored closely. The detection of such activities should be treated with caution due to the possibility of legitimate usage of \".pub\" files in these locations, although this should be considered a medium-level threat."
    }
  },
  {
    "instruction": "Explain how should I detect the following: process access to LSASS memory with suspicious access flags and from a potentially suspicious folder",
    "context": "",
    "output": "In order to detect process access to LSASS memory with suspicious access flags and from a potentially suspicious folder, you should: Focus on monitoring process access within Windows operating systems, specifically observing any process that attempts to access the memory of the Local Security Authority Subsystem Service (LSASS) executable. This observation should be narrowed down to access attempts where the target image ends with '\\lsass.exe' and the granted access flags end with a set of specific hexadecimal values which could indicate suspicious activities such as unauthorized memory read or write operations.\n\nFurther refine the detection by scrutinizing the source of the access attempt, particularly if it originates from directories often used by legitimate programs but can be abused by attackers, like temporary folders or public user folders. These include paths containing '\\Temp\\', '\\Users\\Public\\', '\\PerfLogs\\', '\\AppData\\', and '\\Temporary'. The detection becomes more credible if these access attempts do not originate from software updaters or installers known to occasionally perform similar actions for legitimate reasons, such as updates from Visual Studio Code, Dropbox, the Microsoft Bootstrapper for Visual Studio, the Google Chrome updater, Keybase, or antivirus software updates like Avira, as these are typically marked as false positives.\n\nTo successfully implement this detection strategy, concentrate on logs that fall under the process access category for Windows products. Tag this activity with relevant MITRE ATT&CK tactics and techniques associated with credential access attempts, especially those attempting to access critical system processes memory like LSASS for credential dumping purposes. Pay attention to access attempts that do not align with expected behavior from known and trusted applications by using exclusions for certain paths and access patterns that are associated with known benign software behavior, thereby reducing false positives. Monitor fields such as User, SourceImage, and GrantedAccess in your log data to effectively identify and respond to potential threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process access to LSASS memory with suspicious access flags and from a potentially suspicious folder",
      "answer": "In order to detect process access to LSASS memory with suspicious access flags and from a potentially suspicious folder, you should: Focus on monitoring process access within Windows operating systems, specifically observing any process that attempts to access the memory of the Local Security Authority Subsystem Service (LSASS) executable. This observation should be narrowed down to access attempts where the target image ends with '\\lsass.exe' and the granted access flags end with a set of specific hexadecimal values which could indicate suspicious activities such as unauthorized memory read or write operations.\n\nFurther refine the detection by scrutinizing the source of the access attempt, particularly if it originates from directories often used by legitimate programs but can be abused by attackers, like temporary folders or public user folders. These include paths containing '\\Temp\\', '\\Users\\Public\\', '\\PerfLogs\\', '\\AppData\\', and '\\Temporary'. The detection becomes more credible if these access attempts do not originate from software updaters or installers known to occasionally perform similar actions for legitimate reasons, such as updates from Visual Studio Code, Dropbox, the Microsoft Bootstrapper for Visual Studio, the Google Chrome updater, Keybase, or antivirus software updates like Avira, as these are typically marked as false positives.\n\nTo successfully implement this detection strategy, concentrate on logs that fall under the process access category for Windows products. Tag this activity with relevant MITRE ATT&CK tactics and techniques associated with credential access attempts, especially those attempting to access critical system processes memory like LSASS for credential dumping purposes. Pay attention to access attempts that do not align with expected behavior from known and trusted applications by using exclusions for certain paths and access patterns that are associated with known benign software behavior, thereby reducing false positives. Monitor fields such as User, SourceImage, and GrantedAccess in your log data to effectively identify and respond to potential threats."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Threat actors can use auditpol binary to change audit policy configuration to impair detection capability.\nThis can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\n",
    "context": "",
    "output": "In order to detect when threat actors use the auditpol binary to change audit policy configuration to impair detection capability, which can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor, you should monitor the creation of processes on Windows systems for the execution of 'auditpol.exe'. Specifically, look for instances where the command line includes actions such as 'disable', 'clear', 'remove', or 'restore', which are indicative of attempts to alter audit policies in a way that could hinder detection of malicious activities. It is important to note that while such commands might sometimes be used by administrators or in administrator scripts, any usage of these flags should be carefully monitored due to the high risk associated with altering audit policies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Threat actors can use auditpol binary to change audit policy configuration to impair detection capability.\nThis can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\n",
      "answer": "In order to detect when threat actors use the auditpol binary to change audit policy configuration to impair detection capability, which can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor, you should monitor the creation of processes on Windows systems for the execution of 'auditpol.exe'. Specifically, look for instances where the command line includes actions such as 'disable', 'clear', 'remove', or 'restore', which are indicative of attempts to alter audit policies in a way that could hinder detection of malicious activities. It is important to note that while such commands might sometimes be used by administrators or in administrator scripts, any usage of these flags should be carefully monitored due to the high risk associated with altering audit policies."
    }
  },
  {
    "instruction": "Explain how should I detect the following: rare service installs that only appear a few times per time frame and could reveal password dumpers, backdoor installs or other types of malicious services",
    "context": "",
    "output": "In order to detect rare service installs that only appear a few times per timeframe and could reveal password dumpers, backdoor installs, or other types of malicious services, you should:\nMonitor Windows System event logs, particularly focusing on events generated by the Service Control Manager (Provider_Name: 'Service Control Manager') with an Event ID of 7045. This Event ID is indicative of service installations on a Windows system. Analyze the occurrences of these events over a period of 7 days (timeframe: 7d) and identify services that have been installed fewer than 5 times within this timeframe (condition: selection | count() by ServiceName < 5). Such rare installations could potentially be an indicator of malicious activity, including but not limited to the deployment of password dumpers or backdoors. Be aware that some legitimate activities, such as software installations or updates, might also trigger these events (false positives: Software installation, Software updates). The level of confidence in this detection technique is categorized as low, indicating that while it can be a helpful indicator of suspicious activity, it should be used in conjunction with other assessment tools or techniques for a more definitive analysis.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "rare service installs that only appear a few times per time frame and could reveal password dumpers, backdoor installs or other types of malicious services",
      "answer": "In order to detect rare service installs that only appear a few times per timeframe and could reveal password dumpers, backdoor installs, or other types of malicious services, you should:\nMonitor Windows System event logs, particularly focusing on events generated by the Service Control Manager (Provider_Name: 'Service Control Manager') with an Event ID of 7045. This Event ID is indicative of service installations on a Windows system. Analyze the occurrences of these events over a period of 7 days (timeframe: 7d) and identify services that have been installed fewer than 5 times within this timeframe (condition: selection | count() by ServiceName < 5). Such rare installations could potentially be an indicator of malicious activity, including but not limited to the deployment of password dumpers or backdoors. Be aware that some legitimate activities, such as software installations or updates, might also trigger these events (false positives: Software installation, Software updates). The level of confidence in this detection technique is categorized as low, indicating that while it can be a helpful indicator of suspicious activity, it should be used in conjunction with other assessment tools or techniques for a more definitive analysis."
    }
  },
  {
    "instruction": "How can I detect: execution of ruby with the \"-e\" flag and calls to \"socket\" related functions. This could be an indication of a potential attempt to setup a reverse shell",
    "context": "",
    "output": "In order to detect execution of ruby with the \"-e\" flag and calls to \"socket\" related functions, which could be an indication of a potential attempt to setup a reverse shell, you should monitor process creation logs on Linux systems for instances where the command line includes execution of the 'ruby' command. Specifically, look for commands that utilize the '-e' option along with references to 'rsocket' or 'TCPSocket', which are indicative of socket-related operations that could be employed in the establishment of a reverse shell. Additionally, pay attention to whether these commands are executed within common shell environments, as indicated by the presence of shell names such as 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', or 'tcsh' within the command line. This approach allows for the identification of suspicious behavior that aligns with tactics and techniques related to the execution of potentially malicious code and the use of application layer protocols to facilitate command and control activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of ruby with the \"-e\" flag and calls to \"socket\" related functions. This could be an indication of a potential attempt to setup a reverse shell",
      "answer": "In order to detect execution of ruby with the \"-e\" flag and calls to \"socket\" related functions, which could be an indication of a potential attempt to setup a reverse shell, you should monitor process creation logs on Linux systems for instances where the command line includes execution of the 'ruby' command. Specifically, look for commands that utilize the '-e' option along with references to 'rsocket' or 'TCPSocket', which are indicative of socket-related operations that could be employed in the establishment of a reverse shell. Additionally, pay attention to whether these commands are executed within common shell environments, as indicated by the presence of shell names such as 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', or 'tcsh' within the command line. This approach allows for the identification of suspicious behavior that aligns with tactics and techniques related to the execution of potentially malicious code and the use of application layer protocols to facilitate command and control activities."
    }
  },
  {
    "instruction": "How to detect: Adversaries may abuse msiexec.exe to proxy the execution of malicious payloads",
    "context": "",
    "output": "In order to prevent adversaries from leveraging msiexec.exe to execute malicious payloads, you should focus on monitoring the process creation logs within Windows environments. Specifically, be on the lookout for instances where PowerShell (`powershell.exe` or `pwsh.exe`) or Command Prompt (`cmd.exe`) processes are initiated, with a parent command line that includes running `MsiExec.exe` with the `-Embedding` flag. This is a common technique used to execute malicious scripts or commands without directly invoking the malicious file, thus possibly evading detection.\n\nHowever, it is important to apply certain filters to reduce false positives. Exclude any events where the Command Line invokes `cmd.exe` from `C:\\Windows\\System32\\cmd.exe` specifically for `C:\\Program Files\\SplunkUniversalForwarder\\bin\\`, as this is a legitimate activity associated with Splunk Universal Forwarder's operations. Additionally, disregard instances where the command line includes `\\DismFoDInstall.cmd` or when the `MsiExec.exe -Embedding` operation is associated with the `Global\\MSI0000` process, as these are typical of development environments and not indicative of malicious activity.\n\nBy implementing such detection mechanisms, you can better identify and investigate potentially malicious activities related to the abuse of `msiexec.exe` for executing unauthorized code, aligning with tactics and techniques such as execution through API and command and script interpreter abuse.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may abuse msiexec.exe to proxy the execution of malicious payloads",
      "answer": "In order to prevent adversaries from leveraging msiexec.exe to execute malicious payloads, you should focus on monitoring the process creation logs within Windows environments. Specifically, be on the lookout for instances where PowerShell (`powershell.exe` or `pwsh.exe`) or Command Prompt (`cmd.exe`) processes are initiated, with a parent command line that includes running `MsiExec.exe` with the `-Embedding` flag. This is a common technique used to execute malicious scripts or commands without directly invoking the malicious file, thus possibly evading detection.\n\nHowever, it is important to apply certain filters to reduce false positives. Exclude any events where the Command Line invokes `cmd.exe` from `C:\\Windows\\System32\\cmd.exe` specifically for `C:\\Program Files\\SplunkUniversalForwarder\\bin\\`, as this is a legitimate activity associated with Splunk Universal Forwarder's operations. Additionally, disregard instances where the command line includes `\\DismFoDInstall.cmd` or when the `MsiExec.exe -Embedding` operation is associated with the `Global\\MSI0000` process, as these are typical of development environments and not indicative of malicious activity.\n\nBy implementing such detection mechanisms, you can better identify and investigate potentially malicious activities related to the abuse of `msiexec.exe` for executing unauthorized code, aligning with tactics and techniques such as execution through API and command and script interpreter abuse."
    }
  },
  {
    "instruction": "How to detect: attempts of decoding a base64 Gzip archive in a PowerShell script. This technique is often used as a method to load malicious content into memory afterward.",
    "context": "",
    "output": "In order to detect attempts of decoding a base64 Gzip archive in a PowerShell script, which is often used as a method to load malicious content into memory afterward, you should: Focus on PowerShell scripts running on Windows systems. Specifically, monitor the scripts for any occurrence where they contain all of the following elements: 'FromBase64String', 'MemoryStream', and the base64 string 'H4sI'. These elements are indicative of actions attempting to decode base64 Gzip archives. It's important to note that enabling Script Block Logging on Windows is required to effectively monitor these scripts for the specified patterns. Be aware, however, that there may be legitimate administrative scripts that also perform similar actions, so these should be considered as potential false positives. The severity of this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts of decoding a base64 Gzip archive in a PowerShell script. This technique is often used as a method to load malicious content into memory afterward.",
      "answer": "In order to detect attempts of decoding a base64 Gzip archive in a PowerShell script, which is often used as a method to load malicious content into memory afterward, you should: Focus on PowerShell scripts running on Windows systems. Specifically, monitor the scripts for any occurrence where they contain all of the following elements: 'FromBase64String', 'MemoryStream', and the base64 string 'H4sI'. These elements are indicative of actions attempting to decode base64 Gzip archives. It's important to note that enabling Script Block Logging on Windows is required to effectively monitor these scripts for the specified patterns. Be aware, however, that there may be legitimate administrative scripts that also perform similar actions, so these should be considered as potential false positives. The severity of this detection is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
    "context": "",
    "output": "Sure!\nIn order to detect alternate PowerShell hosts potentially bypassing detections looking for powershell.exe, you should: Focus on monitoring PowerShell activity within the Windows environment, particularly through the PowerShell module logging. Pay special attention to the context information recorded in these logs. Any event that contains context information is of interest, as malicious actors often exploit PowerShell's flexibility for executing commands.\n\nBe extra vigilant for specific indicators of alternate PowerShell invocation methods, which include but are not limited to, PowerShell being called directly from the command line (identified through keywords like 'powershell' or 'powershell.exe'), or invoked from directories without specifying the full \".exe\" extension, such as \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell\" or its SysWOW64 counterpart. Also, look for cases where PowerShell is launched with inverted slashes in the path, which is a less common technique used to evade simple detection mechanisms.\n\nFurthermore, the detection should account for other executables that could be misused to host PowerShell scripts or commands indirectly. These include the Diagnostic Script Host \"C:\\WINDOWS\\System32\\sdiagnhost.exe -Embedding\", used by MSDT, ConfigSyncRun.exe related to Citrix environments, the Active Directory Administrative Center Enhancements tool \"C:\\Windows\\system32\\dsac.exe\", the Windows Remote Management host \"C:\\Windows\\system32\\wsmprovhost.exe -Embedding\", among others. Monitoring these executable paths for unusual or unexpected PowerShell activity can reveal attempts to bypass traditional PowerShell execution monitoring.\n\nAdditionally, watch for PowerShell commands related to help updates, like 'Update-Help' or messages indicating a failure to update help for a module, as these can be misused in attack scenarios.\n\nHowever, be mindful of legitimate software that might directly invoke PowerShell for various non-malicious purposes. Programs that explicitly require PowerShell, MSP Detection Searcher, and certain Citrix configurations can generate similar activity, potentially leading to false positives.\n\nBy examining these aspects across the Windows ps_module log source with a medium level of scrutiny, you will enhance detection capabilities against adversaries attempting to leverage alternate methods for executing PowerShell commands, thus potentially bypassing traditional detection approaches that only focus on direct 'powershell.exe' invocations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
      "answer": "In order to detect alternate PowerShell hosts potentially bypassing detections looking for powershell.exe, you should: Focus on monitoring PowerShell activity within the Windows environment, particularly through the PowerShell module logging. Pay special attention to the context information recorded in these logs. Any event that contains context information is of interest, as malicious actors often exploit PowerShell's flexibility for executing commands.\n\nBe extra vigilant for specific indicators of alternate PowerShell invocation methods, which include but are not limited to, PowerShell being called directly from the command line (identified through keywords like 'powershell' or 'powershell.exe'), or invoked from directories without specifying the full \".exe\" extension, such as \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell\" or its SysWOW64 counterpart. Also, look for cases where PowerShell is launched with inverted slashes in the path, which is a less common technique used to evade simple detection mechanisms.\n\nFurthermore, the detection should account for other executables that could be misused to host PowerShell scripts or commands indirectly. These include the Diagnostic Script Host \"C:\\WINDOWS\\System32\\sdiagnhost.exe -Embedding\", used by MSDT, ConfigSyncRun.exe related to Citrix environments, the Active Directory Administrative Center Enhancements tool \"C:\\Windows\\system32\\dsac.exe\", the Windows Remote Management host \"C:\\Windows\\system32\\wsmprovhost.exe -Embedding\", among others. Monitoring these executable paths for unusual or unexpected PowerShell activity can reveal attempts to bypass traditional PowerShell execution monitoring.\n\nAdditionally, watch for PowerShell commands related to help updates, like 'Update-Help' or messages indicating a failure to update help for a module, as these can be misused in attack scenarios.\n\nHowever, be mindful of legitimate software that might directly invoke PowerShell for various non-malicious purposes. Programs that explicitly require PowerShell, MSP Detection Searcher, and certain Citrix configurations can generate similar activity, potentially leading to false positives.\n\nBy examining these aspects across the Windows ps_module log source with a medium level of scrutiny, you will enhance detection capabilities against adversaries attempting to leverage alternate methods for executing PowerShell commands, thus potentially bypassing traditional detection approaches that only focus on direct 'powershell.exe' invocations."
    }
  },
  {
    "instruction": "Can you explain how to detect: tscon.exe start as LOCAL SYSTEM",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a tscon.exe start as LOCAL SYSTEM, you should: Look for instances where processes are being created within the Windows operating system that might signify an exploitation attempt. Specifically, monitor for the initiation of the `tscon.exe` process. This tracking focuses on particular instances where user account names include parts that resemble 'AUTHORI' or 'AUTORI', accommodating various language settings. This pattern might indicate malicious attempts to execute `tscon.exe` under the guise of legitimate authorization processes, possibly to maintain persistence or escalate privileges by hijacking a valid session. It's crucial to regard these detection triggers with high importance due to their potential connection with security breaches, though one should also consider that there might be benign scenarios that could falsely trigger the same alarms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "tscon.exe start as LOCAL SYSTEM",
      "answer": "In order to detect a tscon.exe start as LOCAL SYSTEM, you should: Look for instances where processes are being created within the Windows operating system that might signify an exploitation attempt. Specifically, monitor for the initiation of the `tscon.exe` process. This tracking focuses on particular instances where user account names include parts that resemble 'AUTHORI' or 'AUTORI', accommodating various language settings. This pattern might indicate malicious attempts to execute `tscon.exe` under the guise of legitimate authorization processes, possibly to maintain persistence or escalate privileges by hijacking a valid session. It's crucial to regard these detection triggers with high importance due to their potential connection with security breaches, though one should also consider that there might be benign scenarios that could falsely trigger the same alarms."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of \"reg.exe\" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection",
    "context": "",
    "output": "Sure!\nIn order to detect the usage of \"reg.exe\" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection, you should: Monitor process creation events on Windows systems, especially focusing on the execution of \"reg.exe\". Look specifically for command lines that modify registry paths related to Windows Defender, encompassing both settings for Windows Defender itself and its additional security features like Windows Defender Security Center. Pay close attention when \"reg.exe\" is used to manipulate registry keys by adding '0' values to critical settings such as exploit protection overrides, folder access control, potentially unwanted application (PUA) protection, sample submission consent, and tamper protection, which generally weaken the system's defensive capabilities. Equally important is to identify when '1' values are added to disable a wide array of protection features including anti-spyware, antivirus, archive scanning, behavior monitoring, and realtime monitoring, among others. This activity requires rigorous scrutiny because, although there might be rare legitimate uses by administrators for testing purposes, any occurrence of these registry modifications could point toward an attacker's attempt to undermine the system's security posture.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"reg.exe\" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection",
      "answer": "In order to detect the usage of \"reg.exe\" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection, you should: Monitor process creation events on Windows systems, especially focusing on the execution of \"reg.exe\". Look specifically for command lines that modify registry paths related to Windows Defender, encompassing both settings for Windows Defender itself and its additional security features like Windows Defender Security Center. Pay close attention when \"reg.exe\" is used to manipulate registry keys by adding '0' values to critical settings such as exploit protection overrides, folder access control, potentially unwanted application (PUA) protection, sample submission consent, and tamper protection, which generally weaken the system's defensive capabilities. Equally important is to identify when '1' values are added to disable a wide array of protection features including anti-spyware, antivirus, archive scanning, behavior monitoring, and realtime monitoring, among others. This activity requires rigorous scrutiny because, although there might be rare legitimate uses by administrators for testing purposes, any occurrence of these registry modifications could point toward an attacker's attempt to undermine the system's security posture."
    }
  },
  {
    "instruction": "How can I detect: RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes",
    "context": "",
    "output": "In order to detect RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes, you should monitor the process creation logs in Windows for specific patterns of RAR command-line execution. Look for processes where the image path ends with '\\rar.exe', indicating the use of the RAR utility, or descriptions matching 'Command line RAR'. Additionally, be vigilant for command lines that contain patterns such as '.exe a ' or ' a -m', which are indicative of archive creation commands.\n\nFurther scrutiny is required for command lines that exhibit both the presence of a password flag ' -hp' and the recursive flag ' -r ', as these flags together strongly suggest an attempt to securely compress files from various directories recursively. It is particularly critical to focus on command lines that include paths to sensitive or commonly abused directories, such as 'C:\\\\\\*.', '%public%', 'C:\\Windows\\', 'C:\\PerfLogs\\', 'C:\\Temp', 'C:\\$Recycle.bin\\', or similar patterns that target directories outside standard user data locations. These directories are often leveraged by attackers for placing and subsequently exfiltrating data in a compressed format to avoid detection.\n\nMonitoring for these specific command-line patterns and directory targets is crucial in identifying suspicious use of RAR for potentially malicious purposes, such as data exfiltration or staging for lateral movement within a compromised environment. This activity is associated with tactics and techniques that include Collection, Exfiltration, and Command and Control, underlining the need for heightened awareness and rapid response to such indicators of compromise.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes",
      "answer": "In order to detect RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes, you should monitor the process creation logs in Windows for specific patterns of RAR command-line execution. Look for processes where the image path ends with '\\rar.exe', indicating the use of the RAR utility, or descriptions matching 'Command line RAR'. Additionally, be vigilant for command lines that contain patterns such as '.exe a ' or ' a -m', which are indicative of archive creation commands.\n\nFurther scrutiny is required for command lines that exhibit both the presence of a password flag ' -hp' and the recursive flag ' -r ', as these flags together strongly suggest an attempt to securely compress files from various directories recursively. It is particularly critical to focus on command lines that include paths to sensitive or commonly abused directories, such as 'C:\\\\\\*.', '%public%', 'C:\\Windows\\', 'C:\\PerfLogs\\', 'C:\\Temp', 'C:\\$Recycle.bin\\', or similar patterns that target directories outside standard user data locations. These directories are often leveraged by attackers for placing and subsequently exfiltrating data in a compressed format to avoid detection.\n\nMonitoring for these specific command-line patterns and directory targets is crucial in identifying suspicious use of RAR for potentially malicious purposes, such as data exfiltration or staging for lateral movement within a compromised environment. This activity is associated with tactics and techniques that include Collection, Exfiltration, and Command and Control, underlining the need for heightened awareness and rapid response to such indicators of compromise."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential PwnKit exploitation CVE-2021-4034 in auth logs",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential PwnKit exploitation CVE-2021-4034 in auth logs, you should: Focus on authentication log files generated by Linux systems. Specifically, look for any of the following suspicious activities: usage of the 'pkexec' command, indications that the environment variable XAUTHORITY contains suspicious content, or logs containing both '[USER=root]' and '[TTY=/dev/pts/0]'. The detection of any of these activities may signify potential exploitation of the vulnerability. The tags related to this type of attack include Persistence, Privilege Escalation, and Defense Evasion techniques. It's important to note that while this method aims for precise identification of malicious behavior, some legitimate actions might occasionally trigger these indicators, though such false positives are currently unknown. This approach is tagged as high level due to the severity implication of successful exploitation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential PwnKit exploitation CVE-2021-4034 in auth logs",
      "answer": "In order to detect potential PwnKit exploitation CVE-2021-4034 in auth logs, you should: Focus on authentication log files generated by Linux systems. Specifically, look for any of the following suspicious activities: usage of the 'pkexec' command, indications that the environment variable XAUTHORITY contains suspicious content, or logs containing both '[USER=root]' and '[TTY=/dev/pts/0]'. The detection of any of these activities may signify potential exploitation of the vulnerability. The tags related to this type of attack include Persistence, Privilege Escalation, and Defense Evasion techniques. It's important to note that while this method aims for precise identification of malicious behavior, some legitimate actions might occasionally trigger these indicators, though such false positives are currently unknown. This approach is tagged as high level due to the severity implication of successful exploitation."
    }
  },
  {
    "instruction": "Please help me detect the following: Netsh command execution that whitelists a program located in a suspicious location in the Windows Firewall",
    "context": "",
    "output": "Sure!\nIn order to detect Netsh command execution that whitelists a program located in a suspicious location in the Windows Firewall, you should: observe the creation of processes on Windows systems, focusing on the invocation of Netsh.exe, either by its image name or original file name. Pay special attention to commands that include terms like 'firewall,' 'add,' 'allowedprogram,' as well as commands specifying advanced firewall rules designed to allow a program through the firewall with 'advfirewall', 'firewall', 'add', 'rule', and 'action=allow', particularly when the program is explicitly defined with 'program='. Furthermore, be vigilant for command lines that indicate the program is being whitelisted from locations that are generally not used for legitimate software installations or operations, such as public, temp, recycle bin, system volume information, and various other system and user directories that are unconventional for program installations. Monitoring these specific conditions can help identify and mitigate actions trying to bypass the firewall by whitelisting potentially malicious programs from suspicious locations, adhering to high-security alert levels due to the unusual nature of such actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Netsh command execution that whitelists a program located in a suspicious location in the Windows Firewall",
      "answer": "In order to detect Netsh command execution that whitelists a program located in a suspicious location in the Windows Firewall, you should: observe the creation of processes on Windows systems, focusing on the invocation of Netsh.exe, either by its image name or original file name. Pay special attention to commands that include terms like 'firewall,' 'add,' 'allowedprogram,' as well as commands specifying advanced firewall rules designed to allow a program through the firewall with 'advfirewall', 'firewall', 'add', 'rule', and 'action=allow', particularly when the program is explicitly defined with 'program='. Furthermore, be vigilant for command lines that indicate the program is being whitelisted from locations that are generally not used for legitimate software installations or operations, such as public, temp, recycle bin, system volume information, and various other system and user directories that are unconventional for program installations. Monitoring these specific conditions can help identify and mitigate actions trying to bypass the firewall by whitelisting potentially malicious programs from suspicious locations, adhering to high-security alert levels due to the unusual nature of such actions."
    }
  },
  {
    "instruction": "How can I detect: changes to the Registry in which a monitor program gets registered to monitor the exit of another process",
    "context": "",
    "output": "In order to detect changes to the Registry in which a monitor program gets registered to monitor the exit of another process, you should: monitor Windows Registry settings, particularly focusing on events where a registry setting is being modified. Specifically, look for the `SetValue` event type under the category of registry settings. These modifications of interest are those targeting the registry path that includes 'Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit'. Within these events, keep an eye out for any changes involving the registration or update of a `MonitorProcess`. This activity can be indicative of an attempt to stealthily observe or control the termination of processes, possibly for malicious reasons. Given the high importance (level: high) of such registry changes, any detection of these conditions should be taken seriously, though it's noted that there may be scenarios (false positives) where the implications of such detections are not clear or known. This activity aligns with tactics and techniques around persistence and privilege escalation, as the ability to monitor or manipulate the exit of processes could be exploited to maintain unauthorized access or elevate privileges within a system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the Registry in which a monitor program gets registered to monitor the exit of another process",
      "answer": "In order to detect changes to the Registry in which a monitor program gets registered to monitor the exit of another process, you should: monitor Windows Registry settings, particularly focusing on events where a registry setting is being modified. Specifically, look for the `SetValue` event type under the category of registry settings. These modifications of interest are those targeting the registry path that includes 'Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit'. Within these events, keep an eye out for any changes involving the registration or update of a `MonitorProcess`. This activity can be indicative of an attempt to stealthily observe or control the termination of processes, possibly for malicious reasons. Given the high importance (level: high) of such registry changes, any detection of these conditions should be taken seriously, though it's noted that there may be scenarios (false positives) where the implications of such detections are not clear or known. This activity aligns with tactics and techniques around persistence and privilege escalation, as the ability to monitor or manipulate the exit of processes could be exploited to maintain unauthorized access or elevate privileges within a system."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious encoded payloads in WMI Event Consumers",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious encoded payloads in WMI Event Consumers, you should monitor Windows Management Instrumentation (WMI) event logs for specific encoded payload patterns. Focus on identifying any events where the destination contains certain base64 offsets indicative of suspicious or potentially malicious content. These include patterns that reference \"WriteProcessMemory\", which suggests an attempt to modify another process's memory\u2014a common tactic in exploitation and persistence; or strings like \"This program cannot be run in DOS mode\" and \"This program must be run under Win32\", which are typically found in the headers of Windows executables and may indicate embedded or obfuscated executable content within the payload. Monitoring for these specific patterns in WMI event logs is crucial. Additionally, keeping track of the user and the operation involved in these events can provide further context and aid in investigation. It is important to note that while this approach is high in its detection level, there may still be unknown false positives, so corroborating these findings with other indicators of compromise is recommended.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious encoded payloads in WMI Event Consumers",
      "answer": "In order to detect suspicious encoded payloads in WMI Event Consumers, you should monitor Windows Management Instrumentation (WMI) event logs for specific encoded payload patterns. Focus on identifying any events where the destination contains certain base64 offsets indicative of suspicious or potentially malicious content. These include patterns that reference \"WriteProcessMemory\", which suggests an attempt to modify another process's memory\u2014a common tactic in exploitation and persistence; or strings like \"This program cannot be run in DOS mode\" and \"This program must be run under Win32\", which are typically found in the headers of Windows executables and may indicate embedded or obfuscated executable content within the payload. Monitoring for these specific patterns in WMI event logs is crucial. Additionally, keeping track of the user and the operation involved in these events can provide further context and aid in investigation. It is important to note that while this approach is high in its detection level, there may still be unknown false positives, so corroborating these findings with other indicators of compromise is recommended."
    }
  },
  {
    "instruction": "Can you explain how to detect: when an Elastic Container Service (ECS) Task Definition includes a command to query the credential endpoint.\nThis can indicate a potential adversary adding a backdoor to establish persistence or escalate privileges.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when an Elastic Container Service (ECS) Task Definition includes a command to query the credential endpoint, which can indicate a potential adversary adding a backdoor to establish persistence or escalate privileges, you should focus on monitoring AWS CloudTrail logs. Specifically, look for logs where the `eventSource` is `ecs.amazonaws.com`, which means the activity is related to Elastic Container Services. The critical events to watch for include `DescribeTaskDefinition`, `RegisterTaskDefinition`, and `RunTask`. These events represent actions that query, register, or run task definitions within ECS.\n\nAn essential part of the detection is noticing when any `requestParameters.containerDefinitions.command` field contains the string `$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI`. This specific command is used to request credentials from the Task Metadata Service, which could be abused by attackers to gain access to AWS credentials.\n\nHowever, be aware of potential false positives, such as legitimate modifications to the task definition that include querying the credential endpoint for valid reasons. The threat level for this activity is considered medium, suggesting that while it's important to monitor for these indicators, they could occasionally represent legitimate usage. \n\nThis monitoring strategy is crucial for indentifying and mitigating unauthorized access or modifications to ECS Task Definitions that could lead to persistence or privilege escalation by adversaries.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an Elastic Container Service (ECS) Task Definition includes a command to query the credential endpoint.\nThis can indicate a potential adversary adding a backdoor to establish persistence or escalate privileges.\n",
      "answer": "In order to detect when an Elastic Container Service (ECS) Task Definition includes a command to query the credential endpoint, which can indicate a potential adversary adding a backdoor to establish persistence or escalate privileges, you should focus on monitoring AWS CloudTrail logs. Specifically, look for logs where the `eventSource` is `ecs.amazonaws.com`, which means the activity is related to Elastic Container Services. The critical events to watch for include `DescribeTaskDefinition`, `RegisterTaskDefinition`, and `RunTask`. These events represent actions that query, register, or run task definitions within ECS.\n\nAn essential part of the detection is noticing when any `requestParameters.containerDefinitions.command` field contains the string `$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI`. This specific command is used to request credentials from the Task Metadata Service, which could be abused by attackers to gain access to AWS credentials.\n\nHowever, be aware of potential false positives, such as legitimate modifications to the task definition that include querying the credential endpoint for valid reasons. The threat level for this activity is considered medium, suggesting that while it's important to monitor for these indicators, they could occasionally represent legitimate usage. \n\nThis monitoring strategy is crucial for indentifying and mitigating unauthorized access or modifications to ECS Task Definitions that could lead to persistence or privilege escalation by adversaries."
    }
  },
  {
    "instruction": "How can I detect: virtual network device is being modified or deleted.\nThis can be a network interface, network virtual appliance, virtual hub, or virtual router.\n",
    "context": "",
    "output": "In order to identify when a virtual network device is being modified or deleted, which can be a network interface, network virtual appliance, virtual hub, or virtual router, you should focus on monitoring activity within Microsoft Azure's Activity Logs. Specifically, observe for operations such as writing or deleting network interfaces, tap configurations on network interfaces, joining actions on network interfaces, and operations on network virtual appliances, virtual hubs, and virtual routers. These actions are critically indicative of modifications or deletions happening to virtual network devices.\n\nWhen these kinds of activities are detected, it's important to consider them with a medium level of suspicion. However, it's also crucial to differentiate between legitimate administrative actions and potentially malicious activities. Regular maintenance or system administration tasks might involve legitimate modifications or deletions of virtual network devices. Therefore, always verify the identity of the user making the changes, the user agent involved, and the hostname to ensure they are expected to interact with your Azure environment in this manner. \n\nActivities related to the specified operations that come from unfamiliar users or arise under unusual circumstances should be investigated further. If you establish that such behavior is benign and a known part of your environment's operations, you can exempt it from further alerts to avoid false positives.\n\nThis kind of monitoring is essential for protecting your Azure environment against unauthorized changes that could compromise network integrity and security. It aligns with recognized cybersecurity practices and tactics for detecting and responding to potential threats targeting cloud-based infrastructure.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "virtual network device is being modified or deleted.\nThis can be a network interface, network virtual appliance, virtual hub, or virtual router.\n",
      "answer": "In order to identify when a virtual network device is being modified or deleted, which can be a network interface, network virtual appliance, virtual hub, or virtual router, you should focus on monitoring activity within Microsoft Azure's Activity Logs. Specifically, observe for operations such as writing or deleting network interfaces, tap configurations on network interfaces, joining actions on network interfaces, and operations on network virtual appliances, virtual hubs, and virtual routers. These actions are critically indicative of modifications or deletions happening to virtual network devices.\n\nWhen these kinds of activities are detected, it's important to consider them with a medium level of suspicion. However, it's also crucial to differentiate between legitimate administrative actions and potentially malicious activities. Regular maintenance or system administration tasks might involve legitimate modifications or deletions of virtual network devices. Therefore, always verify the identity of the user making the changes, the user agent involved, and the hostname to ensure they are expected to interact with your Azure environment in this manner. \n\nActivities related to the specified operations that come from unfamiliar users or arise under unusual circumstances should be investigated further. If you establish that such behavior is benign and a known part of your environment's operations, you can exempt it from further alerts to avoid false positives.\n\nThis kind of monitoring is essential for protecting your Azure environment against unauthorized changes that could compromise network integrity and security. It aligns with recognized cybersecurity practices and tactics for detecting and responding to potential threats targeting cloud-based infrastructure."
    }
  },
  {
    "instruction": "How can I detect: temporary access pass (TAP) is added to an account. TAPs added to priv accounts should be investigated",
    "context": "",
    "output": "In order to detect when a temporary access pass (TAP) is added to an account, with an emphasis on investigating TAPs added to privileged accounts, you should: Focus on monitoring audit logs within the Azure environment. Specifically, you need to look for log entries indicating that the message \"Admin registered security info\" has occurred along with the status \"Admin registered temporary access pass method for user\". This activity could signal the addition of a TAP to an account, which is crucial for security monitoring, especially if the changes are applied to accounts with elevated privileges. Be aware that legitimate actions undertaken by administrators, such as adding a temporary access pass intentionally, might trigger this alert. The importance of this detection is rated high due to the potential security implications associated with unauthorized or malicious TAPs.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "temporary access pass (TAP) is added to an account. TAPs added to priv accounts should be investigated",
      "answer": "In order to detect when a temporary access pass (TAP) is added to an account, with an emphasis on investigating TAPs added to privileged accounts, you should: Focus on monitoring audit logs within the Azure environment. Specifically, you need to look for log entries indicating that the message \"Admin registered security info\" has occurred along with the status \"Admin registered temporary access pass method for user\". This activity could signal the addition of a TAP to an account, which is crucial for security monitoring, especially if the changes are applied to accounts with elevated privileges. Be aware that legitimate actions undertaken by administrators, such as adding a temporary access pass intentionally, might trigger this alert. The importance of this detection is rated high due to the potential security implications associated with unauthorized or malicious TAPs."
    }
  },
  {
    "instruction": "Explain how should I detect the following: service binary running in a suspicious directory",
    "context": "",
    "output": "In order to detect a service binary running in a suspicious directory, you should: Monitor the process creation events on Windows systems, specifically looking for any processes that are initiated from directories that are uncommon for regular service binaries to execute from. This includes directories like \"\\Users\\Public\\\", \"\\$Recycle.bin\", \"\\Users\\All Users\\\", \"\\Users\\Default\\\", \"\\Users\\Contacts\\\", \"\\Users\\Searches\\\", \"C:\\Perflogs\\\", \"\\config\\systemprofile\\\", \"\\Windows\\Fonts\\\", \"\\Windows\\IME\\\", and \"\\Windows\\addins\\\". Furthermore, pay close attention when these processes are spawned by service management processes typically found in legitimate scenarios, namely \"services.exe\" and \"svchost.exe\". Any such occurrence should be treated with a high level of suspicion as it may indicate a malicious activity where an attacker is trying to execute or masquerade malware as a legitimate service in unusual directories, often to evade detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "service binary running in a suspicious directory",
      "answer": "In order to detect a service binary running in a suspicious directory, you should: Monitor the process creation events on Windows systems, specifically looking for any processes that are initiated from directories that are uncommon for regular service binaries to execute from. This includes directories like \"\\Users\\Public\\\", \"\\$Recycle.bin\", \"\\Users\\All Users\\\", \"\\Users\\Default\\\", \"\\Users\\Contacts\\\", \"\\Users\\Searches\\\", \"C:\\Perflogs\\\", \"\\config\\systemprofile\\\", \"\\Windows\\Fonts\\\", \"\\Windows\\IME\\\", and \"\\Windows\\addins\\\". Furthermore, pay close attention when these processes are spawned by service management processes typically found in legitimate scenarios, namely \"services.exe\" and \"svchost.exe\". Any such occurrence should be treated with a high level of suspicion as it may indicate a malicious activity where an attacker is trying to execute or masquerade malware as a legitimate service in unusual directories, often to evade detection."
    }
  },
  {
    "instruction": "Explain how should I detect the following: It is extremely abnormal for svchost.exe to spawn without any CLI arguments and is normally observed when a malicious process spawns the process and injects code into the process memory space.",
    "context": "",
    "output": "In order to identify abnormal activity where svchost.exe is spawned without any command-line arguments, suggesting a possible malicious process initiation and code injection into the process memory space, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the command line ends with 'svchost.exe' or the image path ends with '\\svchost.exe', indicating the process in question. It is critical to exclude any events where the parent image path ends with '\\rpcnet.exe' or '\\rpcnetp.exe', as these are associated with Lojack-style software, which represents a known false positive scenario. Additionally, discard events that do not provide any command-line value, as the absence of command-line arguments in conjunction with svchost.exe\u2019s initiation is the primary indicator of suspicious activity. This process targets the identification of techniques used for Persistence, Privilege Escalation, and Defense Evasion by focusing on how adversaries may execute code on a compromised system by injecting into svchost.exe processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "It is extremely abnormal for svchost.exe to spawn without any CLI arguments and is normally observed when a malicious process spawns the process and injects code into the process memory space.",
      "answer": "In order to identify abnormal activity where svchost.exe is spawned without any command-line arguments, suggesting a possible malicious process initiation and code injection into the process memory space, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the command line ends with 'svchost.exe' or the image path ends with '\\svchost.exe', indicating the process in question. It is critical to exclude any events where the parent image path ends with '\\rpcnet.exe' or '\\rpcnetp.exe', as these are associated with Lojack-style software, which represents a known false positive scenario. Additionally, discard events that do not provide any command-line value, as the absence of command-line arguments in conjunction with svchost.exe\u2019s initiation is the primary indicator of suspicious activity. This process targets the identification of techniques used for Persistence, Privilege Escalation, and Defense Evasion by focusing on how adversaries may execute code on a compromised system by injecting into svchost.exe processes."
    }
  },
  {
    "instruction": "How can I detect: downloads from PwnDrp web servers developed for red team testing and most likely also used for criminal activity",
    "context": "",
    "output": "In order to detect downloads from PwnDrp web servers developed for red team testing and most likely also used for criminal activity, you should: focus on monitoring proxy logs for any traffic containing the specific string '/pwndrop/' in the URI. This indicates a client accessing resources associated with PwnDrp web servers, which are often utilized for cybersecurity testing but may also be employed for malicious purposes. To effectively implement this detection, focus on analyzing the client IP address, the request URI (c-uri), and the client user agent (c-useragent) within the proxy logs. It's important to note, however, that there might be instances where valid detection could yield false positives, although such occurrences are not specifically known. Given the critical nature of detecting potential criminal activity or unauthorized red team testing, the level of attention to such communications should be elevated.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "downloads from PwnDrp web servers developed for red team testing and most likely also used for criminal activity",
      "answer": "In order to detect downloads from PwnDrp web servers developed for red team testing and most likely also used for criminal activity, you should: focus on monitoring proxy logs for any traffic containing the specific string '/pwndrop/' in the URI. This indicates a client accessing resources associated with PwnDrp web servers, which are often utilized for cybersecurity testing but may also be employed for malicious purposes. To effectively implement this detection, focus on analyzing the client IP address, the request URI (c-uri), and the client user agent (c-useragent) within the proxy logs. It's important to note, however, that there might be instances where valid detection could yield false positives, although such occurrences are not specifically known. Given the critical nature of detecting potential criminal activity or unauthorized red team testing, the level of attention to such communications should be elevated."
    }
  },
  {
    "instruction": "How to detect: execution of \"openssl\" to connect to an IP address. This techniques was used by UNC4841 to exfiltrate SSL certificates and as a C2 channel with named pipes. Investigate commands executed in the temporal vicinity of this command.",
    "context": "",
    "output": "In order to detect the execution of \"openssl\" to connect to an IP address, a technique used by UNC4841 to exfiltrate SSL certificates and as a Command and Control (C2) channel with named pipes, you should: Monitor for the creation of processes on Linux systems where the process image name ends with '/openssl'. Specifically, look for command lines that include an IP address pattern (defined by groups of 1 to 3 digits separated by periods). Additionally, the command line must contain certain elements all together: 's_client', '-quiet', and '-connect', indicating a silent SSL client connection attempt. Moreover, check if the command line includes connections to common web service ports ':443' or ':8080'. Investigating commands executed close in time to these events is critical, due to the high level of concern associated with this behavior, and the possibility of false positives is acknowledged without specific known scenarios.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"openssl\" to connect to an IP address. This techniques was used by UNC4841 to exfiltrate SSL certificates and as a C2 channel with named pipes. Investigate commands executed in the temporal vicinity of this command.",
      "answer": "In order to detect the execution of \"openssl\" to connect to an IP address, a technique used by UNC4841 to exfiltrate SSL certificates and as a Command and Control (C2) channel with named pipes, you should: Monitor for the creation of processes on Linux systems where the process image name ends with '/openssl'. Specifically, look for command lines that include an IP address pattern (defined by groups of 1 to 3 digits separated by periods). Additionally, the command line must contain certain elements all together: 's_client', '-quiet', and '-connect', indicating a silent SSL client connection attempt. Moreover, check if the command line includes connections to common web service ports ':443' or ':8080'. Investigating commands executed close in time to these events is critical, due to the high level of concern associated with this behavior, and the possibility of false positives is acknowledged without specific known scenarios."
    }
  },
  {
    "instruction": "Can you explain how to detect: pattern of UAC Bypass using registry key manipulation of sdclt.exe (e.g. UACMe 53)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the pattern of UAC Bypass using registry key manipulation of sdclt.exe (e.g. UACMe 53), you should look for specific behaviors and modifications within the Windows Registry, particularly focusing on events logged under registry settings. Specifically, monitor changes where the event type is a value setting (`SetValue`) in the Windows Registry that pertains to specific locations known to be involved in UAC Bypass techniques.\n\nTwo critical areas to observe include modifications to the registry key values that end with `Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand` and `Software\\Classes\\Folder\\shell\\open\\command\\SymbolicLinkValue`. For the latter, it's crucial to look for details matching the pattern `-1[0-9]{3}\\Software\\Classes\\`, indicating a specially crafted manipulation that aligns with known UAC Bypass methods.\n\nWhen such activity is detected, it is regarded with a high level of suspicion, as these actions are rarely performed under normal operating circumstances. Typically, any genuine use cases altering these specific registry paths are unknown, thus any hits on these detection criteria should be treated as potential UAC Bypass attempts and warrant further investigation.\n\nIt is important to have mechanisms in place that can log and alert on these specific registry modifications as part of a comprehensive strategy to identify and mitigate elevation of privilege attempts through UAC Bypass.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using registry key manipulation of sdclt.exe (e.g. UACMe 53)",
      "answer": "In order to detect the pattern of UAC Bypass using registry key manipulation of sdclt.exe (e.g. UACMe 53), you should look for specific behaviors and modifications within the Windows Registry, particularly focusing on events logged under registry settings. Specifically, monitor changes where the event type is a value setting (`SetValue`) in the Windows Registry that pertains to specific locations known to be involved in UAC Bypass techniques.\n\nTwo critical areas to observe include modifications to the registry key values that end with `Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand` and `Software\\Classes\\Folder\\shell\\open\\command\\SymbolicLinkValue`. For the latter, it's crucial to look for details matching the pattern `-1[0-9]{3}\\Software\\Classes\\`, indicating a specially crafted manipulation that aligns with known UAC Bypass methods.\n\nWhen such activity is detected, it is regarded with a high level of suspicion, as these actions are rarely performed under normal operating circumstances. Typically, any genuine use cases altering these specific registry paths are unknown, thus any hits on these detection criteria should be treated as potential UAC Bypass attempts and warrant further investigation.\n\nIt is important to have mechanisms in place that can log and alert on these specific registry modifications as part of a comprehensive strategy to identify and mitigate elevation of privilege attempts through UAC Bypass."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries can interact with the DACLs using built-in Windows commands takeown which can grant adversaries higher permissions on specific files and folders",
    "context": "",
    "output": "In order to detect when adversaries can interact with the DACLs using built-in Windows commands like takeown which can grant them higher permissions on specific files and folders, you should focus on monitoring process creation logs in Windows environments. Specifically, look for instances where the process image name ends with '\\takeown.exe' indicating the execution of the takeown command. In addition, it is important to check the command line arguments for the presence of both '/f ' and '/r', as these flags are typically used to force the command to act on specified files or folders and to apply the action recursively, respectively. These indicators might suggest an attempt to modify Discretionary Access Control Lists (DACLs) to gain unauthorized access or escalate privileges. It's essential to pay attention to logs that capture both the command line and the parent command line fields to understand the context of the execution. However, be aware of potential false positives, which may arise from scripts created by developers and admins or other legitimate administrative activities. This detection has a medium level of confidence due to the possible legitimate use of the takeown command in administrative contexts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries can interact with the DACLs using built-in Windows commands takeown which can grant adversaries higher permissions on specific files and folders",
      "answer": "In order to detect when adversaries can interact with the DACLs using built-in Windows commands like takeown which can grant them higher permissions on specific files and folders, you should focus on monitoring process creation logs in Windows environments. Specifically, look for instances where the process image name ends with '\\takeown.exe' indicating the execution of the takeown command. In addition, it is important to check the command line arguments for the presence of both '/f ' and '/r', as these flags are typically used to force the command to act on specified files or folders and to apply the action recursively, respectively. These indicators might suggest an attempt to modify Discretionary Access Control Lists (DACLs) to gain unauthorized access or escalate privileges. It's essential to pay attention to logs that capture both the command line and the parent command line fields to understand the context of the execution. However, be aware of potential false positives, which may arise from scripts created by developers and admins or other legitimate administrative activities. This detection has a medium level of confidence due to the possible legitimate use of the takeown command in administrative contexts."
    }
  },
  {
    "instruction": "How can I detect: execution of regsvr32 where the DLL is located in a potentially suspicious location.",
    "context": "",
    "output": "In order to detect execution of regsvr32 where the DLL is located in a potentially suspicious location, you should monitor for instances where the regsvr32.exe utility is initiated within a Windows environment. This involves keeping an eye on any process creation logs, particularly looking for events where the image name ends with '\\regsvr32.exe' or the OriginalFileName is explicitly 'REGSVR32.EXE'. Additionally, it's crucial to scrutinize the command line arguments used during the execution of regsvr32.exe, paying special attention to file paths that include potentially suspicious locations such as ':\\ProgramData\\', ':\\Temp\\', ':\\Users\\Public\\', ':\\Windows\\Temp\\', '\\AppData\\Local\\Temp\\', and '\\AppData\\Roaming\\'. The simultaneous occurrence of these indicators suggests a possible misuse of regsvr32, a scenario that warrants further investigation. However, bear in mind that legitimate software installers might also execute regsvr32 with DLLs located in these directories; thus, differentiation based on additional context might be necessary to reduce false positives. This detection strategy is pivotal for identifying suspicious activities that could signify attempts at execution of malicious scripts or malware leveraging common system tools in disguise, aligning with methodologies typically categorized under persistence, defense evasion, or execution tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of regsvr32 where the DLL is located in a potentially suspicious location.",
      "answer": "In order to detect execution of regsvr32 where the DLL is located in a potentially suspicious location, you should monitor for instances where the regsvr32.exe utility is initiated within a Windows environment. This involves keeping an eye on any process creation logs, particularly looking for events where the image name ends with '\\regsvr32.exe' or the OriginalFileName is explicitly 'REGSVR32.EXE'. Additionally, it's crucial to scrutinize the command line arguments used during the execution of regsvr32.exe, paying special attention to file paths that include potentially suspicious locations such as ':\\ProgramData\\', ':\\Temp\\', ':\\Users\\Public\\', ':\\Windows\\Temp\\', '\\AppData\\Local\\Temp\\', and '\\AppData\\Roaming\\'. The simultaneous occurrence of these indicators suggests a possible misuse of regsvr32, a scenario that warrants further investigation. However, bear in mind that legitimate software installers might also execute regsvr32 with DLLs located in these directories; thus, differentiation based on additional context might be necessary to reduce false positives. This detection strategy is pivotal for identifying suspicious activities that could signify attempts at execution of malicious scripts or malware leveraging common system tools in disguise, aligning with methodologies typically categorized under persistence, defense evasion, or execution tactics."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious process injection using ZOHO's dctask64.exe",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious process injection using ZOHO's dctask64.exe, you should: Focus on monitoring process creation events within Windows environments. Specifically, watch for the initiation of processes where the image name ends with '\\dctask64.exe'. However, it's important to differentiate between legitimate and potentially malicious activity. To do this, exclude any process creation events where the command line includes 'DesktopCentral_Agent\\agent', as this would typically indicate normal operation of ZOHO Desktop Central. The key fields to scrutinize in these events are CommandLine, ParentCommandLine, and ParentImage. Be mindful that there are some instances where false positives may occur, although they are currently unspecified. This activity is considered high risk, indicating that such detections should be prioritized for investigation due to their potential link with unauthorized process injection attempts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious process injection using ZOHO's dctask64.exe",
      "answer": "In order to detect suspicious process injection using ZOHO's dctask64.exe, you should: Focus on monitoring process creation events within Windows environments. Specifically, watch for the initiation of processes where the image name ends with '\\dctask64.exe'. However, it's important to differentiate between legitimate and potentially malicious activity. To do this, exclude any process creation events where the command line includes 'DesktopCentral_Agent\\agent', as this would typically indicate normal operation of ZOHO Desktop Central. The key fields to scrutinize in these events are CommandLine, ParentCommandLine, and ParentImage. Be mindful that there are some instances where false positives may occur, although they are currently unspecified. This activity is considered high risk, indicating that such detections should be prioritized for investigation due to their potential link with unauthorized process injection attempts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: MODx manager - Local File Inclusion:Directory traversal vulnerability in manager/controllers/default/resource/tvs.php in MODx Revolution 2.0.2-pl, and possibly earlier,\nwhen magic_quotes_gpc is disabled, allows remote attackers to read arbitrary files via a .. (dot dot) in the class_key parameter.\n",
    "context": "",
    "output": "In order to detect a directory traversal vulnerability exploit attempt on a MODx Revolution webserver, specifically targeting the ability of attackers to read arbitrary files by manipulating the 'class_key' parameter in 'manager/controllers/default/resource/tvs.php', you should: look for webserver log entries where the Uniform Resource Identifier (URI) query contains the suspicious sequence '/manager/controllers/default/resource/tvs.php?class_key=../../../../../../../../../../windows/win.ini%00'. This pattern suggests an attempt to exploit a path traversal flaw to access the 'win.ini' file on a Windows server, indicative of an attacker trying to read sensitive files outside the intended directory. Be aware that legitimate scanning activities from tools like Nuclei and other unclassified actions can generate similar log entries, which are considered false positives. This detection is classified as critical due to the potential impact of allowing attackers to read arbitrary files on the server.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "MODx manager - Local File Inclusion:Directory traversal vulnerability in manager/controllers/default/resource/tvs.php in MODx Revolution 2.0.2-pl, and possibly earlier,\nwhen magic_quotes_gpc is disabled, allows remote attackers to read arbitrary files via a .. (dot dot) in the class_key parameter.\n",
      "answer": "In order to detect a directory traversal vulnerability exploit attempt on a MODx Revolution webserver, specifically targeting the ability of attackers to read arbitrary files by manipulating the 'class_key' parameter in 'manager/controllers/default/resource/tvs.php', you should: look for webserver log entries where the Uniform Resource Identifier (URI) query contains the suspicious sequence '/manager/controllers/default/resource/tvs.php?class_key=../../../../../../../../../../windows/win.ini%00'. This pattern suggests an attempt to exploit a path traversal flaw to access the 'win.ini' file on a Windows server, indicative of an attacker trying to read sensitive files outside the intended directory. Be aware that legitimate scanning activities from tools like Nuclei and other unclassified actions can generate similar log entries, which are considered false positives. This detection is classified as critical due to the potential impact of allowing attackers to read arbitrary files on the server."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential evasion or obfuscation attempts using bogus path traversal via the commandline",
    "context": "",
    "output": "In order to detect potential evasion or obfuscation attempts using bogus path traversal via the commandline, you should: Monitor the creation of processes on Windows systems, specifically observing the command lines used to initiate these processes. Look for command lines that contain segments attempting to traverse directories in a suspicious manner. This involves detecting command lines that include paths trying to navigate upwards in the directory structure (`\\..\\`, `\\..\\..\\`) and then back into critical Windows directories (`\\Windows\\`, `\\System32\\`). Additionally, watch for command lines that append directory traversal patterns (`..\\) directly after executable names (`.exe\\..\\`). However, it's important to exclude command lines related to Google Drive or Citrix, as they might use similar patterns for legitimate purposes. These exclusions help in reducing false positive alerts that might arise from the proper use of Google Drive synchronization and Citrix Virtual Smart Card functionalities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential evasion or obfuscation attempts using bogus path traversal via the commandline",
      "answer": "In order to detect potential evasion or obfuscation attempts using bogus path traversal via the commandline, you should: Monitor the creation of processes on Windows systems, specifically observing the command lines used to initiate these processes. Look for command lines that contain segments attempting to traverse directories in a suspicious manner. This involves detecting command lines that include paths trying to navigate upwards in the directory structure (`\\..\\`, `\\..\\..\\`) and then back into critical Windows directories (`\\Windows\\`, `\\System32\\`). Additionally, watch for command lines that append directory traversal patterns (`..\\) directly after executable names (`.exe\\..\\`). However, it's important to exclude command lines related to Google Drive or Citrix, as they might use similar patterns for legitimate purposes. These exclusions help in reducing false positive alerts that might arise from the proper use of Google Drive synchronization and Citrix Virtual Smart Card functionalities."
    }
  },
  {
    "instruction": "Can you explain how to detect: logon with \"Special groups\" and \"Special Privileges\" can be thought of as Administrator groups or privileges.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect logon with \"Special groups\" and \"Special Privileges\" which can be thought of as Administrator groups or privileges, you should monitor Windows security logs for events that indicate such logon activities. Specifically, focus on two types of event IDs: 4672, which signifies special privileges assigned to a new logon, and 4964, which indicates a special group has been assigned to a new logon session. It's crucial to exclude events where the subject user SID (Security Identifier) is S-1-5-18; this SID represents the local system account which often has legitimate reasons for such activities. By analyzing security logs for these event IDs while filtering out the local system's activities, organizations can identify instances where users are granted administrative access or privileges, which could indicate a security concern if not expected. This approach is vital for detecting potential security breaches or misuse of administrative privileges within a Windows environment. Bear in mind that this detection mechanism currently possesses a low level of confidence, potentially due to the broad and varied nature of legitimate system activities that can trigger these events, leading to unknown false positives. Always consider refining the detection criteria further by filtering events based on known, valid account naming patterns or specific account lists, which can enhance the accuracy and relevance of detected activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "logon with \"Special groups\" and \"Special Privileges\" can be thought of as Administrator groups or privileges.",
      "answer": "In order to detect logon with \"Special groups\" and \"Special Privileges\" which can be thought of as Administrator groups or privileges, you should monitor Windows security logs for events that indicate such logon activities. Specifically, focus on two types of event IDs: 4672, which signifies special privileges assigned to a new logon, and 4964, which indicates a special group has been assigned to a new logon session. It's crucial to exclude events where the subject user SID (Security Identifier) is S-1-5-18; this SID represents the local system account which often has legitimate reasons for such activities. By analyzing security logs for these event IDs while filtering out the local system's activities, organizations can identify instances where users are granted administrative access or privileges, which could indicate a security concern if not expected. This approach is vital for detecting potential security breaches or misuse of administrative privileges within a Windows environment. Bear in mind that this detection mechanism currently possesses a low level of confidence, potentially due to the broad and varied nature of legitimate system activities that can trigger these events, leading to unknown false positives. Always consider refining the detection criteria further by filtering events based on known, valid account naming patterns or specific account lists, which can enhance the accuracy and relevance of detected activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of certutil with the \"encode\" flag to encode a file to base64, which can be abused by threat actors and attackers for data exfiltration, you should: Monitor for process creation events on Windows systems, specifically looking for the execution of 'certutil.exe'. Check the command line for the presence of either '-encode' or '/encode' flags. Such activity may indicate an attempt to misuse CertUtil for encoding files to Base64, a technique that could potentially be used in data exfiltration scenarios. It's important to note that while this behavior might suggest malicious intent, CertUtil is a legitimate tool that can also be used for benign purposes. Therefore, some legitimate actions might be flagged as false positives, and additional context or filters should be applied to refine detection accuracy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration",
      "answer": "In order to detect the execution of certutil with the \"encode\" flag to encode a file to base64, which can be abused by threat actors and attackers for data exfiltration, you should: Monitor for process creation events on Windows systems, specifically looking for the execution of 'certutil.exe'. Check the command line for the presence of either '-encode' or '/encode' flags. Such activity may indicate an attempt to misuse CertUtil for encoding files to Base64, a technique that could potentially be used in data exfiltration scenarios. It's important to note that while this behavior might suggest malicious intent, CertUtil is a legitimate tool that can also be used for benign purposes. Therefore, some legitimate actions might be flagged as false positives, and additional context or filters should be applied to refine detection accuracy."
    }
  },
  {
    "instruction": "Can you explain how to detect: juniper BGP missing MD5 digest. Which may be indicative of brute force attacks to manipulate routing.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect juniper BGP missing MD5 digest, which may be indicative of brute force attacks to manipulate routing, you should: analyze juniper logs specifically targeting BGP (Border Gateway Protocol) service. It is crucial to have juniper BGP logs enabled and properly ingested into your security monitoring system. The identification process involves looking for logs that contain mentions of protocol `:179`, which refers to BGP, alongside indicators such as the phrase \"missing MD5 digest\". The MD5 digest is vital for the integrity and verification of BGP session negotiation, and its absence might suggest an attempt to manipulate or intercept routing information, potentially as part of a brute force attack strategy.\n\nIn this monitoring focus, the primary fields of interest include the `host` from which the log was generated. However, it is also important to note that while this analysis is critical for the identification of possible routing manipulation attempts, the likelihood of false positives is considered low, barring instances that may arise from misconfigurations.\n\nThis detection aligns with known tactics and techniques utilized in attacks targeting network protocols, specifically focusing on the manipulation of routing information to redirect or intercept network traffic. Implementing efficient logging and monitoring for such activities is key in identifying and mitigating potential attacks that compromise network integrity and reliability.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "juniper BGP missing MD5 digest. Which may be indicative of brute force attacks to manipulate routing.",
      "answer": "In order to detect juniper BGP missing MD5 digest, which may be indicative of brute force attacks to manipulate routing, you should: analyze juniper logs specifically targeting BGP (Border Gateway Protocol) service. It is crucial to have juniper BGP logs enabled and properly ingested into your security monitoring system. The identification process involves looking for logs that contain mentions of protocol `:179`, which refers to BGP, alongside indicators such as the phrase \"missing MD5 digest\". The MD5 digest is vital for the integrity and verification of BGP session negotiation, and its absence might suggest an attempt to manipulate or intercept routing information, potentially as part of a brute force attack strategy.\n\nIn this monitoring focus, the primary fields of interest include the `host` from which the log was generated. However, it is also important to note that while this analysis is critical for the identification of possible routing manipulation attempts, the likelihood of false positives is considered low, barring instances that may arise from misconfigurations.\n\nThis detection aligns with known tactics and techniques utilized in attacks targeting network protocols, specifically focusing on the manipulation of routing information to redirect or intercept network traffic. Implementing efficient logging and monitoring for such activities is key in identifying and mitigating potential attacks that compromise network integrity and reliability."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of SDelete to erase a file not the free space",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of SDelete to erase a file not the free space, you should monitor the process creation logs on Windows systems for instances where the original file name is identified as `sdelete.exe`. However, it's important to exclude any command line instances that contain the parameters '-h', '-c', '-z', or '/\\?', as these are indicative of operations that do not target file erasure but rather pertain to free space cleansing or help commands. Focus on gathering information such as the computer name, user, full command line input, and parent command line input to thoroughly analyze potentially malicious activity. This approach is crucial for identifying the misuse of SDelete in a manner that aims to permanently delete files, bypassing recycle bin or standard delete functions, which could be indicative of an attempt to conceal illicit activities or remove evidence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of SDelete to erase a file not the free space",
      "answer": "In order to detect the use of SDelete to erase a file not the free space, you should monitor the process creation logs on Windows systems for instances where the original file name is identified as `sdelete.exe`. However, it's important to exclude any command line instances that contain the parameters '-h', '-c', '-z', or '/\\?', as these are indicative of operations that do not target file erasure but rather pertain to free space cleansing or help commands. Focus on gathering information such as the computer name, user, full command line input, and parent command line input to thoroughly analyze potentially malicious activity. This approach is crucial for identifying the misuse of SDelete in a manner that aims to permanently delete files, bypassing recycle bin or standard delete functions, which could be indicative of an attempt to conceal illicit activities or remove evidence."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect usage of the \"driverquery\" utility. Which can be used to perform reconnaissance on installed drivers",
    "context": "",
    "output": "Sure!\nIn order to detect usage of the \"driverquery\" utility, which can be used to perform reconnaissance on installed drivers, you should: Focus on monitoring process creation events within Windows operating systems. Look specifically for occurrences where the process image name ends with 'driverquery.exe' or the original file name is recognized as 'drvqry.exe'. Be aware that there can be legitimate uses of this utility by third-party tools for investigating installed drivers; thus, this may result in false positives. The importance of this detection is considered medium, but it might be adjusted to low if the utility is frequently used within your environment for non-malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect usage of the \"driverquery\" utility. Which can be used to perform reconnaissance on installed drivers",
      "answer": "In order to detect usage of the \"driverquery\" utility, which can be used to perform reconnaissance on installed drivers, you should: Focus on monitoring process creation events within Windows operating systems. Look specifically for occurrences where the process image name ends with 'driverquery.exe' or the original file name is recognized as 'drvqry.exe'. Be aware that there can be legitimate uses of this utility by third-party tools for investigating installed drivers; thus, this may result in false positives. The importance of this detection is considered medium, but it might be adjusted to low if the utility is frequently used within your environment for non-malicious purposes."
    }
  },
  {
    "instruction": "How can I detect: usage of the Get-ADUser cmdlet to collect user information and output it to a file",
    "context": "",
    "output": "In order to detect usage of the Get-ADUser cmdlet to collect user information and output it to a file, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, attention should be paid to processes initiated by PowerShell (`powershell.exe`) or PowerShell Core (`pwsh.exe`). This involves looking for the explicit mentions of these executables in the process creation logs, as well as the original file names `PowerShell.EXE` for PowerShell and `pwsh.dll` for PowerShell Core. Additionally, scrutinize the command line arguments for instances of the `Get-ADUser` cmdlet combined with the `-Filter *` argument, which indicates an attempt to collect user information. The presence of redirection (`>`) or piping (`| Select`, `Out-File`, `Set-Content`, `Add-Content`) in conjunction with these cmdlets is a strong indicator of attempts to output collected user information to a file. Given the potential for legitimate administrative scripts to perform similar actions, it is advisable to consider context such as known administrative behaviors or to exclude known entities from alerts to reduce false positives. This observance is tagged with tactics and techniques such as Credential Access, Discovery, and Collection, corresponding to actions aimed at gathering and extracting information within a compromised system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the Get-ADUser cmdlet to collect user information and output it to a file",
      "answer": "In order to detect usage of the Get-ADUser cmdlet to collect user information and output it to a file, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, attention should be paid to processes initiated by PowerShell (`powershell.exe`) or PowerShell Core (`pwsh.exe`). This involves looking for the explicit mentions of these executables in the process creation logs, as well as the original file names `PowerShell.EXE` for PowerShell and `pwsh.dll` for PowerShell Core. Additionally, scrutinize the command line arguments for instances of the `Get-ADUser` cmdlet combined with the `-Filter *` argument, which indicates an attempt to collect user information. The presence of redirection (`>`) or piping (`| Select`, `Out-File`, `Set-Content`, `Add-Content`) in conjunction with these cmdlets is a strong indicator of attempts to output collected user information to a file. Given the potential for legitimate administrative scripts to perform similar actions, it is advisable to consider context such as known administrative behaviors or to exclude known entities from alerts to reduce false positives. This observance is tagged with tactics and techniques such as Credential Access, Discovery, and Collection, corresponding to actions aimed at gathering and extracting information within a compromised system."
    }
  },
  {
    "instruction": "How to detect: new process creation using WMIC via the \"process call create\" flag",
    "context": "",
    "output": "In order to detect new process creation using WMIC via the \"process call create\" flag, you should: focus on process creation events within Windows environments. Specifically, the detection mechanism centers on identifying instances where the WMIC (Windows Management Instrumentation Command-line) utility, recognizable either through the image file ending with '\\wmic.exe' or having an original file name of 'wmic.exe', is employed to initiate a new process. This activity is typically signified by the command line arguments containing the keywords 'process', 'call', and 'create' concurrently. Such detection criteria aim to flag potentially malicious behavior where WMIC is misused to launch new processes, a tactic often leveraged by attackers to execute code or scripts. It is important to note that while this detection method is of medium sensitivity, it might also encounter scenarios where its findings are not indicative of malicious activity, thus necessitating further investigation to ascertain the context of the detected events.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "new process creation using WMIC via the \"process call create\" flag",
      "answer": "In order to detect new process creation using WMIC via the \"process call create\" flag, you should: focus on process creation events within Windows environments. Specifically, the detection mechanism centers on identifying instances where the WMIC (Windows Management Instrumentation Command-line) utility, recognizable either through the image file ending with '\\wmic.exe' or having an original file name of 'wmic.exe', is employed to initiate a new process. This activity is typically signified by the command line arguments containing the keywords 'process', 'call', and 'create' concurrently. Such detection criteria aim to flag potentially malicious behavior where WMIC is misused to launch new processes, a tactic often leveraged by attackers to execute code or scripts. It is important to note that while this detection method is of medium sensitivity, it might also encounter scenarios where its findings are not indicative of malicious activity, thus necessitating further investigation to ascertain the context of the detected events."
    }
  },
  {
    "instruction": "Can you explain how to detect: pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22), you should: monitor file events within Windows systems, specifically looking for any instances where files begin with 'C:\\Windows\\System32\\consent.exe.@' and end with '\\comctl32.dll'. These specific patterns of file names are indicative of an attempt to circumvent User Account Control (UAC), leveraging a known technique associated with UACMe 22. It's crucial to keep an eye on these events, although be aware that detections might occasionally flag unknown false positives. Given the potential severity of a successful bypass, these alerts are classified at a high level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)",
      "answer": "In order to detect the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22), you should: monitor file events within Windows systems, specifically looking for any instances where files begin with 'C:\\Windows\\System32\\consent.exe.@' and end with '\\comctl32.dll'. These specific patterns of file names are indicative of an attempt to circumvent User Account Control (UAC), leveraging a known technique associated with UACMe 22. It's crucial to keep an eye on these events, although be aware that detections might occasionally flag unknown false positives. Given the potential severity of a successful bypass, these alerts are classified at a high level."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Windows Update get some error Check if need a 0-days KB",
    "context": "",
    "output": "In order to check if Windows Update errors indicate a need for a zero-day KB (Knowledge Base update), you should monitor the Windows System log, specifically the Microsoft-Windows-WindowsUpdateClient/Operational log. Look for events generated by the provider named 'Microsoft-Windows-WindowsUpdateClient' with specific Event IDs that indicate various types of update failures:\n\n- Event ID 16, which indicates that Windows was unable to connect to the automatic updates service, preventing the system from downloading and installing updates according to its schedule.\n- Event ID 20, denoting installation failure, where Windows couldn't install an update due to an error.\n- Event ID 24, which signifies an uninstallation failure, meaning Windows failed to uninstall an update with an error.\n- Event ID 213, pointing to a revert failure where Windows struggled to revert an update due to an error.\n- Event ID 217, indicating a commit failure, as Windows was unable to commit an update with an error.\n\nThese specific event IDs are crucial for identifying issues with the Windows Update process, which could hint at underlying vulnerabilities or the need for a zero-day patch to address newly discovered security risks. It's important to note that there may be false positives, as not every failure is indicative of a critical issue needing a zero-day solution. The detection level is considered low, suggesting that while these events are worth noting, they should be contextualized within a broader investigation to ascertain their significance correctly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Windows Update get some error Check if need a 0-days KB",
      "answer": "In order to check if Windows Update errors indicate a need for a zero-day KB (Knowledge Base update), you should monitor the Windows System log, specifically the Microsoft-Windows-WindowsUpdateClient/Operational log. Look for events generated by the provider named 'Microsoft-Windows-WindowsUpdateClient' with specific Event IDs that indicate various types of update failures:\n\n- Event ID 16, which indicates that Windows was unable to connect to the automatic updates service, preventing the system from downloading and installing updates according to its schedule.\n- Event ID 20, denoting installation failure, where Windows couldn't install an update due to an error.\n- Event ID 24, which signifies an uninstallation failure, meaning Windows failed to uninstall an update with an error.\n- Event ID 213, pointing to a revert failure where Windows struggled to revert an update due to an error.\n- Event ID 217, indicating a commit failure, as Windows was unable to commit an update with an error.\n\nThese specific event IDs are crucial for identifying issues with the Windows Update process, which could hint at underlying vulnerabilities or the need for a zero-day patch to address newly discovered security risks. It's important to note that there may be false positives, as not every failure is indicative of a critical issue needing a zero-day solution. The detection level is considered low, suggesting that while these events are worth noting, they should be contextualized within a broader investigation to ascertain their significance correctly."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Extremely high rate of NULL record type DNS requests from host per short period of time. Possible result of iodine tool execution",
    "context": "",
    "output": "In order to detect an extremely high rate of NULL record type DNS requests from a host per short period of time, which could potentially indicate the execution of the iodine tool, you should: Monitor DNS logs for any instance where a source IP address generates more than 50 DNS queries for NULL record types within a one minute timeframe. Such behavior can indicate a security concern, specifically tactics and techniques that involve data exfiltration or tunneling methods. However, be aware that there may be legitimate reasons for a high rate of NULL DNS requests, so it's advisable to maintain a whitelist of domains known to generate high volumes of these requests under normal circumstances. This detection has a medium level of reliability and should prompt further investigation into the source IP for potential malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Extremely high rate of NULL record type DNS requests from host per short period of time. Possible result of iodine tool execution",
      "answer": "In order to detect an extremely high rate of NULL record type DNS requests from a host per short period of time, which could potentially indicate the execution of the iodine tool, you should: Monitor DNS logs for any instance where a source IP address generates more than 50 DNS queries for NULL record types within a one minute timeframe. Such behavior can indicate a security concern, specifically tactics and techniques that involve data exfiltration or tunneling methods. However, be aware that there may be legitimate reasons for a high rate of NULL DNS requests, so it's advisable to maintain a whitelist of domains known to generate high volumes of these requests under normal circumstances. This detection has a medium level of reliability and should prompt further investigation into the source IP for potential malicious activity."
    }
  },
  {
    "instruction": "Can you explain how to detect: relevant ClamAV messages",
    "context": "",
    "output": "Certainly!\n\nIn order to detect relevant ClamAV messages, you should monitor ClamAV logs specifically on Linux systems for the presence of certain keywords that indicate a high level of suspicious activity or malware detection. Look out for log entries that contain any of the following keywords: 'Trojan*FOUND', 'VirTool*FOUND', 'Webshell*FOUND', 'Rootkit*FOUND', or 'Htran*FOUND'. These keywords suggest that ClamAV has identified potential threats, ranging from Trojans, virulent tools, webshells, rootkits, to Htran activities which are indicative of various types of malware or hacking tools that could compromise system integrity and security. Since these detections are associated with high-severity incidents, it's crucial to promptly investigate any matches to these patterns found within the ClamAV logs. Be aware that while this detection approach is highly effective, there's a possibility of unknown false positives, implying that not every detection may represent a genuine threat. However, given the level of concern associated with the detected items, each alert should be treated with a high degree of scrutiny.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "relevant ClamAV messages",
      "answer": "In order to detect relevant ClamAV messages, you should monitor ClamAV logs specifically on Linux systems for the presence of certain keywords that indicate a high level of suspicious activity or malware detection. Look out for log entries that contain any of the following keywords: 'Trojan*FOUND', 'VirTool*FOUND', 'Webshell*FOUND', 'Rootkit*FOUND', or 'Htran*FOUND'. These keywords suggest that ClamAV has identified potential threats, ranging from Trojans, virulent tools, webshells, rootkits, to Htran activities which are indicative of various types of malware or hacking tools that could compromise system integrity and security. Since these detections are associated with high-severity incidents, it's crucial to promptly investigate any matches to these patterns found within the ClamAV logs. Be aware that while this detection approach is highly effective, there's a possibility of unknown false positives, implying that not every detection may represent a genuine threat. However, given the level of concern associated with the detected items, each alert should be treated with a high degree of scrutiny."
    }
  },
  {
    "instruction": "Explain how should I detect the following: signs of the exploitation of LPE CVE-2021-41379 that include an msiexec process that creates an elevation_service.exe file",
    "context": "",
    "output": "In order to detect signs of the exploitation of LPE CVE-2021-41379 that include an msiexec process that creates an elevation_service.exe file, you should: Monitor file events on Windows systems for instances where the MSI installer process (`msiexec.exe`) is observed creating or modifying a file named `elevation_service.exe` within the Microsoft Edge application directory located at `C:\\Program Files (x86)\\Microsoft\\Edge\\Application`. Such activity could indicate an attempt to exploit the Local Privilege Escalation vulnerability CVE-2021-41379. It is critical to pay attention to these events, although be mindful that some legitimate Microsoft Edge upgrades might trigger similar observations. For investigative purposes, pertinent information such as the computer name and the target filename should be recorded.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "signs of the exploitation of LPE CVE-2021-41379 that include an msiexec process that creates an elevation_service.exe file",
      "answer": "In order to detect signs of the exploitation of LPE CVE-2021-41379 that include an msiexec process that creates an elevation_service.exe file, you should: Monitor file events on Windows systems for instances where the MSI installer process (`msiexec.exe`) is observed creating or modifying a file named `elevation_service.exe` within the Microsoft Edge application directory located at `C:\\Program Files (x86)\\Microsoft\\Edge\\Application`. Such activity could indicate an attempt to exploit the Local Privilege Escalation vulnerability CVE-2021-41379. It is critical to pay attention to these events, although be mindful that some legitimate Microsoft Edge upgrades might trigger similar observations. For investigative purposes, pertinent information such as the computer name and the target filename should be recorded."
    }
  },
  {
    "instruction": "Please help me detect the following: Firewall Rule Configuration is Modified or Deleted.",
    "context": "",
    "output": "Sure!\nIn order to identify when a Firewall Rule Configuration is Modified or Deleted, you should monitor Azure Activity Logs for any operations related to the modification or deletion of firewall policy rules and rule groups. Specifically, pay attention to activity involving the operation names MICROSOFT.NETWORK/FIREWALLPOLICIES/RULECOLLECTIONGROUPS/WRITE, MICROSOFT.NETWORK/FIREWALLPOLICIES/RULECOLLECTIONGROUPS/DELETE, MICROSOFT.NETWORK/FIREWALLPOLICIES/RULEGROUPS/WRITE, and MICROSOFT.NETWORK/FIREWALLPOLICIES/RULEGROUPS/DELETE. These operations indicate that a firewall policy\u2019s rule collection groups or rule groups are being written to (modified) or deleted, which could potentially weaken your network's defenses.\n\nBe aware that some modifications or deletions of firewall rules are legitimate, often performed by a system administrator as part of routine management or in response to evolving network requirements. It's important to verify the identity of the user making changes, the user agent, and the hostname involved in the operation to determine whether such activities are expected or authorized in your environment. Unfamiliar users modifying or deleting firewall configurations should trigger an investigation to ensure these actions aren't indicative of malicious activity or unauthorized access. If repeated false positives are identified - legitimate activities consistently flagged as suspicious - they should be documented and possibly exempted from future alerts to fine-tune the detection process. This approach maintains a focus on actual threats, thereby reducing the noise from benign activities and enabling a more effective cybersecurity posture.\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Firewall Rule Configuration is Modified or Deleted.",
      "answer": "In order to identify when a Firewall Rule Configuration is Modified or Deleted, you should monitor Azure Activity Logs for any operations related to the modification or deletion of firewall policy rules and rule groups. Specifically, pay attention to activity involving the operation names MICROSOFT.NETWORK/FIREWALLPOLICIES/RULECOLLECTIONGROUPS/WRITE, MICROSOFT.NETWORK/FIREWALLPOLICIES/RULECOLLECTIONGROUPS/DELETE, MICROSOFT.NETWORK/FIREWALLPOLICIES/RULEGROUPS/WRITE, and MICROSOFT.NETWORK/FIREWALLPOLICIES/RULEGROUPS/DELETE. These operations indicate that a firewall policy\u2019s rule collection groups or rule groups are being written to (modified) or deleted, which could potentially weaken your network's defenses.\n\nBe aware that some modifications or deletions of firewall rules are legitimate, often performed by a system administrator as part of routine management or in response to evolving network requirements. It's important to verify the identity of the user making changes, the user agent, and the hostname involved in the operation to determine whether such activities are expected or authorized in your environment. Unfamiliar users modifying or deleting firewall configurations should trigger an investigation to ensure these actions aren't indicative of malicious activity or unauthorized access. If repeated false positives are identified - legitimate activities consistently flagged as suspicious - they should be documented and possibly exempted from future alerts to fine-tune the detection process. This approach maintains a focus on actual threats, thereby reducing the noise from benign activities and enabling a more effective cybersecurity posture.\n"
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of whoami that has been renamed to a different name to avoid detection",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of whoami that has been renamed to a different name to avoid detection, you should: Focus on monitoring the creation of processes within Windows operating systems. Specifically, look for occurrences where the original filename is identified as 'whoami.exe', but ensure to exclude any instances where the actual image path ends with '\\whoami.exe'. This approach targets scenarios where attackers might rename the 'whoami.exe' utility to evade basic detection mechanisms. The criticality of this detection is deemed high due to its potential use in reconnaissance stages of an attack, where adversaries gather information about user privileges and system configurations without triggering alerts for commonly monitored executables.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of whoami that has been renamed to a different name to avoid detection",
      "answer": "In order to detect the execution of whoami that has been renamed to a different name to avoid detection, you should: Focus on monitoring the creation of processes within Windows operating systems. Specifically, look for occurrences where the original filename is identified as 'whoami.exe', but ensure to exclude any instances where the actual image path ends with '\\whoami.exe'. This approach targets scenarios where attackers might rename the 'whoami.exe' utility to evade basic detection mechanisms. The criticality of this detection is deemed high due to its potential use in reconnaissance stages of an attack, where adversaries gather information about user privileges and system configurations without triggering alerts for commonly monitored executables."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation/modification of Assistive Technology applications and persistence with usage of 'at'",
    "context": "",
    "output": "In order to detect creation/modification of Assistive Technology applications and persistence with usage of 'at', you should: Monitor the Windows registry for any creation or modification events specifically under the 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs' and 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration' registry keys. These registry locations are crucial as they are associated with Assistive Technology applications on Windows systems. It is essential to ignore events generated by the legitimate Assistive Technology broker process, which is executed from 'C:\\Windows\\system32\\atbroker.exe' and targets the '\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration' registry key. In addition, ignore events triggered by uninstaller processes that start with 'C:\\Windows\\Installer\\MSI' and target the 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs' registry key since these might be legitimate removals of applications. Be aware that legitimate creation of non-default Assistive Technologies might also trigger false positives. This monitoring is of medium priority level and could indicate attempts at creating or modifying system configurations for persistence, especially using Assistive Technology applications as a method to achieve this. Further investigation is warranted upon detection to differentiate between legitimate and malicious activities. The related tactics and techniques for this activity include Persistence, Privilege Escalation, and Execution as delineated in the MITRE ATT&CK framework.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation/modification of Assistive Technology applications and persistence with usage of 'at'",
      "answer": "In order to detect creation/modification of Assistive Technology applications and persistence with usage of 'at', you should: Monitor the Windows registry for any creation or modification events specifically under the 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs' and 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration' registry keys. These registry locations are crucial as they are associated with Assistive Technology applications on Windows systems. It is essential to ignore events generated by the legitimate Assistive Technology broker process, which is executed from 'C:\\Windows\\system32\\atbroker.exe' and targets the '\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration' registry key. In addition, ignore events triggered by uninstaller processes that start with 'C:\\Windows\\Installer\\MSI' and target the 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs' registry key since these might be legitimate removals of applications. Be aware that legitimate creation of non-default Assistive Technologies might also trigger false positives. This monitoring is of medium priority level and could indicate attempts at creating or modifying system configurations for persistence, especially using Assistive Technology applications as a method to achieve this. Further investigation is warranted upon detection to differentiate between legitimate and malicious activities. The related tactics and techniques for this activity include Persistence, Privilege Escalation, and Execution as delineated in the MITRE ATT&CK framework."
    }
  },
  {
    "instruction": "How to detect: Dnscat exfiltration tool execution",
    "context": "",
    "output": "In order to detect the execution of Dnscat exfiltration tool, you should: focus on monitoring Windows PowerShell script activity, specifically looking for the execution of scripts that contain the command 'Start-Dnscat2'. This requires that Script Block Logging is enabled to capture detailed information about PowerShell script executions. Given the nature of Dnscat2 as a DNS exfiltration tool, any detection of such activity should be considered critical, although it's important to note that there may be rare instances of legitimate use. The primary focus should be on identifying unauthorized or malicious attempts to use Dnscat2 for data exfiltration.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Dnscat exfiltration tool execution",
      "answer": "In order to detect the execution of Dnscat exfiltration tool, you should: focus on monitoring Windows PowerShell script activity, specifically looking for the execution of scripts that contain the command 'Start-Dnscat2'. This requires that Script Block Logging is enabled to capture detailed information about PowerShell script executions. Given the nature of Dnscat2 as a DNS exfiltration tool, any detection of such activity should be considered critical, although it's important to note that there may be rare instances of legitimate use. The primary focus should be on identifying unauthorized or malicious attempts to use Dnscat2 for data exfiltration."
    }
  },
  {
    "instruction": "Can you explain how to detect: Extexport.exe loads dll and is execute from other folder the original path",
    "context": "",
    "output": "Certainly!\n\nIn order to detect instances where Extexport.exe loads DLL and is executed from a location other than its original path, you should: focus on monitoring process creation logs within Windows environments. Specifically, look for any instances where the command line includes 'Extexport.exe', any process image paths that end with '\\Extexport.exe', or occurrences where 'extexport.exe' is noted as the OriginalFileName. This approach helps in identifying abnormal execution paths or methods of this executable, which might indicate malicious activity related to process manipulation or unauthorized accesses. Be aware that some events captured might not be malicious in nature, hence the identification of these as false positives requires vigilance and further investigation. The attention level for these activities is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Extexport.exe loads dll and is execute from other folder the original path",
      "answer": "In order to detect instances where Extexport.exe loads DLL and is executed from a location other than its original path, you should: focus on monitoring process creation logs within Windows environments. Specifically, look for any instances where the command line includes 'Extexport.exe', any process image paths that end with '\\Extexport.exe', or occurrences where 'extexport.exe' is noted as the OriginalFileName. This approach helps in identifying abnormal execution paths or methods of this executable, which might indicate malicious activity related to process manipulation or unauthorized accesses. Be aware that some events captured might not be malicious in nature, hence the identification of these as false positives requires vigilance and further investigation. The attention level for these activities is considered medium."
    }
  },
  {
    "instruction": "How can I detect: access to SUPERNOVA webshell as described in Guidepoint report",
    "context": "",
    "output": "In order to detect access to SUPERNOVA webshell as described in Guidepoint report, you should focus on monitoring webserver logs for specific patterns in URI queries that indicate an attempt to access or interact with the SUPERNOVA webshell. Look for URI queries containing both 'logoimagehandler.ashx' and 'clazz' together, as this combination is peculiar and indicative of suspicious activities related to the SUPERNOVA webshell. Additionally, keep an eye out for any URI query specifically containing 'logoimagehandler.ashx' that results in a server response status of 500, as this may also signal an attempt to exploit or engage with the webshell.\n\nIt is crucial to carefully monitor and investigate these signs within your webserver logs, keeping an eye on the client making the request and the response returned. Doing so will aid in the early detection of potential security threats associated with the SUPERNOVA webshell, thereby allowing for swift response and mitigation efforts.\n\nBe aware that while these detections are set at a critical level due to their potential impact, there might be instances where legitimate activities could inadvertently mirror these patterns, though such cases are unknown. As part of mitigation and response strategies, any detection should be thoroughly investigated to rule out false positives and determine the appropriate course of action. These detections are linked to tactics and techniques such as Command and Control, and Web Shell, underlining their severe implications for compromised systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "access to SUPERNOVA webshell as described in Guidepoint report",
      "answer": "In order to detect access to SUPERNOVA webshell as described in Guidepoint report, you should focus on monitoring webserver logs for specific patterns in URI queries that indicate an attempt to access or interact with the SUPERNOVA webshell. Look for URI queries containing both 'logoimagehandler.ashx' and 'clazz' together, as this combination is peculiar and indicative of suspicious activities related to the SUPERNOVA webshell. Additionally, keep an eye out for any URI query specifically containing 'logoimagehandler.ashx' that results in a server response status of 500, as this may also signal an attempt to exploit or engage with the webshell.\n\nIt is crucial to carefully monitor and investigate these signs within your webserver logs, keeping an eye on the client making the request and the response returned. Doing so will aid in the early detection of potential security threats associated with the SUPERNOVA webshell, thereby allowing for swift response and mitigation efforts.\n\nBe aware that while these detections are set at a critical level due to their potential impact, there might be instances where legitimate activities could inadvertently mirror these patterns, though such cases are unknown. As part of mitigation and response strategies, any detection should be thoroughly investigated to rule out false positives and determine the appropriate course of action. These detections are linked to tactics and techniques such as Command and Control, and Web Shell, underlining their severe implications for compromised systems."
    }
  },
  {
    "instruction": "How to detect: Ursnif C2 traffic.",
    "context": "",
    "output": "In order to detect Ursnif C2 traffic, you should monitor traffic through your proxy logs for specific patterns indicating malicious activity. Specifically, look for URLs or Uniform Resource Identifiers (URIs) in the traffic that contain patterns indicative of base64 encoding, such as '_2f' and '_2b' sequences. Additionally, pay close attention to URLs containing '.avi' file extensions within a '/images/' directory path, as these are part of the detection criteria. Both conditions involving base64 encoded segments and suspicious URL patterns need to be met for an alert to be triggered.\n\nIn your analysis, focus on fields including the client IP address (c-ip), the full requested URI (c-uri), server response size in bytes (sc-bytes), and the client's User-Agent string (c-ua) to gather more context about the suspicious traffic. It's important to note that while these detections are crucial, the possibility of encountering unknown false positive instances exists due to the broad nature of the detection rules. This detection is considered critical due to its association with the Ursnif C2 traffic, a known malicious operation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Ursnif C2 traffic.",
      "answer": "In order to detect Ursnif C2 traffic, you should monitor traffic through your proxy logs for specific patterns indicating malicious activity. Specifically, look for URLs or Uniform Resource Identifiers (URIs) in the traffic that contain patterns indicative of base64 encoding, such as '_2f' and '_2b' sequences. Additionally, pay close attention to URLs containing '.avi' file extensions within a '/images/' directory path, as these are part of the detection criteria. Both conditions involving base64 encoded segments and suspicious URL patterns need to be met for an alert to be triggered.\n\nIn your analysis, focus on fields including the client IP address (c-ip), the full requested URI (c-uri), server response size in bytes (sc-bytes), and the client's User-Agent string (c-ua) to gather more context about the suspicious traffic. It's important to note that while these detections are crucial, the possibility of encountering unknown false positive instances exists due to the broad nature of the detection rules. This detection is considered critical due to its association with the Ursnif C2 traffic, a known malicious operation."
    }
  },
  {
    "instruction": "Can you explain how to detect: High DNS queries bytes amount from host per short period of time",
    "context": "",
    "output": "Certainly!\n\nIn order to detect high DNS queries bytes amount from a host per short period of time, you should: Monitor DNS logs for any source IP address that generates a total sum of DNS query lengths exceeding 300,000 bytes within a timeframe of 1 minute. It's important to pay attention to any DNS activity that unusually uses a large amount of data in short intervals, as this could indicate a potential security threat. However, be mindful that there might be legitimate scenarios where high DNS bytes out rate to a domain name occurs, and such cases should be added to a whitelist to avoid false positives. This detection process is crucial for identifying possible data exfiltration or command and control communication attempts, linked to tactics and techniques such as Command and Control and Exfiltration. The severity level for this kind of activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "High DNS queries bytes amount from host per short period of time",
      "answer": "In order to detect high DNS queries bytes amount from a host per short period of time, you should: Monitor DNS logs for any source IP address that generates a total sum of DNS query lengths exceeding 300,000 bytes within a timeframe of 1 minute. It's important to pay attention to any DNS activity that unusually uses a large amount of data in short intervals, as this could indicate a potential security threat. However, be mindful that there might be legitimate scenarios where high DNS bytes out rate to a domain name occurs, and such cases should be added to a whitelist to avoid false positives. This detection process is crucial for identifying possible data exfiltration or command and control communication attempts, linked to tactics and techniques such as Command and Control and Exfiltration. The severity level for this kind of activity is considered medium."
    }
  },
  {
    "instruction": "How can I detect: indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant",
    "context": "",
    "output": "In order to detect indicators of APT 29 (Cozy Bear) phishing-campaign as reported by Mandiant, you should: focus on monitoring file events within Windows environments. Specifically, lookout for occurrences where files named 'ds7002.lnk', 'ds7002.pdf', or 'ds7002.zip' are involved. These particular file names have been identified as indicators of this phishing campaign, suggesting a malicious attempt to compromise the system. Since the probability of these specific file names appearing under legitimate circumstances is unlikely, any detection of these should be considered critical and warrants immediate investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant",
      "answer": "In order to detect indicators of APT 29 (Cozy Bear) phishing-campaign as reported by Mandiant, you should: focus on monitoring file events within Windows environments. Specifically, lookout for occurrences where files named 'ds7002.lnk', 'ds7002.pdf', or 'ds7002.zip' are involved. These particular file names have been identified as indicators of this phishing campaign, suggesting a malicious attempt to compromise the system. Since the probability of these specific file names appearing under legitimate circumstances is unlikely, any detection of these should be considered critical and warrants immediate investigation."
    }
  },
  {
    "instruction": "How to detect: Adversaries may communicate using a protocol and port paring that are typically not associated.\nFor example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443.\n",
    "context": "",
    "output": "In order to detect adversaries who may be communicating using a protocol and port pairing that are usually not associated, such as HTTPS over unconventional ports like 8088 or 587 instead of the standard port 443, you should focus on monitoring Windows PowerShell script activity. Specifically, you need to ensure Script Block Logging is enabled to capture PowerShell script executions. Look for instances where PowerShell scripts contain commands like `Test-NetConnection` along with parameters specifying `-ComputerName` and `-port`. These elements together might indicate attempts to test network connections to unusual ports, which could signify malicious activity based on the technique of leveraging different protocol and port combinations to evade detection or firewall rules. However, it's important to exclude scripts that are explicitly testing or using standard ports like 443 and 80 in their connection attempts, as these are typically associated with legitimate activities. This approach aims to strike a balance between identifying potential threats and reducing false positives, bearing in mind that legitimate administrative scripts could sometimes use similar patterns for valid purposes. The sensitivity of the detection is set to a medium level, acknowledging that while this method can effectively indicate suspicious behavior, it might not catch all variants of such activities and could occasionally flag benign actions as suspicious.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may communicate using a protocol and port paring that are typically not associated.\nFor example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443.\n",
      "answer": "In order to detect adversaries who may be communicating using a protocol and port pairing that are usually not associated, such as HTTPS over unconventional ports like 8088 or 587 instead of the standard port 443, you should focus on monitoring Windows PowerShell script activity. Specifically, you need to ensure Script Block Logging is enabled to capture PowerShell script executions. Look for instances where PowerShell scripts contain commands like `Test-NetConnection` along with parameters specifying `-ComputerName` and `-port`. These elements together might indicate attempts to test network connections to unusual ports, which could signify malicious activity based on the technique of leveraging different protocol and port combinations to evade detection or firewall rules. However, it's important to exclude scripts that are explicitly testing or using standard ports like 443 and 80 in their connection attempts, as these are typically associated with legitimate activities. This approach aims to strike a balance between identifying potential threats and reducing false positives, bearing in mind that legitimate administrative scripts could sometimes use similar patterns for valid purposes. The sensitivity of the detection is set to a medium level, acknowledging that while this method can effectively indicate suspicious behavior, it might not catch all variants of such activities and could occasionally flag benign actions as suspicious."
    }
  },
  {
    "instruction": "How to detect: command line parameters used by Hydra password guessing hack tool",
    "context": "",
    "output": "In order to detect command line parameters used by Hydra password guessing hack tool, you should look for process creation events on Windows systems where the command line includes certain patterns indicative of Hydra's usage. Specifically, look out for command line commands containing both '-u ' and '-p ' together. Additionally, watch for commands that include the keywords 'USER' and 'PASS', both surrounded by carets ('^'). These patterns are strongly associated with the attack method employed by the Hydra tool, which aims at guessing passwords through brute force or dictionary attacks. It is essential to be aware of potential false positives, which may arise from legitimate software that happens to use these keywords in its command line in a similar format. Given the high level of threat associated with this behavior, it's crucial to monitor for these indicators to effectively thwart attempts at unauthorized access through password guessing.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "command line parameters used by Hydra password guessing hack tool",
      "answer": "In order to detect command line parameters used by Hydra password guessing hack tool, you should look for process creation events on Windows systems where the command line includes certain patterns indicative of Hydra's usage. Specifically, look out for command line commands containing both '-u ' and '-p ' together. Additionally, watch for commands that include the keywords 'USER' and 'PASS', both surrounded by carets ('^'). These patterns are strongly associated with the attack method employed by the Hydra tool, which aims at guessing passwords through brute force or dictionary attacks. It is essential to be aware of potential false positives, which may arise from legitimate software that happens to use these keywords in its command line in a similar format. Given the high level of threat associated with this behavior, it's crucial to monitor for these indicators to effectively thwart attempts at unauthorized access through password guessing."
    }
  },
  {
    "instruction": "How can I detect: Detecting DNS tunnel activity for Muddywater actor",
    "context": "",
    "output": "In order to detect DNS tunnel activity for Muddywater actor, you should monitor for instances where specific processes are initiated on Windows systems. Specifically, look out for events where either PowerShell (powershell.exe) or its open-source cross-platform counterpart (pwsh.exe) is launched. Additionally, these processes should be started by Microsoft Excel (excel.exe) as indicated by the parent process. Moreover, the presence of \"DataExchange.dll\" in the command line used to start these processes is a critical indicator. Monitoring for these conditions is essential in identifying potential malicious activity associated with the Muddywater actor, and such detection should be treated with a high level of concern due to its critical nature.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detecting DNS tunnel activity for Muddywater actor",
      "answer": "In order to detect DNS tunnel activity for Muddywater actor, you should monitor for instances where specific processes are initiated on Windows systems. Specifically, look out for events where either PowerShell (powershell.exe) or its open-source cross-platform counterpart (pwsh.exe) is launched. Additionally, these processes should be started by Microsoft Excel (excel.exe) as indicated by the parent process. Moreover, the presence of \"DataExchange.dll\" in the command line used to start these processes is a critical indicator. Monitoring for these conditions is essential in identifying potential malicious activity associated with the Muddywater actor, and such detection should be treated with a high level of concern due to its critical nature."
    }
  },
  {
    "instruction": "Please help me detect the following: potential access to svchost process memory such as that used by Invoke-Phantom to kill the winRM Windows event logging service.",
    "context": "",
    "output": "Sure!\nIn order to detect potential access to svchost process memory such as that used by Invoke-Phantom to kill the winRM Windows event logging service, you should: focus on monitoring process access within the Windows operating system. Specifically, look for any instance where a process attempts to access the memory of the svchost.exe file located in the \\WINDOWS\\System32 directory. This process should be flagged if it requests a high level of access rights, specifically '0x1F3FFF', indicating comprehensive access permissions that could be utilized for malicious purposes such as stopping or interfering with the winRM service. Additionally, if the call trace for this access attempt includes 'UNKNOWN', it further heightens the suspicion that this may be a surreptitious attempt to interfere with system processes.\n\nHowever, there's a condition to filter out legitimate software development activities that could exhibit similar characteristics, particularly those involving Microsoft Visual Studio's MSBuild.exe tool, which is a legitimate process that might also access various system processes as part of its build operations. If the suspected access originates from Microsoft Visual Studio\u2019s MSBuild directories and involves .NET components as indicated by having a call trace to 'Microsoft.Build.ni.dll' or 'System.ni.dll', this access can be considered a potential false positive and may not be indicative of malicious activity.\n\nThe rule does acknowledge that there might be unknown cases that could lead to false positives, highlighting the importance of context and additional investigation upon an alert. The level of threat is considered high, underlining the importance of swiftly identifying and addressing such access patterns to safeguard against potential disruptions or manipulations of critical Windows services like winRM.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential access to svchost process memory such as that used by Invoke-Phantom to kill the winRM Windows event logging service.",
      "answer": "In order to detect potential access to svchost process memory such as that used by Invoke-Phantom to kill the winRM Windows event logging service, you should: focus on monitoring process access within the Windows operating system. Specifically, look for any instance where a process attempts to access the memory of the svchost.exe file located in the \\WINDOWS\\System32 directory. This process should be flagged if it requests a high level of access rights, specifically '0x1F3FFF', indicating comprehensive access permissions that could be utilized for malicious purposes such as stopping or interfering with the winRM service. Additionally, if the call trace for this access attempt includes 'UNKNOWN', it further heightens the suspicion that this may be a surreptitious attempt to interfere with system processes.\n\nHowever, there's a condition to filter out legitimate software development activities that could exhibit similar characteristics, particularly those involving Microsoft Visual Studio's MSBuild.exe tool, which is a legitimate process that might also access various system processes as part of its build operations. If the suspected access originates from Microsoft Visual Studio\u2019s MSBuild directories and involves .NET components as indicated by having a call trace to 'Microsoft.Build.ni.dll' or 'System.ni.dll', this access can be considered a potential false positive and may not be indicative of malicious activity.\n\nThe rule does acknowledge that there might be unknown cases that could lead to false positives, highlighting the importance of context and additional investigation upon an alert. The level of threat is considered high, underlining the importance of swiftly identifying and addressing such access patterns to safeguard against potential disruptions or manipulations of critical Windows services like winRM."
    }
  },
  {
    "instruction": "How can I detect: User Added to an Administrator's Azure AD Role",
    "context": "",
    "output": "In order to detect when a user is added to an administrator's Azure AD role, you should monitor Azure activity logs specifically related to Azure Active Directory activities. Look for events named \"Add member to role\" under the AzureActiveDirectory workload. These events become especially significant if the new value for the ModifiedProperties field ends with 'Admins' or 'Administrator', indicating the addition of a user to a high-privileged role. It is essential to be aware that false positives may arise from the legitimate activation of roles through Privileged Identity Management (PIM), where PIM generates similar events each time an 'eligible role' is enabled. This activity falls under the medium risk level due to its potential impact on organizational security. Identifying such modifications can help in uncovering unauthorized privilege escalations or changes in role assignments that could lead to a breach or abuse of privileged accounts. Detecting these events is critical in maintaining secure Azure AD environments and ensuring that only authorized users have administrative privileges.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "User Added to an Administrator's Azure AD Role",
      "answer": "In order to detect when a user is added to an administrator's Azure AD role, you should monitor Azure activity logs specifically related to Azure Active Directory activities. Look for events named \"Add member to role\" under the AzureActiveDirectory workload. These events become especially significant if the new value for the ModifiedProperties field ends with 'Admins' or 'Administrator', indicating the addition of a user to a high-privileged role. It is essential to be aware that false positives may arise from the legitimate activation of roles through Privileged Identity Management (PIM), where PIM generates similar events each time an 'eligible role' is enabled. This activity falls under the medium risk level due to its potential impact on organizational security. Identifying such modifications can help in uncovering unauthorized privilege escalations or changes in role assignments that could lead to a breach or abuse of privileged accounts. Detecting these events is critical in maintaining secure Azure AD environments and ensuring that only authorized users have administrative privileges."
    }
  },
  {
    "instruction": "How to detect: Possible webshell file creation on a static web site",
    "context": "",
    "output": "To detect possible webshell file creation on a static web site, certain parameters from Windows log sources, particularly focusing on web and file activities, should be monitored closely. This involves looking into file activities within specific directories associated with web server content. Notably, activity in the '\\inetpub\\wwwroot\\' directory is under scrutiny, especially the creation of files with extensions such as '.asp', '.ashx', and '.ph'. Additionally, attention is paid to activities in the directories '\\www\\', '\\htdocs\\', and '\\html\\' for the creation of files with the '.ph' extension.\n\nHowever, it's crucial to eliminate false positives to maintain the reliability of this detection. This includes ignoring file activities within temporary directories like '\\AppData\\Local\\Temp\\' and '\\Windows\\Temp\\' since these can be associated with benign processes like unpacking of executables. Similarly, activities that involve the system image or files related to legitimate tools such as 'xampp' are also disregarded to avoid misidentifying legitimate administration or development activities as malicious.\n\nThis detection approach is essential for identifying tactics and techniques associated with the deployment of webshells on static web sites, which can further indicate a cybersecurity threat. The main focus is to ensure accurate detection by carefully filtering out benign activities that could otherwise lead to false positive alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Possible webshell file creation on a static web site",
      "answer": "To detect possible webshell file creation on a static web site, certain parameters from Windows log sources, particularly focusing on web and file activities, should be monitored closely. This involves looking into file activities within specific directories associated with web server content. Notably, activity in the '\\inetpub\\wwwroot\\' directory is under scrutiny, especially the creation of files with extensions such as '.asp', '.ashx', and '.ph'. Additionally, attention is paid to activities in the directories '\\www\\', '\\htdocs\\', and '\\html\\' for the creation of files with the '.ph' extension.\n\nHowever, it's crucial to eliminate false positives to maintain the reliability of this detection. This includes ignoring file activities within temporary directories like '\\AppData\\Local\\Temp\\' and '\\Windows\\Temp\\' since these can be associated with benign processes like unpacking of executables. Similarly, activities that involve the system image or files related to legitimate tools such as 'xampp' are also disregarded to avoid misidentifying legitimate administration or development activities as malicious.\n\nThis detection approach is essential for identifying tactics and techniques associated with the deployment of webshells on static web sites, which can further indicate a cybersecurity threat. The main focus is to ensure accurate detection by carefully filtering out benign activities that could otherwise lead to false positive alerts."
    }
  },
  {
    "instruction": "How can I detect: DNS queries for \"anonfiles.com\", which is an anonymous file upload platform often used for malicious purposes",
    "context": "",
    "output": "In order to detect DNS queries for \"anonfiles.com\", which is an anonymous file upload platform often used for malicious purposes, you should: Monitor DNS query logs from Windows systems for occurrences of domain name queries containing '.anonfiles.com'. The detection of such queries can indicate the potential use of the platform for malicious activities, given its common association with hosting and sharing files anonymously, which may include malware or other harmful content. It's important to be aware that there could be rare legitimate reasons for accessing 'anonfiles.com', thus it is identified as a potential source of false positives. The severity of these detections is considered high, suggesting that immediate investigation is recommended upon triggering such an alert. This monitoring activity is associated with various tactics and techniques that adversaries might use, including Command and Control communication and Exfiltration over Alternative Protocols, as part of their malicious operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DNS queries for \"anonfiles.com\", which is an anonymous file upload platform often used for malicious purposes",
      "answer": "In order to detect DNS queries for \"anonfiles.com\", which is an anonymous file upload platform often used for malicious purposes, you should: Monitor DNS query logs from Windows systems for occurrences of domain name queries containing '.anonfiles.com'. The detection of such queries can indicate the potential use of the platform for malicious activities, given its common association with hosting and sharing files anonymously, which may include malware or other harmful content. It's important to be aware that there could be rare legitimate reasons for accessing 'anonfiles.com', thus it is identified as a potential source of false positives. The severity of these detections is considered high, suggesting that immediate investigation is recommended upon triggering such an alert. This monitoring activity is associated with various tactics and techniques that adversaries might use, including Command and Control communication and Exfiltration over Alternative Protocols, as part of their malicious operations."
    }
  },
  {
    "instruction": "How can I detect: volume shadow copy mount via Windows event log",
    "context": "",
    "output": "In order to detect volume shadow copy mount via Windows event log, you should monitor the Windows system log specifically for events generated by the Microsoft-Windows-Ntfs provider. Look for the event with ID 98, which indicates an activity related to the NTFS file system, such as when a volume shadow copy is mounted. This event becomes particularly significant if the DeviceName field in the event contains the string \"HarddiskVolumeShadowCopy,\" as this suggests a volume shadow copy operation was likely initiated.\n\nIt is important to note that there can be legitimate reasons for mounting volume shadow copies, such as during routine backups. Therefore, occurrences of this event may not always signify malicious activity. However, because attackers might exploit shadow copies to access or modify backups as part of their tactics, monitoring for this event can serve as an early warning. Mitigation techniques involve verifying the context in which these shadow copy mounts occur to determine if they are part of standard backup operations or if they deviate from normal patterns, suggesting a potential security threat.\n\nThe tags that are essential in understanding the context of this detection include Persistence, Privilege Escalation, and Defense Evasion, which correspond to tactics attackers might employ involving shadow copies to maintain access, elevate privileges, or evade defenses, respectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "volume shadow copy mount via Windows event log",
      "answer": "In order to detect volume shadow copy mount via Windows event log, you should monitor the Windows system log specifically for events generated by the Microsoft-Windows-Ntfs provider. Look for the event with ID 98, which indicates an activity related to the NTFS file system, such as when a volume shadow copy is mounted. This event becomes particularly significant if the DeviceName field in the event contains the string \"HarddiskVolumeShadowCopy,\" as this suggests a volume shadow copy operation was likely initiated.\n\nIt is important to note that there can be legitimate reasons for mounting volume shadow copies, such as during routine backups. Therefore, occurrences of this event may not always signify malicious activity. However, because attackers might exploit shadow copies to access or modify backups as part of their tactics, monitoring for this event can serve as an early warning. Mitigation techniques involve verifying the context in which these shadow copy mounts occur to determine if they are part of standard backup operations or if they deviate from normal patterns, suggesting a potential security threat.\n\nThe tags that are essential in understanding the context of this detection include Persistence, Privilege Escalation, and Defense Evasion, which correspond to tactics attackers might employ involving shadow copies to maintain access, elevate privileges, or evade defenses, respectively."
    }
  },
  {
    "instruction": "Can you explain how to detect: successful installation of Atera Remote Monitoring & Management (RMM) agent as recently found to be used by Conti operators",
    "context": "",
    "output": "Certainly!\n\nIn order to detect successful installation of Atera Remote Monitoring & Management (RMM) agent as recently found to be used by Conti operators, you should: Look for logs from applications on Windows systems. Specifically, pay attention to events with the ID 1033 that originate from the MsiInstaller provider. Within these events, focus on messages that contain the term \"AteraAgent.\" This detection is significant because it can indicate the installation of the Atera RMM agent, which has been utilized by Conti operators in their operations. Keep in mind that there may be legitimate installations of the Atera agent, so it's important to differentiate between malicious and authorized activities. The severity of this kind of detection is considered high due to its association with known cyber threat actors and their tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "successful installation of Atera Remote Monitoring & Management (RMM) agent as recently found to be used by Conti operators",
      "answer": "In order to detect successful installation of Atera Remote Monitoring & Management (RMM) agent as recently found to be used by Conti operators, you should: Look for logs from applications on Windows systems. Specifically, pay attention to events with the ID 1033 that originate from the MsiInstaller provider. Within these events, focus on messages that contain the term \"AteraAgent.\" This detection is significant because it can indicate the installation of the Atera RMM agent, which has been utilized by Conti operators in their operations. Keep in mind that there may be legitimate installations of the Atera agent, so it's important to differentiate between malicious and authorized activities. The severity of this kind of detection is considered high due to its association with known cyber threat actors and their tactics."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious PowerShell scripts accessing SAM hives",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious PowerShell scripts accessing SAM hives, you should: monitor for the creation of processes on Windows systems, specifically looking for commands that involve accessing or interacting with the Security Account Manager (SAM) database files located in '\\System32\\config\\sam' within '\\HarddiskVolumeShadowCopy' directories, or commands that include copying actions, such as 'Copy-Item', 'cp $_.', 'cpi $_.', 'copy $_.', or '[System.IO.File]::Copy('. Be cautious as some legitimate backup scenarios or PowerShell scripts designed to repair HiveNightmare / SeriousSAM Access Control Lists (ACLs) issues might also trigger this detection, but these instances should be rare. This monitoring is crucial due to the high threat level associated with unauthorized access to SAM database files, which may indicate an attempt to extract sensitive account information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious PowerShell scripts accessing SAM hives",
      "answer": "In order to detect suspicious PowerShell scripts accessing SAM hives, you should: monitor for the creation of processes on Windows systems, specifically looking for commands that involve accessing or interacting with the Security Account Manager (SAM) database files located in '\\System32\\config\\sam' within '\\HarddiskVolumeShadowCopy' directories, or commands that include copying actions, such as 'Copy-Item', 'cp $_.', 'cpi $_.', 'copy $_.', or '[System.IO.File]::Copy('. Be cautious as some legitimate backup scenarios or PowerShell scripts designed to repair HiveNightmare / SeriousSAM Access Control Lists (ACLs) issues might also trigger this detection, but these instances should be rare. This monitoring is crucial due to the high threat level associated with unauthorized access to SAM database files, which may indicate an attempt to extract sensitive account information."
    }
  },
  {
    "instruction": "How to detect: execution of \"logman\" utility in order to disable or delete Windows trace sessions",
    "context": "",
    "output": "In order to detect the execution of \"logman\" utility in order to disable or delete Windows trace sessions, you should: Monitor process creation events in Windows environments for the execution of \"logman.exe\". This detection focuses on instances where \"logman.exe\" is executed, specifically when its command line includes actions to \"stop\" or \"delete\" certain processes or services. Furthermore, it is important to watch for command-line invocations that attempt to manipulate or deactivate Windows trace sessions, especially those related to the Circular Kernel Context Logger, any event logs prefixed with \"EventLog-\", \"SYSMON TRACE\", or the \"SysmonDnsEtwSession\". The rule identifies these activities as potentially malicious due to their nature of disrupting trace and logging mechanisms which are vital for auditing and forensic analysis. It is worth noting that while this rule aims to capture malicious activity, there may be instances where legitimate administrative actions or installer tools perform similar operations. Therefore, such benign activities might trigger alerts and should be considered as possible false positives. The significance of detecting these actions is high, given their potential use in evading detection or hindering security investigations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"logman\" utility in order to disable or delete Windows trace sessions",
      "answer": "In order to detect the execution of \"logman\" utility in order to disable or delete Windows trace sessions, you should: Monitor process creation events in Windows environments for the execution of \"logman.exe\". This detection focuses on instances where \"logman.exe\" is executed, specifically when its command line includes actions to \"stop\" or \"delete\" certain processes or services. Furthermore, it is important to watch for command-line invocations that attempt to manipulate or deactivate Windows trace sessions, especially those related to the Circular Kernel Context Logger, any event logs prefixed with \"EventLog-\", \"SYSMON TRACE\", or the \"SysmonDnsEtwSession\". The rule identifies these activities as potentially malicious due to their nature of disrupting trace and logging mechanisms which are vital for auditing and forensic analysis. It is worth noting that while this rule aims to capture malicious activity, there may be instances where legitimate administrative actions or installer tools perform similar operations. Therefore, such benign activities might trigger alerts and should be considered as possible false positives. The significance of detecting these actions is high, given their potential use in evading detection or hindering security investigations."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of a new PowerShell module in the first folder of the module directory structure \"\\WindowsPowerShell\\Modules\\malware\\malware.psm1\". This is somewhat an uncommon practice as legitimate modules often includes a version folder.",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of a new PowerShell module in the first folder of the module directory structure \"\\WindowsPowerShell\\Modules\\malware\\malware.psm1\", which is somewhat an uncommon practice as legitimate modules often includes a version folder, you should: monitor file events on Windows systems focusing on the creation of files within the \\WindowsPowerShell\\Modules directory. Specifically, look for files ending with extensions \".ps\" or \".dll\" within that directory but omit PowerShell 7's default modules from consideration. The detection of files directly created in the root of the Modules directory, without being nested in a version-specific folder, can be indicative of suspicious activity, since legitimate PowerShell modules typically reside in versioned subdirectories. Keep in mind that the false positive rate may vary across different environments, and additional filtering criteria may be necessary to refine the detection mechanism for production use. The sensitivity level for this detection is set to medium due to the potential for both malicious and benign activities leading to similar artifacts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new PowerShell module in the first folder of the module directory structure \"\\WindowsPowerShell\\Modules\\malware\\malware.psm1\". This is somewhat an uncommon practice as legitimate modules often includes a version folder.",
      "answer": "In order to detect the creation of a new PowerShell module in the first folder of the module directory structure \"\\WindowsPowerShell\\Modules\\malware\\malware.psm1\", which is somewhat an uncommon practice as legitimate modules often includes a version folder, you should: monitor file events on Windows systems focusing on the creation of files within the \\WindowsPowerShell\\Modules directory. Specifically, look for files ending with extensions \".ps\" or \".dll\" within that directory but omit PowerShell 7's default modules from consideration. The detection of files directly created in the root of the Modules directory, without being nested in a version-specific folder, can be indicative of suspicious activity, since legitimate PowerShell modules typically reside in versioned subdirectories. Keep in mind that the false positive rate may vary across different environments, and additional filtering criteria may be necessary to refine the detection mechanism for production use. The sensitivity level for this detection is set to medium due to the potential for both malicious and benign activities leading to similar artifacts."
    }
  },
  {
    "instruction": "How can I detect: threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network and loading it for a DCOM InternetExplorer DLL Hijack scenario.",
    "context": "",
    "output": "In order to detect a threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network and loading it for a DCOM InternetExplorer DLL Hijack scenario, you should: Monitor Windows systems using Sysmon for two specific patterns of activity. Firstly, look for events where a file creation is logged (EventID 11) with the system process image, targeting filenames that end with '\\Internet Explorer\\iertutil.dll'. This indicates the possible creation or modification of the DLL file associated with Internet Explorer, which could be an attempt at DLL hijacking. Secondly, track instances where the Internet Explorer executable ('iexplore.exe') is observed loading a DLL ('iertutil.dll') that also resides in the Internet Explorer directory, as evidenced by EventID 7. This could indicate that the hijacked DLL is being executed, a direct sign of a potential DCOM DLL hijacking attempt. The rule deems such activities as critical, alerting you to the possibility of an ongoing attack utilizing this method. Do note, however, that there might be unknown scenarios that could trigger these conditions and be classified as false positives, albeit such cases are not specified.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network and loading it for a DCOM InternetExplorer DLL Hijack scenario.",
      "answer": "In order to detect a threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network and loading it for a DCOM InternetExplorer DLL Hijack scenario, you should: Monitor Windows systems using Sysmon for two specific patterns of activity. Firstly, look for events where a file creation is logged (EventID 11) with the system process image, targeting filenames that end with '\\Internet Explorer\\iertutil.dll'. This indicates the possible creation or modification of the DLL file associated with Internet Explorer, which could be an attempt at DLL hijacking. Secondly, track instances where the Internet Explorer executable ('iexplore.exe') is observed loading a DLL ('iertutil.dll') that also resides in the Internet Explorer directory, as evidenced by EventID 7. This could indicate that the hijacked DLL is being executed, a direct sign of a potential DCOM DLL hijacking attempt. The rule deems such activities as critical, alerting you to the possibility of an ongoing attack utilizing this method. Do note, however, that there might be unknown scenarios that could trigger these conditions and be classified as false positives, albeit such cases are not specified."
    }
  },
  {
    "instruction": "Explain how should I detect the following: process activity patterns as seen being used by Sliver C2 framework implants",
    "context": "",
    "output": "In order to detect process activity patterns as seen being used by Sliver C2 framework implants, you should monitor for specific command line activity within process creation logs on Windows systems. Look for processes initiated with the command line parameter `-NoExit -Command [Console]::OutputEncoding=[Text.UTF8Encoding]::UTF8`. This particular string indicates an attempt to keep the PowerShell console open after executing a command and setting the console's output encoding to UTF-8, a technique observed in the behavior of Sliver C2 framework implants used by attackers for maintaining persistence and command and control communications. The occurrence of this command is considered critical and it's unlikely to result in false positives, indicating a strong sign of a potential compromise or attack in progress.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process activity patterns as seen being used by Sliver C2 framework implants",
      "answer": "In order to detect process activity patterns as seen being used by Sliver C2 framework implants, you should monitor for specific command line activity within process creation logs on Windows systems. Look for processes initiated with the command line parameter `-NoExit -Command [Console]::OutputEncoding=[Text.UTF8Encoding]::UTF8`. This particular string indicates an attempt to keep the PowerShell console open after executing a command and setting the console's output encoding to UTF-8, a technique observed in the behavior of Sliver C2 framework implants used by attackers for maintaining persistence and command and control communications. The occurrence of this command is considered critical and it's unlikely to result in false positives, indicating a strong sign of a potential compromise or attack in progress."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of a ISO file in the Outlook temp folder or in the Appdata temp folder. Typical of Qakbot TTP from end-July 2022.",
    "context": "",
    "output": "In order to detect the creation of an ISO file in the Outlook temp folder or in the Appdata temp folder, typical of Qakbot TTP from end-July 2022, you should monitor for specific file event activities on Windows systems. Specifically, look for the creation of files with a '.iso' extension in two possible locations: the Temp folder within the user's AppData\\Local directory, especially zip files extracted to this location, and the Content.Outlook folder within the INetCache directory located in AppData\\Local\\Microsoft\\Windows. Pay attention to file events where the target file name contains '\\AppData\\Local\\Temp\\' and '.zip\\' in sequence before ending with '.iso', as well as events where the target file name contains '\\AppData\\Local\\Microsoft\\Windows\\INetCache\\Content.Outlook\\' and ends with '.iso'. Capture details such as the image involved, computer name, and the target file name itself during these detections to facilitate investigation. Be mindful that there might be false positives, such as system administrators legitimately opening a zip file that contains an ISO file. The significance of these detections is high, given the association with specific tactics and techniques used by attackers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a ISO file in the Outlook temp folder or in the Appdata temp folder. Typical of Qakbot TTP from end-July 2022.",
      "answer": "In order to detect the creation of an ISO file in the Outlook temp folder or in the Appdata temp folder, typical of Qakbot TTP from end-July 2022, you should monitor for specific file event activities on Windows systems. Specifically, look for the creation of files with a '.iso' extension in two possible locations: the Temp folder within the user's AppData\\Local directory, especially zip files extracted to this location, and the Content.Outlook folder within the INetCache directory located in AppData\\Local\\Microsoft\\Windows. Pay attention to file events where the target file name contains '\\AppData\\Local\\Temp\\' and '.zip\\' in sequence before ending with '.iso', as well as events where the target file name contains '\\AppData\\Local\\Microsoft\\Windows\\INetCache\\Content.Outlook\\' and ends with '.iso'. Capture details such as the image involved, computer name, and the target file name itself during these detections to facilitate investigation. Be mindful that there might be false positives, such as system administrators legitimately opening a zip file that contains an ISO file. The significance of these detections is high, given the association with specific tactics and techniques used by attackers."
    }
  },
  {
    "instruction": "Please help me detect the following: Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious activities involving the Deployment Image Servicing and Management tool (DISM), which is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should monitor process creation logs on Windows systems for executions of `DismHost.exe` or `Dism.exe`. Specifically, you should look for instances where these processes are initiated with command-line arguments that include both '/Online' and '/Disable-Feature'. These parameters indicate an attempt to disable certain features of the Windows system online, which can be indicative of an adversary's attempt to manipulate system configurations to their advantage or to disable security features. It\u2019s important to note that while this activity can be legitimate, it could also represent malicious behavior. Any detections should be reviewed to distinguish between benign use by system administrators and potentially malicious activity. The level of concern for these detections is categorized as medium, acknowledging that there exists a possibility for false positives, particularly in environments where scripts or automation tools legitimately use these command-line arguments for system maintenance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images",
      "answer": "In order to detect suspicious activities involving the Deployment Image Servicing and Management tool (DISM), which is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should monitor process creation logs on Windows systems for executions of `DismHost.exe` or `Dism.exe`. Specifically, you should look for instances where these processes are initiated with command-line arguments that include both '/Online' and '/Disable-Feature'. These parameters indicate an attempt to disable certain features of the Windows system online, which can be indicative of an adversary's attempt to manipulate system configurations to their advantage or to disable security features. It\u2019s important to note that while this activity can be legitimate, it could also represent malicious behavior. Any detections should be reviewed to distinguish between benign use by system administrators and potentially malicious activity. The level of concern for these detections is categorized as medium, acknowledging that there exists a possibility for false positives, particularly in environments where scripts or automation tools legitimately use these command-line arguments for system maintenance."
    }
  },
  {
    "instruction": "How to detect: processes loading the non-existent DLL \"ShellChromeAPI\". One known example is the \"DeviceEnroller\" binary in combination with the \"PhoneDeepLink\" flag tries to load this DLL.\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
    "context": "",
    "output": "In order to detect processes loading the non-existent DLL \"ShellChromeAPI\", which could indicate that adversaries are attempting to execute their own malicious DLL via legitimate Windows processes like DeviceEnroller.exe by misusing the \"PhoneDeepLink\" flag, you should focus on monitoring image loading activities within Windows environments. Specifically, you should pay attention to any instances where a DLL ending with the name \"\\ShellChromeAPI.dll\" is loaded. This DLL should not exist on modern Windows systems, and any attempt to load it should be considered suspicious and possibly indicative of an attack where an adversary is leveraging a renamed malicious DLL to compromise the system. It is important to remain vigilant for false positives, although they are currently unknown, and treat any detection at a high severity level due to the potential for significant system compromise. This technique is a telltale sign of adversaries trying to discreetly execute malicious code under the guise of legitimate operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "processes loading the non-existent DLL \"ShellChromeAPI\". One known example is the \"DeviceEnroller\" binary in combination with the \"PhoneDeepLink\" flag tries to load this DLL.\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
      "answer": "In order to detect processes loading the non-existent DLL \"ShellChromeAPI\", which could indicate that adversaries are attempting to execute their own malicious DLL via legitimate Windows processes like DeviceEnroller.exe by misusing the \"PhoneDeepLink\" flag, you should focus on monitoring image loading activities within Windows environments. Specifically, you should pay attention to any instances where a DLL ending with the name \"\\ShellChromeAPI.dll\" is loaded. This DLL should not exist on modern Windows systems, and any attempt to load it should be considered suspicious and possibly indicative of an attack where an adversary is leveraging a renamed malicious DLL to compromise the system. It is important to remain vigilant for false positives, although they are currently unknown, and treat any detection at a high severity level due to the potential for significant system compromise. This technique is a telltale sign of adversaries trying to discreetly execute malicious code under the guise of legitimate operations."
    }
  },
  {
    "instruction": "Please help me detect the following: scheduled task creations that have suspicious action command and folder combinations",
    "context": "",
    "output": "Sure!\nIn order to detect scheduled task creations that have suspicious action command and folder combinations, you should look for events where the Windows process creation log indicates the usage of the Task Scheduler tool (`schtasks.exe`), specifically focusing on instances where tasks are being created (`/create` command line argument). Further scrutiny is necessary if the command line includes calls to command processors or scripting interfaces such as PowerShell (`powershell`, `pwsh`) or Command Prompt (`cmd /c`, `cmd /k`, `cmd /r`, `cmd.exe /c`, `cmd.exe /k`, `cmd.exe /r`). Additionally, pay special attention when the commands reference critical system folders like `C:\\ProgramData\\` or use the environmental variable `%ProgramData%`. The detection of these elements combined points toward a high possibility of a malicious scheduled task being established, especially when found together in the process creation logs under the Windows operating system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scheduled task creations that have suspicious action command and folder combinations",
      "answer": "In order to detect scheduled task creations that have suspicious action command and folder combinations, you should look for events where the Windows process creation log indicates the usage of the Task Scheduler tool (`schtasks.exe`), specifically focusing on instances where tasks are being created (`/create` command line argument). Further scrutiny is necessary if the command line includes calls to command processors or scripting interfaces such as PowerShell (`powershell`, `pwsh`) or Command Prompt (`cmd /c`, `cmd /k`, `cmd /r`, `cmd.exe /c`, `cmd.exe /k`, `cmd.exe /r`). Additionally, pay special attention when the commands reference critical system folders like `C:\\ProgramData\\` or use the environmental variable `%ProgramData%`. The detection of these elements combined points toward a high possibility of a malicious scheduled task being established, especially when found together in the process creation logs under the Windows operating system."
    }
  },
  {
    "instruction": "Can you explain how to detect: import of the specified file to the registry with regedit.exe.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the import of the specified file to the registry with regedit.exe, you should: Monitor for instances where the process creation involves `regedit.exe`, indicating the Windows Registry Editor is being utilized. Key details to watch include the image name ending with `\\regedit.exe` or having an original filename of `REGEDIT.EXE`. Additionally, command line arguments should be carefully inspected. The presence of ` /i `, ` /s `, or a `.reg` file in the command line suggests an import operation to the registry is being attempted. However, it is critical to exclude command lines containing ` /e `, ` /a `, ` /c `, ` -e `, ` -a `, or ` -c ` as these flags indicate different operations that could lead to false positives. Furthermore, command lines that resemble a colon followed by any character except a space or backslash should be ignored to reduce the chance of conflating this activity with rules aimed at detecting Alternate Data Streams (ADS). Important fields to keep an eye on during this analysis include the parent image from which the command was run, and the specific command line used. Take note that legitimate registry key imports and certain applications like Evernote might generate similar activity, thus could be considered false positives. The detection level for this kind of activity is medium, suggesting it's not uncommon and warrants attention but may not always signify malicious intent on its own.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "import of the specified file to the registry with regedit.exe.",
      "answer": "In order to detect the import of the specified file to the registry with regedit.exe, you should: Monitor for instances where the process creation involves `regedit.exe`, indicating the Windows Registry Editor is being utilized. Key details to watch include the image name ending with `\\regedit.exe` or having an original filename of `REGEDIT.EXE`. Additionally, command line arguments should be carefully inspected. The presence of ` /i `, ` /s `, or a `.reg` file in the command line suggests an import operation to the registry is being attempted. However, it is critical to exclude command lines containing ` /e `, ` /a `, ` /c `, ` -e `, ` -a `, or ` -c ` as these flags indicate different operations that could lead to false positives. Furthermore, command lines that resemble a colon followed by any character except a space or backslash should be ignored to reduce the chance of conflating this activity with rules aimed at detecting Alternate Data Streams (ADS). Important fields to keep an eye on during this analysis include the parent image from which the command was run, and the specific command line used. Take note that legitimate registry key imports and certain applications like Evernote might generate similar activity, thus could be considered false positives. The detection level for this kind of activity is medium, suggesting it's not uncommon and warrants attention but may not always signify malicious intent on its own."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious launch of a renamed version of the PSEXESVC service with, which is not often used by legitimate administrators",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious launch of a renamed version of the PSEXESVC service which is not often used by legitimate administrators, you should: look for the creation of processes on Windows systems where the original file name is identified as 'psexesvc.exe'. However, make a distinction by excluding instances where the image path directly points to 'C:\\Windows\\PSEXESVC.exe', as this specific path may denote legitimate use. Attention should be focused on scenarios where 'psexesvc.exe' is launching from unexpected locations, which could indicate malicious activity. Recognize that legitimate administrative usage of PsExec might generate false positives, thus it is deemed a high-level alert due to its potential security implications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious launch of a renamed version of the PSEXESVC service with, which is not often used by legitimate administrators",
      "answer": "In order to detect suspicious launch of a renamed version of the PSEXESVC service which is not often used by legitimate administrators, you should: look for the creation of processes on Windows systems where the original file name is identified as 'psexesvc.exe'. However, make a distinction by excluding instances where the image path directly points to 'C:\\Windows\\PSEXESVC.exe', as this specific path may denote legitimate use. Attention should be focused on scenarios where 'psexesvc.exe' is launching from unexpected locations, which could indicate malicious activity. Recognize that legitimate administrative usage of PsExec might generate false positives, thus it is deemed a high-level alert due to its potential security implications."
    }
  },
  {
    "instruction": "How can I detect: Log4J Wstomcat process execution as seen in Mint Sandstorm activity",
    "context": "",
    "output": "In order to detect Log4J Wstomcat process execution as seen in Mint Sandstorm activity, you should: Focus on monitoring process creation events within Windows systems. Specifically, look for instances where the Wstomcat service ('ws_tomcatservice.exe') is listed as the parent image and is responsible for starting the 'repadmin.exe' process. This particular pattern of activity is indicative of the tactics and techniques associated with Mint Sandstorm activity, where adversaries might exploit Log4J vulnerabilities through specific process execution chains. It is important to pay close attention to these events, although be mindful that there might be cases where similar activity does not signify malicious intent, but such instances are currently unknown. The severity of detecting this activity is considered high, underscoring the potential risk involved.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Log4J Wstomcat process execution as seen in Mint Sandstorm activity",
      "answer": "In order to detect Log4J Wstomcat process execution as seen in Mint Sandstorm activity, you should: Focus on monitoring process creation events within Windows systems. Specifically, look for instances where the Wstomcat service ('ws_tomcatservice.exe') is listed as the parent image and is responsible for starting the 'repadmin.exe' process. This particular pattern of activity is indicative of the tactics and techniques associated with Mint Sandstorm activity, where adversaries might exploit Log4J vulnerabilities through specific process execution chains. It is important to pay close attention to these events, although be mindful that there might be cases where similar activity does not signify malicious intent, but such instances are currently unknown. The severity of detecting this activity is considered high, underscoring the potential risk involved."
    }
  },
  {
    "instruction": "Explain how should I detect the following: possible addition of shadow credentials to an active directory object.",
    "context": "",
    "output": "In order to detect possible addition of shadow credentials to an active directory object, you should monitor Windows security event logs, particularly focusing on events generated by changes to the directory service. This requires the \"Audit Directory Service Changes\" logging policy to be configured, as audit events will only be logged for objects that have system access control lists (SACLs) set up and are accessed in ways that match those SACL settings. Notably, the events of interest include event ID 5136, which indicates a change was made to an object in Active Directory. Specifically, pay attention to changes made to the 'msDS-KeyCredentialLink' attribute, as modifications to this attribute could signify the unauthorized addition of shadow credentials, which attackers could use to gain elevated privileges or maintain persistence in the network.\n\nHowever, be aware that there are legitimate scenarios where this attribute might be altered, such as operations performed by the Azure AD Connect synchronization account or the ADFS service account. These legitimate cases should be considered exceptions to reduce false positives. The logging of these events will not only help in identifying unauthorized modifications but also in assessing the security posture of Active Directory objects regarding their SACL configurations. In essence, vigilance over these specific event IDs and attributes is crucial for detecting and mitigating potential attacks that attempt to introduce shadow credentials into Active Directory objects.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible addition of shadow credentials to an active directory object.",
      "answer": "In order to detect possible addition of shadow credentials to an active directory object, you should monitor Windows security event logs, particularly focusing on events generated by changes to the directory service. This requires the \"Audit Directory Service Changes\" logging policy to be configured, as audit events will only be logged for objects that have system access control lists (SACLs) set up and are accessed in ways that match those SACL settings. Notably, the events of interest include event ID 5136, which indicates a change was made to an object in Active Directory. Specifically, pay attention to changes made to the 'msDS-KeyCredentialLink' attribute, as modifications to this attribute could signify the unauthorized addition of shadow credentials, which attackers could use to gain elevated privileges or maintain persistence in the network.\n\nHowever, be aware that there are legitimate scenarios where this attribute might be altered, such as operations performed by the Azure AD Connect synchronization account or the ADFS service account. These legitimate cases should be considered exceptions to reduce false positives. The logging of these events will not only help in identifying unauthorized modifications but also in assessing the security posture of Active Directory objects regarding their SACL configurations. In essence, vigilance over these specific event IDs and attributes is crucial for detecting and mitigating potential attacks that attempt to introduce shadow credentials into Active Directory objects."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious command lines used in Covenant luanchers",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious command lines used in Covenant launchers, you should: focus on monitoring the process creation logs within Windows environments. Specifically, look for command lines that display specific indicators of compromise which are commonly associated with these types of attacks. The detection criteria involve finding command lines that contain all of the following: '-Sta', '-Nop', '-Window', and 'Hidden'. Additionally, the presence of either '-Command' or '-EncodedCommand' in the command line also serves as a significant indicator. Alternatively, command lines that contain any of the following strings should also raise suspicion: 'sv o (New-Object IO.MemorySteam);sv d ', 'mshta file.hta', 'GruntHTTP', or '-EncodedCommand cwB2ACAAbwAgA'. The necessity to meet any one of these conditions (either all aspects of the first set or any from the second set) is crucial for triggering an alert. These signatures are distinctly linked with tactics and techniques such as execution, defense evasion, and the use of command and control channels specific to Covenant launcher activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious command lines used in Covenant luanchers",
      "answer": "In order to detect suspicious command lines used in Covenant launchers, you should: focus on monitoring the process creation logs within Windows environments. Specifically, look for command lines that display specific indicators of compromise which are commonly associated with these types of attacks. The detection criteria involve finding command lines that contain all of the following: '-Sta', '-Nop', '-Window', and 'Hidden'. Additionally, the presence of either '-Command' or '-EncodedCommand' in the command line also serves as a significant indicator. Alternatively, command lines that contain any of the following strings should also raise suspicion: 'sv o (New-Object IO.MemorySteam);sv d ', 'mshta file.hta', 'GruntHTTP', or '-EncodedCommand cwB2ACAAbwAgA'. The necessity to meet any one of these conditions (either all aspects of the first set or any from the second set) is crucial for triggering an alert. These signatures are distinctly linked with tactics and techniques such as execution, defense evasion, and the use of command and control channels specific to Covenant launcher activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detection well-known mimikatz command line arguments",
    "context": "",
    "output": "Certainly!\n\nIn order to detect well-known mimikatz command line arguments, you should: monitor Windows process creation logs for instances where specific command line arguments are used. These arguments may be indicative of the use of \"DumpCreds\", \"mimikatz\", or specific functions and modules related to credential dumping and other malicious activities. Specifically, look for command lines containing phrases like 'DumpCreds', 'mimikatz', '::aadcookie', '::detours', '::memssp', '::mflt', '::ncroutemon', '::ngcsign', '::printnightmare', '::skeleton', '::preshutdown', '::mstsc', '::multirdp', 'rpc::', 'token::', 'crypto::', 'dpapi::', 'sekurlsa::', 'kerberos::', 'lsadump::', 'privilege::', 'process::', 'vault::'. Detecting these arguments is key since they are associated with various tactics and techniques for credential theft, privilege escalation, and lateral movement within a network. The occurrence of such command line usage is a high-level indicator of a possible security threat or breach, requiring immediate attention, although false positives are considered unlikely in this context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detection well-known mimikatz command line arguments",
      "answer": "In order to detect well-known mimikatz command line arguments, you should: monitor Windows process creation logs for instances where specific command line arguments are used. These arguments may be indicative of the use of \"DumpCreds\", \"mimikatz\", or specific functions and modules related to credential dumping and other malicious activities. Specifically, look for command lines containing phrases like 'DumpCreds', 'mimikatz', '::aadcookie', '::detours', '::memssp', '::mflt', '::ncroutemon', '::ngcsign', '::printnightmare', '::skeleton', '::preshutdown', '::mstsc', '::multirdp', 'rpc::', 'token::', 'crypto::', 'dpapi::', 'sekurlsa::', 'kerberos::', 'lsadump::', 'privilege::', 'process::', 'vault::'. Detecting these arguments is key since they are associated with various tactics and techniques for credential theft, privilege escalation, and lateral movement within a network. The occurrence of such command line usage is a high-level indicator of a possible security threat or breach, requiring immediate attention, although false positives are considered unlikely in this context."
    }
  },
  {
    "instruction": "How can I detect: exploitation of vulnerabilities in Arcadyan routers as reported in CVE-2021-20090 and CVE-2021-20091.",
    "context": "",
    "output": "In order to detect exploitation of vulnerabilities in Arcadyan routers as reported in CVE-2021-20090 and CVE-2021-20091, you should: Monitor web server logs for specific patterns that indicate an attack attempt. Look for instances where the query string in the URL (cs-uri-query) contains patterns related to path traversal ('..%2f') which is a technique used to move up a directory level, bypassing authorization mechanisms. This pattern is associated with CVE-2021-20090. Moreover, pay attention to sequences where the query string combines this path traversal with an attempt to inject or manipulate configuration files, specifically targeting 'apply_abstract.cgi'. This behavior indicates a chaining of CVE-2021-20090 with CVE-2021-20091, aiming at config file injection. Additionally, be vigilant for query strings that direct access to directories commonly not requiring authentication such as '/images/', '/js/', '/css/', as well as specific login-related pages like '/setup_top_login.htm', '/login.html', '/loginerror.html', '/loginexclude.html', and '/loginlock.html'. An alert should be raised when evidence of path traversal or config file injection is detected in conjunction with requests to these non-authenticated directories or pages, suggesting an exploitation attempt. It\u2019s critical to note that this type of monitoring is set at the highest severity level due to the significant risk posed by these vulnerabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of vulnerabilities in Arcadyan routers as reported in CVE-2021-20090 and CVE-2021-20091.",
      "answer": "In order to detect exploitation of vulnerabilities in Arcadyan routers as reported in CVE-2021-20090 and CVE-2021-20091, you should: Monitor web server logs for specific patterns that indicate an attack attempt. Look for instances where the query string in the URL (cs-uri-query) contains patterns related to path traversal ('..%2f') which is a technique used to move up a directory level, bypassing authorization mechanisms. This pattern is associated with CVE-2021-20090. Moreover, pay attention to sequences where the query string combines this path traversal with an attempt to inject or manipulate configuration files, specifically targeting 'apply_abstract.cgi'. This behavior indicates a chaining of CVE-2021-20090 with CVE-2021-20091, aiming at config file injection. Additionally, be vigilant for query strings that direct access to directories commonly not requiring authentication such as '/images/', '/js/', '/css/', as well as specific login-related pages like '/setup_top_login.htm', '/login.html', '/loginerror.html', '/loginexclude.html', and '/loginlock.html'. An alert should be raised when evidence of path traversal or config file injection is detected in conjunction with requests to these non-authenticated directories or pages, suggesting an exploitation attempt. It\u2019s critical to note that this type of monitoring is set at the highest severity level due to the significant risk posed by these vulnerabilities."
    }
  },
  {
    "instruction": "Please help me detect the following: an appx package added the pipeline of the \"to be processed\" packages which is downloaded from a suspicious domain",
    "context": "",
    "output": "Sure!\nIn order to detect an appx package added to the pipeline of the \"to be processed\" packages which is downloaded from a suspicious domain, you should monitor Windows AppX Deployment Server logs for Event ID 854. This event indicates the addition of an appx package. Pay special attention to the path from which the package is downloaded. If the path contains URLs known for hosting suspicious activities, such as 'transfer.sh', 'raw.githubusercontent.com', 'gist.githubusercontent.com', 'pastebin.com', 'cdn.discordapp.com/attachments/', 'mediafire.com', 'mega.nz', 'ddns.net', '.paste.ee', '.hastebin.com', '.ghostbin.co/', 'ufile.io', 'storage.googleapis.com', 'anonfiles.com', 'send.exploit.in', 'privatlab.net', 'privatlab.com', 'sendspace.com', 'pastetext.net', 'pastebin.pl', or 'paste.ee', it might indicate a security risk. This monitoring strategy is crucial for identifying potentially harmful appx packages being processed, thereby mitigating the risk associated with executing malicious software obtained from these suspicious domains.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an appx package added the pipeline of the \"to be processed\" packages which is downloaded from a suspicious domain",
      "answer": "In order to detect an appx package added to the pipeline of the \"to be processed\" packages which is downloaded from a suspicious domain, you should monitor Windows AppX Deployment Server logs for Event ID 854. This event indicates the addition of an appx package. Pay special attention to the path from which the package is downloaded. If the path contains URLs known for hosting suspicious activities, such as 'transfer.sh', 'raw.githubusercontent.com', 'gist.githubusercontent.com', 'pastebin.com', 'cdn.discordapp.com/attachments/', 'mediafire.com', 'mega.nz', 'ddns.net', '.paste.ee', '.hastebin.com', '.ghostbin.co/', 'ufile.io', 'storage.googleapis.com', 'anonfiles.com', 'send.exploit.in', 'privatlab.net', 'privatlab.com', 'sendspace.com', 'pastetext.net', 'pastebin.pl', or 'paste.ee', it might indicate a security risk. This monitoring strategy is crucial for identifying potentially harmful appx packages being processed, thereby mitigating the risk associated with executing malicious software obtained from these suspicious domains."
    }
  },
  {
    "instruction": "How can I detect: specific command line argument being passed to a binary as seen being used by the malware Small Sieve.",
    "context": "",
    "output": "In order to detect specific command line argument being passed to a binary as seen being used by the malware Small Sieve, you should: Monitor Windows process creation logs for instances where a command line ends with the specific argument '.exe Platypus'. This observation is highly indicative of malicious activity, particularly associated with the malware known as Small Sieve. Given the nature of the detection\u2014focusing on command line arguments\u2014this method is considered to have a high criticality level, with false positives being unlikely. This approach is key for identifying possible infection vectors or malicious executions related to this particular malware strain.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific command line argument being passed to a binary as seen being used by the malware Small Sieve.",
      "answer": "In order to detect specific command line argument being passed to a binary as seen being used by the malware Small Sieve, you should: Monitor Windows process creation logs for instances where a command line ends with the specific argument '.exe Platypus'. This observation is highly indicative of malicious activity, particularly associated with the malware known as Small Sieve. Given the nature of the detection\u2014focusing on command line arguments\u2014this method is considered to have a high criticality level, with false positives being unlikely. This approach is key for identifying possible infection vectors or malicious executions related to this particular malware strain."
    }
  },
  {
    "instruction": "Please help me detect the following: regsvr32 execution to download and install DLLs located remotely where the address is an IP address.",
    "context": "",
    "output": "Sure!\nIn order to detect regsvr32 execution to download and install DLLs located remotely where the address is an IP address, you should monitor for process creations on Windows systems, especially focused on the execution of regsvr32.exe. This involves checking if the process image name ends with '\\regsvr32.exe' or the original file is named 'REGSVR32.EXE'. Additionally, pay attention to command-line executions that attempt to invoke regsvr32 with the '/i:' or '-i:' options followed by 'http://' or 'https://' URLs that start directly with digits (indicating direct IP address usage rather than domain names) from '1' to '9'. This detection strategy is critical since attackers might use regsvr32, a legitimate Windows utility, to download remote DLLs for malicious purposes, leveraging the fact that IP addresses starting with numbers could be used to bypass less sophisticated security measures. Be mindful of potential false positives which could arise from legitimate applications named similarly or using IP addresses in their normal operations, such as \"7-Zip\". This approach corresponds to a high alert level due to the serious implications of allowing unauthorized DLL downloads and executions via regsvr32.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "regsvr32 execution to download and install DLLs located remotely where the address is an IP address.",
      "answer": "In order to detect regsvr32 execution to download and install DLLs located remotely where the address is an IP address, you should monitor for process creations on Windows systems, especially focused on the execution of regsvr32.exe. This involves checking if the process image name ends with '\\regsvr32.exe' or the original file is named 'REGSVR32.EXE'. Additionally, pay attention to command-line executions that attempt to invoke regsvr32 with the '/i:' or '-i:' options followed by 'http://' or 'https://' URLs that start directly with digits (indicating direct IP address usage rather than domain names) from '1' to '9'. This detection strategy is critical since attackers might use regsvr32, a legitimate Windows utility, to download remote DLLs for malicious purposes, leveraging the fact that IP addresses starting with numbers could be used to bypass less sophisticated security measures. Be mindful of potential false positives which could arise from legitimate applications named similarly or using IP addresses in their normal operations, such as \"7-Zip\". This approach corresponds to a high alert level due to the serious implications of allowing unauthorized DLL downloads and executions via regsvr32."
    }
  },
  {
    "instruction": "Explain how should I detect the following: user downloads file by using CertOC.exe",
    "context": "",
    "output": "In order to detect when a user downloads file by using CertOC.exe, you should: Monitor the creation of processes on Windows systems, with a particular focus on identifying instances where the process image name ends with '\\certoc.exe' or when the original file name is 'CertOC.exe'. Additionally, watch for command lines that contain '-GetCACAPS'. Both criteria need to be met for an alert to be considered accurate. This detection process is tagged under the MITRE ATT&CK tactics and techniques related to Execution. Be aware that there might be situations where legitimate activities trigger an alert, although such false positives are not currently known. The significance of detections based on these criteria is considered high, indicating a strong likelihood of malicious activity when such conditions are met.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user downloads file by using CertOC.exe",
      "answer": "In order to detect when a user downloads file by using CertOC.exe, you should: Monitor the creation of processes on Windows systems, with a particular focus on identifying instances where the process image name ends with '\\certoc.exe' or when the original file name is 'CertOC.exe'. Additionally, watch for command lines that contain '-GetCACAPS'. Both criteria need to be met for an alert to be considered accurate. This detection process is tagged under the MITRE ATT&CK tactics and techniques related to Execution. Be aware that there might be situations where legitimate activities trigger an alert, although such false positives are not currently known. The significance of detections based on these criteria is considered high, indicating a strong likelihood of malicious activity when such conditions are met."
    }
  },
  {
    "instruction": "How can I detect: usage of powershell cmdlets to disable or remove ETW trace sessions",
    "context": "",
    "output": "In order to detect usage of powershell cmdlets to disable or remove ETW trace sessions, you should: Focus on monitoring PowerShell script actions within Windows environments, specifically looking for Script Block Logging entries. Ensure Script Block Logging is enabled for in-depth insight. Watch for specific patterns within the ScriptBlockText: the command 'Remove-EtwTraceProvider ' indicating an attempt to remove Event Tracing for Windows (ETW) trace providers, and sequences involving 'Set-EtwTraceProvider ' combined with '0x11', which are indicative of attempts to modify the \"Enable\" property of a provider, potentially disabling it. The detection strategy relies on catching either one of these behaviors as a sign of the attack. It is crucial to be vigilant for false positives, although they are currently unspecified. This monitoring stands at a high level of importance due to the nature of the actions being indicative of attempts to undermine system logging and monitoring capabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of powershell cmdlets to disable or remove ETW trace sessions",
      "answer": "In order to detect usage of powershell cmdlets to disable or remove ETW trace sessions, you should: Focus on monitoring PowerShell script actions within Windows environments, specifically looking for Script Block Logging entries. Ensure Script Block Logging is enabled for in-depth insight. Watch for specific patterns within the ScriptBlockText: the command 'Remove-EtwTraceProvider ' indicating an attempt to remove Event Tracing for Windows (ETW) trace providers, and sequences involving 'Set-EtwTraceProvider ' combined with '0x11', which are indicative of attempts to modify the \"Enable\" property of a provider, potentially disabling it. The detection strategy relies on catching either one of these behaviors as a sign of the attack. It is crucial to be vigilant for false positives, although they are currently unspecified. This monitoring stands at a high level of importance due to the nature of the actions being indicative of attempts to undermine system logging and monitoring capabilities."
    }
  },
  {
    "instruction": "How can I detect: suspicious reconnaissance command line activity on Windows systems using Net.EXE",
    "context": "",
    "output": "In order to detect suspicious reconnaissance command line activity on Windows systems using Net.EXE, you should: monitor process creation logs for executions of \"net.exe\" or \"net1.exe\". Specifically, look for command line invocations that include the use of 'group', 'localgroup', or 'accounts' keywords which indicate an attempt to query or modify user group memberships or account properties. Attention should be paid to commands attempting to interact with high privilege groups such as 'domain admins', 'administrator', 'enterprise admins', 'Exchange Trusted Subsystem', 'Remote Desktop Users' and their equivalents in other languages. This detection is refined by excluding commands aimed at adding users or groups (' /add') to reduce false positives typically generated by legitimate administrative activities or inventory tool runs. Activity that triggers this detection warrants further investigation to ascertain if the commands are being executed by users or entities (like service accounts or LOCAL_SYSTEM) that should not normally engage in these types of operations on the network, indicating potential reconnaissance or preparatory steps for further attacks. Detected events should include detailed information, specifically the command line and parent command line, to facilitate a comprehensive analysis.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious reconnaissance command line activity on Windows systems using Net.EXE",
      "answer": "In order to detect suspicious reconnaissance command line activity on Windows systems using Net.EXE, you should: monitor process creation logs for executions of \"net.exe\" or \"net1.exe\". Specifically, look for command line invocations that include the use of 'group', 'localgroup', or 'accounts' keywords which indicate an attempt to query or modify user group memberships or account properties. Attention should be paid to commands attempting to interact with high privilege groups such as 'domain admins', 'administrator', 'enterprise admins', 'Exchange Trusted Subsystem', 'Remote Desktop Users' and their equivalents in other languages. This detection is refined by excluding commands aimed at adding users or groups (' /add') to reduce false positives typically generated by legitimate administrative activities or inventory tool runs. Activity that triggers this detection warrants further investigation to ascertain if the commands are being executed by users or entities (like service accounts or LOCAL_SYSTEM) that should not normally engage in these types of operations on the network, indicating potential reconnaissance or preparatory steps for further attacks. Detected events should include detailed information, specifically the command line and parent command line, to facilitate a comprehensive analysis."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Detect run not allowed files. Applocker is a very useful tool, especially on servers where unprivileged users have access. For example terminal servers. You need configure applocker and log collect to receive these events.",
    "context": "",
    "output": "In order to detect run not allowed files, Applocker is a very useful tool, especially on servers where unprivileged users have access. For example, terminal servers. You need configure applocker and log collect to receive these events, you should: Monitor Windows AppLocker logs for specific events indicating the execution of unauthorized files. Focus on the AppLocker service within the Windows operating system. Look for occurrences of Event IDs 8004, 8007, 8022, and 8025, as these indicate attempts to execute files that are not permitted by AppLocker policies. Collect additional details from these events when possible, such as the policy name, rule ID, rule name, target user, target process ID, file path, file hash, and fully qualified binary name (Fqbn) for further investigation. Be aware that some legitimate activities might initially be flagged by this detection approach, necessitating some adjustments or exception additions in your Security Information and Event Management (SIEM) system to minimize false positives. This method stands at a medium level of alert severity, indicating its importance in safeguarding against unauthorized file execution which could point to malicious activities or policy violations within an environment where AppLocker is deployed for enhanced security measures.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect run not allowed files. Applocker is a very useful tool, especially on servers where unprivileged users have access. For example terminal servers. You need configure applocker and log collect to receive these events.",
      "answer": "In order to detect run not allowed files, Applocker is a very useful tool, especially on servers where unprivileged users have access. For example, terminal servers. You need configure applocker and log collect to receive these events, you should: Monitor Windows AppLocker logs for specific events indicating the execution of unauthorized files. Focus on the AppLocker service within the Windows operating system. Look for occurrences of Event IDs 8004, 8007, 8022, and 8025, as these indicate attempts to execute files that are not permitted by AppLocker policies. Collect additional details from these events when possible, such as the policy name, rule ID, rule name, target user, target process ID, file path, file hash, and fully qualified binary name (Fqbn) for further investigation. Be aware that some legitimate activities might initially be flagged by this detection approach, necessitating some adjustments or exception additions in your Security Information and Event Management (SIEM) system to minimize false positives. This method stands at a medium level of alert severity, indicating its importance in safeguarding against unauthorized file execution which could point to malicious activities or policy violations within an environment where AppLocker is deployed for enhanced security measures."
    }
  },
  {
    "instruction": "Explain how should I detect the following: changes to the \"ServiceDLL\" value related to a service in the registry. This is often used as a method of persistence.",
    "context": "",
    "output": "In order to detect changes to the \"ServiceDLL\" value related to a service in the registry, which is often used as a method of persistence, you should focus on monitoring registry settings changes in Windows environments, specifically within certain sections of the registry that could be altered for maintaining persistence on a system.\n\nMonitoring should cover any event where the registry setting `SetValue` is used, indicating a change is being made. The changes of primary interest occur under the registry path `HKLM\\System\\CurrentControlSet\\Services\\`, and specifically to values that end with `\\Parameters\\ServiceDll`. This tracking pinpoints modifications aimed at altering service DLLs, which can be a strong indicator of unauthorized persistence mechanisms being put in place.\n\nHowever, there are scenarios where alterations to similar registry paths could lead to false positives. For example, legitimate administrative scripts or during the installation of a new service, alterations to the `ServiceDll` values could occur. Thus, any detection logic should exclude events that specifically involve known system processes or files such as:\n- Changes involving `C:\\Windows\\system32\\spool\\drivers\\x64\\3\\PrintConfig.dll`, as this could be related to legitimate printer driver activities.\n- Alterations where the image path is `C:\\Windows\\system32\\lsass.exe` and targets `NTDS\\Parameters\\ServiceDll` with details pointing to `%%systemroot%%\\system32\\ntdsa.dll`, as this is expected behavior for domain controllers.\n- Situations involving `C:\\Windows\\System32\\poqexec.exe`, which is a process that can be involved in legitimate system operations.\n\nBy focusing on these specifics for detection, it is possible to reduce the noise from false positives, ensuring that the monitoring and alerting system is more accurately tuned to detect malicious attempts at establishing persistence through registry modifications involving service DLLs. Such vigilance aids in countering tactics commonly employed by attackers, aligning with strategies for threat detection and mitigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the \"ServiceDLL\" value related to a service in the registry. This is often used as a method of persistence.",
      "answer": "In order to detect changes to the \"ServiceDLL\" value related to a service in the registry, which is often used as a method of persistence, you should focus on monitoring registry settings changes in Windows environments, specifically within certain sections of the registry that could be altered for maintaining persistence on a system.\n\nMonitoring should cover any event where the registry setting `SetValue` is used, indicating a change is being made. The changes of primary interest occur under the registry path `HKLM\\System\\CurrentControlSet\\Services\\`, and specifically to values that end with `\\Parameters\\ServiceDll`. This tracking pinpoints modifications aimed at altering service DLLs, which can be a strong indicator of unauthorized persistence mechanisms being put in place.\n\nHowever, there are scenarios where alterations to similar registry paths could lead to false positives. For example, legitimate administrative scripts or during the installation of a new service, alterations to the `ServiceDll` values could occur. Thus, any detection logic should exclude events that specifically involve known system processes or files such as:\n- Changes involving `C:\\Windows\\system32\\spool\\drivers\\x64\\3\\PrintConfig.dll`, as this could be related to legitimate printer driver activities.\n- Alterations where the image path is `C:\\Windows\\system32\\lsass.exe` and targets `NTDS\\Parameters\\ServiceDll` with details pointing to `%%systemroot%%\\system32\\ntdsa.dll`, as this is expected behavior for domain controllers.\n- Situations involving `C:\\Windows\\System32\\poqexec.exe`, which is a process that can be involved in legitimate system operations.\n\nBy focusing on these specifics for detection, it is possible to reduce the noise from false positives, ensuring that the monitoring and alerting system is more accurately tuned to detect malicious attempts at establishing persistence through registry modifications involving service DLLs. Such vigilance aids in countering tactics commonly employed by attackers, aligning with strategies for threat detection and mitigation."
    }
  },
  {
    "instruction": "How to detect: Adversaries may use port monitors to run an attacker supplied DLL during system boot for persistence or privilege escalation.\nA port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup.\n",
    "context": "",
    "output": "In order to detect adversaries attempting to achieve persistence or escalate privileges by using port monitors to run attacker-supplied DLLs during system boot, you should monitor for specific registry modifications on Windows systems. Focus on the registry set events, particularly changes within the \"HKLM\\System\\CurrentControlSet\\Control\\Print\\Monitors\\\" registry path. These modifications should raise alerts if the details of the change include the setting of a value where the target object starts with the specified registry path and the details end with '.dll', indicating the loading of a DLL file.\n\nHowever, to reduce false positives, it's essential to exclude certain benign instances from triggering alerts. Exclude modifications related to \"C:\\Windows\\System32\\spoolsv.exe\" that involve the specific registry path \"\\System\\CurrentControlSet\\Control\\Print\\Monitors\\CutePDF Writer Monitor v4.0\\Driver\" and the \"cpwmon64_v40.dll\" details. This exclusion applies particularly when the user context contains various internationalized versions of 'AUTHORI' or 'AUTORI', indicating a legitimate process related to CutePDF Writer Monitor v4.0. Additionally, exclude changes linked to the \"Control\\Print\\Monitors\\MONVNC\\Driver\" object and modifications that simultaneously relate to the \"Control\\Print\\Environments\\\", \"\\Drivers\\\", and \"\\VNC Printer\" paths, as these are identified as legitimate configurations.\n\nSuspicious modifications that do not match these exclusions at the specified registry path, particularly those aiming to set a DLL to load at startup, are indicative of tactics aimed at persistence or privilege escalation. These activities can be associated with adversaries leveraging the AddMonitor API for malicious purposes. Tagging these detection instances appropriately includes noting their relevance to tactics such as persistence and privilege escalation for a more informed security response. The severity level associated with these findings is high, indicating a significant risk. However, one should be aware that unknown scenarios might lead to false positives, highlighting the importance of context in analysis.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may use port monitors to run an attacker supplied DLL during system boot for persistence or privilege escalation.\nA port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup.\n",
      "answer": "In order to detect adversaries attempting to achieve persistence or escalate privileges by using port monitors to run attacker-supplied DLLs during system boot, you should monitor for specific registry modifications on Windows systems. Focus on the registry set events, particularly changes within the \"HKLM\\System\\CurrentControlSet\\Control\\Print\\Monitors\\\" registry path. These modifications should raise alerts if the details of the change include the setting of a value where the target object starts with the specified registry path and the details end with '.dll', indicating the loading of a DLL file.\n\nHowever, to reduce false positives, it's essential to exclude certain benign instances from triggering alerts. Exclude modifications related to \"C:\\Windows\\System32\\spoolsv.exe\" that involve the specific registry path \"\\System\\CurrentControlSet\\Control\\Print\\Monitors\\CutePDF Writer Monitor v4.0\\Driver\" and the \"cpwmon64_v40.dll\" details. This exclusion applies particularly when the user context contains various internationalized versions of 'AUTHORI' or 'AUTORI', indicating a legitimate process related to CutePDF Writer Monitor v4.0. Additionally, exclude changes linked to the \"Control\\Print\\Monitors\\MONVNC\\Driver\" object and modifications that simultaneously relate to the \"Control\\Print\\Environments\\\", \"\\Drivers\\\", and \"\\VNC Printer\" paths, as these are identified as legitimate configurations.\n\nSuspicious modifications that do not match these exclusions at the specified registry path, particularly those aiming to set a DLL to load at startup, are indicative of tactics aimed at persistence or privilege escalation. These activities can be associated with adversaries leveraging the AddMonitor API for malicious purposes. Tagging these detection instances appropriately includes noting their relevance to tactics such as persistence and privilege escalation for a more informed security response. The severity level associated with these findings is high, indicating a significant risk. However, one should be aware that unknown scenarios might lead to false positives, highlighting the importance of context in analysis."
    }
  },
  {
    "instruction": "How can I detect: exploitation attempt of the vulnerability described in CVE-2021-4034.",
    "context": "",
    "output": "In order to detect exploitation attempt of the vulnerability described in CVE-2021-4034, you should: monitor Linux systems using auditd for specific patterns of activity that are indicative of an attack. Look for audit logs where the process title (proctitle) is registered as '(null)' in close proximity to syscall events generated by the command `pkexec` executed from `/usr/bin/pkexec`. This pattern of activity is highly indicative of an exploitation attempt against the mentioned vulnerability, noting that legitimate use of `pkexec` with a null proctitle is highly unusual and thus should be regarded with suspicion. Although there is a possibility of false positives being recorded, they are considered unknown, and the risk level of this activity is classified as high due to the severity of the vulnerability being exploited. This detection focuses on observing for abnormal execution behavior associated with privilege escalation attempts typically employed by attackers exploiting this vulnerability.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempt of the vulnerability described in CVE-2021-4034.",
      "answer": "In order to detect exploitation attempt of the vulnerability described in CVE-2021-4034, you should: monitor Linux systems using auditd for specific patterns of activity that are indicative of an attack. Look for audit logs where the process title (proctitle) is registered as '(null)' in close proximity to syscall events generated by the command `pkexec` executed from `/usr/bin/pkexec`. This pattern of activity is highly indicative of an exploitation attempt against the mentioned vulnerability, noting that legitimate use of `pkexec` with a null proctitle is highly unusual and thus should be regarded with suspicion. Although there is a possibility of false positives being recorded, they are considered unknown, and the risk level of this activity is classified as high due to the severity of the vulnerability being exploited. This detection focuses on observing for abnormal execution behavior associated with privilege escalation attempts typically employed by attackers exploiting this vulnerability."
    }
  },
  {
    "instruction": "How can I detect: suspicious invocation of the Get-ADDBAccount script that reads from a ntds.dit file and may be used to get access to credentials without using any credential dumpers",
    "context": "",
    "output": "In order to detect suspicious invocation of the Get-ADDBAccount script that reads from a ntds.dit file and may be used to get access to credentials without using any credential dumpers, you should: look for instances where the PowerShell module logging on a Windows system captures the execution of commands containing the strings 'Get-ADDBAccount', 'BootKey ', and 'DatabasePath '. This kind of activity is indicative of an adversary attempting to extract credentials directly from the AD database file (ntds.dit) without the need for traditional credential dumping tools. The monitoring of PowerShell modules for such specific command invocations is crucial due to the high potential for abuse in accessing sensitive credential information. It is essential to pay attention to these alerts given their high severity level, while also being aware that there may be unknown scenarios that could trigger false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious invocation of the Get-ADDBAccount script that reads from a ntds.dit file and may be used to get access to credentials without using any credential dumpers",
      "answer": "In order to detect suspicious invocation of the Get-ADDBAccount script that reads from a ntds.dit file and may be used to get access to credentials without using any credential dumpers, you should: look for instances where the PowerShell module logging on a Windows system captures the execution of commands containing the strings 'Get-ADDBAccount', 'BootKey ', and 'DatabasePath '. This kind of activity is indicative of an adversary attempting to extract credentials directly from the AD database file (ntds.dit) without the need for traditional credential dumping tools. The monitoring of PowerShell modules for such specific command invocations is crucial due to the high potential for abuse in accessing sensitive credential information. It is essential to pay attention to these alerts given their high severity level, while also being aware that there may be unknown scenarios that could trigger false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: changes to the EC2 instance startup script. The shell script will be executed as root/SYSTEM every time the specific instances are booted up.",
    "context": "",
    "output": "Sure!\nIn order to detect changes to the EC2 instance startup script, which will be executed as root/SYSTEM every time the specific instances are booted up, you should: Monitor AWS CloudTrail logs for any event related to modifying an EC2 instance's attributes, specifically focusing on changes made to the `userData` field, which is used to manage the instance's startup script. Key indicators of this activity include logs from the `ec2.amazonaws.com` event source where the `eventName` is `ModifyInstanceAttribute`, and the modification is regarding the `userData` attribute. Be aware that legitimate alterations to the startup script could also trigger an alert, such as valid changes during regular maintenance or updates. This kind of monitoring is critical as it pertains to detecting potential unauthorized modifications, aimed at persisting malicious activities within cloud environments. Such activities are highlighted due to their potential impact and the high level of access that modifications to the startup scripts can provide to an attacker, running with root or SYSTEM privileges every time the instance is initiated.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the EC2 instance startup script. The shell script will be executed as root/SYSTEM every time the specific instances are booted up.",
      "answer": "In order to detect changes to the EC2 instance startup script, which will be executed as root/SYSTEM every time the specific instances are booted up, you should: Monitor AWS CloudTrail logs for any event related to modifying an EC2 instance's attributes, specifically focusing on changes made to the `userData` field, which is used to manage the instance's startup script. Key indicators of this activity include logs from the `ec2.amazonaws.com` event source where the `eventName` is `ModifyInstanceAttribute`, and the modification is regarding the `userData` attribute. Be aware that legitimate alterations to the startup script could also trigger an alert, such as valid changes during regular maintenance or updates. This kind of monitoring is critical as it pertains to detecting potential unauthorized modifications, aimed at persisting malicious activities within cloud environments. Such activities are highlighted due to their potential impact and the high level of access that modifications to the startup scripts can provide to an attacker, running with root or SYSTEM privileges every time the instance is initiated."
    }
  },
  {
    "instruction": "Can you explain how to detect: High DNS requests amount from host per short period of time",
    "context": "",
    "output": "Certainly!\n\nIn order to detect instances of a high DNS requests amount from a host per short period of time, you should monitor DNS logs for any source IP address generating more than 1000 DNS queries within a 1-minute timeframe. This behavior can indicate malicious activities, such as DNS flood attacks, aimed at overwhelming a DNS server with the intent of disrupting its normal operations. However, it's crucial to account for potential false positives which might arise from legitimate services that require a high rate of DNS requests. Such legitimate cases should be identified and whitelisted to avoid unnecessary alerts. The detection of this activity falls under the medium severity level due to the potential impact on DNS service availability and the possibility of it being a precursor to more severe attacks or being part of a multi-stage attack chain.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "High DNS requests amount from host per short period of time",
      "answer": "In order to detect instances of a high DNS requests amount from a host per short period of time, you should monitor DNS logs for any source IP address generating more than 1000 DNS queries within a 1-minute timeframe. This behavior can indicate malicious activities, such as DNS flood attacks, aimed at overwhelming a DNS server with the intent of disrupting its normal operations. However, it's crucial to account for potential false positives which might arise from legitimate services that require a high rate of DNS requests. Such legitimate cases should be identified and whitelisted to avoid unnecessary alerts. The detection of this activity falls under the medium severity level due to the potential impact on DNS service availability and the possibility of it being a precursor to more severe attacks or being part of a multi-stage attack chain."
    }
  },
  {
    "instruction": "Can you explain how to detect: registry modifications that disable Privacy Settings Experience",
    "context": "",
    "output": "Certainly!\n\nIn order to detect registry modifications that disable Privacy Settings Experience, you should monitor Windows registry settings changes specifically focusing on events where the type of change is setting a value (SetValue). These events should be closely examined when they involve modifications to the '\\SOFTWARE\\Policies\\Microsoft\\Windows\\OOBE\\DisablePrivacyExperience' registry path. The key point to observe is when the Details of such changes indicate that a DWORD value is being set to 0x00000000 (equivalent to a numerical value of 0). While monitoring these activities, it's crucial to be aware of potential false positives, which might occur if a legitimate administrative script performs similar actions. The severity level of this specific observation is categorized as medium, underscoring its significance in the context of cybersecurity measures aimed at safeguarding privacy settings on Windows platforms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registry modifications that disable Privacy Settings Experience",
      "answer": "In order to detect registry modifications that disable Privacy Settings Experience, you should monitor Windows registry settings changes specifically focusing on events where the type of change is setting a value (SetValue). These events should be closely examined when they involve modifications to the '\\SOFTWARE\\Policies\\Microsoft\\Windows\\OOBE\\DisablePrivacyExperience' registry path. The key point to observe is when the Details of such changes indicate that a DWORD value is being set to 0x00000000 (equivalent to a numerical value of 0). While monitoring these activities, it's crucial to be aware of potential false positives, which might occur if a legitimate administrative script performs similar actions. The severity level of this specific observation is categorized as medium, underscoring its significance in the context of cybersecurity measures aimed at safeguarding privacy settings on Windows platforms."
    }
  },
  {
    "instruction": "Please help me detect the following: processes that query known 3rd party registry keys that holds credentials via commandline",
    "context": "",
    "output": "Sure!\nIn order to detect processes that query known 3rd party registry keys that holds credentials via commandline, you should monitor for process creation events on Windows systems where the command line includes references to specific registry paths. These paths are known to store sensitive information such as credentials for various applications, including PuTTY, MobaXterm, Radmin, Foxmail, IncrediMail, Eudora, B2 (presumably Becky! Internet Mail), OpenVPN-GUI, WinSCP, COREFTP, internet download managers, OpenSSH, TightVNC, WinVNC (both VNC3 and WinVNC4), suggesting that an attacker might be attempting to access stored credentials. This detection focuses on spotting suspicious activities where command lines contain references to these paths, which could indicate an attempt to extract sensitive data. Since these actions might yield some false positives due to legitimate process activities that also access these registry keys, it remains categorized at a medium level of alertness.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "processes that query known 3rd party registry keys that holds credentials via commandline",
      "answer": "In order to detect processes that query known 3rd party registry keys that holds credentials via commandline, you should monitor for process creation events on Windows systems where the command line includes references to specific registry paths. These paths are known to store sensitive information such as credentials for various applications, including PuTTY, MobaXterm, Radmin, Foxmail, IncrediMail, Eudora, B2 (presumably Becky! Internet Mail), OpenVPN-GUI, WinSCP, COREFTP, internet download managers, OpenSSH, TightVNC, WinVNC (both VNC3 and WinVNC4), suggesting that an attacker might be attempting to access stored credentials. This detection focuses on spotting suspicious activities where command lines contain references to these paths, which could indicate an attempt to extract sensitive data. Since these actions might yield some false positives due to legitimate process activities that also access these registry keys, it remains categorized at a medium level of alertness."
    }
  },
  {
    "instruction": "Explain how should I detect the following: plugged/unplugged USB devices",
    "context": "",
    "output": "In order to detect plugged/unplugged USB devices, you should focus on observing the activities within the Windows Driver Frameworks, specifically through the UserMode Operational event log. The key event IDs to watch out for are 2003, which denotes loading drivers, and 2100 and 2102, which are related to Plug and Play (PnP) or power management events. These IDs are indicative of USB devices being connected or disconnected from the system. It's important to note that while monitoring these event IDs, you may encounter legitimate administrative activities that could trigger these events, thus, they are considered to have a low level of risk. Being vigilant about these specific events will aid in identifying when USB devices are plugged in or unplugged from Windows systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "plugged/unplugged USB devices",
      "answer": "In order to detect plugged/unplugged USB devices, you should focus on observing the activities within the Windows Driver Frameworks, specifically through the UserMode Operational event log. The key event IDs to watch out for are 2003, which denotes loading drivers, and 2100 and 2102, which are related to Plug and Play (PnP) or power management events. These IDs are indicative of USB devices being connected or disconnected from the system. It's important to note that while monitoring these event IDs, you may encounter legitimate administrative activities that could trigger these events, thus, they are considered to have a low level of risk. Being vigilant about these specific events will aid in identifying when USB devices are plugged in or unplugged from Windows systems."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of \"dsquery.exe\" for domain trust discovery",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of \"dsquery.exe\" for domain trust discovery, you should monitor process creation logs on Windows systems. Specifically, look for instances where the process name ends with '\\dsquery.exe' or the original file name is identified exactly as 'dsquery.exe'. Additionally, pay attention to any command line execution that contains the term 'trustedDomain'. This could indicate an attempt to discover domain trusts, which can be a precursor to further attacks or lateral movement within a network. It is worth noting that there could be legitimate instances of using these utilities by authorized personnel for valid reasons, so consider this when evaluating potential alerts to avoid false positives. This approach leverages medium-level security measures focused on mitigating possible reconnaissance activities aimed at understanding domain trusts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"dsquery.exe\" for domain trust discovery",
      "answer": "In order to detect execution of \"dsquery.exe\" for domain trust discovery, you should monitor process creation logs on Windows systems. Specifically, look for instances where the process name ends with '\\dsquery.exe' or the original file name is identified exactly as 'dsquery.exe'. Additionally, pay attention to any command line execution that contains the term 'trustedDomain'. This could indicate an attempt to discover domain trusts, which can be a precursor to further attacks or lateral movement within a network. It is worth noting that there could be legitimate instances of using these utilities by authorized personnel for valid reasons, so consider this when evaluating potential alerts to avoid false positives. This approach leverages medium-level security measures focused on mitigating possible reconnaissance activities aimed at understanding domain trusts."
    }
  },
  {
    "instruction": "How to detect: rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module",
    "context": "",
    "output": "In order to detect rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module, you should: Monitor Windows systems for the creation of processes where the command line involves 'rundll32.exe' or 'rundll32' without any accompanying parameters. This monitoring should be done on systems that are capable of logging process creation events. Specifically, focus on capturing details such as the computer name, the username initiating the process, the exact command line used, and both the image path of the created process and the parent process's image path. Be aware that there might be instances where legitimate use of 'rundll32' without parameters is flagged by this detection approach; these are considered false positives. The significance of carefully monitoring for this activity is high due to its association with a known exploit technique.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module",
      "answer": "In order to detect rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module, you should: Monitor Windows systems for the creation of processes where the command line involves 'rundll32.exe' or 'rundll32' without any accompanying parameters. This monitoring should be done on systems that are capable of logging process creation events. Specifically, focus on capturing details such as the computer name, the username initiating the process, the exact command line used, and both the image path of the created process and the parent process's image path. Be aware that there might be instances where legitimate use of 'rundll32' without parameters is flagged by this detection approach; these are considered false positives. The significance of carefully monitoring for this activity is high due to its association with a known exploit technique."
    }
  },
  {
    "instruction": "How to detect: highly relevant Antivirus alert that reports a hack tool or other attack tool",
    "context": "",
    "output": "In order to detect a highly relevant Antivirus alert that reports a hack tool or other attack tool, you should monitor antivirus logs for alerts that identify the presence of known hacking tools or attack tools. Specifically, look for signatures that start with 'HTOOL', 'HKTL', 'SecurityTool', 'Adfind', 'ATK/', 'Exploit.Script.CVE', 'PWS.', or 'PWSX'. Additionally, pay attention to signatures that contain the following strings: 'Hacktool', 'ATK/' (specifically noted for Sophos antivirus), 'Potato', 'Rozena', 'Sbelt', 'Seatbelt', 'SecurityTool', 'SharpDump', 'Sliver', 'Splinter', 'Swrort', 'Impacket', 'Koadic', 'Lazagne', 'Metasploit', 'Meterpreter', 'MeteTool', 'Mimikatz', 'Mpreter', 'Nighthawk', 'PentestPowerShell', 'PowerSploit', 'PowerSSH', 'PshlSpy', 'PSWTool', 'PWCrack', 'Brutel', 'BruteR', 'Cobalt', 'COBEACON', 'Cometer', 'DumpCreds', 'FastReverseProxy', and 'PWDump'.\n\nEnsure that for any detected alert, you collect at least the file name associated with the tool and the user account involved. Given the nature of these signatures, which are closely associated with intrusion tools and frameworks used in cyber attacks, it's highly unlikely that detections would be false positives. Such detections are critical for identifying potential breaches or unauthorized activities within a network, as they may involve attempts at privilege escalation, lateral movement, credential theft, or deploying additional payloads. This monitoring strategy aligns with MITRE ATT&CK tactics and techniques related to the use of credential access tools, discovery tools, defense evasion mechanisms, and execution techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "highly relevant Antivirus alert that reports a hack tool or other attack tool",
      "answer": "In order to detect a highly relevant Antivirus alert that reports a hack tool or other attack tool, you should monitor antivirus logs for alerts that identify the presence of known hacking tools or attack tools. Specifically, look for signatures that start with 'HTOOL', 'HKTL', 'SecurityTool', 'Adfind', 'ATK/', 'Exploit.Script.CVE', 'PWS.', or 'PWSX'. Additionally, pay attention to signatures that contain the following strings: 'Hacktool', 'ATK/' (specifically noted for Sophos antivirus), 'Potato', 'Rozena', 'Sbelt', 'Seatbelt', 'SecurityTool', 'SharpDump', 'Sliver', 'Splinter', 'Swrort', 'Impacket', 'Koadic', 'Lazagne', 'Metasploit', 'Meterpreter', 'MeteTool', 'Mimikatz', 'Mpreter', 'Nighthawk', 'PentestPowerShell', 'PowerSploit', 'PowerSSH', 'PshlSpy', 'PSWTool', 'PWCrack', 'Brutel', 'BruteR', 'Cobalt', 'COBEACON', 'Cometer', 'DumpCreds', 'FastReverseProxy', and 'PWDump'.\n\nEnsure that for any detected alert, you collect at least the file name associated with the tool and the user account involved. Given the nature of these signatures, which are closely associated with intrusion tools and frameworks used in cyber attacks, it's highly unlikely that detections would be false positives. Such detections are critical for identifying potential breaches or unauthorized activities within a network, as they may involve attempts at privilege escalation, lateral movement, credential theft, or deploying additional payloads. This monitoring strategy aligns with MITRE ATT&CK tactics and techniques related to the use of credential access tools, discovery tools, defense evasion mechanisms, and execution techniques."
    }
  },
  {
    "instruction": "How to detect: potential DLL side loading of DLLs that are part of the Wazuh security platform",
    "context": "",
    "output": "In order to detect potential DLL side loading of DLLs that are part of the Wazuh security platform, you should: Monitor Windows systems for the loading of specific DLL files, focusing on the occurrence of '\\libwazuhshared.dll' and '\\libwinpthread-1.dll' being loaded. It's important to disregard cases where these files are loaded from common directories such as 'C:\\Program Files\\' and 'C:\\Program Files (x86)\\', as legitimate software commonly uses these paths. Special attention should be paid to avoid false positives that could arise from the legitimate use of 'libwinpthread-1.dll' by many applications, particularly those installed in \"AppData\" or \"ProgramData\" directories and involving \"mingw64\". Applications such as Visual Studio, JetBrains, Ruby, Anaconda, and GithubDesktop, among others, often use this DLL legitimately. Therefore, while detecting DLL side loading attempts, ensure that checks are refined to minimize interference with the normal operation of such legitimate software applications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL side loading of DLLs that are part of the Wazuh security platform",
      "answer": "In order to detect potential DLL side loading of DLLs that are part of the Wazuh security platform, you should: Monitor Windows systems for the loading of specific DLL files, focusing on the occurrence of '\\libwazuhshared.dll' and '\\libwinpthread-1.dll' being loaded. It's important to disregard cases where these files are loaded from common directories such as 'C:\\Program Files\\' and 'C:\\Program Files (x86)\\', as legitimate software commonly uses these paths. Special attention should be paid to avoid false positives that could arise from the legitimate use of 'libwinpthread-1.dll' by many applications, particularly those installed in \"AppData\" or \"ProgramData\" directories and involving \"mingw64\". Applications such as Visual Studio, JetBrains, Ruby, Anaconda, and GithubDesktop, among others, often use this DLL legitimately. Therefore, while detecting DLL side loading attempts, ensure that checks are refined to minimize interference with the normal operation of such legitimate software applications."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious shell commands used in various exploit codes (see references)",
    "context": "",
    "output": "In order to detect suspicious shell commands used in various exploit codes, you should monitor for specific command patterns within Linux systems. These patterns include:\n\n- Use of `wget` to download files followed by immediately executing them with `perl`, `sh`, or `bash`. This could indicate an attempt to fetch and run malicious scripts.\n- Execution of Python's SimpleHTTPServer or http.server modules which may suggest serving files from the compromised system, often used in data exfiltration or serving malicious content.\n- Invocations that involve `pty` module for spawning pseudo-terminal sessions, and `socat` commands which could be used for creating reverse shells or binding shells to a port, indicating possible remote command execution attempts.\n- Commands that alter binary files with `echo` or change permissions of files with `chmod` to make them executable, specifically in directories like `/tmp`, `/var/run`, or `/mnt`, are signs of attempts to execute or persist malware.\n- Specific patterns related to disabling firewall services (`iptables`, `SuSEfirewall2`), modifying `/etc/rc.local` for persistence, or commands typically associated with the Metasploit framework's exploit payloads such as decoding base64-encoded files, setting SUID bit on binaries, or running network listeners with `nc` are key indicators of exploitation attempts.\n- Other suspicious activities like copying shell binaries (`ksh`, `sh`) into other locations, executing or making executable various suspicious files within `/tmp` directory, including those with extensions or names related to common exploit tools (e.g., `.b64`, `ysocereal.jar`, `x`) could signal post-exploitation movements or an attempt to establish persistence.\n\nBe aware of false positives, as legitimate administration activities might occasionally use parts of these commands. However, the commands listed are generally considered high-risk and warrant investigation if detected. Monitoring for these command patterns helps in identifying potential security breaches or exploit attempts in their early stages.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious shell commands used in various exploit codes (see references)",
      "answer": "In order to detect suspicious shell commands used in various exploit codes, you should monitor for specific command patterns within Linux systems. These patterns include:\n\n- Use of `wget` to download files followed by immediately executing them with `perl`, `sh`, or `bash`. This could indicate an attempt to fetch and run malicious scripts.\n- Execution of Python's SimpleHTTPServer or http.server modules which may suggest serving files from the compromised system, often used in data exfiltration or serving malicious content.\n- Invocations that involve `pty` module for spawning pseudo-terminal sessions, and `socat` commands which could be used for creating reverse shells or binding shells to a port, indicating possible remote command execution attempts.\n- Commands that alter binary files with `echo` or change permissions of files with `chmod` to make them executable, specifically in directories like `/tmp`, `/var/run`, or `/mnt`, are signs of attempts to execute or persist malware.\n- Specific patterns related to disabling firewall services (`iptables`, `SuSEfirewall2`), modifying `/etc/rc.local` for persistence, or commands typically associated with the Metasploit framework's exploit payloads such as decoding base64-encoded files, setting SUID bit on binaries, or running network listeners with `nc` are key indicators of exploitation attempts.\n- Other suspicious activities like copying shell binaries (`ksh`, `sh`) into other locations, executing or making executable various suspicious files within `/tmp` directory, including those with extensions or names related to common exploit tools (e.g., `.b64`, `ysocereal.jar`, `x`) could signal post-exploitation movements or an attempt to establish persistence.\n\nBe aware of false positives, as legitimate administration activities might occasionally use parts of these commands. However, the commands listed are generally considered high-risk and warrant investigation if detected. Monitoring for these command patterns helps in identifying potential security breaches or exploit attempts in their early stages."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation",
    "context": "",
    "output": "In order to detect attempts by adversaries to enumerate services running on remote hosts, which can be a precursor to identifying vulnerable services for remote exploitation, you should monitor network connections initiated by Python scripts on Windows systems. Specifically, look for connections where the initiation flag is set to 'true' and the executing binary includes 'python' in its path.\n\nHowever, it's important to exclude certain benign activities that could generate false positives. These exclusions include:\n\n- Python scripts running as part of the Anaconda environment, particularly during Anaconda updates. This can be identified by Python scripts initiated by `C:\\ProgramData\\Anaconda3\\Scripts\\conda.exe` and involving commands like an update, which typically execute the `conda-script.py`.\n- Usage of Jupyter Notebooks via Anaconda, indicated by Python executions that start Jupyter Notebooks, with the parent image being `C:\\ProgramData\\Anaconda3\\python.exe` and command lines involving `jupyter-notebook-script.py`.\n- Local network communications where both the source and destination IP addresses are `127.0.0.1`. This might happen when Jupyter Notebooks are launched locally or other Python scripts that communicate over the local network are executed.\n\nMonitoring for this activity is contextual and may yield false positives in the form of legitimate Python scripts engaging in non-malicious network connections. The detection level is set at medium, indicating that while the activity is potentially suspicious, it is not definitively malicious and should be investigated alongside other indicators of compromise. It's essential to correlate this detection with other suspicious activities to discern between benign and malicious actions accurately. This monitoring targets the MITRE ATT&CK tactics and techniques related to Discovery and Command and Control, by identifying potentially unauthorized enumeration of services running on remote hosts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation",
      "answer": "In order to detect attempts by adversaries to enumerate services running on remote hosts, which can be a precursor to identifying vulnerable services for remote exploitation, you should monitor network connections initiated by Python scripts on Windows systems. Specifically, look for connections where the initiation flag is set to 'true' and the executing binary includes 'python' in its path.\n\nHowever, it's important to exclude certain benign activities that could generate false positives. These exclusions include:\n\n- Python scripts running as part of the Anaconda environment, particularly during Anaconda updates. This can be identified by Python scripts initiated by `C:\\ProgramData\\Anaconda3\\Scripts\\conda.exe` and involving commands like an update, which typically execute the `conda-script.py`.\n- Usage of Jupyter Notebooks via Anaconda, indicated by Python executions that start Jupyter Notebooks, with the parent image being `C:\\ProgramData\\Anaconda3\\python.exe` and command lines involving `jupyter-notebook-script.py`.\n- Local network communications where both the source and destination IP addresses are `127.0.0.1`. This might happen when Jupyter Notebooks are launched locally or other Python scripts that communicate over the local network are executed.\n\nMonitoring for this activity is contextual and may yield false positives in the form of legitimate Python scripts engaging in non-malicious network connections. The detection level is set at medium, indicating that while the activity is potentially suspicious, it is not definitively malicious and should be investigated alongside other indicators of compromise. It's essential to correlate this detection with other suspicious activities to discern between benign and malicious actions accurately. This monitoring targets the MITRE ATT&CK tactics and techniques related to Discovery and Command and Control, by identifying potentially unauthorized enumeration of services running on remote hosts."
    }
  },
  {
    "instruction": "Can you explain how to detect: remote RPC calls to possibly abuse remote encryption service via MS-EFSR",
    "context": "",
    "output": "Certainly!\n\nIn order to detect remote RPC calls to possibly abuse remote encryption service via MS-EFSR, you should: Monitor the RPC (Remote Procedure Call) firewall logs for applications, specifically looking for Event Log labeled RPCFW with an Event ID of 3. This event indicates an RPC call has been made. Pay special attention to calls made using the Interface UUIDs df1941c5-fe89-4e79-bf10-463657acf44d or c681d488-d850-11d0-8c52-00c04fd90f7e, as these are known identifiers for operations that could be related to the abuse of the Microsoft Encrypting File System Remote (MS-EFSR) service. However, it is important to consider that there may be legitimate usage of remote file encryption services; such activities should not automatically be treated as malicious without further investigation. Since this activity is considered to be of high importance, ensure that the RPC firewall is correctly installed and applied to all relevant processes as a preventative measure against potential abuse.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls to possibly abuse remote encryption service via MS-EFSR",
      "answer": "In order to detect remote RPC calls to possibly abuse remote encryption service via MS-EFSR, you should: Monitor the RPC (Remote Procedure Call) firewall logs for applications, specifically looking for Event Log labeled RPCFW with an Event ID of 3. This event indicates an RPC call has been made. Pay special attention to calls made using the Interface UUIDs df1941c5-fe89-4e79-bf10-463657acf44d or c681d488-d850-11d0-8c52-00c04fd90f7e, as these are known identifiers for operations that could be related to the abuse of the Microsoft Encrypting File System Remote (MS-EFSR) service. However, it is important to consider that there may be legitimate usage of remote file encryption services; such activities should not automatically be treated as malicious without further investigation. Since this activity is considered to be of high importance, ensure that the RPC firewall is correctly installed and applied to all relevant processes as a preventative measure against potential abuse."
    }
  },
  {
    "instruction": "How can I detect: Obfuscated Powershell via RUNDLL LAUNCHER",
    "context": "",
    "output": "In order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should: Monitor Windows security event logs, specifically focusing on enabling the 'System Security Extension' audit subcategory to capture Event ID 4697. This event ID is critical for detecting instances where services are being installed, which could be indicative of malicious activity, especially when certain file names and command lines are involved. The detection hinges on spotting any service installation attempts that involve the combination of 'rundll32.exe', 'shell32.dll', 'shellexec_rundll', and 'powershell' in the Service File Name field. These particular command-line arguments are often used in obfuscation techniques to hide the true nature of a PowerShell script execution, which can be a common tactic in various attack scenarios. Given this method's stealthy nature, it's been tagged with tactics and techniques that include Execution, Persistence, and Defense Evasion, without directly indicating these by their MITRE ATT&CK identifiers. While there's acknowledgement of unknown false positives, the level of concern is set at medium, suggesting a balanced approach to vigilance against these types of threats. This approach underscores the importance of detailed monitoring and analysis of security logs for indicators of sophisticated PowerShell usage that could evade simpler detection methods.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via RUNDLL LAUNCHER",
      "answer": "In order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should: Monitor Windows security event logs, specifically focusing on enabling the 'System Security Extension' audit subcategory to capture Event ID 4697. This event ID is critical for detecting instances where services are being installed, which could be indicative of malicious activity, especially when certain file names and command lines are involved. The detection hinges on spotting any service installation attempts that involve the combination of 'rundll32.exe', 'shell32.dll', 'shellexec_rundll', and 'powershell' in the Service File Name field. These particular command-line arguments are often used in obfuscation techniques to hide the true nature of a PowerShell script execution, which can be a common tactic in various attack scenarios. Given this method's stealthy nature, it's been tagged with tactics and techniques that include Execution, Persistence, and Defense Evasion, without directly indicating these by their MITRE ATT&CK identifiers. While there's acknowledgement of unknown false positives, the level of concern is set at medium, suggesting a balanced approach to vigilance against these types of threats. This approach underscores the importance of detailed monitoring and analysis of security logs for indicators of sophisticated PowerShell usage that could evade simpler detection methods."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may search the Registry on compromised systems for insecurely stored credentials.\nThe Windows Registry stores configuration information that can be used by the system or other programs.\nAdversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services\n",
    "context": "",
    "output": "In order to detect adversaries searching the Registry on compromised systems for insecurely stored credentials, you should monitor for signs of registry querying activities that focus on extracting sensitive information. Specifically, look for the creation of processes associated with the Windows Registry Editor tool, reg.exe. The detection mechanism should trigger alerts when reg.exe processes are observed executing commands that involve querying ('query') the registry with specific parameters targeting string values ('REG_SZ'), conducted in a recursive manner ('/s'), and filtering for types ('/t'). Additionally, detection should be honed in on commands that attempt to search ('/f') within critical registry hives such as HKLM (HKEY_LOCAL_MACHINE) and HKCU (HKEY_CURRENT_USER), including specific paths known to store configurations related to software like PuTTY under HKCU\\Software\\SimonTatham\\PuTTY\\Sessions. Such activities are indicative of attempts by adversaries to retrieve insecurely stored credentials from the registry, which could be used to facilitate further attacks or gains. The level of alert for this detection is considered medium, indicating a noteworthy severity that should prompt investigation, despite the potential for unknown false positives. This approach aligns with the methodology to secure systems against attackers leveraging registry information, particularly focusing on the credential access technique through registry data mining.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may search the Registry on compromised systems for insecurely stored credentials.\nThe Windows Registry stores configuration information that can be used by the system or other programs.\nAdversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services\n",
      "answer": "In order to detect adversaries searching the Registry on compromised systems for insecurely stored credentials, you should monitor for signs of registry querying activities that focus on extracting sensitive information. Specifically, look for the creation of processes associated with the Windows Registry Editor tool, reg.exe. The detection mechanism should trigger alerts when reg.exe processes are observed executing commands that involve querying ('query') the registry with specific parameters targeting string values ('REG_SZ'), conducted in a recursive manner ('/s'), and filtering for types ('/t'). Additionally, detection should be honed in on commands that attempt to search ('/f') within critical registry hives such as HKLM (HKEY_LOCAL_MACHINE) and HKCU (HKEY_CURRENT_USER), including specific paths known to store configurations related to software like PuTTY under HKCU\\Software\\SimonTatham\\PuTTY\\Sessions. Such activities are indicative of attempts by adversaries to retrieve insecurely stored credentials from the registry, which could be used to facilitate further attacks or gains. The level of alert for this detection is considered medium, indicating a noteworthy severity that should prompt investigation, despite the potential for unknown false positives. This approach aligns with the methodology to secure systems against attackers leveraging registry information, particularly focusing on the credential access technique through registry data mining."
    }
  },
  {
    "instruction": "Please help me detect the following: Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe",
    "context": "",
    "output": "Sure!\nIn order to detect executables in the Downloads folder likely created with py2exe and lacking FileVersion, Description, Product, and Company metadata, you should focus on monitoring Windows process creation logs. Look specifically for instances where an executable in the Downloads folder is initiated but lacks details in its metadata fields such as Description, FileVersion, Product, or Company. This means any process creation event where the executable's metadata fields are queried but return questionable or empty values (represented by '?') should be flagged. This detection effort concentrates on the 'Image' field containing a path that includes '\\Downloads\\', indicating the executable was launched from the Downloads directory.\n\nIt is essential to capture the command line used to initiate the process and, if available, the parent process's command line. This information can be crucial for further investigation, especially in understanding the context or the chain of events leading to the execution of the suspicious file.\n\nBe aware of potential false positives, as not all executables lacking these metadata details and located in the Downloads folder are malicious. The alert level for this type of detection is set to medium, indicating a balanced approach between sensitivity and the potential for false alarms.\n\nMonitoring should be attuned to these specifics to effectively identify possibly malicious activity, especially activities that align with tactics and techniques associated with delivery and execution phases of an attack, without directly referencing predefined attack patterns. This approach aims to capture a broad spectrum of potentially malicious behaviors tied to executables that might have been compiled using utilities like py2exe, which could evade basic metadata analysis.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe",
      "answer": "In order to detect executables in the Downloads folder likely created with py2exe and lacking FileVersion, Description, Product, and Company metadata, you should focus on monitoring Windows process creation logs. Look specifically for instances where an executable in the Downloads folder is initiated but lacks details in its metadata fields such as Description, FileVersion, Product, or Company. This means any process creation event where the executable's metadata fields are queried but return questionable or empty values (represented by '?') should be flagged. This detection effort concentrates on the 'Image' field containing a path that includes '\\Downloads\\', indicating the executable was launched from the Downloads directory.\n\nIt is essential to capture the command line used to initiate the process and, if available, the parent process's command line. This information can be crucial for further investigation, especially in understanding the context or the chain of events leading to the execution of the suspicious file.\n\nBe aware of potential false positives, as not all executables lacking these metadata details and located in the Downloads folder are malicious. The alert level for this type of detection is set to medium, indicating a balanced approach between sensitivity and the potential for false alarms.\n\nMonitoring should be attuned to these specifics to effectively identify possibly malicious activity, especially activities that align with tactics and techniques associated with delivery and execution phases of an attack, without directly referencing predefined attack patterns. This approach aims to capture a broad spectrum of potentially malicious behaviors tied to executables that might have been compiled using utilities like py2exe, which could evade basic metadata analysis."
    }
  },
  {
    "instruction": "How to detect: This method detects a service install of malicious services mentioned in Carbon Paper - Turla report by ESET",
    "context": "",
    "output": "In order to detect a service installation of malicious services mentioned in the Carbon Paper - Turla report by ESET, you should focus on monitoring specific event logs within Windows systems. Look for logs generated by the Service Control Manager with an Event ID of 7045. This particular event ID is associated with service installation activities. Specifically, you should pay attention to the installation of services named 'srservice', 'ipvpn', or 'hkmsvc'. The presence of these service names in the logs could indicate the installation of malicious services as highlighted in the Carbon Paper - Turla report. It\u2019s important to note that while monitoring for these indicators, some legitimate activities might be erroneously flagged as malicious (although such occurrences are marked as unknown), and the overall severity of finding such activities is considered high. This monitoring strategy focuses on identifying tactics and techniques used by attackers to persist on a system or network by installing new services, which can be crucial for preventing further unauthorized activities or damage.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This method detects a service install of malicious services mentioned in Carbon Paper - Turla report by ESET",
      "answer": "In order to detect a service installation of malicious services mentioned in the Carbon Paper - Turla report by ESET, you should focus on monitoring specific event logs within Windows systems. Look for logs generated by the Service Control Manager with an Event ID of 7045. This particular event ID is associated with service installation activities. Specifically, you should pay attention to the installation of services named 'srservice', 'ipvpn', or 'hkmsvc'. The presence of these service names in the logs could indicate the installation of malicious services as highlighted in the Carbon Paper - Turla report. It\u2019s important to note that while monitoring for these indicators, some legitimate activities might be erroneously flagged as malicious (although such occurrences are marked as unknown), and the overall severity of finding such activities is considered high. This monitoring strategy focuses on identifying tactics and techniques used by attackers to persist on a system or network by installing new services, which can be crucial for preventing further unauthorized activities or damage."
    }
  },
  {
    "instruction": "How can I detect: filename indicators that contain a specific typo seen used by the Small Sieve malware.",
    "context": "",
    "output": "In order to detect filename indicators that contain a specific typo seen used by the Small Sieve malware, you should: focus on monitoring Windows file events, specifically looking out for file names that navigate through the user directories and into either the Roaming or Local subfolders within the AppData directory. Key to identifying potential intrusions by the Small Sieve malware is the presence of a distinctive typo where 'Microsoft' is misspelled as 'Microsift'. Additionally, lookout for filenames that culminate precisely with '\\AppData\\Local\\MicrosoftWindowsOutlookDataPlus.txt', as this is a direct indicator of compromise. The criteria for this detection are either the presence of the typo in file paths that traverse through the specified user directories or the specific IOC filename. It is important to consider this rule to have a high level of accuracy with unlikely chances of false positives, thereby necessitating immediate investigation upon alerts. This approach is aligned with identifying tactics and techniques associated with malware deployment and execution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "filename indicators that contain a specific typo seen used by the Small Sieve malware.",
      "answer": "In order to detect filename indicators that contain a specific typo seen used by the Small Sieve malware, you should: focus on monitoring Windows file events, specifically looking out for file names that navigate through the user directories and into either the Roaming or Local subfolders within the AppData directory. Key to identifying potential intrusions by the Small Sieve malware is the presence of a distinctive typo where 'Microsoft' is misspelled as 'Microsift'. Additionally, lookout for filenames that culminate precisely with '\\AppData\\Local\\MicrosoftWindowsOutlookDataPlus.txt', as this is a direct indicator of compromise. The criteria for this detection are either the presence of the typo in file paths that traverse through the specified user directories or the specific IOC filename. It is important to consider this rule to have a high level of accuracy with unlikely chances of false positives, thereby necessitating immediate investigation upon alerts. This approach is aligned with identifying tactics and techniques associated with malware deployment and execution."
    }
  },
  {
    "instruction": "Please help me detect the following: installation of RTCore service. Which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse",
    "context": "",
    "output": "Sure!\nIn order to detect the installation of RTCore service, which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse, you should: Monitor Windows system logs for entries that indicate the creation or modification of a service. Specifically, look for logs sourced from the Service Control Manager with an EventID of 7045, signaling a service was installed. Pay special attention to the service named 'RTCore64'. This particular service installation event is significant as it might be related to the abuse of a vulnerable driver associated with Micro-Star MSI Afterburner, a popular graphics card overclocking tool. This type of activity could potentially be utilized by attackers to gain unauthorized access or privileges within a system. Be mindful that some detections might be false positives, as not all instances of this service installation are malicious. Nonetheless, such events should be considered highly suspicious and warrant further investigation due to their potential security implications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "installation of RTCore service. Which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse",
      "answer": "In order to detect the installation of RTCore service, which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse, you should: Monitor Windows system logs for entries that indicate the creation or modification of a service. Specifically, look for logs sourced from the Service Control Manager with an EventID of 7045, signaling a service was installed. Pay special attention to the service named 'RTCore64'. This particular service installation event is significant as it might be related to the abuse of a vulnerable driver associated with Micro-Star MSI Afterburner, a popular graphics card overclocking tool. This type of activity could potentially be utilized by attackers to gain unauthorized access or privileges within a system. Be mindful that some detections might be false positives, as not all instances of this service installation are malicious. Nonetheless, such events should be considered highly suspicious and warrant further investigation due to their potential security implications."
    }
  },
  {
    "instruction": "Can you explain how to detect: shellshock expressions in log files",
    "context": "",
    "output": "Certainly!\n\nIn order to detect shellshock expressions in log files, you should monitor log files generated by Linux systems for specific patterns that indicate a shellshock attack. These patterns are unique sequences of characters that exploit the shellshock vulnerability, specifically:\n\n- '(){:;};'\n- '() {:;};'\n- '() { :;};'\n- '() { :; };'\n\nThese expressions are indicative of attempts to exploit the shellshock vulnerability, which allows attackers to execute arbitrary commands on the affected system. Monitoring for these expressions in logs will help identify potential shellshock attack attempts. It is important to note that there may be unknown false positives, indicating situations where these patterns might be logged without malicious intent. The severity level of detecting these patterns is considered high due to the potential impact of shellshock exploits.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "shellshock expressions in log files",
      "answer": "In order to detect shellshock expressions in log files, you should monitor log files generated by Linux systems for specific patterns that indicate a shellshock attack. These patterns are unique sequences of characters that exploit the shellshock vulnerability, specifically:\n\n- '(){:;};'\n- '() {:;};'\n- '() { :;};'\n- '() { :; };'\n\nThese expressions are indicative of attempts to exploit the shellshock vulnerability, which allows attackers to execute arbitrary commands on the affected system. Monitoring for these expressions in logs will help identify potential shellshock attack attempts. It is important to note that there may be unknown false positives, indicating situations where these patterns might be logged without malicious intent. The severity level of detecting these patterns is considered high due to the potential impact of shellshock exploits."
    }
  },
  {
    "instruction": "How to detect: creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes. This behavior was seen common across different Devil Bait samples and stages as described by the NCSC",
    "context": "",
    "output": "In order to detect the creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes, which was seen as a common behavior across different Devil Bait samples and stages as described by the NCSC, you should: Focus on monitoring file events within Windows environments. Particularly, you need to watch for the creation of \".txt\" and \".xml\" files in directories under the \"\\AppData\\Roaming\\Microsoft\" path. The processes of interest that could indicate malicious activity if they are creating these files are 'schtasks.exe', 'wscript.exe', and 'mshta.exe'. These executables are generally legitimate Windows components but can be misused by attackers for malicious purposes. The detection strategy is highly reliable with a low chance of false positives, emphasizing its importance in proactively identifying potential stages of a Devil Bait attack campaign.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes. This behavior was seen common across different Devil Bait samples and stages as described by the NCSC",
      "answer": "In order to detect the creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes, which was seen as a common behavior across different Devil Bait samples and stages as described by the NCSC, you should: Focus on monitoring file events within Windows environments. Particularly, you need to watch for the creation of \".txt\" and \".xml\" files in directories under the \"\\AppData\\Roaming\\Microsoft\" path. The processes of interest that could indicate malicious activity if they are creating these files are 'schtasks.exe', 'wscript.exe', and 'mshta.exe'. These executables are generally legitimate Windows components but can be misused by attackers for malicious purposes. The detection strategy is highly reliable with a low chance of false positives, emphasizing its importance in proactively identifying potential stages of a Devil Bait attack campaign."
    }
  },
  {
    "instruction": "How can I detect: external diskdrives or plugged in USB devices, EventID 6416 on Windows 10 or later",
    "context": "",
    "output": "In order to detect external disk drives or plugged in USB devices, EventID 6416 on Windows 10 or later, you should: Focus on monitoring security logs from Windows-operated systems, specifically looking for events that indicate the detection of an external disk drive or a USB mass storage device. There are two primary detection methods to be aware of. First, watch for logs with EventID 6416 that also mention 'DiskDrive' in the ClassName attribute. This signals that a new disk drive has been detected by the system's security measures. Alternatively, look for logs that specifically describe the new hardware with 'USB Mass Storage Device' in the DeviceDescription. This second method does not rely on the EventID and directly addresses the presence of USB mass storage devices.\n\nBe aware of possible false positives, which may include legitimate administrative activities where external devices are intentionally connected for maintenance or data transfer purposes. Given these circumstances are common, this type of monitoring is considered to have a low-level alert rating. However, it's crucial for cybersecurity defenses as it directly relates to tactics and techniques involving the initial access of systems through external devices, potentially used for delivering malware or stealing information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "external diskdrives or plugged in USB devices, EventID 6416 on Windows 10 or later",
      "answer": "In order to detect external disk drives or plugged in USB devices, EventID 6416 on Windows 10 or later, you should: Focus on monitoring security logs from Windows-operated systems, specifically looking for events that indicate the detection of an external disk drive or a USB mass storage device. There are two primary detection methods to be aware of. First, watch for logs with EventID 6416 that also mention 'DiskDrive' in the ClassName attribute. This signals that a new disk drive has been detected by the system's security measures. Alternatively, look for logs that specifically describe the new hardware with 'USB Mass Storage Device' in the DeviceDescription. This second method does not rely on the EventID and directly addresses the presence of USB mass storage devices.\n\nBe aware of possible false positives, which may include legitimate administrative activities where external devices are intentionally connected for maintenance or data transfer purposes. Given these circumstances are common, this type of monitoring is considered to have a low-level alert rating. However, it's crucial for cybersecurity defenses as it directly relates to tactics and techniques involving the initial access of systems through external devices, potentially used for delivering malware or stealing information."
    }
  },
  {
    "instruction": "How to detect: creation of files with an executable or script extension by an Office application.",
    "context": "",
    "output": "In order to detect the creation of files with an executable or script extension by an Office application, you should: Monitor Windows file events for specific behaviors associated with Office applications creating potentially malicious files. Focus on instances where executable file names end with paths related to Office applications (Excel, Access, Publisher, PowerPoint, Visio, or Word). Additionally, be alert for the creation of files ending in extensions typically associated with executable or script files, such as '.bat', '.cmd', '.com', '.dll', '.exe', '.hta', '.ocx', '.proj', '.ps1', '.scf', '.scr', '.sys', '.vbe', '.vbs', '.wsf', or '.wsh'. Exclude file creation events in certain directories that are known to trigger false positives, especially those involving temporary directories used by web services or the WebEx application, and focus instead on unusual file creation events in locations not typically associated with benign activity, such as the 'assembly\\tmp\\' directory inside the user's local AppData. This helps in pinpointing potentially malicious activities where Office applications may be misused to deliver or execute malware within a system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of files with an executable or script extension by an Office application.",
      "answer": "In order to detect the creation of files with an executable or script extension by an Office application, you should: Monitor Windows file events for specific behaviors associated with Office applications creating potentially malicious files. Focus on instances where executable file names end with paths related to Office applications (Excel, Access, Publisher, PowerPoint, Visio, or Word). Additionally, be alert for the creation of files ending in extensions typically associated with executable or script files, such as '.bat', '.cmd', '.com', '.dll', '.exe', '.hta', '.ocx', '.proj', '.ps1', '.scf', '.scr', '.sys', '.vbe', '.vbs', '.wsf', or '.wsh'. Exclude file creation events in certain directories that are known to trigger false positives, especially those involving temporary directories used by web services or the WebEx application, and focus instead on unusual file creation events in locations not typically associated with benign activity, such as the 'assembly\\tmp\\' directory inside the user's local AppData. This helps in pinpointing potentially malicious activities where Office applications may be misused to deliver or execute malware within a system."
    }
  },
  {
    "instruction": "Please help me detect the following: use of the spoolss named pipe over SMB. This can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled.",
    "context": "",
    "output": "Sure!\nIn order to detect the use of the spoolss named pipe over SMB, which can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled, you should: \n\nMonitor Windows security event log for event ID 5145. This event ID is significant as it logs attempts to access shared objects over the network. Specifically, look for access attempts to the IPC$ share (`\\\\*\\IPC$`) where the `RelativeTargetName` involved is `spoolss`. The IPC$ share is a special administrative share that exists in all versions of Windows, used for inter-process communication (IPC), and accessing it with the intention of interacting with `spoolss` suggests an attempt to illicitly trigger NTLM authentication through the printer spooler service. \n\nBe aware that domain controllers that also serve as printer servers may legitimately access the `spoolss` named pipe over SMB, which can result in false positives. Thus, such activity should not be immediately considered malicious without further investigation. The security level for this kind of detection is medium, indicating a balanced approach towards potential threat detection and avoidance of excessive false positives. \n\nTagging this activity involves associating it with relevant MITRE ATT&CK tactics and techniques, which in this context would likely include \"Lateral Movement\" and \"Execution\" due to the nature of using SMB for execution or spreading within a network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of the spoolss named pipe over SMB. This can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled.",
      "answer": "In order to detect the use of the spoolss named pipe over SMB, which can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled, you should: \n\nMonitor Windows security event log for event ID 5145. This event ID is significant as it logs attempts to access shared objects over the network. Specifically, look for access attempts to the IPC$ share (`\\\\*\\IPC$`) where the `RelativeTargetName` involved is `spoolss`. The IPC$ share is a special administrative share that exists in all versions of Windows, used for inter-process communication (IPC), and accessing it with the intention of interacting with `spoolss` suggests an attempt to illicitly trigger NTLM authentication through the printer spooler service. \n\nBe aware that domain controllers that also serve as printer servers may legitimately access the `spoolss` named pipe over SMB, which can result in false positives. Thus, such activity should not be immediately considered malicious without further investigation. The security level for this kind of detection is medium, indicating a balanced approach towards potential threat detection and avoidance of excessive false positives. \n\nTagging this activity involves associating it with relevant MITRE ATT&CK tactics and techniques, which in this context would likely include \"Lateral Movement\" and \"Execution\" due to the nature of using SMB for execution or spreading within a network."
    }
  },
  {
    "instruction": "How can I detect: Windows service to be stopped",
    "context": "",
    "output": "In order to detect a Windows service being stopped, you should focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where the tools 'sc.exe', 'net.exe', or 'net1.exe', and PowerShell or 'pwsh.exe' are used, which are common utilities for service management on Windows. These utilities might be invoked in commands aiming to stop a service, as indicated by the presence of ' stop ' in their command line arguments.\n\nHowever, it's crucial to exclude commands known to be benign, such as stopping the Kaspersky Security Center Web Console Message Queue or the Logitech LGHUB Updater Service, which are legitimate administration activities. Also, consider ignoring commands executed by users with 'AUTHORI' or 'AUTORI' in their user names, as this could cover commands issued in different language settings by authorized personnel.\n\nThe detections should be based on the presence of the specified filenames or command-line patterns that indicate the attempt to stop a service, excluding the known false positives such as service management during software upgrades or removals. Pay attention to the records with fields like ComputerName, User, and CommandLine for context around the detected activity.\n\nThis approach aligns with strategies for identifying potentially malicious activity related to service stopping, which might be indicative of an adversary\u2019s attempt to disable security features or other critical services as part of a broader attack on a Windows environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Windows service to be stopped",
      "answer": "In order to detect a Windows service being stopped, you should focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where the tools 'sc.exe', 'net.exe', or 'net1.exe', and PowerShell or 'pwsh.exe' are used, which are common utilities for service management on Windows. These utilities might be invoked in commands aiming to stop a service, as indicated by the presence of ' stop ' in their command line arguments.\n\nHowever, it's crucial to exclude commands known to be benign, such as stopping the Kaspersky Security Center Web Console Message Queue or the Logitech LGHUB Updater Service, which are legitimate administration activities. Also, consider ignoring commands executed by users with 'AUTHORI' or 'AUTORI' in their user names, as this could cover commands issued in different language settings by authorized personnel.\n\nThe detections should be based on the presence of the specified filenames or command-line patterns that indicate the attempt to stop a service, excluding the known false positives such as service management during software upgrades or removals. Pay attention to the records with fields like ComputerName, User, and CommandLine for context around the detected activity.\n\nThis approach aligns with strategies for identifying potentially malicious activity related to service stopping, which might be indicative of an adversary\u2019s attempt to disable security features or other critical services as part of a broader attack on a Windows environment."
    }
  },
  {
    "instruction": "How can I detect: use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine",
    "context": "",
    "output": "In order to detect the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine, you should monitor process creation logs within Windows systems. Focus on identifying command lines that contain specific web request related commands or PowerShell cmdlets such as '[System.Net.WebRequest]::create', 'curl ', 'Invoke-RestMethod', 'Invoke-WebRequest', 'iwr ', 'Net.WebClient', 'Resume-BitsTransfer', 'Start-BitsTransfer', 'wget ', and 'WinHttp.WinHttpRequest'. These indicators might signal attempts to communicate with external web resources, potentially for data exfiltration, command and control, or downloading of malicious payloads. Be aware of legitimate uses of these commands, like the use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer, which could lead to potential false positives. This analysis is set to a medium urgency level, indicating a balanced approach to scrutinizing these activities without assuming immediate malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine",
      "answer": "In order to detect the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine, you should monitor process creation logs within Windows systems. Focus on identifying command lines that contain specific web request related commands or PowerShell cmdlets such as '[System.Net.WebRequest]::create', 'curl ', 'Invoke-RestMethod', 'Invoke-WebRequest', 'iwr ', 'Net.WebClient', 'Resume-BitsTransfer', 'Start-BitsTransfer', 'wget ', and 'WinHttp.WinHttpRequest'. These indicators might signal attempts to communicate with external web resources, potentially for data exfiltration, command and control, or downloading of malicious payloads. Be aware of legitimate uses of these commands, like the use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer, which could lead to potential false positives. This analysis is set to a medium urgency level, indicating a balanced approach to scrutinizing these activities without assuming immediate malicious intent."
    }
  },
  {
    "instruction": "How can I detect: suspicious download using the BITS client from a FQDN that is unusual. Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads.",
    "context": "",
    "output": "In order to detect a suspicious download using the BITS client from a FQDN that is unusual, which adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads, you should: Monitor Windows Background Intelligent Transfer Service (BITS) clients for the event with ID 16403. This event ID is critical for identifying when a BITS client initiates a download. However, not all downloads are malicious, so to distinguish potential threats, examine the RemoteName field for URLs that do not contain common legitimate domains like '.azureedge.net', '.com', '.sfx.ms', or 'download.mozilla.org'. These domains are typically associated with legitimate downloads, hence any BITS job download from domains outside this list might be considered suspicious. It's important to note the medium level of caution advised due to possible false positives, especially since this detection criterion does not exclude other legitimate top-level domains (TLDs) like \".org\" or \".net\". To refine the accuracy, you might need to integrate additional filters based on the specifics of the environment and known benign software that utilizes BITS for updates or downloads. This approach aligns with understanding tactics and techniques related to adversary use of BITS for malicious purposes, without specifically relying on domain names alone for detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious download using the BITS client from a FQDN that is unusual. Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads.",
      "answer": "In order to detect a suspicious download using the BITS client from a FQDN that is unusual, which adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads, you should: Monitor Windows Background Intelligent Transfer Service (BITS) clients for the event with ID 16403. This event ID is critical for identifying when a BITS client initiates a download. However, not all downloads are malicious, so to distinguish potential threats, examine the RemoteName field for URLs that do not contain common legitimate domains like '.azureedge.net', '.com', '.sfx.ms', or 'download.mozilla.org'. These domains are typically associated with legitimate downloads, hence any BITS job download from domains outside this list might be considered suspicious. It's important to note the medium level of caution advised due to possible false positives, especially since this detection criterion does not exclude other legitimate top-level domains (TLDs) like \".org\" or \".net\". To refine the accuracy, you might need to integrate additional filters based on the specifics of the environment and known benign software that utilizes BITS for updates or downloads. This approach aligns with understanding tactics and techniques related to adversary use of BITS for malicious purposes, without specifically relying on domain names alone for detection."
    }
  },
  {
    "instruction": "Can you explain how to detect: file writes of WMI script event consumer",
    "context": "",
    "output": "Certainly!\n\nIn order to detect file writes of WMI script event consumer, you should: Monitor Windows file event logs for any activities involving the specific image path 'C:\\WINDOWS\\system32\\wbem\\scrcons.exe'. This image path is associated with the Windows Management Instrumentation (WMI) script event consumer process, which can be indicative of malicious activity when files are written or modified in this directory. It's important to note that there might be false positives, such as legitimate software operations like the Dell Power Manager performing similar activities, specifically if the activity originates from 'C:\\Program Files\\Dell\\PowerManager\\DpmPowerPlanSetup.exe'. This monitoring task is considered to have a high level of importance due to the potential security implications of unauthorized file writes in the WMI script event consumer directory.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "file writes of WMI script event consumer",
      "answer": "In order to detect file writes of WMI script event consumer, you should: Monitor Windows file event logs for any activities involving the specific image path 'C:\\WINDOWS\\system32\\wbem\\scrcons.exe'. This image path is associated with the Windows Management Instrumentation (WMI) script event consumer process, which can be indicative of malicious activity when files are written or modified in this directory. It's important to note that there might be false positives, such as legitimate software operations like the Dell Power Manager performing similar activities, specifically if the activity originates from 'C:\\Program Files\\Dell\\PowerManager\\DpmPowerPlanSetup.exe'. This monitoring task is considered to have a high level of importance due to the potential security implications of unauthorized file writes in the WMI script event consumer directory."
    }
  },
  {
    "instruction": "Can you explain how to detect: PowerShell called from an executable by the version mismatch method",
    "context": "",
    "output": "Certainly!\n\nIn order to detect PowerShell called from an executable by the version mismatch method, you should: Monitor Windows PowerShell classic start events, specifically focusing on instances where there is a mismatch in the versions of the PowerShell engine and host. Look for situations where the EngineVersion starts with '2.', '4.', or '5.', while simultaneously the HostVersion begins with '3.'. This detection is based on the premise that legitimate PowerShell sessions typically have matching or compatible engine and host versions, and a significant discrepancy, as described, could indicate an attempt to exploit or leverage PowerShell for malicious purposes. Being a high-level alert, any matches should be investigated thoroughly, although it is recognized that there may be unknown scenarios leading to false positives. This method ties into broader cybersecurity frameworks by addressing techniques commonly used in Initial Access, Execution, and Defense Evasion phases of an attack, aligning with tactics and techniques such as Execution through API, User Execution, and Scripting.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell called from an executable by the version mismatch method",
      "answer": "In order to detect PowerShell called from an executable by the version mismatch method, you should: Monitor Windows PowerShell classic start events, specifically focusing on instances where there is a mismatch in the versions of the PowerShell engine and host. Look for situations where the EngineVersion starts with '2.', '4.', or '5.', while simultaneously the HostVersion begins with '3.'. This detection is based on the premise that legitimate PowerShell sessions typically have matching or compatible engine and host versions, and a significant discrepancy, as described, could indicate an attempt to exploit or leverage PowerShell for malicious purposes. Being a high-level alert, any matches should be investigated thoroughly, although it is recognized that there may be unknown scenarios leading to false positives. This method ties into broader cybersecurity frameworks by addressing techniques commonly used in Initial Access, Execution, and Defense Evasion phases of an attack, aligning with tactics and techniques such as Execution through API, User Execution, and Scripting."
    }
  },
  {
    "instruction": "How to detect: creation of a new service (kernel driver) with the type \"kernel\"",
    "context": "",
    "output": "In order to detect the creation of a new service (kernel driver) with the type \"kernel\", you should: Look for the creation of processes on Windows systems where the process is ending with '\\sc.exe', indicating the Service Control Manager is used. The command line arguments should include 'create' or 'config', pointing towards the creation or configuration of a service, and must include 'binPath', 'type', and 'kernel' all together. These conditions suggest an attempt to install a kernel driver, which is a powerful mechanism that can be abused by attackers to execute code at a low level within the operating system. Note that there may be rare legitimate instances of installing kernel drivers via sc.exe, but generally, this activity should be scrutinized. The focus is mainly on monitoring process creation logs to catch such potentially malicious behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new service (kernel driver) with the type \"kernel\"",
      "answer": "In order to detect the creation of a new service (kernel driver) with the type \"kernel\", you should: Look for the creation of processes on Windows systems where the process is ending with '\\sc.exe', indicating the Service Control Manager is used. The command line arguments should include 'create' or 'config', pointing towards the creation or configuration of a service, and must include 'binPath', 'type', and 'kernel' all together. These conditions suggest an attempt to install a kernel driver, which is a powerful mechanism that can be abused by attackers to execute code at a low level within the operating system. Note that there may be rare legitimate instances of installing kernel drivers via sc.exe, but generally, this activity should be scrutinized. The focus is mainly on monitoring process creation logs to catch such potentially malicious behavior."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution from an Alternate Data Stream (ADS), where adversaries may use NTFS file attributes to hide their malicious data in order to evade detection, you should monitor process creation logs on Windows systems for specific command-line patterns. Look for instances where the command line contains 'txt:', which indicates potential access or interaction with an alternate data stream. Additionally, be alert for command lines that combine certain tools and parameters, such as:\n\n- Use of 'type ' along with redirection '> ', which may suggest an attempt to display or redirect the contents of a file, possibly involving an ADS.\n- Execution involving 'makecab ' followed by '.cab', which could indicate compression of files into a Cabinet file, potentially to disguise malicious activity.\n- Commands starting with 'reg ' followed by ' export ', suggesting attempts to export registry keys, possibly for analysis or manipulation outside of standard registry tools.\n- Utilization of 'regedit ' with ' /E ', indicating export operations via Registry Editor, again potentially for malicious manipulation.\n- Execution of 'esentutl ' accompanied by '/y', '/d', and '/o' flags, which points to attempts to copy, defragment, or repair Extensible Storage Engine databases, potentially indicating more sophisticated adversary behavior involving data manipulation or extraction.\n\nIn essence, by monitoring for these specific command-line activities within process creation events, one can uncover potential misuse of alternate data streams by adversaries aiming to execute or hide malicious data, supporting efforts to evade detection. This monitoring approach crucially targets a range of tools and operations that could be exploited for such purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection",
      "answer": "In order to detect execution from an Alternate Data Stream (ADS), where adversaries may use NTFS file attributes to hide their malicious data in order to evade detection, you should monitor process creation logs on Windows systems for specific command-line patterns. Look for instances where the command line contains 'txt:', which indicates potential access or interaction with an alternate data stream. Additionally, be alert for command lines that combine certain tools and parameters, such as:\n\n- Use of 'type ' along with redirection '> ', which may suggest an attempt to display or redirect the contents of a file, possibly involving an ADS.\n- Execution involving 'makecab ' followed by '.cab', which could indicate compression of files into a Cabinet file, potentially to disguise malicious activity.\n- Commands starting with 'reg ' followed by ' export ', suggesting attempts to export registry keys, possibly for analysis or manipulation outside of standard registry tools.\n- Utilization of 'regedit ' with ' /E ', indicating export operations via Registry Editor, again potentially for malicious manipulation.\n- Execution of 'esentutl ' accompanied by '/y', '/d', and '/o' flags, which points to attempts to copy, defragment, or repair Extensible Storage Engine databases, potentially indicating more sophisticated adversary behavior involving data manipulation or extraction.\n\nIn essence, by monitoring for these specific command-line activities within process creation events, one can uncover potential misuse of alternate data streams by adversaries aiming to execute or hide malicious data, supporting efforts to evade detection. This monitoring approach crucially targets a range of tools and operations that could be exploited for such purposes."
    }
  },
  {
    "instruction": "Please help me detect the following: Automatically lock workstation sessions after a standard period of inactivity.\nThe case is not applicable for Unix OS. Supported OS - Windows 2008 R2 and 7, Windows 2012 R2 and 8.1, Windows 2016 and 10 Windows Server 2019.\n",
    "context": "",
    "output": "Sure!\nIn order to automatically lock workstation sessions after a standard period of inactivity, you should: Monitor security logs from Windows-based operating systems, specifically looking for Event ID 4800. This event is indicative of a workstation being locked, either due to a user manually locking it or the system automatically doing so after a predetermined period of inactivity. This monitoring is relevant for a range of Windows versions including Windows 2008 R2 and 7, Windows 2012 R2 and 8.1, Windows 2016 and 10, as well as Windows Server 2019. Note that this practice targets enhancing system security by detecting when sessions are secured, thus reducing the window of opportunity for unauthorized access. It's important to consider that instances triggering this event might not always represent security-relevant actions, as false positives are unknown and the severity level of this rule is considered low.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Automatically lock workstation sessions after a standard period of inactivity.\nThe case is not applicable for Unix OS. Supported OS - Windows 2008 R2 and 7, Windows 2012 R2 and 8.1, Windows 2016 and 10 Windows Server 2019.\n",
      "answer": "In order to automatically lock workstation sessions after a standard period of inactivity, you should: Monitor security logs from Windows-based operating systems, specifically looking for Event ID 4800. This event is indicative of a workstation being locked, either due to a user manually locking it or the system automatically doing so after a predetermined period of inactivity. This monitoring is relevant for a range of Windows versions including Windows 2008 R2 and 7, Windows 2012 R2 and 8.1, Windows 2016 and 10, as well as Windows Server 2019. Note that this practice targets enhancing system security by detecting when sessions are secured, thus reducing the window of opportunity for unauthorized access. It's important to consider that instances triggering this event might not always represent security-relevant actions, as false positives are unknown and the severity level of this rule is considered low."
    }
  },
  {
    "instruction": "How can I detect: use of a scanner by zerosum0x0 that discovers targets vulnerable to  CVE-2019-0708 RDP RCE aka BlueKeep",
    "context": "",
    "output": "In order to detect the use of a scanner by zerosum0x0 that discovers targets vulnerable to CVE-2019-0708 RDP RCE aka BlueKeep, you should: focus on monitoring Windows security event logs, specifically for events with the ID 4625 which represent failed login attempts. Particularly, you should watch for attempts that involve the username \"AAAAAAA\". This specific scenario is indicative of a scanning activity aiming to identify systems susceptible to the BlueKeep vulnerability by using a particular signature approach in scanning attempts. Considering the event's significance, false positives are deemed unlikely, indicating a high level of confidence in the correlation between detecting such events and the presence of scanning activity targeting this vulnerability.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of a scanner by zerosum0x0 that discovers targets vulnerable to  CVE-2019-0708 RDP RCE aka BlueKeep",
      "answer": "In order to detect the use of a scanner by zerosum0x0 that discovers targets vulnerable to CVE-2019-0708 RDP RCE aka BlueKeep, you should: focus on monitoring Windows security event logs, specifically for events with the ID 4625 which represent failed login attempts. Particularly, you should watch for attempts that involve the username \"AAAAAAA\". This specific scenario is indicative of a scanning activity aiming to identify systems susceptible to the BlueKeep vulnerability by using a particular signature approach in scanning attempts. Considering the event's significance, false positives are deemed unlikely, indicating a high level of confidence in the correlation between detecting such events and the presence of scanning activity targeting this vulnerability."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the \"Add-AppxPackage\" or it's alias \"Add-AppPackage\" to install unsigned AppX packages",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of the \"Add-AppxPackage\" or its alias \"Add-AppPackage\" to install unsigned AppX packages, you should: Monitor Windows PowerShell script logs to identify any instances where scripts include the commands 'Add-AppPackage ' or 'Add-AppxPackage ', especially when these commands are combined with the flag ' -AllowUnsigned'. This monitoring is predicated on having Script Block Logging enabled to capture PowerShell script activities. It is important to be cautious as there may be legitimate reasons for installing unsigned packages, such as during testing phases. The risk level associated with this activity is deemed medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Add-AppxPackage\" or it's alias \"Add-AppPackage\" to install unsigned AppX packages",
      "answer": "In order to detect usage of the \"Add-AppxPackage\" or its alias \"Add-AppPackage\" to install unsigned AppX packages, you should: Monitor Windows PowerShell script logs to identify any instances where scripts include the commands 'Add-AppPackage ' or 'Add-AppxPackage ', especially when these commands are combined with the flag ' -AllowUnsigned'. This monitoring is predicated on having Script Block Logging enabled to capture PowerShell script activities. It is important to be cautious as there may be legitimate reasons for installing unsigned packages, such as during testing phases. The risk level associated with this activity is deemed medium."
    }
  },
  {
    "instruction": "Please help me detect the following: persistence registry keys for Recycle Bin",
    "context": "",
    "output": "Sure!\nIn order to detect persistence registry keys for Recycle Bin, you should monitor registry events in Windows systems for the creation or modification of specific keys that are known to be utilized for maintaining persistence mechanisms. Specifically, look out for events where a registry key is renamed to include '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open', as this indicates an attempt to manipulate the Recycle Bin's functionality for persistent access. Additionally, monitor for events where the default command for the Recycle Bin (identified through the registry path '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\\(Default)') is set or altered. Detecting these activities in the registry can signify that an attacker is trying to establish persistence on the system by leveraging the Recycle Bin, a technique that can allow malicious software or activities to remain undetected by conventional security measures. As no specific false positives have been defined apart from unknown ones, it's crucial to analyze these detections in the context they occur to understand their legitimacy. ",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "persistence registry keys for Recycle Bin",
      "answer": "In order to detect persistence registry keys for Recycle Bin, you should monitor registry events in Windows systems for the creation or modification of specific keys that are known to be utilized for maintaining persistence mechanisms. Specifically, look out for events where a registry key is renamed to include '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open', as this indicates an attempt to manipulate the Recycle Bin's functionality for persistent access. Additionally, monitor for events where the default command for the Recycle Bin (identified through the registry path '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\\(Default)') is set or altered. Detecting these activities in the registry can signify that an attacker is trying to establish persistence on the system by leveraging the Recycle Bin, a technique that can allow malicious software or activities to remain undetected by conventional security measures. As no specific false positives have been defined apart from unknown ones, it's crucial to analyze these detections in the context they occur to understand their legitimacy. "
    }
  },
  {
    "instruction": "Please help me detect the following: SQL error messages that indicate probing for an injection attack",
    "context": "",
    "output": "Sure!\nIn order to detect SQL error messages that indicate probing for an injection attack, you should monitor application error logs, specifically from SQL databases including Oracle, MySQL, SQL Server, and SQLite. These logs must be of LOG_LEVEL ERROR or above. The key error messages to watch for include:\n\n- For Oracle, look for messages stating \"quoted string not properly terminated\".\n- In MySQL environments, the error message \"You have an error in your SQL syntax\" should raise alerts.\n- On SQL Server, an \"Unclosed quotation mark\" is indicative of possible SQL injection attempts.\n- SQLite error messages such as \"near \"*\": syntax error\" and \"SELECTs to the left and right of UNION do not have the same number of result columns\" are red flags for potential injection probing.\n\nBe mindful of false positives, such as a syntax error in MySQL queries that might occur in non-dynamic (thus, safe) queries if there is an empty IN() clause. This high-level monitoring approach is essential for identifying attempts to exploit SQL injections, which can compromise the integrity and availability of your database systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "SQL error messages that indicate probing for an injection attack",
      "answer": "In order to detect SQL error messages that indicate probing for an injection attack, you should monitor application error logs, specifically from SQL databases including Oracle, MySQL, SQL Server, and SQLite. These logs must be of LOG_LEVEL ERROR or above. The key error messages to watch for include:\n\n- For Oracle, look for messages stating \"quoted string not properly terminated\".\n- In MySQL environments, the error message \"You have an error in your SQL syntax\" should raise alerts.\n- On SQL Server, an \"Unclosed quotation mark\" is indicative of possible SQL injection attempts.\n- SQLite error messages such as \"near \"*\": syntax error\" and \"SELECTs to the left and right of UNION do not have the same number of result columns\" are red flags for potential injection probing.\n\nBe mindful of false positives, such as a syntax error in MySQL queries that might occur in non-dynamic (thus, safe) queries if there is an empty IN() clause. This high-level monitoring approach is essential for identifying attempts to exploit SQL injections, which can compromise the integrity and availability of your database systems."
    }
  },
  {
    "instruction": "Explain how should I detect the following: various indicators of Microsoft Connection Manager Profile Installer execution",
    "context": "",
    "output": "In order to detect various indicators of Microsoft Connection Manager Profile Installer execution, you should: focus on monitoring process access logs within Windows environments. Specifically, look for any process access events where the call trace includes a reference to 'cmlua.dll', as this is indicative of the Microsoft Connection Manager Profile Installer's activity. Important fields to examine for suspicious activity include the CommandLine, ParentCommandLine, and Details associated with the event. While it's important to be aware that there are legitimate uses of the Connection Manager Profile Installer, these are considered unlikely in modern enterprise environments, and any detection should be treated with a high level of suspicion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "various indicators of Microsoft Connection Manager Profile Installer execution",
      "answer": "In order to detect various indicators of Microsoft Connection Manager Profile Installer execution, you should: focus on monitoring process access logs within Windows environments. Specifically, look for any process access events where the call trace includes a reference to 'cmlua.dll', as this is indicative of the Microsoft Connection Manager Profile Installer's activity. Important fields to examine for suspicious activity include the CommandLine, ParentCommandLine, and Details associated with the event. While it's important to be aware that there are legitimate uses of the Connection Manager Profile Installer, these are considered unlikely in modern enterprise environments, and any detection should be treated with a high level of suspicion."
    }
  },
  {
    "instruction": "How to detect: Well-known TAP software installation. Possible preparation for data exfiltration using tunneling techniques",
    "context": "",
    "output": "In order to detect well-known TAP software installation, which could be a possible preparation for data exfiltration using tunneling techniques, you should: Focus on monitoring process creation logs within Windows environments. Specifically, look for processes ending with '\\tapinstall.exe' to catch instances of TAP software installations. However, it's crucial to exclude legitimate TAP software installations from certain known directories to reduce false positives. These exclusions include any process creation events from:\n\n- `C:\\Program Files\\Avast Software\\SecureLine VPN\\tapinstall.exe`\n- `C:\\Program Files (x86)\\Avast Software\\SecureLine VPN\\tapinstall.exe`\n- Paths starting with `C:\\Program Files\\OpenVPN Connect\\drivers\\tap\\`\n- Paths starting with `C:\\Program Files (x86)\\Proton Technologies\\ProtonVPNTap\\installer\\`\n\nBy applying these filters, you can more accurately identify suspicious TAP software installations potentially used for setting up data exfiltration channels, while minimizing interruptions from legitimate VPN software operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Well-known TAP software installation. Possible preparation for data exfiltration using tunneling techniques",
      "answer": "In order to detect well-known TAP software installation, which could be a possible preparation for data exfiltration using tunneling techniques, you should: Focus on monitoring process creation logs within Windows environments. Specifically, look for processes ending with '\\tapinstall.exe' to catch instances of TAP software installations. However, it's crucial to exclude legitimate TAP software installations from certain known directories to reduce false positives. These exclusions include any process creation events from:\n\n- `C:\\Program Files\\Avast Software\\SecureLine VPN\\tapinstall.exe`\n- `C:\\Program Files (x86)\\Avast Software\\SecureLine VPN\\tapinstall.exe`\n- Paths starting with `C:\\Program Files\\OpenVPN Connect\\drivers\\tap\\`\n- Paths starting with `C:\\Program Files (x86)\\Proton Technologies\\ProtonVPNTap\\installer\\`\n\nBy applying these filters, you can more accurately identify suspicious TAP software installations potentially used for setting up data exfiltration channels, while minimizing interruptions from legitimate VPN software operations."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process. This file is usually generated by Microsoft Powershell to test against Applocker.",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process, which is typically generated by Microsoft PowerShell to test against Applocker, you should monitor Windows file event logs for the creation or modification of files containing the name \"__PSScriptPolicyTest_\". It is crucial to exclude events triggered by known and common PowerShell processes, including 'pwsh.exe', 'dsac.exe', 'ServerManager.exe', 'powershell_ise.exe', 'powershell.exe', and 'wsmprovhost.exe' located in their respective system directories within 'Program Files', 'System32', and 'SysWOW64'. These exclusions help in reducing false positives by filtering out legitimate instances of PowerShell use. The detection focuses on identifying potential evasion or bypass attempts of application control policies like Applocker, by pinpointing activities occurring from unusual or unexpected processes which are not typically associated with the generation of this specific PowerShell script file. Monitoring these events at a medium severity level is recommended due to the potential for false positives of unknown origin, yet the creation of such a script by atypical processes can signify malicious intent, such as attempting to assess or circumvent existing security policies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process. This file is usually generated by Microsoft Powershell to test against Applocker.",
      "answer": "In order to detect the creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process, which is typically generated by Microsoft PowerShell to test against Applocker, you should monitor Windows file event logs for the creation or modification of files containing the name \"__PSScriptPolicyTest_\". It is crucial to exclude events triggered by known and common PowerShell processes, including 'pwsh.exe', 'dsac.exe', 'ServerManager.exe', 'powershell_ise.exe', 'powershell.exe', and 'wsmprovhost.exe' located in their respective system directories within 'Program Files', 'System32', and 'SysWOW64'. These exclusions help in reducing false positives by filtering out legitimate instances of PowerShell use. The detection focuses on identifying potential evasion or bypass attempts of application control policies like Applocker, by pinpointing activities occurring from unusual or unexpected processes which are not typically associated with the generation of this specific PowerShell script file. Monitoring these events at a medium severity level is recommended due to the potential for false positives of unknown origin, yet the creation of such a script by atypical processes can signify malicious intent, such as attempting to assess or circumvent existing security policies."
    }
  },
  {
    "instruction": "How can I detect: Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE privileges",
    "context": "",
    "output": "In order to detect child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE privileges, you should monitor Windows process creation events. Focus specifically on processes where the parent process runs under either the 'NT AUTHORITY\\NETWORK SERVICE' or 'NT AUTHORITY\\LOCAL SERVICE' accounts, and the child process runs under the 'NT AUTHORITY\\SYSTEM' account. However, it's important to exclude any instances where the child process is 'rundll32.exe' involving the command line containing 'DavSetCookie,' as these are known exceptions. This approach aims to identify potential malicious activities where higher privilege processes are initiated by lower privilege services, a technique often exploited by attackers to escalate privileges or maintain persistence. The detection relies on enriched Sysmon events with additional information about the processes, particularly in regard to parent and user accounts involved. Be aware that some legitimate activities might trigger this detection, so unknown false positives can occur. Enhance this monitoring strategy by using the recommended enrichments for Sysmon event ID 1, to provide a more comprehensive context around the creation of new processes on Windows systems. This detection mechanism is categorized under high severity due to the implications of a successful attack exploiting this behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE privileges",
      "answer": "In order to detect child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE privileges, you should monitor Windows process creation events. Focus specifically on processes where the parent process runs under either the 'NT AUTHORITY\\NETWORK SERVICE' or 'NT AUTHORITY\\LOCAL SERVICE' accounts, and the child process runs under the 'NT AUTHORITY\\SYSTEM' account. However, it's important to exclude any instances where the child process is 'rundll32.exe' involving the command line containing 'DavSetCookie,' as these are known exceptions. This approach aims to identify potential malicious activities where higher privilege processes are initiated by lower privilege services, a technique often exploited by attackers to escalate privileges or maintain persistence. The detection relies on enriched Sysmon events with additional information about the processes, particularly in regard to parent and user accounts involved. Be aware that some legitimate activities might trigger this detection, so unknown false positives can occur. Enhance this monitoring strategy by using the recommended enrichments for Sysmon event ID 1, to provide a more comprehensive context around the creation of new processes on Windows systems. This detection mechanism is categorized under high severity due to the implications of a successful attack exploiting this behavior."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of Impacket's psexec.py.",
    "context": "",
    "output": "Sure!\nIn order to detect execution of Impacket's psexec.py, you should monitor Windows security logs for events that match specific criteria indicating that this attack tool is being used. Focus on the \"Object Access > Audit Detailed File Share\" setting within the Windows Advanced Audit Policy Configuration, ensuring it is configured to log both success and failure events. Specifically, look for Event ID 5145, which denotes an attempt to access a file share.\n\nWhen scrutinizing these events, pay particular attention to access attempts involving the IPC$ share, identifiable by the ShareName pattern `\\\\*\\IPC$`. This particular share is a target for attackers because it allows communication between processes over the network, which can be exploited for remote command execution.\n\nMoreover, you should watch for occurrences where the accessed file shares include any of the following relative target names: 'RemCom_stdin', 'RemCom_stdout', or 'RemCom_stderr'. These are indicative of the remote command execution tool RemCom using standard input, output, and error redirection over network shares, a method leveraged by Impacket's psexec.py to execute commands on the target system.\n\nIt is also important to consider that some events might not be related to malicious activity; therefore, any detection should be thoroughly investigated to rule out false positives. Due to the high impact and stealthiness of such attacks, they are classified at a high severity level.\n\nIn essence, monitoring for these specific conditions in your security logs, centered around the IPC$ share and the named files, serves as a crucial method for identifying and responding to potential instances of the psexec.py tool being used to carry out attacks on Windows systems. This approach aligns with understanding and mitigating tactics and techniques used by adversaries for remote command execution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Impacket's psexec.py.",
      "answer": "In order to detect execution of Impacket's psexec.py, you should monitor Windows security logs for events that match specific criteria indicating that this attack tool is being used. Focus on the \"Object Access > Audit Detailed File Share\" setting within the Windows Advanced Audit Policy Configuration, ensuring it is configured to log both success and failure events. Specifically, look for Event ID 5145, which denotes an attempt to access a file share.\n\nWhen scrutinizing these events, pay particular attention to access attempts involving the IPC$ share, identifiable by the ShareName pattern `\\\\*\\IPC$`. This particular share is a target for attackers because it allows communication between processes over the network, which can be exploited for remote command execution.\n\nMoreover, you should watch for occurrences where the accessed file shares include any of the following relative target names: 'RemCom_stdin', 'RemCom_stdout', or 'RemCom_stderr'. These are indicative of the remote command execution tool RemCom using standard input, output, and error redirection over network shares, a method leveraged by Impacket's psexec.py to execute commands on the target system.\n\nIt is also important to consider that some events might not be related to malicious activity; therefore, any detection should be thoroughly investigated to rule out false positives. Due to the high impact and stealthiness of such attacks, they are classified at a high severity level.\n\nIn essence, monitoring for these specific conditions in your security logs, centered around the IPC$ share and the named files, serves as a crucial method for identifying and responding to potential instances of the psexec.py tool being used to carry out attacks on Windows systems. This approach aligns with understanding and mitigating tactics and techniques used by adversaries for remote command execution."
    }
  },
  {
    "instruction": "Explain how should I detect the following: AWS root account usage",
    "context": "",
    "output": "In order to detect AWS root account usage, you should: monitor CloudTrail logs in the AWS environment to identify activities performed by the root user account. Focus on filtering logs based on the user identity type, specifically looking for actions initiated by the \"Root\" user. However, it is important to exclude events classified as \"AwsServiceEvent\" to reduce false positives. This approach helps in identifying unauthorized or potentially harmful operations carried out using the root account, which is critical for maintaining security within an AWS environment. Be aware that there are legitimate tasks that require root account credentials, detailed in AWS documentation, which should be considered while analyzing the detection results. This activity is associated with monitoring for misuse of AWS root account privileges.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "AWS root account usage",
      "answer": "In order to detect AWS root account usage, you should: monitor CloudTrail logs in the AWS environment to identify activities performed by the root user account. Focus on filtering logs based on the user identity type, specifically looking for actions initiated by the \"Root\" user. However, it is important to exclude events classified as \"AwsServiceEvent\" to reduce false positives. This approach helps in identifying unauthorized or potentially harmful operations carried out using the root account, which is critical for maintaining security within an AWS environment. Be aware that there are legitimate tasks that require root account credentials, detailed in AWS documentation, which should be considered while analyzing the detection results. This activity is associated with monitoring for misuse of AWS root account privileges."
    }
  },
  {
    "instruction": "How to detect: reporting of NTLMv1 being used between a client and server. NTLMv1 is unsecure as the underlying encryption algorithms can be brute-forced by modern hardware.",
    "context": "",
    "output": "In order to detect the reporting of NTLMv1 being used between a client and server, you should: Focus on monitoring Windows system logs, particularly for events coming from the LsaSrv provider. Concentrate on detecting Event IDs 6038 and 6039, which are pertinent to NTLMv1 usage indications. NTLMv1 is flagged because its encryption algorithms are considered insecure in today\u2019s context, allowing possible brute-force attacks with current technology. Be aware that in environments where NTLMv1 is still utilized, these detections may trigger false positives. The severity of this activity is deemed medium due to the potential security risks associated with using outdated and vulnerable authentication methods. This monitoring effort is aligned with identifying and mitigating tactics and techniques that exploit weak cryptographic standards, aiming to safeguard against potentially compromised credentials and ensuring secure authentication protocols are in place.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "reporting of NTLMv1 being used between a client and server. NTLMv1 is unsecure as the underlying encryption algorithms can be brute-forced by modern hardware.",
      "answer": "In order to detect the reporting of NTLMv1 being used between a client and server, you should: Focus on monitoring Windows system logs, particularly for events coming from the LsaSrv provider. Concentrate on detecting Event IDs 6038 and 6039, which are pertinent to NTLMv1 usage indications. NTLMv1 is flagged because its encryption algorithms are considered insecure in today\u2019s context, allowing possible brute-force attacks with current technology. Be aware that in environments where NTLMv1 is still utilized, these detections may trigger false positives. The severity of this activity is deemed medium due to the potential security risks associated with using outdated and vulnerable authentication methods. This monitoring effort is aligned with identifying and mitigating tactics and techniques that exploit weak cryptographic standards, aiming to safeguard against potentially compromised credentials and ensuring secure authentication protocols are in place."
    }
  },
  {
    "instruction": "How to detect: key vault is modified or deleted.",
    "context": "",
    "output": "In order to identify when a key vault is modified or deleted, you should: Monitor Azure Activity Logs for operations indicating changes to Key Vaults. Specifically, look for events where the operation name is one of the following: `MICROSOFT.KEYVAULT/VAULTS/WRITE`, `MICROSOFT.KEYVAULT/VAULTS/DELETE`, `MICROSOFT.KEYVAULT/VAULTS/DEPLOY/ACTION`, or `MICROSOFT.KEYVAULT/VAULTS/ACCESSPOLICIES/WRITE`. These activities suggest that a Key Vault is either being written to, deleted, deployed, or its access policies are being modified. While detecting these operations can signal potentially malicious actions, it's also important to consider legitimate administrative activities. False positives may occur, such as when a system administrator is performing expected maintenance or updates. In such cases, verify the actions by cross-referencing the user identity, user agent, and hostname involved in making these changes. Should these modifications originate from unfamiliar users or systems, further investigation is warranted. Known behaviors that lead to false positives should be documented and adjusted in monitoring strategies to avoid unnecessary alerts. By implementing these monitoring strategies, organizations can enhance their security posture by ensuring that modifications to key vaults are authorized and traceable, maintaining the integrity and confidentiality of their stored secrets.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "key vault is modified or deleted.",
      "answer": "In order to identify when a key vault is modified or deleted, you should: Monitor Azure Activity Logs for operations indicating changes to Key Vaults. Specifically, look for events where the operation name is one of the following: `MICROSOFT.KEYVAULT/VAULTS/WRITE`, `MICROSOFT.KEYVAULT/VAULTS/DELETE`, `MICROSOFT.KEYVAULT/VAULTS/DEPLOY/ACTION`, or `MICROSOFT.KEYVAULT/VAULTS/ACCESSPOLICIES/WRITE`. These activities suggest that a Key Vault is either being written to, deleted, deployed, or its access policies are being modified. While detecting these operations can signal potentially malicious actions, it's also important to consider legitimate administrative activities. False positives may occur, such as when a system administrator is performing expected maintenance or updates. In such cases, verify the actions by cross-referencing the user identity, user agent, and hostname involved in making these changes. Should these modifications originate from unfamiliar users or systems, further investigation is warranted. Known behaviors that lead to false positives should be documented and adjusted in monitoring strategies to avoid unnecessary alerts. By implementing these monitoring strategies, organizations can enhance their security posture by ensuring that modifications to key vaults are authorized and traceable, maintaining the integrity and confidentiality of their stored secrets."
    }
  },
  {
    "instruction": "Please help me detect the following: presence of the keywords \"Wscript\", \"Shell\" and \"Run\" in the command, which could indicate a suspicious activity",
    "context": "",
    "output": "Sure!\nIn order to detect the presence of the keywords \"Wscript\", \"Shell\", and \"Run\" in the command, which could indicate a suspicious activity, you should: focus on monitoring process creation events within Windows systems. Look specifically for command line executions containing all the keywords \"Wscript.\", \".Shell\", and \".Run\". These combinations of terms could suggest that a script is being utilized to execute potentially malicious commands via the Windows Script Host. Be aware that there can be legitimate uses of such scripts by third-party applications or by system administrators for automation and other purposes. Therefore, encountering these keywords doesn't immediately imply malicious intent. It's advisable to investigate further and refine your monitoring filters based on the context of their occurrence and your environment's typical usage patterns. This approach strikes a balance between alerting on suspicious activity and minimizing false positives, thereby helping maintain focus on genuine security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "presence of the keywords \"Wscript\", \"Shell\" and \"Run\" in the command, which could indicate a suspicious activity",
      "answer": "In order to detect the presence of the keywords \"Wscript\", \"Shell\", and \"Run\" in the command, which could indicate a suspicious activity, you should: focus on monitoring process creation events within Windows systems. Look specifically for command line executions containing all the keywords \"Wscript.\", \".Shell\", and \".Run\". These combinations of terms could suggest that a script is being utilized to execute potentially malicious commands via the Windows Script Host. Be aware that there can be legitimate uses of such scripts by third-party applications or by system administrators for automation and other purposes. Therefore, encountering these keywords doesn't immediately imply malicious intent. It's advisable to investigate further and refine your monitoring filters based on the context of their occurrence and your environment's typical usage patterns. This approach strikes a balance between alerting on suspicious activity and minimizing false positives, thereby helping maintain focus on genuine security threats."
    }
  },
  {
    "instruction": "Please help me detect the following: use of IOX - a tool for port forwarding and intranet proxy purposes",
    "context": "",
    "output": "Sure!\nIn order to detect the use of IOX - a tool for port forwarding and intranet proxy purposes, you should: focus on monitoring for the creation of processes on Windows systems that involve an executable ending with '\\iox.exe'. You should look for specific command line arguments indicating the tool is being used for port forwarding (forward commands using 'fwd -l' or 'fwd -r') or as an intranet proxy (using 'proxy -l' or 'proxy -r'). Additionally, check for the process being launched with known malicious hash values, including specific MD5, SHA1, and SHA256 hashes. Be aware that there could be legitimate uses of these indicators in some scenarios, but given the context, these activities are considered highly suspicious and indicative of potentially malicious behavior related to networking manipulation and proxy use within an intranet environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of IOX - a tool for port forwarding and intranet proxy purposes",
      "answer": "In order to detect the use of IOX - a tool for port forwarding and intranet proxy purposes, you should: focus on monitoring for the creation of processes on Windows systems that involve an executable ending with '\\iox.exe'. You should look for specific command line arguments indicating the tool is being used for port forwarding (forward commands using 'fwd -l' or 'fwd -r') or as an intranet proxy (using 'proxy -l' or 'proxy -r'). Additionally, check for the process being launched with known malicious hash values, including specific MD5, SHA1, and SHA256 hashes. Be aware that there could be legitimate uses of these indicators in some scenarios, but given the context, these activities are considered highly suspicious and indicative of potentially malicious behavior related to networking manipulation and proxy use within an intranet environment."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of the RunXCmd tool to execute commands with System or TrustedInstaller accounts",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of the RunXCmd tool to execute commands with System or TrustedInstaller accounts, you should: focus on monitoring process creation events on Windows systems. This entails paying close attention to the command line arguments used in processes. Specifically, watch for occurrences where the command line includes '/account=system ' or '/account=ti ' which indicates an attempt to execute commands with elevated privileges attributed to the System or TrustedInstaller accounts. Additionally, be alert for the presence of '/exec=' in the command line, signifying the execution of specific commands or operations. These indicators are critical for identifying potential misuse or exploitation attempts involving the RunXCmd tool. It's worth noting that while this detection strategy is effective, there may be instances where such command line usage is legitimate and authorized by administrators. Therefore, while the security level associated with this rule is considered high, it is advisable to verify the context of detected events to distinguish between malicious activities and legitimate administrative tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of the RunXCmd tool to execute commands with System or TrustedInstaller accounts",
      "answer": "In order to detect the use of the RunXCmd tool to execute commands with System or TrustedInstaller accounts, you should: focus on monitoring process creation events on Windows systems. This entails paying close attention to the command line arguments used in processes. Specifically, watch for occurrences where the command line includes '/account=system ' or '/account=ti ' which indicates an attempt to execute commands with elevated privileges attributed to the System or TrustedInstaller accounts. Additionally, be alert for the presence of '/exec=' in the command line, signifying the execution of specific commands or operations. These indicators are critical for identifying potential misuse or exploitation attempts involving the RunXCmd tool. It's worth noting that while this detection strategy is effective, there may be instances where such command line usage is legitimate and authorized by administrators. Therefore, while the security level associated with this rule is considered high, it is advisable to verify the context of detected events to distinguish between malicious activities and legitimate administrative tasks."
    }
  },
  {
    "instruction": "Explain how should I detect the following: executiob of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe)",
    "context": "",
    "output": "In order to detect the execution of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe), you should: Monitor Windows process creation logs for instances where the process image name ends with 'ttdinject.exe' or where the original filename is 'TTDInject.EXE'. This activity could indicate a debugging attempt using this specific tool, and as such, should be closely scrutinized. Bear in mind that while monitoring for these criteria, you might encounter legitimate uses of TTDInject.exe, categorizing such events as potential false positives. The severity of this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "executiob of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe)",
      "answer": "In order to detect the execution of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe), you should: Monitor Windows process creation logs for instances where the process image name ends with 'ttdinject.exe' or where the original filename is 'TTDInject.EXE'. This activity could indicate a debugging attempt using this specific tool, and as such, should be closely scrutinized. Bear in mind that while monitoring for these criteria, you might encounter legitimate uses of TTDInject.exe, categorizing such events as potential false positives. The severity of this detection is considered medium."
    }
  },
  {
    "instruction": "How to detect: svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389",
    "context": "",
    "output": "In order to detect svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389, you should monitor network connections specifically on Windows systems. Look out for processes where the executable name ends with '\\svchost.exe' that have initiated a connection. Moreover, these connections should be specifically using SourcePort 3389, which is typically used for Remote Desktop Protocol (RDP) services. Additionally, pay attention to connections where the destination IP address starts with '127.' or is '::1', as these represent loopback addresses used to communicate within the host. This type of behavior could signal that the svchost process, which is a legitimate Windows service host, is being used to host RDP services in a potentially unauthorized or malicious manner, especially when communicating over the loopback address. Note that while detections based on these criteria are considered to hold a high level of importance, there might be unknown cases causing false positives. Therefore, thorough investigation is recommended upon detection to determine the context and legitimacy of such actions. This monitoring strategy leans on tactics and techniques associated with malicious use of valid accounts, remote services, and potentially persistence mechanisms without directly referencing the MITRE ATT&CK taxonomy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389",
      "answer": "In order to detect svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389, you should monitor network connections specifically on Windows systems. Look out for processes where the executable name ends with '\\svchost.exe' that have initiated a connection. Moreover, these connections should be specifically using SourcePort 3389, which is typically used for Remote Desktop Protocol (RDP) services. Additionally, pay attention to connections where the destination IP address starts with '127.' or is '::1', as these represent loopback addresses used to communicate within the host. This type of behavior could signal that the svchost process, which is a legitimate Windows service host, is being used to host RDP services in a potentially unauthorized or malicious manner, especially when communicating over the loopback address. Note that while detections based on these criteria are considered to hold a high level of importance, there might be unknown cases causing false positives. Therefore, thorough investigation is recommended upon detection to determine the context and legitimacy of such actions. This monitoring strategy leans on tactics and techniques associated with malicious use of valid accounts, remote services, and potentially persistence mechanisms without directly referencing the MITRE ATT&CK taxonomy."
    }
  },
  {
    "instruction": "How can I detect: when attackers or tools disable Windows Defender functionalities via the Windows registry",
    "context": "",
    "output": "In order to detect when attackers or tools disable Windows Defender functionalities via the Windows registry, you should monitor the Windows registry for specific changes that indicate such activities. These activities can be identified by watching for the 'SetValue' event type within the registry, specifically targeting modifications in the Windows Defender configurations. The changes of interest involve modifications to registry paths that include: \n\n1. Directories related to Windows Defender and Windows Defender Security Center settings under the '\\SOFTWARE\\Microsoft\\Windows Defender\\' and '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'.\n2. Potential modifications to key configurations that are critical for the functioning of Windows Defender's antivirus and anti-spyware capabilities, real-time protection features, reporting mechanisms, and spyware protections. These changes can be in the form of enabling or disabling functionalities such as disabling anti-virus, anti-spyware, behavior monitoring, intrusion prevention system, IOAV protection (Input Output Anti-Virus), on-access protection, real-time monitoring, script scanning, enhanced notifications, block at first seen in SpyNet, and tamper protection features among others.\n\nChanges are considered suspicious if they involve setting certain registry values that effectively disable these protections. For instance, setting a registry value to 'DWORD (0x00000001)' in paths that end with configurations like '\\DisableAntiSpyware', '\\Real-Time Protection\\DisableRealtimeMonitoring' signifies the disabling of these respective features. Conversely, setting a value to 'DWORD (0x00000000)' in paths related to enabling protection features like '\\App and Browser protection\\DisallowExploitProtectionOverride' or '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess' could be legitimate actions but also need monitoring as they might indicate attempts to tamper with the system's default security posture.\n\nMonitoring these changes is critical for maintaining the integrity of Windows Defender as a key component of the system's security posture against malware and other threats. However, it's important to consider that some of these registry changes could result from legitimate administrative actions via the Windows Defender interface. Therefore, a high level of vigilance in the analysis of these events is recommended to differentiate between legitimate and malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when attackers or tools disable Windows Defender functionalities via the Windows registry",
      "answer": "In order to detect when attackers or tools disable Windows Defender functionalities via the Windows registry, you should monitor the Windows registry for specific changes that indicate such activities. These activities can be identified by watching for the 'SetValue' event type within the registry, specifically targeting modifications in the Windows Defender configurations. The changes of interest involve modifications to registry paths that include: \n\n1. Directories related to Windows Defender and Windows Defender Security Center settings under the '\\SOFTWARE\\Microsoft\\Windows Defender\\' and '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'.\n2. Potential modifications to key configurations that are critical for the functioning of Windows Defender's antivirus and anti-spyware capabilities, real-time protection features, reporting mechanisms, and spyware protections. These changes can be in the form of enabling or disabling functionalities such as disabling anti-virus, anti-spyware, behavior monitoring, intrusion prevention system, IOAV protection (Input Output Anti-Virus), on-access protection, real-time monitoring, script scanning, enhanced notifications, block at first seen in SpyNet, and tamper protection features among others.\n\nChanges are considered suspicious if they involve setting certain registry values that effectively disable these protections. For instance, setting a registry value to 'DWORD (0x00000001)' in paths that end with configurations like '\\DisableAntiSpyware', '\\Real-Time Protection\\DisableRealtimeMonitoring' signifies the disabling of these respective features. Conversely, setting a value to 'DWORD (0x00000000)' in paths related to enabling protection features like '\\App and Browser protection\\DisallowExploitProtectionOverride' or '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess' could be legitimate actions but also need monitoring as they might indicate attempts to tamper with the system's default security posture.\n\nMonitoring these changes is critical for maintaining the integrity of Windows Defender as a key component of the system's security posture against malware and other threats. However, it's important to consider that some of these registry changes could result from legitimate administrative actions via the Windows Defender interface. Therefore, a high level of vigilance in the analysis of these events is recommended to differentiate between legitimate and malicious activities."
    }
  },
  {
    "instruction": "How to detect: Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.",
    "context": "",
    "output": "In order to remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet, you should: Monitor Windows PowerShell script activities, specifically looking out for scripts that include both 'Unblock-File ' and '-Path ' commands in the script block text. These indicators suggest that a script is attempting to remove the mark of a file being downloaded from the internet, an action commonly associated with bypassing security measures. Ensure that Script Block Logging is enabled on the system to capture the necessary data. Be aware that legitimate PowerShell scripts might also perform similar actions, so it's important to differentiate between benign usage and potential security threats. The security level for this type of detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.",
      "answer": "In order to remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet, you should: Monitor Windows PowerShell script activities, specifically looking out for scripts that include both 'Unblock-File ' and '-Path ' commands in the script block text. These indicators suggest that a script is attempting to remove the mark of a file being downloaded from the internet, an action commonly associated with bypassing security measures. Ensure that Script Block Logging is enabled on the system to capture the necessary data. Be aware that legitimate PowerShell scripts might also perform similar actions, so it's important to differentiate between benign usage and potential security threats. The security level for this type of detection is considered medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of SharpEvtHook, a tool that tampers with the Windows event logs",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of SharpEvtHook, a tool that tampers with the Windows event logs, you should: Focus on monitoring process creation events within Windows. Specifically, look for any processes where the image name ends with '\\SharpEvtMute.exe' or the description directly mentions 'SharpEvtMute'. Additionally, pay close attention to command line arguments that include phrases like '--Filter \"rule ' or '--Encoded --Filter \\\"', as these are indicative of attempts to manipulate or filter Windows event logs using SharpEvtMute. This analysis is considered to have a high level of importance due to the potential misuse of SharpEvtMute in evading detection or altering logs to hide malicious activity. Keep in mind, though, the possibility of false positives is unknown, indicating the necessity for manual verification of detections. This approach aligns with tactics and techniques often employed by attackers to evade detection, specifically those relating to the manipulation of system logging processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of SharpEvtHook, a tool that tampers with the Windows event logs",
      "answer": "In order to detect the use of SharpEvtHook, a tool that tampers with the Windows event logs, you should: Focus on monitoring process creation events within Windows. Specifically, look for any processes where the image name ends with '\\SharpEvtMute.exe' or the description directly mentions 'SharpEvtMute'. Additionally, pay close attention to command line arguments that include phrases like '--Filter \"rule ' or '--Encoded --Filter \\\"', as these are indicative of attempts to manipulate or filter Windows event logs using SharpEvtMute. This analysis is considered to have a high level of importance due to the potential misuse of SharpEvtMute in evading detection or altering logs to hide malicious activity. Keep in mind, though, the possibility of false positives is unknown, indicating the necessity for manual verification of detections. This approach aligns with tactics and techniques often employed by attackers to evade detection, specifically those relating to the manipulation of system logging processes."
    }
  },
  {
    "instruction": "How to detect: application gateway is modified or deleted.",
    "context": "",
    "output": "In order to identify when an application gateway is modified or deleted, you should monitor Azure Activity Logs for specific operations that indicate modifications or deletions of application gateways. These operations are captured under the operation names \"MICROSOFT.NETWORK/APPLICATIONGATEWAYS/WRITE\" and \"MICROSOFT.NETWORK/APPLICATIONGATEWAYS/DELETE.\" By detecting these operations, you can identify potential security incidents involving unauthorized or suspicious changes to application gateways.\n\nIt is important to consider possible false positives that may arise, such as legitimate modifications or deletions performed by a system administrator. Therefore, it is advisable to verify the user identity, user agent, and hostname involved in the modifications to ensure they are expected to make changes in the environment. If modifications or deletions originate from unfamiliar users, these activities should be investigated further. Known behavior that consistently causes false positives can be exempted to refine the detection process.\n\nThis monitoring approach is considered to have a medium level of criticality. It is essential for maintaining the security posture and integrity of application gateways within Azure environments, thereby helping protect against potential threats and unauthorized access.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "application gateway is modified or deleted.",
      "answer": "In order to identify when an application gateway is modified or deleted, you should monitor Azure Activity Logs for specific operations that indicate modifications or deletions of application gateways. These operations are captured under the operation names \"MICROSOFT.NETWORK/APPLICATIONGATEWAYS/WRITE\" and \"MICROSOFT.NETWORK/APPLICATIONGATEWAYS/DELETE.\" By detecting these operations, you can identify potential security incidents involving unauthorized or suspicious changes to application gateways.\n\nIt is important to consider possible false positives that may arise, such as legitimate modifications or deletions performed by a system administrator. Therefore, it is advisable to verify the user identity, user agent, and hostname involved in the modifications to ensure they are expected to make changes in the environment. If modifications or deletions originate from unfamiliar users, these activities should be investigated further. Known behavior that consistently causes false positives can be exempted to refine the detection process.\n\nThis monitoring approach is considered to have a medium level of criticality. It is essential for maintaining the security posture and integrity of application gateways within Azure environments, thereby helping protect against potential threats and unauthorized access."
    }
  },
  {
    "instruction": "How to detect: registration of a new ODBC driver.",
    "context": "",
    "output": "In order to detect the registration of a new ODBC driver, you should monitor Windows Registry changes, specifically focusing on registry sets associated with setting values. Look for events where the `EventType` is `SetValue` and the targeted object contains the path `\\SOFTWARE\\ODBC\\ODBCINST.INI\\` ending with `\\Driver`. This helps in identifying attempts to register new ODBC drivers which could be leveraged for malicious purposes, such as establishing persistence or data exfiltration pathways.\n\nHowever, it's important to filter out legitimate changes to the registry, particularly those involving SQL Server and Office products like Access and Excel. Specifically, ignore changes where the targeted object contains `\\SQL Server\\` and the details path includes `%WINDIR%\\System32\\SQLSRV32.dll`, which is a known path for legitimate SQL Server ODBC drivers. Additionally, disregard changes where the targeted object involves `\\Microsoft Access ` or `\\Microsoft Excel Driver` and the details path starts with `C:\\Progra` and ends with `\\ACEODBC.DLL`, paths commonly associated with legitimate Office software installations.\n\nBe mindful that while monitoring for such registry changes can help in detecting suspicious activity, there is a likelihood of false positives, suggesting that detected changes might not always indicate a threat. This detection strategy is categorized at a low level of alert severity, implying that while useful for highlighting potential risks, it requires further investigation to accurately discern malicious activities.\n\nThe focus on ODBC driver registration, especially through specific registry path manipulations while excluding common legitimate configurations, aligns with tactics and techniques used in cyber attacks aimed at manipulating software to gain unauthorized access or control.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registration of a new ODBC driver.",
      "answer": "In order to detect the registration of a new ODBC driver, you should monitor Windows Registry changes, specifically focusing on registry sets associated with setting values. Look for events where the `EventType` is `SetValue` and the targeted object contains the path `\\SOFTWARE\\ODBC\\ODBCINST.INI\\` ending with `\\Driver`. This helps in identifying attempts to register new ODBC drivers which could be leveraged for malicious purposes, such as establishing persistence or data exfiltration pathways.\n\nHowever, it's important to filter out legitimate changes to the registry, particularly those involving SQL Server and Office products like Access and Excel. Specifically, ignore changes where the targeted object contains `\\SQL Server\\` and the details path includes `%WINDIR%\\System32\\SQLSRV32.dll`, which is a known path for legitimate SQL Server ODBC drivers. Additionally, disregard changes where the targeted object involves `\\Microsoft Access ` or `\\Microsoft Excel Driver` and the details path starts with `C:\\Progra` and ends with `\\ACEODBC.DLL`, paths commonly associated with legitimate Office software installations.\n\nBe mindful that while monitoring for such registry changes can help in detecting suspicious activity, there is a likelihood of false positives, suggesting that detected changes might not always indicate a threat. This detection strategy is categorized at a low level of alert severity, implying that while useful for highlighting potential risks, it requires further investigation to accurately discern malicious activities.\n\nThe focus on ODBC driver registration, especially through specific registry path manipulations while excluding common legitimate configurations, aligns with tactics and techniques used in cyber attacks aimed at manipulating software to gain unauthorized access or control."
    }
  },
  {
    "instruction": "How to detect: Atbroker executing non-deafualt Assistive Technology applications",
    "context": "",
    "output": "In order to detect Atbroker executing non-default Assistive Technology applications, you should focus on monitoring process creation events in Windows systems. Specifically, watch for instances where the process image name ends with 'AtBroker.exe' and its command line includes the text 'start'. However, it is crucial to filter out any command line options that are associated with legitimate, default assistive technology applications, such as various accessibility settings (e.g., animations, high contrast, Narrator, etc.). By applying this approach, you aim to identify potentially malicious activities involving AtBroker.exe while minimizing false positives related to legitimate use of assistive technologies. This method is instrumental in protecting against attacks leveraging Atbroker for executing unauthorized applications under the guise of assistive technologies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Atbroker executing non-deafualt Assistive Technology applications",
      "answer": "In order to detect Atbroker executing non-default Assistive Technology applications, you should focus on monitoring process creation events in Windows systems. Specifically, watch for instances where the process image name ends with 'AtBroker.exe' and its command line includes the text 'start'. However, it is crucial to filter out any command line options that are associated with legitimate, default assistive technology applications, such as various accessibility settings (e.g., animations, high contrast, Narrator, etc.). By applying this approach, you aim to identify potentially malicious activities involving AtBroker.exe while minimizing false positives related to legitimate use of assistive technologies. This method is instrumental in protecting against attacks leveraging Atbroker for executing unauthorized applications under the guise of assistive technologies."
    }
  },
  {
    "instruction": "Can you explain how to detect: NotPetya ransomware activity in which the extracted passwords are passed back to the main module via named pipe, the file system journal of drive C is deleted and Windows eventlogs are cleared using wevtutil",
    "context": "",
    "output": "Certainly!\n\nIn order to detect NotPetya ransomware activity in which the extracted passwords are passed back to the main module via named pipe, the file system journal of drive C is deleted and Windows eventlogs are cleared using wevtutil, you should monitor process creation logs in Windows systems for specific patterns of command line usage that indicate malicious activities. This includes looking for command lines that contain operations such as clearing the Application event log and deleting the file system journal on drive C using the command 'wevtutil cl Application & fsutil usn deletejournal /D C:'. Additionally, be on the lookout for command lines that try to execute or interact with suspiciously named files such as 'dllhost.dat' located in the %WINDIR%\\ransoms directory, often associated with ransomware.\n\nParticular attention should be paid to instances of 'rundll32.exe' being executed with command-line arguments ending in patterns like '.dat,#1', '.dat #1' (taking into account that Sysmon may remove commas), or '.zip.dll\",#1', as these are techniques used to stealthily load and execute malicious code. Also, the presence of '\\perfc.dat' in command lines should be considered a strong indicator of NotPetya ransomware activity, as this file name is explicitly associated with this ransomware's execution patterns.\n\nIt's crucial to capture and analyze the command lines and parent command lines used in process creation events to detect the activities indicative of NotPetya. While false positives are considered unknown, the seriousness of the threat means any detection should be treated with high urgency, labeled as critical level. By focusing on these detection methods, cybersecurity professionals can identify and respond to NotPetya ransomware threats to mitigate damage and prevent widespread infection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "NotPetya ransomware activity in which the extracted passwords are passed back to the main module via named pipe, the file system journal of drive C is deleted and Windows eventlogs are cleared using wevtutil",
      "answer": "In order to detect NotPetya ransomware activity in which the extracted passwords are passed back to the main module via named pipe, the file system journal of drive C is deleted and Windows eventlogs are cleared using wevtutil, you should monitor process creation logs in Windows systems for specific patterns of command line usage that indicate malicious activities. This includes looking for command lines that contain operations such as clearing the Application event log and deleting the file system journal on drive C using the command 'wevtutil cl Application & fsutil usn deletejournal /D C:'. Additionally, be on the lookout for command lines that try to execute or interact with suspiciously named files such as 'dllhost.dat' located in the %WINDIR%\\ransoms directory, often associated with ransomware.\n\nParticular attention should be paid to instances of 'rundll32.exe' being executed with command-line arguments ending in patterns like '.dat,#1', '.dat #1' (taking into account that Sysmon may remove commas), or '.zip.dll\",#1', as these are techniques used to stealthily load and execute malicious code. Also, the presence of '\\perfc.dat' in command lines should be considered a strong indicator of NotPetya ransomware activity, as this file name is explicitly associated with this ransomware's execution patterns.\n\nIt's crucial to capture and analyze the command lines and parent command lines used in process creation events to detect the activities indicative of NotPetya. While false positives are considered unknown, the seriousness of the threat means any detection should be treated with high urgency, labeled as critical level. By focusing on these detection methods, cybersecurity professionals can identify and respond to NotPetya ransomware threats to mitigate damage and prevent widespread infection."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious shell commands used in various Equation Group scripts and tools",
    "context": "",
    "output": "In order to detect suspicious shell commands used in various Equation Group scripts and tools, you should: Focus on monitoring Linux systems for specific command patterns that are indicative of malicious activity. These patterns include changing ownership to root and modifying file permissions to make them executable by anyone (e.g., using `chown root*chmod 4777`), copying the shell binary and changing its ownership (`cp /bin/sh .;chown`), modifying permissions and ownership in a temporary directory, especially involving suspiciously named binaries (like `/tmp/.scsi/dev/bin/gsh`), and employing unusual telnet commands to redirect console output to a shell or to set up reverse shells (e.g., `/bin/telnet locip locport < /dev/console | /bin/sh`). Look for the use of tools or scripts named or resembling Equation Group tools, such as `ewok`, `xspy`, `ghost_`, and attempts to wipe or hide network presence (`--wipe > /dev/null`) or manipulate system logs (clearing `/var/log/audit/audit.log`). Monitoring should also include spotting attempts to open backdoors or gain persistent access through modified file permissions on essential utilities or by downloading and executing files with permissions changes (e.g., `wget http*; chmod +x /tmp/sendmail`). It is crucial to watch for these commands in the Linux environment as their execution may indicate an attacker's attempt to establish persistence, escalate privileges, execute arbitrary commands, or exfiltrate data. While some commands might have legitimate uses, their context or combination can signal malicious intent, highlighting the importance of context-aware monitoring to minimize false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious shell commands used in various Equation Group scripts and tools",
      "answer": "In order to detect suspicious shell commands used in various Equation Group scripts and tools, you should: Focus on monitoring Linux systems for specific command patterns that are indicative of malicious activity. These patterns include changing ownership to root and modifying file permissions to make them executable by anyone (e.g., using `chown root*chmod 4777`), copying the shell binary and changing its ownership (`cp /bin/sh .;chown`), modifying permissions and ownership in a temporary directory, especially involving suspiciously named binaries (like `/tmp/.scsi/dev/bin/gsh`), and employing unusual telnet commands to redirect console output to a shell or to set up reverse shells (e.g., `/bin/telnet locip locport < /dev/console | /bin/sh`). Look for the use of tools or scripts named or resembling Equation Group tools, such as `ewok`, `xspy`, `ghost_`, and attempts to wipe or hide network presence (`--wipe > /dev/null`) or manipulate system logs (clearing `/var/log/audit/audit.log`). Monitoring should also include spotting attempts to open backdoors or gain persistent access through modified file permissions on essential utilities or by downloading and executing files with permissions changes (e.g., `wget http*; chmod +x /tmp/sendmail`). It is crucial to watch for these commands in the Linux environment as their execution may indicate an attacker's attempt to establish persistence, escalate privileges, execute arbitrary commands, or exfiltrate data. While some commands might have legitimate uses, their context or combination can signal malicious intent, highlighting the importance of context-aware monitoring to minimize false positives."
    }
  },
  {
    "instruction": "How can I detect: user performs data exfiltration by using DataSvcUtil.exe",
    "context": "",
    "output": "In order to detect when a user performs data exfiltration by using DataSvcUtil.exe, you should: Monitor the creation of processes on Windows systems, especially focusing on instances where DataSvcUtil.exe is involved. Be on the lookout for command line parameters that include '/in:', '/out:', or '/uri:', as these are indicative of interaction with data sources, destinations, or internet resources, which might be used in the context of extracting data unlawfully. Additionally, ensure that any running process matches the image or original file name of 'DataSvcUtil.exe'. It is crucial to record the computer name, user involved, the command line used to initiate the process, and if available, the parent command line. While monitoring, remember that there are legitimate uses of DataSvcUtil.exe, particularly by system administrators. Thus, confirm the context of use, such as the user's identity and their typical behavior, to differentiate between normal and suspicious activities. Evaluating these parameters helps in minimizing false positives and focusing on potential data exfiltration efforts.\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user performs data exfiltration by using DataSvcUtil.exe",
      "answer": "In order to detect when a user performs data exfiltration by using DataSvcUtil.exe, you should: Monitor the creation of processes on Windows systems, especially focusing on instances where DataSvcUtil.exe is involved. Be on the lookout for command line parameters that include '/in:', '/out:', or '/uri:', as these are indicative of interaction with data sources, destinations, or internet resources, which might be used in the context of extracting data unlawfully. Additionally, ensure that any running process matches the image or original file name of 'DataSvcUtil.exe'. It is crucial to record the computer name, user involved, the command line used to initiate the process, and if available, the parent command line. While monitoring, remember that there are legitimate uses of DataSvcUtil.exe, particularly by system administrators. Thus, confirm the context of use, such as the user's identity and their typical behavior, to differentiate between normal and suspicious activities. Evaluating these parameters helps in minimizing false positives and focusing on potential data exfiltration efforts.\n"
    }
  },
  {
    "instruction": "How can I detect: The Directory Service Restore Mode (DSRM) account is a local administrator account on Domain Controllers. Attackers may change the password to gain persistence.",
    "context": "",
    "output": "In order to detect if attackers are attempting to change the password of the Directory Service Restore Mode (DSRM) account to potentially gain persistence on Domain Controllers, you should monitor Windows security logs for the occurrence of Event ID 4794. The DSRM account acts as a local administrator on Domain Controllers, and its compromise could provide attackers with significant control over the domain. It is important to note that encountering this event ID during the initial installation of a domain controller could be a normal activity and considered a false positive. However, outside of this context, sightings of Event ID 4794 should be taken with high seriousness, as they indicate attempts to modify the DSRM password unexpectedly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The Directory Service Restore Mode (DSRM) account is a local administrator account on Domain Controllers. Attackers may change the password to gain persistence.",
      "answer": "In order to detect if attackers are attempting to change the password of the Directory Service Restore Mode (DSRM) account to potentially gain persistence on Domain Controllers, you should monitor Windows security logs for the occurrence of Event ID 4794. The DSRM account acts as a local administrator on Domain Controllers, and its compromise could provide attackers with significant control over the domain. It is important to note that encountering this event ID during the initial installation of a domain controller could be a normal activity and considered a false positive. However, outside of this context, sightings of Event ID 4794 should be taken with high seriousness, as they indicate attempts to modify the DSRM password unexpectedly."
    }
  },
  {
    "instruction": "How to detect: artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019.",
    "context": "",
    "output": "In order to detect artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019, you should: Monitor Windows process creation logs for occurrences where the executable's SHA1 hash matches 'e570585edc69f9074cb5e8a790708336bd45ca0f'. However, ensure that this detection is only considered relevant if the process is not initiated from the legitimate paths ':\\Program Files(x86)\\' or ':\\Program Files\\'. This approach aims to identify malicious activities where attackers might disguise their malware by using a known legitimate executable's SHA1 but execute it from an unusual location. Such occurrences could be critical in identifying the presence of GALLIUM activity in your environment. Note that since no false positives are known at the moment, the alert level remains high, urging for immediate investigation upon detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019.",
      "answer": "In order to detect artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019, you should: Monitor Windows process creation logs for occurrences where the executable's SHA1 hash matches 'e570585edc69f9074cb5e8a790708336bd45ca0f'. However, ensure that this detection is only considered relevant if the process is not initiated from the legitimate paths ':\\Program Files(x86)\\' or ':\\Program Files\\'. This approach aims to identify malicious activities where attackers might disguise their malware by using a known legitimate executable's SHA1 but execute it from an unusual location. Such occurrences could be critical in identifying the presence of GALLIUM activity in your environment. Note that since no false positives are known at the moment, the alert level remains high, urging for immediate investigation upon detection."
    }
  },
  {
    "instruction": "How can I detect: possible password spraying attempts using Dsacls",
    "context": "",
    "output": "In order to detect possible password spraying attempts using Dsacls, you should: focus on monitoring process creation logs within Windows environments. The detection hinges on identifying instances where the 'dsacls.exe' executable or processes with the original file name 'DSACLS.EXE' are initiated. Specifically, look for command-line arguments that contain both '/user:' and '/passwd:', which are indicative of a command attempting to use 'dsacls.exe' for unauthorized access by trying different passwords for usernames. It is worth noting that there might be legitimate uses of 'dsacls.exe' related to binding to LDAP sessions, so such instances should be treated as potential false positives. This monitoring strategy is instrumental in highlighting medium-level security threats associated with the tactics and techniques of credential access through password spraying.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible password spraying attempts using Dsacls",
      "answer": "In order to detect possible password spraying attempts using Dsacls, you should: focus on monitoring process creation logs within Windows environments. The detection hinges on identifying instances where the 'dsacls.exe' executable or processes with the original file name 'DSACLS.EXE' are initiated. Specifically, look for command-line arguments that contain both '/user:' and '/passwd:', which are indicative of a command attempting to use 'dsacls.exe' for unauthorized access by trying different passwords for usernames. It is worth noting that there might be legitimate uses of 'dsacls.exe' related to binding to LDAP sessions, so such instances should be treated as potential false positives. This monitoring strategy is instrumental in highlighting medium-level security threats associated with the tactics and techniques of credential access through password spraying."
    }
  },
  {
    "instruction": "Can you explain how to detect: The Tasks folder in system32 and syswow64 are globally writable paths.\nAdversaries can take advantage of this and load or influence any script hosts or ANY .NET Application \nin Tasks to load and execute a custom assembly into cscript, wscript, regsvr32, mshta, eventvwr\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect adversaries exploiting the globally writable paths in the Tasks folders of system32 and syswow64 to load or influence script hosts or .NET Applications, resulting in the execution of custom assemblies into cscript, wscript, regsvr32, mshta, eventvwr, you should: Monitor for process creation events on Windows systems that contain command line activities evidencing the use of commands such as 'echo', 'copy', 'type', and 'file createnew' for potentially malicious file manipulation. Additionally, pay special attention to processes being created with command lines that reference direct paths to the Tasks folders within C:\\Windows\\System32\\Tasks\\ or C:\\Windows\\SysWow64\\Tasks\\, as these indicate attempts to exploit the writable feature of these directories. The detection focuses on the command lines used during the process creation, and the parent process involved in these activities. Since these behaviors are attributed to a high-level of threat, any occurrence should be considered with caution, albeit acknowledging that there can be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The Tasks folder in system32 and syswow64 are globally writable paths.\nAdversaries can take advantage of this and load or influence any script hosts or ANY .NET Application \nin Tasks to load and execute a custom assembly into cscript, wscript, regsvr32, mshta, eventvwr\n",
      "answer": "In order to detect adversaries exploiting the globally writable paths in the Tasks folders of system32 and syswow64 to load or influence script hosts or .NET Applications, resulting in the execution of custom assemblies into cscript, wscript, regsvr32, mshta, eventvwr, you should: Monitor for process creation events on Windows systems that contain command line activities evidencing the use of commands such as 'echo', 'copy', 'type', and 'file createnew' for potentially malicious file manipulation. Additionally, pay special attention to processes being created with command lines that reference direct paths to the Tasks folders within C:\\Windows\\System32\\Tasks\\ or C:\\Windows\\SysWow64\\Tasks\\, as these indicate attempts to exploit the writable feature of these directories. The detection focuses on the command lines used during the process creation, and the parent process involved in these activities. Since these behaviors are attributed to a high-level of threat, any occurrence should be considered with caution, albeit acknowledging that there can be unknown false positives."
    }
  },
  {
    "instruction": "How can I detect: programs on a Windows system that should not write executables to disk",
    "context": "",
    "output": "In order to detect programs on a Windows system that should not write executables to disk, you should monitor file event logs for instances where certain programs create or modify executable files (.exe, .dll, .ocx). Specifically, keep an eye on the activities of Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which do not typically involve dropping executables. Additionally, watch out for the use of legitimate Windows utilities (often referred to as LOLBINs - Living Off the Land Binaries) such as certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, and mshta.exe, as these can be abused to download or generate executable files but usually should not do so. Moreover, pay attention if executable files are created or altered by processes with names like AcroRd32.exe, RdrCEF.exe, hh.exe, and finger.exe; these are especially suspicious as they normally should never be involved in such actions, indicating potential process injection or masquerading malware. Be aware that detecting these activities necessitates a high level of alertness due to the potential for false positives being unknown, indicating that while anomalies might be rare, each detection should be investigated thoroughly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "programs on a Windows system that should not write executables to disk",
      "answer": "In order to detect programs on a Windows system that should not write executables to disk, you should monitor file event logs for instances where certain programs create or modify executable files (.exe, .dll, .ocx). Specifically, keep an eye on the activities of Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which do not typically involve dropping executables. Additionally, watch out for the use of legitimate Windows utilities (often referred to as LOLBINs - Living Off the Land Binaries) such as certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, and mshta.exe, as these can be abused to download or generate executable files but usually should not do so. Moreover, pay attention if executable files are created or altered by processes with names like AcroRd32.exe, RdrCEF.exe, hh.exe, and finger.exe; these are especially suspicious as they normally should never be involved in such actions, indicating potential process injection or masquerading malware. Be aware that detecting these activities necessitates a high level of alertness due to the potential for false positives being unknown, indicating that while anomalies might be rare, each detection should be investigated thoroughly."
    }
  },
  {
    "instruction": "How can I detect: default lsass dump filename from SafetyKatz",
    "context": "",
    "output": "In order to detect default lsass dump filename from SafetyKatz, you should: Monitor file events on Windows systems for any occurrences where a file ends with the path \u2018\\Temp\\debug.bin\u2019. This specific filename pattern is commonly associated with malicious activity, particularly with attempts to dump the Local Security Authority Subsystem Service (lsass) memory using a tool known as SafetyKatz, which is a variant of the well-known credential stealing malware, Mimikatz. It's crucial to pay attention to such events, although it's rare, there may be legitimate files with a similar naming structure. The detection of files with this name is considered to have a high level of importance due to its association with credential theft. This activity is tied to tactics and techniques that include Credential Access through OS Credential Dumping.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "default lsass dump filename from SafetyKatz",
      "answer": "In order to detect default lsass dump filename from SafetyKatz, you should: Monitor file events on Windows systems for any occurrences where a file ends with the path \u2018\\Temp\\debug.bin\u2019. This specific filename pattern is commonly associated with malicious activity, particularly with attempts to dump the Local Security Authority Subsystem Service (lsass) memory using a tool known as SafetyKatz, which is a variant of the well-known credential stealing malware, Mimikatz. It's crucial to pay attention to such events, although it's rare, there may be legitimate files with a similar naming structure. The detection of files with this name is considered to have a high level of importance due to its association with credential theft. This activity is tied to tactics and techniques that include Credential Access through OS Credential Dumping."
    }
  },
  {
    "instruction": "Can you explain how to detect: removal of folders from the \"ProtectedFolders\" list of of exploit guard. This could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the removal of folders from the \"ProtectedFolders\" list of exploit guard, which could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder, you should monitor Windows registry deletions focusing on the specific event where values under the registry path \"SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders\" are being deleted. This action is tagged in the context of potential intrusion tactics where an attacker may attempt to bypass or disable protective measures around sensitive folders. These tactics align with manipulation of files and directories or an attempt to evade defenses. It is considered a high-level concern because alterations to the Controlled Folder Access settings can directly impact the security posture by allowing unauthorized access or changes to protected folders, potentially leading to data loss or compromise. However, be mindful that there are situations where legitimate administrators might remove applications or modify these settings for valid reasons, and such activities should always be investigated rather than automatically deemed malicious.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "removal of folders from the \"ProtectedFolders\" list of of exploit guard. This could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder",
      "answer": "In order to detect the removal of folders from the \"ProtectedFolders\" list of exploit guard, which could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder, you should monitor Windows registry deletions focusing on the specific event where values under the registry path \"SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders\" are being deleted. This action is tagged in the context of potential intrusion tactics where an attacker may attempt to bypass or disable protective measures around sensitive folders. These tactics align with manipulation of files and directories or an attempt to evade defenses. It is considered a high-level concern because alterations to the Controlled Folder Access settings can directly impact the security posture by allowing unauthorized access or changes to protected folders, potentially leading to data loss or compromise. However, be mindful that there are situations where legitimate administrators might remove applications or modify these settings for valid reasons, and such activities should always be investigated rather than automatically deemed malicious."
    }
  },
  {
    "instruction": "How can I detect: potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials",
    "context": "",
    "output": "In order to detect potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials, you should: Monitor registry settings adjustments within Windows environments, specifically focusing on events where the registry key in question is related to the UseLogonCredential setting within the WDigest path. Look for actions categorized as SetValue events indicating a change in the registry. The critical aspect to watch out for is the modification of the TargetObject ending with 'WDigest\\UseLogonCredential' where the details of the modification involve setting the DWORD value to (0x00000001), which effectively enables the storage of login credentials in clear-text. Given that such modifications could serve as a vector for compromising credentials, monitoring these registry changes is crucial. The primary log source for these observations is registry_set activities related to the Windows operating system. It is essential to remain vigilant for any actions fitting this description, albeit there may be rare instances where these modifications are not indicative of malicious intent, leading to potential false positives. Nonetheless, due to the high impact of enabling clear-text credential storage, such modifications are treated with a high level of suspicion. This detection process is aligned with understanding and preempting tactics and techniques that exploit credential access vulnerabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials",
      "answer": "In order to detect potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials, you should: Monitor registry settings adjustments within Windows environments, specifically focusing on events where the registry key in question is related to the UseLogonCredential setting within the WDigest path. Look for actions categorized as SetValue events indicating a change in the registry. The critical aspect to watch out for is the modification of the TargetObject ending with 'WDigest\\UseLogonCredential' where the details of the modification involve setting the DWORD value to (0x00000001), which effectively enables the storage of login credentials in clear-text. Given that such modifications could serve as a vector for compromising credentials, monitoring these registry changes is crucial. The primary log source for these observations is registry_set activities related to the Windows operating system. It is essential to remain vigilant for any actions fitting this description, albeit there may be rare instances where these modifications are not indicative of malicious intent, leading to potential false positives. Nonetheless, due to the high impact of enabling clear-text credential storage, such modifications are treated with a high level of suspicion. This detection process is aligned with understanding and preempting tactics and techniques that exploit credential access vulnerabilities."
    }
  },
  {
    "instruction": "How can I detect: usage of command line tools such as \"kill\", \"pkill\" or \"killall\" to terminate or signal a running process.",
    "context": "",
    "output": "In order to detect usage of command line tools such as \"kill\", \"pkill\" or \"killall\" to terminate or signal a running process, you should: Monitor process creation logs on Linux systems for the execution of commands that include \"kill\", \"pkill\", or \"killall\" at the end of the command path. Be aware that there may be legitimate uses of these commands, so the likelihood of false positives is high and the detection level is considered low.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of command line tools such as \"kill\", \"pkill\" or \"killall\" to terminate or signal a running process.",
      "answer": "In order to detect usage of command line tools such as \"kill\", \"pkill\" or \"killall\" to terminate or signal a running process, you should: Monitor process creation logs on Linux systems for the execution of commands that include \"kill\", \"pkill\", or \"killall\" at the end of the command path. Be aware that there may be legitimate uses of these commands, so the likelihood of false positives is high and the detection level is considered low."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of the powerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations",
    "context": "",
    "output": "Sure!\nIn order to detect usage of the PowerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations, you should monitor the creation of processes on Windows systems. Focus specifically on command lines that include the usage of the New-MailboxExportRequest cmdlet together with the parameters '-Mailbox' and a file path starting with double backslashes '\\\\', indicating an attempt to export a mailbox to either a remote or local share. Such activities should trigger high-level alerts due to their critical nature and potential association with ProxyShell exploit attempts.\n\nIn monitoring, ensure that you capture the full command line argument as well as the parent command line from which the process was created for deeper analysis. However, be mindful of potential false positives, as there can be legitimate uses of these command lines in administrative contexts that are unknown or unique to specific environments.\n\nBy focusing on this detection mechanic, efforts will align with identifying tactics and techniques used in initial access and execution phases of cyber attacks, particularly those relating to the manipulation of PowerShell to export mailboxes illicitly, which is a known vector in advanced persistent threat activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the powerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations",
      "answer": "In order to detect usage of the PowerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations, you should monitor the creation of processes on Windows systems. Focus specifically on command lines that include the usage of the New-MailboxExportRequest cmdlet together with the parameters '-Mailbox' and a file path starting with double backslashes '\\\\', indicating an attempt to export a mailbox to either a remote or local share. Such activities should trigger high-level alerts due to their critical nature and potential association with ProxyShell exploit attempts.\n\nIn monitoring, ensure that you capture the full command line argument as well as the parent command line from which the process was created for deeper analysis. However, be mindful of potential false positives, as there can be legitimate uses of these command lines in administrative contexts that are unknown or unique to specific environments.\n\nBy focusing on this detection mechanic, efforts will align with identifying tactics and techniques used in initial access and execution phases of cyber attacks, particularly those relating to the manipulation of PowerShell to export mailboxes illicitly, which is a known vector in advanced persistent threat activities."
    }
  },
  {
    "instruction": "How to detect: Adversaries may attempt to find domain-level groups and permission settings.\nThe knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n",
    "context": "",
    "output": "In order to detect adversaries attempting to find domain-level groups and permission settings, you should focus on monitoring PowerShell script activity within Windows environments. Specifically, you should ensure that Script Block Logging is enabled to capture detailed information about script execution. Look for scripts containing specific commands that are frequently used in reconnaissance activities to gather information about domain groups and user permissions. Detecting the use of the `get-ADPrincipalGroupMembership` command is crucial as adversaries may use it to determine the membership of specific domain-level groups. Additionally, identifying scripts that combine the `get-aduser` command with parameters like '-f ' (filter), '-pr ' (properties), and the string 'DoesNotRequirePreAuth' is important. This combination is often used to query for users who have properties that could be exploited, such as not requiring pre-authentication, which can indicate users with potentially elevated permissions or vulnerabilities in their configuration. Monitoring for these patterns and commands in PowerShell script blocks can help identify reconnaissance activities aimed at uncovering domain group memberships and permissions settings. It's essential to keep in mind that these detections can sometimes yield false positives, so they are considered to have a low level of confidence by default.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to find domain-level groups and permission settings.\nThe knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n",
      "answer": "In order to detect adversaries attempting to find domain-level groups and permission settings, you should focus on monitoring PowerShell script activity within Windows environments. Specifically, you should ensure that Script Block Logging is enabled to capture detailed information about script execution. Look for scripts containing specific commands that are frequently used in reconnaissance activities to gather information about domain groups and user permissions. Detecting the use of the `get-ADPrincipalGroupMembership` command is crucial as adversaries may use it to determine the membership of specific domain-level groups. Additionally, identifying scripts that combine the `get-aduser` command with parameters like '-f ' (filter), '-pr ' (properties), and the string 'DoesNotRequirePreAuth' is important. This combination is often used to query for users who have properties that could be exploited, such as not requiring pre-authentication, which can indicate users with potentially elevated permissions or vulnerabilities in their configuration. Monitoring for these patterns and commands in PowerShell script blocks can help identify reconnaissance activities aimed at uncovering domain group memberships and permissions settings. It's essential to keep in mind that these detections can sometimes yield false positives, so they are considered to have a low level of confidence by default."
    }
  },
  {
    "instruction": "Can you explain how to detect: attempts of decoding encoded Gzip archives via PowerShell.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect attempts of decoding encoded Gzip archives via PowerShell, you should monitor the creation of processes on Windows systems where the command line includes both 'GZipStream' and '::Decompress'. This is a sign that PowerShell might be used to decode Gzip archives, which can be an indication of malicious activity where attackers are trying to decompress files that were previously compressed to avoid detection. It's important to note, however, that legitimate administrative scripts might also use this functionality for valid reasons. Therefore, to reduce false positives, consider examining the parent image of the process along with the script names and confirm whether the activity is being conducted by allowed users and applications. This approach falls under medium-level severity due to its potential for misuse in executing attacks, while also acknowledging the possibility of legitimate use.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts of decoding encoded Gzip archives via PowerShell.",
      "answer": "In order to detect attempts of decoding encoded Gzip archives via PowerShell, you should monitor the creation of processes on Windows systems where the command line includes both 'GZipStream' and '::Decompress'. This is a sign that PowerShell might be used to decode Gzip archives, which can be an indication of malicious activity where attackers are trying to decompress files that were previously compressed to avoid detection. It's important to note, however, that legitimate administrative scripts might also use this functionality for valid reasons. Therefore, to reduce false positives, consider examining the parent image of the process along with the script names and confirm whether the activity is being conducted by allowed users and applications. This approach falls under medium-level severity due to its potential for misuse in executing attacks, while also acknowledging the possibility of legitimate use."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of \"reg.exe\" to add Defender folder exclusions. Qbot has been seen using this technique to add exlcusions for folders within AppData and ProgramData.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the usage of \"reg.exe\" to add Defender folder exclusions, a technique Qbot has been seen using to add exclusions for folders within AppData and ProgramData, you should: Monitor the process creation events in Windows systems for the execution of \"reg.exe\". Specifically, look for command lines that contain paths related to the Windows Defender or Microsoft Antimalware exclusions, such as 'SOFTWARE\\Microsoft\\Windows Defender\\Exclusions\\Paths' or 'SOFTWARE\\Microsoft\\Microsoft Antimalware\\Exclusions\\Paths'. Moreover, the command lines should also include specific keywords that denote the addition of a new registry value, which are 'ADD ', '/t ', 'REG_DWORD ', '/v ', and '/d 0'. These indications suggest an attempt to manipulate the registry to bypass security measures specifically by adding exclusions. It's important to consider that there might be legitimate uses of these command-line parameters, so the detected activities should be investigated for context to ascertain their nature. The significance level of these findings is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"reg.exe\" to add Defender folder exclusions. Qbot has been seen using this technique to add exlcusions for folders within AppData and ProgramData.",
      "answer": "In order to detect the usage of \"reg.exe\" to add Defender folder exclusions, a technique Qbot has been seen using to add exclusions for folders within AppData and ProgramData, you should: Monitor the process creation events in Windows systems for the execution of \"reg.exe\". Specifically, look for command lines that contain paths related to the Windows Defender or Microsoft Antimalware exclusions, such as 'SOFTWARE\\Microsoft\\Windows Defender\\Exclusions\\Paths' or 'SOFTWARE\\Microsoft\\Microsoft Antimalware\\Exclusions\\Paths'. Moreover, the command lines should also include specific keywords that denote the addition of a new registry value, which are 'ADD ', '/t ', 'REG_DWORD ', '/v ', and '/d 0'. These indications suggest an attempt to manipulate the registry to bypass security measures specifically by adding exclusions. It's important to consider that there might be legitimate uses of these command-line parameters, so the detected activities should be investigated for context to ascertain their nature. The significance level of these findings is considered medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: logon events that have characteristics of events generated during an attack with RottenPotato and the like",
    "context": "",
    "output": "Certainly!\n\nIn order to detect logon events that have characteristics of events generated during an attack with RottenPotato and the like, you should focus on monitoring security logs in Windows environments. Specifically, pay attention to events with an ID of 4624, which indicates a successful logon event. The logon type should be 3, signifying a network logon. Crucially, these events will have the target username set to 'ANONYMOUS LOGON', and the workstation name field will be empty, represented by a '-'. Additionally, the IP address associated with these events will be '127.0.0.1' or '::1', both of which indicate local host connections. This pattern of characteristics is commonly associated with malicious activities, including but not limited to the exploitation techniques used by tools like RottenPotato. It\u2019s also essential to note that while any occurrence of these specific patterns should be investigated, there might be legitimate but rare scenarios where similar patterns occur, leading to potential false positives. In cybersecurity, identifying and analyzing events with these attributes at a high level of scrutiny is vital for early detection of this kind of attack tactic.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "logon events that have characteristics of events generated during an attack with RottenPotato and the like",
      "answer": "In order to detect logon events that have characteristics of events generated during an attack with RottenPotato and the like, you should focus on monitoring security logs in Windows environments. Specifically, pay attention to events with an ID of 4624, which indicates a successful logon event. The logon type should be 3, signifying a network logon. Crucially, these events will have the target username set to 'ANONYMOUS LOGON', and the workstation name field will be empty, represented by a '-'. Additionally, the IP address associated with these events will be '127.0.0.1' or '::1', both of which indicate local host connections. This pattern of characteristics is commonly associated with malicious activities, including but not limited to the exploitation techniques used by tools like RottenPotato. It\u2019s also essential to note that while any occurrence of these specific patterns should be investigated, there might be legitimate but rare scenarios where similar patterns occur, leading to potential false positives. In cybersecurity, identifying and analyzing events with these attributes at a high level of scrutiny is vital for early detection of this kind of attack tactic."
    }
  },
  {
    "instruction": "Please help me detect the following: automated lateral movement by Turla group",
    "context": "",
    "output": "Sure!\nIn order to detect automated lateral movement by Turla group, you should: Monitor process creation logs on Windows systems for the execution of specific network-related command lines within a short timeframe. Specifically, look for the execution of 'net view /DOMAIN', 'net session', and 'net share' commands. These commands are typically used by attackers to view domain information, list or disconnect sessions on a computer, and list or manage shared resources, respectively. To accurately identify potential lateral movement activities associated with the Turla group, these command executions should occur in close succession, specifically within a 1-minute timeframe. Although there may be legitimate uses of these commands, their grouped execution within such a short period should be scrutinized for potential malicious activity. This detection mechanism is crucial in identifying tactics and techniques related to reconnaissance and lateral movement, aiding in the timely response to and mitigation of such threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "automated lateral movement by Turla group",
      "answer": "In order to detect automated lateral movement by Turla group, you should: Monitor process creation logs on Windows systems for the execution of specific network-related command lines within a short timeframe. Specifically, look for the execution of 'net view /DOMAIN', 'net session', and 'net share' commands. These commands are typically used by attackers to view domain information, list or disconnect sessions on a computer, and list or manage shared resources, respectively. To accurately identify potential lateral movement activities associated with the Turla group, these command executions should occur in close succession, specifically within a 1-minute timeframe. Although there may be legitimate uses of these commands, their grouped execution within such a short period should be scrutinized for potential malicious activity. This detection mechanism is crucial in identifying tactics and techniques related to reconnaissance and lateral movement, aiding in the timely response to and mitigation of such threats."
    }
  },
  {
    "instruction": "How to detect: presence of default Cobalt Strike certificate in the HTTPS traffic",
    "context": "",
    "output": "In order to detect the presence of default Cobalt Strike certificate in the HTTPS traffic, you should: Monitor HTTPS traffic for specific certificate characteristics using Zeek, focusing on the X509 service logs. Pay attention to certificates with the serial number \"8BB00EE\". This indicator can help identify potentially malicious activity related to Cobalt Strike, a common tool used in cyber attacks for establishing encrypted command and control channels. You will need to examine fields such as the DNS names included in the Subject Alternative Name (SAN) field, the certificate's subject, and issuer details to provide more context around the detected certificate. Be aware that there may be instances where this detection could trigger on non-malicious activity, although such false positives are currently unknown. This activity is characterized by a high level of confidence due to its specificity. By focusing on these details and logs from Zeek's X509 service, defenders can more effectively identify and respond to potential Cobalt Strike command and control communication within their networks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "presence of default Cobalt Strike certificate in the HTTPS traffic",
      "answer": "In order to detect the presence of default Cobalt Strike certificate in the HTTPS traffic, you should: Monitor HTTPS traffic for specific certificate characteristics using Zeek, focusing on the X509 service logs. Pay attention to certificates with the serial number \"8BB00EE\". This indicator can help identify potentially malicious activity related to Cobalt Strike, a common tool used in cyber attacks for establishing encrypted command and control channels. You will need to examine fields such as the DNS names included in the Subject Alternative Name (SAN) field, the certificate's subject, and issuer details to provide more context around the detected certificate. Be aware that there may be instances where this detection could trigger on non-malicious activity, although such false positives are currently unknown. This activity is characterized by a high level of confidence due to its specificity. By focusing on these details and logs from Zeek's X509 service, defenders can more effectively identify and respond to potential Cobalt Strike command and control communication within their networks."
    }
  },
  {
    "instruction": "Please help me detect the following: use of Dumpert process dumper, which dumps the lsass.exe process memory",
    "context": "",
    "output": "Sure!\nIn order to detect the use of Dumpert process dumper, which dumps the lsass.exe process memory, you should: monitor the process creation logs on Windows systems for any occurrences where the hash '09D278F9DE118EF09163C6140255C690' is present or the command line contains 'Dumpert.dll'. This approach is crucial as it targets specific indicators associated with the execution of Dumpert, a known tool for dumping the memory of the lsass.exe process, which is a common tactic used in credential access attacks. Given the nature of this detection and the critical level assigned to it, false positives are considered very unlikely. This method focuses on identifying the malicious activity by observing for these particular signs in the system's process creation events.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Dumpert process dumper, which dumps the lsass.exe process memory",
      "answer": "In order to detect the use of Dumpert process dumper, which dumps the lsass.exe process memory, you should: monitor the process creation logs on Windows systems for any occurrences where the hash '09D278F9DE118EF09163C6140255C690' is present or the command line contains 'Dumpert.dll'. This approach is crucial as it targets specific indicators associated with the execution of Dumpert, a known tool for dumping the memory of the lsass.exe process, which is a common tactic used in credential access attacks. Given the nature of this detection and the critical level assigned to it, false positives are considered very unlikely. This method focuses on identifying the malicious activity by observing for these particular signs in the system's process creation events."
    }
  },
  {
    "instruction": "How to detect: usage of the \"Write-EventLog\" cmdlet with 'RawData' flag. The cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve them later for later use",
    "context": "",
    "output": "In order to detect the usage of the \"Write-EventLog\" cmdlet with 'RawData' flag, which can be leveraged to write malicious payloads to the EventLog and then retrieve them later for use, you should: focus on monitoring Windows PowerShell script activities. This specifically entails ensuring that Script Block Logging is enabled, which is crucial for logging detailed execution information about PowerShell scripts, including the content of the scripts themselves. The detection strategy hinges on identifying the use of the \"Write-EventLog\" cmdlet in conjunction with the '-RawData' parameter within PowerShell scripts. These parameters together are indicative of an attempt to log data potentially for malicious purposes. It's essential to be aware of false positives, as legitimate applications may utilize this cmdlet for non-malicious purposes. Therefore, each alert generated under these criteria should be thoroughly investigated to ascertain whether the activity is benign or malevolent. The security severity associated with this kind of activity is considered medium, reflecting the need for prompt but measured response actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Write-EventLog\" cmdlet with 'RawData' flag. The cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve them later for later use",
      "answer": "In order to detect the usage of the \"Write-EventLog\" cmdlet with 'RawData' flag, which can be leveraged to write malicious payloads to the EventLog and then retrieve them later for use, you should: focus on monitoring Windows PowerShell script activities. This specifically entails ensuring that Script Block Logging is enabled, which is crucial for logging detailed execution information about PowerShell scripts, including the content of the scripts themselves. The detection strategy hinges on identifying the use of the \"Write-EventLog\" cmdlet in conjunction with the '-RawData' parameter within PowerShell scripts. These parameters together are indicative of an attempt to log data potentially for malicious purposes. It's essential to be aware of false positives, as legitimate applications may utilize this cmdlet for non-malicious purposes. Therefore, each alert generated under these criteria should be thoroughly investigated to ascertain whether the activity is benign or malevolent. The security severity associated with this kind of activity is considered medium, reflecting the need for prompt but measured response actions."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
    "context": "",
    "output": "In order to detect adversaries using Valid Accounts to interact with remote systems using Windows Remote Management (WinRM), allowing them to perform actions as the logged-on user, you should focus on monitoring PowerShell scripts for specific command patterns. Specifically, look for scripts that include the use of `invoke-command` together with the `-ComputerName` parameter. This pattern is associated with remote execution, which is a common tactic used by adversaries to execute commands on remote systems via WinRM.\n\nThe logging source for this activity is primarily Windows PowerShell scripts, and it is imperative that Script Block Logging is enabled to capture the necessary data for analysis. Detection hinges on identifying scripts that contain both the `invoke-command` and `-ComputerName` arguments, indicating an attempt to execute commands remotely.\n\nIt is important to be aware of potential false positives, as legitimate scripts used by administrators for normal system and network management could also contain these patterns. Therefore, each detection should be analyzed in the context of its execution environment, taking into account the normal behavioral baselines.\n\nThis detection approach focuses on the tactics and techniques often utilized by adversaries, specifically those categorized under valid accounts usage for remote system interaction and command execution (without explicitly mentioning the tagging system used for classification).",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
      "answer": "In order to detect adversaries using Valid Accounts to interact with remote systems using Windows Remote Management (WinRM), allowing them to perform actions as the logged-on user, you should focus on monitoring PowerShell scripts for specific command patterns. Specifically, look for scripts that include the use of `invoke-command` together with the `-ComputerName` parameter. This pattern is associated with remote execution, which is a common tactic used by adversaries to execute commands on remote systems via WinRM.\n\nThe logging source for this activity is primarily Windows PowerShell scripts, and it is imperative that Script Block Logging is enabled to capture the necessary data for analysis. Detection hinges on identifying scripts that contain both the `invoke-command` and `-ComputerName` arguments, indicating an attempt to execute commands remotely.\n\nIt is important to be aware of potential false positives, as legitimate scripts used by administrators for normal system and network management could also contain these patterns. Therefore, each detection should be analyzed in the context of its execution environment, taking into account the normal behavioral baselines.\n\nThis detection approach focuses on the tactics and techniques often utilized by adversaries, specifically those categorized under valid accounts usage for remote system interaction and command execution (without explicitly mentioning the tagging system used for classification)."
    }
  },
  {
    "instruction": "Can you explain how to detect: Obfuscated Powershell via RUNDLL LAUNCHER",
    "context": "",
    "output": "Certainly!\n\nIn order to detect obfuscated PowerShell via RUNDLL Launcher, you should focus on monitoring Windows PowerShell script block logs, ensuring that Script Block Logging is enabled. This approach is crucial for identifying suspicious activities involving the execution of PowerShell scripts through rundll32.exe, a method often leveraged by attackers to bypass detection mechanisms. Specifically, you should look for script blocks containing all of the following keywords: 'rundll32.exe', 'shell32.dll', 'shellexec_rundll', and 'powershell'. These indicators suggest that rundll32.exe is being used as a launcher for PowerShell scripts, a technique that can be associated with obfuscation attempts to evade security measures.\n\nGiven the requirement to monitor PowerShell script blocks, it's essential to consider the potential for false positives, as some legitimate applications might use similar methods for benign purposes. However, the detection of script blocks containing these specific keywords typically points to medium-level security threats related to obfuscated PowerShell scripts launched via rundll32.\n\nIn summary, by focusing on the specific characteristics of PowerShell script block logs and the presence of tell-tale keywords indicative of rundll32 usage as a PowerShell launcher, security professionals can identify potential obfuscation attempts. This detection strategy is aligned with understanding the tactics and techniques used in attacks, particularly those attempting to conceal malicious PowerShell activities under the guise of legitimate rundll32 processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via RUNDLL LAUNCHER",
      "answer": "In order to detect obfuscated PowerShell via RUNDLL Launcher, you should focus on monitoring Windows PowerShell script block logs, ensuring that Script Block Logging is enabled. This approach is crucial for identifying suspicious activities involving the execution of PowerShell scripts through rundll32.exe, a method often leveraged by attackers to bypass detection mechanisms. Specifically, you should look for script blocks containing all of the following keywords: 'rundll32.exe', 'shell32.dll', 'shellexec_rundll', and 'powershell'. These indicators suggest that rundll32.exe is being used as a launcher for PowerShell scripts, a technique that can be associated with obfuscation attempts to evade security measures.\n\nGiven the requirement to monitor PowerShell script blocks, it's essential to consider the potential for false positives, as some legitimate applications might use similar methods for benign purposes. However, the detection of script blocks containing these specific keywords typically points to medium-level security threats related to obfuscated PowerShell scripts launched via rundll32.\n\nIn summary, by focusing on the specific characteristics of PowerShell script block logs and the presence of tell-tale keywords indicative of rundll32 usage as a PowerShell launcher, security professionals can identify potential obfuscation attempts. This detection strategy is aligned with understanding the tactics and techniques used in attacks, particularly those attempting to conceal malicious PowerShell activities under the guise of legitimate rundll32 processes."
    }
  },
  {
    "instruction": "How to detect: \"GoogleUpdate.exe\" spawning a new instance of itself in an uncommon location as seen used by the Goofy Guineapig backdoor",
    "context": "",
    "output": "In order to detect \"GoogleUpdate.exe\" spawning a new instance of itself in an uncommon location as seen used by the Goofy Guineapig backdoor, you should monitor process creation events on Windows systems. Specifically, look for scenarios where a process with the parent image or image name ending with '\\GoogleUpdate.exe' is initiated. However, it's crucial to exclude legitimate GoogleUpdate paths, such as 'C:\\Program Files\\Google\\', 'C:\\Program Files (x86)\\Google\\', or any path under '\\AppData\\Local\\Google\\Update\\' to reduce false positives. This approach helps in identifying instances where the GoogleUpdate executable is used in a suspicious manner, potentially indicative of the Goofy Guineapig backdoor operation. The urgency of this detection is considered high, although there might be unknown scenarios causing false alarms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "\"GoogleUpdate.exe\" spawning a new instance of itself in an uncommon location as seen used by the Goofy Guineapig backdoor",
      "answer": "In order to detect \"GoogleUpdate.exe\" spawning a new instance of itself in an uncommon location as seen used by the Goofy Guineapig backdoor, you should monitor process creation events on Windows systems. Specifically, look for scenarios where a process with the parent image or image name ending with '\\GoogleUpdate.exe' is initiated. However, it's crucial to exclude legitimate GoogleUpdate paths, such as 'C:\\Program Files\\Google\\', 'C:\\Program Files (x86)\\Google\\', or any path under '\\AppData\\Local\\Google\\Update\\' to reduce false positives. This approach helps in identifying instances where the GoogleUpdate executable is used in a suspicious manner, potentially indicative of the Goofy Guineapig backdoor operation. The urgency of this detection is considered high, although there might be unknown scenarios causing false alarms."
    }
  },
  {
    "instruction": "Please help me detect the following: an appx package added the pipeline of the \"to be processed\" packages which is located in uncommon locations",
    "context": "",
    "output": "Sure!\nIn order to detect an appx package added the pipeline of the \"to be processed\" packages which is located in uncommon locations, you should: concentrate on monitoring Windows AppX Deployment-Server logs, specifically looking out for events with the EventID 854. This involves scrutinizing the paths where the packages are being added. Typically, one should be cautious of packages added in directories like 'C:\\Program Files\\WindowsApps\\', 'C:\\Program Files (x86)\\', 'C:\\Windows\\SystemApps\\', 'C:\\Windows\\PrintDialog\\', 'C:\\Windows\\ImmersiveControlPanel\\', and URLs with prefixes 'x-windowsupdate://' or using the 'file://' protocol for paths in 'C:\\Program Files'. However, it's equally important to exclude any detections from paths that refer to legitimate Microsoft services, for instance, URLs containing 'https://statics.teams.cdn.office.net/' or 'microsoft.com'. Such exclusions help in reducing false-positive alerts, where legitimate processes might be incorrectly flagged as malicious due to their location paths. This focus of monitoring serves as a defense mechanism against potential threats exploiting the AppX deployment service by inserting malicious packages into unusual directories, which could bypass conventional security measures. The strategy includes tagging activities associated with unusual app package locations without marking legitimate service paths as threats, thereby ensuring accuracy and efficiency in threat detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an appx package added the pipeline of the \"to be processed\" packages which is located in uncommon locations",
      "answer": "In order to detect an appx package added the pipeline of the \"to be processed\" packages which is located in uncommon locations, you should: concentrate on monitoring Windows AppX Deployment-Server logs, specifically looking out for events with the EventID 854. This involves scrutinizing the paths where the packages are being added. Typically, one should be cautious of packages added in directories like 'C:\\Program Files\\WindowsApps\\', 'C:\\Program Files (x86)\\', 'C:\\Windows\\SystemApps\\', 'C:\\Windows\\PrintDialog\\', 'C:\\Windows\\ImmersiveControlPanel\\', and URLs with prefixes 'x-windowsupdate://' or using the 'file://' protocol for paths in 'C:\\Program Files'. However, it's equally important to exclude any detections from paths that refer to legitimate Microsoft services, for instance, URLs containing 'https://statics.teams.cdn.office.net/' or 'microsoft.com'. Such exclusions help in reducing false-positive alerts, where legitimate processes might be incorrectly flagged as malicious due to their location paths. This focus of monitoring serves as a defense mechanism against potential threats exploiting the AppX deployment service by inserting malicious packages into unusual directories, which could bypass conventional security measures. The strategy includes tagging activities associated with unusual app package locations without marking legitimate service paths as threats, thereby ensuring accuracy and efficiency in threat detection."
    }
  },
  {
    "instruction": "Please help me detect the following: service installation in suspicious folder appdata",
    "context": "",
    "output": "Sure!\nIn order to detect service installation in suspicious folder appdata, you should monitor Windows systems' Service Control Manager logs for event ID 7045, which indicates service installation activities. Look for service installations where the binary is set to execute from paths that include '\\AppData\\', '\\\\\\\\127.0.0.1', or '\\\\\\\\localhost'. These locations are not standard for legitimate service installations and might indicate malicious activity where attackers attempt to disguise their malware as a legitimate service. However, it's important to exclude any events related to the Zoom Sharing Service, specifically those with service names matching 'Zoom Sharing Service' and binary paths starting with '\"C:\\Program Files\\Common Files\\Zoom\\Support\\CptService.exe', as these are considered legitimate. Keep in mind that there may be unknown false positives, and thus, some alerts might require further investigation to confirm malicious behavior. The detection strategy focuses on preventing attackers from exploiting unusual paths for installing malicious services as part of their operations, a method often used in persistence and execution tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "service installation in suspicious folder appdata",
      "answer": "In order to detect service installation in suspicious folder appdata, you should monitor Windows systems' Service Control Manager logs for event ID 7045, which indicates service installation activities. Look for service installations where the binary is set to execute from paths that include '\\AppData\\', '\\\\\\\\127.0.0.1', or '\\\\\\\\localhost'. These locations are not standard for legitimate service installations and might indicate malicious activity where attackers attempt to disguise their malware as a legitimate service. However, it's important to exclude any events related to the Zoom Sharing Service, specifically those with service names matching 'Zoom Sharing Service' and binary paths starting with '\"C:\\Program Files\\Common Files\\Zoom\\Support\\CptService.exe', as these are considered legitimate. Keep in mind that there may be unknown false positives, and thus, some alerts might require further investigation to confirm malicious behavior. The detection strategy focuses on preventing attackers from exploiting unusual paths for installing malicious services as part of their operations, a method often used in persistence and execution tactics."
    }
  },
  {
    "instruction": "How to detect: creation of a new user account. Such accounts may be used for persistence that do not require persistent remote access tools to be deployed on the system.",
    "context": "",
    "output": "In order to detect the creation of a new user account, which may be used for persistence that does not require persistent remote access tools to be deployed on the system, you should: focus on monitoring Linux systems, specifically those using the auditd service for logging. Your attention should be directed towards two main detection approaches within the audit logs.\n\nFirstly, look for syscall records of type 'SYSCALL' where the executable ends with '/useradd'. This targets the action of adding a new user through the command line, which is a common method attackers might use after gaining access to a system to ensure they can regain entry later even without their original exploit.\n\nSecondly, identify records of type 'ADD_USER'. These records are automatically logged on both Ubuntu and CentOS systems without the need for additional audit rule configurations. This captures the event where a user account is added, regardless of the method used, providing a broader net to catch unauthorized additions to the system.\n\nWhile monitoring for these events, keep in mind that administrative activities often include the legitimate creation of user accounts. Such legitimate activities are considered false positives in the context of detecting malicious intent. Therefore, a level of scrutiny and context is necessary when evaluating alerts to differentiate between normal administrative tasks and potential security threats. The monitoring process ideally involves correlating this activity with other suspicious actions on the system to improve the accuracy of detecting malicious persistence mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new user account. Such accounts may be used for persistence that do not require persistent remote access tools to be deployed on the system.",
      "answer": "In order to detect the creation of a new user account, which may be used for persistence that does not require persistent remote access tools to be deployed on the system, you should: focus on monitoring Linux systems, specifically those using the auditd service for logging. Your attention should be directed towards two main detection approaches within the audit logs.\n\nFirstly, look for syscall records of type 'SYSCALL' where the executable ends with '/useradd'. This targets the action of adding a new user through the command line, which is a common method attackers might use after gaining access to a system to ensure they can regain entry later even without their original exploit.\n\nSecondly, identify records of type 'ADD_USER'. These records are automatically logged on both Ubuntu and CentOS systems without the need for additional audit rule configurations. This captures the event where a user account is added, regardless of the method used, providing a broader net to catch unauthorized additions to the system.\n\nWhile monitoring for these events, keep in mind that administrative activities often include the legitimate creation of user accounts. Such legitimate activities are considered false positives in the context of detecting malicious intent. Therefore, a level of scrutiny and context is necessary when evaluating alerts to differentiate between normal administrative tasks and potential security threats. The monitoring process ideally involves correlating this activity with other suspicious actions on the system to improve the accuracy of detecting malicious persistence mechanisms."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential suspicious run-only executions compiled using OSACompile",
    "context": "",
    "output": "In order to detect potential suspicious run-only executions compiled using OSACompile, you should monitor process creation logs on macOS systems for instances where the command line contains 'osacompile', along with the flags ' -x ' and ' -e '. This specific combination of command and flags indicates an attempt to compile scripts in a manner that could be utilized for obfuscation or malicious purposes, suggesting a run-only execution which is harder to analyze and reverse-engineer. Pay close attention to the CommandLine field in the logs to catch such activities. Be aware that due to the nature of the detection, there might be instances where legitimate use triggers an alert, although such false positives are not specifically known. The severity level for this activity is considered high, underscoring the importance of monitoring for these specific command line parameters.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential suspicious run-only executions compiled using OSACompile",
      "answer": "In order to detect potential suspicious run-only executions compiled using OSACompile, you should monitor process creation logs on macOS systems for instances where the command line contains 'osacompile', along with the flags ' -x ' and ' -e '. This specific combination of command and flags indicates an attempt to compile scripts in a manner that could be utilized for obfuscation or malicious purposes, suggesting a run-only execution which is harder to analyze and reverse-engineer. Pay close attention to the CommandLine field in the logs to catch such activities. Be aware that due to the nature of the detection, there might be instances where legitimate use triggers an alert, although such false positives are not specifically known. The severity level for this activity is considered high, underscoring the importance of monitoring for these specific command line parameters."
    }
  },
  {
    "instruction": "Please help me detect the following: when PIM alerts are set to disabled.",
    "context": "",
    "output": "Sure!\nIn order to detect when PIM (Privileged Identity Management) alerts are set to disabled, you should: Focus on monitoring the audit logs within Azure services. Specifically, look for instances where the message indicates a \"Disable PIM Alert\" action has occurred. This detection is crucial because it might signal an attacker's attempt to weaken security by turning off alerts for privileged account changes, which should otherwise be closely monitored. However, it's important to remember that there might be legitimate reasons for an administrator to disable these alerts, such as during a controlled maintenance period. Due to the potential severity of an attacker successfully disabling PIM alerts to conceal their activities, such events are classified with a high level of concern.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when PIM alerts are set to disabled.",
      "answer": "In order to detect when PIM (Privileged Identity Management) alerts are set to disabled, you should: Focus on monitoring the audit logs within Azure services. Specifically, look for instances where the message indicates a \"Disable PIM Alert\" action has occurred. This detection is crucial because it might signal an attacker's attempt to weaken security by turning off alerts for privileged account changes, which should otherwise be closely monitored. However, it's important to remember that there might be legitimate reasons for an administrator to disable these alerts, such as during a controlled maintenance period. Due to the potential severity of an attacker successfully disabling PIM alerts to conceal their activities, such events are classified with a high level of concern."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Certify a tool for Active Directory certificate abuse based on PE metadata characteristics and common command line arguments.",
    "context": "",
    "output": "In order to detect Certify, a tool for Active Directory certificate abuse based on PE metadata characteristics and common command line arguments, you should: Monitor processes on Windows systems for the execution of an application named 'Certify.exe'. This can be identified through characteristics such as the image name ending with '\\Certify.exe', having 'Certify.exe' as the OriginalFileName, or containing the word 'Certify' within its description. Additionally, watch out for certain command line arguments indicative of potential abuse, which include executing the application with options such as '.exe cas ', '.exe find ', '.exe pkiobjects ', '.exe request ', and '.exe download '. Be especially vigilant for command lines containing specific options that could denote exploitation attempts, such as ' /vulnerable', ' /template:', ' /altname:', ' /domain:', ' /path:', and ' /ca:'. It's important to assess these indicators collectively as executing 'Certify.exe' with any of these command line options or arguments could signal malicious activity related to Active Directory certificate manipulation. Note that while detection is crucial, the possibility of unknown false positives exists, indicating that detections may sometimes not relate to malicious activity, thus requiring further investigation. The critical nature of this alert level underscores the importance of timely and accurate detection in protecting against potential certificate abuse scenarios.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Certify a tool for Active Directory certificate abuse based on PE metadata characteristics and common command line arguments.",
      "answer": "In order to detect Certify, a tool for Active Directory certificate abuse based on PE metadata characteristics and common command line arguments, you should: Monitor processes on Windows systems for the execution of an application named 'Certify.exe'. This can be identified through characteristics such as the image name ending with '\\Certify.exe', having 'Certify.exe' as the OriginalFileName, or containing the word 'Certify' within its description. Additionally, watch out for certain command line arguments indicative of potential abuse, which include executing the application with options such as '.exe cas ', '.exe find ', '.exe pkiobjects ', '.exe request ', and '.exe download '. Be especially vigilant for command lines containing specific options that could denote exploitation attempts, such as ' /vulnerable', ' /template:', ' /altname:', ' /domain:', ' /path:', and ' /ca:'. It's important to assess these indicators collectively as executing 'Certify.exe' with any of these command line options or arguments could signal malicious activity related to Active Directory certificate manipulation. Note that while detection is crucial, the possibility of unknown false positives exists, indicating that detections may sometimes not relate to malicious activity, thus requiring further investigation. The critical nature of this alert level underscores the importance of timely and accurate detection in protecting against potential certificate abuse scenarios."
    }
  },
  {
    "instruction": "Please help me detect the following: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
    "context": "",
    "output": "Sure!\nIn order to detect an adversary's use of legitimate desktop support and remote access software for establishing an interactive command and control channel to target systems within networks, you should: Monitor for the creation of processes that involve specific characteristics of known remote access software. This includes watching for processes related to the product \"UltraViewer,\" particularly those that are associated with the company \"DucFabulous Co,ltd,\" and specifically for executables named \"UltraViewer_Desktop.exe\". Keeping an eye on these indicators within Windows environments, where such software products are executed, is crucial. It is important, however, to consider that not all instances of this behavior are malicious\u2014as legitimate use of UltraViewer for support purposes may trigger similar activity. Nonetheless, given the medium level of threat associated with this behavior, vigilance is advised. This approach aids in identifying potentially unauthorized remote access attempts that exploit the functionalities of legitimate software, aligning with tactics and techniques adversaries leverage for command and control activities within a network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect an adversary's use of legitimate desktop support and remote access software for establishing an interactive command and control channel to target systems within networks, you should: Monitor for the creation of processes that involve specific characteristics of known remote access software. This includes watching for processes related to the product \"UltraViewer,\" particularly those that are associated with the company \"DucFabulous Co,ltd,\" and specifically for executables named \"UltraViewer_Desktop.exe\". Keeping an eye on these indicators within Windows environments, where such software products are executed, is crucial. It is important, however, to consider that not all instances of this behavior are malicious\u2014as legitimate use of UltraViewer for support purposes may trigger similar activity. Nonetheless, given the medium level of threat associated with this behavior, vigilance is advised. This approach aids in identifying potentially unauthorized remote access attempts that exploit the functionalities of legitimate software, aligning with tactics and techniques adversaries leverage for command and control activities within a network."
    }
  },
  {
    "instruction": "Can you explain how to detect: DNS queries to an \".onion\" address related to Tor routing networks",
    "context": "",
    "output": "Certainly!\n\nIn order to detect DNS queries to an \".onion\" address related to Tor routing networks, you should monitor DNS query logs from Windows systems for queries that include the '.onion' domain. This activity is associated with Tor, a service that enables anonymous communication, and accessing '.onion' addresses typically occurs over the Tor network. However, since DNS queries for '.onion' domains in a standard network scenario should not occur, this could indicate an attempt to communicate with Tor services or navigate to dark web resources. It's important to note that the detection level for this activity is regarded as high, indicating that it's a significant security concern. False positives are unknown, suggesting that while detections might be rare, each should be investigated thoroughly due to the serious nature of the attempt to access these services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DNS queries to an \".onion\" address related to Tor routing networks",
      "answer": "In order to detect DNS queries to an \".onion\" address related to Tor routing networks, you should monitor DNS query logs from Windows systems for queries that include the '.onion' domain. This activity is associated with Tor, a service that enables anonymous communication, and accessing '.onion' addresses typically occurs over the Tor network. However, since DNS queries for '.onion' domains in a standard network scenario should not occur, this could indicate an attempt to communicate with Tor services or navigate to dark web resources. It's important to note that the detection level for this activity is regarded as high, indicating that it's a significant security concern. False positives are unknown, suggesting that while detections might be rare, each should be investigated thoroughly due to the serious nature of the attempt to access these services."
    }
  },
  {
    "instruction": "How can I detect: suspicious command line arguments of common data compression tools",
    "context": "",
    "output": "In order to detect suspicious command line arguments of common data compression tools, you should focus on monitoring process creation logs on Windows systems. Look for processes starting with the original file names that include patterns like '7z*.exe', '*rar.exe', or '*Command*Line*RAR*'. Additionally, pay attention to the command line arguments containing specific flags such as ' -p', ' -ta', ' -tb', ' -sdel', ' -dw', or ' -hp'. These flags could indicate an attempt to manipulate archives in a suspicious manner, possibly to hide, encrypt, or delete information. However, it's crucial to avoid false positives by excluding any activity where the parent image path starts with 'C:\\Program'. By implementing this detection logic, one can significantly improve the identification of potentially malicious use of compression tools, which is often associated with tactics and techniques including exfiltration, evasion, and command and control. The rule is set to a high level of importance due to the potential severity of these activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious command line arguments of common data compression tools",
      "answer": "In order to detect suspicious command line arguments of common data compression tools, you should focus on monitoring process creation logs on Windows systems. Look for processes starting with the original file names that include patterns like '7z*.exe', '*rar.exe', or '*Command*Line*RAR*'. Additionally, pay attention to the command line arguments containing specific flags such as ' -p', ' -ta', ' -tb', ' -sdel', ' -dw', or ' -hp'. These flags could indicate an attempt to manipulate archives in a suspicious manner, possibly to hide, encrypt, or delete information. However, it's crucial to avoid false positives by excluding any activity where the parent image path starts with 'C:\\Program'. By implementing this detection logic, one can significantly improve the identification of potentially malicious use of compression tools, which is often associated with tactics and techniques including exfiltration, evasion, and command and control. The rule is set to a high level of importance due to the potential severity of these activities."
    }
  },
  {
    "instruction": "Please help me detect the following: Exfiltration Over Alternative Protocol - ICMP. Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.",
    "context": "",
    "output": "Sure!\nIn order to detect Exfiltration Over Alternative Protocol - ICMP, where adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel, you should focus on monitoring PowerShell scripts in Windows environments. Ensure that Script Block Logging is enabled to capture the PowerShell activities. Specifically, look for scripts that create a new object instance followed by initiating a ping using the 'System.Net.NetworkInformation.Ping' class and then sending it. This behavior could indicate an attempt to use ICMP for data exfiltration, which is not typical for standard PowerShell usage. Be aware, though, that legitimate scripts might also use the Ping class for valid purposes, so consider this when assessing alerts. This approach targets intermediate-level threats and helps to identify suspicious activities related to alternative data exfiltration methods.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Exfiltration Over Alternative Protocol - ICMP. Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.",
      "answer": "In order to detect Exfiltration Over Alternative Protocol - ICMP, where adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel, you should focus on monitoring PowerShell scripts in Windows environments. Ensure that Script Block Logging is enabled to capture the PowerShell activities. Specifically, look for scripts that create a new object instance followed by initiating a ping using the 'System.Net.NetworkInformation.Ping' class and then sending it. This behavior could indicate an attempt to use ICMP for data exfiltration, which is not typical for standard PowerShell usage. Be aware, though, that legitimate scripts might also use the Ping class for valid purposes, so consider this when assessing alerts. This approach targets intermediate-level threats and helps to identify suspicious activities related to alternative data exfiltration methods."
    }
  },
  {
    "instruction": "Can you explain how to detect: Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect attempts to misuse Remote.exe, which is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files, you should: focus on monitoring process creation activity on Windows systems. Specifically, attention should be directed at instances where processes are initiated and the associated image file name ends with '\\remote.exe' or the original file name is exactly 'remote.exe'. This approach is guided by recognizing the potential exploitation of Remote.exe for unauthorized actions. However, it is crucial to account for legitimate use cases, such as approved installations of the Windows SDK with Debugging Tools for Windows (WinDbg), which are recognized as potential sources of false positives. The sensitivity of detection for this activity is categorized as medium, indicating a balanced approach to identifying potential threats while minimizing unnecessary alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.",
      "answer": "In order to detect attempts to misuse Remote.exe, which is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files, you should: focus on monitoring process creation activity on Windows systems. Specifically, attention should be directed at instances where processes are initiated and the associated image file name ends with '\\remote.exe' or the original file name is exactly 'remote.exe'. This approach is guided by recognizing the potential exploitation of Remote.exe for unauthorized actions. However, it is crucial to account for legitimate use cases, such as approved installations of the Windows SDK with Debugging Tools for Windows (WinDbg), which are recognized as potential sources of false positives. The sensitivity of detection for this activity is categorized as medium, indicating a balanced approach to identifying potential threats while minimizing unnecessary alerts."
    }
  },
  {
    "instruction": "How can I detect: Rclone config file being created",
    "context": "",
    "output": "In order to detect Rclone config file being created, you should monitor Windows file events for the creation of files with the '.rdp' extension by a range of applications that include browsers such as Brave, CCleaner Browser, Chromium, Firefox, Google Chrome, Internet Explorer, Microsoft Edge, Opera, Vivaldi, and Whale. Additionally, keep an eye on file creations by email clients like Outlook, the Windows Mail client (via RuntimeBroker.exe), and Thunderbird, as well as chat applications like Discord, Keybase, Microsoft Teams, and Slack. This detection focuses on a broad set of commonly used applications which might be leveraged to create or modify Rclone configuration files, suggesting potential unauthorized or malicious activities related to data exfiltration or command and control.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Rclone config file being created",
      "answer": "In order to detect Rclone config file being created, you should monitor Windows file events for the creation of files with the '.rdp' extension by a range of applications that include browsers such as Brave, CCleaner Browser, Chromium, Firefox, Google Chrome, Internet Explorer, Microsoft Edge, Opera, Vivaldi, and Whale. Additionally, keep an eye on file creations by email clients like Outlook, the Windows Mail client (via RuntimeBroker.exe), and Thunderbird, as well as chat applications like Discord, Keybase, Microsoft Teams, and Slack. This detection focuses on a broad set of commonly used applications which might be leveraged to create or modify Rclone configuration files, suggesting potential unauthorized or malicious activities related to data exfiltration or command and control."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Detect usage of the \"runexehelper.exe\" binary as a proxy to launch other programs",
    "context": "",
    "output": "In order to detect usage of the \"runexehelper.exe\" binary as a proxy to launch other programs, you should focus on monitoring the creation of processes within Windows operating systems. Specifically, look for instances where the parent image ends with '\\runexehelper.exe', which indicates that this binary is being used to initiate other processes. As false positives are categorized as unknown, it is essential to remain vigilant and further investigate any matches found. This method directly relates to identifying malicious processes and execution techniques, helping to uncover potentially stealthy behaviors used by attackers to evade detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect usage of the \"runexehelper.exe\" binary as a proxy to launch other programs",
      "answer": "In order to detect usage of the \"runexehelper.exe\" binary as a proxy to launch other programs, you should focus on monitoring the creation of processes within Windows operating systems. Specifically, look for instances where the parent image ends with '\\runexehelper.exe', which indicates that this binary is being used to initiate other processes. As false positives are categorized as unknown, it is essential to remain vigilant and further investigate any matches found. This method directly relates to identifying malicious processes and execution techniques, helping to uncover potentially stealthy behaviors used by attackers to evade detection."
    }
  },
  {
    "instruction": "Can you explain how to detect: deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil",
    "context": "",
    "output": "Certainly!\n\nIn order to detect deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: monitor PowerShell scripts on Windows systems for specific command and method invocations. Pay special attention to scripts that contain the commands 'Get-WmiObject', 'gwmi', 'Get-CimInstance', 'gcim' which are used to interact with Windows Management Instrumentation (WMI) objects, and 'Win32_Shadowcopy' indicating interaction with Windows Volume Shadow Copies. Also, be alert for the presence of '.Delete()', 'Remove-WmiObject', 'rwmi', 'Remove-CimInstance', or 'rcim' within the scripts, as these are indicative of attempts to delete objects, including Shadow Copies. Implementing monitoring based on these script contents can help in early detection of ransomware activity that attempts this specific kind of attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil",
      "answer": "In order to detect deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: monitor PowerShell scripts on Windows systems for specific command and method invocations. Pay special attention to scripts that contain the commands 'Get-WmiObject', 'gwmi', 'Get-CimInstance', 'gcim' which are used to interact with Windows Management Instrumentation (WMI) objects, and 'Win32_Shadowcopy' indicating interaction with Windows Volume Shadow Copies. Also, be alert for the presence of '.Delete()', 'Remove-WmiObject', 'rwmi', 'Remove-CimInstance', or 'rcim' within the scripts, as these are indicative of attempts to delete objects, including Shadow Copies. Implementing monitoring based on these script contents can help in early detection of ransomware activity that attempts this specific kind of attack."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the direct syscall of NtOpenProcess which might be done from a CobaltStrike BOF.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the usage of the direct syscall of NtOpenProcess which might be done from a CobaltStrike BOF, you should: focus on monitoring process access activities on Windows systems for signs of unauthorized or malicious behavior. Specifically, be alert for any instance where the call trace starts with 'UNKNOWN', which could indicate the direct use of system calls to manipulate processes, bypassing standard API usage. This technique is a common trait of sophisticated threats like CobaltStrike's Beacon Object Files (BOF), which can perform operations directly in memory to evade detection.\n\nHowever, it's crucial to filter out numerous known benign behaviors that might otherwise trigger false positives. Such behaviors include legitimate process interactions by various commonly used applications and system processes. For instance, specific exclusions are made for processes related to security software like Cylance, system utilities like systeminfo.exe, common applications including web browsers (Chrome, Firefox, Microsoft Edge), developer tools (Microsoft Visual Studio Code), communication platforms (Microsoft Teams, Discord, Yammer), system maintenance tools (CCleaner), and others including Evernote and background task processes.\n\nAlso, be aware of certain instances where a process's call trace might be flagged as 'UNKNOWN' due to benign kernel or API call audits, which do not signify malicious activity and should be recognized as false positives.\n\nBy implementing such focused monitoring while actively excluding identified legitimate scenarios, effective detection of malicious direct syscall usage, such as those observed in CobaltStrike BOF attacks, can be achieved. This approach helps maintain the balance between sensitivity to threats and minimizing disruption from false alerts, crucial for maintaining operational efficiency and security posture.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the direct syscall of NtOpenProcess which might be done from a CobaltStrike BOF.",
      "answer": "In order to detect the usage of the direct syscall of NtOpenProcess which might be done from a CobaltStrike BOF, you should: focus on monitoring process access activities on Windows systems for signs of unauthorized or malicious behavior. Specifically, be alert for any instance where the call trace starts with 'UNKNOWN', which could indicate the direct use of system calls to manipulate processes, bypassing standard API usage. This technique is a common trait of sophisticated threats like CobaltStrike's Beacon Object Files (BOF), which can perform operations directly in memory to evade detection.\n\nHowever, it's crucial to filter out numerous known benign behaviors that might otherwise trigger false positives. Such behaviors include legitimate process interactions by various commonly used applications and system processes. For instance, specific exclusions are made for processes related to security software like Cylance, system utilities like systeminfo.exe, common applications including web browsers (Chrome, Firefox, Microsoft Edge), developer tools (Microsoft Visual Studio Code), communication platforms (Microsoft Teams, Discord, Yammer), system maintenance tools (CCleaner), and others including Evernote and background task processes.\n\nAlso, be aware of certain instances where a process's call trace might be flagged as 'UNKNOWN' due to benign kernel or API call audits, which do not signify malicious activity and should be recognized as false positives.\n\nBy implementing such focused monitoring while actively excluding identified legitimate scenarios, effective detection of malicious direct syscall usage, such as those observed in CobaltStrike BOF attacks, can be achieved. This approach helps maintain the balance between sensitivity to threats and minimizing disruption from false alerts, crucial for maintaining operational efficiency and security posture."
    }
  },
  {
    "instruction": "How can I detect: usage of the \"dir\" command that is part of Windows batch/cmd to collect information about directories",
    "context": "",
    "output": "In order to detect usage of the \"dir\" command that is part of Windows batch/cmd to collect information about directories, you should: Monitor the creation of processes on Windows systems for command lines that contain all parts of the 'dir', ' /s', and ' /b' commands. This indicates an attempt to use the 'dir' command to recursively list all files and directories in a specified path, in a bare format without any additional information like file sizes or dates, which could be utilized for gathering detailed directory structure information. This activity should be flagged and scrutinized, although the risk level is considered low, and there might be instances where this command is used legitimately, hence erroneously flagged cases can occur.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"dir\" command that is part of Windows batch/cmd to collect information about directories",
      "answer": "In order to detect usage of the \"dir\" command that is part of Windows batch/cmd to collect information about directories, you should: Monitor the creation of processes on Windows systems for command lines that contain all parts of the 'dir', ' /s', and ' /b' commands. This indicates an attempt to use the 'dir' command to recursively list all files and directories in a specified path, in a bare format without any additional information like file sizes or dates, which could be utilized for gathering detailed directory structure information. This activity should be flagged and scrutinized, although the risk level is considered low, and there might be instances where this command is used legitimately, hence erroneously flagged cases can occur."
    }
  },
  {
    "instruction": "How can I detect: code integrity failures such as missing page hashes or corrupted drivers due unauthorized modification. This could be a sign of tampered binaries.",
    "context": "",
    "output": "In order to detect code integrity failures such as missing page hashes or corrupted drivers due to unauthorized modification, which could be a sign of tampered binaries, you should: monitor Windows security logs for the occurrence of Event IDs 5038 and 6281. These Event IDs are indicative of issues with code integrity, suggesting that system files or drivers may have been modified or corrupted, potentially as part of malicious activity. It's important to note that these events could sometimes be triggered by disk device errors, which are considered low-level false positives in the context of this detection strategy. By staying vigilant against these specific event codes, it's possible to identify and investigate instances of suspected unauthorized file modifications, aiding in the protection of the system against tampering and related security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "code integrity failures such as missing page hashes or corrupted drivers due unauthorized modification. This could be a sign of tampered binaries.",
      "answer": "In order to detect code integrity failures such as missing page hashes or corrupted drivers due to unauthorized modification, which could be a sign of tampered binaries, you should: monitor Windows security logs for the occurrence of Event IDs 5038 and 6281. These Event IDs are indicative of issues with code integrity, suggesting that system files or drivers may have been modified or corrupted, potentially as part of malicious activity. It's important to note that these events could sometimes be triggered by disk device errors, which are considered low-level false positives in the context of this detection strategy. By staying vigilant against these specific event codes, it's possible to identify and investigate instances of suspected unauthorized file modifications, aiding in the protection of the system against tampering and related security threats."
    }
  },
  {
    "instruction": "Explain how should I detect the following: processes spawned from web servers (php, tomcat, iis...etc) that perform reconnaissance looking for the existence of popular scripting tools (perl, python, wget) on the system via the help commands",
    "context": "",
    "output": "In order to detect processes spawned from web servers (php, tomcat, iis...etc) that perform reconnaissance looking for the existence of popular scripting tools (perl, python, wget) on the system via the help commands, you should: monitor the creation of processes on Windows systems, focusing on those initiated by web server executables such as `w3wp.exe` (IIS web server), `php-cgi.exe` (PHP), `nginx.exe`, `httpd.exe` (Apache), `caddy.exe`, `ws_tomcatservice.exe` (Tomcat service), as well as processes related to Java, specifically `java.exe` and `javaw.exe`, when they are associated with Tomcat (either through command line arguments indicating Tomcat or by the parent image path). Specifically, look for these parent processes executing commands that involve checking for the presence of the scripting tools: perl, python, and wget, through the usage of their `--help` or `-h` command line options which are commonly used to display their available options or help documentation. This activity is indicative of an attacker performing reconnaissance to understand what scripting capabilities are present on the server which they can potentially leverage. The fields to watch within the logs to identify such behaviour include the Image, CommandLine, and ParentCommandLine. Awareness of this activity is crucial as it poses a high risk, although the nature of this detection could lead to some false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "processes spawned from web servers (php, tomcat, iis...etc) that perform reconnaissance looking for the existence of popular scripting tools (perl, python, wget) on the system via the help commands",
      "answer": "In order to detect processes spawned from web servers (php, tomcat, iis...etc) that perform reconnaissance looking for the existence of popular scripting tools (perl, python, wget) on the system via the help commands, you should: monitor the creation of processes on Windows systems, focusing on those initiated by web server executables such as `w3wp.exe` (IIS web server), `php-cgi.exe` (PHP), `nginx.exe`, `httpd.exe` (Apache), `caddy.exe`, `ws_tomcatservice.exe` (Tomcat service), as well as processes related to Java, specifically `java.exe` and `javaw.exe`, when they are associated with Tomcat (either through command line arguments indicating Tomcat or by the parent image path). Specifically, look for these parent processes executing commands that involve checking for the presence of the scripting tools: perl, python, and wget, through the usage of their `--help` or `-h` command line options which are commonly used to display their available options or help documentation. This activity is indicative of an attacker performing reconnaissance to understand what scripting capabilities are present on the server which they can potentially leverage. The fields to watch within the logs to identify such behaviour include the Image, CommandLine, and ParentCommandLine. Awareness of this activity is crucial as it poses a high risk, although the nature of this detection could lead to some false positives."
    }
  },
  {
    "instruction": "How can I detect: abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser.\nAn attacker can use this to authenticate to Azure AD in a browser as that user.\n",
    "context": "",
    "output": "In order to detect abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser. An attacker can use this to authenticate to Azure AD in a browser as that user, you should: monitor for the loading of the MicrosoftAccountTokenProvider.dll from the C:\\Windows\\System32 directory on Windows systems. This detection is based on the premise that during an attack attempting to exploit Azure Browser SSO for unauthorized authentication via OAuth 2.0 refresh tokens, the MicrosoftAccountTokenProvider.dll would be crucial since it is linked to handling of Microsoft account tokens.\n\nTo refine the detection and minimize false positives, it's advisable to exclude events where the loaded images are part of legitimate background tasks, including tasks started by BackgroundTaskHost.exe located either in the System32 or SysWOW64 directories. Similarly, activities initiated by recognized developer tools like Microsoft Visual Studio, browsers such as Internet Explorer or Microsoft Edge, as well as OneDrive, should also be considered as exceptions unless other suspicious activities correlate.\n\nThis monitoring strategy leverages the understanding that simply loading the said DLL can occur in non-malicious scenarios. Therefore, alerting on this event alone is classified with a low-level severity. It is most effective when this activity is correlated with other suspicious actions that could indicate an attack aimed at misusing Azure Browser SSO features to gain unauthorized access. The tags associated with this attack would relate to techniques that abuse legitimate authentication processes to perform unauthorized actions, reflecting an exploitation of trusted processes for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser.\nAn attacker can use this to authenticate to Azure AD in a browser as that user.\n",
      "answer": "In order to detect abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser. An attacker can use this to authenticate to Azure AD in a browser as that user, you should: monitor for the loading of the MicrosoftAccountTokenProvider.dll from the C:\\Windows\\System32 directory on Windows systems. This detection is based on the premise that during an attack attempting to exploit Azure Browser SSO for unauthorized authentication via OAuth 2.0 refresh tokens, the MicrosoftAccountTokenProvider.dll would be crucial since it is linked to handling of Microsoft account tokens.\n\nTo refine the detection and minimize false positives, it's advisable to exclude events where the loaded images are part of legitimate background tasks, including tasks started by BackgroundTaskHost.exe located either in the System32 or SysWOW64 directories. Similarly, activities initiated by recognized developer tools like Microsoft Visual Studio, browsers such as Internet Explorer or Microsoft Edge, as well as OneDrive, should also be considered as exceptions unless other suspicious activities correlate.\n\nThis monitoring strategy leverages the understanding that simply loading the said DLL can occur in non-malicious scenarios. Therefore, alerting on this event alone is classified with a low-level severity. It is most effective when this activity is correlated with other suspicious actions that could indicate an attack aimed at misusing Azure Browser SSO features to gain unauthorized access. The tags associated with this attack would relate to techniques that abuse legitimate authentication processes to perform unauthorized actions, reflecting an exploitation of trusted processes for malicious purposes."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of the \"wusa.exe\" (Windows Update Standalone Installer) utility to extract cab using the \"/extract\" argument which is not longer supported. This could indicate an attacker using an old technique",
    "context": "",
    "output": "Sure!\nIn order to detect usage of the \"wusa.exe\" (Windows Update Standalone Installer) utility to extract cab using the \"/extract\" argument which is no longer supported, indicating an attacker may be using an old technique, you should: Monitor for the creation of processes on Windows systems where the process name ends with '\\wusa.exe' and the command line contains the '/extract:' argument. It's vital to note that while the \"extract\" flag is deprecated and its use can suggest malicious activity, there can be instances of false positives. This is particularly true for situations where older versions of 'wusa.exe' are being used legitimately, requiring closer observation of the file path of the cab being extracted to ascertain intent. The risk level associated with this activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"wusa.exe\" (Windows Update Standalone Installer) utility to extract cab using the \"/extract\" argument which is not longer supported. This could indicate an attacker using an old technique",
      "answer": "In order to detect usage of the \"wusa.exe\" (Windows Update Standalone Installer) utility to extract cab using the \"/extract\" argument which is no longer supported, indicating an attacker may be using an old technique, you should: Monitor for the creation of processes on Windows systems where the process name ends with '\\wusa.exe' and the command line contains the '/extract:' argument. It's vital to note that while the \"extract\" flag is deprecated and its use can suggest malicious activity, there can be instances of false positives. This is particularly true for situations where older versions of 'wusa.exe' are being used legitimately, requiring closer observation of the file path of the cab being extracted to ascertain intent. The risk level associated with this activity is considered medium."
    }
  },
  {
    "instruction": "How can I detect: use of PSAsyncShell an Asynchronous TCP Reverse Shell written in powershell",
    "context": "",
    "output": "In order to detect the use of PSAsyncShell, an Asynchronous TCP Reverse Shell written in PowerShell, you should: focus on monitoring PowerShell script activity within Windows environments, specifically targeting instances where Script Block Logging is enabled. This involves looking for any appearance of the string 'PSAsyncShell' within the ScriptBlockText fields of logged PowerShell scripts. Such detection could indicate an adversary's attempt to establish a reverse shell, facilitating remote control over the targeted system in a manner that's designed to evade detection. Due to the nature of this technique, false positives are considered unlikely, and the detection of this activity should be treated with a high level of suspicion, reflecting its potential severity and impact.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of PSAsyncShell an Asynchronous TCP Reverse Shell written in powershell",
      "answer": "In order to detect the use of PSAsyncShell, an Asynchronous TCP Reverse Shell written in PowerShell, you should: focus on monitoring PowerShell script activity within Windows environments, specifically targeting instances where Script Block Logging is enabled. This involves looking for any appearance of the string 'PSAsyncShell' within the ScriptBlockText fields of logged PowerShell scripts. Such detection could indicate an adversary's attempt to establish a reverse shell, facilitating remote control over the targeted system in a manner that's designed to evade detection. Due to the nature of this technique, false positives are considered unlikely, and the detection of this activity should be treated with a high level of suspicion, reflecting its potential severity and impact."
    }
  },
  {
    "instruction": "How can I detect: creation of known offensive powershell scripts used for exploitation",
    "context": "",
    "output": "In order to detect the creation of known offensive PowerShell scripts used for exploitation, you should monitor file events on Windows systems looking for instances where filenames suggest the execution or implementation of known exploit scripts. Specifically, watch for files that end with names indicative of PowerShell scripts utilized in various attack techniques, such as adding backdoors, exfiltration of data, persistence mechanisms, registry modifications for bypassing security measures, and many others that are often seen in cyber attacks. The scripts identified contain a wide array of functionalities from gathering system information, capturing keystrokes, bypassing antivirus software, exploiting vulnerabilities, performing network reconnaissance, to credential dumping, and more. Additionally, pay special attention to filenames that contain 'Invoke-Sharp', a pattern that's common in many variant exploit scripts, as an indicator of potentially malicious activity. Recognizing these file events is critical, as they are associated with high-level attack behaviors, including but not limited to credential access, execution, persistence, privilege escalation, lateral movement, and exfiltration. Identifying the creation or execution of these scripts early can significantly mitigate the risk of a successful attack by allowing for quick response and remediation measures.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of known offensive powershell scripts used for exploitation",
      "answer": "In order to detect the creation of known offensive PowerShell scripts used for exploitation, you should monitor file events on Windows systems looking for instances where filenames suggest the execution or implementation of known exploit scripts. Specifically, watch for files that end with names indicative of PowerShell scripts utilized in various attack techniques, such as adding backdoors, exfiltration of data, persistence mechanisms, registry modifications for bypassing security measures, and many others that are often seen in cyber attacks. The scripts identified contain a wide array of functionalities from gathering system information, capturing keystrokes, bypassing antivirus software, exploiting vulnerabilities, performing network reconnaissance, to credential dumping, and more. Additionally, pay special attention to filenames that contain 'Invoke-Sharp', a pattern that's common in many variant exploit scripts, as an indicator of potentially malicious activity. Recognizing these file events is critical, as they are associated with high-level attack behaviors, including but not limited to credential access, execution, persistence, privilege escalation, lateral movement, and exfiltration. Identifying the creation or execution of these scripts early can significantly mitigate the risk of a successful attack by allowing for quick response and remediation measures."
    }
  },
  {
    "instruction": "How can I detect: PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0",
    "context": "",
    "output": "In order to detect PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0, you should: Monitor PowerShell classic start events on Windows systems, focusing specifically on event fields to extract crucial information. Look for instances where the PowerShell Engine Version starts with '2.', indicating the use of version 2.0, potentially to exploit vulnerabilities or bypass security features present in newer versions. However, to reduce false positives and improve accuracy, exclude any events where the Host Version also starts with '2.', as this suggests the host naturally runs this older version, and the activity may not be malicious. Tracking such events is pivotal in identifying attempts to utilize a known downgrade attack technique, where attackers force the use of an older and possibly more vulnerable PowerShell version on a host that supports newer, more secure versions. This monitoring strategy is considered of medium importance in defending against this attack method and is tagged with tactics and techniques such as Defense Evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0",
      "answer": "In order to detect PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0, you should: Monitor PowerShell classic start events on Windows systems, focusing specifically on event fields to extract crucial information. Look for instances where the PowerShell Engine Version starts with '2.', indicating the use of version 2.0, potentially to exploit vulnerabilities or bypass security features present in newer versions. However, to reduce false positives and improve accuracy, exclude any events where the Host Version also starts with '2.', as this suggests the host naturally runs this older version, and the activity may not be malicious. Tracking such events is pivotal in identifying attempts to utilize a known downgrade attack technique, where attackers force the use of an older and possibly more vulnerable PowerShell version on a host that supports newer, more secure versions. This monitoring strategy is considered of medium importance in defending against this attack method and is tagged with tactics and techniques such as Defense Evasion."
    }
  },
  {
    "instruction": "Can you explain how to detect: Obfuscated Powershell via use Clip.exe in Scripts",
    "context": "",
    "output": "Certainly!\n\nIn order to detect obfuscated PowerShell via use Clip.exe in Scripts, you should focus on monitoring Windows security logs, specifically looking for instances where the \"System Security Extension\" audit subcategory has been enabled to record Event ID (EID) 4697. This specific event ID is vital as it logs the creation or installation of a service, an action which can be used maliciously, especially when PowerShell commands are designed to evade detection by leveraging the clipboard utility (Clip.exe) as part of their process. \n\nIn your detection strategy, pay particular attention to any service creation logs where the Service File Name includes references to 'Clipboard' or begins with 'i'. These service file names are indicators that the clipboard utility is being used in a manner that is potentially malicious, often as part of an obfuscation technique to hide the true purpose or actions of a PowerShell script.\n\nConsider any hits on these criteria to be of high importance due to their potential for indicating malicious activity. However, be aware that there could be unknown false positives, as legitimate services might coincidentally meet these criteria under very rare circumstances. \n\nThe tactics associated with this kind of detection include \"Execution\" and \"Defense Evasion,\" as the attackers are executing PowerShell scripts and attempting to evade detection through the use of obfuscation techniques involving system utilities like Clip.exe. This approach highlights the importance of tight monitoring and control over script execution and privilege escalation within a Windows environment to mitigate such threats effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via use Clip.exe in Scripts",
      "answer": "In order to detect obfuscated PowerShell via use Clip.exe in Scripts, you should focus on monitoring Windows security logs, specifically looking for instances where the \"System Security Extension\" audit subcategory has been enabled to record Event ID (EID) 4697. This specific event ID is vital as it logs the creation or installation of a service, an action which can be used maliciously, especially when PowerShell commands are designed to evade detection by leveraging the clipboard utility (Clip.exe) as part of their process. \n\nIn your detection strategy, pay particular attention to any service creation logs where the Service File Name includes references to 'Clipboard' or begins with 'i'. These service file names are indicators that the clipboard utility is being used in a manner that is potentially malicious, often as part of an obfuscation technique to hide the true purpose or actions of a PowerShell script.\n\nConsider any hits on these criteria to be of high importance due to their potential for indicating malicious activity. However, be aware that there could be unknown false positives, as legitimate services might coincidentally meet these criteria under very rare circumstances. \n\nThe tactics associated with this kind of detection include \"Execution\" and \"Defense Evasion,\" as the attackers are executing PowerShell scripts and attempting to evade detection through the use of obfuscation techniques involving system utilities like Clip.exe. This approach highlights the importance of tight monitoring and control over script execution and privilege escalation within a Windows environment to mitigate such threats effectively."
    }
  },
  {
    "instruction": "How to detect: Obfuscated Powershell via use Clip.exe in Scripts",
    "context": "",
    "output": "In order to detect obfuscated Powershell via use Clip.exe in Scripts, you should: Identify instances where Powershell modules, specifically within Windows environments, exhibit peculiar behavior suggesting the use of obfuscation techniques involving Clip.exe. This detection focuses on monitoring Powershell modules for patterns that combine the use of the \"echo\" command with \"Clip.exe\" or variations of the \"Invoke\" command. This could signify attempts to manipulate or interact with the clipboard in a manner that's not standard for typical administrative tasks, potentially indicating malicious activity designed to hide its presence or intentions. Monitoring for such patterns requires careful attention to payload content that matches regular expressions hinting at this unusual combination of commands. It is important to note that due to the complex and adaptive nature of such obfuscation techniques, there might be cases where legitimate activity triggers a false positive, although these instances are currently unknown. This detection strategy is classified with a high level of importance due to the sophisticated nature of the attack vector, which leverages obfuscation to evade detection. The tactics and techniques associated with this detection strategy align with those identified by the MITRE ATT&CK framework, specifically focusing on the execution aspect of attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via use Clip.exe in Scripts",
      "answer": "In order to detect obfuscated Powershell via use Clip.exe in Scripts, you should: Identify instances where Powershell modules, specifically within Windows environments, exhibit peculiar behavior suggesting the use of obfuscation techniques involving Clip.exe. This detection focuses on monitoring Powershell modules for patterns that combine the use of the \"echo\" command with \"Clip.exe\" or variations of the \"Invoke\" command. This could signify attempts to manipulate or interact with the clipboard in a manner that's not standard for typical administrative tasks, potentially indicating malicious activity designed to hide its presence or intentions. Monitoring for such patterns requires careful attention to payload content that matches regular expressions hinting at this unusual combination of commands. It is important to note that due to the complex and adaptive nature of such obfuscation techniques, there might be cases where legitimate activity triggers a false positive, although these instances are currently unknown. This detection strategy is classified with a high level of importance due to the sophisticated nature of the attack vector, which leverages obfuscation to evade detection. The tactics and techniques associated with this detection strategy align with those identified by the MITRE ATT&CK framework, specifically focusing on the execution aspect of attacks."
    }
  },
  {
    "instruction": "Please help me detect the following: specific URL pattern containing a specific extension and parameters pointing to an IP address. This pattern was seen being used by RomCOM potentially exploiting CVE-2023-36884",
    "context": "",
    "output": "Sure!\nIn order to detect a specific URL pattern containing a specific extension and parameters pointing to an IP address, which was seen being used by RomCOM potentially exploiting CVE-2023-36884, you should: Focus on monitoring proxy logs for GET requests that are trying to access URLs with certain file extensions (like zip, asp, htm, url, xml, chm, mht, vbs, or search-ms) followed by a parameter '?d=' that looks to be an IP address in the format of x.x.x.x. This pattern indicates a high-risk attempt, possibly associated with a known vulnerability exploitation. It is crucial to be vigilant of such patterns to timely identify and mitigate potential security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific URL pattern containing a specific extension and parameters pointing to an IP address. This pattern was seen being used by RomCOM potentially exploiting CVE-2023-36884",
      "answer": "In order to detect a specific URL pattern containing a specific extension and parameters pointing to an IP address, which was seen being used by RomCOM potentially exploiting CVE-2023-36884, you should: Focus on monitoring proxy logs for GET requests that are trying to access URLs with certain file extensions (like zip, asp, htm, url, xml, chm, mht, vbs, or search-ms) followed by a parameter '?d=' that looks to be an IP address in the format of x.x.x.x. This pattern indicates a high-risk attempt, possibly associated with a known vulnerability exploitation. It is crucial to be vigilant of such patterns to timely identify and mitigate potential security threats."
    }
  },
  {
    "instruction": "How to detect: creation of a new user profile with a specific username, seen being used by some variants of the COLDSTEEL RAT.",
    "context": "",
    "output": "In order to detect the creation of a new user profile with a specific username, seen being used by some variants of the COLDSTEEL RAT, you should: focus on Windows registry settings as the primary log source. Monitor any 'SetValue' EventType within Windows Registry, specifically targeting changes made to the registry keys that fall under '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList\\S-1-5-21-' combined with '\\ProfileImagePath'. Look for modifications that include the terms 'ANONYMOUS' or '_DomainUser_' within the details of these registry changes. These specific modifications are indicative of the creation of a new user profile, which can be tied to malicious activities, particularly to tactics and techniques employed by COLDSTEEL RAT variants. It's important to note that while this detection strategy is set at a high level of importance, there may still be occurrences where legitimate activities could trigger a false positive, though such instances are currently unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new user profile with a specific username, seen being used by some variants of the COLDSTEEL RAT.",
      "answer": "In order to detect the creation of a new user profile with a specific username, seen being used by some variants of the COLDSTEEL RAT, you should: focus on Windows registry settings as the primary log source. Monitor any 'SetValue' EventType within Windows Registry, specifically targeting changes made to the registry keys that fall under '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList\\S-1-5-21-' combined with '\\ProfileImagePath'. Look for modifications that include the terms 'ANONYMOUS' or '_DomainUser_' within the details of these registry changes. These specific modifications are indicative of the creation of a new user profile, which can be tied to malicious activities, particularly to tactics and techniques employed by COLDSTEEL RAT variants. It's important to note that while this detection strategy is set at a high level of importance, there may still be occurrences where legitimate activities could trigger a false positive, though such instances are currently unknown."
    }
  },
  {
    "instruction": "Please help me detect the following: Once established within a system or network, an adversary may use automated techniques for collecting internal data",
    "context": "",
    "output": "Sure!\nIn order to once established within a system or network, an adversary may use automated techniques for collecting internal data, you should: Monitor PowerShell script activities on Windows systems, specifically looking for scripts that include commands such as 'Get-Service', 'Get-ChildItem', or 'Get-Process'. These commands could be used by an attacker to gather information from the compromised system. Additionally, pay attention to scripts that redirect output to a temporary environment variable (`> $env:TEMP\\`), as this could indicate an attempt to collect and store the gathered information discreetly. This detection requires that Script Block Logging be enabled to capture the necessary data for analysis. It is important to consider that while these activities could be indicative of malicious behavior, they may also be part of legitimate system or network operations, leading to potential unknown false positives. The severity of these findings is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Once established within a system or network, an adversary may use automated techniques for collecting internal data",
      "answer": "In order to once established within a system or network, an adversary may use automated techniques for collecting internal data, you should: Monitor PowerShell script activities on Windows systems, specifically looking for scripts that include commands such as 'Get-Service', 'Get-ChildItem', or 'Get-Process'. These commands could be used by an attacker to gather information from the compromised system. Additionally, pay attention to scripts that redirect output to a temporary environment variable (`> $env:TEMP\\`), as this could indicate an attempt to collect and store the gathered information discreetly. This detection requires that Script Block Logging be enabled to capture the necessary data for analysis. It is important to consider that while these activities could be indicative of malicious behavior, they may also be part of legitimate system or network operations, leading to potential unknown false positives. The severity of these findings is considered medium."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n",
    "context": "",
    "output": "In order to identify when adversaries may attempt to find local system groups and permission settings to understand group memberships and users with elevated permissions, you should focus on monitoring PowerShell script execution on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture the execution details of PowerShell scripts. Look for the usage of commands within the PowerShell scripts such as 'get-localgroup' and 'Get-LocalGroupMember', which are typically used to enumerate local system groups. Additionally, watch for the combination of 'Get-WMIObject' and 'Win32_Group' being used together in scripts, as this may also indicate an attempt to query local system groups and memberships. This detection strategy is considered to have a low level of potential false positives, acknowledging that while these commands can be utilized for legitimate administration purposes, their execution should be contextualized within the broader scope of observed behavior on the system. Employing this detection approach will assist in identifying possible reconnaissance activities aimed at uncovering local group memberships and user permissions, contributing to the broader effort of mitigating tactics such as Discovery and Privilege Escalation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n",
      "answer": "In order to identify when adversaries may attempt to find local system groups and permission settings to understand group memberships and users with elevated permissions, you should focus on monitoring PowerShell script execution on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture the execution details of PowerShell scripts. Look for the usage of commands within the PowerShell scripts such as 'get-localgroup' and 'Get-LocalGroupMember', which are typically used to enumerate local system groups. Additionally, watch for the combination of 'Get-WMIObject' and 'Win32_Group' being used together in scripts, as this may also indicate an attempt to query local system groups and memberships. This detection strategy is considered to have a low level of potential false positives, acknowledging that while these commands can be utilized for legitimate administration purposes, their execution should be contextualized within the broader scope of observed behavior on the system. Employing this detection approach will assist in identifying possible reconnaissance activities aimed at uncovering local group memberships and user permissions, contributing to the broader effort of mitigating tactics such as Discovery and Privilege Escalation."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect modification of TreatAs key to enable \"rundll32.exe -sta\" command",
    "context": "",
    "output": "Certainly!\n\nIn order to detect modification of TreatAs key to enable \"rundll32.exe -sta\" command, you should monitor the registry settings on Windows systems for specific changes. Focus on the registry key settings where the event type is `SetValue`, especially targeting changes to objects ending with 'TreatAs\\(Default)'. Be aware that legitimate software operations, particularly those associated with Microsoft Office installations and updates or the system process `svchost.exe`, may also alter these settings. To minimize false positives, exclude events where the manipulating image is part of the Microsoft Office ClickToRun process (located in `C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\` or ending with `\\OfficeClickToRun.exe`), the Office integrator executable (`C:\\Program Files (x86)\\Microsoft Office\\root\\integration\\integrator.exe`), or instances of `msiexec.exe` in both system32 and SysWOW64 directories. Moreover, exclude modifications initiated by `svchost.exe`, acknowledging that while it is a common vector for legitimate adjustments, it can be misused. By filtering out these legitimate use cases, you enhance the accuracy of detecting malicious activities aimed at altering the TreatAs key to execute potentially malicious commands. The detection parameters are set to a medium level of sensitivity due to the potential for legitimate uses to trigger this condition. This approach aligns with the principles of maintaining system integrity and vigilance against unauthorized modifications that exploit registry keys, a tactic commonly associated with privilege escalation and persistence mechanisms by attackers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect modification of TreatAs key to enable \"rundll32.exe -sta\" command",
      "answer": "In order to detect modification of TreatAs key to enable \"rundll32.exe -sta\" command, you should monitor the registry settings on Windows systems for specific changes. Focus on the registry key settings where the event type is `SetValue`, especially targeting changes to objects ending with 'TreatAs\\(Default)'. Be aware that legitimate software operations, particularly those associated with Microsoft Office installations and updates or the system process `svchost.exe`, may also alter these settings. To minimize false positives, exclude events where the manipulating image is part of the Microsoft Office ClickToRun process (located in `C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\` or ending with `\\OfficeClickToRun.exe`), the Office integrator executable (`C:\\Program Files (x86)\\Microsoft Office\\root\\integration\\integrator.exe`), or instances of `msiexec.exe` in both system32 and SysWOW64 directories. Moreover, exclude modifications initiated by `svchost.exe`, acknowledging that while it is a common vector for legitimate adjustments, it can be misused. By filtering out these legitimate use cases, you enhance the accuracy of detecting malicious activities aimed at altering the TreatAs key to execute potentially malicious commands. The detection parameters are set to a medium level of sensitivity due to the potential for legitimate uses to trigger this condition. This approach aligns with the principles of maintaining system integrity and vigilance against unauthorized modifications that exploit registry keys, a tactic commonly associated with privilege escalation and persistence mechanisms by attackers."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of Windows binaries from within a WSL instance. This could be used to masquerade parent-child relationships",
    "context": "",
    "output": "In order to detect the execution of Windows binaries from within a WSL instance, which could be used to masquerade parent-child relationships, you should monitor logs for process creation events on Windows systems. Specifically, look for the execution of programs where the image path matches a Windows-style drive path, indicated by a letter followed by a colon and a backslash (e.g., C:\\). Additionally, it's essential to monitor for processes that have a current directory containing the path '\\\\wsl.localhost'. This detail is critical because it suggests that the process might be initiated from within the Windows Subsystem for Linux (WSL), a scenario where programs not supporting UNC paths, such as cmd.exe, default to another location. Considering these detection criteria is imperative for identifying potential misuse of WSL to execute Windows binaries in a manner that could obscure the actual origin or nature of the process, thus potentially masking malicious activities. It's worth noting that there may be unknown instances leading to false positives; however, the severity level for these events has been assessed as medium, underscoring the importance of this monitoring while acknowledging the need for careful analysis of detections.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Windows binaries from within a WSL instance. This could be used to masquerade parent-child relationships",
      "answer": "In order to detect the execution of Windows binaries from within a WSL instance, which could be used to masquerade parent-child relationships, you should monitor logs for process creation events on Windows systems. Specifically, look for the execution of programs where the image path matches a Windows-style drive path, indicated by a letter followed by a colon and a backslash (e.g., C:\\). Additionally, it's essential to monitor for processes that have a current directory containing the path '\\\\wsl.localhost'. This detail is critical because it suggests that the process might be initiated from within the Windows Subsystem for Linux (WSL), a scenario where programs not supporting UNC paths, such as cmd.exe, default to another location. Considering these detection criteria is imperative for identifying potential misuse of WSL to execute Windows binaries in a manner that could obscure the actual origin or nature of the process, thus potentially masking malicious activities. It's worth noting that there may be unknown instances leading to false positives; however, the severity level for these events has been assessed as medium, underscoring the importance of this monitoring while acknowledging the need for careful analysis of detections."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields, you should: Monitor the creation of processes in Windows systems for signs of suspicious activity. Specifically, look out for processes where the image name ends with '\\wmic.exe' or where the original file name is identified as 'wmic.exe'. In addition, pay close attention to the import hash (Imphash) values of these processes. The Imphash values of particular interest are 1B1A3F43BF37B5BFE60751F2EE2F326E, 37777A96245A3C74EB217308F3546F4C, and 9D87C9D67CE724033C0B40CC4CA1B206. Also, examine the 'Hashes' field for these specific Imphash values as an indicator of potentially malicious activity. Another critical sign is the presence of specific command line parameters, particularly those that include 'format:' followed by 'http', which may indicate an attack attempt. The detection requires observing both the suspicious process execution patterns and command line parameters together as indicators of an attack. This approach is essential for identifying and mitigating threats associated with the SquiblyTwo attack technique, which are tagged under techniques such as execution, persistence, privilege escalation, and defense evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields",
      "answer": "In order to detect potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields, you should: Monitor the creation of processes in Windows systems for signs of suspicious activity. Specifically, look out for processes where the image name ends with '\\wmic.exe' or where the original file name is identified as 'wmic.exe'. In addition, pay close attention to the import hash (Imphash) values of these processes. The Imphash values of particular interest are 1B1A3F43BF37B5BFE60751F2EE2F326E, 37777A96245A3C74EB217308F3546F4C, and 9D87C9D67CE724033C0B40CC4CA1B206. Also, examine the 'Hashes' field for these specific Imphash values as an indicator of potentially malicious activity. Another critical sign is the presence of specific command line parameters, particularly those that include 'format:' followed by 'http', which may indicate an attack attempt. The detection requires observing both the suspicious process execution patterns and command line parameters together as indicators of an attack. This approach is essential for identifying and mitigating threats associated with the SquiblyTwo attack technique, which are tagged under techniques such as execution, persistence, privilege escalation, and defense evasion."
    }
  },
  {
    "instruction": "How to detect: ZipExec is a Proof-of-Concept (POC) tool to wrap binary-based tools into a password-protected zip file.",
    "context": "",
    "output": "In order to detect the use of ZipExec, a Proof-of-Concept (POC) tool designed to wrap binary-based tools into a password-protected zip file, you should focus on monitoring process creation logs within Windows operating systems. Specifically, look for command lines that exhibit the following patterns indicating potential misuse: \n\n1. Execution attempts that include all the elements such as '/generic:Microsoft_Windows_Shell_ZipFolder:filename=', the '.zip' file extension, and both '/pass:' and '/user:' parameters. This pattern suggests an attempt to execute or interact with a password-protected zip file, a common tactic associated with the ZipExec methodology.\n\n2. Deletion attempts characterized by the presence of the '/delete' command, along with 'Microsoft_Windows_Shell_ZipFolder:filename=' and the '.zip' file extension. This pattern may indicate an effort to remove traces of the zip file used in the attack, following execution or deployment of its contents.\n\nDetection of these patterns should trigger an alert due to their association with tactics and techniques related to Credential Access, Execution through Module Load, and Defense Evasion by Deleting Evidence. It is important to approach these alerts with a degree of caution, as there could be legitimate use cases that result in similar activity, although such scenarios are considered unknown false positives in this context. The level of threat associated with these detections is considered medium, highlighting the need for further investigation upon alerting.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "ZipExec is a Proof-of-Concept (POC) tool to wrap binary-based tools into a password-protected zip file.",
      "answer": "In order to detect the use of ZipExec, a Proof-of-Concept (POC) tool designed to wrap binary-based tools into a password-protected zip file, you should focus on monitoring process creation logs within Windows operating systems. Specifically, look for command lines that exhibit the following patterns indicating potential misuse: \n\n1. Execution attempts that include all the elements such as '/generic:Microsoft_Windows_Shell_ZipFolder:filename=', the '.zip' file extension, and both '/pass:' and '/user:' parameters. This pattern suggests an attempt to execute or interact with a password-protected zip file, a common tactic associated with the ZipExec methodology.\n\n2. Deletion attempts characterized by the presence of the '/delete' command, along with 'Microsoft_Windows_Shell_ZipFolder:filename=' and the '.zip' file extension. This pattern may indicate an effort to remove traces of the zip file used in the attack, following execution or deployment of its contents.\n\nDetection of these patterns should trigger an alert due to their association with tactics and techniques related to Credential Access, Execution through Module Load, and Defense Evasion by Deleting Evidence. It is important to approach these alerts with a degree of caution, as there could be legitimate use cases that result in similar activity, although such scenarios are considered unknown false positives in this context. The level of threat associated with these detections is considered medium, highlighting the need for further investigation upon alerting."
    }
  },
  {
    "instruction": "Can you explain how to detect: remote RPC calls useb by SharpHound to map remote connections and local group membership.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect remote RPC calls used by SharpHound to map remote connections and local group membership, you should: Focus on analyzing logs from RPC Firewall, specifically those categorized under the application. Ensure that the RPC Firewall is installed and properly configured to audit and block RPC calls based on the configuration \"audit:true action:block uuid:6bffd098-a112-3610-9833-46c3f87e345a opnum:2\". The detection strategy revolves around monitoring for event logs tagged with \"RPCFW\", with an EventID of 3, which indicates an intercepted remote procedure call. Specifically, you are looking for any RPC calls that match the Interface UUID \"6bffd098-a112-3610-9833-46c3f87e345a\" and an operation number \"OpNum\" of 2. These parameters are indicative of the specific type of RPC call utilized by SharpHound in its reconnaissance activities. While analyzing these logs, it's important to be aware that false positives are unknown, indicating that each detection should be investigated thoroughly due to the high criticality of this activity. This approach is crucial in identifying and mitigating the tactics and techniques associated with the mapping of remote connections and the enumeration of local group memberships, typically involved in reconnaissance phases of cyber attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls useb by SharpHound to map remote connections and local group membership.",
      "answer": "In order to detect remote RPC calls used by SharpHound to map remote connections and local group membership, you should: Focus on analyzing logs from RPC Firewall, specifically those categorized under the application. Ensure that the RPC Firewall is installed and properly configured to audit and block RPC calls based on the configuration \"audit:true action:block uuid:6bffd098-a112-3610-9833-46c3f87e345a opnum:2\". The detection strategy revolves around monitoring for event logs tagged with \"RPCFW\", with an EventID of 3, which indicates an intercepted remote procedure call. Specifically, you are looking for any RPC calls that match the Interface UUID \"6bffd098-a112-3610-9833-46c3f87e345a\" and an operation number \"OpNum\" of 2. These parameters are indicative of the specific type of RPC call utilized by SharpHound in its reconnaissance activities. While analyzing these logs, it's important to be aware that false positives are unknown, indicating that each detection should be investigated thoroughly due to the high criticality of this activity. This approach is crucial in identifying and mitigating the tactics and techniques associated with the mapping of remote connections and the enumeration of local group memberships, typically involved in reconnaissance phases of cyber attacks."
    }
  },
  {
    "instruction": "How to detect: use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion.",
    "context": "",
    "output": "In order to detect the use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion, you should: Monitor for the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\DefenderCheck.exe' or the process description is 'DefenderCheck'. This activity highlights the execution of the DefenderCheck tool, which could potentially be used by adversaries to understand and evade detection by Microsoft Defender. Given the specific nature of this detection and the tool involved, false positives are considered unlikely, and such detections should be treated with a high level of concern due to their implications for anti-virus evasion efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion.",
      "answer": "In order to detect the use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion, you should: Monitor for the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\DefenderCheck.exe' or the process description is 'DefenderCheck'. This activity highlights the execution of the DefenderCheck tool, which could potentially be used by adversaries to understand and evade detection by Microsoft Defender. Given the specific nature of this detection and the tool involved, false positives are considered unlikely, and such detections should be treated with a high level of concern due to their implications for anti-virus evasion efforts."
    }
  },
  {
    "instruction": "How can I detect: Obfuscated Powershell via use Rundll32 in Scripts",
    "context": "",
    "output": "In order to detect obfuscated PowerShell via use of Rundll32 in scripts, you should monitor PowerShell script activities within a Windows environment, specifically looking for script execution that involves certain characteristics indicative of suspicious behavior. This requires that Script Block Logging is enabled on the system to accurately capture and analyze PowerShell script blocks.\n\nSpecifically, look for script block texts that contain all of the following elements: '&&', 'rundll32', 'shell32.dll', and 'shellexec_rundll'. Additionally, keep an eye out for script block texts that include any of these elements: 'value', 'invoke', 'comspec', or 'iex'. The presence of these strings within a script block is indicative of an attempt to execute commands or scripts in a manner that is commonly associated with obfuscation techniques, often aiming to bypass security measures by leveraging the 'rundll32' command alongside PowerShell.\n\nThese detection criteria are deemed to be of high importance due to the potential for these actions to be part of malicious activities, such as executing malware or facilitating unauthorized access to systems. However, it is important to be aware of potential unknown false positives, as there may be legitimate use cases that exhibit similar characteristics to these detection patterns.\n\nThe activity aligns with tactics and techniques that typically involve the Execution phase within the MITRE ATT&CK framework, especially where PowerShell is utilized for command and script execution in combination with the use of 'rundll32' to execute binary code. Monitoring for these specific script block texts serves as a crucial step in identifying and mitigating potential threats that leverage obfuscated PowerShell scripts for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via use Rundll32 in Scripts",
      "answer": "In order to detect obfuscated PowerShell via use of Rundll32 in scripts, you should monitor PowerShell script activities within a Windows environment, specifically looking for script execution that involves certain characteristics indicative of suspicious behavior. This requires that Script Block Logging is enabled on the system to accurately capture and analyze PowerShell script blocks.\n\nSpecifically, look for script block texts that contain all of the following elements: '&&', 'rundll32', 'shell32.dll', and 'shellexec_rundll'. Additionally, keep an eye out for script block texts that include any of these elements: 'value', 'invoke', 'comspec', or 'iex'. The presence of these strings within a script block is indicative of an attempt to execute commands or scripts in a manner that is commonly associated with obfuscation techniques, often aiming to bypass security measures by leveraging the 'rundll32' command alongside PowerShell.\n\nThese detection criteria are deemed to be of high importance due to the potential for these actions to be part of malicious activities, such as executing malware or facilitating unauthorized access to systems. However, it is important to be aware of potential unknown false positives, as there may be legitimate use cases that exhibit similar characteristics to these detection patterns.\n\nThe activity aligns with tactics and techniques that typically involve the Execution phase within the MITRE ATT&CK framework, especially where PowerShell is utilized for command and script execution in combination with the use of 'rundll32' to execute binary code. Monitoring for these specific script block texts serves as a crucial step in identifying and mitigating potential threats that leverage obfuscated PowerShell scripts for malicious purposes."
    }
  },
  {
    "instruction": "Can you explain how to detect: service ticket requests using RC4 encryption type",
    "context": "",
    "output": "Certainly!\n\nIn order to detect service ticket requests using RC4 encryption type, you should focus on Windows security event logs. Specifically, monitor for event ID 4769, which indicates a service ticket request. The detection hinges on identifying instances where the ticket options field equals '0x40810000' and the ticket encryption type field is set to '0x17', which corresponds to RC4 encryption. However, it's important to filter out and not alert on events where the service name ends with a '$' sign, as these are often legitimate service account activities, particularly on legacy systems or within Windows Domains with Domain Functional Level (DFL) 2003. Be aware of potential false positives, especially concerning service accounts used on legacy systems like NetApp, or in environments with older Windows Domain configurations. The severity level for this activity is considered medium, indicating it's important but not an immediate critical threat. This approach is aligned with understanding the usage of deprecated or less secure encryption types in service ticket requests, which can be indicative of an attacker's attempt to exploit weaker encryption for credential access or lateral movement within a network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "service ticket requests using RC4 encryption type",
      "answer": "In order to detect service ticket requests using RC4 encryption type, you should focus on Windows security event logs. Specifically, monitor for event ID 4769, which indicates a service ticket request. The detection hinges on identifying instances where the ticket options field equals '0x40810000' and the ticket encryption type field is set to '0x17', which corresponds to RC4 encryption. However, it's important to filter out and not alert on events where the service name ends with a '$' sign, as these are often legitimate service account activities, particularly on legacy systems or within Windows Domains with Domain Functional Level (DFL) 2003. Be aware of potential false positives, especially concerning service accounts used on legacy systems like NetApp, or in environments with older Windows Domain configurations. The severity level for this activity is considered medium, indicating it's important but not an immediate critical threat. This approach is aligned with understanding the usage of deprecated or less secure encryption types in service ticket requests, which can be indicative of an attacker's attempt to exploit weaker encryption for credential access or lateral movement within a network."
    }
  },
  {
    "instruction": "How to detect: when when a mounted share is removed. Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation",
    "context": "",
    "output": "In order to detect when a mounted share is removed as adversaries may remove share connections that are no longer useful in order to clean up traces of their operation, you should:\nMonitor process creation logs on Windows systems for executions of 'net.exe' or 'net1.exe' programs. Specifically, you should look for these programs being called with command lines containing both the word 'share' and the '/delete' argument. This behavior might indicate an attempt to remove shared connections, possibly as a way for an attacker to cover their tracks after accessing resources or when cleaning up to avoid detection. It's important to note that legitimate actions performed by administrators or power users might also trigger this detection if they are removing shares via the command line. Therefore, while this activity is noteworthy and should be scrutinized, it is classified with a low level of confidence due to potential legitimate use cases.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when when a mounted share is removed. Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation",
      "answer": "In order to detect when a mounted share is removed as adversaries may remove share connections that are no longer useful in order to clean up traces of their operation, you should:\nMonitor process creation logs on Windows systems for executions of 'net.exe' or 'net1.exe' programs. Specifically, you should look for these programs being called with command lines containing both the word 'share' and the '/delete' argument. This behavior might indicate an attempt to remove shared connections, possibly as a way for an attacker to cover their tracks after accessing resources or when cleaning up to avoid detection. It's important to note that legitimate actions performed by administrators or power users might also trigger this detection if they are removing shares via the command line. Therefore, while this activity is noteworthy and should be scrutinized, it is classified with a low level of confidence due to potential legitimate use cases."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the \"Get-AdComputer\" to enumerate Computers or properties within Active Directory.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of the \"Get-AdComputer\" to enumerate Computers or properties within Active Directory, you should monitor PowerShell script executions on Windows systems. Focus on identifying instances where the script text contains the 'Get-AdComputer ' cmdlet, which is typically used for querying Active Directory for computer objects or their properties. Look specifically for script executions that include commands like '-Filter ', '-LDAPFilter ', and '-Properties ', as these are often used to refine queries and could indicate an attempt to enumerate or extract detailed information from Active Directory. Ensure that Script Block Logging is enabled to capture the necessary details for analysis. Note that while this detection is important, it has a low level of confidence and may result in unknown false positives, suggesting a need for manual verification of the context in which these commands are used.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Get-AdComputer\" to enumerate Computers or properties within Active Directory.",
      "answer": "In order to detect usage of the \"Get-AdComputer\" to enumerate Computers or properties within Active Directory, you should monitor PowerShell script executions on Windows systems. Focus on identifying instances where the script text contains the 'Get-AdComputer ' cmdlet, which is typically used for querying Active Directory for computer objects or their properties. Look specifically for script executions that include commands like '-Filter ', '-LDAPFilter ', and '-Properties ', as these are often used to refine queries and could indicate an attempt to enumerate or extract detailed information from Active Directory. Ensure that Script Block Logging is enabled to capture the necessary details for analysis. Note that while this detection is important, it has a low level of confidence and may result in unknown false positives, suggesting a need for manual verification of the context in which these commands are used."
    }
  },
  {
    "instruction": "How to detect: whoami.exe executed with the /priv command line flag instructing the tool to show all current user privileges. This is often used after a privilege escalation attempt.",
    "context": "",
    "output": "In order to detect a whoami.exe executed with the /priv command line flag instructing the tool to show all current user privileges, which is often used after a privilege escalation attempt, you should: Monitor the creation of processes on Windows systems, focusing specifically on the execution of 'whoami.exe'. This includes looking for instances where the executable image ends with '\\whoami.exe' or has the original file name 'whoami.exe'. Additionally, pay attention to the command line flags used during execution, specifically if '/priv' or ' -priv' is included in the command line. These flags are crucial indicators that the command is being used to display all privileges associated with the current user, a tactic commonly employed following attempts to escalate privileges within a system. It's important to consider all these factors together to accurately detect suspicious activity with a high level of confidence, acknowledging the rare possibility of false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "whoami.exe executed with the /priv command line flag instructing the tool to show all current user privileges. This is often used after a privilege escalation attempt.",
      "answer": "In order to detect a whoami.exe executed with the /priv command line flag instructing the tool to show all current user privileges, which is often used after a privilege escalation attempt, you should: Monitor the creation of processes on Windows systems, focusing specifically on the execution of 'whoami.exe'. This includes looking for instances where the executable image ends with '\\whoami.exe' or has the original file name 'whoami.exe'. Additionally, pay attention to the command line flags used during execution, specifically if '/priv' or ' -priv' is included in the command line. These flags are crucial indicators that the command is being used to display all privileges associated with the current user, a tactic commonly employed following attempts to escalate privileges within a system. It's important to consider all these factors together to accurately detect suspicious activity with a high level of confidence, acknowledging the rare possibility of false positives."
    }
  },
  {
    "instruction": "Can you explain how to detect: network enumeration performed on AWS.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect network enumeration performed on AWS, you should monitor AWS CloudTrail logs for specific activities that indicate attempts to gather information about the network environment. Specifically, look for multiple (more than five within a 10-minute window) API calls to ec2.amazonaws.com, especially those calling methods such as 'DescribeCarrierGateways', 'DescribeVpcEndpointConnectionNotifications', 'DescribeTransitGatewayMulticastDomains', 'DescribeClientVpnRoutes', 'DescribeDhcpOptions', and 'GetTransitGatewayRouteTableAssociations'. These activities can suggest that an attacker is trying to map out the network, identifying key components and connections that could be leveraged for further attacks or exploitation. However, keep in mind that there could be unknown legitimate reasons for such activities, hence they are initially considered to have a low level of threat. Nonetheless, continuous monitoring of these patterns is essential for maintaining the security posture and detecting potential reconnaissance efforts as part of broader adversarial tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "network enumeration performed on AWS.",
      "answer": "In order to detect network enumeration performed on AWS, you should monitor AWS CloudTrail logs for specific activities that indicate attempts to gather information about the network environment. Specifically, look for multiple (more than five within a 10-minute window) API calls to ec2.amazonaws.com, especially those calling methods such as 'DescribeCarrierGateways', 'DescribeVpcEndpointConnectionNotifications', 'DescribeTransitGatewayMulticastDomains', 'DescribeClientVpnRoutes', 'DescribeDhcpOptions', and 'GetTransitGatewayRouteTableAssociations'. These activities can suggest that an attacker is trying to map out the network, identifying key components and connections that could be leveraged for further attacks or exploitation. However, keep in mind that there could be unknown legitimate reasons for such activities, hence they are initially considered to have a low level of threat. Nonetheless, continuous monitoring of these patterns is essential for maintaining the security posture and detecting potential reconnaissance efforts as part of broader adversarial tactics."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious DNS queries to api.telegram.org used by Telegram Bots of any kind",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious DNS queries to api.telegram.org used by Telegram Bots of any kind, you should: Focus on monitoring DNS query logs for instances where requests are made to \"api.telegram.org\". This activity points towards interaction with the Telegram Bot API, which could range from benign to malicious use cases, depending on the context within your organization. Consider examining the context in which these requests occur to differentiate between legitimate business use of Telegram bots and potentially malicious activities aiming to exploit Telegram bots for nefarious purposes. It's crucial to remain aware that not all hits might indicate a security threat; some may represent legitimate use of Telegram bots by the company. The severity level associated with detecting this activity is considered medium, highlighting the need for further investigation upon detection to ascertain the nature of the requests.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious DNS queries to api.telegram.org used by Telegram Bots of any kind",
      "answer": "In order to detect suspicious DNS queries to api.telegram.org used by Telegram Bots of any kind, you should: Focus on monitoring DNS query logs for instances where requests are made to \"api.telegram.org\". This activity points towards interaction with the Telegram Bot API, which could range from benign to malicious use cases, depending on the context within your organization. Consider examining the context in which these requests occur to differentiate between legitimate business use of Telegram bots and potentially malicious activities aiming to exploit Telegram bots for nefarious purposes. It's crucial to remain aware that not all hits might indicate a security threat; some may represent legitimate use of Telegram bots by the company. The severity level associated with detecting this activity is considered medium, highlighting the need for further investigation upon detection to ascertain the nature of the requests."
    }
  },
  {
    "instruction": "How to detect: Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.",
    "context": "",
    "output": "In order to detect adversaries who might be stopping services or processes as part of an attack aiming for Data Destruction or Data Encryption for Impact particularly targeting data stores of critical services such as Exchange and SQL Server, you should monitor Windows process creation logs for the execution of 'taskkill.exe', a legitimate Windows utility that can be misused in such contexts. Specifically, look for occurrences where the 'Image' path ends with '\\taskkill.exe' or when the 'OriginalFileName' is exactly 'taskkill.exe'. Additionally, ensure that the 'CommandLine' arguments include both '/f' (forcing the termination of processes without warning) and '/im' (specifying the image name of the process to be terminated), used together in the command line. This pattern of usage can be indicative of malicious behavior aimed at stopping critical services or processes. However, it's important to note that there might be legitimate instances where software uses 'taskkill.exe' in a similar manner during installations or updates, which could lead to false positives. The detection is categorized under a low level of alert due to the potential for such expected benign activities triggering alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.",
      "answer": "In order to detect adversaries who might be stopping services or processes as part of an attack aiming for Data Destruction or Data Encryption for Impact particularly targeting data stores of critical services such as Exchange and SQL Server, you should monitor Windows process creation logs for the execution of 'taskkill.exe', a legitimate Windows utility that can be misused in such contexts. Specifically, look for occurrences where the 'Image' path ends with '\\taskkill.exe' or when the 'OriginalFileName' is exactly 'taskkill.exe'. Additionally, ensure that the 'CommandLine' arguments include both '/f' (forcing the termination of processes without warning) and '/im' (specifying the image name of the process to be terminated), used together in the command line. This pattern of usage can be indicative of malicious behavior aimed at stopping critical services or processes. However, it's important to note that there might be legitimate instances where software uses 'taskkill.exe' in a similar manner during installations or updates, which could lead to false positives. The detection is categorized under a low level of alert due to the potential for such expected benign activities triggering alerts."
    }
  },
  {
    "instruction": "How to detect: execution of the \"groupdel\" binary. Which is used to delete a group. This is sometimes abused by threat actors in order to cover their tracks",
    "context": "",
    "output": "In order to detect execution of the \"groupdel\" binary, which is used to delete a group and is sometimes abused by threat actors in order to cover their tracks, you should focus on monitoring process creation logs from Linux systems. Specifically, watch for any processes that end with '/groupdel', as this indicates the execution of the groupdel binary. It is important to note that while this behavior can signify malicious activity, it may also represent legitimate administrator activities. The risk associated with this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the \"groupdel\" binary. Which is used to delete a group. This is sometimes abused by threat actors in order to cover their tracks",
      "answer": "In order to detect execution of the \"groupdel\" binary, which is used to delete a group and is sometimes abused by threat actors in order to cover their tracks, you should focus on monitoring process creation logs from Linux systems. Specifically, watch for any processes that end with '/groupdel', as this indicates the execution of the groupdel binary. It is important to note that while this behavior can signify malicious activity, it may also represent legitimate administrator activities. The risk associated with this detection is considered medium."
    }
  },
  {
    "instruction": "How to detect: suspicious processes based on name and location that access the browser credential stores which can be the sign of credential stealing",
    "context": "",
    "output": "In order to detect suspicious processes based on name and location that access the browser credential stores which can be the sign of credential stealing, you should monitor file access logs, particularly focusing on the Microsoft-Windows-Kernel-File Event Tracing for Windows (ETW) provider on Windows systems. Pay special attention to the activity involving specific files known to contain browser credentials. For Internet Explorer, watch for access to '\\Appdata\\Local\\Microsoft\\Windows\\WebCache\\WebCacheV01.dat'. For Firefox, be alert for interactions with '\\cookies.sqlite', 'release\\key3.db', 'release\\key4.db', and 'release\\logins.json'. In the case of Chromium-based browsers like Google Chrome, look for access patterns involving '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies', '\\Appdata\\Local\\Chrome\\User Data\\Default\\Login Data', and '\\AppData\\Local\\Google\\Chrome\\User Data\\Local State'.\n\nExclude activities initiated by the system processes, idle parent processes, and well-known directories such as 'C:\\Program Files\\', 'C:\\Program Files (x86)\\', 'C:\\WINDOWS\\system32\\', and 'C:\\WINDOWS\\SysWOW64\\'. Additionally, apply filters to exclude common false positives like antivirus or anti-malware software processes, especially those starting with 'C:\\ProgramData\\Microsoft\\Windows Defender\\' and including 'MpCopyAccelerator.exe' or 'MsMpEng.exe'. Also, consider excluding processes like 'thor64.exe', 'thor.exe', and any child processes of 'C:\\Windows\\System32\\msiexec.exe' to minimize noise from legitimate software and maintenance tools.\n\nThis approach helps in identifying potentially malicious activities aimed at stealing credentials from browsers by narrowing down the focus to unusual file access patterns while filtering out expected behavior from system and known good software processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious processes based on name and location that access the browser credential stores which can be the sign of credential stealing",
      "answer": "In order to detect suspicious processes based on name and location that access the browser credential stores which can be the sign of credential stealing, you should monitor file access logs, particularly focusing on the Microsoft-Windows-Kernel-File Event Tracing for Windows (ETW) provider on Windows systems. Pay special attention to the activity involving specific files known to contain browser credentials. For Internet Explorer, watch for access to '\\Appdata\\Local\\Microsoft\\Windows\\WebCache\\WebCacheV01.dat'. For Firefox, be alert for interactions with '\\cookies.sqlite', 'release\\key3.db', 'release\\key4.db', and 'release\\logins.json'. In the case of Chromium-based browsers like Google Chrome, look for access patterns involving '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies', '\\Appdata\\Local\\Chrome\\User Data\\Default\\Login Data', and '\\AppData\\Local\\Google\\Chrome\\User Data\\Local State'.\n\nExclude activities initiated by the system processes, idle parent processes, and well-known directories such as 'C:\\Program Files\\', 'C:\\Program Files (x86)\\', 'C:\\WINDOWS\\system32\\', and 'C:\\WINDOWS\\SysWOW64\\'. Additionally, apply filters to exclude common false positives like antivirus or anti-malware software processes, especially those starting with 'C:\\ProgramData\\Microsoft\\Windows Defender\\' and including 'MpCopyAccelerator.exe' or 'MsMpEng.exe'. Also, consider excluding processes like 'thor64.exe', 'thor.exe', and any child processes of 'C:\\Windows\\System32\\msiexec.exe' to minimize noise from legitimate software and maintenance tools.\n\nThis approach helps in identifying potentially malicious activities aimed at stealing credentials from browsers by narrowing down the focus to unusual file access patterns while filtering out expected behavior from system and known good software processes."
    }
  },
  {
    "instruction": "Explain how should I detect the following: possible successful exploitation for vulnerability described in CVE-2021-26857 by looking for | abnormal subprocesses spawning by Exchange Server's Unified Messaging service",
    "context": "",
    "output": "In order to detect possible successful exploitation for vulnerability described in CVE-2021-26857 by looking for abnormal subprocesses spawning by Exchange Server's Unified Messaging service, you should: Focus on monitoring the process creation events within a Windows environment, particularly those initiated by the Unified Messaging service's worker process, identified as 'UMWorkerProcess.exe'. It's crucial to investigate any subprocess that gets spawned by this parent process to identify potentially malicious activity. However, it's important to exclude processes that are expected and benign, specifically if they end with 'wermgr.exe' or 'WerFault.exe', as these are typically involved in error reporting and are not indicative of the exploitation attempt in question. The detection strategy employs a high level of accuracy to minimize false positives, yet any occurrence outside of the filtered parameters should warrant further investigation due to the serious implications of exploiting CVE-2021-26857.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible successful exploitation for vulnerability described in CVE-2021-26857 by looking for | abnormal subprocesses spawning by Exchange Server's Unified Messaging service",
      "answer": "In order to detect possible successful exploitation for vulnerability described in CVE-2021-26857 by looking for abnormal subprocesses spawning by Exchange Server's Unified Messaging service, you should: Focus on monitoring the process creation events within a Windows environment, particularly those initiated by the Unified Messaging service's worker process, identified as 'UMWorkerProcess.exe'. It's crucial to investigate any subprocess that gets spawned by this parent process to identify potentially malicious activity. However, it's important to exclude processes that are expected and benign, specifically if they end with 'wermgr.exe' or 'WerFault.exe', as these are typically involved in error reporting and are not indicative of the exploitation attempt in question. The detection strategy employs a high level of accuracy to minimize false positives, yet any occurrence outside of the filtered parameters should warrant further investigation due to the serious implications of exploiting CVE-2021-26857."
    }
  },
  {
    "instruction": "Can you explain how to detect: Identifies the suspicious use of GetSessionToken. Tokens could be created and used by attackers to move laterally and escalate privileges.",
    "context": "",
    "output": "Certainly!\n\nIn order to identify the suspicious use of GetSessionToken, which could be created and used by attackers to move laterally and escalate privileges, you should focus on monitoring AWS CloudTrail logs. Specifically, look out for any use of the `GetSessionToken` action within these logs, which comes from the `eventSource` of `sts.amazonaws.com`. It is crucial to pay attention to the instances where the user identity type involved in making these requests is an `IAMUser`. \n\nRecognizing legitimate from illegitimate use of `GetSessionToken` could be somewhat challenging, as system or network administrators may use this action for routine tasks. To minimize false positives, closely examine whether the user identity, user agent, and/or hostname involved in these actions are expected to perform such operations within your environment. Activities performed by unfamiliar users or from unexpected hosts attempting to get a session token should be investigated thoroughly. Known legitimate behavior that frequently triggers this alert might need to be exempted to avoid unnecessary noise in your monitoring system.\n\nBy keeping an eye on these specific log entries and filtering activities based on the given criteria, you can flag potential security incidents. This proactive approach is based on well-recognized tactics and techniques, including lateral movement and privilege escalation, and aims to safeguard your AWS environment against unauthorized access and potential compromise.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies the suspicious use of GetSessionToken. Tokens could be created and used by attackers to move laterally and escalate privileges.",
      "answer": "In order to identify the suspicious use of GetSessionToken, which could be created and used by attackers to move laterally and escalate privileges, you should focus on monitoring AWS CloudTrail logs. Specifically, look out for any use of the `GetSessionToken` action within these logs, which comes from the `eventSource` of `sts.amazonaws.com`. It is crucial to pay attention to the instances where the user identity type involved in making these requests is an `IAMUser`. \n\nRecognizing legitimate from illegitimate use of `GetSessionToken` could be somewhat challenging, as system or network administrators may use this action for routine tasks. To minimize false positives, closely examine whether the user identity, user agent, and/or hostname involved in these actions are expected to perform such operations within your environment. Activities performed by unfamiliar users or from unexpected hosts attempting to get a session token should be investigated thoroughly. Known legitimate behavior that frequently triggers this alert might need to be exempted to avoid unnecessary noise in your monitoring system.\n\nBy keeping an eye on these specific log entries and filtering activities based on the given criteria, you can flag potential security incidents. This proactive approach is based on well-recognized tactics and techniques, including lateral movement and privilege escalation, and aims to safeguard your AWS environment against unauthorized access and potential compromise."
    }
  },
  {
    "instruction": "How can I detect: use of the lesser known remote execution tool named CsExec a PsExec alternative",
    "context": "",
    "output": "In order to detect the use of the lesser known remote execution tool named CsExec a PsExec alternative, you should: Focus on monitoring process creation logs within the Windows environment. Specifically, look for instances where the process image name ends with '\\csexec.exe'. Additionally, pay attention to the process executable's description to identify any occurrences that include 'csexec'. This monitoring approach is critical for identifying potentially malicious activity associated with remote execution tools similar to PsExec, but less commonly used, such as CsExec. Given that such tools can be utilized for legitimate administrative purposes as well as malicious actions, it's important to consider that some detections might not always pinpoint harmful activity (hence, the occasional unknown false positives). The significance of detecting such tools comes from their association with various cyber attack tactics and techniques, notably those involving execution and lateral movement. By focusing on these specific attributes in the process creation logs, effective detection mechanisms can be established to alert high-level threats possibly indicated by the use of CsExec for remote execution purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of the lesser known remote execution tool named CsExec a PsExec alternative",
      "answer": "In order to detect the use of the lesser known remote execution tool named CsExec a PsExec alternative, you should: Focus on monitoring process creation logs within the Windows environment. Specifically, look for instances where the process image name ends with '\\csexec.exe'. Additionally, pay attention to the process executable's description to identify any occurrences that include 'csexec'. This monitoring approach is critical for identifying potentially malicious activity associated with remote execution tools similar to PsExec, but less commonly used, such as CsExec. Given that such tools can be utilized for legitimate administrative purposes as well as malicious actions, it's important to consider that some detections might not always pinpoint harmful activity (hence, the occasional unknown false positives). The significance of detecting such tools comes from their association with various cyber attack tactics and techniques, notably those involving execution and lateral movement. By focusing on these specific attributes in the process creation logs, effective detection mechanisms can be established to alert high-level threats possibly indicated by the use of CsExec for remote execution purposes."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect changes to the \"LegalNoticeCaption\" or \"LegalNoticeText\" registry values where the message set contains keywords often used in ransomware ransom messages",
    "context": "",
    "output": "Sure!\nIn order to detect changes to the \"LegalNoticeCaption\" or \"LegalNoticeText\" registry values where the message set contains keywords often used in ransomware ransom messages, you should: Monitor Windows Registry modification events specifically targeting the registry paths associated with the system's legal notice settings. Pay attention to modifications where the event type is 'SetValue'. Specifically, look for changes to two registry paths: '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeCaption' and '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeText'. These are critical locations as they control the text displayed before a user logs into Windows, which can be misused by attackers to display a ransom message.\n\nAdditionally, scrutinize the details of these registry modifications for containing any of the following keywords: 'encrypted', 'Unlock-Password', or 'paying'. These words are indicative of content that might be related to ransomware activity, where attackers leave instructions for decrypting files or contacting them for payment. \n\nBeing vigilant about modifications containing these keywords helps in the early detection of ransomware attacks aimed at leveraging system functionalities to coerce victims into complying with payment demands. It's vital to note, however, that due to variability in ransomware messages and techniques, there may be unknown false positives. This detection mechanism is considered to have a high level of criticality due to the potentially significant impact of ransomware attacks on organizations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect changes to the \"LegalNoticeCaption\" or \"LegalNoticeText\" registry values where the message set contains keywords often used in ransomware ransom messages",
      "answer": "In order to detect changes to the \"LegalNoticeCaption\" or \"LegalNoticeText\" registry values where the message set contains keywords often used in ransomware ransom messages, you should: Monitor Windows Registry modification events specifically targeting the registry paths associated with the system's legal notice settings. Pay attention to modifications where the event type is 'SetValue'. Specifically, look for changes to two registry paths: '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeCaption' and '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeText'. These are critical locations as they control the text displayed before a user logs into Windows, which can be misused by attackers to display a ransom message.\n\nAdditionally, scrutinize the details of these registry modifications for containing any of the following keywords: 'encrypted', 'Unlock-Password', or 'paying'. These words are indicative of content that might be related to ransomware activity, where attackers leave instructions for decrypting files or contacting them for payment. \n\nBeing vigilant about modifications containing these keywords helps in the early detection of ransomware attacks aimed at leveraging system functionalities to coerce victims into complying with payment demands. It's vital to note, however, that due to variability in ransomware messages and techniques, there may be unknown false positives. This detection mechanism is considered to have a high level of criticality due to the potentially significant impact of ransomware attacks on organizations."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of system utilities to discover system network connections",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of system utilities to discover system network connections, you should: Monitor the creation of processes on MacOS systems, specifically looking for the execution of certain system utilities that are commonly used to investigate the system's network connections. These utilities include 'who', 'w', 'last', 'lsof', and 'netstat'. When any of these utilities are executed (noting that the focus is on the command being run rather than any accompanying parameters or context), it could indicate an attempt to discover network connections and gather information about the system's networking environment. This activity, while potentially indicative of reconnaissance or other preliminary stages of an attack, can also arise from legitimate system administration or troubleshooting tasks. Thus, it's important to consider the context in which these utilities are used to minimize false positives. The detection of such activity is principally aimed at providing informational insights, given the dual-use nature of these tools.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of system utilities to discover system network connections",
      "answer": "In order to detect usage of system utilities to discover system network connections, you should: Monitor the creation of processes on MacOS systems, specifically looking for the execution of certain system utilities that are commonly used to investigate the system's network connections. These utilities include 'who', 'w', 'last', 'lsof', and 'netstat'. When any of these utilities are executed (noting that the focus is on the command being run rather than any accompanying parameters or context), it could indicate an attempt to discover network connections and gather information about the system's networking environment. This activity, while potentially indicative of reconnaissance or other preliminary stages of an attack, can also arise from legitimate system administration or troubleshooting tasks. Thus, it's important to consider the context in which these utilities are used to minimize false positives. The detection of such activity is principally aimed at providing informational insights, given the dual-use nature of these tools."
    }
  },
  {
    "instruction": "How to detect: usage of bitsadmin downloading a file using an URL that contains an IP",
    "context": "",
    "output": "In order to detect usage of bitsadmin downloading a file using an URL that contains an IP, you should monitor process creation events on Windows systems for the execution of the bitsadmin utility. Specifically, look for cases where the bitsadmin executable is initiated (either directly as 'bitsadmin.exe' or where the image path ends with '\\bitsadmin.exe'), and the command line includes parameters such as ' /transfer ', ' /create ', or ' /addfile '. Additionally, scrutinize the command line for URLs containing direct IP addresses, indicated by '://1' through '://9', but excluding the specific use case of '://7-' which is related to accessing the legitimate 7-Zip website. Keep track of the complete CommandLine and ParentCommandLine for further analysis. This approach is critical for identifying attempts to misuse bitsadmin for downloading malicious files directly using IP addresses, which is a common tactic in various types of cyber attacks, enhancing your security posture against such threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of bitsadmin downloading a file using an URL that contains an IP",
      "answer": "In order to detect usage of bitsadmin downloading a file using an URL that contains an IP, you should monitor process creation events on Windows systems for the execution of the bitsadmin utility. Specifically, look for cases where the bitsadmin executable is initiated (either directly as 'bitsadmin.exe' or where the image path ends with '\\bitsadmin.exe'), and the command line includes parameters such as ' /transfer ', ' /create ', or ' /addfile '. Additionally, scrutinize the command line for URLs containing direct IP addresses, indicated by '://1' through '://9', but excluding the specific use case of '://7-' which is related to accessing the legitimate 7-Zip website. Keep track of the complete CommandLine and ParentCommandLine for further analysis. This approach is critical for identifying attempts to misuse bitsadmin for downloading malicious files directly using IP addresses, which is a common tactic in various types of cyber attacks, enhancing your security posture against such threats."
    }
  },
  {
    "instruction": "How to detect: execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.",
    "context": "",
    "output": "In order to detect execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32), which attackers abuse to install and run malicious DLLs, you should: focus on monitoring process creation events within Windows environments. Specifically, watch for occurrences of the process \"odbcconf.exe\" either by its image name or original file name. Additionally, scrutinize instances where the command line includes both \"REGSVR\" and references to \".dll\" files. This combination of conditions typically signals an attempt to register a new DLL maliciously. Be aware that legitimate usage of \"odbcconf\" to register DLLs may also trigger this detection, so it's essential to investigate the context, such as the DLL's path and content, to accurately assess the nature of the activity. This approach involves a medium level of alertness due to the possibility of false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.",
      "answer": "In order to detect execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32), which attackers abuse to install and run malicious DLLs, you should: focus on monitoring process creation events within Windows environments. Specifically, watch for occurrences of the process \"odbcconf.exe\" either by its image name or original file name. Additionally, scrutinize instances where the command line includes both \"REGSVR\" and references to \".dll\" files. This combination of conditions typically signals an attempt to register a new DLL maliciously. Be aware that legitimate usage of \"odbcconf\" to register DLLs may also trigger this detection, so it's essential to investigate the context, such as the DLL's path and content, to accurately assess the nature of the activity. This approach involves a medium level of alertness due to the possibility of false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: file renames where the target filename uses an uncommon double extension. Could indicate potential ransomware activity renaming files and adding a custom extension to the encrypted files, such as \".jpg.crypted\", \".docx.locky\", etc.",
    "context": "",
    "output": "In order to detect file renames where the target filename uses an uncommon double extension, which could indicate potential ransomware activity renaming files and adding a custom extension to the encrypted files, such as \".jpg.crypted\", \".docx.locky\", etc., you should: Monitor Windows file rename activities, specifically paying attention to events where files with common extensions like '.lnk', '.rtf', '.pst', '.docx', '.xlsx', '.jpg', '.jpeg', '.png', and '.pdf' have been renamed to have unusual double extensions indicating a potential encryption by ransomware, such as adding '.crypted', '.locky', etc., after the original extension. This monitoring should exclude file renames that result in filenames ending with common temporary or backup extensions like '.tmp', '.bak', '.old', '.orig', '.backup', and '.temp', as well as specific renames related to 'C:\\ProgramData\\Anaconda3\\' with a '.c~' ending, to reduce false positives instances such as those generated by backup software. This approach leverages the capabilities of the Microsoft-Windows-Kernel-File Provider, requiring the KERNEL_FILE_KEYWORD_RENAME_SETLINK_PATH keyword for precise detection. This strategy is crucial for identifying tactics and techniques associated with ransomware attacks, effectively enhancing the organization's resilience against such threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "file renames where the target filename uses an uncommon double extension. Could indicate potential ransomware activity renaming files and adding a custom extension to the encrypted files, such as \".jpg.crypted\", \".docx.locky\", etc.",
      "answer": "In order to detect file renames where the target filename uses an uncommon double extension, which could indicate potential ransomware activity renaming files and adding a custom extension to the encrypted files, such as \".jpg.crypted\", \".docx.locky\", etc., you should: Monitor Windows file rename activities, specifically paying attention to events where files with common extensions like '.lnk', '.rtf', '.pst', '.docx', '.xlsx', '.jpg', '.jpeg', '.png', and '.pdf' have been renamed to have unusual double extensions indicating a potential encryption by ransomware, such as adding '.crypted', '.locky', etc., after the original extension. This monitoring should exclude file renames that result in filenames ending with common temporary or backup extensions like '.tmp', '.bak', '.old', '.orig', '.backup', and '.temp', as well as specific renames related to 'C:\\ProgramData\\Anaconda3\\' with a '.c~' ending, to reduce false positives instances such as those generated by backup software. This approach leverages the capabilities of the Microsoft-Windows-Kernel-File Provider, requiring the KERNEL_FILE_KEYWORD_RENAME_SETLINK_PATH keyword for precise detection. This strategy is crucial for identifying tactics and techniques associated with ransomware attacks, effectively enhancing the organization's resilience against such threats."
    }
  },
  {
    "instruction": "How can I detect: Checks whether the image specified in a process creation event doesn't refer to an .exe file (caused by process ghosting or other unorthodox methods to start a process)",
    "context": "",
    "output": "In order to check whether the image specified in a process creation event doesn't refer to an .exe file (caused by process ghosting or other unorthodox methods to start a process), you should: Focus on monitoring process creation activities on Windows systems, specifically looking for processes that do not have '.exe', '.tmp', or '.scr' as their file extension as many legitimate processes, including installers, use these extensions. However, certain built-in Windows utilities and system processes that run without any extension, like 'System', 'Registry', 'MemCompression', and 'vmmem' should be ignored in this detection process. Likewise, processes starting from 'C:\\Windows\\Installer\\MSI', 'C:\\Windows\\System32\\DriverStore\\FileRepository\\', 'C:\\Config.Msi\\' with specific extensions, and any process initiating from 'C:\\Windows\\Temp\\' with a parent image from the same directory should not be flagged. Processes with images starting from directories typically associated with system operations or legitimate software like 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\' (especially with '.com' extensions), 'C:\\Program Files\\', and several others including specific paths for Avira, NVIDIA, WinSCP, Visual Studio, Docker, and more, are filtered out to avoid false positives. The aim is to identify suspicious processes that might indicate malware or unauthorized activities attempting to bypass traditional detection mechanisms by not using typical '.exe' processes, thereby highlighting potentially malicious behavior attributed to process ghosting and similar tactics. This approach ensures a high sensitivity towards detecting non-standard process executions while minimizing false alarms by excluding known good process paths and behaviors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Checks whether the image specified in a process creation event doesn't refer to an .exe file (caused by process ghosting or other unorthodox methods to start a process)",
      "answer": "In order to check whether the image specified in a process creation event doesn't refer to an .exe file (caused by process ghosting or other unorthodox methods to start a process), you should: Focus on monitoring process creation activities on Windows systems, specifically looking for processes that do not have '.exe', '.tmp', or '.scr' as their file extension as many legitimate processes, including installers, use these extensions. However, certain built-in Windows utilities and system processes that run without any extension, like 'System', 'Registry', 'MemCompression', and 'vmmem' should be ignored in this detection process. Likewise, processes starting from 'C:\\Windows\\Installer\\MSI', 'C:\\Windows\\System32\\DriverStore\\FileRepository\\', 'C:\\Config.Msi\\' with specific extensions, and any process initiating from 'C:\\Windows\\Temp\\' with a parent image from the same directory should not be flagged. Processes with images starting from directories typically associated with system operations or legitimate software like 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\' (especially with '.com' extensions), 'C:\\Program Files\\', and several others including specific paths for Avira, NVIDIA, WinSCP, Visual Studio, Docker, and more, are filtered out to avoid false positives. The aim is to identify suspicious processes that might indicate malware or unauthorized activities attempting to bypass traditional detection mechanisms by not using typical '.exe' processes, thereby highlighting potentially malicious behavior attributed to process ghosting and similar tactics. This approach ensures a high sensitivity towards detecting non-standard process executions while minimizing false alarms by excluding known good process paths and behaviors."
    }
  },
  {
    "instruction": "Please help me detect the following: Mimikatz DC sync security events",
    "context": "",
    "output": "Sure!\nIn order to detect Mimikatz DC sync security events, you should monitor for specific activities within the Windows Security event logs. Here's a detailed guide on what to look for:\n\nStart with focusing on events with the ID 4662, which are indicative of attempts to access certain permissions or carry out operations relating to directory services. These entries become especially concerning when they include references to permissions like 'Replicating Directory Changes All' or unique identifiers such as '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '9923a32a-3607-11d2-b9be-0000f87a36b2', and '89e95b76-444d-4c62-991a-0facbeda640c'. Additionally, an AccessMask value of '0x100' points towards attempts to query or replicate directory changes, which is a common tactic used in Mimikatz DC sync attacks to harvest credentials and sensitive information.\n\nHowever, not every instance of these event codes and properties necessarily indicates a malicious activity. You must apply certain filters to reduce false positives:\n- Exclude any events generated under the 'Window Manager' domain name, as these are typically benign system activities.\n- Ignore activities initiated by usernames starting with 'NT AUT' or 'MSOL_', as these often represent automated tasks or services.\n- Activities from usernames ending with '$' should also be discounted since these usually signify machine or service accounts performing legitimate operations.\n\nWhile these filters help refine detection, be aware of potential false positives. Legitimate domain controller synchronization activities not covered by the filters or the usage of local domain admin accounts for Azure AD Connect might sometimes trigger an alert.\n\nThe severity level for these detections is high, indicating that each alert warrants a prompt investigation to determine its nature and whether further action is needed to protect against potential credential theft or unauthorized access to sensitive data.\n\nThis detection strategy aligns with MITRE ATT&CK tactics related to Credential Access and specifically the technique of Domain Controller replication, highlighting the importance of these logs for identifying sophisticated attack methods aimed at compromising entire domains.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Mimikatz DC sync security events",
      "answer": "In order to detect Mimikatz DC sync security events, you should monitor for specific activities within the Windows Security event logs. Here's a detailed guide on what to look for:\n\nStart with focusing on events with the ID 4662, which are indicative of attempts to access certain permissions or carry out operations relating to directory services. These entries become especially concerning when they include references to permissions like 'Replicating Directory Changes All' or unique identifiers such as '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '9923a32a-3607-11d2-b9be-0000f87a36b2', and '89e95b76-444d-4c62-991a-0facbeda640c'. Additionally, an AccessMask value of '0x100' points towards attempts to query or replicate directory changes, which is a common tactic used in Mimikatz DC sync attacks to harvest credentials and sensitive information.\n\nHowever, not every instance of these event codes and properties necessarily indicates a malicious activity. You must apply certain filters to reduce false positives:\n- Exclude any events generated under the 'Window Manager' domain name, as these are typically benign system activities.\n- Ignore activities initiated by usernames starting with 'NT AUT' or 'MSOL_', as these often represent automated tasks or services.\n- Activities from usernames ending with '$' should also be discounted since these usually signify machine or service accounts performing legitimate operations.\n\nWhile these filters help refine detection, be aware of potential false positives. Legitimate domain controller synchronization activities not covered by the filters or the usage of local domain admin accounts for Azure AD Connect might sometimes trigger an alert.\n\nThe severity level for these detections is high, indicating that each alert warrants a prompt investigation to determine its nature and whether further action is needed to protect against potential credential theft or unauthorized access to sensitive data.\n\nThis detection strategy aligns with MITRE ATT&CK tactics related to Credential Access and specifically the technique of Domain Controller replication, highlighting the importance of these logs for identifying sophisticated attack methods aimed at compromising entire domains."
    }
  },
  {
    "instruction": "How can I detect: usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string",
    "context": "",
    "output": "In order to detect usage of the \"FromBase64String\" function in the command line which is used to decode a base64 encoded string, you should monitor process creation events on Windows platforms. Specifically, look for instances where the command line invocation includes the pattern '::FromBase64String('. This pattern indicates an attempt to decode a base64 encoded string, which can be a tactic employed by attackers to execute encoded payloads or scripts in a manner that evades detection. Be aware that there may be legitimate uses of this function, such as in administrative script libraries; therefore, these occurrences might not always signify malicious activity but should be investigated with a high priority due to the potential risks involved.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string",
      "answer": "In order to detect usage of the \"FromBase64String\" function in the command line which is used to decode a base64 encoded string, you should monitor process creation events on Windows platforms. Specifically, look for instances where the command line invocation includes the pattern '::FromBase64String('. This pattern indicates an attempt to decode a base64 encoded string, which can be a tactic employed by attackers to execute encoded payloads or scripts in a manner that evades detection. Be aware that there may be legitimate uses of this function, such as in administrative script libraries; therefore, these occurrences might not always signify malicious activity but should be investigated with a high priority due to the potential risks involved."
    }
  },
  {
    "instruction": "Please help me detect the following: changes of sensitive and critical files. Monitors files that you don't expect to change without planning on Linux system.",
    "context": "",
    "output": "Sure!\nIn order to detect changes of sensitive and critical files and monitor files that you don't expect to change without planning on a Linux system, you should focus on monitoring the creation of processes that indicate the use of specific command-line tools and editors known for their ability to view, edit, or redirect output to these sensitive files. These tools include common command-line utilities such as 'cat', 'echo', 'grep', 'head', 'more', and 'tail', which are often used in conjunction with redirection operators (e.g., '>') to modify file contents. Additionally, monitoring is required for the invocation of text editors such as 'emacs', 'nano', 'sed', 'vi', and 'vim', which can directly edit files.\n\nThe specific files of interest for monitoring include critical system and configuration files located in paths such as '/bin/login', '/bin/passwd' (which includes user credentials), boot-related files ('/boot/'), configuration files ('/etc/*.conf'), various cron configuration files (e.g., 'cron.daily', 'cron.hourly'), 'crontab', network configuration ('/etc/hosts'), startup scripts ('/etc/init.d'), 'sudoers' file (which defines sudo privileges), and essential binaries and scripts located in '/sbin', '/usr/bin/', '/usr/local/bin/', among others. These paths represent locations where unauthorized changes could significantly impact system security and operations.\n\nThe detection strategy involves identifying any process created for the purpose of modifying these sensitive files using the aforementioned tools. This is achieved by evaluating logs for processes that match the criteria of ending with specific executable names and containing specific command-line patterns indicating file manipulation activities.\n\nGiven the breadth of normal administrative activities, it's expected that there will be some legitimate use cases where these tools are used for non-malicious purposes, leading to potential false positives. In such cases, additional filtering or context is recommended to distinguish between benign and malicious activities. The detection level is set to medium, reflecting a balanced approach to sensitivity and specificity in identifying potentially unauthorized file modifications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes of sensitive and critical files. Monitors files that you don't expect to change without planning on Linux system.",
      "answer": "In order to detect changes of sensitive and critical files and monitor files that you don't expect to change without planning on a Linux system, you should focus on monitoring the creation of processes that indicate the use of specific command-line tools and editors known for their ability to view, edit, or redirect output to these sensitive files. These tools include common command-line utilities such as 'cat', 'echo', 'grep', 'head', 'more', and 'tail', which are often used in conjunction with redirection operators (e.g., '>') to modify file contents. Additionally, monitoring is required for the invocation of text editors such as 'emacs', 'nano', 'sed', 'vi', and 'vim', which can directly edit files.\n\nThe specific files of interest for monitoring include critical system and configuration files located in paths such as '/bin/login', '/bin/passwd' (which includes user credentials), boot-related files ('/boot/'), configuration files ('/etc/*.conf'), various cron configuration files (e.g., 'cron.daily', 'cron.hourly'), 'crontab', network configuration ('/etc/hosts'), startup scripts ('/etc/init.d'), 'sudoers' file (which defines sudo privileges), and essential binaries and scripts located in '/sbin', '/usr/bin/', '/usr/local/bin/', among others. These paths represent locations where unauthorized changes could significantly impact system security and operations.\n\nThe detection strategy involves identifying any process created for the purpose of modifying these sensitive files using the aforementioned tools. This is achieved by evaluating logs for processes that match the criteria of ending with specific executable names and containing specific command-line patterns indicating file manipulation activities.\n\nGiven the breadth of normal administrative activities, it's expected that there will be some legitimate use cases where these tools are used for non-malicious purposes, leading to potential false positives. In such cases, additional filtering or context is recommended to distinguish between benign and malicious activities. The detection level is set to medium, reflecting a balanced approach to sensitivity and specificity in identifying potentially unauthorized file modifications."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious PowerShell invocation with a parameter substring",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious PowerShell invocation with a parameter substring, you should: monitor process creation events on Windows systems for the execution of 'powershell.exe' or 'pwsh.exe'. Specifically, look for command lines containing substrings that indicate an attempt to run PowerShell in a hidden window, use encoded commands, or bypass the execution policy. These substrings can vary slightly in spelling or syntax (including both hyphen '-' and slash '/' variants) to try and evade detection. Examples include variations of 'windowstyle hidden', 'NoProfile', 'noninteractive', 'encodedCommand', and execution policy bypass flags such as 'bypass'. Any such activity may signify a high-level threat and warrants investigation due to its potential malicious nature.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious PowerShell invocation with a parameter substring",
      "answer": "In order to detect suspicious PowerShell invocation with a parameter substring, you should: monitor process creation events on Windows systems for the execution of 'powershell.exe' or 'pwsh.exe'. Specifically, look for command lines containing substrings that indicate an attempt to run PowerShell in a hidden window, use encoded commands, or bypass the execution policy. These substrings can vary slightly in spelling or syntax (including both hyphen '-' and slash '/' variants) to try and evade detection. Examples include variations of 'windowstyle hidden', 'NoProfile', 'noninteractive', 'encodedCommand', and execution policy bypass flags such as 'bypass'. Any such activity may signify a high-level threat and warrants investigation due to its potential malicious nature."
    }
  },
  {
    "instruction": "How to detect: Obfuscated Powershell via RUNDLL LAUNCHER",
    "context": "",
    "output": "In order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should: Focus on monitoring driver load events in Windows environments. Specifically, look for the loading of drivers where the ImagePath includes rundll32.exe in conjunction with shell32.dll, as well as the specific mention of shellexec_rundll and powershell within the same command context. This scenario is indicative of a method used to execute obfuscated PowerShell scripts, an approach commonly leveraged by attackers to evade detection mechanisms. Such actions align with defense evasion and execution tactics, particularly those involving the obfuscation of malicious scripts (T1027) and the execution of PowerShell scripts (T1059.001) in an attempt to sidestep security measures. The identification of these activities should be met with a medium level of alertness due to the potential for false positives, although such occurrences are currently unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via RUNDLL LAUNCHER",
      "answer": "In order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should: Focus on monitoring driver load events in Windows environments. Specifically, look for the loading of drivers where the ImagePath includes rundll32.exe in conjunction with shell32.dll, as well as the specific mention of shellexec_rundll and powershell within the same command context. This scenario is indicative of a method used to execute obfuscated PowerShell scripts, an approach commonly leveraged by attackers to evade detection mechanisms. Such actions align with defense evasion and execution tactics, particularly those involving the obfuscation of malicious scripts (T1027) and the execution of PowerShell scripts (T1059.001) in an attempt to sidestep security measures. The identification of these activities should be met with a medium level of alertness due to the potential for false positives, although such occurrences are currently unknown."
    }
  },
  {
    "instruction": "How to detect: suspicious Ruby on Rails exceptions that could indicate exploitation attempts",
    "context": "",
    "output": "In order to detect suspicious Ruby on Rails exceptions that could indicate exploitation attempts, you should: Monitor Ruby on Rails applications for specific exception messages that are commonly associated with malicious activities or misconfigurations. Specifically, look for logs containing any of the following exception keywords: ActionController::InvalidAuthenticityToken, ActionController::InvalidCrossOriginRequest, ActionController::MethodNotAllowed, ActionController::BadRequest, and ActionController::ParameterMissing. These exceptions could hint at various attack vectors, including but not limited to CSRF (Cross-Site Request Forgery) attacks, CORS (Cross-Origin Resource Sharing) policy violations, improper HTTP method usage, bad requests due to malformed syntax, and requests with missing parameters that could potentially disrupt application processing. It's important to consider that not all instances of these exceptions are indicative of malicious behavior; they could also stem from application bugs. Therefore, while these detections are set at a medium level of seriousness, each alert should be investigated to distinguish between actual exploitation attempts and benign errors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious Ruby on Rails exceptions that could indicate exploitation attempts",
      "answer": "In order to detect suspicious Ruby on Rails exceptions that could indicate exploitation attempts, you should: Monitor Ruby on Rails applications for specific exception messages that are commonly associated with malicious activities or misconfigurations. Specifically, look for logs containing any of the following exception keywords: ActionController::InvalidAuthenticityToken, ActionController::InvalidCrossOriginRequest, ActionController::MethodNotAllowed, ActionController::BadRequest, and ActionController::ParameterMissing. These exceptions could hint at various attack vectors, including but not limited to CSRF (Cross-Site Request Forgery) attacks, CORS (Cross-Origin Resource Sharing) policy violations, improper HTTP method usage, bad requests due to malformed syntax, and requests with missing parameters that could potentially disrupt application processing. It's important to consider that not all instances of these exceptions are indicative of malicious behavior; they could also stem from application bugs. Therefore, while these detections are set at a medium level of seriousness, each alert should be investigated to distinguish between actual exploitation attempts and benign errors."
    }
  },
  {
    "instruction": "Explain how should I detect the following: specific file being created in the recent folder of Office. These files have been seen being dropped during potential exploitations of CVE-2023-36884",
    "context": "",
    "output": "In order to detect a specific file being created in the recent folder of Office, which has been seen being dropped during potential exploitations of CVE-2023-36884, you should: Monitor file events on Windows systems, specifically focusing on the creation of files within the user directories that follow a particular pattern. Look for files being created in the path 'C:\\Users\\[any user]\\AppData\\Roaming\\Microsoft\\Office\\Recent\\' and specifically target files that end with '\\file001.url'. This pattern of file creation is indicative of potential exploitation attempts associated with the vulnerability CVE-2023-36884. The monitoring for these types of file events should be regarded with a medium level of concern due to the possibility of false positives being unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific file being created in the recent folder of Office. These files have been seen being dropped during potential exploitations of CVE-2023-36884",
      "answer": "In order to detect a specific file being created in the recent folder of Office, which has been seen being dropped during potential exploitations of CVE-2023-36884, you should: Monitor file events on Windows systems, specifically focusing on the creation of files within the user directories that follow a particular pattern. Look for files being created in the path 'C:\\Users\\[any user]\\AppData\\Roaming\\Microsoft\\Office\\Recent\\' and specifically target files that end with '\\file001.url'. This pattern of file creation is indicative of potential exploitation attempts associated with the vulnerability CVE-2023-36884. The monitoring for these types of file events should be regarded with a medium level of concern due to the possibility of false positives being unknown."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network",
    "context": "",
    "output": "In order to prevent adversaries from obtaining information about running processes on a system, which could be used to gain an understanding of common software/applications running on systems within the network, you should monitor Windows processes for the execution of the \"tasklist\" command. Specifically, look for process creation events where the command line contains 'tasklist', the image path ends with '\\tasklist.exe', or the original file name is 'tasklist.exe'. These indicators suggest an attempt to list processes, which could be an initial step in reconnaissance within a network. Be aware that some false positives may occur, such as legitimate requests by administrators or helpdesk inquiries to users. As this activity is merely informational, it is crucial to analyze the context of each event to determine whether it is benign or part of a more extensive attack campaign.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network",
      "answer": "In order to prevent adversaries from obtaining information about running processes on a system, which could be used to gain an understanding of common software/applications running on systems within the network, you should monitor Windows processes for the execution of the \"tasklist\" command. Specifically, look for process creation events where the command line contains 'tasklist', the image path ends with '\\tasklist.exe', or the original file name is 'tasklist.exe'. These indicators suggest an attempt to list processes, which could be an initial step in reconnaissance within a network. Be aware that some false positives may occur, such as legitimate requests by administrators or helpdesk inquiries to users. As this activity is merely informational, it is crucial to analyze the context of each event to determine whether it is benign or part of a more extensive attack campaign."
    }
  },
  {
    "instruction": "How can I detect: suspicious child process of userinit",
    "context": "",
    "output": "In order to detect a suspicious child process of userinit, you should: Monitor the creation of processes on Windows operating systems. Focus on identifying processes that are initiated by 'userinit.exe'. However, to reduce false positives and focus on potential threats, exclude any process that has command lines containing '\\netlogon\\' or those processes where the image or the original filename is 'explorer.exe'. For processes that raise suspicion, it's crucial to log their command lines and the parent process's command line for further investigation. Administrative scripts might occasionally trigger similar patterns, so they are considered potential false positives. This approach is targeted at identifying unusual or potentially malicious activity initiated by userinit, which is often a legitimate part of the Windows login process but can be abused by attackers for executing malicious code right after a user logs in.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious child process of userinit",
      "answer": "In order to detect a suspicious child process of userinit, you should: Monitor the creation of processes on Windows operating systems. Focus on identifying processes that are initiated by 'userinit.exe'. However, to reduce false positives and focus on potential threats, exclude any process that has command lines containing '\\netlogon\\' or those processes where the image or the original filename is 'explorer.exe'. For processes that raise suspicion, it's crucial to log their command lines and the parent process's command line for further investigation. Administrative scripts might occasionally trigger similar patterns, so they are considered potential false positives. This approach is targeted at identifying unusual or potentially malicious activity initiated by userinit, which is often a legitimate part of the Windows login process but can be abused by attackers for executing malicious code right after a user logs in."
    }
  },
  {
    "instruction": "Can you explain how to detect: The Reset-ComputerMachinePassword cmdlet changes the computer account password that the computers use to authenticate to the domain controllers in the domain.\nYou can use it to reset the password of the local computer.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to reset the password of the local computer or change the computer account password that computers use to authenticate to the domain controllers in the domain, you should monitor Windows PowerShell modules activity for the execution of the \"Reset-ComputerMachinePassword\" cmdlet. This action can be identified in the logs generated by PowerShell module activity, specifically those with the definition ID \"0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\". Look for entries containing the context information \"Reset-ComputerMachinePassword\", as this indicates the cmdlet was used.\n\nBe aware that legitimate administrative activities may occasionally involve using this cmdlet, so not all instances may represent malicious behavior. These legitimate cases are commonly referred to as false positives; an example includes Administrator PowerShell scripts that are run for legitimate maintenance or recovery tasks.\n\nThis monitoring strategy is set at a medium level of alert priority, indicating that while the action monitored can be used in malicious scenarios; it can also be part of normal administrative duties. Identifying unauthorized or malicious use of the \"Reset-ComputerMachinePassword\" cmdlet may point towards attempts to manipulate computer accounts and their authentication processes to the domain controllers, which could impact the integrity and security of domain communications and accesses.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The Reset-ComputerMachinePassword cmdlet changes the computer account password that the computers use to authenticate to the domain controllers in the domain.\nYou can use it to reset the password of the local computer.\n",
      "answer": "In order to reset the password of the local computer or change the computer account password that computers use to authenticate to the domain controllers in the domain, you should monitor Windows PowerShell modules activity for the execution of the \"Reset-ComputerMachinePassword\" cmdlet. This action can be identified in the logs generated by PowerShell module activity, specifically those with the definition ID \"0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\". Look for entries containing the context information \"Reset-ComputerMachinePassword\", as this indicates the cmdlet was used.\n\nBe aware that legitimate administrative activities may occasionally involve using this cmdlet, so not all instances may represent malicious behavior. These legitimate cases are commonly referred to as false positives; an example includes Administrator PowerShell scripts that are run for legitimate maintenance or recovery tasks.\n\nThis monitoring strategy is set at a medium level of alert priority, indicating that while the action monitored can be used in malicious scenarios; it can also be part of normal administrative duties. Identifying unauthorized or malicious use of the \"Reset-ComputerMachinePassword\" cmdlet may point towards attempts to manipulate computer accounts and their authentication processes to the domain controllers, which could impact the integrity and security of domain communications and accesses."
    }
  },
  {
    "instruction": "How to detect: variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block linked in the references",
    "context": "",
    "output": "In order to detect all variations of obfuscated PowerShell IEX invocation code generated by Invoke-Obfuscation framework from the code block linked in the references, you should monitor Windows system service logs, specifically looking for event ID 7045. This event is crucial because it is related to the service installation, which attackers may exploit to execute obfuscated PowerShell code. \n\nThe detection criteria focus on the ImagePath field within these logs, searching for patterns that indicate obfuscation techniques. These patterns include irregular use of variables like `$PSHome`, `$ShellId`, `$env:Public`, and `$env:ComSpec`, alongside more complex indicators such as strings modifications and method invocations that are typically not found in conventional PowerShell scripts. \n\nSpecifically, look for:\n- Use of `$PSHome` or `$ShellId` in a manner that involves array access with numeric values, potentially obfuscating access to system paths.\n- Manipulation of `$env:Public` and `$env:ComSpec` environment variables in unusual patterns, indicating attempts to hide the true nature of the command.\n- Patterns like `*mdr*` within the context that may not conform to typical script operations, pointing towards code obfuscation attempts.\n- Irregular invocations of methods such as `.ToString()` on system variables like `$VerbosePreference`, which can be an indication of obfuscation attempts to convert or hide PowerShell commands.\n\nThe detection of such patterns is of high importance and should be treated with a high level of alertness, given the potential for misuse in executing unauthorized commands and scripts on the system, which could lead to further malicious activities. While there may be unknown false positives, the unique nature of these patterns typically indicates an attempt to invoke PowerShell code through obfuscation, aligning with the tactics and techniques used to evade detection and execute malicious scripts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block linked in the references",
      "answer": "In order to detect all variations of obfuscated PowerShell IEX invocation code generated by Invoke-Obfuscation framework from the code block linked in the references, you should monitor Windows system service logs, specifically looking for event ID 7045. This event is crucial because it is related to the service installation, which attackers may exploit to execute obfuscated PowerShell code. \n\nThe detection criteria focus on the ImagePath field within these logs, searching for patterns that indicate obfuscation techniques. These patterns include irregular use of variables like `$PSHome`, `$ShellId`, `$env:Public`, and `$env:ComSpec`, alongside more complex indicators such as strings modifications and method invocations that are typically not found in conventional PowerShell scripts. \n\nSpecifically, look for:\n- Use of `$PSHome` or `$ShellId` in a manner that involves array access with numeric values, potentially obfuscating access to system paths.\n- Manipulation of `$env:Public` and `$env:ComSpec` environment variables in unusual patterns, indicating attempts to hide the true nature of the command.\n- Patterns like `*mdr*` within the context that may not conform to typical script operations, pointing towards code obfuscation attempts.\n- Irregular invocations of methods such as `.ToString()` on system variables like `$VerbosePreference`, which can be an indication of obfuscation attempts to convert or hide PowerShell commands.\n\nThe detection of such patterns is of high importance and should be treated with a high level of alertness, given the potential for misuse in executing unauthorized commands and scripts on the system, which could lead to further malicious activities. While there may be unknown false positives, the unique nature of these patterns typically indicates an attempt to invoke PowerShell code through obfuscation, aligning with the tactics and techniques used to evade detection and execute malicious scripts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Generic rule for SQL exceptions in Python according to PEP 249",
    "context": "",
    "output": "In order to detect generic SQL exceptions in Python applications as outlined in PEP 249, you should monitor application logs specifically from Python products. Look for the presence of specific keywords in these logs that indicate an SQL exception. The keywords to watch for include: 'DataError', 'IntegrityError', 'ProgrammingError', and 'OperationalError'. These keywords are indicative of various types of SQL errors that could signal either benign issues like application bugs or potentially malicious activities, such as SQL injection attempts.\n\nIt's important to note that the detection of these keywords in Python application logs is not conclusive evidence of an attack. False positives can occur, and one common source of these is bugs within the application itself. The risk level associated with detecting these keywords is considered medium, suggesting that while not all detections will be of malicious intent, they warrant further investigation to rule out or confirm suspicious activities. \n\nIn essence, by focusing on Python application logs and being alert to the specified keywords, you can identify SQL exceptions that may be indicative of attempted attacks following PEP 249 guidelines, while being mindful of the possibility of false positives due to application errors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Generic rule for SQL exceptions in Python according to PEP 249",
      "answer": "In order to detect generic SQL exceptions in Python applications as outlined in PEP 249, you should monitor application logs specifically from Python products. Look for the presence of specific keywords in these logs that indicate an SQL exception. The keywords to watch for include: 'DataError', 'IntegrityError', 'ProgrammingError', and 'OperationalError'. These keywords are indicative of various types of SQL errors that could signal either benign issues like application bugs or potentially malicious activities, such as SQL injection attempts.\n\nIt's important to note that the detection of these keywords in Python application logs is not conclusive evidence of an attack. False positives can occur, and one common source of these is bugs within the application itself. The risk level associated with detecting these keywords is considered medium, suggesting that while not all detections will be of malicious intent, they warrant further investigation to rule out or confirm suspicious activities. \n\nIn essence, by focusing on Python application logs and being alert to the specified keywords, you can identify SQL exceptions that may be indicative of attempted attacks following PEP 249 guidelines, while being mindful of the possibility of false positives due to application errors."
    }
  },
  {
    "instruction": "Can you explain how to detect: command lines that indicate unwanted modifications to registry keys that disable important Internet Explorer security features",
    "context": "",
    "output": "Certainly!\n\nIn order to detect command lines that indicate unwanted modifications to registry keys that disable important Internet Explorer security features, you should monitor the creation of processes on Windows systems. Look for command lines that include specific patterns indicating the alteration of registry values, which are critical for maintaining the security features of Internet Explorer. These patterns include command lines containing '-name IEHarden -value 0', which disables the IE hardening feature, '-name DEPOff -value 1', turning off Data Execution Prevention for Internet Explorer, and '-name DisableFirstRunCustomize -value 2', which disables the customization on the first run of Internet Explorer. The detection of any one of these command line arguments should raise a high level of alert due to the potential security risk they pose by weakening Internet Explorer's security settings.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "command lines that indicate unwanted modifications to registry keys that disable important Internet Explorer security features",
      "answer": "In order to detect command lines that indicate unwanted modifications to registry keys that disable important Internet Explorer security features, you should monitor the creation of processes on Windows systems. Look for command lines that include specific patterns indicating the alteration of registry values, which are critical for maintaining the security features of Internet Explorer. These patterns include command lines containing '-name IEHarden -value 0', which disables the IE hardening feature, '-name DEPOff -value 1', turning off Data Execution Prevention for Internet Explorer, and '-name DisableFirstRunCustomize -value 2', which disables the customization on the first run of Internet Explorer. The detection of any one of these command line arguments should raise a high level of alert due to the potential security risk they pose by weakening Internet Explorer's security settings."
    }
  },
  {
    "instruction": "How to detect: Windows telemetry makes use of the binary CompatTelRunner.exe to run a variety of commands and perform the actual telemetry collections.\nThis binary was created to be easily extensible, and to that end, it relies on the registry to instruct on which commands to run.\nThe problem is, it will run any arbitrary command without restriction of location or type.\n",
    "context": "",
    "output": "In order to detect attempts to exploit the extensibility of the Windows telemetry system by running arbitrary commands via the binary CompatTelRunner.exe, you should: Monitor the Windows registry for any SetValue event types that target the registry key path \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\TelemetryController\\\". Specifically, watch for modifications that involve file types such as shell scripts ('.sh'), executable files ('.exe'), dynamic link libraries ('.dll'), binary files ('.bin'), batch files ('.bat'), command script files ('.cmd'), JavaScript files ('.js'), PowerShell scripts ('.ps'), VBScript files ('.vb'), Java archives ('.jar'), HTML applications ('.hta'), Microsoft Installer packages ('.msi'), and VBScript scripts ('.vbs'). These file types are of interest because the manipulation or addition of such file references in the specified registry path could indicate malicious activity, exploiting the CompatTelRunner.exe binary to execute unauthorized or harmful commands. Collecting fields such as EventID, CommandLine, TargetObject, and Details from the registry set events will aid in the investigation of such activities. While assessing these detections, it's important to remember that there might be unknown scenarios that could trigger false positives; however, the level of concern for this kind of activity is considered high due to its potential for abuse.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Windows telemetry makes use of the binary CompatTelRunner.exe to run a variety of commands and perform the actual telemetry collections.\nThis binary was created to be easily extensible, and to that end, it relies on the registry to instruct on which commands to run.\nThe problem is, it will run any arbitrary command without restriction of location or type.\n",
      "answer": "In order to detect attempts to exploit the extensibility of the Windows telemetry system by running arbitrary commands via the binary CompatTelRunner.exe, you should: Monitor the Windows registry for any SetValue event types that target the registry key path \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\TelemetryController\\\". Specifically, watch for modifications that involve file types such as shell scripts ('.sh'), executable files ('.exe'), dynamic link libraries ('.dll'), binary files ('.bin'), batch files ('.bat'), command script files ('.cmd'), JavaScript files ('.js'), PowerShell scripts ('.ps'), VBScript files ('.vb'), Java archives ('.jar'), HTML applications ('.hta'), Microsoft Installer packages ('.msi'), and VBScript scripts ('.vbs'). These file types are of interest because the manipulation or addition of such file references in the specified registry path could indicate malicious activity, exploiting the CompatTelRunner.exe binary to execute unauthorized or harmful commands. Collecting fields such as EventID, CommandLine, TargetObject, and Details from the registry set events will aid in the investigation of such activities. While assessing these detections, it's important to remember that there might be unknown scenarios that could trigger false positives; however, the level of concern for this kind of activity is considered high due to its potential for abuse."
    }
  },
  {
    "instruction": "How can I detect: modification of autostart extensibility point (ASEP) in registry.",
    "context": "",
    "output": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should: focus on monitoring registry set activities within Windows operating systems for specific event types and targeting certain registry keys. Look for event types that are of the \"SetValue\" category, indicating a modification has been made. Specifically, attention should be paid to alterations within the '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion' path, which is often targeted for persistent threats. Moreover, any changes within related paths such as '\\Windows\\Appinit_Dlls', '\\Image File Execution Options', and '\\Drivers32' should also raise flags. \n\nHowever, it's essential to eliminate false positives which can arise from legitimate software installations or administrative actions that also modify these keys. Such legitimate modifications frequently happen during the setup of new software or by administrators setting up autorun keys for valid reasons. To refine detection, exclude events that merely clear or interact with the '\\REGISTRY\\MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' without making substantial changes.\n\nFor thorough investigation and auditing purposes, ensure to log the SecurityID, ObjectName, OldValueType, and NewValueType fields. These will help in assessing the nature and impact of the registry modifications. Be aware that this activity has a medium level of concern due to legitimate instances of such behavior and focus on patterns that might indicate malicious intent such as unusual modification times or sources. This approach is aligned with observing tactics and techniques often used by adversaries, such as Persistence and Privilege Escalation, through unauthorized modifications in registry settings to establish persistence or execute malicious payloads.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should: focus on monitoring registry set activities within Windows operating systems for specific event types and targeting certain registry keys. Look for event types that are of the \"SetValue\" category, indicating a modification has been made. Specifically, attention should be paid to alterations within the '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion' path, which is often targeted for persistent threats. Moreover, any changes within related paths such as '\\Windows\\Appinit_Dlls', '\\Image File Execution Options', and '\\Drivers32' should also raise flags. \n\nHowever, it's essential to eliminate false positives which can arise from legitimate software installations or administrative actions that also modify these keys. Such legitimate modifications frequently happen during the setup of new software or by administrators setting up autorun keys for valid reasons. To refine detection, exclude events that merely clear or interact with the '\\REGISTRY\\MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' without making substantial changes.\n\nFor thorough investigation and auditing purposes, ensure to log the SecurityID, ObjectName, OldValueType, and NewValueType fields. These will help in assessing the nature and impact of the registry modifications. Be aware that this activity has a medium level of concern due to legitimate instances of such behavior and focus on patterns that might indicate malicious intent such as unusual modification times or sources. This approach is aligned with observing tactics and techniques often used by adversaries, such as Persistence and Privilege Escalation, through unauthorized modifications in registry settings to establish persistence or execute malicious payloads."
    }
  },
  {
    "instruction": "Please help me detect the following: access to $ADMIN share",
    "context": "",
    "output": "Sure!\nIn order to detect access to $ADMIN share, you should look for specific events within Windows Security logs. Focus on events where the advanced audit policy regarding \"Object Access > Audit File Share\" is configured to log both success and failure instances. Specifically, keep an eye out for events with an ID of 5140, which indicates an attempt to access a file share. Moreover, it's essential to filter these events to include those accessing the \"Admin$\" share, a well-known default share used for administrative purposes in Windows systems.\n\nHowever, during this monitoring process, it's also important to apply certain filters to reduce false positives. One such filter involves ignoring events initiated by computer account names (which end in a '$' symbol). These are typically automated processes or services running on the network and are less likely to be related to unauthorized access attempts.\n\nIt's worth noting that while monitoring for this activity is critical, it's also expected to encounter legitimate administrative activities that match these criteria. Due to the nature of administrative tasks that might involve accessing the $ADMIN share, these events are categorized with a low level of alert. Therefore, any detection should be carefully analyzed to distinguish between malicious activities and necessary administrative operations.\n\nThis approach primarily aligns with the MITRE ATT&CK tactics and techniques related to Credential Access and Lateral Movement by monitoring attempts to access critical administrative shares on a network, which could indicate an attempt to escalate privileges or move laterally within the network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "access to $ADMIN share",
      "answer": "In order to detect access to $ADMIN share, you should look for specific events within Windows Security logs. Focus on events where the advanced audit policy regarding \"Object Access > Audit File Share\" is configured to log both success and failure instances. Specifically, keep an eye out for events with an ID of 5140, which indicates an attempt to access a file share. Moreover, it's essential to filter these events to include those accessing the \"Admin$\" share, a well-known default share used for administrative purposes in Windows systems.\n\nHowever, during this monitoring process, it's also important to apply certain filters to reduce false positives. One such filter involves ignoring events initiated by computer account names (which end in a '$' symbol). These are typically automated processes or services running on the network and are less likely to be related to unauthorized access attempts.\n\nIt's worth noting that while monitoring for this activity is critical, it's also expected to encounter legitimate administrative activities that match these criteria. Due to the nature of administrative tasks that might involve accessing the $ADMIN share, these events are categorized with a low level of alert. Therefore, any detection should be carefully analyzed to distinguish between malicious activities and necessary administrative operations.\n\nThis approach primarily aligns with the MITRE ATT&CK tactics and techniques related to Credential Access and Lateral Movement by monitoring attempts to access critical administrative shares on a network, which could indicate an attempt to escalate privileges or move laterally within the network."
    }
  },
  {
    "instruction": "How can I detect: access to a domain user from a non-machine account",
    "context": "",
    "output": "In order to detect access to a domain user from a non-machine account, you should focus on monitoring security logs from Windows systems. Specifically, look for event ID 4662, which signals an attempt to access an object. The object type of interest is identified by its globally unique identifier (GUID) 'bf967aba-0de6-11d0-a285-00aa003049e2', which corresponds to user objects in Windows. This means the detection targets situations where someone is accessing properties of a user object within the domain.\n\nHowever, it's important to exclude events generated by machine accounts and specific system accounts used by Microsoft services (like those starting with 'MSOL_'), as these are normally involved in legitimate operations and could otherwise generate false positives. Machine accounts can be identified and excluded if the subject's username ends with a '$', a customary naming convention for such accounts.\n\nBe aware that legitimate administrative activities, such as configuring new users, might trigger this detection, which could lead to potential false positives.\n\nBy focusing on these criteria, the aim is to pinpoint access attempts to domain user objects that are not initiated by recognized system processes or machine accounts, indicating a possible unauthorized access or reconnaissance activity by an attacker trying to explore or compromise domain user accounts. This approach plays a crucial role in safeguarding against tactics and techniques related to unauthorized access, lateral movement, and domain discovery.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "access to a domain user from a non-machine account",
      "answer": "In order to detect access to a domain user from a non-machine account, you should focus on monitoring security logs from Windows systems. Specifically, look for event ID 4662, which signals an attempt to access an object. The object type of interest is identified by its globally unique identifier (GUID) 'bf967aba-0de6-11d0-a285-00aa003049e2', which corresponds to user objects in Windows. This means the detection targets situations where someone is accessing properties of a user object within the domain.\n\nHowever, it's important to exclude events generated by machine accounts and specific system accounts used by Microsoft services (like those starting with 'MSOL_'), as these are normally involved in legitimate operations and could otherwise generate false positives. Machine accounts can be identified and excluded if the subject's username ends with a '$', a customary naming convention for such accounts.\n\nBe aware that legitimate administrative activities, such as configuring new users, might trigger this detection, which could lead to potential false positives.\n\nBy focusing on these criteria, the aim is to pinpoint access attempts to domain user objects that are not initiated by recognized system processes or machine accounts, indicating a possible unauthorized access or reconnaissance activity by an attacker trying to explore or compromise domain user accounts. This approach plays a crucial role in safeguarding against tactics and techniques related to unauthorized access, lateral movement, and domain discovery."
    }
  },
  {
    "instruction": "Explain how should I detect the following: command that clears or disables any ETW trace log which could indicate a logging evasion.",
    "context": "",
    "output": "In order to detect a command that clears or disables any ETW (Event Tracing for Windows) trace log which could indicate a logging evasion, you should monitor for certain command line activities on Windows systems, specifically within the process creation logs. Look for commands issued to the system that include combinations of strings suggesting the clearing or disabling of ETW tracing. These commands are critical to identify because they can represent efforts by malicious actors to evade logging and monitoring mechanisms, thereby hiding their activities.\n\nFirstly, observe for the command line inclinations which aim to clear ETW logs. These inclinations are marked by the presence of 'cl' and '/Trace' or 'clear-log' and '/Trace' within a single command line execution. The intention here is to clear or reset the state of ETW logging, potentially erasing evidence of malicious activity.\n\nIn addition, pay attention to commands designed to disable ETW tracing. These are identified by the presence of strings like 'sl' and '/e:false', 'set-log' and '/e:false', or a combination of 'logman', 'update', 'trace', '--p', and '-ets'. These commands are usually structured to change the state or properties of ETW logging to disable or stop logging.\n\nFurthermore, specifically for PowerShell commands, look for 'Remove-EtwTraceProvider', indicating removal of an ETW provider, and 'Set-EtwTraceProvider' alongside '0x11', which suggests modification of a provider\u2019s \"Enable\" property to likely disable it.\n\nBeing vigilant for these commands is imperative as they can have a high impact on security monitoring mechanisms by evading detection. The lack of ETW logs might provide an attacker with a blind spot to conduct their activities unnoticed. Such actions are usually not part of regular system administration tasks and thus, while false positives are a possibility, they are unknown under normal circumstances.\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "command that clears or disables any ETW trace log which could indicate a logging evasion.",
      "answer": "In order to detect a command that clears or disables any ETW (Event Tracing for Windows) trace log which could indicate a logging evasion, you should monitor for certain command line activities on Windows systems, specifically within the process creation logs. Look for commands issued to the system that include combinations of strings suggesting the clearing or disabling of ETW tracing. These commands are critical to identify because they can represent efforts by malicious actors to evade logging and monitoring mechanisms, thereby hiding their activities.\n\nFirstly, observe for the command line inclinations which aim to clear ETW logs. These inclinations are marked by the presence of 'cl' and '/Trace' or 'clear-log' and '/Trace' within a single command line execution. The intention here is to clear or reset the state of ETW logging, potentially erasing evidence of malicious activity.\n\nIn addition, pay attention to commands designed to disable ETW tracing. These are identified by the presence of strings like 'sl' and '/e:false', 'set-log' and '/e:false', or a combination of 'logman', 'update', 'trace', '--p', and '-ets'. These commands are usually structured to change the state or properties of ETW logging to disable or stop logging.\n\nFurthermore, specifically for PowerShell commands, look for 'Remove-EtwTraceProvider', indicating removal of an ETW provider, and 'Set-EtwTraceProvider' alongside '0x11', which suggests modification of a provider\u2019s \"Enable\" property to likely disable it.\n\nBeing vigilant for these commands is imperative as they can have a high impact on security monitoring mechanisms by evading detection. The lack of ETW logs might provide an attacker with a blind spot to conduct their activities unnoticed. Such actions are usually not part of regular system administration tasks and thus, while false positives are a possibility, they are unknown under normal circumstances.\n"
    }
  },
  {
    "instruction": "Can you explain how to detect: conditional access changes.",
    "context": "",
    "output": "Certainly!\n\nIn order to monitor and alert on conditional access changes, you should focus on the audit logs from Azure products. Specifically, keep an eye out for logs that record the message \"Add conditional access policy\". This action could indicate an attempt to modify access controls, which can impact the security posture of your environment. However, be mindful of potential false positives which might arise from misconfigured role permissions or legitimate but unexpected changes from certain users, user agents, or hostnames in your environment. The significance of these logs are considered to be of medium level, suggesting that while they are important to track, they should be contextualized within the broader security operations of your organization.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "conditional access changes.",
      "answer": "In order to monitor and alert on conditional access changes, you should focus on the audit logs from Azure products. Specifically, keep an eye out for logs that record the message \"Add conditional access policy\". This action could indicate an attempt to modify access controls, which can impact the security posture of your environment. However, be mindful of potential false positives which might arise from misconfigured role permissions or legitimate but unexpected changes from certain users, user agents, or hostnames in your environment. The significance of these logs are considered to be of medium level, suggesting that while they are important to track, they should be contextualized within the broader security operations of your organization."
    }
  },
  {
    "instruction": "How can I detect: use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.",
    "context": "",
    "output": "In order to detect the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application, you should: Focus on monitoring Windows process creation logs for instances where the command line contains both '\\register_app.vbs' and '-register'. This detection points out the execution of the 'register_app.vbs' script with the specific command line argument '-register', which is typically used for registering a Volume Shadow Copy Service (VSS) or Virtual Disk Service (VDS) provider as a COM+ application. Such actions may be indicative of malicious activities, although it's important to consider that there could be legitimate reasons for using this script in this manner. To differentiate between benign and malicious usage, closely investigate the context in which the script is being executed. The level of threat is considered medium, suggesting that while this activity is suspicious, it doesn\u2019t always correlate with a security threat. Always verify the nature of what's being registered by the script to ensure it's not part of an attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.",
      "answer": "In order to detect the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application, you should: Focus on monitoring Windows process creation logs for instances where the command line contains both '\\register_app.vbs' and '-register'. This detection points out the execution of the 'register_app.vbs' script with the specific command line argument '-register', which is typically used for registering a Volume Shadow Copy Service (VSS) or Virtual Disk Service (VDS) provider as a COM+ application. Such actions may be indicative of malicious activities, although it's important to consider that there could be legitimate reasons for using this script in this manner. To differentiate between benign and malicious usage, closely investigate the context in which the script is being executed. The level of threat is considered medium, suggesting that while this activity is suspicious, it doesn\u2019t always correlate with a security threat. Always verify the nature of what's being registered by the script to ensure it's not part of an attack."
    }
  },
  {
    "instruction": "Can you explain how to detect: keywords from well-known PowerShell exploitation frameworks",
    "context": "",
    "output": "Certainly!\n\nIn order to detect keywords from well-known PowerShell exploitation frameworks, you should: Monitor PowerShell script activity on Windows systems by enabling Script Block Logging. This approach requires looking for specific keywords in the script text that are commonly associated with exploitation frameworks and tools, such as 'AdjustTokenPrivileges', 'IMAGE_NT_OPTIONAL_HDR64_MAGIC', 'Metasploit', 'Microsoft.Win32.UnsafeNativeMethods', 'Mimikatz', 'MiniDumpWriteDump', 'PAGE_EXECUTE_READ', 'ReadProcessMemory.Invoke', 'SE_PRIVILEGE_ENABLED', 'SECURITY_DELEGATION', 'TOKEN_ADJUST_PRIVILEGES', 'TOKEN_ALL_ACCESS', 'TOKEN_ASSIGN_PRIMARY', 'TOKEN_DUPLICATE', 'TOKEN_ELEVATION', 'TOKEN_IMPERSONATE', 'TOKEN_INFORMATION_CLASS', 'TOKEN_PRIVILEGES', 'TOKEN_QUERY'. These indications could suggest an attempt to exploit PowerShell for malicious activities such as privilege escalation, memory dumping, or security tokens manipulation. Given the wide range of script uses, it might be necessary to adjust the sensitivity of the detection to match the specifics of the environment to minimize false positives. This approach is aligned with medium-level security monitoring practices.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "keywords from well-known PowerShell exploitation frameworks",
      "answer": "In order to detect keywords from well-known PowerShell exploitation frameworks, you should: Monitor PowerShell script activity on Windows systems by enabling Script Block Logging. This approach requires looking for specific keywords in the script text that are commonly associated with exploitation frameworks and tools, such as 'AdjustTokenPrivileges', 'IMAGE_NT_OPTIONAL_HDR64_MAGIC', 'Metasploit', 'Microsoft.Win32.UnsafeNativeMethods', 'Mimikatz', 'MiniDumpWriteDump', 'PAGE_EXECUTE_READ', 'ReadProcessMemory.Invoke', 'SE_PRIVILEGE_ENABLED', 'SECURITY_DELEGATION', 'TOKEN_ADJUST_PRIVILEGES', 'TOKEN_ALL_ACCESS', 'TOKEN_ASSIGN_PRIMARY', 'TOKEN_DUPLICATE', 'TOKEN_ELEVATION', 'TOKEN_IMPERSONATE', 'TOKEN_INFORMATION_CLASS', 'TOKEN_PRIVILEGES', 'TOKEN_QUERY'. These indications could suggest an attempt to exploit PowerShell for malicious activities such as privilege escalation, memory dumping, or security tokens manipulation. Given the wide range of script uses, it might be necessary to adjust the sensitivity of the detection to match the specifics of the environment to minimize false positives. This approach is aligned with medium-level security monitoring practices."
    }
  },
  {
    "instruction": "How can I detect: changes to the AppInstaller (winget) policy. Specifically the activation of the local manifest installation, which allows a user to install new packages via custom manifests.",
    "context": "",
    "output": "In order to detect changes to the AppInstaller (winget) policy, specifically the activation of the local manifest installation, which allows a user to install new packages via custom manifests, you should monitor the Windows Registry for specific changes. Look for events where the type is SetValue on Windows systems within the registry settings. Specifically, pinpoint any modifications targeting the key that ends with '\\AppInstaller\\EnableLocalManifestFiles'. This particular setting being altered to a DWORD value of 1 (0x00000001) indicates the policy allowing local manifest file installations has been enabled. Keep in mind that there could be legitimate reasons for this change, such as administrators or developers enabling this feature for testing purposes or to install custom private packages. The severity of this activity is assessed as medium, and it falls under the tactics and techniques that monitor for unauthorized system configuration changes to facilitate further malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the AppInstaller (winget) policy. Specifically the activation of the local manifest installation, which allows a user to install new packages via custom manifests.",
      "answer": "In order to detect changes to the AppInstaller (winget) policy, specifically the activation of the local manifest installation, which allows a user to install new packages via custom manifests, you should monitor the Windows Registry for specific changes. Look for events where the type is SetValue on Windows systems within the registry settings. Specifically, pinpoint any modifications targeting the key that ends with '\\AppInstaller\\EnableLocalManifestFiles'. This particular setting being altered to a DWORD value of 1 (0x00000001) indicates the policy allowing local manifest file installations has been enabled. Keep in mind that there could be legitimate reasons for this change, such as administrators or developers enabling this feature for testing purposes or to install custom private packages. The severity of this activity is assessed as medium, and it falls under the tactics and techniques that monitor for unauthorized system configuration changes to facilitate further malicious activities."
    }
  },
  {
    "instruction": "How can I detect: issues with Windows Defender Real-Time Protection features",
    "context": "",
    "output": "In order to detect issues with Windows Defender Real-Time Protection features, you should focus on monitoring Windows Defender (WinDefend) logs for specific event IDs that indicate problems with Real-Time Protection functionality. Look for events 3002, which signals that the Real-Time Protection feature has encountered an error and failed, and 3007, indicating that the Real-Time Protection feature has restarted. These events are critical as they can imply that the system's defense mechanisms against malware and other threats are compromised.\n\nHowever, it's also important to filter out false positives that might arise from optional network inspection features. Specifically, ignore alerts that stem from the Network Inspection System (Feature_Name '%%886'), especially those related to the system missing updates required for running the Network Inspection System (Reason '%%892'), or instances where the antimalware security intelligence has stopped functioning for an unknown reason (Reason '%%858'). In these cases, the issue might be resolved by installing required updates or restarting the service, and they may not directly indicate a significant problem with the Real-Time Protection features.\n\nBe aware that some crashes can sometimes occur, which do not provide enough information to accurately tune out these cases. Therefore, manual investigation and exception handling might be required for such instances. The importance of monitoring these specific events is categorized at a medium level, highlighting their significance in maintaining the integrity of Windows Defender's real-time protection against threats. This monitoring approach aligns with detection strategies for identifying potential disruptions or failures in systems designed to protect against malware, unauthorized access, and other security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "issues with Windows Defender Real-Time Protection features",
      "answer": "In order to detect issues with Windows Defender Real-Time Protection features, you should focus on monitoring Windows Defender (WinDefend) logs for specific event IDs that indicate problems with Real-Time Protection functionality. Look for events 3002, which signals that the Real-Time Protection feature has encountered an error and failed, and 3007, indicating that the Real-Time Protection feature has restarted. These events are critical as they can imply that the system's defense mechanisms against malware and other threats are compromised.\n\nHowever, it's also important to filter out false positives that might arise from optional network inspection features. Specifically, ignore alerts that stem from the Network Inspection System (Feature_Name '%%886'), especially those related to the system missing updates required for running the Network Inspection System (Reason '%%892'), or instances where the antimalware security intelligence has stopped functioning for an unknown reason (Reason '%%858'). In these cases, the issue might be resolved by installing required updates or restarting the service, and they may not directly indicate a significant problem with the Real-Time Protection features.\n\nBe aware that some crashes can sometimes occur, which do not provide enough information to accurately tune out these cases. Therefore, manual investigation and exception handling might be required for such instances. The importance of monitoring these specific events is categorized at a medium level, highlighting their significance in maintaining the integrity of Windows Defender's real-time protection against threats. This monitoring approach aligns with detection strategies for identifying potential disruptions or failures in systems designed to protect against malware, unauthorized access, and other security threats."
    }
  },
  {
    "instruction": "Can you explain how to detect: F-Secure C3 produces DLLs with a default exported StartNodeRelay function.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential misuse of F-Secure C3 produced DLLs, which contain a default exported StartNodeRelay function, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the command line includes 'rundll32.exe', followed by any '.dll' file, and particularly the 'StartNodeRelay' function being called. This activity is critical to observe as it could be indicative of an attacker leveraging F-Secure C3 functionalities for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "F-Secure C3 produces DLLs with a default exported StartNodeRelay function.",
      "answer": "In order to detect potential misuse of F-Secure C3 produced DLLs, which contain a default exported StartNodeRelay function, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the command line includes 'rundll32.exe', followed by any '.dll' file, and particularly the 'StartNodeRelay' function being called. This activity is critical to observe as it could be indicative of an attacker leveraging F-Secure C3 functionalities for malicious purposes."
    }
  },
  {
    "instruction": "Please help me detect the following: specific process tree behavior of a \"rundll32\" execution where the DLL doesn't have the \".dll\" extension. This is often linked with potential Qakbot activity.",
    "context": "",
    "output": "Sure!\nIn order to detect specific process tree behavior of a \"rundll32\" execution where the DLL doesn't have the \".dll\" extension, often linked with potential Qakbot activity, you should monitor Windows process creation logs for cases where parent processes commonly associated with Qakbot malware (like cmd.exe, cscript.exe, curl.exe, mshta.exe, powershell.exe, pwsh.exe, and wscript.exe) initiate a \"rundll32.exe\" process. Additionally, pay attention to command line arguments pointing to locations frequently used by malware such as ProgramData, Users\\Public, AppData\\Local\\Temp, and AppData\\Roaming directories. Importantly, the process should be flagged if the command line includes these paths but does not involve direct invocation of a \".dll\" extension, aiming to identify disguises not typical for benign DLL usage. False positives are considered unlikely due to the specificity of these indicators, underscoring the criticality of this detection in identifying stealthy Qakbot malware operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific process tree behavior of a \"rundll32\" execution where the DLL doesn't have the \".dll\" extension. This is often linked with potential Qakbot activity.",
      "answer": "In order to detect specific process tree behavior of a \"rundll32\" execution where the DLL doesn't have the \".dll\" extension, often linked with potential Qakbot activity, you should monitor Windows process creation logs for cases where parent processes commonly associated with Qakbot malware (like cmd.exe, cscript.exe, curl.exe, mshta.exe, powershell.exe, pwsh.exe, and wscript.exe) initiate a \"rundll32.exe\" process. Additionally, pay attention to command line arguments pointing to locations frequently used by malware such as ProgramData, Users\\Public, AppData\\Local\\Temp, and AppData\\Roaming directories. Importantly, the process should be flagged if the command line includes these paths but does not involve direct invocation of a \".dll\" extension, aiming to identify disguises not typical for benign DLL usage. False positives are considered unlikely due to the specificity of these indicators, underscoring the criticality of this detection in identifying stealthy Qakbot malware operations."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments.\nThis may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox\n",
    "context": "",
    "output": "In order to detect adversaries who employ various system checks to avoid virtualization and analysis environments, you should focus on monitoring PowerShell scripts within Windows environments. It is essential that Script Block Logging is enabled to capture the PowerShell script activities accurately. The detection strategy involves looking for scripts that contain keywords indicative of system information queries, specifically those that use PowerShell commands like `Get-WmiObject` or its alias `gwmi`. Additionally, scripts querying for specific system information such as `MSAcpi_ThermalZoneTemperature` or `Win32_ComputerSystem` are also red flags. These particular queries are often used by adversaries to gather information about the system, which can help them determine if an analysis or virtualized environment is present, thus enabling them to change their behavior to avoid detection. The detection strategy encompasses monitoring all these elements. Although the potential for false positives exists, the severity level for such detections is considered medium, indicating a balanced approach towards identifying malicious activity without overwhelming the analysts with benign alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments.\nThis may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox\n",
      "answer": "In order to detect adversaries who employ various system checks to avoid virtualization and analysis environments, you should focus on monitoring PowerShell scripts within Windows environments. It is essential that Script Block Logging is enabled to capture the PowerShell script activities accurately. The detection strategy involves looking for scripts that contain keywords indicative of system information queries, specifically those that use PowerShell commands like `Get-WmiObject` or its alias `gwmi`. Additionally, scripts querying for specific system information such as `MSAcpi_ThermalZoneTemperature` or `Win32_ComputerSystem` are also red flags. These particular queries are often used by adversaries to gather information about the system, which can help them determine if an analysis or virtualized environment is present, thus enabling them to change their behavior to avoid detection. The detection strategy encompasses monitoring all these elements. Although the potential for false positives exists, the severity level for such detections is considered medium, indicating a balanced approach towards identifying malicious activity without overwhelming the analysts with benign alerts."
    }
  },
  {
    "instruction": "Please help me detect the following: changes to the \"TracingDisabled\" key in order to disable ETW logging for services.exe (SCM)",
    "context": "",
    "output": "Sure!\nIn order to detect changes to the \"TracingDisabled\" key in order to disable ETW logging for services.exe (SCM), you should focus on monitoring Windows Registry setting modifications. Specifically, look for events where a SetValue operation occurs targeting the registry key path ending with 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Tracing\\SCM\\Regular\\TracingDisabled'. The detection is particularly interested in cases where this registry key's value is set to 'DWORD (0x00000001)', which intriguingly is its default state but its modification indicates an attempt to manipulate ETW logging behavior for the Service Control Manager (SCM). It's crucial to monitor such changes, despite the assigned low level of threat and acknowledging that some modifications might not signify malicious activity (hence, the potential for unknown false positives). This activity aligns with attack techniques focused on evasion or impeding event logging, aiming to reduce the visibility of the attacker's actions on the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the \"TracingDisabled\" key in order to disable ETW logging for services.exe (SCM)",
      "answer": "In order to detect changes to the \"TracingDisabled\" key in order to disable ETW logging for services.exe (SCM), you should focus on monitoring Windows Registry setting modifications. Specifically, look for events where a SetValue operation occurs targeting the registry key path ending with 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Tracing\\SCM\\Regular\\TracingDisabled'. The detection is particularly interested in cases where this registry key's value is set to 'DWORD (0x00000001)', which intriguingly is its default state but its modification indicates an attempt to manipulate ETW logging behavior for the Service Control Manager (SCM). It's crucial to monitor such changes, despite the assigned low level of threat and acknowledging that some modifications might not signify malicious activity (hence, the potential for unknown false positives). This activity aligns with attack techniques focused on evasion or impeding event logging, aiming to reduce the visibility of the attacker's actions on the system."
    }
  },
  {
    "instruction": "Can you explain how to detect: when an attacker or tool disables the  Windows Defender service (WinDefend) via the registry",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when an attacker or tool disables the Windows Defender service (WinDefend) via the registry, you should monitor Windows Registry setting changes specifically for the Windows Defender service configuration. Focus on capturing events where the \"SetValue\" event type occurs, indicating a modification in the registry. The exact registry key to watch is \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\WinDefend\\Start\". An alteration to this key, especially to set its value to \"DWORD (0x00000004)\", signifies that the Windows Defender service is being disabled. This monitoring is crucial as it directly impacts the system's security posture by potentially allowing malicious activities to go undetected. Be aware that changes made by administrators as part of legitimate maintenance or configuration can also trigger these alerts, thus they are considered potential false positives. Due to the critical nature of this modification, alerts generated from this activity are treated with a high level of severity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker or tool disables the  Windows Defender service (WinDefend) via the registry",
      "answer": "In order to detect when an attacker or tool disables the Windows Defender service (WinDefend) via the registry, you should monitor Windows Registry setting changes specifically for the Windows Defender service configuration. Focus on capturing events where the \"SetValue\" event type occurs, indicating a modification in the registry. The exact registry key to watch is \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\WinDefend\\Start\". An alteration to this key, especially to set its value to \"DWORD (0x00000004)\", signifies that the Windows Defender service is being disabled. This monitoring is crucial as it directly impacts the system's security posture by potentially allowing malicious activities to go undetected. Be aware that changes made by administrators as part of legitimate maintenance or configuration can also trigger these alerts, thus they are considered potential false positives. Due to the critical nature of this modification, alerts generated from this activity are treated with a high level of severity."
    }
  },
  {
    "instruction": "Please help me detect the following: process access to verclsid.exe that injects shellcode from a Microsoft Office application / VBA macro",
    "context": "",
    "output": "Sure!\nIn order to detect a process access to verclsid.exe that injects shellcode from a Microsoft Office application / VBA macro, you should monitor Windows process access events, especially focusing on Event ID 10, which relates to process access. Configure your system to include events where the call trace involves \"VBE7.DLL\" and exclude those with \"UNKNOWN\" in the call trace, as this particular DLL is oftentimes used in legitimate processes.\n\nSpecifically, observe any access attempts targeting \"verclsid.exe\" at the end of the Target Image path, which also have been granted access rights of '0x1FFFFF', indicating full access permissions. This is a significant indicator of a suspicious activity since \"verclsid.exe\" is a Windows program associated with COM object instantiation and not commonly interacted with directly by users or most software.\n\nLook for signs of shellcode injection manifesting in two potential patterns. The first involves call traces that contain both \"UNKNOWN(\" and \"VBE7.DLL\", suggesting a possible obfuscation attempt combined with known VBA macro interaction. The second pattern to monitor involves any source image path containing \"\\Microsoft Office\\\" and call traces with \"|UNKNOWN\", indicating the exploitation might be originating from a Microsoft Office application, a common vector for macro-based shellcode injection.\n\nThe detection is deemed critical due to the combination of high-access permissions and the specific interaction patterns with \"verclsid.exe\", indicating a strong possibility of a malicious macro or Office application attempting to perform unauthorized actions on the system. There may be unknown false positives, indicating that careful examination of each detection is necessary to differentiate between malfeasance and legitimate but unusual behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process access to verclsid.exe that injects shellcode from a Microsoft Office application / VBA macro",
      "answer": "In order to detect a process access to verclsid.exe that injects shellcode from a Microsoft Office application / VBA macro, you should monitor Windows process access events, especially focusing on Event ID 10, which relates to process access. Configure your system to include events where the call trace involves \"VBE7.DLL\" and exclude those with \"UNKNOWN\" in the call trace, as this particular DLL is oftentimes used in legitimate processes.\n\nSpecifically, observe any access attempts targeting \"verclsid.exe\" at the end of the Target Image path, which also have been granted access rights of '0x1FFFFF', indicating full access permissions. This is a significant indicator of a suspicious activity since \"verclsid.exe\" is a Windows program associated with COM object instantiation and not commonly interacted with directly by users or most software.\n\nLook for signs of shellcode injection manifesting in two potential patterns. The first involves call traces that contain both \"UNKNOWN(\" and \"VBE7.DLL\", suggesting a possible obfuscation attempt combined with known VBA macro interaction. The second pattern to monitor involves any source image path containing \"\\Microsoft Office\\\" and call traces with \"|UNKNOWN\", indicating the exploitation might be originating from a Microsoft Office application, a common vector for macro-based shellcode injection.\n\nThe detection is deemed critical due to the combination of high-access permissions and the specific interaction patterns with \"verclsid.exe\", indicating a strong possibility of a malicious macro or Office application attempting to perform unauthorized actions on the system. There may be unknown false positives, indicating that careful examination of each detection is necessary to differentiate between malfeasance and legitimate but unusual behavior."
    }
  },
  {
    "instruction": "Can you explain how to detect: DLL sideloading of DLLs that are part of third party software (zoom, discord....etc)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect DLL sideloading of DLLs that are part of third-party software (Zoom, Discord, etc.), you should monitor the loading of specific DLL files on Windows systems, particularly focusing on the event of an image being loaded. Specifically, watch out for the loading of 'commfunc.dll' and 'tosbtkbd.dll', which are associated with Lenovo and Toshiba software respectively. However, you need to differentiate between legitimate and potentially malicious activities. For the Lenovo software, consider it suspicious if 'commfunc.dll' is loaded without it being part of the expected paths, which usually include 'C:\\Program Files\\Lenovo\\Communications Utility\\' and 'C:\\Program Files (x86)\\Lenovo\\Communications Utility\\'. Similarly, for Toshiba, be cautious when 'tosbtkbd.dll' is loaded outside of its typical paths like 'C:\\Program Files\\Toshiba\\Bluetooth Toshiba Stack\\' and 'C:\\Program Files (x86)\\Toshiba\\Bluetooth Toshiba Stack\\'. These detections help identify when these DLLs may be sideloaded in a manner not intended by legitimate applications, potentially as a part of malicious activities. Be aware that there are unknown potential false positives with this technique, indicating the need for additional verification upon detection. The severity of these detections is considered medium, highlighting their importance without assuming immediate critical risk.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DLL sideloading of DLLs that are part of third party software (zoom, discord....etc)",
      "answer": "In order to detect DLL sideloading of DLLs that are part of third-party software (Zoom, Discord, etc.), you should monitor the loading of specific DLL files on Windows systems, particularly focusing on the event of an image being loaded. Specifically, watch out for the loading of 'commfunc.dll' and 'tosbtkbd.dll', which are associated with Lenovo and Toshiba software respectively. However, you need to differentiate between legitimate and potentially malicious activities. For the Lenovo software, consider it suspicious if 'commfunc.dll' is loaded without it being part of the expected paths, which usually include 'C:\\Program Files\\Lenovo\\Communications Utility\\' and 'C:\\Program Files (x86)\\Lenovo\\Communications Utility\\'. Similarly, for Toshiba, be cautious when 'tosbtkbd.dll' is loaded outside of its typical paths like 'C:\\Program Files\\Toshiba\\Bluetooth Toshiba Stack\\' and 'C:\\Program Files (x86)\\Toshiba\\Bluetooth Toshiba Stack\\'. These detections help identify when these DLLs may be sideloaded in a manner not intended by legitimate applications, potentially as a part of malicious activities. Be aware that there are unknown potential false positives with this technique, indicating the need for additional verification upon detection. The severity of these detections is considered medium, highlighting their importance without assuming immediate critical risk."
    }
  },
  {
    "instruction": "How to detect: Identifies when sensitive information is re-identified in google Cloud.",
    "context": "",
    "output": "In order to identify when sensitive information is re-identified in Google Cloud, you should: Monitor for and analyze audit logs from Google Cloud Platform (GCP) services. Specifically, focus on logs generated by GCP audit services for events where the method name is 'projects.content.reidentify'. This indicates an operation aimed at re-identifying previously de-identified sensitive information. It is crucial to pay attention to these events as they might signify attempts to circumvent privacy protections or expose sensitive data unintentionally. While it is acknowledged that there may be legitimate reasons for re-identifying data in certain contexts, any instance flagged under this criterion should be scrutinized due to its medium level of potential security concern.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies when sensitive information is re-identified in google Cloud.",
      "answer": "In order to identify when sensitive information is re-identified in Google Cloud, you should: Monitor for and analyze audit logs from Google Cloud Platform (GCP) services. Specifically, focus on logs generated by GCP audit services for events where the method name is 'projects.content.reidentify'. This indicates an operation aimed at re-identifying previously de-identified sensitive information. It is crucial to pay attention to these events as they might signify attempts to circumvent privacy protections or expose sensitive data unintentionally. While it is acknowledged that there may be legitimate reasons for re-identifying data in certain contexts, any instance flagged under this criterion should be scrutinized due to its medium level of potential security concern."
    }
  },
  {
    "instruction": "How can I detect: User has indicated they haven't instigated the MFA prompt and could indicate an attacker has the password for the account.",
    "context": "",
    "output": "In order to detect signs indicating that an attacker may have obtained the password for an account, especially when a user reports not initiating a multi-factor authentication (MFA) prompt, you should focus on monitoring Azure sign-in logs. Look specifically for log entries where MFA was required for authentication and the status indicates that the MFA request was denied. This scenario suggests that although multi-factor authentication was prompted, it was not successfully completed. It could signal an unauthorized attempt to access the account, possibly indicating that someone other than the account owner is attempting to log in. Keep in mind that there could be legitimate instances where users accidentally deny the MFA prompt, which should be considered as potential false positives. This monitoring activity aligns with understanding how threat actors might gain access to accounts (Credential Access) and their attempts to penetrate security measures that protect against unauthorized access (Defense Evasion).",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "User has indicated they haven't instigated the MFA prompt and could indicate an attacker has the password for the account.",
      "answer": "In order to detect signs indicating that an attacker may have obtained the password for an account, especially when a user reports not initiating a multi-factor authentication (MFA) prompt, you should focus on monitoring Azure sign-in logs. Look specifically for log entries where MFA was required for authentication and the status indicates that the MFA request was denied. This scenario suggests that although multi-factor authentication was prompted, it was not successfully completed. It could signal an unauthorized attempt to access the account, possibly indicating that someone other than the account owner is attempting to log in. Keep in mind that there could be legitimate instances where users accidentally deny the MFA prompt, which should be considered as potential false positives. This monitoring activity aligns with understanding how threat actors might gain access to accounts (Credential Access) and their attempts to penetrate security measures that protect against unauthorized access (Defense Evasion)."
    }
  },
  {
    "instruction": "How can I detect: attempts to use system dialog prompts to capture user credentials",
    "context": "",
    "output": "In order to detect attempts to use system dialog prompts to capture user credentials, you should: Focus on monitoring process creation events on macOS. Specifically, watch for instances where the osascript command is executed, which is indicated by the process image path '/usr/sbin/osascript'. The detection efforts should zoom in on command lines that include the elements '-e', 'display', 'dialog', and 'answer', as these flags and strings together suggest a script is attempting to display a dialog to the user. Additionally, scrutinize command lines for presence of key words such as 'admin', 'administrator', 'authenticate', 'authentication', 'credentials', 'pass', 'password', and 'unlock'. These terms could indicate an attempt to present a dialog box designed to deceive a user into entering their credentials. It's important to be aware, though, that this detection strategy might yield false positives, particularly from legitimate administration tools and activities that also use system dialogs for password input or other authentication methods. Therefore, the threat level for these kinds of alerts is considered low.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to use system dialog prompts to capture user credentials",
      "answer": "In order to detect attempts to use system dialog prompts to capture user credentials, you should: Focus on monitoring process creation events on macOS. Specifically, watch for instances where the osascript command is executed, which is indicated by the process image path '/usr/sbin/osascript'. The detection efforts should zoom in on command lines that include the elements '-e', 'display', 'dialog', and 'answer', as these flags and strings together suggest a script is attempting to display a dialog to the user. Additionally, scrutinize command lines for presence of key words such as 'admin', 'administrator', 'authenticate', 'authentication', 'credentials', 'pass', 'password', and 'unlock'. These terms could indicate an attempt to present a dialog box designed to deceive a user into entering their credentials. It's important to be aware, though, that this detection strategy might yield false positives, particularly from legitimate administration tools and activities that also use system dialogs for password input or other authentication methods. Therefore, the threat level for these kinds of alerts is considered low."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious process patterns used in NTDS.DIT exfiltration",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious process patterns used in NTDS.DIT exfiltration, you should focus on monitoring process creation events within Windows environments. Pay particular attention to processes associated with the execution of NTDSDump.exe or NTDSDumpEx.exe, especially when command lines indicate the handling of 'ntds.dit' or 'system.hiv' files, which are critical for NTDS.DIT exfiltration attempts. Additionally, be on the lookout for usage of the PowerShell script 'NTDSgrab.ps1'.\n\nBe vigilant for command lines that resemble system tools being misused for exfiltration purposes, such as one-liners utilizing 'ntdsutil.exe' for creating full directory copies of critical databases, or command lines copying the 'ntds.dit' file from its original location to another, which is a blatant sign of data exfiltration attempt.\n\nAnother key indicator of NTDS.DIT exfiltration includes PowerShell command lines specifically targeting 'ntds.dit' files. This can be a subtler approach but equally significant in the context of cyber attacks.\n\nFurthermore, scrutinize processes where 'ntds.dit' is involved, especially if the initiating parent process or the process itself is located in unusual directories like apache, tomcat, AppData, Temp, Public, or PerfLogs folders. These locations are not standard for legitimate system or administrative tools to operate from and can be indicative of an adversary attempting to camouflage their actions.\n\nImplementing these detection strategies involves looking for one or more of these suspicious activities. The high severity level attributed to these signs reflects their potential impact on organizational security, indicating a high likelihood of a targeted NTDS.DIT exfiltration attempt.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious process patterns used in NTDS.DIT exfiltration",
      "answer": "In order to detect suspicious process patterns used in NTDS.DIT exfiltration, you should focus on monitoring process creation events within Windows environments. Pay particular attention to processes associated with the execution of NTDSDump.exe or NTDSDumpEx.exe, especially when command lines indicate the handling of 'ntds.dit' or 'system.hiv' files, which are critical for NTDS.DIT exfiltration attempts. Additionally, be on the lookout for usage of the PowerShell script 'NTDSgrab.ps1'.\n\nBe vigilant for command lines that resemble system tools being misused for exfiltration purposes, such as one-liners utilizing 'ntdsutil.exe' for creating full directory copies of critical databases, or command lines copying the 'ntds.dit' file from its original location to another, which is a blatant sign of data exfiltration attempt.\n\nAnother key indicator of NTDS.DIT exfiltration includes PowerShell command lines specifically targeting 'ntds.dit' files. This can be a subtler approach but equally significant in the context of cyber attacks.\n\nFurthermore, scrutinize processes where 'ntds.dit' is involved, especially if the initiating parent process or the process itself is located in unusual directories like apache, tomcat, AppData, Temp, Public, or PerfLogs folders. These locations are not standard for legitimate system or administrative tools to operate from and can be indicative of an adversary attempting to camouflage their actions.\n\nImplementing these detection strategies involves looking for one or more of these suspicious activities. The high severity level attributed to these signs reflects their potential impact on organizational security, indicating a high likelihood of a targeted NTDS.DIT exfiltration attempt."
    }
  },
  {
    "instruction": "How can I detect: potential overwriting and deletion of a file using DD.",
    "context": "",
    "output": "In order to detect potential overwriting and deletion of a file using DD, you should: Monitor the creation of processes in Linux systems specifically for instances where the 'dd' command, located at '/bin/dd' or '/usr/bin/dd', is utilized. The detection focuses on commands that include 'of=' (indicating the output file destination), and ones where the input file is either '/dev/zero' or '/dev/null'. This setup aims to catch scenarios where the 'dd' command may be used inappropriately for overwriting or deleting files. Beware that there could be legitimate instances where a user employs this method for file management, hence these detections are considered of low severity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential overwriting and deletion of a file using DD.",
      "answer": "In order to detect potential overwriting and deletion of a file using DD, you should: Monitor the creation of processes in Linux systems specifically for instances where the 'dd' command, located at '/bin/dd' or '/usr/bin/dd', is utilized. The detection focuses on commands that include 'of=' (indicating the output file destination), and ones where the input file is either '/dev/zero' or '/dev/null'. This setup aims to catch scenarios where the 'dd' command may be used inappropriately for overwriting or deleting files. Beware that there could be legitimate instances where a user employs this method for file management, hence these detections are considered of low severity."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of bitsadmin downloading a file from a suspicious domain",
    "context": "",
    "output": "In order to detect usage of bitsadmin downloading a file from a suspicious domain, you should: focus on the creation of processes within a Windows environment. Specifically, monitor for instances where the 'bitsadmin.exe' utility is invoked, identifiable either through its file name or the OriginalFileName attribute indicating 'bitsadmin.exe'. Key indicators include command line arguments such as '/transfer', '/create', or '/addfile', which are common flags used during file operations with bitsadmin. Additionally, heightened attention should be given to command line inputs that contain URLs pointing to known suspicious domains. These domains comprise various online paste services and file sharing platforms, such as '.ghostbin.co', '.hastebin.com', 'pastebin.com', 'mega.nz', and several others, known for being utilized in malicious operations for hosting or transferring malicious files. Any process creation event that matches these criteria, involving both the specific tool usage and connection to these domains, should be flagged for further investigation. While it's noted that there may be legitimate uses of this utility interacting with these services, such occurrences are expected to be rare and thus the alert level for this activity is considered high.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of bitsadmin downloading a file from a suspicious domain",
      "answer": "In order to detect usage of bitsadmin downloading a file from a suspicious domain, you should: focus on the creation of processes within a Windows environment. Specifically, monitor for instances where the 'bitsadmin.exe' utility is invoked, identifiable either through its file name or the OriginalFileName attribute indicating 'bitsadmin.exe'. Key indicators include command line arguments such as '/transfer', '/create', or '/addfile', which are common flags used during file operations with bitsadmin. Additionally, heightened attention should be given to command line inputs that contain URLs pointing to known suspicious domains. These domains comprise various online paste services and file sharing platforms, such as '.ghostbin.co', '.hastebin.com', 'pastebin.com', 'mega.nz', and several others, known for being utilized in malicious operations for hosting or transferring malicious files. Any process creation event that matches these criteria, involving both the specific tool usage and connection to these domains, should be flagged for further investigation. While it's noted that there may be legitimate uses of this utility interacting with these services, such occurrences are expected to be rare and thus the alert level for this activity is considered high."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect use of iptables to flush all firewall rules, tables and chains and allow all network traffic",
    "context": "",
    "output": "Sure!\nIn order to detect use of iptables to flush all firewall rules, tables and chains and allow all network traffic, you should: monitor Linux systems for the creation of processes that are invoking utilities related to IPTables and UFW. Specifically, look for processes ending with '/iptables', '/xtables-legacy-multi', '/iptables-legacy-multi', '/ip6tables', or '/ip6tables-legacy-multi'. These utilities are significant because they are directly associated with managing Linux firewalls. Focus on commands that contain parameters '-F', '-Z', '-X', which are used to flush all rules, set all chain's packet and byte counters to zero, and delete a chain, respectively. Additionally, monitor for UFW related commands that include 'ufw-logging-deny', 'ufw-logging-allow', 'ufw6-logging-deny', and 'ufw6-logging-allow', which are utilized to configure logging rules in the Uncomplicated Firewall (UFW). Network administrators may perform such activities as part of legitimate management tasks, thus they are considered potential false positives. The detection level is set to medium due to the potential impact and the likelihood of occurrence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect use of iptables to flush all firewall rules, tables and chains and allow all network traffic",
      "answer": "In order to detect use of iptables to flush all firewall rules, tables and chains and allow all network traffic, you should: monitor Linux systems for the creation of processes that are invoking utilities related to IPTables and UFW. Specifically, look for processes ending with '/iptables', '/xtables-legacy-multi', '/iptables-legacy-multi', '/ip6tables', or '/ip6tables-legacy-multi'. These utilities are significant because they are directly associated with managing Linux firewalls. Focus on commands that contain parameters '-F', '-Z', '-X', which are used to flush all rules, set all chain's packet and byte counters to zero, and delete a chain, respectively. Additionally, monitor for UFW related commands that include 'ufw-logging-deny', 'ufw-logging-allow', 'ufw6-logging-deny', and 'ufw6-logging-allow', which are utilized to configure logging rules in the Uncomplicated Firewall (UFW). Network administrators may perform such activities as part of legitimate management tasks, thus they are considered potential false positives. The detection level is set to medium due to the potential impact and the likelihood of occurrence."
    }
  },
  {
    "instruction": "How can I detect: Detect Attempt PrintNightmare (CVE-2021-1675) Remote code execution in Windows Spooler Service",
    "context": "",
    "output": "In order to detect Attempt PrintNightmare (CVE-2021-1675) Remote code execution in Windows Spooler Service, you should: monitor Windows SMB client security events specifically looking for event ID 31017. This event, when it doesn't associate with any user name (indicating UserName is empty) and the ServerName begins with a backslash followed by a '1', could indicate an exploitation attempt against the Windows Spooler Service. It is crucial to log and analyze the computer and user involved in these events, despite typically having the UserName field empty, as they can provide context and help in tracking potential attacks linked to the PrintNightmare vulnerability. Be aware that there are some legitimate scenarios where these conditions might be met, such as account fallback reasons after a failed login with a specific account, which are considered false positives. The severity level for these observations is classified as medium. This method targets the identification of malicious activity associated with tactics and techniques that exploit PrintNightmare, without explicitly relying on predefined attack patterns, making it adaptable and effective for continuous security monitoring.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect Attempt PrintNightmare (CVE-2021-1675) Remote code execution in Windows Spooler Service",
      "answer": "In order to detect Attempt PrintNightmare (CVE-2021-1675) Remote code execution in Windows Spooler Service, you should: monitor Windows SMB client security events specifically looking for event ID 31017. This event, when it doesn't associate with any user name (indicating UserName is empty) and the ServerName begins with a backslash followed by a '1', could indicate an exploitation attempt against the Windows Spooler Service. It is crucial to log and analyze the computer and user involved in these events, despite typically having the UserName field empty, as they can provide context and help in tracking potential attacks linked to the PrintNightmare vulnerability. Be aware that there are some legitimate scenarios where these conditions might be met, such as account fallback reasons after a failed login with a specific account, which are considered false positives. The severity level for these observations is classified as medium. This method targets the identification of malicious activity associated with tactics and techniques that exploit PrintNightmare, without explicitly relying on predefined attack patterns, making it adaptable and effective for continuous security monitoring."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of netsh commands that configure a new port forwarding (PortProxy) rule",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of netsh commands that configure a new port forwarding (PortProxy) rule, you should monitor for the creation of processes on Windows systems that involve netsh.exe, either by checking for processes where the image ends with '\\netsh.exe' or where the original filename matches 'netsh.exe'. Additionally, scrutinize any command line invocations containing significant flags and parameters that are associated with setting up port forwarding, specifically through netsh. These include combinations that signify configuring an interface for port proxying such as 'interface', 'portproxy', 'add', 'v4tov4', or a compact variation like 'i ', 'p ', 'a ', 'v ' which may indicate a shorthand command for the same action. Moreover, pay attention to commands that include parameters like 'connectp', 'listena', and 'c=' which are crucial in defining the specifics of the port forwarding rule like the connect port, listen address, and connect address respectively. Be mindful however that there are legitimate scenarios where such activities might occur, such as legitimate administration tasks or specific configurations for WSL2 network bridges via PowerShell scripts, which should be considered when evaluating potential security alerts. The level of alert for this type of detection is considered medium, reflecting the balance between the need to detect possible malicious activity and recognizing legitimate use cases.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of netsh commands that configure a new port forwarding (PortProxy) rule",
      "answer": "In order to detect the execution of netsh commands that configure a new port forwarding (PortProxy) rule, you should monitor for the creation of processes on Windows systems that involve netsh.exe, either by checking for processes where the image ends with '\\netsh.exe' or where the original filename matches 'netsh.exe'. Additionally, scrutinize any command line invocations containing significant flags and parameters that are associated with setting up port forwarding, specifically through netsh. These include combinations that signify configuring an interface for port proxying such as 'interface', 'portproxy', 'add', 'v4tov4', or a compact variation like 'i ', 'p ', 'a ', 'v ' which may indicate a shorthand command for the same action. Moreover, pay attention to commands that include parameters like 'connectp', 'listena', and 'c=' which are crucial in defining the specifics of the port forwarding rule like the connect port, listen address, and connect address respectively. Be mindful however that there are legitimate scenarios where such activities might occur, such as legitimate administration tasks or specific configurations for WSL2 network bridges via PowerShell scripts, which should be considered when evaluating potential security alerts. The level of alert for this type of detection is considered medium, reflecting the balance between the need to detect possible malicious activity and recognizing legitimate use cases."
    }
  },
  {
    "instruction": "Can you explain how to detect: process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up, you should: look for signs in the Windows environment where the process access category indicates an anomaly. Specifically, look out for instances where the WerFault.exe process attempts to access the lsass.exe process with unusually high access permissions (granted access level of 0x1FFFFF). This kind of access suggests an attempt to read, write, or manipulate the LSASS memory, which is a common tactic in credential dumping attacks. Despite this detection method being highly indicative of malicious activity, be mindful of rare legitimate scenarios where WerFault.exe might legitimately access lsass.exe, such as genuine failures of the lsass.exe process that trigger a crash dump. However, these instances are considered unlikely. The detection of such activity is categorized with a high level of severity due to the sensitive nature of lsass.exe in Windows systems, which manages user authentication and security protocols.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up.",
      "answer": "In order to detect process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up, you should: look for signs in the Windows environment where the process access category indicates an anomaly. Specifically, look out for instances where the WerFault.exe process attempts to access the lsass.exe process with unusually high access permissions (granted access level of 0x1FFFFF). This kind of access suggests an attempt to read, write, or manipulate the LSASS memory, which is a common tactic in credential dumping attacks. Despite this detection method being highly indicative of malicious activity, be mindful of rare legitimate scenarios where WerFault.exe might legitimately access lsass.exe, such as genuine failures of the lsass.exe process that trigger a crash dump. However, these instances are considered unlikely. The detection of such activity is categorized with a high level of severity due to the sensitive nature of lsass.exe in Windows systems, which manages user authentication and security protocols."
    }
  },
  {
    "instruction": "Explain how should I detect the following: An adversary might use WMI to execute commands on a remote system",
    "context": "",
    "output": "In order to detect an attempt by an adversary to use WMI (Windows Management Instrumentation) to execute commands on a remote system, you should focus on monitoring the process creation logs in Windows environments. Specifically, look for the creation of processes that are related to WMI command execution. This involves detecting processes that end with the path '\\WMIC.exe' or have an original file name of 'wmic.exe'. Additionally, pay attention to the command line arguments used with these processes, especially looking for the combination of '/node:', 'process', 'call', and 'create' within the same command line. These particular arguments are indicative of an attempt to execute commands remotely using WMI. Be aware that there might be legitimate uses of these commands and arguments, so there could be unknown false positives. The level of threat for this behavior is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "An adversary might use WMI to execute commands on a remote system",
      "answer": "In order to detect an attempt by an adversary to use WMI (Windows Management Instrumentation) to execute commands on a remote system, you should focus on monitoring the process creation logs in Windows environments. Specifically, look for the creation of processes that are related to WMI command execution. This involves detecting processes that end with the path '\\WMIC.exe' or have an original file name of 'wmic.exe'. Additionally, pay attention to the command line arguments used with these processes, especially looking for the combination of '/node:', 'process', 'call', and 'create' within the same command line. These particular arguments are indicative of an attempt to execute commands remotely using WMI. Be aware that there might be legitimate uses of these commands and arguments, so there could be unknown false positives. The level of threat for this behavior is considered medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: corrupted packets sent to the MSMQ service. Could potentially be a sign of CVE-2023-21554 exploitation",
    "context": "",
    "output": "Certainly!\n\nIn order to detect corrupted packets sent to the MSMQ service, which could potentially be a sign of CVE-2023-21554 exploitation, you should: Monitor Windows application logs for events produced by the MSMQ (Microsoft Message Queuing) service. Specifically, look for logs with a provider name of 'MSMQ' that have an Event ID of 2027 and a log level of '2'. This configuration is indicative of an incident that involves corrupted packets being received by the MSMQ service, which may be an attempt to exploit the vulnerability known as CVE-2023-21554. It's essential to pay close attention to these signals as they are considered high severity, although be aware that there might be unknown scenarios that could generate false positives. Nonetheless, this monitoring strategy is crucial for identifying potential exploitation attempts against the MSMQ service.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "corrupted packets sent to the MSMQ service. Could potentially be a sign of CVE-2023-21554 exploitation",
      "answer": "In order to detect corrupted packets sent to the MSMQ service, which could potentially be a sign of CVE-2023-21554 exploitation, you should: Monitor Windows application logs for events produced by the MSMQ (Microsoft Message Queuing) service. Specifically, look for logs with a provider name of 'MSMQ' that have an Event ID of 2027 and a log level of '2'. This configuration is indicative of an incident that involves corrupted packets being received by the MSMQ service, which may be an attempt to exploit the vulnerability known as CVE-2023-21554. It's essential to pay close attention to these signals as they are considered high severity, although be aware that there might be unknown scenarios that could generate false positives. Nonetheless, this monitoring strategy is crucial for identifying potential exploitation attempts against the MSMQ service."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious script executions from temporary folder",
    "context": "",
    "output": "In order to detect suspicious script executions from temporary folders, you should: monitor the creation of processes on Windows systems, specifically looking for executions of PowerShell (`powershell.exe` or `pwsh.exe`), HTML Application Host (`mshta.exe`), Windows Script Host (`wscript.exe` or `cscript.exe`). It's crucial to pay attention to commands that involve directories commonly used for temporary files, such as `\\Windows\\Temp`, `\\Temporary Internet`, `\\AppData\\Local\\Temp`, `\\AppData\\Roaming\\Temp`, and any paths containing environment variables like `%TEMP%`, `%TMP%`, or `%LocalAppData%\\Temp`. However, to avoid false positives, ignore command lines that include redirections (` >`), use of `Out-File`, serialization to JSON (`ConvertTo-Json`), actions to hide the window (`-WindowStyle hidden -Verb runAs`, which is often seen in legitimate scenarios like VSCode's behavior under certain conditions), or paths indicating operations possibly related to AWS EC2 (`\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Temp\\Amazon\\EC2-Windows\\`). Remember, this approach aims to eliminate usual administrative scripts from being flagged incorrectly. Keep an eye out for these activities at a high level of alert due to their potential to signify malicious behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious script executions from temporary folder",
      "answer": "In order to detect suspicious script executions from temporary folders, you should: monitor the creation of processes on Windows systems, specifically looking for executions of PowerShell (`powershell.exe` or `pwsh.exe`), HTML Application Host (`mshta.exe`), Windows Script Host (`wscript.exe` or `cscript.exe`). It's crucial to pay attention to commands that involve directories commonly used for temporary files, such as `\\Windows\\Temp`, `\\Temporary Internet`, `\\AppData\\Local\\Temp`, `\\AppData\\Roaming\\Temp`, and any paths containing environment variables like `%TEMP%`, `%TMP%`, or `%LocalAppData%\\Temp`. However, to avoid false positives, ignore command lines that include redirections (` >`), use of `Out-File`, serialization to JSON (`ConvertTo-Json`), actions to hide the window (`-WindowStyle hidden -Verb runAs`, which is often seen in legitimate scenarios like VSCode's behavior under certain conditions), or paths indicating operations possibly related to AWS EC2 (`\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Temp\\Amazon\\EC2-Windows\\`). Remember, this approach aims to eliminate usual administrative scripts from being flagged incorrectly. Keep an eye out for these activities at a high level of alert due to their potential to signify malicious behavior."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Obfuscated use of Clip.exe to execute PowerShell",
    "context": "",
    "output": "In order to detect obfuscated use of Clip.exe to execute PowerShell, you should focus on monitoring the PowerShell module activity within the Windows environment. Specifically, look for events where the command line execution patterns match the use of 'cmd' followed by either '/c' or '/r' parameters, and closely thereafter, involves 'clip.exe' or 'clip' command. The detection becomes particularly specific with the inclusion of patterns that combine 'clip' with PowerShell commands that seem to manipulate the clipboard content in a sophisticated manner, indicated by the complex regex pattern provided. These patterns also include the use of '&&' operator, suggesting an attempt to chain commands in a manner that's not typical for regular system or user operations. \n\nMonitoring should be performed with high sensitivity due to the high level of potential impact, but it\u2019s important to note that as of now, the potential for unknown false positives exists, indicating that not all matched patterns could lead to genuine threats. However, given the obfuscated nature of the execution method, any hits on these patterns should be considered with a degree of caution. \n\nThis activity aligns with techniques known in cybersecurity frameworks which describe tactics such as Execution, Defense Evasion, and Command and Control, showing the attacker's efforts to execute commands covertly, evade detection mechanisms, and maintain control over the compromised system through unusual use of system utilities like Clip.exe in conjunction with PowerShell scripting.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated use of Clip.exe to execute PowerShell",
      "answer": "In order to detect obfuscated use of Clip.exe to execute PowerShell, you should focus on monitoring the PowerShell module activity within the Windows environment. Specifically, look for events where the command line execution patterns match the use of 'cmd' followed by either '/c' or '/r' parameters, and closely thereafter, involves 'clip.exe' or 'clip' command. The detection becomes particularly specific with the inclusion of patterns that combine 'clip' with PowerShell commands that seem to manipulate the clipboard content in a sophisticated manner, indicated by the complex regex pattern provided. These patterns also include the use of '&&' operator, suggesting an attempt to chain commands in a manner that's not typical for regular system or user operations. \n\nMonitoring should be performed with high sensitivity due to the high level of potential impact, but it\u2019s important to note that as of now, the potential for unknown false positives exists, indicating that not all matched patterns could lead to genuine threats. However, given the obfuscated nature of the execution method, any hits on these patterns should be considered with a degree of caution. \n\nThis activity aligns with techniques known in cybersecurity frameworks which describe tactics such as Execution, Defense Evasion, and Command and Control, showing the attacker's efforts to execute commands covertly, evade detection mechanisms, and maintain control over the compromised system through unusual use of system utilities like Clip.exe in conjunction with PowerShell scripting."
    }
  },
  {
    "instruction": "How can I detect: processes setting a new DLL in DllName in under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nAdversaries may abuse time providers to execute DLLs when the system boots.\nThe Windows Time service (W32Time) enables time synchronization across and within domains.\n",
    "context": "",
    "output": "In order to detect processes setting a new DLL in DllName under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider, as adversaries may abuse time providers to execute DLLs when the system boots, you should: Focus on monitoring registry set actions within Windows systems, specifically looking at events where the type is SetValue. This involves scrutinizing any changes made to the \u2018DllName\u2019 fields that start with 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders' and end with 'DllName'. It is crucial to exclude any events that specifically alter the Details to \u2018C:\\Windows\\SYSTEM32\\w32time.DLL\u2019 as this is considered a legitimate action and not part of this targeted detection process. No known false positives have been identified, indicating the high specificity of the conditions outlined, which underscores the importance of this monitoring in securing against adversaries exploiting the Windows Time service for malicious DLL execution as part of their initial access strategy or persistence mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "processes setting a new DLL in DllName in under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nAdversaries may abuse time providers to execute DLLs when the system boots.\nThe Windows Time service (W32Time) enables time synchronization across and within domains.\n",
      "answer": "In order to detect processes setting a new DLL in DllName under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider, as adversaries may abuse time providers to execute DLLs when the system boots, you should: Focus on monitoring registry set actions within Windows systems, specifically looking at events where the type is SetValue. This involves scrutinizing any changes made to the \u2018DllName\u2019 fields that start with 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders' and end with 'DllName'. It is crucial to exclude any events that specifically alter the Details to \u2018C:\\Windows\\SYSTEM32\\w32time.DLL\u2019 as this is considered a legitimate action and not part of this targeted detection process. No known false positives have been identified, indicating the high specificity of the conditions outlined, which underscores the importance of this monitoring in securing against adversaries exploiting the Windows Time service for malicious DLL execution as part of their initial access strategy or persistence mechanisms."
    }
  },
  {
    "instruction": "How can I detect: delete action in the Github audit logs for codespaces, environment, project and repo.",
    "context": "",
    "output": "In order to detect delete action in the Github audit logs for codespaces, environment, project, and repo, you should: Monitor GitHub's audit logs specifically looking for actions that indicate deletion activities. These actions include 'codespaces.delete', 'environment.delete', 'project.delete', and 'repo.destroy'. To effectively perform this monitoring, ensure the audit log streaming feature is enabled, a requirement for receiving such logs. Information on enabling this feature is available in GitHub's documentation. When one of these deletion actions is detected, important information such as the action itself, the actor who initiated the action, the organization where the action took place, and the country code of the actor's location should be logged. It's crucial to validate that any detected deletion activity was permitted and examine the \"actor\" field closely to authenticate their identity and authority to perform the deletion. This detection is of medium importance and helps in identifying potentially malicious activities or misconfigurations that could lead to unintentional loss of critical resources within GitHub environments.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "delete action in the Github audit logs for codespaces, environment, project and repo.",
      "answer": "In order to detect delete action in the Github audit logs for codespaces, environment, project, and repo, you should: Monitor GitHub's audit logs specifically looking for actions that indicate deletion activities. These actions include 'codespaces.delete', 'environment.delete', 'project.delete', and 'repo.destroy'. To effectively perform this monitoring, ensure the audit log streaming feature is enabled, a requirement for receiving such logs. Information on enabling this feature is available in GitHub's documentation. When one of these deletion actions is detected, important information such as the action itself, the actor who initiated the action, the organization where the action took place, and the country code of the actor's location should be logged. It's crucial to validate that any detected deletion activity was permitted and examine the \"actor\" field closely to authenticate their identity and authority to perform the deletion. This detection is of medium importance and helps in identifying potentially malicious activities or misconfigurations that could lead to unintentional loss of critical resources within GitHub environments."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect when a Cloud SQL DB has been modified or deleted.",
    "context": "",
    "output": "Sure!\nIn order to detect when a Cloud SQL DB has been modified or deleted, you should: Monitor your Google Cloud Platform (GCP) audit logs for specific activities related to Cloud SQL instances. Focus on logs detailing creation and deletion of Cloud SQL instances, as well as updates and deletions of Cloud SQL users. This monitoring is critical as these activities can indicate unauthorized modifications or deletions of your database, which may present significant security risks. It's essential to be aware that legitimate system administrators might perform such actions, so it's recommended to verify these activities' legitimacy by checking user identity, user agent, and hostname involved. Any modifications or deletions made by unfamiliar users should be thoroughly investigated to rule out any potential security threat. If you find that known, legitimate behavior is causing alerts, you can adjust your monitoring setup to avoid these false positives. This approach takes a medium-level security stance, balancing between the need for security vigilance and the recognition of legitimate administrative activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect when a Cloud SQL DB has been modified or deleted.",
      "answer": "In order to detect when a Cloud SQL DB has been modified or deleted, you should: Monitor your Google Cloud Platform (GCP) audit logs for specific activities related to Cloud SQL instances. Focus on logs detailing creation and deletion of Cloud SQL instances, as well as updates and deletions of Cloud SQL users. This monitoring is critical as these activities can indicate unauthorized modifications or deletions of your database, which may present significant security risks. It's essential to be aware that legitimate system administrators might perform such actions, so it's recommended to verify these activities' legitimacy by checking user identity, user agent, and hostname involved. Any modifications or deletions made by unfamiliar users should be thoroughly investigated to rule out any potential security threat. If you find that known, legitimate behavior is causing alerts, you can adjust your monitoring setup to avoid these false positives. This approach takes a medium-level security stance, balancing between the need for security vigilance and the recognition of legitimate administrative activities."
    }
  },
  {
    "instruction": "Please help me detect the following: an executable in the Windows folder accessing github.com",
    "context": "",
    "output": "Sure!\nIn order to detect an executable in the Windows folder accessing github.com, you should: Monitor network connections sourced from the Windows operating environment, specifically focusing on instances where network traffic is initiated by executables located within the C:\\Windows\\ directory. Special attention should be paid to network connections where the destination hostname ends with either '.github.com' or '.githubusercontent.com', signifying an attempt to access GitHub related domains. It is essential to acknowledge that while this activity can indicate a security concern, there are instances where it might not pose a risk, such as unspecified circumstances or network activities related to '@subTee'. This detection strategy has a high importance due to its potential implication in malicious activities associated with the use of GitHub for distributing or controlling malware, thus closely aligning with tactics and techniques that involve execution, command and control mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an executable in the Windows folder accessing github.com",
      "answer": "In order to detect an executable in the Windows folder accessing github.com, you should: Monitor network connections sourced from the Windows operating environment, specifically focusing on instances where network traffic is initiated by executables located within the C:\\Windows\\ directory. Special attention should be paid to network connections where the destination hostname ends with either '.github.com' or '.githubusercontent.com', signifying an attempt to access GitHub related domains. It is essential to acknowledge that while this activity can indicate a security concern, there are instances where it might not pose a risk, such as unspecified circumstances or network activities related to '@subTee'. This detection strategy has a high importance due to its potential implication in malicious activities associated with the use of GitHub for distributing or controlling malware, thus closely aligning with tactics and techniques that involve execution, command and control mechanisms."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious PowerShell download cradle using nslookup, which utilizes nslookup to extract payloads from DNS records, you should: Focus on monitoring process creations in Windows environments. Specifically, watch for instances where `nslookup.exe` is the process image launched, either by directly matching the image name to `\\nslookup.exe` or by verifying the original filename as `\\nslookup.exe`. Furthermore, it is essential to scrutinize any command line activities that originate from either PowerShell (`powershell.exe`) or PowerShell Core (`pwsh.exe`) where the command line includes DNS query-type indicators such as `-q=txt` or `-querytype=txt`. These particular command line parameters are suggestive of attempts to query text records from DNS, which is a tactic often employed by adversaries to extract malicious payloads covertly. Report any matching observations as they could be indicative of an ongoing attack. Be aware that this detection might have unknown false positives, signifying the need for manual verification of alerts to confirm malicious activity. The severity level associated with this monitoring strategy is deemed medium, reflecting the potential risk posed by the detected behavior in aligning with tactics such as Command and Control or Initial Access through the use of PowerShell for downloading malicious payloads via DNS records.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records",
      "answer": "In order to detect suspicious PowerShell download cradle using nslookup, which utilizes nslookup to extract payloads from DNS records, you should: Focus on monitoring process creations in Windows environments. Specifically, watch for instances where `nslookup.exe` is the process image launched, either by directly matching the image name to `\\nslookup.exe` or by verifying the original filename as `\\nslookup.exe`. Furthermore, it is essential to scrutinize any command line activities that originate from either PowerShell (`powershell.exe`) or PowerShell Core (`pwsh.exe`) where the command line includes DNS query-type indicators such as `-q=txt` or `-querytype=txt`. These particular command line parameters are suggestive of attempts to query text records from DNS, which is a tactic often employed by adversaries to extract malicious payloads covertly. Report any matching observations as they could be indicative of an ongoing attack. Be aware that this detection might have unknown false positives, signifying the need for manual verification of alerts to confirm malicious activity. The severity level associated with this monitoring strategy is deemed medium, reflecting the potential risk posed by the detected behavior in aligning with tactics such as Command and Control or Initial Access through the use of PowerShell for downloading malicious payloads via DNS records."
    }
  },
  {
    "instruction": "How to detect: potential DLL sideloading of \"SolidPDFCreator.dll\"",
    "context": "",
    "output": "In order to detect potential DLL sideloading of \"SolidPDFCreator.dll\", you should: Monitor Windows image load logs for instances where \"SolidPDFCreator.dll\" is loaded into a process. Specifically, look for cases where the loaded DLL ends with the path '\\SolidPDFCreator.dll'. It is crucial to exclude legitimate loading processes by checking if the DLL is not being loaded by the main SolidPDFCreator executable itself, denoted as '\\SolidPDFCreator.exe'. This exclusion is applied by ensuring that neither the loading image path ends with '\\SolidPDFCreator.exe' nor the loaded DLL starts with paths indicative of a legitimate SolidPDFCreator installation, which are 'C:\\Program Files (x86)\\SolidDocuments\\SolidPDFCreator\\' and 'C:\\Program Files\\SolidDocuments\\SolidPDFCreator\\'. This method aims at identifying suspicious activities possibly indicative of DLL sideloading attempts while reducing the chance of flagging legitimate activities as threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"SolidPDFCreator.dll\"",
      "answer": "In order to detect potential DLL sideloading of \"SolidPDFCreator.dll\", you should: Monitor Windows image load logs for instances where \"SolidPDFCreator.dll\" is loaded into a process. Specifically, look for cases where the loaded DLL ends with the path '\\SolidPDFCreator.dll'. It is crucial to exclude legitimate loading processes by checking if the DLL is not being loaded by the main SolidPDFCreator executable itself, denoted as '\\SolidPDFCreator.exe'. This exclusion is applied by ensuring that neither the loading image path ends with '\\SolidPDFCreator.exe' nor the loaded DLL starts with paths indicative of a legitimate SolidPDFCreator installation, which are 'C:\\Program Files (x86)\\SolidDocuments\\SolidPDFCreator\\' and 'C:\\Program Files\\SolidDocuments\\SolidPDFCreator\\'. This method aims at identifying suspicious activities possibly indicative of DLL sideloading attempts while reducing the chance of flagging legitimate activities as threats."
    }
  },
  {
    "instruction": "How to detect: Microsoft Cloud App Security reported when an app downloads multiple files from Microsoft SharePoint or Microsoft OneDrive in a manner that is unusual for the user.",
    "context": "",
    "output": "In order to detect when a Microsoft Cloud App Security reported when an app downloads multiple files from Microsoft SharePoint or Microsoft OneDrive in a manner that is unusual for the user, you should: Focus on monitoring logs generated by the threat management service within Microsoft 365 products. Specifically, look for logs from the SecurityComplianceCenter event source. The key activity to watch for is named 'Suspicious OAuth app file download activities' with a status marked as success. This activity indicates that an OAuth app has initiated file downloads from either Microsoft SharePoint or Microsoft OneDrive in a way that deviates from the typical behavior observed for the user. It is crucial to be aware that there might be instances where legitimate activities trigger alerts, noted as unknown false positives. The severity level associated with this detection is considered medium. The understanding of this process is tied to identifying potential unauthorized access or misuse of Microsoft Cloud applications, aiming to safeguard sensitive information stored within SharePoint or OneDrive services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported when an app downloads multiple files from Microsoft SharePoint or Microsoft OneDrive in a manner that is unusual for the user.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported when an app downloads multiple files from Microsoft SharePoint or Microsoft OneDrive in a manner that is unusual for the user, you should: Focus on monitoring logs generated by the threat management service within Microsoft 365 products. Specifically, look for logs from the SecurityComplianceCenter event source. The key activity to watch for is named 'Suspicious OAuth app file download activities' with a status marked as success. This activity indicates that an OAuth app has initiated file downloads from either Microsoft SharePoint or Microsoft OneDrive in a way that deviates from the typical behavior observed for the user. It is crucial to be aware that there might be instances where legitimate activities trigger alerts, noted as unknown false positives. The severity level associated with this detection is considered medium. The understanding of this process is tied to identifying potential unauthorized access or misuse of Microsoft Cloud applications, aiming to safeguard sensitive information stored within SharePoint or OneDrive services."
    }
  },
  {
    "instruction": "How can I detect: See what files are being deleted from flash file systems",
    "context": "",
    "output": "In order to see what files are being deleted from flash file systems, you should: Monitor Cisco devices that use AAA services for certain activities that indicate files being erased from the flash storage. Specifically, focus on logging activities that involve keywords such as 'erase', 'delete', and 'format'. These actions typically appear in the command set (CmdSet) field within your logs. It's important to note that while detecting these keywords can indicate malicious behavior, there are legitimate scenarios where administrators might use these commands to clean up local flash space. Therefore, these detections are considered to have a medium level of confidence, and further investigation is recommended to differentiate between benign and malicious intentions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "See what files are being deleted from flash file systems",
      "answer": "In order to see what files are being deleted from flash file systems, you should: Monitor Cisco devices that use AAA services for certain activities that indicate files being erased from the flash storage. Specifically, focus on logging activities that involve keywords such as 'erase', 'delete', and 'format'. These actions typically appear in the command set (CmdSet) field within your logs. It's important to note that while detecting these keywords can indicate malicious behavior, there are legitimate scenarios where administrators might use these commands to clean up local flash space. Therefore, these detections are considered to have a medium level of confidence, and further investigation is recommended to differentiate between benign and malicious intentions."
    }
  },
  {
    "instruction": "Can you explain how to detect: when an Network Zone is Deactivated or Deleted.",
    "context": "",
    "output": "Certainly!\n\nIn order to Detects when a Network Zone is Deactivated or Deleted, you should: Monitor Okta log data for events that indicate a network zone has been deactivated or deleted. Specifically, look for events with the type 'zone.deactivate' or 'zone.delete' within the Okta logging service. These actions could signify potentially malicious activity as deactivating or deleting network zones could impact the accessibility or security of network resources. It is categorized with a medium level of importance. Note that while monitoring for these events, there might be instances where actions are not malicious and are considered to be false positives, the nature of which may be unknown without further context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an Network Zone is Deactivated or Deleted.",
      "answer": "In order to Detects when a Network Zone is Deactivated or Deleted, you should: Monitor Okta log data for events that indicate a network zone has been deactivated or deleted. Specifically, look for events with the type 'zone.deactivate' or 'zone.delete' within the Okta logging service. These actions could signify potentially malicious activity as deactivating or deleting network zones could impact the accessibility or security of network resources. It is categorized with a medium level of importance. Note that while monitoring for these events, there might be instances where actions are not malicious and are considered to be false positives, the nature of which may be unknown without further context."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Detect file time attribute change to hide new or changes to existing files",
    "context": "",
    "output": "In order to detect file time attribute change to hide new or changes to existing files, you should: Monitor for the creation of processes on macOS systems where the command line ends with '/touch' and includes certain flags like '-t', '-acmr', '-d', or '-r'. These specific flags are used to modify file timestamps, which can be an attempt to obfuscate the modification or creation time of files, potentially as part of a malicious activity. This monitoring should focus on the process creation logs, and any detections should be treated with a medium level of concern due to the possibility of legitimate use cases or unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect file time attribute change to hide new or changes to existing files",
      "answer": "In order to detect file time attribute change to hide new or changes to existing files, you should: Monitor for the creation of processes on macOS systems where the command line ends with '/touch' and includes certain flags like '-t', '-acmr', '-d', or '-r'. These specific flags are used to modify file timestamps, which can be an attempt to obfuscate the modification or creation time of files, potentially as part of a malicious activity. This monitoring should focus on the process creation logs, and any detections should be treated with a medium level of concern due to the possibility of legitimate use cases or unknown false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: Number of VM creations or deployment activities occur in Azure via the azureactivity log.",
    "context": "",
    "output": "Sure!\nIn order to detect a number of VM creations or deployment activities occurring in Azure via the azureactivity log, you should monitor Azure Activity logs for specific activities that involve changes to virtual machines or deployments. This involves looking for any logs containing the keywords \"Microsoft.Compute/virtualMachines/write\" or \"Microsoft.Resources/deployments/write\", which signify that a virtual machine has been created or modified, or that a deployment has occurred. When such activities are identified from the logs, it can indicate potential unauthorized or malicious activities related to creating or deploying virtual machines within Azure. It is important to consider that there might be legitimate reasons for these activities (tagged as valid changes), so any detection should be followed by a review to ascertain the context and legitimacy of the activity. The severity level for these kinds of detections is considered medium, indicating that while they are of concern, they may not always represent critical security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Number of VM creations or deployment activities occur in Azure via the azureactivity log.",
      "answer": "In order to detect a number of VM creations or deployment activities occurring in Azure via the azureactivity log, you should monitor Azure Activity logs for specific activities that involve changes to virtual machines or deployments. This involves looking for any logs containing the keywords \"Microsoft.Compute/virtualMachines/write\" or \"Microsoft.Resources/deployments/write\", which signify that a virtual machine has been created or modified, or that a deployment has occurred. When such activities are identified from the logs, it can indicate potential unauthorized or malicious activities related to creating or deploying virtual machines within Azure. It is important to consider that there might be legitimate reasons for these activities (tagged as valid changes), so any detection should be followed by a review to ascertain the context and legitimacy of the activity. The severity level for these kinds of detections is considered medium, indicating that while they are of concern, they may not always represent critical security threats."
    }
  },
  {
    "instruction": "Can you explain how to detect: An adversary might use WMI to check if a certain remote service is running on a remote device.\nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when an adversary might use Windows Management Instrumentation (WMI) to check if a certain remote service is running on a remote device, you should: monitor for the creation of processes that end with '\\WMIC.exe' or have an original filename of 'wmic.exe'. Additionally, it's important to look for command lines that contain the word 'service'. These observations indicate that someone is likely using the WMIC tool to query remote services, which can be a sign of reconnaissance activity as part of a broader campaign to understand the network environment and potentially identify vulnerable services for exploitation. The feedback from such a query might indicate whether a service is running, not present, or if the remote host is unreachable, commonly noted by messages like \"No instance(s) Available\" or \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable.\" This monitoring should be applied to systems running Windows, given the use of WMIC. The level of concern for such activities is considered medium, and while there may be legitimate uses for querying service information remotely, it's essential to review these activities to rule out malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "An adversary might use WMI to check if a certain remote service is running on a remote device.\nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\n",
      "answer": "In order to detect when an adversary might use Windows Management Instrumentation (WMI) to check if a certain remote service is running on a remote device, you should: monitor for the creation of processes that end with '\\WMIC.exe' or have an original filename of 'wmic.exe'. Additionally, it's important to look for command lines that contain the word 'service'. These observations indicate that someone is likely using the WMIC tool to query remote services, which can be a sign of reconnaissance activity as part of a broader campaign to understand the network environment and potentially identify vulnerable services for exploitation. The feedback from such a query might indicate whether a service is running, not present, or if the remote host is unreachable, commonly noted by messages like \"No instance(s) Available\" or \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable.\" This monitoring should be applied to systems running Windows, given the use of WMIC. The level of concern for such activities is considered medium, and while there may be legitimate uses for querying service information remotely, it's essential to review these activities to rule out malicious intent."
    }
  },
  {
    "instruction": "How to detect: Administrative shares are hidden network shares created by Microsoft Windows NT operating systems that grant system administrators remote access to every disk volume on a network-connected system",
    "context": "",
    "output": "In order to detect and respond to potential manipulations of administrative shares, which are hidden network shares established by Microsoft Windows NT operating systems to enable system administrators remote access to every disk volume on a network-connected system, you should focus on monitoring registry settings changes within Windows environments. Specifically, keep an eye on events where the registry value is being set within the `HKLM\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\` path. The parameters of interest are `AutoShareWks` and `AutoShareServer`, corresponding to the creation of administrative shares for workstations and servers, respectively. An indication of a potentially malicious activity is when these parameters are set to a DWORD value of `0x00000000`, which could imply an attempt to disable these shares, possibly to hinder administrative access or evade detection. It is crucial to monitor for `SetValue` events against these registry paths as part of your detection strategy. Keep in mind that there may be instances where these modifications could trigger a false positive, meaning changes could be legitimate and not indicative of malicious activity. Therefore, the level of concern for such detections is rated as medium, indicating that while it is important to monitor for these changes, each detection should be investigated to confirm whether it is indeed malicious. The tactics associated with this activity include Persistence, Privilege Escalation, and Defense Evasion, as attackers might manipulate these settings to maintain access to a system, elevate their privileges, or evade detection and remediation efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Administrative shares are hidden network shares created by Microsoft Windows NT operating systems that grant system administrators remote access to every disk volume on a network-connected system",
      "answer": "In order to detect and respond to potential manipulations of administrative shares, which are hidden network shares established by Microsoft Windows NT operating systems to enable system administrators remote access to every disk volume on a network-connected system, you should focus on monitoring registry settings changes within Windows environments. Specifically, keep an eye on events where the registry value is being set within the `HKLM\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\` path. The parameters of interest are `AutoShareWks` and `AutoShareServer`, corresponding to the creation of administrative shares for workstations and servers, respectively. An indication of a potentially malicious activity is when these parameters are set to a DWORD value of `0x00000000`, which could imply an attempt to disable these shares, possibly to hinder administrative access or evade detection. It is crucial to monitor for `SetValue` events against these registry paths as part of your detection strategy. Keep in mind that there may be instances where these modifications could trigger a false positive, meaning changes could be legitimate and not indicative of malicious activity. Therefore, the level of concern for such detections is rated as medium, indicating that while it is important to monitor for these changes, each detection should be investigated to confirm whether it is indeed malicious. The tactics associated with this activity include Persistence, Privilege Escalation, and Defense Evasion, as attackers might manipulate these settings to maintain access to a system, elevate their privileges, or evade detection and remediation efforts."
    }
  },
  {
    "instruction": "How can I detect: user agent and URI paths used by empire agents",
    "context": "",
    "output": "In order to detect user agent and URI paths used by empire agents, you should monitor your network's proxy logs for HTTP POST requests that originate from clients using a specific user agent string, typically associated with Internet Explorer 11 on Windows 7. Look for requests made to the following server scripts: '/admin/get.php', '/news.php', or '/login/process.php'. These indicators of compromise are notable as they may suggest an adversary is attempting to control compromised systems or exfiltrate data using well-known paths associated with malicious activity. When analyzing the logs, pay attention to the requested URI and the client's IP address, as these fields can provide further context around potentially suspicious activity. However, be aware that there might be legitimate traffic that coincides with these indicators, such as valid requests matching this exact user agent and requesting these specific server scripts, which could result in false positives. The gravity ascribed to such findings is high, indicating that detections should be treated with a significant level of concern and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user agent and URI paths used by empire agents",
      "answer": "In order to detect user agent and URI paths used by empire agents, you should monitor your network's proxy logs for HTTP POST requests that originate from clients using a specific user agent string, typically associated with Internet Explorer 11 on Windows 7. Look for requests made to the following server scripts: '/admin/get.php', '/news.php', or '/login/process.php'. These indicators of compromise are notable as they may suggest an adversary is attempting to control compromised systems or exfiltrate data using well-known paths associated with malicious activity. When analyzing the logs, pay attention to the requested URI and the client's IP address, as these fields can provide further context around potentially suspicious activity. However, be aware that there might be legitimate traffic that coincides with these indicators, such as valid requests matching this exact user agent and requesting these specific server scripts, which could result in false positives. The gravity ascribed to such findings is high, indicating that detections should be treated with a significant level of concern and investigated promptly."
    }
  },
  {
    "instruction": "How can I detect: deletion of files with extensions often used for backup files. Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.",
    "context": "",
    "output": "In order to detect deletion of files with extensions often used for backup files, as adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery, you should: Monitor Windows file deletion events for actions initiated by command line interfaces such as cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Terminal (wt.exe), and DLL or application loading programs like rundll32.exe and regsvr32.exe. Specifically, pay attention to the deletion of files with extensions that are commonly associated with backups and system recovery, including .VHD, .bac, .bak, .wbcat, .bkf, .set, .win, and .dsk. Any occurrence of these file deletion activities should be investigated to ensure they are not part of a malicious attempt to hinder system recovery efforts. Be aware that there can be legitimate reasons for these actions, thus it\u2019s crucial to differentiate between genuine system or user-initiated processes and potentially harmful activities. This monitoring approach is of medium importance level and aligns with tactics to disrupt system recovery processes by eliminating backup or system recovery files.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deletion of files with extensions often used for backup files. Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.",
      "answer": "In order to detect deletion of files with extensions often used for backup files, as adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery, you should: Monitor Windows file deletion events for actions initiated by command line interfaces such as cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Terminal (wt.exe), and DLL or application loading programs like rundll32.exe and regsvr32.exe. Specifically, pay attention to the deletion of files with extensions that are commonly associated with backups and system recovery, including .VHD, .bac, .bak, .wbcat, .bkf, .set, .win, and .dsk. Any occurrence of these file deletion activities should be investigated to ensure they are not part of a malicious attempt to hinder system recovery efforts. Be aware that there can be legitimate reasons for these actions, thus it\u2019s crucial to differentiate between genuine system or user-initiated processes and potentially harmful activities. This monitoring approach is of medium importance level and aligns with tactics to disrupt system recovery processes by eliminating backup or system recovery files."
    }
  },
  {
    "instruction": "How to detect: failed installation of a Exchange Transport Agent",
    "context": "",
    "output": "In order to detect a failed installation of an Exchange Transport Agent, you should monitor the Microsoft Exchange Management service on Windows systems. Focus on identifying specific event logs that record EventID 6 in conjunction with data containing the term 'Install-TransportAgent'. This combination of factors points to an attempt to install a Transport Agent, which is a component used to extend the capabilities of the Exchange server's transport rules. \n\nIt's essential to review the 'AssemblyPath' field within these event logs, as it provides crucial details regarding the installation's context. This information can help differentiate between legitimate attempts to install TransportAgents and potentially malicious activities. However, be aware that legitimate installations of exchange TransportAgents also trigger these logs, and the 'AssemblyPath' can serve as a good indicator to distinguish such benign activities from suspicious ones. \n\nGiven the nature of this detection, it falls under a high severity level due to the potential implications of unauthorized or failed Transport Agent installations, which could impact mail flow or introduce vulnerabilities within the Exchange environment. \n\nTherefore, keeping a vigilant eye on logs tagged with these specific criteria can aid in identifying potentially compromised or misconfigured installations, aligning with the overall cybersecurity strategy to protect exchange servers from misuse or attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "failed installation of a Exchange Transport Agent",
      "answer": "In order to detect a failed installation of an Exchange Transport Agent, you should monitor the Microsoft Exchange Management service on Windows systems. Focus on identifying specific event logs that record EventID 6 in conjunction with data containing the term 'Install-TransportAgent'. This combination of factors points to an attempt to install a Transport Agent, which is a component used to extend the capabilities of the Exchange server's transport rules. \n\nIt's essential to review the 'AssemblyPath' field within these event logs, as it provides crucial details regarding the installation's context. This information can help differentiate between legitimate attempts to install TransportAgents and potentially malicious activities. However, be aware that legitimate installations of exchange TransportAgents also trigger these logs, and the 'AssemblyPath' can serve as a good indicator to distinguish such benign activities from suspicious ones. \n\nGiven the nature of this detection, it falls under a high severity level due to the potential implications of unauthorized or failed Transport Agent installations, which could impact mail flow or introduce vulnerabilities within the Exchange environment. \n\nTherefore, keeping a vigilant eye on logs tagged with these specific criteria can aid in identifying potentially compromised or misconfigured installations, aligning with the overall cybersecurity strategy to protect exchange servers from misuse or attack."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription.",
    "context": "",
    "output": "In order to detect adversaries attempting to establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription, you should monitor for PowerShell scripts that contain specific patterns indicating the creation of WMI event subscriptions. These scripts typically utilize the `New-CimInstance` cmdlet with certain parameters to create WMI event subscriptions, which can be indicative of malicious activity. Specifically, you should look for PowerShell scripts that contain both the `New-CimInstance` cmdlet and the parameters `-Namespace root/subscription` and `-ClassName __EventFilter` or `-ClassName CommandLineEventConsumer`, alongside a `-Property` parameter, which suggests the potential establishment of persistence mechanisms through WMI. It is important for systems, particularly those running Windows, to have Script Block Logging enabled to capture these PowerShell script execution details for analysis. Although some detections might turn out to be legitimate uses of these commands, it's vital to investigate these occurrences to rule out malicious intentions. This monitoring is categorized under the medium severity level due to the potential for these activities to be used by adversaries in establishing footholds within networks and executing privilege escalation tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription.",
      "answer": "In order to detect adversaries attempting to establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription, you should monitor for PowerShell scripts that contain specific patterns indicating the creation of WMI event subscriptions. These scripts typically utilize the `New-CimInstance` cmdlet with certain parameters to create WMI event subscriptions, which can be indicative of malicious activity. Specifically, you should look for PowerShell scripts that contain both the `New-CimInstance` cmdlet and the parameters `-Namespace root/subscription` and `-ClassName __EventFilter` or `-ClassName CommandLineEventConsumer`, alongside a `-Property` parameter, which suggests the potential establishment of persistence mechanisms through WMI. It is important for systems, particularly those running Windows, to have Script Block Logging enabled to capture these PowerShell script execution details for analysis. Although some detections might turn out to be legitimate uses of these commands, it's vital to investigate these occurrences to rule out malicious intentions. This monitoring is categorized under the medium severity level due to the potential for these activities to be used by adversaries in establishing footholds within networks and executing privilege escalation tactics."
    }
  },
  {
    "instruction": "How to detect: Container Registry is created or deleted.",
    "context": "",
    "output": "In order to detect when a Container Registry is created or deleted, you should monitor Azure Activity Logs specifically for operations related to the creation or deletion of container registries. Focus on identifying any event where the operation names include \"MICROSOFT.CONTAINERREGISTRY/REGISTRIES/WRITE\" or \"MICROSOFT.CONTAINERREGISTRY/REGISTRIES/DELETE\". These operation names are indicative of key activities that could potentially impact the security or configuration of your container registries within the Azure environment.\n\nIt is important to consider that not all events flagged under these criteria will be malicious or unauthorized. Common false positives may arise from legitimate administrative actions such as a system administrator performing routine tasks including creating or deleting container registries as required. In such cases, it is crucial to corroborate the detected activities by verifying the user identity, user agent, and/or hostname involved in the operations to ensure they are expected and authorized actions within your environment.\n\nFurthermore, when container registries are created or deleted by unfamiliar users or in an unexpected manner, such activities should be scrutinized and investigated thoroughly. Understanding the context in which these operations occur will help in distinguishing between legitimate configuration changes and potentially malicious activities.\n\nIncorporating a level of scrutiny towards these events, while acknowledging potential false positives and establishing mechanisms to exempt known benign behaviors from alerts, forms the core strategy in effectively detecting unauthorized or suspicious changes to container registries. This approach aligns with best practices in safeguarding container environment configurations and promotes a proactive stance in cyber-security within Azure ecosystems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Container Registry is created or deleted.",
      "answer": "In order to detect when a Container Registry is created or deleted, you should monitor Azure Activity Logs specifically for operations related to the creation or deletion of container registries. Focus on identifying any event where the operation names include \"MICROSOFT.CONTAINERREGISTRY/REGISTRIES/WRITE\" or \"MICROSOFT.CONTAINERREGISTRY/REGISTRIES/DELETE\". These operation names are indicative of key activities that could potentially impact the security or configuration of your container registries within the Azure environment.\n\nIt is important to consider that not all events flagged under these criteria will be malicious or unauthorized. Common false positives may arise from legitimate administrative actions such as a system administrator performing routine tasks including creating or deleting container registries as required. In such cases, it is crucial to corroborate the detected activities by verifying the user identity, user agent, and/or hostname involved in the operations to ensure they are expected and authorized actions within your environment.\n\nFurthermore, when container registries are created or deleted by unfamiliar users or in an unexpected manner, such activities should be scrutinized and investigated thoroughly. Understanding the context in which these operations occur will help in distinguishing between legitimate configuration changes and potentially malicious activities.\n\nIncorporating a level of scrutiny towards these events, while acknowledging potential false positives and establishing mechanisms to exempt known benign behaviors from alerts, forms the core strategy in effectively detecting unauthorized or suspicious changes to container registries. This approach aligns with best practices in safeguarding container environment configurations and promotes a proactive stance in cyber-security within Azure ecosystems."
    }
  },
  {
    "instruction": "How can I detect: potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB",
    "context": "",
    "output": "In order to detect potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB, you should: Monitor proxy logs for traffic to a specific set of domains known to be associated with these malicious activities. The domains to watch include 'addatamarket.net', 'ans7tv.net', 'anstv.net', 'backuprabbit.com', 'businessvideonews.com', 'cloudsponcer.com', 'datamarketplace.net', 'growthtransport.com', 'mobilegamerstats.com', 'snoweeanalytics.com', 'tagclick-cdn.com', 'topographyupdates.com', 'unlimitedteacup.com', 'virtuallaughing.com', and 'web-trackers.com'. It's critical to investigate any hits on these domains as they may indicate a high probability of a compromised iOS device communicating with attacker-controlled servers, potentially for command and control or data exfiltration purposes. Be aware, the known false positives for this detection method are currently unknown, indicating any match should be taken with significant concern and promptly investigated to ensure the security of the impacted device and wider network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB",
      "answer": "In order to detect potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB, you should: Monitor proxy logs for traffic to a specific set of domains known to be associated with these malicious activities. The domains to watch include 'addatamarket.net', 'ans7tv.net', 'anstv.net', 'backuprabbit.com', 'businessvideonews.com', 'cloudsponcer.com', 'datamarketplace.net', 'growthtransport.com', 'mobilegamerstats.com', 'snoweeanalytics.com', 'tagclick-cdn.com', 'topographyupdates.com', 'unlimitedteacup.com', 'virtuallaughing.com', and 'web-trackers.com'. It's critical to investigate any hits on these domains as they may indicate a high probability of a compromised iOS device communicating with attacker-controlled servers, potentially for command and control or data exfiltration purposes. Be aware, the known false positives for this detection method are currently unknown, indicating any match should be taken with significant concern and promptly investigated to ensure the security of the impacted device and wider network."
    }
  },
  {
    "instruction": "Can you explain how to detect: when when a mounted share is removed. Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when a mounted share is removed, as adversaries may remove share connections that are no longer useful in order to clean up traces of their operation, you should look into script block logging from Windows environments. This requires that Script Block Logging is enabled to catch the execution of scripts that might be trying to delete mounted shares. Specifically, focus on detecting scripts that contain the commands 'Remove-SmbShare' or 'Remove-FileShare', as these indicate an attempt to remove a share. Be aware that there could be legitimate reasons for these commands being run, such as by administrators or power users managing their shares through the command line, so consider this potential for false positives. The detection of these commands represents a medium-level threat, linking back to tactics and techniques that involve maintaining stealth and operational cleanup by adversaries.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when when a mounted share is removed. Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation",
      "answer": "In order to detect when a mounted share is removed, as adversaries may remove share connections that are no longer useful in order to clean up traces of their operation, you should look into script block logging from Windows environments. This requires that Script Block Logging is enabled to catch the execution of scripts that might be trying to delete mounted shares. Specifically, focus on detecting scripts that contain the commands 'Remove-SmbShare' or 'Remove-FileShare', as these indicate an attempt to remove a share. Be aware that there could be legitimate reasons for these commands being run, such as by administrators or power users managing their shares through the command line, so consider this potential for false positives. The detection of these commands represents a medium-level threat, linking back to tactics and techniques that involve maintaining stealth and operational cleanup by adversaries."
    }
  },
  {
    "instruction": "Explain how should I detect the following: specific command line execution used by Mustang Panda in a targeted attack against the Australian government as reported by Lab52",
    "context": "",
    "output": "In order to Detects specific command line execution used by Mustang Panda in a targeted attack against the Australian government as reported by Lab52, you should: Monitor Windows process creation logs for the execution of commands that might indicate an attack. Specifically, look for two sets of command line activities. The first set should involve the use of the 'copy' command to duplicate the file 'SolidPDFCreator.dll' into the directory 'C:\\Users\\Public\\Libraries\\PhotoTvRHD\\'. The second set of activities to watch for includes the usage of 'reg' command to make registry modifications, specifically adding entries under '\\Windows\\CurrentVersion\\Run' that reference 'SolidPDF' and are located in the directory 'C:\\Users\\Public\\Libraries\\PhotoTvRHD\\'. This behavior is indicative of an attempt to maintain persistence on the compromised system by ensuring the malicious DLL is loaded at system startup. The detection of either of these activities is considered highly suspicious and unlikely to be a false positive, signifying a potential compromise by the Mustang Panda group.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific command line execution used by Mustang Panda in a targeted attack against the Australian government as reported by Lab52",
      "answer": "In order to Detects specific command line execution used by Mustang Panda in a targeted attack against the Australian government as reported by Lab52, you should: Monitor Windows process creation logs for the execution of commands that might indicate an attack. Specifically, look for two sets of command line activities. The first set should involve the use of the 'copy' command to duplicate the file 'SolidPDFCreator.dll' into the directory 'C:\\Users\\Public\\Libraries\\PhotoTvRHD\\'. The second set of activities to watch for includes the usage of 'reg' command to make registry modifications, specifically adding entries under '\\Windows\\CurrentVersion\\Run' that reference 'SolidPDF' and are located in the directory 'C:\\Users\\Public\\Libraries\\PhotoTvRHD\\'. This behavior is indicative of an attempt to maintain persistence on the compromised system by ensuring the malicious DLL is loaded at system startup. The detection of either of these activities is considered highly suspicious and unlikely to be a false positive, signifying a potential compromise by the Mustang Panda group."
    }
  },
  {
    "instruction": "Can you explain how to detect: WerFault copoed to a suspicious folder, which could be a sign of WerFault DLL hijacking",
    "context": "",
    "output": "Certainly!\n\nIn order to detect WerFault copied to a suspicious folder, which could be a sign of WerFault DLL hijacking, you should: Monitor Windows file events for the creation or modification of files named 'WerFault.exe' or any files with the '.dll' extension that ends with 'wer.dll'. These specific files are critical as they could be indicative of malicious activity where attackers try to exploit the Windows Error Reporting feature by placing these files in non-standard directories to achieve persistence, privilege escalation, or other unauthorized actions on the system. It is important, however, to exclude any events where these files are placed in legitimate directories such as '\\System32\\', '\\SysWOW64\\', or '\\WinSxS\\' to minimize false positives. This refined detection approach ensures you focus on monitoring file events that truly indicate suspicious behavior possibly related to DLL hijacking attempts involving the WerFault process. The attention to such specifics can significantly enhance the security measures against potential threats exploiting Windows error reporting mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "WerFault copoed to a suspicious folder, which could be a sign of WerFault DLL hijacking",
      "answer": "In order to detect WerFault copied to a suspicious folder, which could be a sign of WerFault DLL hijacking, you should: Monitor Windows file events for the creation or modification of files named 'WerFault.exe' or any files with the '.dll' extension that ends with 'wer.dll'. These specific files are critical as they could be indicative of malicious activity where attackers try to exploit the Windows Error Reporting feature by placing these files in non-standard directories to achieve persistence, privilege escalation, or other unauthorized actions on the system. It is important, however, to exclude any events where these files are placed in legitimate directories such as '\\System32\\', '\\SysWOW64\\', or '\\WinSxS\\' to minimize false positives. This refined detection approach ensures you focus on monitoring file events that truly indicate suspicious behavior possibly related to DLL hijacking attempts involving the WerFault process. The attention to such specifics can significantly enhance the security measures against potential threats exploiting Windows error reporting mechanisms."
    }
  },
  {
    "instruction": "Explain how should I detect the following: failed sign-in due to user not meeting expected controls for adminitrators",
    "context": "",
    "output": "In order to detect failed sign-in due to user not meeting expected controls for administrators, you should: Implement a monitoring strategy using Azure's signinlogs service that focuses on identifying failed login attempts. This approach should screen for sign-in attempts that have a failure status and originate from locations or countries where your organization does not operate. Additionally, pay attention to sign-ins from IP addresses which are not recognized or approved by your organization, and those that involve devices (based on browser or operating system information) not sanctioned for use. It's crucial to adjust the criteria based on your specific environment, especially the definitions of unauthorized countries, IP addresses, and devices to minimize the chances of overlooking legitimate activities by administrators who may not adhere strictly to prescribed protocols. Be aware that there could be false positives, such as legitimate administrators using unapproved methods or devices; thus, a high level of scrutiny and customization for your environment before application is essential. Through implementing this monitoring, you're aligning with cybersecurity best practices to safeguard against unauthorized or suspicious attempts to access admin-level features or information, representing tactics typically associated with Initial Access and Persistence, including techniques like Valid Accounts and External Remote Services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "failed sign-in due to user not meeting expected controls for adminitrators",
      "answer": "In order to detect failed sign-in due to user not meeting expected controls for administrators, you should: Implement a monitoring strategy using Azure's signinlogs service that focuses on identifying failed login attempts. This approach should screen for sign-in attempts that have a failure status and originate from locations or countries where your organization does not operate. Additionally, pay attention to sign-ins from IP addresses which are not recognized or approved by your organization, and those that involve devices (based on browser or operating system information) not sanctioned for use. It's crucial to adjust the criteria based on your specific environment, especially the definitions of unauthorized countries, IP addresses, and devices to minimize the chances of overlooking legitimate activities by administrators who may not adhere strictly to prescribed protocols. Be aware that there could be false positives, such as legitimate administrators using unapproved methods or devices; thus, a high level of scrutiny and customization for your environment before application is essential. Through implementing this monitoring, you're aligning with cybersecurity best practices to safeguard against unauthorized or suspicious attempts to access admin-level features or information, representing tactics typically associated with Initial Access and Persistence, including techniques like Valid Accounts and External Remote Services."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)",
    "context": "",
    "output": "Sure!\nIn order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should:\n\nMonitor Windows PowerShell script execution logs, specifically looking for script execution that involves the \"Set-Service\" command. This command might be used maliciously to manipulate Windows services in a way that hides them from typical management tools like \"sc.exe\" and \"Get-Service\". The detection focus is on scripts that contain both the string 'Set-Service ' and the unique identifier 'DCLCWPDTSD', along with either the '-SecurityDescriptorSddl ' or '-sd ' strings. These elements indicate an attempt to alter the security descriptors of services, potentially to conceal malicious services. It's important to have Script Block Logging enabled to capture the necessary data for this analysis. However, be aware that there might be rare legitimate uses of such scripts or potential false positives due to the complexity of PowerShell script text analysis. The severity of this detection is classified as high due to the potential impact of hiding malicious services on a Windows system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)",
      "answer": "In order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should:\n\nMonitor Windows PowerShell script execution logs, specifically looking for script execution that involves the \"Set-Service\" command. This command might be used maliciously to manipulate Windows services in a way that hides them from typical management tools like \"sc.exe\" and \"Get-Service\". The detection focus is on scripts that contain both the string 'Set-Service ' and the unique identifier 'DCLCWPDTSD', along with either the '-SecurityDescriptorSddl ' or '-sd ' strings. These elements indicate an attempt to alter the security descriptors of services, potentially to conceal malicious services. It's important to have Script Block Logging enabled to capture the necessary data for this analysis. However, be aware that there might be rare legitimate uses of such scripts or potential false positives due to the complexity of PowerShell script text analysis. The severity of this detection is classified as high due to the potential impact of hiding malicious services on a Windows system."
    }
  },
  {
    "instruction": "How to detect: Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "context": "",
    "output": "In order to detect adversaries leveraging the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions, you should: Monitor Linux systems for specific execution events (EXECVE) triggered by auditd, focusing on commands such as 'users', 'w', and 'who'. These commands are commonly used for discovering information about users on the system. It would be prudent to consider activities involving these commands as needing scrutiny, though some might be legitimate administrative tasks. This monitoring can help in identifying initial reconnaissance efforts by adversaries trying to understand system ownership and user activities, which is crucial for their next steps in compromising the system or network. Notably, activities flagged by this approach carry a low risk level, indicating a likelihood of false positives, primarily due to legitimate administration work.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "In order to detect adversaries leveraging the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions, you should: Monitor Linux systems for specific execution events (EXECVE) triggered by auditd, focusing on commands such as 'users', 'w', and 'who'. These commands are commonly used for discovering information about users on the system. It would be prudent to consider activities involving these commands as needing scrutiny, though some might be legitimate administrative tasks. This monitoring can help in identifying initial reconnaissance efforts by adversaries trying to understand system ownership and user activities, which is crucial for their next steps in compromising the system or network. Notably, activities flagged by this approach carry a low risk level, indicating a likelihood of false positives, primarily due to legitimate administration work."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential RDP Session Hijacking activity on Windows systems",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential RDP Session Hijacking activity on Windows systems, you should: Monitor Windows process creation logs for the execution of the 'tscon.exe' utility, which is specifically associated with Terminal Services connections. Look for instances where this executable is launched, paying special attention to processes running with SYSTEM integrity level, as this could indicate an attempt to hijack an RDP session. Be mindful, however, that legitimate administrative activities might also trigger this detection, so it's important to distinguish between normal and suspicious behavior. This detection strategy is linked to the broader technique of session hijacking, a critical aspect of maintaining system security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential RDP Session Hijacking activity on Windows systems",
      "answer": "In order to detect potential RDP Session Hijacking activity on Windows systems, you should: Monitor Windows process creation logs for the execution of the 'tscon.exe' utility, which is specifically associated with Terminal Services connections. Look for instances where this executable is launched, paying special attention to processes running with SYSTEM integrity level, as this could indicate an attempt to hijack an RDP session. Be mindful, however, that legitimate administrative activities might also trigger this detection, so it's important to distinguish between normal and suspicious behavior. This detection strategy is linked to the broader technique of session hijacking, a critical aspect of maintaining system security."
    }
  },
  {
    "instruction": "Explain how should I detect the following: python spawning a pretty tty",
    "context": "",
    "output": "In order to detect Python spawning a pretty tty, you should monitor process creation logs on Windows systems for the execution of Python. Specifically, look for processes ending with 'python.exe', 'python3.exe', or 'python2.exe'. Additionally, check the command line used to execute these processes for specific patterns. One pattern to watch for includes both 'import pty' and '.spawn(' appearing together in the command line. Another pattern to be alert for is the presence of 'from pty import spawn' within the command line. When either of these command line patterns is detected in conjunction with the execution of Python, it may indicate an attempt at spawning a pretty tty, which could be considered suspicious. The importance of paying attention to these patterns is high due to the potential malicious implications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "python spawning a pretty tty",
      "answer": "In order to detect Python spawning a pretty tty, you should monitor process creation logs on Windows systems for the execution of Python. Specifically, look for processes ending with 'python.exe', 'python3.exe', or 'python2.exe'. Additionally, check the command line used to execute these processes for specific patterns. One pattern to watch for includes both 'import pty' and '.spawn(' appearing together in the command line. Another pattern to be alert for is the presence of 'from pty import spawn' within the command line. When either of these command line patterns is detected in conjunction with the execution of Python, it may indicate an attempt at spawning a pretty tty, which could be considered suspicious. The importance of paying attention to these patterns is high due to the potential malicious implications."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential Dtrack RAT activity via specific process patterns",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential Dtrack RAT activity via specific process patterns, you should: monitor Windows process creation logs for the execution of certain commands that suggest the presence of Dtrack RAT or similar threats. Specifically, look out for processes that use the ping command in a peculiar way, specifically with the '-n' option followed by redirecting output to a file, indicated by 'echo EEEE >'. This could be an attempt to test network connectivity or latency in a stealthy manner while logging the results. Additionally, be vigilant for processes that run 'ipconfig /all' and redirect its output to a temporary file, as this could indicate an attempt to gather comprehensive network configuration details illicitly. Similarly, the use of 'interface ip show config' command followed by output redirection to a temp file could suggest an attempt to collect network interface configuration, possibly for mapping the network or for further exploitation. Such commands, particularly when observed together or in quick succession, should raise alerts due to their unusual nature in everyday use, suggesting critical level threat activity possibly associated with the Dtrack RAT. ",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential Dtrack RAT activity via specific process patterns",
      "answer": "In order to detect potential Dtrack RAT activity via specific process patterns, you should: monitor Windows process creation logs for the execution of certain commands that suggest the presence of Dtrack RAT or similar threats. Specifically, look out for processes that use the ping command in a peculiar way, specifically with the '-n' option followed by redirecting output to a file, indicated by 'echo EEEE >'. This could be an attempt to test network connectivity or latency in a stealthy manner while logging the results. Additionally, be vigilant for processes that run 'ipconfig /all' and redirect its output to a temporary file, as this could indicate an attempt to gather comprehensive network configuration details illicitly. Similarly, the use of 'interface ip show config' command followed by output redirection to a temp file could suggest an attempt to collect network interface configuration, possibly for mapping the network or for further exploitation. Such commands, particularly when observed together or in quick succession, should raise alerts due to their unusual nature in everyday use, suggesting critical level threat activity possibly associated with the Dtrack RAT. "
    }
  },
  {
    "instruction": "Please help me detect the following: javaw.exe in AppData folder as used by Adwind / JRAT",
    "context": "",
    "output": "Sure!\nIn order to detect javaw.exe in the AppData folder as used by Adwind / JRAT, you should: Monitor Windows file events for activities involving filenames that match specific patterns indicating potential malicious behavior. Specifically, look for files within the AppData\\Roaming\\Oracle\\bin\\java directory that have an '.exe' extension, as well as files that contain '\\Retrive' and '.vbs' in their names. These patterns are indicative of the presence of the Adwind or JRAT malware on the system, which leverage these paths and file types as part of their operation. This detection focuses on identifying suspicious file activities that align with tactics and techniques common to these types of malware, thus providing an alert to potentially compromised systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "javaw.exe in AppData folder as used by Adwind / JRAT",
      "answer": "In order to detect javaw.exe in the AppData folder as used by Adwind / JRAT, you should: Monitor Windows file events for activities involving filenames that match specific patterns indicating potential malicious behavior. Specifically, look for files within the AppData\\Roaming\\Oracle\\bin\\java directory that have an '.exe' extension, as well as files that contain '\\Retrive' and '.vbs' in their names. These patterns are indicative of the presence of the Adwind or JRAT malware on the system, which leverage these paths and file types as part of their operation. This detection focuses on identifying suspicious file activities that align with tactics and techniques common to these types of malware, thus providing an alert to potentially compromised systems."
    }
  },
  {
    "instruction": "How can I detect: loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL",
    "context": "",
    "output": "In order to detect loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor Windows image load events for instances where the Microsoft Defender processes, specifically 'MpCmdRun.exe' or 'NisSrv.exe', attempt to load the 'mpclient.dll' dynamic link library. The focus should be on identifying when these DLLs are loaded from locations outside the standard directories typically used by Windows Defender, such as 'C:\\Program Files\\Windows Defender\\', 'C:\\Program Files (x86)\\Windows Defender\\', or 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'. The appearance of such activity indicates a high probability of an attempt at DLL sideloading - a technique often used by adversaries to execute malicious code by exploiting the legitimate processes of trusted applications. It's crucial to note that false positives for this detection method are very unlikely, underscoring the importance of this monitoring in identifying potential security breaches.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL",
      "answer": "In order to detect loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor Windows image load events for instances where the Microsoft Defender processes, specifically 'MpCmdRun.exe' or 'NisSrv.exe', attempt to load the 'mpclient.dll' dynamic link library. The focus should be on identifying when these DLLs are loaded from locations outside the standard directories typically used by Windows Defender, such as 'C:\\Program Files\\Windows Defender\\', 'C:\\Program Files (x86)\\Windows Defender\\', or 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'. The appearance of such activity indicates a high probability of an attempt at DLL sideloading - a technique often used by adversaries to execute malicious code by exploiting the legitimate processes of trusted applications. It's crucial to note that false positives for this detection method are very unlikely, underscoring the importance of this monitoring in identifying potential security breaches."
    }
  },
  {
    "instruction": "Please help me detect the following: (failed) outbound connection attempts to internet facing SMB servers. This could be a sign of potential exploitation attempts of CVE-2023-23397.",
    "context": "",
    "output": "Sure!\nIn order to detect (failed) outbound connection attempts to internet facing SMB servers, which could be a sign of potential exploitation attempts of CVE-2023-23397, you should: Monitor Windows SMB client connectivity logs for specific events that indicate a network connection failure, disconnection, or re-establishment with a server. Pay attention to events with IDs 30803 (indicating a failed network connection), 30804 (indicating a network disconnection), and 30806 (indicating re-establishment of a session to the server). It is crucial to filter out connections to main local IP addresses to reduce noise and increase the focus on outbound connections to internet-facing servers. This involves excluding IP addresses that start with '10.', indicating they are part of a private network within the 10.0.0.0/8 range, '192.168.', for the 192.168.0.0/16 private network range, and '172.16.' through '172.31.', covering the private network ranges from 172.16.0.0/12 to 172.31.0.0/12. Connections to loopback addresses ('127.') and link-local addresses ('169.254.') should also be ignored. Be aware that there may be false positives, especially from trusted external servers, and consider applying additional filters to refine detections. This detection process focuses on network connection issues to SMB servers which could be indicative of an attempted exploitation, specifically addressing concerns related to CVE-2023-23397.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "(failed) outbound connection attempts to internet facing SMB servers. This could be a sign of potential exploitation attempts of CVE-2023-23397.",
      "answer": "In order to detect (failed) outbound connection attempts to internet facing SMB servers, which could be a sign of potential exploitation attempts of CVE-2023-23397, you should: Monitor Windows SMB client connectivity logs for specific events that indicate a network connection failure, disconnection, or re-establishment with a server. Pay attention to events with IDs 30803 (indicating a failed network connection), 30804 (indicating a network disconnection), and 30806 (indicating re-establishment of a session to the server). It is crucial to filter out connections to main local IP addresses to reduce noise and increase the focus on outbound connections to internet-facing servers. This involves excluding IP addresses that start with '10.', indicating they are part of a private network within the 10.0.0.0/8 range, '192.168.', for the 192.168.0.0/16 private network range, and '172.16.' through '172.31.', covering the private network ranges from 172.16.0.0/12 to 172.31.0.0/12. Connections to loopback addresses ('127.') and link-local addresses ('169.254.') should also be ignored. Be aware that there may be false positives, especially from trusted external servers, and consider applying additional filters to refine detections. This detection process focuses on network connection issues to SMB servers which could be indicative of an attempted exploitation, specifically addressing concerns related to CVE-2023-23397."
    }
  },
  {
    "instruction": "How can I detect: password change for the logged-on user's via \"ksetup.exe\"",
    "context": "",
    "output": "In order to detect password change for the logged-on user's via \"ksetup.exe\", you should: Monitor for the creation of processes on Windows systems, specifically focusing on instances where the process being created ends with '\\ksetup.exe' or has 'ksetup.exe' as its original filename. Additionally, keep an eye out for command-line parameters containing ' /ChangePassword ', as this indicates an attempt to change a password using \"ksetup.exe\". This observation is crucial as it directly relates to detecting unauthorized or malicious password changes. Take note that any matches to these criteria warrant a medium level of concern, though be aware that not all detections might represent malicious activity and there could be unknown benign cases.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "password change for the logged-on user's via \"ksetup.exe\"",
      "answer": "In order to detect password change for the logged-on user's via \"ksetup.exe\", you should: Monitor for the creation of processes on Windows systems, specifically focusing on instances where the process being created ends with '\\ksetup.exe' or has 'ksetup.exe' as its original filename. Additionally, keep an eye out for command-line parameters containing ' /ChangePassword ', as this indicates an attempt to change a password using \"ksetup.exe\". This observation is crucial as it directly relates to detecting unauthorized or malicious password changes. Take note that any matches to these criteria warrant a medium level of concern, though be aware that not all detections might represent malicious activity and there could be unknown benign cases."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious PowerShell invocation command parameters",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious PowerShell invocation command parameters, you should: Monitor Windows PowerShell logs, particularly focusing on key parameters and coded scripts that are commonly used by attackers to evade detection and execute malicious actions. The monitoring should include:\n\n- Checking for the usage of `-nop`, `-w`, `hidden`, `-c`, and the pattern `[Convert]::FromBase64String`, which are indicative of attempts to execute commands or scripts in a way that avoids logging and makes the content difficult to interpret by converting it from base64 encoded strings.\n\n- Observing the combined presence of `-w`, `hidden`, `-noni`, `-nop`, `-c`, `iex`, and `New-Object`, as this pattern suggests an attempt to execute in-memory scripts. This method allows attackers to run malicious content directly in memory without writing to the disk.\n\n- Identifying the usage of `-w`, `hidden`, `-ep`, `bypass`, and `-Enc` together, pointing towards an attempt to bypass execution policies and execute encoded commands, making the detection of the malicious intent harder.\n\n- Monitoring for PowerShell commands interacting with the Windows Registry, specifically commands that add entries to `HKCU\\software\\microsoft\\windows\\currentversion\\run`. This is a common technique for achieving persistence by having malware start automatically at system boot.\n\n- Spotting invocations that involve the bypass of execution policies and the use of `new-object` combined with `system.net.webclient` and a `.download` method, aiming to download potentially malicious content from the internet while staying under the radar.\n\n- Watching for instances where `iex`, `New-Object`, `Net.WebClient`, and `.Download` are used together, as this is another method that might be utilized to fetch and execute malicious scripts from remote servers through PowerShell.\n\n- Filtering out false positives by excluding legitimate uses of PowerShell for downloading and installing software via Chocolatey, which is a package manager for Windows. This involves ignoring command lines that download and execute Chocolatey installation scripts.\n\nLogs should be examined for any of these patterns, taking into consideration that any single occurrence could be indicative of suspicious activity. It's essential to treat detections with high priority due to the potential severity of PowerShell being used as an attack vector. Tags associated with these activities include Tactics and Techniques like Execution, Persistence, Defense Evasion, and Command and Control, which are part of the broader categories of malicious behavior as classified by MITRE ATT&CK.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious PowerShell invocation command parameters",
      "answer": "In order to detect suspicious PowerShell invocation command parameters, you should: Monitor Windows PowerShell logs, particularly focusing on key parameters and coded scripts that are commonly used by attackers to evade detection and execute malicious actions. The monitoring should include:\n\n- Checking for the usage of `-nop`, `-w`, `hidden`, `-c`, and the pattern `[Convert]::FromBase64String`, which are indicative of attempts to execute commands or scripts in a way that avoids logging and makes the content difficult to interpret by converting it from base64 encoded strings.\n\n- Observing the combined presence of `-w`, `hidden`, `-noni`, `-nop`, `-c`, `iex`, and `New-Object`, as this pattern suggests an attempt to execute in-memory scripts. This method allows attackers to run malicious content directly in memory without writing to the disk.\n\n- Identifying the usage of `-w`, `hidden`, `-ep`, `bypass`, and `-Enc` together, pointing towards an attempt to bypass execution policies and execute encoded commands, making the detection of the malicious intent harder.\n\n- Monitoring for PowerShell commands interacting with the Windows Registry, specifically commands that add entries to `HKCU\\software\\microsoft\\windows\\currentversion\\run`. This is a common technique for achieving persistence by having malware start automatically at system boot.\n\n- Spotting invocations that involve the bypass of execution policies and the use of `new-object` combined with `system.net.webclient` and a `.download` method, aiming to download potentially malicious content from the internet while staying under the radar.\n\n- Watching for instances where `iex`, `New-Object`, `Net.WebClient`, and `.Download` are used together, as this is another method that might be utilized to fetch and execute malicious scripts from remote servers through PowerShell.\n\n- Filtering out false positives by excluding legitimate uses of PowerShell for downloading and installing software via Chocolatey, which is a package manager for Windows. This involves ignoring command lines that download and execute Chocolatey installation scripts.\n\nLogs should be examined for any of these patterns, taking into consideration that any single occurrence could be indicative of suspicious activity. It's essential to treat detections with high priority due to the potential severity of PowerShell being used as an attack vector. Tags associated with these activities include Tactics and Techniques like Execution, Persistence, Defense Evasion, and Command and Control, which are part of the broader categories of malicious behavior as classified by MITRE ATT&CK."
    }
  },
  {
    "instruction": "Can you explain how to detect: restricted access to applications by the Software Restriction Policies (SRP) policy",
    "context": "",
    "output": "Certainly!\n\nIn order to detect restricted access to applications by the Software Restriction Policies (SRP) policy, you should monitor application event logs on Windows systems, focusing on events generated by the Microsoft-Windows-SoftwareRestrictionPolicies provider. Key events to watch include:\n\n- Event ID 865, which indicates that access to a certain application has been restricted by the Administrator using the default software restriction policy level.\n- Event ID 866, signaling that access to an application was restricted based on its location, with a specific policy rule applied to its path.\n- Event ID 867, which occurs when access is restricted due to a software publisher policy.\n- Event ID 868 and 882, both of which denote that access was restricted by an Administrator through a specific policy rule.\n\nMonitoring for these events can help identify attempts to execute unauthorized software or modifications to software restriction policies, potentially signaling malicious activity. It's important to be aware that while these detections are crucial, false positives may occur, and unknown circumstances could trigger these events without malicious intent. This detection strategy is classified as high level, emphasizing its importance in maintaining secure and compliant systems.\n\nThis approach aligns with several MITRE ATT&CK tactics and techniques, including execution policy prevention, which is part of the defense evasion category, and software restriction policies, relevant for detecting and mitigating unauthorized applications and scripts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "restricted access to applications by the Software Restriction Policies (SRP) policy",
      "answer": "In order to detect restricted access to applications by the Software Restriction Policies (SRP) policy, you should monitor application event logs on Windows systems, focusing on events generated by the Microsoft-Windows-SoftwareRestrictionPolicies provider. Key events to watch include:\n\n- Event ID 865, which indicates that access to a certain application has been restricted by the Administrator using the default software restriction policy level.\n- Event ID 866, signaling that access to an application was restricted based on its location, with a specific policy rule applied to its path.\n- Event ID 867, which occurs when access is restricted due to a software publisher policy.\n- Event ID 868 and 882, both of which denote that access was restricted by an Administrator through a specific policy rule.\n\nMonitoring for these events can help identify attempts to execute unauthorized software or modifications to software restriction policies, potentially signaling malicious activity. It's important to be aware that while these detections are crucial, false positives may occur, and unknown circumstances could trigger these events without malicious intent. This detection strategy is classified as high level, emphasizing its importance in maintaining secure and compliant systems.\n\nThis approach aligns with several MITRE ATT&CK tactics and techniques, including execution policy prevention, which is part of the defense evasion category, and software restriction policies, relevant for detecting and mitigating unauthorized applications and scripts."
    }
  },
  {
    "instruction": "Can you explain how to detect: different malformed user agents used in Malleable Profiles used with Cobalt Strike",
    "context": "",
    "output": "Certainly!\n\nIn order to detect different malformed user agents used in Malleable Profiles used with Cobalt Strike, you should: Focus on monitoring web proxy logs for specific user agent strings that are indicative of Cobalt Strike activity. This involves looking for requests that include user agent strings matching known patterns associated with Cobalt Strike malleable C2 profiles. The specific signatures to watch for include: \n\n1. \"Mozilla/4.0 (compatible; MSIE 6.0;Windows NT 5.1)\"\n2. \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E )\"\n3. \"Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 5.2) Java/1.5.0_08\"\n4. Any user agent that ends with \"; MANM; MANM)\"\n\nAdditionally, any detection requires a critical level of attention due to the severity of the implications tied to Cobalt Strike use, such as command and control (C2) communication. It's important to keep in mind that these signatures may not cover all variants, and detections should be treated with high priority given the potential false positives are unknown, emphasizing the stealthy and adaptive nature of attackers using Cobalt Strike.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "different malformed user agents used in Malleable Profiles used with Cobalt Strike",
      "answer": "In order to detect different malformed user agents used in Malleable Profiles used with Cobalt Strike, you should: Focus on monitoring web proxy logs for specific user agent strings that are indicative of Cobalt Strike activity. This involves looking for requests that include user agent strings matching known patterns associated with Cobalt Strike malleable C2 profiles. The specific signatures to watch for include: \n\n1. \"Mozilla/4.0 (compatible; MSIE 6.0;Windows NT 5.1)\"\n2. \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E )\"\n3. \"Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 5.2) Java/1.5.0_08\"\n4. Any user agent that ends with \"; MANM; MANM)\"\n\nAdditionally, any detection requires a critical level of attention due to the severity of the implications tied to Cobalt Strike use, such as command and control (C2) communication. It's important to keep in mind that these signatures may not cover all variants, and detections should be treated with high priority given the potential false positives are unknown, emphasizing the stealthy and adaptive nature of attackers using Cobalt Strike."
    }
  },
  {
    "instruction": "How to detect: exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint",
    "context": "",
    "output": "In order to detect exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint, you should: Monitor web server logs for specific patterns that could indicate an attack. Look within the webserver category for instances where the cs-user-agent matches Mozilla/5.0 compatible with Windows NT 10.0 and acting as Chrome 105.0.5195.54 Safari/537.36. These requests should also be using the 'POST' method and returning a status code of 200, indicating a successful request. Crucially, the URI query should contain both '/owa/mastermailbox' and '/powershell' in the same request. This combination of criteria helps identify potential malicious activity aimed at exploiting the exchange server by leveraging the OWA interface to interact with PowerShell endpoints. False positives for this detection strategy are unlikely, indicating a high level of confidence in the specificity of this detection method for identifying potential exploits. The criticality of these detections points to the urgency and importance of monitoring for these specific conditions as part of a comprehensive cybersecurity defense strategy against attacks targeting exchange servers through the OWA interface.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint",
      "answer": "In order to detect exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint, you should: Monitor web server logs for specific patterns that could indicate an attack. Look within the webserver category for instances where the cs-user-agent matches Mozilla/5.0 compatible with Windows NT 10.0 and acting as Chrome 105.0.5195.54 Safari/537.36. These requests should also be using the 'POST' method and returning a status code of 200, indicating a successful request. Crucially, the URI query should contain both '/owa/mastermailbox' and '/powershell' in the same request. This combination of criteria helps identify potential malicious activity aimed at exploiting the exchange server by leveraging the OWA interface to interact with PowerShell endpoints. False positives for this detection strategy are unlikely, indicating a high level of confidence in the specificity of this detection method for identifying potential exploits. The criticality of these detections points to the urgency and importance of monitoring for these specific conditions as part of a comprehensive cybersecurity defense strategy against attacks targeting exchange servers through the OWA interface."
    }
  },
  {
    "instruction": "Can you explain how to detect: an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors",
    "context": "",
    "output": "Certainly!\n\nIn order to detect an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors, you should: Monitor network connections on Windows systems for communications with specific ngrok tunneling endpoint hostnames. These hostnames include 'tunnel.us.ngrok.com', 'tunnel.eu.ngrok.com', 'tunnel.ap.ngrok.com', 'tunnel.au.ngrok.com', 'tunnel.sa.ngrok.com', 'tunnel.jp.ngrok.com', and 'tunnel.in.ngrok.com'. When such activity is detected, it may indicate an attempt at unauthorized data exfiltration. However, bear in mind that there could be legitimate uses of ngrok, so each detection should be investigated to confirm malicious activity. This activity is considered of high importance due to the potential for it to indicate data being exfiltrated by malicious actors, bypassing usual data transmission safeguards.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors",
      "answer": "In order to detect an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors, you should: Monitor network connections on Windows systems for communications with specific ngrok tunneling endpoint hostnames. These hostnames include 'tunnel.us.ngrok.com', 'tunnel.eu.ngrok.com', 'tunnel.ap.ngrok.com', 'tunnel.au.ngrok.com', 'tunnel.sa.ngrok.com', 'tunnel.jp.ngrok.com', and 'tunnel.in.ngrok.com'. When such activity is detected, it may indicate an attempt at unauthorized data exfiltration. However, bear in mind that there could be legitimate uses of ngrok, so each detection should be investigated to confirm malicious activity. This activity is considered of high importance due to the potential for it to indicate data being exfiltrated by malicious actors, bypassing usual data transmission safeguards."
    }
  },
  {
    "instruction": "Can you explain how to detect: PsExec service installation and execution events (service and Sysmon)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect PsExec service installation and execution events (service and Sysmon), you should monitor Windows System logs for specific events indicating that a new service has been installed or executed, particularly focusing on events from the Service Control Manager. Look for the event ID 7045, which signals a service installation, especially if the service name is 'PSEXESVC' and the image path ends with '\\PSEXESVC.exe'. This is a strong indicator of PsExec service installation. Additionally, keep an eye out for event ID 7036, which indicates service execution, specifically if the service name mentioned is 'PSEXESVC'. \n\nFor detailed investigation, focus on fields such as EventID, CommandLine, ParentCommandLine, ServiceName, ServiceFileName, TargetFilename, and PipeName, as they provide critical information on how the service was installed or executed. \n\nBe aware that there might be unknown scenarios that could lead to false positives, hence maintaining a low level of alert severity until further investigation can substantiate a malicious activity. \n\nThis monitoring strategy is aligned with identifying tactics and techniques such as Execution and Lateral Movement, which are often associated with malicious actors utilizing tools like PsExec to execute commands or deploy payloads remotely on a target system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PsExec service installation and execution events (service and Sysmon)",
      "answer": "In order to detect PsExec service installation and execution events (service and Sysmon), you should monitor Windows System logs for specific events indicating that a new service has been installed or executed, particularly focusing on events from the Service Control Manager. Look for the event ID 7045, which signals a service installation, especially if the service name is 'PSEXESVC' and the image path ends with '\\PSEXESVC.exe'. This is a strong indicator of PsExec service installation. Additionally, keep an eye out for event ID 7036, which indicates service execution, specifically if the service name mentioned is 'PSEXESVC'. \n\nFor detailed investigation, focus on fields such as EventID, CommandLine, ParentCommandLine, ServiceName, ServiceFileName, TargetFilename, and PipeName, as they provide critical information on how the service was installed or executed. \n\nBe aware that there might be unknown scenarios that could lead to false positives, hence maintaining a low level of alert severity until further investigation can substantiate a malicious activity. \n\nThis monitoring strategy is aligned with identifying tactics and techniques such as Execution and Lateral Movement, which are often associated with malicious actors utilizing tools like PsExec to execute commands or deploy payloads remotely on a target system."
    }
  },
  {
    "instruction": "Please help me detect the following: registry modifications potentially related to the Ke3chang/TidePool malware as seen in campaigns running in 2019 and 2020",
    "context": "",
    "output": "Sure!\nIn order to detect registry modifications potentially related to the Ke3chang/TidePool malware as seen in campaigns running in 2019 and 2020, you should: Monitor the creation of processes on Windows systems for specific command-line arguments that modify registry keys. These modifications include setting \"DisableFirstRunCustomize\", \"Check_Associations\", and \"IEHarden\" within the user's Software settings for Internet Explorer and Internet Settings in the Windows Current Version registry path. Modifications such as setting the \"DisableFirstRunCustomize\" value to 2 with force, changing \"Check_Associations\", and disabling \"IEHarden\" by setting its value to 0 forcibly, are indicative of activities associated with the Ke3chang and TidePool malware families. Being attentive to such registry changes can help in identifying the presence of these malware types on a system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registry modifications potentially related to the Ke3chang/TidePool malware as seen in campaigns running in 2019 and 2020",
      "answer": "In order to detect registry modifications potentially related to the Ke3chang/TidePool malware as seen in campaigns running in 2019 and 2020, you should: Monitor the creation of processes on Windows systems for specific command-line arguments that modify registry keys. These modifications include setting \"DisableFirstRunCustomize\", \"Check_Associations\", and \"IEHarden\" within the user's Software settings for Internet Explorer and Internet Settings in the Windows Current Version registry path. Modifications such as setting the \"DisableFirstRunCustomize\" value to 2 with force, changing \"Check_Associations\", and disabling \"IEHarden\" by setting its value to 0 forcibly, are indicative of activities associated with the Ke3chang and TidePool malware families. Being attentive to such registry changes can help in identifying the presence of these malware types on a system."
    }
  },
  {
    "instruction": "How can I detect: single user failing to authenticate to multiple users using explicit credentials.",
    "context": "",
    "output": "In order to detect a single user failing to authenticate to multiple users using explicit credentials, you should monitor Windows Security logs, specifically looking for event ID 4648. This event ID signifies an attempt was made to log on with explicit credentials, which could indicate an attacker trying to use the credentials of one user to access the accounts of others.\n\nTo accurately detect this behavior while minimizing noise, you should exclude any logins where the SubjectUserName ends with a '$', as these are typically computer accounts, services like UMFD-0, or system processes like DWM-1, which might generate a lot of irrelevant alerts. You're aiming to identify instances where a single SubjectUserName is associated with more than 10 TargetUserName entries within a 1-hour timeframe. This indicates that one user is attempting to authenticate as multiple different users in a short period, which is suspicious and may suggest an attempt to misuse credentials.\n\nIt's important to note that there could be legitimate scenarios resulting in similar activity logs. For instance, terminal servers, jump servers, Citrix server farms, or any multiuser system where users frequently switch or access multiple accounts can generate false positives. Workstations with multiple user accounts being accessed in quick succession might also produce benign instances of this pattern.\n\nThis monitoring strategy falls into tactics and techniques associated with Credential Access, specifically the use of valid accounts in an unauthorized manner, aiming to elevate access or perform actions masquerading as other users. Recognizing and filtering out legitimate use cases while focusing on abnormal patterns is crucial for effective detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "single user failing to authenticate to multiple users using explicit credentials.",
      "answer": "In order to detect a single user failing to authenticate to multiple users using explicit credentials, you should monitor Windows Security logs, specifically looking for event ID 4648. This event ID signifies an attempt was made to log on with explicit credentials, which could indicate an attacker trying to use the credentials of one user to access the accounts of others.\n\nTo accurately detect this behavior while minimizing noise, you should exclude any logins where the SubjectUserName ends with a '$', as these are typically computer accounts, services like UMFD-0, or system processes like DWM-1, which might generate a lot of irrelevant alerts. You're aiming to identify instances where a single SubjectUserName is associated with more than 10 TargetUserName entries within a 1-hour timeframe. This indicates that one user is attempting to authenticate as multiple different users in a short period, which is suspicious and may suggest an attempt to misuse credentials.\n\nIt's important to note that there could be legitimate scenarios resulting in similar activity logs. For instance, terminal servers, jump servers, Citrix server farms, or any multiuser system where users frequently switch or access multiple accounts can generate false positives. Workstations with multiple user accounts being accessed in quick succession might also produce benign instances of this pattern.\n\nThis monitoring strategy falls into tactics and techniques associated with Credential Access, specifically the use of valid accounts in an unauthorized manner, aiming to elevate access or perform actions masquerading as other users. Recognizing and filtering out legitimate use cases while focusing on abnormal patterns is crucial for effective detection."
    }
  },
  {
    "instruction": "How to detect: \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie.\nThis could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server).\n",
    "context": "",
    "output": "In order to detect \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie, which could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server), you should: Monitor Windows process creation logs for instances where \"rundll32.exe\" is initiated, particularly observing if the image ends with '\\rundll32.exe' and matches the original file name 'RUNDLL32.EXE'. Additionally, check the command line for the specific pattern 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'. If both conditions are met, it might indicate potential malicious activity centered around data exfiltration or unauthorized code execution using WebDav. Note that the certainty level for these detections is considered medium, acknowledging there could be cases where such activity is benign and doesn't represent a security threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "\"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie.\nThis could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server).\n",
      "answer": "In order to detect \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie, which could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server), you should: Monitor Windows process creation logs for instances where \"rundll32.exe\" is initiated, particularly observing if the image ends with '\\rundll32.exe' and matches the original file name 'RUNDLL32.EXE'. Additionally, check the command line for the specific pattern 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'. If both conditions are met, it might indicate potential malicious activity centered around data exfiltration or unauthorized code execution using WebDav. Note that the certainty level for these detections is considered medium, acknowledging there could be cases where such activity is benign and doesn't represent a security threat."
    }
  },
  {
    "instruction": "Please help me detect the following: when an attacker tries to hide from Sysmon by disabling or stopping it",
    "context": "",
    "output": "Sure!\nIn order to detect when an attacker tries to hide from Sysmon by disabling or stopping it, you should: monitor the Sysmon status within Windows environments, specifically looking for events related to the Sysmon service being stopped. This is identified by analyzing the Sysmon logs for any status changes indicating the Sysmon service has been stopped. Additionally, attention should be given to any changes in the Sysmon configuration as this could also indicate an attempt to evade detection. It is crucial to differentiate between legitimate administrative activities that might involve stopping or reconfiguring Sysmon and malicious actions aimed at evading detection. The primary log source for this activity is Windows Sysmon status logs. This monitoring strategy is relevant to identifying suspicious activities associated with the evasion technique, specifically focusing on the MITRE ATT&CK tactics and techniques without directly naming them. Notably, legitimate reasons for the Sysmon service to be stopped or reconfigured should be considered as potential false positives, and such events should be carefully investigated to distinguish between benign and malicious activities. The urgency level for identifying and investigating these events is high due to the potential implications of an attacker successfully evading detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker tries to hide from Sysmon by disabling or stopping it",
      "answer": "In order to detect when an attacker tries to hide from Sysmon by disabling or stopping it, you should: monitor the Sysmon status within Windows environments, specifically looking for events related to the Sysmon service being stopped. This is identified by analyzing the Sysmon logs for any status changes indicating the Sysmon service has been stopped. Additionally, attention should be given to any changes in the Sysmon configuration as this could also indicate an attempt to evade detection. It is crucial to differentiate between legitimate administrative activities that might involve stopping or reconfiguring Sysmon and malicious actions aimed at evading detection. The primary log source for this activity is Windows Sysmon status logs. This monitoring strategy is relevant to identifying suspicious activities associated with the evasion technique, specifically focusing on the MITRE ATT&CK tactics and techniques without directly naming them. Notably, legitimate reasons for the Sysmon service to be stopped or reconfigured should be considered as potential false positives, and such events should be carefully investigated to distinguish between benign and malicious activities. The urgency level for identifying and investigating these events is high due to the potential implications of an attacker successfully evading detection."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious file type dropped by an Exchange component in IIS into a suspicious folder",
    "context": "",
    "output": "In order to detect suspicious file type dropped by an Exchange component in IIS into a suspicious folder, you should: monitor Windows file event logs for occurrences where a file with an extension of either .aspx, .asp, or .ashx is created or modified in directories commonly associated with IIS web applications, particularly within the paths 'FrontEnd\\HttpProxy\\' and '\\inetpub\\wwwroot\\aspnet_client\\'. The primary executable to watch in relation to this activity is 'w3wp.exe', a process associated with IIS web application pools, especially when its command line invocation includes references to 'MSExchange'. This specific activity is flagged with a high level of concern due to its potential association with malicious operations targeting Microsoft Exchange components working within the IIS infrastructure.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious file type dropped by an Exchange component in IIS into a suspicious folder",
      "answer": "In order to detect suspicious file type dropped by an Exchange component in IIS into a suspicious folder, you should: monitor Windows file event logs for occurrences where a file with an extension of either .aspx, .asp, or .ashx is created or modified in directories commonly associated with IIS web applications, particularly within the paths 'FrontEnd\\HttpProxy\\' and '\\inetpub\\wwwroot\\aspnet_client\\'. The primary executable to watch in relation to this activity is 'w3wp.exe', a process associated with IIS web application pools, especially when its command line invocation includes references to 'MSExchange'. This specific activity is flagged with a high level of concern due to its potential association with malicious operations targeting Microsoft Exchange components working within the IIS infrastructure."
    }
  },
  {
    "instruction": "Please help me detect the following: an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain. DNS zones used to host the DNS records for a particular domain.",
    "context": "",
    "output": "Sure!\nIn order to detect an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain, which are used to host the DNS records for a particular domain, you should focus on monitoring the creation of processes on Windows systems. Specifically, watch for any processes that are initiated where the image name ends with '\\dnscmd.exe'. Additionally, check if the command line used to start these processes includes any of the following arguments: '/enumrecords', '/enumzones', '/ZonePrint', or '/info'. These particular arguments are indicative of actions that could be used maliciously to gather information about DNS zones and records. It's important to be aware that these detections could also trigger on legitimate administration activities. Therefore, such detections have been assigned a medium level of importance, implying that while they are noteworthy, they should not be considered definitive proof of malicious behavior without further investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain. DNS zones used to host the DNS records for a particular domain.",
      "answer": "In order to detect an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain, which are used to host the DNS records for a particular domain, you should focus on monitoring the creation of processes on Windows systems. Specifically, watch for any processes that are initiated where the image name ends with '\\dnscmd.exe'. Additionally, check if the command line used to start these processes includes any of the following arguments: '/enumrecords', '/enumzones', '/ZonePrint', or '/info'. These particular arguments are indicative of actions that could be used maliciously to gather information about DNS zones and records. It's important to be aware that these detections could also trigger on legitimate administration activities. Therefore, such detections have been assigned a medium level of importance, implying that while they are noteworthy, they should not be considered definitive proof of malicious behavior without further investigation."
    }
  },
  {
    "instruction": "How can I detect: process, such as mimikatz, accesses the memory of svchost to dump credentials",
    "context": "",
    "output": "In order to detect when a process, such as mimikatz, accesses the memory of svchost to dump credentials, you should: Focus on Windows process access logs and look for events where a process targets the 'svchost.exe' file. Specifically, you should look for any process that has been granted access with the permissions '0x143a' to the memory of 'svchost.exe'. However, you must exclude any access instances where the source of the access is a known and trusted process, notably 'services.exe' or 'msiexec.exe'. This approach is designed to elevate the detection accuracy by minimizing false positives from legitimate executable accesses while ensuring high sensitivity to potentially malicious activities like credential dumping by targeting system processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process, such as mimikatz, accesses the memory of svchost to dump credentials",
      "answer": "In order to detect when a process, such as mimikatz, accesses the memory of svchost to dump credentials, you should: Focus on Windows process access logs and look for events where a process targets the 'svchost.exe' file. Specifically, you should look for any process that has been granted access with the permissions '0x143a' to the memory of 'svchost.exe'. However, you must exclude any access instances where the source of the access is a known and trusted process, notably 'services.exe' or 'msiexec.exe'. This approach is designed to elevate the detection accuracy by minimizing false positives from legitimate executable accesses while ensuring high sensitivity to potentially malicious activities like credential dumping by targeting system processes."
    }
  },
  {
    "instruction": "How can I detect: process execution related errors in NodeJS. If the exceptions are caused due to user input then they may suggest an RCE vulnerability.",
    "context": "",
    "output": "In order to detect process execution related errors in NodeJS, particularly those that could indicate a remote code execution (RCE) vulnerability if triggered by user input, you should monitor application error logs specifically within NodeJS environments. The focus should be on logs with a severity level of ERROR or higher. You are looking for incidents that contain the keyword 'node:child_process'. This keyword is indicative of process execution related errors which could suggest an underlying vulnerability in the application. It's important to be aware of false positives, such as error messages that arise from Puppeteer (a Node library for controlling headless Chrome or Chromium) invocations; these may also mention 'child_process' but do not necessarily denote a vulnerability. The severity of this detection mechanism is considered high, as identifying errors related to process execution can be critical for maintaining the security of the application. This kind of monitoring aligns with identifying potential security issues related to Command and Control (C2) and Execution tactics, which are central to understanding and mitigating RCE vulnerabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process execution related errors in NodeJS. If the exceptions are caused due to user input then they may suggest an RCE vulnerability.",
      "answer": "In order to detect process execution related errors in NodeJS, particularly those that could indicate a remote code execution (RCE) vulnerability if triggered by user input, you should monitor application error logs specifically within NodeJS environments. The focus should be on logs with a severity level of ERROR or higher. You are looking for incidents that contain the keyword 'node:child_process'. This keyword is indicative of process execution related errors which could suggest an underlying vulnerability in the application. It's important to be aware of false positives, such as error messages that arise from Puppeteer (a Node library for controlling headless Chrome or Chromium) invocations; these may also mention 'child_process' but do not necessarily denote a vulnerability. The severity of this detection mechanism is considered high, as identifying errors related to process execution can be critical for maintaining the security of the application. This kind of monitoring aligns with identifying potential security issues related to Command and Control (C2) and Execution tactics, which are central to understanding and mitigating RCE vulnerabilities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Remote registry management using REG utility from non-admin workstation",
    "context": "",
    "output": "In order to detect instances of remote registry management using REG utility from non-admin workstations, you should focus on monitoring Windows security logs. Specifically, look for events with the Event ID 5145, which indicates an attempt to access network shared objects. This activity becomes particularly interesting when the accessed object is related to the Windows Registry, as denoted by the access path containing '\\winreg'. \n\nTo ensure that legitimate administrative activity does not generate unnecessary alerts, any access attempts made from known administrators' workstations should be excluded from this detection mechanism. This approach helps in identifying potentially malicious or unauthorized attempts to use the REG utility for registry modifications from machines that are not recognized as administrative workstations. \n\nBe aware that while monitoring for this behavior is crucial for detecting unauthorized remote registry management attempts, there could be instances where legitimate usage triggers an alert. Such legitimate cases typically involve administrators performing valid remote registry operations from non-standard workstations. \n\nThe primary focus on security event logs, combined with the specific conditions around Event ID 5145 and the exclusion of known admin workstations, aligns this detection strategy with tactics and techniques associated with Persistence, Privilege Escalation, and Defense Evasion. Identifying unauthorized access to the Windows Registry via remote management tools is a critical step in mitigating potential threats that exploit registry modifications for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Remote registry management using REG utility from non-admin workstation",
      "answer": "In order to detect instances of remote registry management using REG utility from non-admin workstations, you should focus on monitoring Windows security logs. Specifically, look for events with the Event ID 5145, which indicates an attempt to access network shared objects. This activity becomes particularly interesting when the accessed object is related to the Windows Registry, as denoted by the access path containing '\\winreg'. \n\nTo ensure that legitimate administrative activity does not generate unnecessary alerts, any access attempts made from known administrators' workstations should be excluded from this detection mechanism. This approach helps in identifying potentially malicious or unauthorized attempts to use the REG utility for registry modifications from machines that are not recognized as administrative workstations. \n\nBe aware that while monitoring for this behavior is crucial for detecting unauthorized remote registry management attempts, there could be instances where legitimate usage triggers an alert. Such legitimate cases typically involve administrators performing valid remote registry operations from non-standard workstations. \n\nThe primary focus on security event logs, combined with the specific conditions around Event ID 5145 and the exclusion of known admin workstations, aligns this detection strategy with tactics and techniques associated with Persistence, Privilege Escalation, and Defense Evasion. Identifying unauthorized access to the Windows Registry via remote management tools is a critical step in mitigating potential threats that exploit registry modifications for malicious purposes."
    }
  },
  {
    "instruction": "Please help me detect the following: enumeration of local network configuration",
    "context": "",
    "output": "Sure!\nIn order to detect enumeration of local network configuration, you should monitor process creation logs on Linux systems for the execution of command-line tools typically used for network configuration and monitoring. These tools include `firewall-cmd`, `ufw`, `iptables`, `netstat`, `ss`, `ip`, `ifconfig`, `systemd-resolve`, and `route`. Additionally, watch for any commands that contain references to `/etc/resolv.conf`, as manipulation or querying of DNS settings can be indicative of an attacker trying to understand the local network better. It's important to consider that such activities could also reflect legitimate administration tasks. The analysis of logs should focus on identifying unauthorized or unexpected invocations of these utilities, which might suggest an adversary is trying to gather information about the network's configuration and defenses. This monitoring is categorized as informational due to the possibility of false positives, which could arise from regular system administration work.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "enumeration of local network configuration",
      "answer": "In order to detect enumeration of local network configuration, you should monitor process creation logs on Linux systems for the execution of command-line tools typically used for network configuration and monitoring. These tools include `firewall-cmd`, `ufw`, `iptables`, `netstat`, `ss`, `ip`, `ifconfig`, `systemd-resolve`, and `route`. Additionally, watch for any commands that contain references to `/etc/resolv.conf`, as manipulation or querying of DNS settings can be indicative of an attacker trying to understand the local network better. It's important to consider that such activities could also reflect legitimate administration tasks. The analysis of logs should focus on identifying unauthorized or unexpected invocations of these utilities, which might suggest an adversary is trying to gather information about the network's configuration and defenses. This monitoring is categorized as informational due to the possibility of false positives, which could arise from regular system administration work."
    }
  },
  {
    "instruction": "Can you explain how to detect: WMIC executing \"process call create\" with suspicious calls to processes such as \"rundll32\", \"regsrv32\", etc.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect WMIC executing \"process call create\" with suspicious calls to processes such as \"rundll32\", \"regsrv32\", etc., you should: focus on monitoring Windows process creation events. Specifically, watch for command lines that include both the phrases 'process ', 'call ', and 'create ' in conjunction, indicating a possible attempt to execute or manipulate processes suspiciously. Additionally, heightened alertness is warranted when command lines contain references to known tools or pathways often utilized in malicious activities such as \"rundll32\", \"bitsadmin\", \"regsvr32\", \"cmd.exe\" with various flags ('/c ', '/k ', '/r '), \"powershell\", \"pwsh\", \"certutil\", \"cscript\", \"wscript\", \"mshta\", or paths that are commonly abused by attackers like \"\\Users\\Public\\\", \"\\Windows\\Temp\\\", \"\\AppData\\Local\\\", and environment variables \"%temp%\", \"%tmp%\", \"%ProgramData%\", \"%appdata%\", \"%comspec%\", \"%localappdata%\". Logs containing these elements should be captured and analyzed, including both the command line used and the parent command line, to help identify potentially malicious activity. It's important to note that while this approach is effective in identifying suspicious behavior, there may be legitimate instances of these command lines, thus some alerts might not indicate a true security incident.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "WMIC executing \"process call create\" with suspicious calls to processes such as \"rundll32\", \"regsrv32\", etc.",
      "answer": "In order to detect WMIC executing \"process call create\" with suspicious calls to processes such as \"rundll32\", \"regsrv32\", etc., you should: focus on monitoring Windows process creation events. Specifically, watch for command lines that include both the phrases 'process ', 'call ', and 'create ' in conjunction, indicating a possible attempt to execute or manipulate processes suspiciously. Additionally, heightened alertness is warranted when command lines contain references to known tools or pathways often utilized in malicious activities such as \"rundll32\", \"bitsadmin\", \"regsvr32\", \"cmd.exe\" with various flags ('/c ', '/k ', '/r '), \"powershell\", \"pwsh\", \"certutil\", \"cscript\", \"wscript\", \"mshta\", or paths that are commonly abused by attackers like \"\\Users\\Public\\\", \"\\Windows\\Temp\\\", \"\\AppData\\Local\\\", and environment variables \"%temp%\", \"%tmp%\", \"%ProgramData%\", \"%appdata%\", \"%comspec%\", \"%localappdata%\". Logs containing these elements should be captured and analyzed, including both the command line used and the parent command line, to help identify potentially malicious activity. It's important to note that while this approach is effective in identifying suspicious behavior, there may be legitimate instances of these command lines, thus some alerts might not indicate a true security incident."
    }
  },
  {
    "instruction": "Can you explain how to detect: exploitation attempt of vulnerability described in CVE-2021-3156.\nAlternative approach might be to look for flooding of auditd logs due to bruteforcing.\nrequired to trigger the heap-based buffer overflow.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect exploitation attempt of vulnerability described in CVE-2021-3156 or an alternative approach might be to look for flooding of auditd logs due to bruteforcing required to trigger the heap-based buffer overflow, you should: Focus on monitoring the Linux Audit Daemon (auditd) for specific system call activities (SYSCALL) related to the use of the '/usr/bin/sudoedit' executable. This involves looking for scenarios where this executable is invoked more than 50 times by any host, which may indicate an attempt to exploit the mentioned vulnerability or a brute force attack aiming to overflow the heap memory. It is crucial to monitor these patterns of behavior closely, as it is high-severity and directly associated with tactics and techniques including privilege escalation and exploitation for elevated privileges.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempt of vulnerability described in CVE-2021-3156.\nAlternative approach might be to look for flooding of auditd logs due to bruteforcing.\nrequired to trigger the heap-based buffer overflow.\n",
      "answer": "In order to detect exploitation attempt of vulnerability described in CVE-2021-3156 or an alternative approach might be to look for flooding of auditd logs due to bruteforcing required to trigger the heap-based buffer overflow, you should: Focus on monitoring the Linux Audit Daemon (auditd) for specific system call activities (SYSCALL) related to the use of the '/usr/bin/sudoedit' executable. This involves looking for scenarios where this executable is invoked more than 50 times by any host, which may indicate an attempt to exploit the mentioned vulnerability or a brute force attack aiming to overflow the heap memory. It is crucial to monitor these patterns of behavior closely, as it is high-severity and directly associated with tactics and techniques including privilege escalation and exploitation for elevated privileges."
    }
  },
  {
    "instruction": "How to detect: XML parsing issues, if the application expects to work with XML make sure that the parser is initialized safely.",
    "context": "",
    "output": "In order to detect XML parsing issues, if the application expects to work with XML make sure that the parser is initialized safely, you should: Monitor application error logs from the Java Virtual Machine (JVM) environment where application error logs are collected with a LOG_LEVEL of ERROR or above. Look for specific keywords within these logs that indicate potential XML parsing issues. The keywords to look out for are 'SAXParseException' and 'DOMException'. These keywords suggest there might be issues with XML parsing that could potentially point to unsafe initialization of the parser, which is a critical aspect of securing applications that process XML data. However, bear in mind that these indicators might not always signify a security issue. There could be false positives, especially in scenarios where the application is designed to work with XML and may encounter parsing issues as part of its normal operation. Therefore, while these keywords can be strong indicators of XML parsing issues that necessitate a closer look to ensure the parser is initialized safely, they should be evaluated in the context of the application's expected behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "XML parsing issues, if the application expects to work with XML make sure that the parser is initialized safely.",
      "answer": "In order to detect XML parsing issues, if the application expects to work with XML make sure that the parser is initialized safely, you should: Monitor application error logs from the Java Virtual Machine (JVM) environment where application error logs are collected with a LOG_LEVEL of ERROR or above. Look for specific keywords within these logs that indicate potential XML parsing issues. The keywords to look out for are 'SAXParseException' and 'DOMException'. These keywords suggest there might be issues with XML parsing that could potentially point to unsafe initialization of the parser, which is a critical aspect of securing applications that process XML data. However, bear in mind that these indicators might not always signify a security issue. There could be false positives, especially in scenarios where the application is designed to work with XML and may encounter parsing issues as part of its normal operation. Therefore, while these keywords can be strong indicators of XML parsing issues that necessitate a closer look to ensure the parser is initialized safely, they should be evaluated in the context of the application's expected behavior."
    }
  },
  {
    "instruction": "Can you explain how to detect: Non-Standard Tools Connecting to TCP port 3389 indicating possible lateral movement",
    "context": "",
    "output": "Certainly!\n\nIn order to detect non-standard tools connecting to TCP port 3389 indicating possible lateral movement, you should monitor network connections on Windows systems for traffic initiated to destination port 3389, which is commonly used for Remote Desktop Protocol (RDP) connections, indicating an attempt to connect remotely to another system. This analysis specifically targets connections that do not originate from standard Remote Desktop application paths, such as 'C:\\Windows\\System32\\mstsc.exe' or 'C:\\Windows\\SysWOW64\\mstsc.exe', and additional filters are applied to exclude known benign uses of port 3389 by certain system and third-party processes.\n\nThese exclusions encompass a variety of applications and tools that might legitimately use port 3389 for RDP connections or related network activities, including DNS resolution by 'C:\\Windows\\System32\\dns.exe', security software from Avast, system utilities like those from Sysinternals, and several third-party remote desktop and system monitoring applications. Even specific options for browser-based initiations (Google Chrome, Mozilla Firefox), security and monitoring tools (Splunk Universal Forwarder, Sentinel One), as well as certain unknown or unspecified processes, are considered to reduce false positives.\n\nDespite these filters, the focus remains on capturing activity from non-standard and potentially malicious tools that could be attempting to use RDP for lateral movement within a network environment - an operation often associated with an attacker's efforts to expand their foothold on networked systems. The tools and applications specifically filtered out are considered known exceptions and represent typical false positive scenarios where legitimate software may use RDP in a non-malicious context.\n\nThe detection targets evidence of potential unauthorized remote connections, which are critical signs of intrusion and lateral movement tactics, techniques, and procedures (TTPs). By employing this comprehensive filtering approach, the aim is to spotlight suspicious RDP activities that deviate from the norm, thereby allowing cybersecurity teams to respond swiftly to potential threats. Monitoring for such activities is an essential part of defending against adversaries seeking to exploit RDP for malicious purposes, including but not limited to executing commands remotely, accessing restricted resources, or escalating privileges on targeted systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Non-Standard Tools Connecting to TCP port 3389 indicating possible lateral movement",
      "answer": "In order to detect non-standard tools connecting to TCP port 3389 indicating possible lateral movement, you should monitor network connections on Windows systems for traffic initiated to destination port 3389, which is commonly used for Remote Desktop Protocol (RDP) connections, indicating an attempt to connect remotely to another system. This analysis specifically targets connections that do not originate from standard Remote Desktop application paths, such as 'C:\\Windows\\System32\\mstsc.exe' or 'C:\\Windows\\SysWOW64\\mstsc.exe', and additional filters are applied to exclude known benign uses of port 3389 by certain system and third-party processes.\n\nThese exclusions encompass a variety of applications and tools that might legitimately use port 3389 for RDP connections or related network activities, including DNS resolution by 'C:\\Windows\\System32\\dns.exe', security software from Avast, system utilities like those from Sysinternals, and several third-party remote desktop and system monitoring applications. Even specific options for browser-based initiations (Google Chrome, Mozilla Firefox), security and monitoring tools (Splunk Universal Forwarder, Sentinel One), as well as certain unknown or unspecified processes, are considered to reduce false positives.\n\nDespite these filters, the focus remains on capturing activity from non-standard and potentially malicious tools that could be attempting to use RDP for lateral movement within a network environment - an operation often associated with an attacker's efforts to expand their foothold on networked systems. The tools and applications specifically filtered out are considered known exceptions and represent typical false positive scenarios where legitimate software may use RDP in a non-malicious context.\n\nThe detection targets evidence of potential unauthorized remote connections, which are critical signs of intrusion and lateral movement tactics, techniques, and procedures (TTPs). By employing this comprehensive filtering approach, the aim is to spotlight suspicious RDP activities that deviate from the norm, thereby allowing cybersecurity teams to respond swiftly to potential threats. Monitoring for such activities is an essential part of defending against adversaries seeking to exploit RDP for malicious purposes, including but not limited to executing commands remotely, accessing restricted resources, or escalating privileges on targeted systems."
    }
  },
  {
    "instruction": "How to detect: mount of ISO images on an endpoint",
    "context": "",
    "output": "In order to detect the mount of ISO images on an endpoint, you should monitor Windows Security audit logs specifically for events related to the access of removable storage. Focus on capturing events identified by EventID 4663, indicating an object's access attempt. These logs should come from the Security ObjectServer and involve FileType objects. Particularly, pay attention to access attempts involving objects whose names start with '\\Device\\CdRom', as this indicates the interaction with CD-ROM devices, typically used to read ISO images.\n\nHowever, not all access events to CD-ROM devices should be considered suspicious. For instance, accessing the '\\Device\\CdRom0\\setup.exe' path is excluded from detection criteria because it's commonly accessed during legitimate software installations via ISO files. Therefore, while monitoring for the described activities, filter out events involving this specific path to reduce false positives such as those triggered by software installation ISO files.\n\nThis monitoring process is essential for identifying unauthorized or unexpected mount of ISO images, which could be indicative of an attack attempt or unauthorized data retrieval. It's assessed at a medium level of importance due to its potential to catch malicious activities early. Keep an eye out for events meeting these criteria, as they are aligned with the detection of misuse of removable media which relates to several ATT&CK tactics and techniques including Initial Access, Execution, and Persistence, among others.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "mount of ISO images on an endpoint",
      "answer": "In order to detect the mount of ISO images on an endpoint, you should monitor Windows Security audit logs specifically for events related to the access of removable storage. Focus on capturing events identified by EventID 4663, indicating an object's access attempt. These logs should come from the Security ObjectServer and involve FileType objects. Particularly, pay attention to access attempts involving objects whose names start with '\\Device\\CdRom', as this indicates the interaction with CD-ROM devices, typically used to read ISO images.\n\nHowever, not all access events to CD-ROM devices should be considered suspicious. For instance, accessing the '\\Device\\CdRom0\\setup.exe' path is excluded from detection criteria because it's commonly accessed during legitimate software installations via ISO files. Therefore, while monitoring for the described activities, filter out events involving this specific path to reduce false positives such as those triggered by software installation ISO files.\n\nThis monitoring process is essential for identifying unauthorized or unexpected mount of ISO images, which could be indicative of an attack attempt or unauthorized data retrieval. It's assessed at a medium level of importance due to its potential to catch malicious activities early. Keep an eye out for events meeting these criteria, as they are aligned with the detection of misuse of removable media which relates to several ATT&CK tactics and techniques including Initial Access, Execution, and Persistence, among others."
    }
  },
  {
    "instruction": "Can you explain how to detect: A symbolic link is a type of file that contains a reference to another file.\nThis is probably done to make sure that the ransomware is able to follow shortcuts on the machine in order to find the original file to encrypt\n",
    "context": "",
    "output": "Certainly!\n\nIn order to make sure that the ransomware is able to follow shortcuts on the machine in order to find the original file to encrypt, you should monitor for instances where the `fsutil.exe` utility is being used, specifically with command-line arguments that manipulate how symbolic links are evaluated. This involves checking for process creation events on Windows systems where the image name ends with `\\fsutil.exe` or the original file name is exactly `fsutil.exe`. Additionally, it is crucial to look for command-line invocations that include the strings `behavior`, `set`, and `SymlinkEvaluation` together. These indicators suggest an adversary might be configuring the system to ensure ransomware can traverse through symbolic links to encrypt the target files. It's important to note, however, that there may be legitimate uses of these commands by system administrators, hence some alerts might be false positives. The detection level for this activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "A symbolic link is a type of file that contains a reference to another file.\nThis is probably done to make sure that the ransomware is able to follow shortcuts on the machine in order to find the original file to encrypt\n",
      "answer": "In order to make sure that the ransomware is able to follow shortcuts on the machine in order to find the original file to encrypt, you should monitor for instances where the `fsutil.exe` utility is being used, specifically with command-line arguments that manipulate how symbolic links are evaluated. This involves checking for process creation events on Windows systems where the image name ends with `\\fsutil.exe` or the original file name is exactly `fsutil.exe`. Additionally, it is crucial to look for command-line invocations that include the strings `behavior`, `set`, and `SymlinkEvaluation` together. These indicators suggest an adversary might be configuring the system to ensure ransomware can traverse through symbolic links to encrypt the target files. It's important to note, however, that there may be legitimate uses of these commands by system administrators, hence some alerts might be false positives. The detection level for this activity is considered medium."
    }
  },
  {
    "instruction": "Explain how should I detect the following: This method triggers on rare Kerberos Failure Codes caused by manipulations of Kerberos messages",
    "context": "",
    "output": "In order to detect manipulations of Kerberos messages that trigger rare Kerberos Failure Codes, you should monitor for specific event IDs associated with Kerberos authentication attempts within Windows Security logs. These event IDs include 675 (TGT Request), 4768 (TGS Request), 4769 (Service Ticket Request), and 4771 (Kerberos Pre-authentication failed). Any occurrences of these events coupled with specific failure codes, such as '0x9' (Principal in request not found), '0xA', '0xB', '0xF' (Incorrect password or corrupted ticket), '0x10', and other codes up to '0x44' which indicate various issues ranging from malformed requests to protocol and policy violations, should be flagged. Pay attention to false positives which might arise from faulty legacy applications. This analysis is critical in identifying potential security breaches or attempts to compromise the integrity of the Kerberos authentication process.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This method triggers on rare Kerberos Failure Codes caused by manipulations of Kerberos messages",
      "answer": "In order to detect manipulations of Kerberos messages that trigger rare Kerberos Failure Codes, you should monitor for specific event IDs associated with Kerberos authentication attempts within Windows Security logs. These event IDs include 675 (TGT Request), 4768 (TGS Request), 4769 (Service Ticket Request), and 4771 (Kerberos Pre-authentication failed). Any occurrences of these events coupled with specific failure codes, such as '0x9' (Principal in request not found), '0xA', '0xB', '0xF' (Incorrect password or corrupted ticket), '0x10', and other codes up to '0x44' which indicate various issues ranging from malformed requests to protocol and policy violations, should be flagged. Pay attention to false positives which might arise from faulty legacy applications. This analysis is critical in identifying potential security breaches or attempts to compromise the integrity of the Kerberos authentication process."
    }
  },
  {
    "instruction": "How to detect: execution of javascript code using \"mshta.exe\".",
    "context": "",
    "output": "In order to detect execution of javascript code using \"mshta.exe\", you should:\nMonitor process creation logs on Windows systems for instances where 'mshta.exe' appears either at the end of the image path or the original filename is exactly 'MSHTA.EXE'. Additionally, check if the command line includes 'javascript'. To ensure accurate detection, both conditions related to the image name and command line content must be met. This activity is significant due to its high potential for malicious use, although be aware that there might be unknown scenarios leading to false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of javascript code using \"mshta.exe\".",
      "answer": "In order to detect execution of javascript code using \"mshta.exe\", you should:\nMonitor process creation logs on Windows systems for instances where 'mshta.exe' appears either at the end of the image path or the original filename is exactly 'MSHTA.EXE'. Additionally, check if the command line includes 'javascript'. To ensure accurate detection, both conditions related to the image name and command line content must be met. This activity is significant due to its high potential for malicious use, although be aware that there might be unknown scenarios leading to false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation.\nScreen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations\n",
    "context": "",
    "output": "In order to detect adversaries who attempt to take screen captures of the desktop to gather information over the course of an operation, where screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations, you should focus on monitoring PowerShell script activity within the Windows environment. Specifically, ensure that Script Block Logging is enabled, as it plays a crucial role in identifying potentially malicious activities. Look for PowerShell scripts that include the method '.CopyFromScreen' in their text. This method is a tell-tale sign that a script is attempting to capture the screen, which is often associated with adversarial behavior aiming to collect sensitive information post system compromise. Be aware that there are scenarios where this detection might flag benign activities, although such cases are currently unknown, indicating the rule's relevance and specificity towards malicious conduct. This detection strategy is especially critical, given its medium-level prioritization, in the broader context of defending against information gathering tactics and techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation.\nScreen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations\n",
      "answer": "In order to detect adversaries who attempt to take screen captures of the desktop to gather information over the course of an operation, where screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations, you should focus on monitoring PowerShell script activity within the Windows environment. Specifically, ensure that Script Block Logging is enabled, as it plays a crucial role in identifying potentially malicious activities. Look for PowerShell scripts that include the method '.CopyFromScreen' in their text. This method is a tell-tale sign that a script is attempting to capture the screen, which is often associated with adversarial behavior aiming to collect sensitive information post system compromise. Be aware that there are scenarios where this detection might flag benign activities, although such cases are currently unknown, indicating the rule's relevance and specificity towards malicious conduct. This detection strategy is especially critical, given its medium-level prioritization, in the broader context of defending against information gathering tactics and techniques."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect adversaries enumerate sensitive files",
    "context": "",
    "output": "Sure!\nIn order to detect adversaries enumerating sensitive files, you should: Monitor Windows PowerShell script activities, specifically focusing on script block logging which must be enabled for accurate detection. Look for scripts containing commands like 'ls', 'get-childitem', or 'gci' indicating an intention to list directory contents. Further scrutiny should be applied to scripts attempting to use the '-recurse' option, indicating a deeper, possibly malicious directory traversal. Pay special attention to scripts that seem to search for sensitive file types, such as '.pass', '.kdbx', or '.kdb', as this could signify an attempt to locate and potentially compromise crucial data. The detection should be considered genuine if all the mentioned conditions are met, acknowledging the possibility of unknown false positives at a medium severity level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect adversaries enumerate sensitive files",
      "answer": "In order to detect adversaries enumerating sensitive files, you should: Monitor Windows PowerShell script activities, specifically focusing on script block logging which must be enabled for accurate detection. Look for scripts containing commands like 'ls', 'get-childitem', or 'gci' indicating an intention to list directory contents. Further scrutiny should be applied to scripts attempting to use the '-recurse' option, indicating a deeper, possibly malicious directory traversal. Pay special attention to scripts that seem to search for sensitive file types, such as '.pass', '.kdbx', or '.kdb', as this could signify an attempt to locate and potentially compromise crucial data. The detection should be considered genuine if all the mentioned conditions are met, acknowledging the possibility of unknown false positives at a medium severity level."
    }
  },
  {
    "instruction": "Can you explain how to detect: known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement.\nWe can also catch this by system log 7045 (https://github.com/SigmaHQ/sigma/blob/master/rules/windows/builtin/win_cobaltstrike_service_installs.yml)\nIn some SIEM you can catch those events also in HKLM\\System\\ControlSet001\\Services or HKLM\\System\\ControlSet002\\Services, however, this rule is based on a regular sysmon's events.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement, you should focus on monitoring the Windows registry settings, specifically within the system's registry key modifications. Look for events where a value is being set (EventType: SetValue) in registry paths that include 'HKLM\\System\\CurrentControlSet\\Services'. This indicates a service installation or modification, which could be malicious if associated with known patterns.\n\nYou should pay particular attention to two specific sets of conditions that can signal a malicious service install. One set involves any registry modifications that contain both the 'ADMIN$' share and an executable file ('.exe'). This can indicate an attempt to install or modify a service for remote administration or execution of malicious code. The second set of conditions to watch for includes modifications that contain the command processor environment variable ('%COMSPEC%'), the 'start' command, and 'powershell'. This combination suggests an attempt to leverage PowerShell from a command script for potentially malicious purposes, such as executing scripts or commands that install services associated with a Cobalt Strike beacon.\n\nWhile monitoring these activities, be aware that not all modifications fitting these patterns are definitively malicious, and unknown false positives can occur. However, given the critical level of this behavior, any detection warrants immediate investigation. This monitoring is based on observing registry settings changes in Windows environments, aimed specifically at catching malicious service installations related to Cobalt Strike beacon activities, which are known for their capabilities in elevating privileges and facilitating lateral movement within compromised networks. These activities are usually logged under event 7045 in system logs, but can also be detected through specific registry key modifications as described.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement.\nWe can also catch this by system log 7045 (https://github.com/SigmaHQ/sigma/blob/master/rules/windows/builtin/win_cobaltstrike_service_installs.yml)\nIn some SIEM you can catch those events also in HKLM\\System\\ControlSet001\\Services or HKLM\\System\\ControlSet002\\Services, however, this rule is based on a regular sysmon's events.\n",
      "answer": "In order to detect known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement, you should focus on monitoring the Windows registry settings, specifically within the system's registry key modifications. Look for events where a value is being set (EventType: SetValue) in registry paths that include 'HKLM\\System\\CurrentControlSet\\Services'. This indicates a service installation or modification, which could be malicious if associated with known patterns.\n\nYou should pay particular attention to two specific sets of conditions that can signal a malicious service install. One set involves any registry modifications that contain both the 'ADMIN$' share and an executable file ('.exe'). This can indicate an attempt to install or modify a service for remote administration or execution of malicious code. The second set of conditions to watch for includes modifications that contain the command processor environment variable ('%COMSPEC%'), the 'start' command, and 'powershell'. This combination suggests an attempt to leverage PowerShell from a command script for potentially malicious purposes, such as executing scripts or commands that install services associated with a Cobalt Strike beacon.\n\nWhile monitoring these activities, be aware that not all modifications fitting these patterns are definitively malicious, and unknown false positives can occur. However, given the critical level of this behavior, any detection warrants immediate investigation. This monitoring is based on observing registry settings changes in Windows environments, aimed specifically at catching malicious service installations related to Cobalt Strike beacon activities, which are known for their capabilities in elevating privileges and facilitating lateral movement within compromised networks. These activities are usually logged under event 7045 in system logs, but can also be detected through specific registry key modifications as described."
    }
  },
  {
    "instruction": "How to detect: base64 encoded .NET reflective loading of Assembly",
    "context": "",
    "output": "In order to detect base64 encoded .NET reflective loading of Assembly, you should: focus on monitoring process creation logs within Windows environments. Look for command line executions that contain specific base64 encoded strings which are indicative of attempts to use reflection for the loading of .NET assemblies. This technique typically involves obscure or obfuscated base64 strings that, when decoded, reference the .NET reflection methods such as `[Reflection.Assembly]::Load(` or variations thereof, often with additional obfuscation to evade simple detection mechanisms. Since this behavior is rarely found in legitimate system activity and given its high potential for misuse in executing malicious code via reflection (a method that allows for the runtime loading of .NET assemblies), it is regarded with a high level of suspicion. Detected occurrences should be closely inspected to determine their nature and origin, though they are unlikely to represent false positives. This monitoring strategy is aligned with identifying malicious activities related to the execution and persistence tactics commonly associated with various forms of malware and targeted attacks, making it an essential practice for defending against advanced threats leveraging .NET assemblies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "base64 encoded .NET reflective loading of Assembly",
      "answer": "In order to detect base64 encoded .NET reflective loading of Assembly, you should: focus on monitoring process creation logs within Windows environments. Look for command line executions that contain specific base64 encoded strings which are indicative of attempts to use reflection for the loading of .NET assemblies. This technique typically involves obscure or obfuscated base64 strings that, when decoded, reference the .NET reflection methods such as `[Reflection.Assembly]::Load(` or variations thereof, often with additional obfuscation to evade simple detection mechanisms. Since this behavior is rarely found in legitimate system activity and given its high potential for misuse in executing malicious code via reflection (a method that allows for the runtime loading of .NET assemblies), it is regarded with a high level of suspicion. Detected occurrences should be closely inspected to determine their nature and origin, though they are unlikely to represent false positives. This monitoring strategy is aligned with identifying malicious activities related to the execution and persistence tactics commonly associated with various forms of malware and targeted attacks, making it an essential practice for defending against advanced threats leveraging .NET assemblies."
    }
  },
  {
    "instruction": "How can I detect: usage of wmic to start or stop a service",
    "context": "",
    "output": "In order to detect usage of wmic to start or stop a service, you should: Monitor Windows process creation logs for instances where the 'wmic.exe' is involved in initiating processes. Specifically, look for cases where the original file name is 'wmic.exe' or when the image path ends with '\\WMIC.exe'. Further refinement in detection involves examining the command line arguments used with 'wmic.exe' for patterns that include both 'service' and 'call' in any order, and additionally, whether 'stopservice' or 'startservice' commands are present. Any matching event should trigger an alert, though it is advised to be cautious of false positives, which may arise in scenarios not yet known. This method is instrumental in identifying possible malicious activities related to service manipulation, tagged under the tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of wmic to start or stop a service",
      "answer": "In order to detect usage of wmic to start or stop a service, you should: Monitor Windows process creation logs for instances where the 'wmic.exe' is involved in initiating processes. Specifically, look for cases where the original file name is 'wmic.exe' or when the image path ends with '\\WMIC.exe'. Further refinement in detection involves examining the command line arguments used with 'wmic.exe' for patterns that include both 'service' and 'call' in any order, and additionally, whether 'stopservice' or 'startservice' commands are present. Any matching event should trigger an alert, though it is advised to be cautious of false positives, which may arise in scenarios not yet known. This method is instrumental in identifying possible malicious activities related to service manipulation, tagged under the tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "How to detect: Detect indirect command execution via Program Compatibility Assistant pcwrun.exe",
    "context": "",
    "output": "In order to detect indirect command execution via Program Compatibility Assistant pcwrun.exe, you should monitor for process creation events on Windows systems where the parent process ends with '\\pcwrun.exe'. When this condition is met, it is advisable to collect additional information such as the name of the computer where the event occurred, the user account involved, the exact command line used by the parent process, and the command line of the process itself. Be aware that focusing solely on these events may lead to false positives due to legitimate uses of scripts or the necessity of applying additional analysis methods like 'unique_count' or 'filter' to identify unusual activities effectively. The severity of these findings is considered low, but they can nevertheless contribute to understanding the scope and methodology of an attack exploiting this method.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect indirect command execution via Program Compatibility Assistant pcwrun.exe",
      "answer": "In order to detect indirect command execution via Program Compatibility Assistant pcwrun.exe, you should monitor for process creation events on Windows systems where the parent process ends with '\\pcwrun.exe'. When this condition is met, it is advisable to collect additional information such as the name of the computer where the event occurred, the user account involved, the exact command line used by the parent process, and the command line of the process itself. Be aware that focusing solely on these events may lead to false positives due to legitimate uses of scripts or the necessity of applying additional analysis methods like 'unique_count' or 'filter' to identify unusual activities effectively. The severity of these findings is considered low, but they can nevertheless contribute to understanding the scope and methodology of an attack exploiting this method."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n",
    "context": "",
    "output": "In order to detect if adversaries are abusing msiexec.exe to proxy execution of malicious payloads, one should monitor process creation logs within Windows environments. Specifically, it is important to look for instances where `msiexec.exe` is executed, as this binary is a legitimate command-line utility for the Windows Installer, primarily used for handling .msi (Microsoft Installer) packages.\n\nDuring monitoring, the focus should be on the command line arguments associated with `msiexec.exe`. Attention should be given to occurrences where the command line contains either the ` /y` or ` -y` arguments. These particular arguments are significant as they may indicate an attempt to silently carry out actions, which can be a common tactic employed by adversaries to avoid detection.\n\nMoreover, to refine the detection and reduce potential false positives, certain command line patterns that are known to be used in legitimate contexts (especially by Apple-related software such as Bonjour and Apple Software Update components) should be excluded from alerts. For example, command lines explicitly involving paths to `Bonjour\\mdnsNSP.dll`, `Apple Software Update\\ScriptingObjectModel.dll`, `Apple Software Update\\SoftwareUpdateAdmin.dll`, or `Windows\\CCM\\` directories with the same `/Y` or `-Y` arguments should not trigger alerts, as these are recognized legitimate uses of `msiexec.exe`.\n\nHowever, it's crucial to understand that despite these exclusions, there might still be occasions where legitimate scripts trigger alerts, hence the categorization of such detections carries a medium level of confidence. \n\nBy closely observing the execution patterns of `msiexec.exe` with the specified criteria and excluding known legitimate patterns, security professionals can effectively identify potential abuse of this binary for executing malicious payloads. This detection strategy is aligned with understanding adversary behaviors that leverage system utilities for malicious purposes, a methodology underscored by MITRE ATT&CK tactics and techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n",
      "answer": "In order to detect if adversaries are abusing msiexec.exe to proxy execution of malicious payloads, one should monitor process creation logs within Windows environments. Specifically, it is important to look for instances where `msiexec.exe` is executed, as this binary is a legitimate command-line utility for the Windows Installer, primarily used for handling .msi (Microsoft Installer) packages.\n\nDuring monitoring, the focus should be on the command line arguments associated with `msiexec.exe`. Attention should be given to occurrences where the command line contains either the ` /y` or ` -y` arguments. These particular arguments are significant as they may indicate an attempt to silently carry out actions, which can be a common tactic employed by adversaries to avoid detection.\n\nMoreover, to refine the detection and reduce potential false positives, certain command line patterns that are known to be used in legitimate contexts (especially by Apple-related software such as Bonjour and Apple Software Update components) should be excluded from alerts. For example, command lines explicitly involving paths to `Bonjour\\mdnsNSP.dll`, `Apple Software Update\\ScriptingObjectModel.dll`, `Apple Software Update\\SoftwareUpdateAdmin.dll`, or `Windows\\CCM\\` directories with the same `/Y` or `-Y` arguments should not trigger alerts, as these are recognized legitimate uses of `msiexec.exe`.\n\nHowever, it's crucial to understand that despite these exclusions, there might still be occasions where legitimate scripts trigger alerts, hence the categorization of such detections carries a medium level of confidence. \n\nBy closely observing the execution patterns of `msiexec.exe` with the specified criteria and excluding known legitimate patterns, security professionals can effectively identify potential abuse of this binary for executing malicious payloads. This detection strategy is aligned with understanding adversary behaviors that leverage system utilities for malicious purposes, a methodology underscored by MITRE ATT&CK tactics and techniques."
    }
  },
  {
    "instruction": "How can I detect: when an ElastiCache security group has been created.",
    "context": "",
    "output": "In order to detect when an ElastiCache security group has been created, you should monitor AWS CloudTrail logs for events where a new ElastiCache security group is created. Specifically, look for the event source \"elasticache.amazonaws.com\" combined with the event name \"CreateCacheSecurityGroup.\" It's important to note that while some of these events could be flagged, not all instances are malicious. Often, a system or network administrator might legitimately create an ElastiCache security group as part of routine operations. Therefore, it's crucial to check whether the creation comes from expected users, using known user agents, or occurs from known hosts within your environment. Any creation activity from unfamiliar sources should prompt an investigation. To minimize distractions from alerts that are not actual threats, known legitimate behavior causing alerts can be configured to bypass or be exempted from monitoring under this specific criterion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an ElastiCache security group has been created.",
      "answer": "In order to detect when an ElastiCache security group has been created, you should monitor AWS CloudTrail logs for events where a new ElastiCache security group is created. Specifically, look for the event source \"elasticache.amazonaws.com\" combined with the event name \"CreateCacheSecurityGroup.\" It's important to note that while some of these events could be flagged, not all instances are malicious. Often, a system or network administrator might legitimately create an ElastiCache security group as part of routine operations. Therefore, it's crucial to check whether the creation comes from expected users, using known user agents, or occurs from known hosts within your environment. Any creation activity from unfamiliar sources should prompt an investigation. To minimize distractions from alerts that are not actual threats, known legitimate behavior causing alerts can be configured to bypass or be exempted from monitoring under this specific criterion."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious DNS queries to Monero mining pools",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious DNS queries to Monero mining pools, you should monitor DNS query logs for signs of communication with known Monero mining pool domains. Look specifically for queries that contain the following domains: 'pool.minexmr.com', 'fr.minexmr.com', 'de.minexmr.com', 'sg.minexmr.com', 'ca.minexmr.com', 'us-west.minexmr.com', 'pool.supportxmr.com', 'mine.c3pool.com', 'xmr-eu1.nanopool.org', 'xmr-eu2.nanopool.org', 'xmr-us-east1.nanopool.org', 'xmr-us-west1.nanopool.org', 'xmr-asia1.nanopool.org', 'xmr-jp1.nanopool.org', 'xmr-au1.nanopool.org', 'xmr.2miners.com', 'xmr.hashcity.org', 'xmr.f2pool.com', 'xmrpool.eu', and 'pool.hashvault.pro'. Such DNS requests could be indicative of a device within the network being compromised and utilized for mining cryptocurrencies, specifically Monero, without the user's consent. While monitoring, bear in mind that legitimate cryptocurrency mining activities may also generate similar DNS queries, so it's essential to differentiate between benign and malicious intent through investigation of flagged events. The identification of this type of activity is crucial due to its high impact potential, suggesting immediate and thorough investigation upon detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious DNS queries to Monero mining pools",
      "answer": "In order to detect suspicious DNS queries to Monero mining pools, you should monitor DNS query logs for signs of communication with known Monero mining pool domains. Look specifically for queries that contain the following domains: 'pool.minexmr.com', 'fr.minexmr.com', 'de.minexmr.com', 'sg.minexmr.com', 'ca.minexmr.com', 'us-west.minexmr.com', 'pool.supportxmr.com', 'mine.c3pool.com', 'xmr-eu1.nanopool.org', 'xmr-eu2.nanopool.org', 'xmr-us-east1.nanopool.org', 'xmr-us-west1.nanopool.org', 'xmr-asia1.nanopool.org', 'xmr-jp1.nanopool.org', 'xmr-au1.nanopool.org', 'xmr.2miners.com', 'xmr.hashcity.org', 'xmr.f2pool.com', 'xmrpool.eu', and 'pool.hashvault.pro'. Such DNS requests could be indicative of a device within the network being compromised and utilized for mining cryptocurrencies, specifically Monero, without the user's consent. While monitoring, bear in mind that legitimate cryptocurrency mining activities may also generate similar DNS queries, so it's essential to differentiate between benign and malicious intent through investigation of flagged events. The identification of this type of activity is crucial due to its high impact potential, suggesting immediate and thorough investigation upon detection."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious commands that could be related to activity that uses volume shadow copy to steal and retrieve hashes from the NTDS.dit file remotely",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious commands that could be related to activity that uses volume shadow copy to steal and retrieve hashes from the NTDS.dit file remotely, you should monitor for the execution of specific commands indicative of this type of malicious behavior. These commands include the use of `vssadmin.exe` to delete or create shadow copies, specifically targeting the C drive, and commands that attempt to copy the NTDS.dit and SAM files from shadow copies. Additionally, the use of `esentutl.exe` with arguments designed to copy or export the NTDS.dit, SAM, and SYSTEM files from shadow copies should be closely watched. This monitoring should be focused on Windows environments, particularly looking at process creation logs. \n\nThe detection of such commands being executed is a strong indicator of an attacker's attempt to access sensitive account information through volume shadow copy service (VSS). Tags associated with this kind of attack would include \"Credential Access\" and \"Persistence\", due to the typical goal of obtaining and potentially manipulating account information for ongoing access. The level of alert for these detections is considered high, given the severe implications of an attacker successfully stealing NTDS.dit hashes.\n\nAdministrative activities could potentially trigger false positives, as legitimate admin work may involve some of these commands for backup or repair purposes. It is crucial to evaluate the context in which these commands are executed, including the parent command line processes, to effectively differentiate between malicious activity and legitimate administrative tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious commands that could be related to activity that uses volume shadow copy to steal and retrieve hashes from the NTDS.dit file remotely",
      "answer": "In order to detect suspicious commands that could be related to activity that uses volume shadow copy to steal and retrieve hashes from the NTDS.dit file remotely, you should monitor for the execution of specific commands indicative of this type of malicious behavior. These commands include the use of `vssadmin.exe` to delete or create shadow copies, specifically targeting the C drive, and commands that attempt to copy the NTDS.dit and SAM files from shadow copies. Additionally, the use of `esentutl.exe` with arguments designed to copy or export the NTDS.dit, SAM, and SYSTEM files from shadow copies should be closely watched. This monitoring should be focused on Windows environments, particularly looking at process creation logs. \n\nThe detection of such commands being executed is a strong indicator of an attacker's attempt to access sensitive account information through volume shadow copy service (VSS). Tags associated with this kind of attack would include \"Credential Access\" and \"Persistence\", due to the typical goal of obtaining and potentially manipulating account information for ongoing access. The level of alert for these detections is considered high, given the severe implications of an attacker successfully stealing NTDS.dit hashes.\n\nAdministrative activities could potentially trigger false positives, as legitimate admin work may involve some of these commands for backup or repair purposes. It is crucial to evaluate the context in which these commands are executed, including the parent command line processes, to effectively differentiate between malicious activity and legitimate administrative tasks."
    }
  },
  {
    "instruction": "How to detect: doas tool execution in linux host platform. This utility tool allow standard users to perform tasks as root, the same way sudo does.",
    "context": "",
    "output": "In order to detect the doas tool execution in Linux host platform, which allows standard users to perform tasks as root in a similar manner to sudo, you should focus on monitoring process creation logs on Linux systems. Specifically, look for instances where the process image name ends with '/doas'. This action is a clear indication that the doas tool is being executed. Given the nature of doas, false positives are considered unlikely. However, the severity of this detection is considered low, suggesting that while it's important to track, it might not always indicate a malicious activity on its own.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "doas tool execution in linux host platform. This utility tool allow standard users to perform tasks as root, the same way sudo does.",
      "answer": "In order to detect the doas tool execution in Linux host platform, which allows standard users to perform tasks as root in a similar manner to sudo, you should focus on monitoring process creation logs on Linux systems. Specifically, look for instances where the process image name ends with '/doas'. This action is a clear indication that the doas tool is being executed. Given the nature of doas, false positives are considered unlikely. However, the severity of this detection is considered low, suggesting that while it's important to track, it might not always indicate a malicious activity on its own."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Commandlet names from ShellIntel exploitation scripts.",
    "context": "",
    "output": "In order to detect Commandlet names from ShellIntel exploitation scripts, you should: focus on monitoring Windows PowerShell scripts, ensuring that Script Block Logging is enabled to capture the necessary data. Specifically, lookout for the presence of any of the following commandlet names within the script blocks: 'Invoke-SMBAutoBrute', 'Invoke-GPOLinks', and 'Invoke-Potato'. These particular commandlets indicate a high likelihood of malicious activity related to exploitation techniques. It's important to understand that these detections are highly indicative of compromise or attack attempts, although false positives are considered unknown. This highlights the necessity for immediate investigation upon detection to mitigate potential threats effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Commandlet names from ShellIntel exploitation scripts.",
      "answer": "In order to detect Commandlet names from ShellIntel exploitation scripts, you should: focus on monitoring Windows PowerShell scripts, ensuring that Script Block Logging is enabled to capture the necessary data. Specifically, lookout for the presence of any of the following commandlet names within the script blocks: 'Invoke-SMBAutoBrute', 'Invoke-GPOLinks', and 'Invoke-Potato'. These particular commandlets indicate a high likelihood of malicious activity related to exploitation techniques. It's important to understand that these detections are highly indicative of compromise or attack attempts, although false positives are considered unknown. This highlights the necessity for immediate investigation upon detection to mitigate potential threats effectively."
    }
  },
  {
    "instruction": "How can I detect: when the a stored procedure is set or cleared for automatic execution in MSSQL. A stored procedure that is set to automatic execution runs every time an instance of SQL Server is started",
    "context": "",
    "output": "In order to detect when a stored procedure is set or cleared for automatic execution in MSSQL, which signifies a stored procedure that is set to automatic execution runs every time an instance of SQL Server is started, you should: Monitor application logs from Windows systems, specifically focusing on MSSQL audit policies. Ensure that audit policy for monitoring 'sp_procoption' is enabled to capture relevant events in the application log. Look for log entries with the Provider Name set to 'MSSQLSERVER' and an EventID of 33205. These specific entries indicate the occurrence of an event related to automatic execution of stored procedures. The detection should zero in on log data containing references to 'object_name:sp_procoption' along with 'statement:EXEC', which highlights the execution of the stored procedure. It is important to consider the potential for false positives, which may arise from legitimate administrative actions utilizing this feature, though such occurrences are rare. Due to the sensitivity and high impact of automated execution of stored procedures in a SQL Server environment, any detection of such activity should be treated with a high level of scrutiny. Tags associated with this kind of monitoring are Persistence, Privilege Escalation, and Initial Access, as setting a stored procedure to run automatically can serve as a method for attackers to maintain persistence, elevate privileges, or gain initial access to a system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when the a stored procedure is set or cleared for automatic execution in MSSQL. A stored procedure that is set to automatic execution runs every time an instance of SQL Server is started",
      "answer": "In order to detect when a stored procedure is set or cleared for automatic execution in MSSQL, which signifies a stored procedure that is set to automatic execution runs every time an instance of SQL Server is started, you should: Monitor application logs from Windows systems, specifically focusing on MSSQL audit policies. Ensure that audit policy for monitoring 'sp_procoption' is enabled to capture relevant events in the application log. Look for log entries with the Provider Name set to 'MSSQLSERVER' and an EventID of 33205. These specific entries indicate the occurrence of an event related to automatic execution of stored procedures. The detection should zero in on log data containing references to 'object_name:sp_procoption' along with 'statement:EXEC', which highlights the execution of the stored procedure. It is important to consider the potential for false positives, which may arise from legitimate administrative actions utilizing this feature, though such occurrences are rare. Due to the sensitivity and high impact of automated execution of stored procedures in a SQL Server environment, any detection of such activity should be treated with a high level of scrutiny. Tags associated with this kind of monitoring are Persistence, Privilege Escalation, and Initial Access, as setting a stored procedure to run automatically can serve as a method for attackers to maintain persistence, elevate privileges, or gain initial access to a system."
    }
  },
  {
    "instruction": "Can you explain how to detect: dotnet.exe will execute any DLL and execute unsigned code",
    "context": "",
    "output": "Certainly!\n\nIn order to detect instances where dotnet.exe will execute any DLL and execute unsigned code, you should monitor process creation events on Windows systems. Focus specifically on processes where the image name ends with '\\dotnet.exe' or the original file name is identified as '.NET Host'. Additionally, pay attention to command-line parameters that end with either '.dll' or '.csproj', as these are indicative of attempts to execute code in this manner. Ensure to capture relevant details such as the computer name, the user involved, the command line used for execution, and the parent command line if available. It is important to note that system administrator activities might generate similar patterns, thus should be considered as potential false positives. The severity level for these detections is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "dotnet.exe will execute any DLL and execute unsigned code",
      "answer": "In order to detect instances where dotnet.exe will execute any DLL and execute unsigned code, you should monitor process creation events on Windows systems. Focus specifically on processes where the image name ends with '\\dotnet.exe' or the original file name is identified as '.NET Host'. Additionally, pay attention to command-line parameters that end with either '.dll' or '.csproj', as these are indicative of attempts to execute code in this manner. Ensure to capture relevant details such as the computer name, the user involved, the command line used for execution, and the parent command line if available. It is important to note that system administrator activities might generate similar patterns, thus should be considered as potential false positives. The severity level for these detections is considered medium."
    }
  },
  {
    "instruction": "How to detect: scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket.",
    "context": "",
    "output": "In order to detect scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket, you should: Look for events generated by the OpenSSH service on Windows systems specifically monitoring the logs that come from the service named openssh. Focus particularly on events with an EventID of 4, which signify in this context that the OpenSSH server (sshd) has initiated and is now listening for incoming connections. This is identified by log entries where the payload field begins with the text 'Server listening on '. It's crucial to be aware that there can be legitimate reasons for these events, such as administrator activity setting up the service. These detections are flagged with a medium alert level, indicating a noteworthy but not definitively malicious activity on its own. Recognizing these activities involves understanding their relationship with potential attack methods, specifically those that relate to enabling unauthorized access or command and control capabilities through the SSH protocol.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket.",
      "answer": "In order to detect scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket, you should: Look for events generated by the OpenSSH service on Windows systems specifically monitoring the logs that come from the service named openssh. Focus particularly on events with an EventID of 4, which signify in this context that the OpenSSH server (sshd) has initiated and is now listening for incoming connections. This is identified by log entries where the payload field begins with the text 'Server listening on '. It's crucial to be aware that there can be legitimate reasons for these events, such as administrator activity setting up the service. These detections are flagged with a medium alert level, indicating a noteworthy but not definitively malicious activity on its own. Recognizing these activities involves understanding their relationship with potential attack methods, specifically those that relate to enabling unauthorized access or command and control capabilities through the SSH protocol."
    }
  },
  {
    "instruction": "How can I detect: Rule to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log",
    "context": "",
    "output": "In order to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log, you should focus on monitoring the log data coming from Windows servers that are running the MS Exchange Management service. Look specifically for instances where the actions or commands involve 'Set-OabVirtualDirectory', 'ExternalUrl', 'Page_Load', or 'script'. These keywords are vital because they can indicate that an adversary is attempting to inject or modify the External URL property of an OabVirtualDirectory with a script, which could be malicious. This activity is crucial to monitor as it has been tagged with tactics and techniques that suggest manipulation of web properties to control server behaviors or to distribute malicious codes. The severity of these actions is considered high, and while there might be cases where these keywords appear in non-malicious contexts, those instances are unknown or rare. Thus, any detection of these keywords in relation to the MS Exchange Management service should be taken seriously and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Rule to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log",
      "answer": "In order to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log, you should focus on monitoring the log data coming from Windows servers that are running the MS Exchange Management service. Look specifically for instances where the actions or commands involve 'Set-OabVirtualDirectory', 'ExternalUrl', 'Page_Load', or 'script'. These keywords are vital because they can indicate that an adversary is attempting to inject or modify the External URL property of an OabVirtualDirectory with a script, which could be malicious. This activity is crucial to monitor as it has been tagged with tactics and techniques that suggest manipulation of web properties to control server behaviors or to distribute malicious codes. The severity of these actions is considered high, and while there might be cases where these keywords appear in non-malicious contexts, those instances are unknown or rare. Thus, any detection of these keywords in relation to the MS Exchange Management service should be taken seriously and investigated promptly."
    }
  },
  {
    "instruction": "Can you explain how to detect: when an API access service account is granted domain authority.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when an API access service account is granted domain authority, you should: Monitor logs from Google Workspace, specifically focusing on the admin service within Google Workspace products. Look for events where the service is identified as 'admin.googleapis.com' and the event name is 'AUTHORIZE_API_CLIENT_ACCESS'. This indicates that a service account has been granted access with domain-wide authority, which could pose a security risk if not intended. This activity is particularly of interest as it relates to techniques associated with Persistence, Privilege Escalation, and Initial Access by allowing potentially malicious actors to maintain their foothold, escalate privileges, or gain initial access through the misuse of API service accounts within a domain. Keep in mind that there might be legitimate cases where this activity is unknown or not documented, thus considered as potential false positives. The level of concern for such detections is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an API access service account is granted domain authority.",
      "answer": "In order to detect when an API access service account is granted domain authority, you should: Monitor logs from Google Workspace, specifically focusing on the admin service within Google Workspace products. Look for events where the service is identified as 'admin.googleapis.com' and the event name is 'AUTHORIZE_API_CLIENT_ACCESS'. This indicates that a service account has been granted access with domain-wide authority, which could pose a security risk if not intended. This activity is particularly of interest as it relates to techniques associated with Persistence, Privilege Escalation, and Initial Access by allowing potentially malicious actors to maintain their foothold, escalate privileges, or gain initial access through the misuse of API service accounts within a domain. Keep in mind that there might be legitimate cases where this activity is unknown or not documented, thus considered as potential false positives. The level of concern for such detections is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: exploitation of the TerraMaster TOS vulnerability described in CVE-2020-28188",
    "context": "",
    "output": "Sure!\nIn order to detect the exploitation of the TerraMaster TOS vulnerability described in CVE-2020-28188, you should: Focus on monitoring web server logs for specific indicators of compromise. The key aspect to look for is HTTP GET requests made to the '/include/makecvs.php' page which also include '?Event=' in the query string. Additionally, the presence of certain keywords in the query parameters, such as 'curl', 'wget', '.py', '.sh', 'chmod', and '_GET', strengthens the suspicion of an attack. These indicators suggest an adversary is attempting to exploit the vulnerability to execute arbitrary commands or scripts on the webserver. The logs from the webserver should be thoroughly examined for entries that combine these signs. Capture the client IP (c-ip) and DNS (c-dns) information as it could be crucial for the investigation. Note that the confidence level in this detection rule is high, even though there might be unknown cases leading to false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of the TerraMaster TOS vulnerability described in CVE-2020-28188",
      "answer": "In order to detect the exploitation of the TerraMaster TOS vulnerability described in CVE-2020-28188, you should: Focus on monitoring web server logs for specific indicators of compromise. The key aspect to look for is HTTP GET requests made to the '/include/makecvs.php' page which also include '?Event=' in the query string. Additionally, the presence of certain keywords in the query parameters, such as 'curl', 'wget', '.py', '.sh', 'chmod', and '_GET', strengthens the suspicion of an attack. These indicators suggest an adversary is attempting to exploit the vulnerability to execute arbitrary commands or scripts on the webserver. The logs from the webserver should be thoroughly examined for entries that combine these signs. Capture the client IP (c-ip) and DNS (c-dns) information as it could be crucial for the investigation. Note that the confidence level in this detection rule is high, even though there might be unknown cases leading to false positives."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of grep to discover specific files created by the GobRAT malware",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of grep to discover specific files created by the GobRAT malware, you should: look for the creation of processes on Linux systems where the image name ends with '/grep'. Specifically, focus on instances where the command line contains any of the following strings: 'apached', 'frpc', 'sshd.sh', 'zone.arm'. These are indicative of an attempt to locate files associated with the GobRAT malware. Since this detection is labeled as high level, it suggests a strong indication of malicious activity, although it's important to consider that there could be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of grep to discover specific files created by the GobRAT malware",
      "answer": "In order to detect the use of grep to discover specific files created by the GobRAT malware, you should: look for the creation of processes on Linux systems where the image name ends with '/grep'. Specifically, focus on instances where the command line contains any of the following strings: 'apached', 'frpc', 'sshd.sh', 'zone.arm'. These are indicative of an attempt to locate files associated with the GobRAT malware. Since this detection is labeled as high level, it suggests a strong indication of malicious activity, although it's important to consider that there could be unknown false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: exploitation attempts using Pulse Connect Secure(PCS) vulnerability (CVE-2021-22893)",
    "context": "",
    "output": "Sure!\nIn order to detect exploitation attempts using Pulse Connect Secure (PCS) vulnerability (CVE-2021-22893), you should monitor your web server's logs for specific patterns in the query strings of URIs. Look for URIs containing '/dana-na/auth/', '/dana-ws/', '/dana-cached/', which are indicative of accessing different components of the PCS. Additionally, keep an eye out for query parameters such as '?id=', '?token=', 'Secid_canceltoken.cgi', 'CGI::param', 'meeting', 'smb', 'namedusers', and 'metric'. These parameters often appear in malicious queries attempting to exploit the PCS vulnerability. Both sets of patterns need to be present in the logs for an alert to be generated. Be aware that vulnerability scanning activities might also trigger these alerts even if an actual attack is not taking place, so these instances should be considered when evaluating alerts. This detection is important for maintaining the integrity of the PCS and ensuring it is not compromised by attackers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempts using Pulse Connect Secure(PCS) vulnerability (CVE-2021-22893)",
      "answer": "In order to detect exploitation attempts using Pulse Connect Secure (PCS) vulnerability (CVE-2021-22893), you should monitor your web server's logs for specific patterns in the query strings of URIs. Look for URIs containing '/dana-na/auth/', '/dana-ws/', '/dana-cached/', which are indicative of accessing different components of the PCS. Additionally, keep an eye out for query parameters such as '?id=', '?token=', 'Secid_canceltoken.cgi', 'CGI::param', 'meeting', 'smb', 'namedusers', and 'metric'. These parameters often appear in malicious queries attempting to exploit the PCS vulnerability. Both sets of patterns need to be present in the logs for an alert to be generated. Be aware that vulnerability scanning activities might also trigger these alerts even if an actual attack is not taking place, so these instances should be considered when evaluating alerts. This detection is important for maintaining the integrity of the PCS and ensuring it is not compromised by attackers."
    }
  },
  {
    "instruction": "Please help me detect the following: an svchost process spawning an instance of an office application. This happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc.\nThis can be used by malicious actors to create malicious Office documents with macros on the fly. (See vba2clr project in the references)\n",
    "context": "",
    "output": "Sure!\nIn order to detect an svchost process spawning an instance of an office application, which happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc., a method used by malicious actors to create malicious Office documents with macros on the fly, you should: Monitor the creation of processes on Windows systems, focusing on spotting instances where the 'svchost.exe' process, a legitimate Windows service host, is the parent process for launching office applications such as Word (winword.exe), Excel (excel.exe), PowerPoint (powerpnt.exe), Access (msaccess.exe), Publisher (mspub.exe), Equation Editor (eqnedt32.exe), or Visio (visio.exe). This activity is suspicious because 'svchost.exe' typically does not directly start Office applications, suggesting an abnormal use possibly tied to automation scripts. Be aware, however, that there can be benign instances where scripts or legitimate automated tasks do exactly this for office automation purposes, which are considered as potential false positives. The severity level for these observations is classified as medium, indicating a noteworthy but not definitive indication of malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an svchost process spawning an instance of an office application. This happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc.\nThis can be used by malicious actors to create malicious Office documents with macros on the fly. (See vba2clr project in the references)\n",
      "answer": "In order to detect an svchost process spawning an instance of an office application, which happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc., a method used by malicious actors to create malicious Office documents with macros on the fly, you should: Monitor the creation of processes on Windows systems, focusing on spotting instances where the 'svchost.exe' process, a legitimate Windows service host, is the parent process for launching office applications such as Word (winword.exe), Excel (excel.exe), PowerPoint (powerpnt.exe), Access (msaccess.exe), Publisher (mspub.exe), Equation Editor (eqnedt32.exe), or Visio (visio.exe). This activity is suspicious because 'svchost.exe' typically does not directly start Office applications, suggesting an abnormal use possibly tied to automation scripts. Be aware, however, that there can be benign instances where scripts or legitimate automated tasks do exactly this for office automation purposes, which are considered as potential false positives. The severity level for these observations is classified as medium, indicating a noteworthy but not definitive indication of malicious activity."
    }
  },
  {
    "instruction": "Explain how should I detect the following: PowerShell core DLL being loaded by an Office Product",
    "context": "",
    "output": "In order to detect PowerShell core DLL being loaded by an Office Product, you should monitor for the loading of specific images in Windows. This entails tracking when any of the main Office applications, such as Excel, Microsoft Publisher, Outlook, OneNote (including a specific variant labeled 'onenoteim' for completeness), PowerPoint, and Word, loads images. The detection hinges on identifying when these applications load either 'System.Management.Automation.Dll' or 'System.Management.Automation.ni.Dll,' which are core components of PowerShell. This activity is noteworthy as it could suggest an attempt to execute PowerShell commands or scripts in a manner that leverages Office products, possibly for malicious purposes. The monitoring for such behavior is set at a medium level of concern due to the potential for false positives, which are currently unspecified but could arise from legitimate uses of PowerShell functionalities within these Office applications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell core DLL being loaded by an Office Product",
      "answer": "In order to detect PowerShell core DLL being loaded by an Office Product, you should monitor for the loading of specific images in Windows. This entails tracking when any of the main Office applications, such as Excel, Microsoft Publisher, Outlook, OneNote (including a specific variant labeled 'onenoteim' for completeness), PowerPoint, and Word, loads images. The detection hinges on identifying when these applications load either 'System.Management.Automation.Dll' or 'System.Management.Automation.ni.Dll,' which are core components of PowerShell. This activity is noteworthy as it could suggest an attempt to execute PowerShell commands or scripts in a manner that leverages Office products, possibly for malicious purposes. The monitoring for such behavior is set at a medium level of concern due to the potential for false positives, which are currently unspecified but could arise from legitimate uses of PowerShell functionalities within these Office applications."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious processes based on name and location that access the Windows Data Protection API Master keys.\nWhich can be a sign of credential stealing. Example case would be usage of mimikatz \"dpapi::masterkey\" function\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious processes based on name and location that access the Windows Data Protection API Master keys, which can be a sign of credential stealing such as the usage of Mimikatz \"dpapi::masterkey\" function, you should:\n\nMonitor file access activities on Windows systems specifically looking for access to paths containing '\\Microsoft\\Protect\\S-1-5-18\\' (which pertains to System32) or '\\Microsoft\\Protect\\S-1-5-21-' (which pertains to Users). This requires the Microsoft-Windows-Kernel-File ETW provider to be active for accuracy. Furthermore, it's critical to exclude from alerts any file access activities within typical system folders including 'C:\\Program Files\\', 'C:\\Program Files (x86)\\', 'C:\\Windows\\system32\\', and 'C:\\Windows\\SysWOW64\\' to minimize false positive detections. The reasoning behind this exclusion is that these folders are common locations for legitimate system processes, and the monitoring aims to pinpoint anomalous or unauthorized access to critical Windows Data Protection API keys, which might indicate an attempt at credential theft.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious processes based on name and location that access the Windows Data Protection API Master keys.\nWhich can be a sign of credential stealing. Example case would be usage of mimikatz \"dpapi::masterkey\" function\n",
      "answer": "In order to detect suspicious processes based on name and location that access the Windows Data Protection API Master keys, which can be a sign of credential stealing such as the usage of Mimikatz \"dpapi::masterkey\" function, you should:\n\nMonitor file access activities on Windows systems specifically looking for access to paths containing '\\Microsoft\\Protect\\S-1-5-18\\' (which pertains to System32) or '\\Microsoft\\Protect\\S-1-5-21-' (which pertains to Users). This requires the Microsoft-Windows-Kernel-File ETW provider to be active for accuracy. Furthermore, it's critical to exclude from alerts any file access activities within typical system folders including 'C:\\Program Files\\', 'C:\\Program Files (x86)\\', 'C:\\Windows\\system32\\', and 'C:\\Windows\\SysWOW64\\' to minimize false positive detections. The reasoning behind this exclusion is that these folders are common locations for legitimate system processes, and the monitoring aims to pinpoint anomalous or unauthorized access to critical Windows Data Protection API keys, which might indicate an attempt at credential theft."
    }
  },
  {
    "instruction": "Can you explain how to detect: Microsoft Excel loading an Add-In (.xll) file from an uncommon location",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Microsoft Excel loading an Add-In (.xll) file from an uncommon location, you should: monitor Windows system image load events, specifically focusing on instances where the Excel application (`excel.exe`) loads an image. Pay particular attention to .xll file types being loaded from locations that are not typically used for legitimate purposes. These locations include but are not limited to user Desktops, Downloads folders, Perflogs, Temp directories, the Users\\Public folder, and the Windows\\Tasks directory. The detection strategy involves verifying that the action corresponds to an Excel process initiating an .xll file from any of these uncommon directories. It's important to note that depending on organizational policies and the specific environment, you might need to adjust which directories are monitored or excluded to minimize false positives and ensure accurate detection. This strategy is set at a medium level of urgency, indicating while it is significant, it may require validation considering potential benign activities mimicking this behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Excel loading an Add-In (.xll) file from an uncommon location",
      "answer": "In order to detect Microsoft Excel loading an Add-In (.xll) file from an uncommon location, you should: monitor Windows system image load events, specifically focusing on instances where the Excel application (`excel.exe`) loads an image. Pay particular attention to .xll file types being loaded from locations that are not typically used for legitimate purposes. These locations include but are not limited to user Desktops, Downloads folders, Perflogs, Temp directories, the Users\\Public folder, and the Windows\\Tasks directory. The detection strategy involves verifying that the action corresponds to an Excel process initiating an .xll file from any of these uncommon directories. It's important to note that depending on organizational policies and the specific environment, you might need to adjust which directories are monitored or excluded to minimize false positives and ensure accurate detection. This strategy is set at a medium level of urgency, indicating while it is significant, it may require validation considering potential benign activities mimicking this behavior."
    }
  },
  {
    "instruction": "How can I detect: when an attacker tries to backdoor the MSSQL server by adding a backdoor account to the sysadmin fixed server role",
    "context": "",
    "output": "In order to detect when an attacker tries to backdoor the MSSQL server by adding a backdoor account to the sysadmin fixed server role, you should: Monitor Windows application logs specifically for events generated by MSSQLSERVER with the EventID 33205. This event ID is crucial as it indicates changes being made to the sysadmin fixed server role within the MSSQL server environment. You must look for modifications that include the addition of members to the sysadmin role, particularly focusing on the presence of phrases 'object_name:sysadmin' and 'statement:alter server role [sysadmin] add member' within the event data. This kind of activity is indicative of potential malicious behavior, where an attacker attempts to grant administrative privileges to a backdoor account, thereby gaining high-level access to the database system. \n\nTake into account that while this behavior might rarely coincide with legitimate administrative modifications, such events generally represent a high threat level and warrant immediate investigation. The detection of these specific event characteristics aids in identifying suspicious alterations to critical server roles, aligning with tactics and techniques that involve elevation of privilege and manipulation of database roles for unauthorized access or persistence within a targeted system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker tries to backdoor the MSSQL server by adding a backdoor account to the sysadmin fixed server role",
      "answer": "In order to detect when an attacker tries to backdoor the MSSQL server by adding a backdoor account to the sysadmin fixed server role, you should: Monitor Windows application logs specifically for events generated by MSSQLSERVER with the EventID 33205. This event ID is crucial as it indicates changes being made to the sysadmin fixed server role within the MSSQL server environment. You must look for modifications that include the addition of members to the sysadmin role, particularly focusing on the presence of phrases 'object_name:sysadmin' and 'statement:alter server role [sysadmin] add member' within the event data. This kind of activity is indicative of potential malicious behavior, where an attacker attempts to grant administrative privileges to a backdoor account, thereby gaining high-level access to the database system. \n\nTake into account that while this behavior might rarely coincide with legitimate administrative modifications, such events generally represent a high threat level and warrant immediate investigation. The detection of these specific event characteristics aids in identifying suspicious alterations to critical server roles, aligning with tactics and techniques that involve elevation of privilege and manipulation of database roles for unauthorized access or persistence within a targeted system."
    }
  },
  {
    "instruction": "Please help me detect the following: potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\"",
    "context": "",
    "output": "Sure!\nIn order to detect potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\", you should: Monitor Windows image load events to identify instances where \"libvlc.dll\" is loaded outside the standard VLC installation paths. Specifically, look for events where a process has loaded \"libvlc.dll\" but ensure it is not loaded from either \"C:\\Program Files (x86)\\VideoLAN\\VLC\\\" or \"C:\\Program Files\\VideoLAN\\VLC\\\" directories. Be aware that false alerts may occur if the VLC media player is installed in a non-standard directory. This approach aims at spotting malicious activities where attackers might attempt to misuse \"libvlc.dll\" for nefarious purposes, leveraging DLL sideloading techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\"",
      "answer": "In order to detect potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\", you should: Monitor Windows image load events to identify instances where \"libvlc.dll\" is loaded outside the standard VLC installation paths. Specifically, look for events where a process has loaded \"libvlc.dll\" but ensure it is not loaded from either \"C:\\Program Files (x86)\\VideoLAN\\VLC\\\" or \"C:\\Program Files\\VideoLAN\\VLC\\\" directories. Be aware that false alerts may occur if the VLC media player is installed in a non-standard directory. This approach aims at spotting malicious activities where attackers might attempt to misuse \"libvlc.dll\" for nefarious purposes, leveraging DLL sideloading techniques."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of cmdkey to add generic credentials. As an example, this has to be used before connecting to an RDP session via command line interface.",
    "context": "",
    "output": "Sure!\nIn order to detect usage of cmdkey to add generic credentials, which is a common preparation step before connecting to an RDP session via command line interface, you should: Monitor for process creation events on Windows systems, specifically looking for the execution of 'cmdkey.exe'. Pay close attention when the command line for 'cmdkey.exe' includes the parameters '/g' (generic credential), '/u' (user), and '/p' (password). This unusual combination of parameters suggests an attempt to add generic credentials, and while it can be a legitimate administrative action, it could also indicate malicious activity aiming to establish persistence or facilitate lateral movement within a network. It's critical to evaluate these incidents in the context of other related activity on the system to distinguish between benign and suspicious uses.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of cmdkey to add generic credentials. As an example, this has to be used before connecting to an RDP session via command line interface.",
      "answer": "In order to detect usage of cmdkey to add generic credentials, which is a common preparation step before connecting to an RDP session via command line interface, you should: Monitor for process creation events on Windows systems, specifically looking for the execution of 'cmdkey.exe'. Pay close attention when the command line for 'cmdkey.exe' includes the parameters '/g' (generic credential), '/u' (user), and '/p' (password). This unusual combination of parameters suggests an attempt to add generic credentials, and while it can be a legitimate administrative action, it could also indicate malicious activity aiming to establish persistence or facilitate lateral movement within a network. It's critical to evaluate these incidents in the context of other related activity on the system to distinguish between benign and suspicious uses."
    }
  },
  {
    "instruction": "How to detect: new cloudshell is created inside of Azure portal.",
    "context": "",
    "output": "In order to identify when a new cloudshell is created inside of Azure portal, you should focus on monitoring activity logs within the Azure environment. This involves looking for events where the operation named \"MICROSOFT.PORTAL/CONSOLES/WRITE\" occurs. Such an operation is indicative of the creation of a new cloudshell instance within the Azure portal. However, it's important to remember that there could be legitimate reasons for this activity, such as a system administrator creating a new cloudshell for valid administrative purposes. Therefore, while detecting this activity is done at a medium level of alertness, the occurrence of false positives, including those caused by actions of system administrators, should be taken into account when assessing these events.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "new cloudshell is created inside of Azure portal.",
      "answer": "In order to identify when a new cloudshell is created inside of Azure portal, you should focus on monitoring activity logs within the Azure environment. This involves looking for events where the operation named \"MICROSOFT.PORTAL/CONSOLES/WRITE\" occurs. Such an operation is indicative of the creation of a new cloudshell instance within the Azure portal. However, it's important to remember that there could be legitimate reasons for this activity, such as a system administrator creating a new cloudshell for valid administrative purposes. Therefore, while detecting this activity is done at a medium level of alertness, the occurrence of false positives, including those caused by actions of system administrators, should be taken into account when assessing these events."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Obfuscated Powershell via COMPRESS OBFUSCATION",
    "context": "",
    "output": "In order to detect obfuscated Powershell via COMPRESS OBFUSCATION, you should: monitor PowerShell script activity on Windows systems by focusing on script block logs. This detection method requires that Script Block Logging is enabled to effectively capture the necessary data. Look for scripts that use the \"new-object\" command in combination with ASCII text encoding through \"text.encoding]::ascii\". Moreover, any scripts employing both \"system.io.compression.deflatestream\" and \"system.io.streamreader\" should attract attention. Additionally, scripts that end with the \"readtoend\" method are particularly suspect. These characteristics are indicative of attempts to use compressed obfuscation techniques within PowerShell, a method attackers leverage to hide malicious code within scripts. It's essential to note that while this detection strategy is robust, it may produce unknown false positives. The alert level for this detection is set to medium, suggesting a balanced approach to the responsiveness required upon detection. This monitoring strategy is relevant to identifying tactics and techniques such as Execution, Defense Evasion, and Command and Control within the context of cyber threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via COMPRESS OBFUSCATION",
      "answer": "In order to detect obfuscated Powershell via COMPRESS OBFUSCATION, you should: monitor PowerShell script activity on Windows systems by focusing on script block logs. This detection method requires that Script Block Logging is enabled to effectively capture the necessary data. Look for scripts that use the \"new-object\" command in combination with ASCII text encoding through \"text.encoding]::ascii\". Moreover, any scripts employing both \"system.io.compression.deflatestream\" and \"system.io.streamreader\" should attract attention. Additionally, scripts that end with the \"readtoend\" method are particularly suspect. These characteristics are indicative of attempts to use compressed obfuscation techniques within PowerShell, a method attackers leverage to hide malicious code within scripts. It's essential to note that while this detection strategy is robust, it may produce unknown false positives. The alert level for this detection is set to medium, suggesting a balanced approach to the responsiveness required upon detection. This monitoring strategy is relevant to identifying tactics and techniques such as Execution, Defense Evasion, and Command and Control within the context of cyber threats."
    }
  },
  {
    "instruction": "Can you explain how to detect: registry changes to Office macro settings. The TrustRecords contain information on executed macro-enabled documents. (see references)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect registry changes to Office macro settings. The TrustRecords contain information on executed macro-enabled documents, you should: Focus on monitoring Windows Registry Set operations that involve changes to Office macro settings. Key areas of interest include the registry keys ending with '\\Security\\Trusted Documents\\TrustRecords', '\\Security\\AccessVBOM', and '\\Security\\VBAWarnings'. These specific paths are significant because they hold configurations related to how Office applications handle macros, which are frequently exploited by attackers to execute malicious code. When an EventType of 'Setvalue' is observed modifying these registry keys, it might indicate an attempt to alter security settings to either enable macros without proper warnings or trust documents that should not be trusted. It's important to note that while modifications to these keys can be indicative of suspicious activity, there are legitimate scenarios where they might be altered, such as when enabling valid macros for internal documents. Therefore, while this activity is flagged at a high level due to its potential security implications, the presence of valid business reasons for such changes is considered as possible false positives in this detection strategy. The tags associated with this monitoring strategy include Tactics and Techniques such as Persistence, Privilege Escalation, and Execution through the use of Microsoft Office macros.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registry changes to Office macro settings. The TrustRecords contain information on executed macro-enabled documents. (see references)",
      "answer": "In order to detect registry changes to Office macro settings. The TrustRecords contain information on executed macro-enabled documents, you should: Focus on monitoring Windows Registry Set operations that involve changes to Office macro settings. Key areas of interest include the registry keys ending with '\\Security\\Trusted Documents\\TrustRecords', '\\Security\\AccessVBOM', and '\\Security\\VBAWarnings'. These specific paths are significant because they hold configurations related to how Office applications handle macros, which are frequently exploited by attackers to execute malicious code. When an EventType of 'Setvalue' is observed modifying these registry keys, it might indicate an attempt to alter security settings to either enable macros without proper warnings or trust documents that should not be trusted. It's important to note that while modifications to these keys can be indicative of suspicious activity, there are legitimate scenarios where they might be altered, such as when enabling valid macros for internal documents. Therefore, while this activity is flagged at a high level due to its potential security implications, the presence of valid business reasons for such changes is considered as possible false positives in this detection strategy. The tags associated with this monitoring strategy include Tactics and Techniques such as Persistence, Privilege Escalation, and Execution through the use of Microsoft Office macros."
    }
  },
  {
    "instruction": "Explain how should I detect the following: any registry event that targets the key 'SECURITY\\Policy\\Secrets\\n' which is a key related to SNAKE malware as described by CISA",
    "context": "",
    "output": "In order to detect any registry event that targets the key 'SECURITY\\Policy\\Secrets\\n' which is a key related to SNAKE malware as described by CISA, you should: Monitor the registry events within Windows systems for any activity that specifically targets the 'SECURITY\\Policy\\Secrets\\n' registry key. This key interaction is an indicator of potential infiltration or operation related to the SNAKE malware. Such monitoring is crucial due to the high level of threat posed by modifications to this part of the registry, often indicative of malicious attempts to access or manipulate sensitive policy secrets within the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "any registry event that targets the key 'SECURITY\\Policy\\Secrets\\n' which is a key related to SNAKE malware as described by CISA",
      "answer": "In order to detect any registry event that targets the key 'SECURITY\\Policy\\Secrets\\n' which is a key related to SNAKE malware as described by CISA, you should: Monitor the registry events within Windows systems for any activity that specifically targets the 'SECURITY\\Policy\\Secrets\\n' registry key. This key interaction is an indicator of potential infiltration or operation related to the SNAKE malware. Such monitoring is crucial due to the high level of threat posed by modifications to this part of the registry, often indicative of malicious attempts to access or manipulate sensitive policy secrets within the system."
    }
  },
  {
    "instruction": "Can you explain how to detect: Open a handle on the drive volume via the \\\\.\\ DOS device path specifier and perform direct access read of the first few bytes of the volume.",
    "context": "",
    "output": "Certainly!\n\nIn order to open a handle on the drive volume via the \\\\.\\ DOS device path specifier and perform direct access read of the first few bytes of the volume, you should: Monitor PowerShell scripts for specific behavior patterns that are indicative of this attack method. Specifically, look for scripts that contain the PowerShell cmdlet `New-Object` in conjunction with the use of `IO.FileStream` and the DOS device path specifier `\\\\.\\` within their code. This suggests that the script is attempting to directly interact with a drive volume, which could be a part of malicious activity aiming to read or modify the disk at a low level. It is essential to have Script Block Logging enabled on Windows systems to detect such activities. Be mindful, however, that some legitimate PowerShell scripts might also use these patterns for valid purposes, so consider these instances as potential false positives. The risk level associated with this behavior is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Open a handle on the drive volume via the \\\\.\\ DOS device path specifier and perform direct access read of the first few bytes of the volume.",
      "answer": "In order to open a handle on the drive volume via the \\\\.\\ DOS device path specifier and perform direct access read of the first few bytes of the volume, you should: Monitor PowerShell scripts for specific behavior patterns that are indicative of this attack method. Specifically, look for scripts that contain the PowerShell cmdlet `New-Object` in conjunction with the use of `IO.FileStream` and the DOS device path specifier `\\\\.\\` within their code. This suggests that the script is attempting to directly interact with a drive volume, which could be a part of malicious activity aiming to read or modify the disk at a low level. It is essential to have Script Block Logging enabled on Windows systems to detect such activities. Be mindful, however, that some legitimate PowerShell scripts might also use these patterns for valid purposes, so consider these instances as potential false positives. The risk level associated with this behavior is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: Adversaries can carry out malicious operations using a virtual instance to avoid detection. This rule is built to detect the registration of the Virtualbox driver or start of a Virtualbox VM.",
    "context": "",
    "output": "Sure!\nIn order to detect adversaries carrying out malicious operations using a virtual instance to avoid detection, you should: monitor Windows process creation logs for the execution of command lines that include specific references to VirtualBox components such as 'VBoxRT.dll,RTR3Init', 'VBoxC.dll', or 'VBoxDrv.sys'. Additionally, watch for command lines initiating VirtualBox VM operations like 'startvm' or 'controlvm'. This detection strategy helps in identifying the registration of the VirtualBox driver or the start of a VirtualBox VM which could be indicative of malicious activities. Keep in mind that there could be false positives, especially on systems where VirtualBox is used legitimately. The information to focus on includes the Computer Name, User, CommandLine, and ParentCommandLine. This approach employs tactics and techniques that aim at revealing misuse of virtualization software for malicious intentions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries can carry out malicious operations using a virtual instance to avoid detection. This rule is built to detect the registration of the Virtualbox driver or start of a Virtualbox VM.",
      "answer": "In order to detect adversaries carrying out malicious operations using a virtual instance to avoid detection, you should: monitor Windows process creation logs for the execution of command lines that include specific references to VirtualBox components such as 'VBoxRT.dll,RTR3Init', 'VBoxC.dll', or 'VBoxDrv.sys'. Additionally, watch for command lines initiating VirtualBox VM operations like 'startvm' or 'controlvm'. This detection strategy helps in identifying the registration of the VirtualBox driver or the start of a VirtualBox VM which could be indicative of malicious activities. Keep in mind that there could be false positives, especially on systems where VirtualBox is used legitimately. The information to focus on includes the Computer Name, User, CommandLine, and ParentCommandLine. This approach employs tactics and techniques that aim at revealing misuse of virtualization software for malicious intentions."
    }
  },
  {
    "instruction": "Explain how should I detect the following: image load of VSS DLL by uncommon executables",
    "context": "",
    "output": "In order to detect the image load of VSS DLL by uncommon executables, you should monitor Windows systems for instances where the 'vssapi.dll' file is being loaded by applications that typically do not do so. This involves tracking the loading of this DLL across the system, except when it is being loaded by a set of known, common processes or from specific directories that are generally considered safe or are known to load this DLL as part of their normal operation. \n\nThese safe directories and processes include Windows Explorer ('C:\\Windows\\explorer.exe'), the System Settings panel ('C:\\Windows\\ImmersiveControlPanel\\SystemSettings.exe'), as well as any processes starting from 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', installation temporary directories under 'C:\\Windows\\Temp\\', and the Windows side-by-side directory ('C:\\Windows\\WinSxS\\'). Furthermore, exclusions are made for applications located in the Program Files directories ('C:\\Program Files\\' and 'C:\\Program Files (x86)\\'), considering that some known applications which may legitimately load 'vssapi.dll' reside here. There's also a consideration to ignore processes starting from 'C:\\ProgramData\\Package Cache\\' due to known false positives from common software installations such as .NET and Windows Desktop Runtime packages.\n\nThis approach aims to identify potentially malicious activities associated with tactics and techniques like defense evasion, credential access, or execution, since attackers may leverage the loading of 'vssapi.dll' in unconventional manners to carry out their objectives while attempting to avoid detection. Given the high level of scrutiny and the exclusion of known safe processes and directories, any alerts generated would warrant further investigation due to the higher likelihood of these being indicative of malicious behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "image load of VSS DLL by uncommon executables",
      "answer": "In order to detect the image load of VSS DLL by uncommon executables, you should monitor Windows systems for instances where the 'vssapi.dll' file is being loaded by applications that typically do not do so. This involves tracking the loading of this DLL across the system, except when it is being loaded by a set of known, common processes or from specific directories that are generally considered safe or are known to load this DLL as part of their normal operation. \n\nThese safe directories and processes include Windows Explorer ('C:\\Windows\\explorer.exe'), the System Settings panel ('C:\\Windows\\ImmersiveControlPanel\\SystemSettings.exe'), as well as any processes starting from 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', installation temporary directories under 'C:\\Windows\\Temp\\', and the Windows side-by-side directory ('C:\\Windows\\WinSxS\\'). Furthermore, exclusions are made for applications located in the Program Files directories ('C:\\Program Files\\' and 'C:\\Program Files (x86)\\'), considering that some known applications which may legitimately load 'vssapi.dll' reside here. There's also a consideration to ignore processes starting from 'C:\\ProgramData\\Package Cache\\' due to known false positives from common software installations such as .NET and Windows Desktop Runtime packages.\n\nThis approach aims to identify potentially malicious activities associated with tactics and techniques like defense evasion, credential access, or execution, since attackers may leverage the loading of 'vssapi.dll' in unconventional manners to carry out their objectives while attempting to avoid detection. Given the high level of scrutiny and the exclusion of known safe processes and directories, any alerts generated would warrant further investigation due to the higher likelihood of these being indicative of malicious behavior."
    }
  },
  {
    "instruction": "Can you explain how to detect: \"regsvr32\" execution where the DLL doesn't contain a common file extension.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a \"regsvr32\" execution where the DLL doesn't contain a common file extension, you should monitor process creation events on Windows systems for executions of \"regsvr32.exe\". Specifically, look for cases where the Image ends with '\\regsvr32.exe' or the OriginalFileName is 'REGSVR32.EXE'. Further refine the detection by excluding command lines that contain common legitimate file extensions like '.ax', '.cpl', '.dll' (which also covers \".dll.mui\"), '.ocx' for main legal extensions, and '.ppl', '.bav' for less common ones. Additionally, ignore events where the command line is null or empty to reduce noise from incomplete logs. This detection mechanism helps in identifying potentially malicious use of \"regsvr32\" that tries to register DLLs without using common file extensions, which is a technique adversaries might employ to bypass security measures.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "\"regsvr32\" execution where the DLL doesn't contain a common file extension.",
      "answer": "In order to detect a \"regsvr32\" execution where the DLL doesn't contain a common file extension, you should monitor process creation events on Windows systems for executions of \"regsvr32.exe\". Specifically, look for cases where the Image ends with '\\regsvr32.exe' or the OriginalFileName is 'REGSVR32.EXE'. Further refine the detection by excluding command lines that contain common legitimate file extensions like '.ax', '.cpl', '.dll' (which also covers \".dll.mui\"), '.ocx' for main legal extensions, and '.ppl', '.bav' for less common ones. Additionally, ignore events where the command line is null or empty to reduce noise from incomplete logs. This detection mechanism helps in identifying potentially malicious use of \"regsvr32\" that tries to register DLLs without using common file extensions, which is a technique adversaries might employ to bypass security measures."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete.\nRegistry entries in HKLM\\Software[Wow6432Node]Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are\nused to manage additional helper programs and functionalities that support Winlogon. Malicious modifications to these Registry keys may cause Winlogon to\nload and execute malicious DLLs and/or executables.\n",
    "context": "",
    "output": "In order to detect attempts at malicious modifications targeting the Winlogon process through registry modifications, potentially aimed at loading and executing malicious DLLs and/or executables, you should: Monitor Windows PowerShell script logs, particularly focusing on those that contain references to the registry path associated with 'CurrentVersion\\Winlogon'. It is crucial to track scripts that include commands like 'Set-ItemProperty' or 'New-Item', indicating alterations or additions to registry items. This strategy necessitates that Script Block Logging is activated on the system to capture the PowerShell script execution details adequately. Pay attention to any PowerShell script activities that interact with these registry paths, as they might indicate unauthorized modifications aimed at exploiting the Winlogon process for persistence, privilege escalation, or other malicious purposes. While there's a possibility for false positives, the risk level associated with these actions is considered medium due to their potential impact on system security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete.\nRegistry entries in HKLM\\Software[Wow6432Node]Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are\nused to manage additional helper programs and functionalities that support Winlogon. Malicious modifications to these Registry keys may cause Winlogon to\nload and execute malicious DLLs and/or executables.\n",
      "answer": "In order to detect attempts at malicious modifications targeting the Winlogon process through registry modifications, potentially aimed at loading and executing malicious DLLs and/or executables, you should: Monitor Windows PowerShell script logs, particularly focusing on those that contain references to the registry path associated with 'CurrentVersion\\Winlogon'. It is crucial to track scripts that include commands like 'Set-ItemProperty' or 'New-Item', indicating alterations or additions to registry items. This strategy necessitates that Script Block Logging is activated on the system to capture the PowerShell script execution details adequately. Pay attention to any PowerShell script activities that interact with these registry paths, as they might indicate unauthorized modifications aimed at exploiting the Winlogon process for persistence, privilege escalation, or other malicious purposes. While there's a possibility for false positives, the risk level associated with these actions is considered medium due to their potential impact on system security."
    }
  },
  {
    "instruction": "Can you explain how to detect: TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia",
    "context": "",
    "output": "Certainly!\n\nIn order to detect TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia, you should monitor for the creation of processes in Windows operating systems that include the command line containing the specific string 'abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc'. Such a unique string in the command line may indicate malicious activities associated with the TropicTrooper threat actor. This monitoring is considered of high importance due to the potential impact and the targeted nature of the TropicTrooper's operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia",
      "answer": "In order to detect TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia, you should monitor for the creation of processes in Windows operating systems that include the command line containing the specific string 'abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc'. Such a unique string in the command line may indicate malicious activities associated with the TropicTrooper threat actor. This monitoring is considered of high importance due to the potential impact and the targeted nature of the TropicTrooper's operations."
    }
  },
  {
    "instruction": "Can you explain how to detect: Pandemic Windows Implant",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Pandemic Windows Implant, you should: Monitor registry events on Windows operating systems for any activities that involve the specific registry path '\\SYSTEM\\CurrentControlSet\\services\\null\\Instance'. This approach relies on recognizing attempts to interact with a registry key often associated with the Pandemic implant, which might indicate the presence of this malicious software on the system. The detection process includes gathering additional context such as the EventID, CommandLine, ParentCommandLine, Image, User, and the TargetObject involved in the operation. While it's critical to watch for such activities, be aware that not all modifications or interactions with this registry key are malicious, though they are considered highly suspicious hence classified at a critical level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Pandemic Windows Implant",
      "answer": "In order to detect Pandemic Windows Implant, you should: Monitor registry events on Windows operating systems for any activities that involve the specific registry path '\\SYSTEM\\CurrentControlSet\\services\\null\\Instance'. This approach relies on recognizing attempts to interact with a registry key often associated with the Pandemic implant, which might indicate the presence of this malicious software on the system. The detection process includes gathering additional context such as the EventID, CommandLine, ParentCommandLine, Image, User, and the TargetObject involved in the operation. While it's critical to watch for such activities, be aware that not all modifications or interactions with this registry key are malicious, though they are considered highly suspicious hence classified at a critical level."
    }
  },
  {
    "instruction": "Can you explain how to detect: exploitation of Microsoft Exchange ProxyToken vulnerability as described in CVE-2021-33766",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the exploitation of Microsoft Exchange ProxyToken vulnerability as described in CVE-2021-33766, you should monitor web server logs for specific patterns that indicate an attempted exploitation. Look out for HTTP POST requests exhibiting one of two specific characteristic patterns in their URI queries, each of which signals a potentially malicious attempt to exploit this vulnerability.\n\nFirst, pay attention to POST requests where the query contains '/ecp/' alongside '/RulesEditor/InboxRules.svc/NewObject', and the server's response status code is 500. This specific pattern could indicate an attempt to exploit the vulnerability by interacting with the Exchange Control Panel (ECP) in a manner that results in an error response from the server, which is typical of exploitation attempts that do not fully succeed or trigger an unexpected condition on the server.\n\nSecond, look for POST requests that include 'SecurityToken=' and '/ecp/' in the URI query, also resulting in a status code of 500 from the server. This pattern suggests an attempt to use a security token inappropriately within the context of the ECP, another red flag for exploitation attempts.\n\nWhenever such requests are identified, important information such as the client's IP address (c-ip) and DNS name (c-dns), if available, should be logged and reported. This data is crucial for further investigation and potentially blocking or mitigating against the source of these requests.\n\nIt's important to note that while these patterns are critical signs of potential exploitation attempts, they may also be triggered in benign scenarios which are currently unknown. Therefore, any detection mechanisms should be set at a critical level but also allow for the verification of detected patterns to rule out any false positives.\n\nIn summary, by effectively monitoring for these specified patterns within web server logs, one can detect and possibly prevent the exploitation attempts of the Microsoft Exchange ProxyToken vulnerability, aiding in the protection of the server infrastructure against unauthorized access and manipulation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of Microsoft Exchange ProxyToken vulnerability as described in CVE-2021-33766",
      "answer": "In order to detect the exploitation of Microsoft Exchange ProxyToken vulnerability as described in CVE-2021-33766, you should monitor web server logs for specific patterns that indicate an attempted exploitation. Look out for HTTP POST requests exhibiting one of two specific characteristic patterns in their URI queries, each of which signals a potentially malicious attempt to exploit this vulnerability.\n\nFirst, pay attention to POST requests where the query contains '/ecp/' alongside '/RulesEditor/InboxRules.svc/NewObject', and the server's response status code is 500. This specific pattern could indicate an attempt to exploit the vulnerability by interacting with the Exchange Control Panel (ECP) in a manner that results in an error response from the server, which is typical of exploitation attempts that do not fully succeed or trigger an unexpected condition on the server.\n\nSecond, look for POST requests that include 'SecurityToken=' and '/ecp/' in the URI query, also resulting in a status code of 500 from the server. This pattern suggests an attempt to use a security token inappropriately within the context of the ECP, another red flag for exploitation attempts.\n\nWhenever such requests are identified, important information such as the client's IP address (c-ip) and DNS name (c-dns), if available, should be logged and reported. This data is crucial for further investigation and potentially blocking or mitigating against the source of these requests.\n\nIt's important to note that while these patterns are critical signs of potential exploitation attempts, they may also be triggered in benign scenarios which are currently unknown. Therefore, any detection mechanisms should be set at a critical level but also allow for the verification of detected patterns to rule out any false positives.\n\nIn summary, by effectively monitoring for these specified patterns within web server logs, one can detect and possibly prevent the exploitation attempts of the Microsoft Exchange ProxyToken vulnerability, aiding in the protection of the server infrastructure against unauthorized access and manipulation."
    }
  },
  {
    "instruction": "How to detect: specific patterns found after a successful ProxyLogon exploitation in relation to a Commandlet invocation of Set-OabVirtualDirectory",
    "context": "",
    "output": "In order to detect specific patterns found after a successful ProxyLogon exploitation in relation to a Commandlet invocation of Set-OabVirtualDirectory, you should: Focus on monitoring the Windows Microsoft Exchange Management service for specific indicators of compromise. When evaluating the logs, pay close attention to any invocation of the \"OabVirtualDirectory\" commandlet, especially if it is accompanied by modifications to the \"-ExternalUrl\" parameter. This action by itself is a significant indicator, as it's often associated with setting up malicious external access points.\n\nMoreover, scrutinizing parameters for patterns indicative of code injection attacks, such as the presence of \"eval(request\", usage of \"<script\" tags within URL contexts (e.g., \"http://f/<script\"), the explicit mention of \"unsafe\"};\", or the triggering of \"function Page_Load()\" function, is crucial. These specific patterns are typically inserted to exploit or maintain access, suggesting a compromised system.\n\nGiven that the condition for detection hinges on both the invocation of the suspicious commandlet and the presence of these questionable parameters, any log entry matching both criteria should be considered a critical threat. This approach significantly reduces the likelihood of false positives, making any detected instance a critical concern that requires immediate investigation.\n\nBy closely monitoring for such patterns and understanding their implications within the context of Exchange Management service logs, one can effectively identify potential compromises stemming from ProxyLogon exploitation. This focused detection strategy is essential for ensuring the security of Exchange servers against sophisticated attack vectors attempting to leverage commandlet invocation for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific patterns found after a successful ProxyLogon exploitation in relation to a Commandlet invocation of Set-OabVirtualDirectory",
      "answer": "In order to detect specific patterns found after a successful ProxyLogon exploitation in relation to a Commandlet invocation of Set-OabVirtualDirectory, you should: Focus on monitoring the Windows Microsoft Exchange Management service for specific indicators of compromise. When evaluating the logs, pay close attention to any invocation of the \"OabVirtualDirectory\" commandlet, especially if it is accompanied by modifications to the \"-ExternalUrl\" parameter. This action by itself is a significant indicator, as it's often associated with setting up malicious external access points.\n\nMoreover, scrutinizing parameters for patterns indicative of code injection attacks, such as the presence of \"eval(request\", usage of \"<script\" tags within URL contexts (e.g., \"http://f/<script\"), the explicit mention of \"unsafe\"};\", or the triggering of \"function Page_Load()\" function, is crucial. These specific patterns are typically inserted to exploit or maintain access, suggesting a compromised system.\n\nGiven that the condition for detection hinges on both the invocation of the suspicious commandlet and the presence of these questionable parameters, any log entry matching both criteria should be considered a critical threat. This approach significantly reduces the likelihood of false positives, making any detected instance a critical concern that requires immediate investigation.\n\nBy closely monitoring for such patterns and understanding their implications within the context of Exchange Management service logs, one can effectively identify potential compromises stemming from ProxyLogon exploitation. This focused detection strategy is essential for ensuring the security of Exchange servers against sophisticated attack vectors attempting to leverage commandlet invocation for malicious purposes."
    }
  },
  {
    "instruction": "How can I detect: PowerShell command lines with special characters",
    "context": "",
    "output": "In order to detect the PowerShell command lines with special characters, you should focus on monitoring the creation of processes on Windows systems. Specifically, keep an eye out for processes that are initiated by PowerShell executables, identified either by their image name ending with '\\powershell.exe' or '\\pwsh.exe', or by their original file names being 'PowerShell.EXE' or 'pwsh.dll'. Additionally, scrutinize the command lines of these processes for patterns that include a series of special characters. These patterns might involve repeated concatenations (indicated by numerous plus signs '+'), nested curly brackets '{', caret symbols '^', or backticks '`'. \n\nSuch command lines are typically unconventional and may signify attempts to obfuscate malicious commands or scripts, a common tactic used by attackers to evade detection. However, it's important to exclude legitimate uses of similar patterns that might originate from specific known and trusted processes, such as those from Amazon SSM Document Worker or related to Windows Defender ATP functionalities. The presence of certain strings in the command line associated with Windows Defender ATP should be identified as legitimate activity and not be falsely flagged as malicious. \n\nMonitoring for these specific conditions with a high level of scrutiny is critical in identifying suspicious or potentially malicious PowerShell activity that leverages special characters for obfuscation, which is a characteristic of sophisticated cyber attacks. It is worth noting that while this strategy aims to minimize false positives by excluding known benign activities, careful configuration and ongoing tuning are essential to balance security and operational efficiency effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell command lines with special characters",
      "answer": "In order to detect the PowerShell command lines with special characters, you should focus on monitoring the creation of processes on Windows systems. Specifically, keep an eye out for processes that are initiated by PowerShell executables, identified either by their image name ending with '\\powershell.exe' or '\\pwsh.exe', or by their original file names being 'PowerShell.EXE' or 'pwsh.dll'. Additionally, scrutinize the command lines of these processes for patterns that include a series of special characters. These patterns might involve repeated concatenations (indicated by numerous plus signs '+'), nested curly brackets '{', caret symbols '^', or backticks '`'. \n\nSuch command lines are typically unconventional and may signify attempts to obfuscate malicious commands or scripts, a common tactic used by attackers to evade detection. However, it's important to exclude legitimate uses of similar patterns that might originate from specific known and trusted processes, such as those from Amazon SSM Document Worker or related to Windows Defender ATP functionalities. The presence of certain strings in the command line associated with Windows Defender ATP should be identified as legitimate activity and not be falsely flagged as malicious. \n\nMonitoring for these specific conditions with a high level of scrutiny is critical in identifying suspicious or potentially malicious PowerShell activity that leverages special characters for obfuscation, which is a characteristic of sophisticated cyber attacks. It is worth noting that while this strategy aims to minimize false positives by excluding known benign activities, careful configuration and ongoing tuning are essential to balance security and operational efficiency effectively."
    }
  },
  {
    "instruction": "How to detect: use of Tor or Tor-Browser to connect to onion routing networks",
    "context": "",
    "output": "In order to detect the use of Tor or Tor-Browser to connect to onion routing networks, you should: Monitor Windows process creation logs for any processes that end with either '\\tor.exe' or '\\Tor Browser\\Browser\\firefox.exe'. These executable paths are indicative of the Tor application or Tor Browser being launched, which are commonly utilized for anonymous communication through the Tor onion routing network. Given that these activities can be tied to efforts to maintain anonymity online, identifying the execution of these specific files is crucial for detection. It's important to note that there might be instances where these detections could be false positives, although the likelihood is unknown. The severity of this rule is considered high due to the potential implication of Tor usage in circumventing network monitoring and engaging in covert communication.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Tor or Tor-Browser to connect to onion routing networks",
      "answer": "In order to detect the use of Tor or Tor-Browser to connect to onion routing networks, you should: Monitor Windows process creation logs for any processes that end with either '\\tor.exe' or '\\Tor Browser\\Browser\\firefox.exe'. These executable paths are indicative of the Tor application or Tor Browser being launched, which are commonly utilized for anonymous communication through the Tor onion routing network. Given that these activities can be tied to efforts to maintain anonymity online, identifying the execution of these specific files is crucial for detection. It's important to note that there might be instances where these detections could be false positives, although the likelihood is unknown. The severity of this rule is considered high due to the potential implication of Tor usage in circumventing network monitoring and engaging in covert communication."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of shells from a parent process located in a temporary (/tmp) directory",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of shells from a parent process located in a temporary (/tmp) directory, you should: Monitor Linux systems for the creation of processes where the parent process originates from a directory within /tmp and leads to the execution of various shell environments. Specifically, look for parent processes with paths starting in '/tmp/' that result in the creation of processes whose executable paths end in common shell names such as '/bash', '/csh', '/dash', '/fish', '/ksh', '/sh', and '/zsh'. This scenario is flagged with a high level of concern due to its uncommon and potentially malicious nature, although there could be cases where such activity might not signify malicious intent. The detection focuses on logs associated with the creation of processes, enabling the identification of suspicious activity that aligns with tactics and techniques such as Execution and Persistence, which are often utilized in malicious operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of shells from a parent process located in a temporary (/tmp) directory",
      "answer": "In order to detect execution of shells from a parent process located in a temporary (/tmp) directory, you should: Monitor Linux systems for the creation of processes where the parent process originates from a directory within /tmp and leads to the execution of various shell environments. Specifically, look for parent processes with paths starting in '/tmp/' that result in the creation of processes whose executable paths end in common shell names such as '/bash', '/csh', '/dash', '/fish', '/ksh', '/sh', and '/zsh'. This scenario is flagged with a high level of concern due to its uncommon and potentially malicious nature, although there could be cases where such activity might not signify malicious intent. The detection focuses on logs associated with the creation of processes, enabling the identification of suspicious activity that aligns with tactics and techniques such as Execution and Persistence, which are often utilized in malicious operations."
    }
  },
  {
    "instruction": "How to detect: DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor. Which loads a malicious version of the expected \"version.dll\" dll",
    "context": "",
    "output": "In order to detect DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor, which loads a malicious version of the expected \"version.dll\" dll, you should: Focus on monitoring image load events within Windows environments. Specifically, keep an eye for instances where the \"C:\\Windows\\ADFS\\version.dll\" is loaded. This activity is indicative of an attempt to exploit the system by replacing a legitimate DLL with a malicious version, a common tactic in sophisticated cyber-attacks like those executed by NOBELIUM. Given the critical nature of this detection and its association with high-profile threats, false positives are considered unlikely. This indicates that any hit on this rule should be taken seriously and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor. Which loads a malicious version of the expected \"version.dll\" dll",
      "answer": "In order to detect DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor, which loads a malicious version of the expected \"version.dll\" dll, you should: Focus on monitoring image load events within Windows environments. Specifically, keep an eye for instances where the \"C:\\Windows\\ADFS\\version.dll\" is loaded. This activity is indicative of an attempt to exploit the system by replacing a legitimate DLL with a malicious version, a common tactic in sophisticated cyber-attacks like those executed by NOBELIUM. Given the critical nature of this detection and its association with high-profile threats, false positives are considered unlikely. This indicates that any hit on this rule should be taken seriously and investigated promptly."
    }
  },
  {
    "instruction": "Can you explain how to detect: filename pattern of email related data used by UNC4841 for staging and exfiltration",
    "context": "",
    "output": "Certainly!\n\nIn order to detect filename pattern of email related data used by UNC4841 for staging and exfiltration, you should: Focus on monitoring file events within a Linux environment, specifically targeting file names that match a particular regular expression pattern. This pattern identifies files located in the '/mail/tmp/' directory that follow a specific naming convention consistent with the staging and exfiltration practices of UNC4841. These files will have names starting with three alphanumeric characters followed by three numeric characters, and ending with the '.tar.gz' extension, suggesting an attempt to compress and possibly exfiltrate gathered email-related data. It's important to maintain a high level of alertness for such activities, despite potential uncertainties in false positives, due to the critical impact of the described behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "filename pattern of email related data used by UNC4841 for staging and exfiltration",
      "answer": "In order to detect filename pattern of email related data used by UNC4841 for staging and exfiltration, you should: Focus on monitoring file events within a Linux environment, specifically targeting file names that match a particular regular expression pattern. This pattern identifies files located in the '/mail/tmp/' directory that follow a specific naming convention consistent with the staging and exfiltration practices of UNC4841. These files will have names starting with three alphanumeric characters followed by three numeric characters, and ending with the '.tar.gz' extension, suggesting an attempt to compress and possibly exfiltrate gathered email-related data. It's important to maintain a high level of alertness for such activities, despite potential uncertainties in false positives, due to the critical impact of the described behavior."
    }
  },
  {
    "instruction": "Please help me detect the following: Microsoft Cloud App Security reported users were active from an IP address identified as risky by Microsoft Threat Intelligence.\nThese IP addresses are involved in malicious activities, such as Botnet C&C, and may indicate compromised account.\n",
    "context": "",
    "output": "Sure!\nIn order to detect when a Microsoft Cloud App Security reported users were active from an IP address identified as risky by Microsoft Threat Intelligence. These IP addresses are involved in malicious activities, such as Botnet C&C, and may indicate compromised account, you should: Monitor for specific events within the Microsoft 365 environment, particularly focusing on the Threat Detection service. Specifically, look for logs from the Security Compliance Center that report activities from IP addresses categorized as suspicious. These are flagged based on their reputation and known malicious activities, such as involvement in Botnet Command and Control (C&C) operations. The specific event to watch for is called \"Activity from suspicious IP addresses,\" and it must have a status of success to be considered relevant. This detection aims to identify potentially compromised accounts acting from IP addresses known for malicious behavior, which is critical for maintaining security within an organization's Microsoft cloud environment. It's important to note that some activities could be flagged as false positives, meaning they are marked as suspicious but do not actually represent malicious behavior. The threat level associated with this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported users were active from an IP address identified as risky by Microsoft Threat Intelligence.\nThese IP addresses are involved in malicious activities, such as Botnet C&C, and may indicate compromised account.\n",
      "answer": "In order to detect when a Microsoft Cloud App Security reported users were active from an IP address identified as risky by Microsoft Threat Intelligence. These IP addresses are involved in malicious activities, such as Botnet C&C, and may indicate compromised account, you should: Monitor for specific events within the Microsoft 365 environment, particularly focusing on the Threat Detection service. Specifically, look for logs from the Security Compliance Center that report activities from IP addresses categorized as suspicious. These are flagged based on their reputation and known malicious activities, such as involvement in Botnet Command and Control (C&C) operations. The specific event to watch for is called \"Activity from suspicious IP addresses,\" and it must have a status of success to be considered relevant. This detection aims to identify potentially compromised accounts acting from IP addresses known for malicious behavior, which is critical for maintaining security within an organization's Microsoft cloud environment. It's important to note that some activities could be flagged as false positives, meaning they are marked as suspicious but do not actually represent malicious behavior. The threat level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential C2 communication related to Goofy Guineapig backdoor",
    "context": "",
    "output": "In order to detect potential C2 communication related to Goofy Guineapig backdoor, you should monitor proxy logs for specific patterns that may indicate malicious activity. Look for traffic where the User-Agent string matches 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36' and the host interacting with is 'static.tcplog.com'. This specific pattern of User-Agent and host combination can signify an attempt to communicate with a command and control (C2) server, which is a critical component of the Goofy Guineapig backdoor's operation. Given the nature of this detection, false positives are considered unlikely, indicating a high confidence level in the specificity of these indicators for identifying malicious communications. Monitoring for and analyzing such patterns can provide early warning of an active Goofy Guineapig backdoor instance attempting to execute commands or exfiltrate data, thereby enabling timely response and mitigation actions to protect the network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential C2 communication related to Goofy Guineapig backdoor",
      "answer": "In order to detect potential C2 communication related to Goofy Guineapig backdoor, you should monitor proxy logs for specific patterns that may indicate malicious activity. Look for traffic where the User-Agent string matches 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36' and the host interacting with is 'static.tcplog.com'. This specific pattern of User-Agent and host combination can signify an attempt to communicate with a command and control (C2) server, which is a critical component of the Goofy Guineapig backdoor's operation. Given the nature of this detection, false positives are considered unlikely, indicating a high confidence level in the specificity of these indicators for identifying malicious communications. Monitoring for and analyzing such patterns can provide early warning of an active Goofy Guineapig backdoor instance attempting to execute commands or exfiltrate data, thereby enabling timely response and mitigation actions to protect the network."
    }
  },
  {
    "instruction": "Explain how should I detect the following: dropping of dll files in system32 that may be used to retrieve user credentials from LSASS",
    "context": "",
    "output": "In order to detect the dropping of dll files in system32 that may be used to retrieve user credentials from LSASS, you should: Focus on monitoring process creation events in Windows environments. Particularly, you need to keep an eye out for command line activities that exhibit specific patterns indicative of such malicious intent. The patterns to watch include the presence of 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa', 'scecli\\0*', and 'reg add' all together in the command line. This indicates an attempt to manipulate registry keys associated with the Local Security Authority Subsystem Service (LSASS), potentially for deploying or modifying Dynamic Link Libraries (DLLs) in a manner that primes them for credential theft. It's crucial to note, however, that as of the guidance provided, there are unknown scenarios that might lead to false positives. Thus, any detection at a medium level of confidence should prompt further investigation rather than immediate remediation action.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "dropping of dll files in system32 that may be used to retrieve user credentials from LSASS",
      "answer": "In order to detect the dropping of dll files in system32 that may be used to retrieve user credentials from LSASS, you should: Focus on monitoring process creation events in Windows environments. Particularly, you need to keep an eye out for command line activities that exhibit specific patterns indicative of such malicious intent. The patterns to watch include the presence of 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa', 'scecli\\0*', and 'reg add' all together in the command line. This indicates an attempt to manipulate registry keys associated with the Local Security Authority Subsystem Service (LSASS), potentially for deploying or modifying Dynamic Link Libraries (DLLs) in a manner that primes them for credential theft. It's crucial to note, however, that as of the guidance provided, there are unknown scenarios that might lead to false positives. Thus, any detection at a medium level of confidence should prompt further investigation rather than immediate remediation action."
    }
  },
  {
    "instruction": "How can I detect: suspicious session with two users present",
    "context": "",
    "output": "In order to detect suspicious sessions with two users present, you should focus on monitoring logs from Linux systems, specifically those that pertain to the Guacamole service. The detection mechanism hinges on the identification of logs that explicitly mention \"2 users now present.\" This phrase serves as a key indicator that a session may be compromised or suspicious due to the presence of an unexpected additional user. Since Guacamole is often employed for remote desktop access, any indication of an unexpected second user could suggest a security breach or an unauthorized access attempt.\n\nIt's vital to note that the detection strategy is classified with a high level of importance, suggesting such occurrences are taken seriously and should be investigated promptly. However, due to the broad and somewhat unspecified nature of this detection method, it is acknowledged that there might be unknown false positives. This means that while alerts generated from this detection method require investigation, not all will necessarily correlate with malicious activity. The vigilance in monitoring and analyzing Guacamole service logs for the mentioned phrase will be a critical step in identifying potential breaches attempting to utilize or exploit remote access services in a Linux environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious session with two users present",
      "answer": "In order to detect suspicious sessions with two users present, you should focus on monitoring logs from Linux systems, specifically those that pertain to the Guacamole service. The detection mechanism hinges on the identification of logs that explicitly mention \"2 users now present.\" This phrase serves as a key indicator that a session may be compromised or suspicious due to the presence of an unexpected additional user. Since Guacamole is often employed for remote desktop access, any indication of an unexpected second user could suggest a security breach or an unauthorized access attempt.\n\nIt's vital to note that the detection strategy is classified with a high level of importance, suggesting such occurrences are taken seriously and should be investigated promptly. However, due to the broad and somewhat unspecified nature of this detection method, it is acknowledged that there might be unknown false positives. This means that while alerts generated from this detection method require investigation, not all will necessarily correlate with malicious activity. The vigilance in monitoring and analyzing Guacamole service logs for the mentioned phrase will be a critical step in identifying potential breaches attempting to utilize or exploit remote access services in a Linux environment."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation or modification of a powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence",
    "context": "",
    "output": "In order to detect the creation or modification of a PowerShell profile which could indicate suspicious activity as the profile can be used as a means of persistence, you should: Monitor Windows file events for any creation or modification actions targeting specific PowerShell profile scripts. These profile scripts include '\\Microsoft.PowerShell_profile.ps1', '\\WindowsPowerShell\\profile.ps1', '\\PowerShell\\profile.ps1', '\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1', and '\\Program Files\\PowerShell\\7\\profile.ps1'. It's crucial to note that while detecting these changes is essential for identifying potential malicious activities, there are legitimate scenarios where a system administrator might manually create or modify these PowerShell profiles. Consequently, these legitimate activities are considered false positives. This detection strategy is of high importance due to the risk associated with PowerShell profiles being used for persistence mechanisms by attackers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation or modification of a powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence",
      "answer": "In order to detect the creation or modification of a PowerShell profile which could indicate suspicious activity as the profile can be used as a means of persistence, you should: Monitor Windows file events for any creation or modification actions targeting specific PowerShell profile scripts. These profile scripts include '\\Microsoft.PowerShell_profile.ps1', '\\WindowsPowerShell\\profile.ps1', '\\PowerShell\\profile.ps1', '\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1', and '\\Program Files\\PowerShell\\7\\profile.ps1'. It's crucial to note that while detecting these changes is essential for identifying potential malicious activities, there are legitimate scenarios where a system administrator might manually create or modify these PowerShell profiles. Consequently, these legitimate activities are considered false positives. This detection strategy is of high importance due to the risk associated with PowerShell profiles being used for persistence mechanisms by attackers."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Commandlet names from well-known PowerShell exploitation frameworks",
    "context": "",
    "output": "In order to detect Commandlet names from well-known PowerShell exploitation frameworks, you should monitor process creation logs on Windows systems for the execution of PowerShell commands that contain specific keywords. These keywords are indicative of activities related to various cyber attack techniques such as adding persistence mechanisms, exfiltration of data, exploiting vulnerabilities, conducting reconnaissance, disabling security features, and many others. The presence of any of these commands, which range from 'Add-Exfiltration' to 'VolumeShadowCopyTools', could signal an ongoing attack or compromise. Such actions are commonly found in attack frameworks used by malicious actors to automate exploitation, lateral movement, data theft, and other nefarious activities. Monitoring for these command executions is crucial as they are tied to a wide array of MITRE ATT&CK tactics and techniques including, but not limited to, persistence, privilege escalation, defense evasion, credential access, discovery, lateral movement, collection, exfiltration, command and control, and execution. Identifying the usage of these commands can help in early detection of attacks, allowing for a timely response to mitigate the threat. It is important to investigate these alerts, keeping in mind that there might be false positives, although the level of alert is considered high due to the potential impact of the actions associated with these commands.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Commandlet names from well-known PowerShell exploitation frameworks",
      "answer": "In order to detect Commandlet names from well-known PowerShell exploitation frameworks, you should monitor process creation logs on Windows systems for the execution of PowerShell commands that contain specific keywords. These keywords are indicative of activities related to various cyber attack techniques such as adding persistence mechanisms, exfiltration of data, exploiting vulnerabilities, conducting reconnaissance, disabling security features, and many others. The presence of any of these commands, which range from 'Add-Exfiltration' to 'VolumeShadowCopyTools', could signal an ongoing attack or compromise. Such actions are commonly found in attack frameworks used by malicious actors to automate exploitation, lateral movement, data theft, and other nefarious activities. Monitoring for these command executions is crucial as they are tied to a wide array of MITRE ATT&CK tactics and techniques including, but not limited to, persistence, privilege escalation, defense evasion, credential access, discovery, lateral movement, collection, exfiltration, command and control, and execution. Identifying the usage of these commands can help in early detection of attacks, allowing for a timely response to mitigate the threat. It is important to investigate these alerts, keeping in mind that there might be false positives, although the level of alert is considered high due to the potential impact of the actions associated with these commands."
    }
  },
  {
    "instruction": "Can you explain how to detect: known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement",
    "context": "",
    "output": "Certainly!\n\nIn order to detect known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement, you should analyze Windows system service logs with an emphasis on the following criteria:\n\n1. Focus on log entries from the Service Control Manager, specifically those with an EventID of 7045. This event ID is indicative of a service being installed on the system.\n\n2. Within these logs, search for service installation paths that exhibit suspicious characteristics, such as:\n   - Paths containing both 'ADMIN$' and '.exe', which might suggest the creation of a service to execute a remote administrative executable, a common tactic for maintaining access or executing commands with elevated privileges.\n   - Paths that include the environment variable '%COMSPEC%', alongside the keywords 'start' and 'powershell'. This pattern can indicate the execution of PowerShell commands through the command prompt (CMD), a technique often utilized for script execution or launching encoded or obfuscated attacks.\n   - Direct indications of PowerShell being used with options designed to hide the activity and possibly execute encoded commands (`powershell -nop -w hidden -encodedcommand`). This is a strong indicator of an attempt to bypass detection mechanisms by running PowerShell in a less conspicuous manner.\n   - Service paths that contain Base64 encoded command sequences, especially those indicating an attempt to execute code or scripts hosted externally (as evidenced by \"IEX (New-Object Net.Webclient).DownloadString\"). This method is often used to retrieve and execute malicious payloads from a controlled external source, typically a web server under the attacker's control.\n\n3. Any instances matching these patterns should be treated with a high level of suspicion. These patterns are indicative of methods associated with advanced persistent threats (APTs) like Cobalt Strike, focusing on stealthy elevation of privileges, lateral movement within a network, and potentially establishing persistence.\n\n4. While analyzing these logs, it's crucial to approach with an understanding that not all matches will indicate a malicious presence (as there can be unknown false positives), but due to the critical nature of these signs, each detection should be investigated thoroughly.\n\nThis approach leverages tailoring detection mechanisms towards the complexity and sophistication of tactics and techniques used in advanced cyber attacks, specifically using PowerShell and service creation for executing malicious activities, which align with tactics and techniques like Execution, Persistence, Privilege Escalation, and Lateral Movement.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement",
      "answer": "In order to detect known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement, you should analyze Windows system service logs with an emphasis on the following criteria:\n\n1. Focus on log entries from the Service Control Manager, specifically those with an EventID of 7045. This event ID is indicative of a service being installed on the system.\n\n2. Within these logs, search for service installation paths that exhibit suspicious characteristics, such as:\n   - Paths containing both 'ADMIN$' and '.exe', which might suggest the creation of a service to execute a remote administrative executable, a common tactic for maintaining access or executing commands with elevated privileges.\n   - Paths that include the environment variable '%COMSPEC%', alongside the keywords 'start' and 'powershell'. This pattern can indicate the execution of PowerShell commands through the command prompt (CMD), a technique often utilized for script execution or launching encoded or obfuscated attacks.\n   - Direct indications of PowerShell being used with options designed to hide the activity and possibly execute encoded commands (`powershell -nop -w hidden -encodedcommand`). This is a strong indicator of an attempt to bypass detection mechanisms by running PowerShell in a less conspicuous manner.\n   - Service paths that contain Base64 encoded command sequences, especially those indicating an attempt to execute code or scripts hosted externally (as evidenced by \"IEX (New-Object Net.Webclient).DownloadString\"). This method is often used to retrieve and execute malicious payloads from a controlled external source, typically a web server under the attacker's control.\n\n3. Any instances matching these patterns should be treated with a high level of suspicion. These patterns are indicative of methods associated with advanced persistent threats (APTs) like Cobalt Strike, focusing on stealthy elevation of privileges, lateral movement within a network, and potentially establishing persistence.\n\n4. While analyzing these logs, it's crucial to approach with an understanding that not all matches will indicate a malicious presence (as there can be unknown false positives), but due to the critical nature of these signs, each detection should be investigated thoroughly.\n\nThis approach leverages tailoring detection mechanisms towards the complexity and sophistication of tactics and techniques used in advanced cyber attacks, specifically using PowerShell and service creation for executing malicious activities, which align with tactics and techniques like Execution, Persistence, Privilege Escalation, and Lateral Movement."
    }
  },
  {
    "instruction": "How can I detect: remote RPC calls to get event log information via EVEN or EVEN6",
    "context": "",
    "output": "In order to detect remote RPC calls to get event log information via EVEN or EVEN6, you should monitor your system's RPC firewall application logs for specific events. Here is how you can effectively carry out this detection process:\n\nYour environment must be set up with an RPC Firewall, a security application designed to regulate and monitor Remote Procedure Call (RPC) traffic. This setup should be configured to audit and block certain RPC activities, targeting processes identified by unique UUIDs: 82273fdc-e32a-18c3-3f78-827929dc23ea and f6beaff7-1e19-4fbb-9f8f-b89e2018337c. This specific configuration serves as a preliminary step to focus on potentially malicious RPC communication attempts.\n\nWhen monitoring the application logs generated by the RPC Firewall, look out for log entries categorized under the \"RPCFW\" event log. The entries of particular interest have an EventID of 3, which indicates an event tied to remote RPC calls attempting to access event log information. This is a critical marker for identifying suspicious activities.\n\nThe detection further narrows down to log entries involving the previously mentioned UUIDs associated with the RPC interfaces. These UUIDs are significant as they tie back to specific operations or processes that could be targeted by attackers seeking to retrieve event log data through remote RPC calls.\n\nBe aware that in some cases, these detections might flag legitimate remote administrative tasks involving Windows Events as potential threats. These are considered false positives and should be carefully validated to ensure that legitimate administrative activities are not disrupted.\n\nGiven this detection strategy's high importance level, it is crucial to actively monitor for these indicators and investigate any triggers to ensure that your system is protected against unauthorized attempts to access event log information via remote RPC calls. This approach is aligned with mitigating tactics and techniques related to unauthorized access and data extraction from systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls to get event log information via EVEN or EVEN6",
      "answer": "In order to detect remote RPC calls to get event log information via EVEN or EVEN6, you should monitor your system's RPC firewall application logs for specific events. Here is how you can effectively carry out this detection process:\n\nYour environment must be set up with an RPC Firewall, a security application designed to regulate and monitor Remote Procedure Call (RPC) traffic. This setup should be configured to audit and block certain RPC activities, targeting processes identified by unique UUIDs: 82273fdc-e32a-18c3-3f78-827929dc23ea and f6beaff7-1e19-4fbb-9f8f-b89e2018337c. This specific configuration serves as a preliminary step to focus on potentially malicious RPC communication attempts.\n\nWhen monitoring the application logs generated by the RPC Firewall, look out for log entries categorized under the \"RPCFW\" event log. The entries of particular interest have an EventID of 3, which indicates an event tied to remote RPC calls attempting to access event log information. This is a critical marker for identifying suspicious activities.\n\nThe detection further narrows down to log entries involving the previously mentioned UUIDs associated with the RPC interfaces. These UUIDs are significant as they tie back to specific operations or processes that could be targeted by attackers seeking to retrieve event log data through remote RPC calls.\n\nBe aware that in some cases, these detections might flag legitimate remote administrative tasks involving Windows Events as potential threats. These are considered false positives and should be carefully validated to ensure that legitimate administrative activities are not disrupted.\n\nGiven this detection strategy's high importance level, it is crucial to actively monitor for these indicators and investigate any triggers to ensure that your system is protected against unauthorized attempts to access event log information via remote RPC calls. This approach is aligned with mitigating tactics and techniques related to unauthorized access and data extraction from systems."
    }
  },
  {
    "instruction": "Please help me detect the following: SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
    "context": "",
    "output": "Sure!\nIn order to detect SyncAppvPublishingServer process execution which is usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Monitor Windows PowerShell script logs, ensuring that Script Block Logging is enabled to capture detailed logging information. Look specifically for any instances where 'SyncAppvPublishingServer.exe' is mentioned within the ScriptBlockText field of the logs. This particular process execution is known to be a method used by attackers to circumvent PowerShell execution restrictions. While monitoring for this activity, be aware that legitimate App-V clients might also trigger detections as they can use 'SyncAppvPublishingServer.exe' in non-malicious contexts, thus these instances should be considered as potential false positives. The severity level for this detection is considered medium, indicating a balance between the need for vigilance and the expected occurrence of false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
      "answer": "In order to detect SyncAppvPublishingServer process execution which is usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Monitor Windows PowerShell script logs, ensuring that Script Block Logging is enabled to capture detailed logging information. Look specifically for any instances where 'SyncAppvPublishingServer.exe' is mentioned within the ScriptBlockText field of the logs. This particular process execution is known to be a method used by attackers to circumvent PowerShell execution restrictions. While monitoring for this activity, be aware that legitimate App-V clients might also trigger detections as they can use 'SyncAppvPublishingServer.exe' in non-malicious contexts, thus these instances should be considered as potential false positives. The severity level for this detection is considered medium, indicating a balance between the need for vigilance and the expected occurrence of false positives."
    }
  },
  {
    "instruction": "How can I detect: Attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow.",
    "context": "",
    "output": "In order to attempt to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow, you should: Monitor Windows event logs for the classic PowerShell provider starting events that indicate an attempt to modify Windows Defender's settings. Specifically, look for the use of the 'Set-MpPreference' command in conjunction with parameters that aim to disable various protection features of Windows Defender such as real-time monitoring, archive scanning, behavior monitoring, intrusion prevention system, and scanning of removable drives, mapped network drives, and network files. The rule also covers attempts to disable script scanning and block at first sight feature which provides protection against new, unknown threats. Additionally, keep an eye out for modifications that set the default actions for high, low, moderate, and severe threats to 'Allow', which essentially instructs Windows Defender to ignore detected threats of these levels.\n\nBy closely monitoring for these specific command parameters, organizations can potentially detect malicious activities aimed at weakening Windows Defender's protective measures, thereby making the system more vulnerable to attacks. It is essential to investigate any such modifications as they could either be indicators of a malicious actor attempting to bypass security controls or legitimate troubleshooting efforts by system administrators. The level of concern for these detections is considered high, due to the implications of disabling critical security defenses within Windows Defender ATP.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow.",
      "answer": "In order to attempt to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow, you should: Monitor Windows event logs for the classic PowerShell provider starting events that indicate an attempt to modify Windows Defender's settings. Specifically, look for the use of the 'Set-MpPreference' command in conjunction with parameters that aim to disable various protection features of Windows Defender such as real-time monitoring, archive scanning, behavior monitoring, intrusion prevention system, and scanning of removable drives, mapped network drives, and network files. The rule also covers attempts to disable script scanning and block at first sight feature which provides protection against new, unknown threats. Additionally, keep an eye out for modifications that set the default actions for high, low, moderate, and severe threats to 'Allow', which essentially instructs Windows Defender to ignore detected threats of these levels.\n\nBy closely monitoring for these specific command parameters, organizations can potentially detect malicious activities aimed at weakening Windows Defender's protective measures, thereby making the system more vulnerable to attacks. It is essential to investigate any such modifications as they could either be indicators of a malicious actor attempting to bypass security controls or legitimate troubleshooting efforts by system administrators. The level of concern for these detections is considered high, due to the implications of disabling critical security defenses within Windows Defender ATP."
    }
  },
  {
    "instruction": "Explain how should I detect the following: driver load from a temporary directory",
    "context": "",
    "output": "In order to detect a driver load from a temporary directory, you should monitor driver load events on Windows systems and look specifically for drivers being loaded from paths that include the \\Temp\\ directory. This kind of activity is often indicative of malicious behavior, as legitimate drivers are generally not loaded from temporary directories. It's important to note that this detection strategy might result in a set of false positives depending on the applications present in the environment and their behaviors. Nonetheless, the significance of catching malicious driver loads justifies a high-level alert for such detections.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "driver load from a temporary directory",
      "answer": "In order to detect a driver load from a temporary directory, you should monitor driver load events on Windows systems and look specifically for drivers being loaded from paths that include the \\Temp\\ directory. This kind of activity is often indicative of malicious behavior, as legitimate drivers are generally not loaded from temporary directories. It's important to note that this detection strategy might result in a set of false positives depending on the applications present in the environment and their behaviors. Nonetheless, the significance of catching malicious driver loads justifies a high-level alert for such detections."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Obfuscated use of stdin to execute PowerShell",
    "context": "",
    "output": "In order to detect obfuscated use of stdin to execute PowerShell, you should focus on monitoring process creation logs within Windows environments. Specifically, look for command line executions that exhibit peculiar characteristics indicative of an attempt to obscure malicious activity. These executions often involve the use of the command prompt (`cmd`) followed by either `/c` or `/r` parameters, which are used to pass commands to the command prompt. A clear indicator of suspicious activity is the subsequent use of `powershell` within the same command line.\n\nMoreover, the presence of certain strings like 'noexit', 'input', and '$' within the command line may suggest an attempt to execute PowerShell commands in a way that avoids closing the PowerShell window, potentially reads input directly, or uses variables in a manner that could be indicative of script execution. This method might also include complicated expressions or command chains designed to download and execute scripts or commands directly from the internet or other sources, effectively bypassing simple detection mechanisms.\n\nIt is critical to note that such command lines might be heavily obfuscated, including the use of unexpected character cases, special characters, or escape sequences to evade simple text matching or pattern recognition. Thus, a combination of contains checks for 'cmd' and 'powershell', as well as for '/c' or '/r', coupled with specific strings like 'noexit' and patterns that suggest the passing of input or variables into PowerShell, should be applied to accurately identify potential threats.\n\nGiven the sophisticated nature of these obfuscation techniques, any detection must be approached with a degree of caution due to the potential for unknown false positives. Nevertheless, keeping the log monitoring at a high level of alertness for these specific patterns within Windows process creation logs stands as an essential strategy in identifying and mitigating the obfuscated use of stdin to execute PowerShell, aligning with tactics and techniques like `Execution` through `Command and Scripting Interpreter`.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should focus on monitoring process creation logs within Windows environments. Specifically, look for command line executions that exhibit peculiar characteristics indicative of an attempt to obscure malicious activity. These executions often involve the use of the command prompt (`cmd`) followed by either `/c` or `/r` parameters, which are used to pass commands to the command prompt. A clear indicator of suspicious activity is the subsequent use of `powershell` within the same command line.\n\nMoreover, the presence of certain strings like 'noexit', 'input', and '$' within the command line may suggest an attempt to execute PowerShell commands in a way that avoids closing the PowerShell window, potentially reads input directly, or uses variables in a manner that could be indicative of script execution. This method might also include complicated expressions or command chains designed to download and execute scripts or commands directly from the internet or other sources, effectively bypassing simple detection mechanisms.\n\nIt is critical to note that such command lines might be heavily obfuscated, including the use of unexpected character cases, special characters, or escape sequences to evade simple text matching or pattern recognition. Thus, a combination of contains checks for 'cmd' and 'powershell', as well as for '/c' or '/r', coupled with specific strings like 'noexit' and patterns that suggest the passing of input or variables into PowerShell, should be applied to accurately identify potential threats.\n\nGiven the sophisticated nature of these obfuscation techniques, any detection must be approached with a degree of caution due to the potential for unknown false positives. Nevertheless, keeping the log monitoring at a high level of alertness for these specific patterns within Windows process creation logs stands as an essential strategy in identifying and mitigating the obfuscated use of stdin to execute PowerShell, aligning with tactics and techniques like `Execution` through `Command and Scripting Interpreter`."
    }
  },
  {
    "instruction": "Please help me detect the following: program that invoked suspicious DNS queries known from Cobalt Strike beacons",
    "context": "",
    "output": "Sure!\nIn order to detect a program that invoked suspicious DNS queries known from Cobalt Strike beacons, you should focus on monitoring DNS query logs from Windows systems. Specifically, you're looking for DNS queries that either start with 'aaa.stage.' or 'post.1', or contain '.stage.123456.' within the query name. Detection is based on identifying any one of these query patterns in the logs, signaling potential Cobalt Strike beacon activity. It's crucial to be attentive to these patterns as they are significant indicators of compromise, possibly related to tactics and techniques such as Command and Control. The critical fields that should be analyzed in this context are the Image and CommandLine fields, which can provide additional context about the source of the DNS queries. However, be aware of potential unknown false positives that might arise in detection. This monitoring approach is labeled as critical due to its significance in identifying malicious activity related to Cobalt Strike, a common tool used in cyber attacks for establishing command and control channels.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "program that invoked suspicious DNS queries known from Cobalt Strike beacons",
      "answer": "In order to detect a program that invoked suspicious DNS queries known from Cobalt Strike beacons, you should focus on monitoring DNS query logs from Windows systems. Specifically, you're looking for DNS queries that either start with 'aaa.stage.' or 'post.1', or contain '.stage.123456.' within the query name. Detection is based on identifying any one of these query patterns in the logs, signaling potential Cobalt Strike beacon activity. It's crucial to be attentive to these patterns as they are significant indicators of compromise, possibly related to tactics and techniques such as Command and Control. The critical fields that should be analyzed in this context are the Image and CommandLine fields, which can provide additional context about the source of the DNS queries. However, be aware of potential unknown false positives that might arise in detection. This monitoring approach is labeled as critical due to its significance in identifying malicious activity related to Cobalt Strike, a common tool used in cyber attacks for establishing command and control channels."
    }
  },
  {
    "instruction": "Please help me detect the following: process connections to a Monero crypto mining pool",
    "context": "",
    "output": "Sure!\nIn order to detect process connections to a Monero crypto mining pool, you should monitor network connections coming from Linux systems that are directed towards specific domain names linked to known Monero mining pools. These include various global miner pool domains like 'pool.minexmr.com', 'mine.c3pool.com', 'xmr.2miners.com', and several others across different regions such as Europe, Asia, and the Americas. This encompasses a wide range of domains used by crypto miners to connect to mining pools for Monero, a popular cryptocurrency. It's crucial to acknowledge that while this activity may often be malicious, especially if the connections are originating from systems without the knowledge or consent of their owners, there could be instances where the use of such crypto miners is legitimate and authorized. Therefore, despite the high level of suspicion associated with these connections, one must consider the context of their occurrence to reduce the chances of false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process connections to a Monero crypto mining pool",
      "answer": "In order to detect process connections to a Monero crypto mining pool, you should monitor network connections coming from Linux systems that are directed towards specific domain names linked to known Monero mining pools. These include various global miner pool domains like 'pool.minexmr.com', 'mine.c3pool.com', 'xmr.2miners.com', and several others across different regions such as Europe, Asia, and the Americas. This encompasses a wide range of domains used by crypto miners to connect to mining pools for Monero, a popular cryptocurrency. It's crucial to acknowledge that while this activity may often be malicious, especially if the connections are originating from systems without the knowledge or consent of their owners, there could be instances where the use of such crypto miners is legitimate and authorized. Therefore, despite the high level of suspicion associated with these connections, one must consider the context of their occurrence to reduce the chances of false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of system utilities to discover files and directories",
    "context": "",
    "output": "In order to detect usage of system utilities to discover files and directories, you should monitor macOS process creation logs for activities that signal the use of certain system utilities in ways that could indicate reconnaissance efforts. Specifically, watch for:\n\n1. Use of the '/usr/bin/file' utility with a command line that is uncharacteristically long, which might suggest an attempt to execute the command across numerous files, possibly redirecting the output to a file, for example, '/tmp/output.txt'. This could indicate an attempt to discover and catalog file types and permissions en masse.\n\n2. Execution of the '/bin/ls' command with the '-R' option, which lists all files recursively under a directory. This is a common way to enumerate files and directories within a system.\n\n3. Invocation of the '/usr/bin/find' command, a powerful utility for searching files that meet certain criteria across a directory tree. Its use could signify an attempt to locate specific files or types of data.\n\n4. Execution of the '/usr/bin/mdfind' command, which utilizes the MacOS Spotlight indexing service to quickly find files and directories. Malicious actors could leverage this to speed up the process of locating valuable data.\n\n5. Use of the '/tree' command with any arguments (tracked when the command ends with '/tree'), which generates a recursive directory listing in a tree-like format. This visual representation of the directory structure can help attackers better understand the layout of the filesystem.\n\nIt's important to be aware that while these utilities are commonly used for benign tasks, their monitoring in this context is considered informational due to the potential for legitimate use cases resulting in false positives. Enhanced vigilance and potentially further investigation are recommended when these patterns are detected to discern between benign and malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of system utilities to discover files and directories",
      "answer": "In order to detect usage of system utilities to discover files and directories, you should monitor macOS process creation logs for activities that signal the use of certain system utilities in ways that could indicate reconnaissance efforts. Specifically, watch for:\n\n1. Use of the '/usr/bin/file' utility with a command line that is uncharacteristically long, which might suggest an attempt to execute the command across numerous files, possibly redirecting the output to a file, for example, '/tmp/output.txt'. This could indicate an attempt to discover and catalog file types and permissions en masse.\n\n2. Execution of the '/bin/ls' command with the '-R' option, which lists all files recursively under a directory. This is a common way to enumerate files and directories within a system.\n\n3. Invocation of the '/usr/bin/find' command, a powerful utility for searching files that meet certain criteria across a directory tree. Its use could signify an attempt to locate specific files or types of data.\n\n4. Execution of the '/usr/bin/mdfind' command, which utilizes the MacOS Spotlight indexing service to quickly find files and directories. Malicious actors could leverage this to speed up the process of locating valuable data.\n\n5. Use of the '/tree' command with any arguments (tracked when the command ends with '/tree'), which generates a recursive directory listing in a tree-like format. This visual representation of the directory structure can help attackers better understand the layout of the filesystem.\n\nIt's important to be aware that while these utilities are commonly used for benign tasks, their monitoring in this context is considered informational due to the potential for legitimate use cases resulting in false positives. Enhanced vigilance and potentially further investigation are recommended when these patterns are detected to discern between benign and malicious intent."
    }
  },
  {
    "instruction": "Explain how should I detect the following: API Token is revoked.",
    "context": "",
    "output": "In order to detect when an API Token is revoked, you should: Monitor Okta service logs for events of the type \"system.api_token.revoke\". This indicates that an API token, which is used to authenticate to the system programmatically, is being revoked. Notably, the revocation of API tokens can signify an administrative response to a potential compromise or an operational change. However, the reasons for revocation might vary and not all revocations are indicative of a security incident. The detection of such events is crucial for auditing and understanding the security posture regarding API access and usage within the environment. It's important to note that while this activity is flagged at a medium level of importance, not every instance of API token revocation is malicious or unauthorized. There might be legitimate reasons for these actions, and unknown false positives could occur, where actions are interpreted as suspicious without malicious intent. Therefore, context and further investigation into each specific event are vital for accurate assessment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "API Token is revoked.",
      "answer": "In order to detect when an API Token is revoked, you should: Monitor Okta service logs for events of the type \"system.api_token.revoke\". This indicates that an API token, which is used to authenticate to the system programmatically, is being revoked. Notably, the revocation of API tokens can signify an administrative response to a potential compromise or an operational change. However, the reasons for revocation might vary and not all revocations are indicative of a security incident. The detection of such events is crucial for auditing and understanding the security posture regarding API access and usage within the environment. It's important to note that while this activity is flagged at a medium level of importance, not every instance of API token revocation is malicious or unauthorized. There might be legitimate reasons for these actions, and unknown false positives could occur, where actions are interpreted as suspicious without malicious intent. Therefore, context and further investigation into each specific event are vital for accurate assessment."
    }
  },
  {
    "instruction": "Can you explain how to detect: shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation), you should: focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where a Java process (`java.exe`) is the parent process for the creation of command line (`cmd.exe`), PowerShell (`powershell.exe`), or PowerShell Core (`pwsh.exe`) processes. It's important to exclude any activity where the parent or child process's command line includes the term 'build', as this often indicates a legitimate use associated with Continuous Integration (CI) build agents rather than malicious activity. The detection holds a medium severity level, acknowledging that while not all instances of shell spawning from a Java process are malicious, this pattern warrants further investigation due to the potential link to exploitation efforts, like those seen with the log4j vulnerability. Be aware that legitimate uses of system binaries and company-specific internal usages might generate false positive alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation)",
      "answer": "In order to detect shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation), you should: focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where a Java process (`java.exe`) is the parent process for the creation of command line (`cmd.exe`), PowerShell (`powershell.exe`), or PowerShell Core (`pwsh.exe`) processes. It's important to exclude any activity where the parent or child process's command line includes the term 'build', as this often indicates a legitimate use associated with Continuous Integration (CI) build agents rather than malicious activity. The detection holds a medium severity level, acknowledging that while not all instances of shell spawning from a Java process are malicious, this pattern warrants further investigation due to the potential link to exploitation efforts, like those seen with the log4j vulnerability. Be aware that legitimate uses of system binaries and company-specific internal usages might generate false positive alerts."
    }
  },
  {
    "instruction": "How to detect: enumeration of other remote systems.",
    "context": "",
    "output": "In order to detect the enumeration of other remote systems, you should monitor for specific behaviors in process creation logs from Linux systems. Look for instances where the process image name ends with '/arp' and the command line contains the '-a' option. This could indicate an attempt to discover all devices on the local network. Alternatively, watch out for processes where the image name ends with '/ping' combined with command line arguments targeting a broad range of private and local IP addresses, indicative of probing the network. These include addresses within the ranges of 10.x.x.x, 192.168.x.x, 172.16.x.x to 172.31.x.x, 127.x.x.x, and the link-local address range 169.254.x.x. Detection of such activity suggests an adversary might be scanning the network to identify other machines and services that are running, which is a common precursor to further attacks. Keep in mind that there might be benign reasons behind these activities, such as legitimate administration tasks. The significance of these indicators is considered low in isolation but could warrant further investigation if observed in conjunction with other suspicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "enumeration of other remote systems.",
      "answer": "In order to detect the enumeration of other remote systems, you should monitor for specific behaviors in process creation logs from Linux systems. Look for instances where the process image name ends with '/arp' and the command line contains the '-a' option. This could indicate an attempt to discover all devices on the local network. Alternatively, watch out for processes where the image name ends with '/ping' combined with command line arguments targeting a broad range of private and local IP addresses, indicative of probing the network. These include addresses within the ranges of 10.x.x.x, 192.168.x.x, 172.16.x.x to 172.31.x.x, 127.x.x.x, and the link-local address range 169.254.x.x. Detection of such activity suggests an adversary might be scanning the network to identify other machines and services that are running, which is a common precursor to further attacks. Keep in mind that there might be benign reasons behind these activities, such as legitimate administration tasks. The significance of these indicators is considered low in isolation but could warrant further investigation if observed in conjunction with other suspicious activities."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious child processes of Wscript/Cscript",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious child processes of Wscript/Cscript, you should: Monitor for the creation of specific child processes initiated by either Wscript.exe or Cscript.exe on Windows systems. Focus particularly on child processes that are known for executing command-line instructions or scripts, such as Cmd.exe, Powershell.exe, or Pwsh.exe. Be extra vigilant if these child processes are executed with command-line arguments that include 'mshta' combined with a reference to 'http', or if there are invocations of 'rundll32', 'regsvr32', or 'msiexec'. These patterns can be indicative of malicious activities, although it is important to consider that there might be legitimate uses of these commands by administrators or third-party software, which could result in false positives. Therefore, each detected instance should be carefully investigated, and additional filtering criteria may be applied to refine detection accuracy. The detection leverages process creation logs in Windows environments, making use of specific attributes related to parent-child process relationships and command-line parameters to identify suspicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious child processes of Wscript/Cscript",
      "answer": "In order to detect suspicious child processes of Wscript/Cscript, you should: Monitor for the creation of specific child processes initiated by either Wscript.exe or Cscript.exe on Windows systems. Focus particularly on child processes that are known for executing command-line instructions or scripts, such as Cmd.exe, Powershell.exe, or Pwsh.exe. Be extra vigilant if these child processes are executed with command-line arguments that include 'mshta' combined with a reference to 'http', or if there are invocations of 'rundll32', 'regsvr32', or 'msiexec'. These patterns can be indicative of malicious activities, although it is important to consider that there might be legitimate uses of these commands by administrators or third-party software, which could result in false positives. Therefore, each detected instance should be carefully investigated, and additional filtering criteria may be applied to refine detection accuracy. The detection leverages process creation logs in Windows environments, making use of specific attributes related to parent-child process relationships and command-line parameters to identify suspicious activities."
    }
  },
  {
    "instruction": "How to detect: execution of php using the \"-r\" flag. This is could be used as a way to launch a reverse shell or execute live php code.",
    "context": "",
    "output": "In order to detect execution of php using the \"-r\" flag, which could be used as a way to launch a reverse shell or execute live php code, you should: focus on monitoring process creation logs within Windows systems. Look specifically for any processes that end with '\\php.exe' or have an original filename of 'php.exe'. Additionally, scrutinize the command line arguments to identify instances where the '-r' flag is used, as this indicates the potential execution of PHP code directly from the command line, a technique commonly utilized in malicious activities. Keep in mind that while this detection mechanism is crucial for uncovering potential threats, there may be unknown benign activities that could trigger false positives. The severity level associated with this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of php using the \"-r\" flag. This is could be used as a way to launch a reverse shell or execute live php code.",
      "answer": "In order to detect execution of php using the \"-r\" flag, which could be used as a way to launch a reverse shell or execute live php code, you should: focus on monitoring process creation logs within Windows systems. Look specifically for any processes that end with '\\php.exe' or have an original filename of 'php.exe'. Additionally, scrutinize the command line arguments to identify instances where the '-r' flag is used, as this indicates the potential execution of PHP code directly from the command line, a technique commonly utilized in malicious activities. Keep in mind that while this detection mechanism is crucial for uncovering potential threats, there may be unknown benign activities that could trigger false positives. The severity level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: potential SpEL Injection exploitation, which may lead to RCE.",
    "context": "",
    "output": "Sure!\nIn order to detect potential SpEL Injection exploitation, which may lead to RCE, you should focus on monitoring application error logs specifically from applications using the Spring framework. This detection relies on the presence of certain keywords within the logs that indicate a potential SpEL (Spring Expression Language) Injection attack. One critical keyword to look out for is 'org.springframework.expression.ExpressionException'. If this keyword appears in the application logs, it signals a possible attack attempt. It's important to ensure that the logs being monitored are filtered to include only entries with a severity of ERROR or above to increase the relevance of the detection.\n\nBe aware that not every occurrence of 'org.springframework.expression.ExpressionException' is indicative of an attack. Some instances may arise due to application bugs. Therefore, occurrences flagged by this detection technique should be further investigated to confirm whether they are indeed malicious attempts to exploit SpEL Injection vulnerabilities. This approach helps identify attackers attempting to execute code remotely by exploiting SpEL injection vulnerabilities, contributing to a robust cybersecurity posture against such advanced threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential SpEL Injection exploitation, which may lead to RCE.",
      "answer": "In order to detect potential SpEL Injection exploitation, which may lead to RCE, you should focus on monitoring application error logs specifically from applications using the Spring framework. This detection relies on the presence of certain keywords within the logs that indicate a potential SpEL (Spring Expression Language) Injection attack. One critical keyword to look out for is 'org.springframework.expression.ExpressionException'. If this keyword appears in the application logs, it signals a possible attack attempt. It's important to ensure that the logs being monitored are filtered to include only entries with a severity of ERROR or above to increase the relevance of the detection.\n\nBe aware that not every occurrence of 'org.springframework.expression.ExpressionException' is indicative of an attack. Some instances may arise due to application bugs. Therefore, occurrences flagged by this detection technique should be further investigated to confirm whether they are indeed malicious attempts to exploit SpEL Injection vulnerabilities. This approach helps identify attackers attempting to execute code remotely by exploiting SpEL injection vulnerabilities, contributing to a robust cybersecurity posture against such advanced threats."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential COM object hijacking where the \"Server\" (In/Out) is pointing to a supsicious or unsuale location",
    "context": "",
    "output": "In order to detect potential COM object hijacking where the \"Server\" (In/Out) is pointing to a suspicious or unusual location, you should focus on monitoring registry set actions within the Windows operating system where the event type is a 'SetValue' operation. This involves paying close attention to the TargetObject's starting path, which could be one of four key initial paths: 'HKCR\\CLSID\\', 'HKEY_CLASSES_ROOT\\CLSID\\', 'HKCU\\Software\\Classes\\CLSID\\', or 'HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\'. Additionally, the TargetObject should end with either '\\InprocServer32\\(Default)' or '\\LocalServer32\\(Default)', indicating it is targeting the default server locations for COM object registration.\n\nEqually important is to scrutinize the details field of the log for paths known to be commonly used by malicious actors, such as '\\Users\\Public\\', '\\Desktop\\', '\\AppData\\Local\\Temp\\', '\\Downloads\\', '\\Windows\\Temp\\', '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\', and '\\System32\\spool\\drivers\\color\\', the latter being specifically mentioned in relation to the Knotweed campaign. Placeholders like '%temp%', '%tmp%', and '%appdata%' are also considered suspicious and should be carefully evaluated.\n\nIt's critical to approach this detection with an understanding that there could be false positives, primarily due to legitimate applications that might use similar registry paths or operations. These instances should be meticulously validated and, if proven benign, added to an exclusion list to refine the detection process further.\n\nThis detection strategy aligns with the MITRE ATT&CK framework's tactics concerning persistence and privilege escalation, by exploiting the Windows COM object system to hijack the server process path, pointing it instead to a location controlled by the attacker, thereby achieving unauthorized persistence or elevated privileges on the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential COM object hijacking where the \"Server\" (In/Out) is pointing to a supsicious or unsuale location",
      "answer": "In order to detect potential COM object hijacking where the \"Server\" (In/Out) is pointing to a suspicious or unusual location, you should focus on monitoring registry set actions within the Windows operating system where the event type is a 'SetValue' operation. This involves paying close attention to the TargetObject's starting path, which could be one of four key initial paths: 'HKCR\\CLSID\\', 'HKEY_CLASSES_ROOT\\CLSID\\', 'HKCU\\Software\\Classes\\CLSID\\', or 'HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\'. Additionally, the TargetObject should end with either '\\InprocServer32\\(Default)' or '\\LocalServer32\\(Default)', indicating it is targeting the default server locations for COM object registration.\n\nEqually important is to scrutinize the details field of the log for paths known to be commonly used by malicious actors, such as '\\Users\\Public\\', '\\Desktop\\', '\\AppData\\Local\\Temp\\', '\\Downloads\\', '\\Windows\\Temp\\', '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\', and '\\System32\\spool\\drivers\\color\\', the latter being specifically mentioned in relation to the Knotweed campaign. Placeholders like '%temp%', '%tmp%', and '%appdata%' are also considered suspicious and should be carefully evaluated.\n\nIt's critical to approach this detection with an understanding that there could be false positives, primarily due to legitimate applications that might use similar registry paths or operations. These instances should be meticulously validated and, if proven benign, added to an exclusion list to refine the detection process further.\n\nThis detection strategy aligns with the MITRE ATT&CK framework's tactics concerning persistence and privilege escalation, by exploiting the Windows COM object system to hijack the server process path, pointing it instead to a location controlled by the attacker, thereby achieving unauthorized persistence or elevated privileges on the system."
    }
  },
  {
    "instruction": "Explain how should I detect the following: application is deleted in Azure.",
    "context": "",
    "output": "In order to identifies when an application is deleted in Azure, you should monitor the activity logs from Azure services for events related to the deletion of applications. Specifically, look out for messages that indicate an application was either \"Delete application\" or \"Hard Delete application.\" It is essential to be aware that these kinds of events can sometimes be legitimate actions carried out by system administrators. Therefore, it's advisable to confirm the legitimacy of such deletion activities by checking if the user identity, user agent, and/or hostname involved in the deletion are expected to make changes within your environment. Deletions initiated by unfamiliar users warrant further investigation. In cases where known behavior is consistently flagged by this monitoring but is deemed legitimate, those instances can be exempted to avoid false positives. The potential security risk associated with these events is rated at a medium level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "application is deleted in Azure.",
      "answer": "In order to identifies when an application is deleted in Azure, you should monitor the activity logs from Azure services for events related to the deletion of applications. Specifically, look out for messages that indicate an application was either \"Delete application\" or \"Hard Delete application.\" It is essential to be aware that these kinds of events can sometimes be legitimate actions carried out by system administrators. Therefore, it's advisable to confirm the legitimacy of such deletion activities by checking if the user identity, user agent, and/or hostname involved in the deletion are expected to make changes within your environment. Deletions initiated by unfamiliar users warrant further investigation. In cases where known behavior is consistently flagged by this monitoring but is deemed legitimate, those instances can be exempted to avoid false positives. The potential security risk associated with these events is rated at a medium level."
    }
  },
  {
    "instruction": "How can I detect: load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG) or malware for privilege escalation",
    "context": "",
    "output": "In order to detect the load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG) or malware for privilege escalation, you should: monitor Windows driver load activity for the loading of specific drivers or libraries that are known to be utilized by malicious software for gaining elevated privileges. Focus on detecting the loading of files with names that end with '\\WinRing0x64.sys', '\\WinRing0.sys', '\\WinRing0.dll', and '\\WinRing0x64.dll', or the alternative form '\\winring00x64.sys'. Additionally, pay attention to the presence of a specific hash ('IMPHASH=D41FA95D4642DC981F10DE36F4DC8CD7' or with a lowercase equivalent) that is associated with these suspicious files. This hash indicates a potentially malicious driver or library being loaded. Such activities should raise suspicion, as they are indicative of actions related to privilege escalation attempts by unauthorized software or individuals. It is crucial to investigate these detections with high priority due to their serious nature and potential impact.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG) or malware for privilege escalation",
      "answer": "In order to detect the load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG) or malware for privilege escalation, you should: monitor Windows driver load activity for the loading of specific drivers or libraries that are known to be utilized by malicious software for gaining elevated privileges. Focus on detecting the loading of files with names that end with '\\WinRing0x64.sys', '\\WinRing0.sys', '\\WinRing0.dll', and '\\WinRing0x64.dll', or the alternative form '\\winring00x64.sys'. Additionally, pay attention to the presence of a specific hash ('IMPHASH=D41FA95D4642DC981F10DE36F4DC8CD7' or with a lowercase equivalent) that is associated with these suspicious files. This hash indicates a potentially malicious driver or library being loaded. Such activities should raise suspicion, as they are indicative of actions related to privilege escalation attempts by unauthorized software or individuals. It is crucial to investigate these detections with high priority due to their serious nature and potential impact."
    }
  },
  {
    "instruction": "How can I detect: deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group",
    "context": "",
    "output": "In order to detect the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group, you should: Monitor Windows security logs, specifically for Event ID 4701, which is indicative of a task scheduling action. Pay close attention to any modifications involving the \u201c\\Microsoft\\Windows\\Defrag\\ScheduledDefrag\u201d task. This specific task is related to the automated defragmentation of a Windows system's drives, and alterations to its schedule could be a tactic used by attackers, like the Slingshot APT group, to reduce system performance or evade detection mechanisms that rely on the predictable performance of the system. Any unexpected activity regarding this task, especially its deactivation or disabling, should be treated with suspicion. This monitoring requires the system's audit policy to be configured to log 'Audit Other Object Access Events' successfully. While encountering such an event could potentially be benign, it could also indicate malicious activity, with very few known legitimate reasons for such an alteration to occur.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group",
      "answer": "In order to detect the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group, you should: Monitor Windows security logs, specifically for Event ID 4701, which is indicative of a task scheduling action. Pay close attention to any modifications involving the \u201c\\Microsoft\\Windows\\Defrag\\ScheduledDefrag\u201d task. This specific task is related to the automated defragmentation of a Windows system's drives, and alterations to its schedule could be a tactic used by attackers, like the Slingshot APT group, to reduce system performance or evade detection mechanisms that rely on the predictable performance of the system. Any unexpected activity regarding this task, especially its deactivation or disabling, should be treated with suspicion. This monitoring requires the system's audit policy to be configured to log 'Audit Other Object Access Events' successfully. While encountering such an event could potentially be benign, it could also indicate malicious activity, with very few known legitimate reasons for such an alteration to occur."
    }
  },
  {
    "instruction": "Can you explain how to detect: unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity",
    "context": "",
    "output": "Certainly!\n\nIn order to detect unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity, you should: Focus on monitoring the creation of processes on Windows systems, especially looking out for instances where the ImagingDevices.exe process is initiated by or gives rise to suspicious processes. Specifically, be alert for the ImagingDevices.exe process being spawned by unexpected parent processes such as WmiPrvSE.exe, svchost.exe, or dllhost.exe. Additionally, it is crucial to remain vigilant for cases where ImagingDevices.exe itself acts as a parent to suspicious child processes. Though specifics on what constitutes a suspicious child process are not provided, typically, these would include command-line utilities or scripts like cmd or PowerShell that are not standard children of ImagingDevices.exe. Due to the high level of concern and potential for false positives being unknown, such detection efforts should be prioritized and investigated with due diligence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity",
      "answer": "In order to detect unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity, you should: Focus on monitoring the creation of processes on Windows systems, especially looking out for instances where the ImagingDevices.exe process is initiated by or gives rise to suspicious processes. Specifically, be alert for the ImagingDevices.exe process being spawned by unexpected parent processes such as WmiPrvSE.exe, svchost.exe, or dllhost.exe. Additionally, it is crucial to remain vigilant for cases where ImagingDevices.exe itself acts as a parent to suspicious child processes. Though specifics on what constitutes a suspicious child process are not provided, typically, these would include command-line utilities or scripts like cmd or PowerShell that are not standard children of ImagingDevices.exe. Due to the high level of concern and potential for false positives being unknown, such detection efforts should be prioritized and investigated with due diligence."
    }
  },
  {
    "instruction": "Please help me detect the following: use of rar.exe, on the command line, to create an archive with password protection or with a specific compression level. This is pretty indicative of malicious actions.",
    "context": "",
    "output": "Sure!\nIn order to detect the use of rar.exe, on the command line, to create an archive with password protection or with a specific compression level, which is pretty indicative of malicious actions, you should: Monitor Windows process creation logs for occurrences of command line executions involving rar.exe with specific command-line arguments. Look for the use of '-hp' in the command line, which is used to add password protection to an archive. Additionally, be alert for the use of '-m' or ' a ' in the command line, which indicates setting a specific compression level for the archive. Both conditions must be met for an alert to be generated. Be aware, however, that there might be legitimate uses of these command-line flags with Winrar or other command-line tools, which could result in false positives. The alert generated from this detection is considered high level, signifying a strong indicator of potentially malicious activity involving compressed files.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of rar.exe, on the command line, to create an archive with password protection or with a specific compression level. This is pretty indicative of malicious actions.",
      "answer": "In order to detect the use of rar.exe, on the command line, to create an archive with password protection or with a specific compression level, which is pretty indicative of malicious actions, you should: Monitor Windows process creation logs for occurrences of command line executions involving rar.exe with specific command-line arguments. Look for the use of '-hp' in the command line, which is used to add password protection to an archive. Additionally, be alert for the use of '-m' or ' a ' in the command line, which indicates setting a specific compression level for the archive. Both conditions must be met for an alert to be generated. Be aware, however, that there might be legitimate uses of these command-line flags with Winrar or other command-line tools, which could result in false positives. The alert generated from this detection is considered high level, signifying a strong indicator of potentially malicious activity involving compressed files."
    }
  },
  {
    "instruction": "How can I detect: potential exploitation attempt of CVE-2023-23752 an Improper access check, in web service endpoints in Joomla",
    "context": "",
    "output": "In order to detect the potential exploitation attempt of CVE-2023-23752, an improper access check in web service endpoints in Joomla, you should monitor your webserver logs for GET requests that target the Joomla API endpoint '/api/index.php/v1/' with a query parameter including 'public=true'. This observation should focus on capturing the client's IP address and DNS name to aid in identifying the source of these requests. It is important to note that vulnerability scanners might trigger this detection mechanism; hence, they are considered as potential false positives. Given the high severity level of this issue, any match to this pattern signifies a high-priority alert for an attempted exploit of the vulnerability in question.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential exploitation attempt of CVE-2023-23752 an Improper access check, in web service endpoints in Joomla",
      "answer": "In order to detect the potential exploitation attempt of CVE-2023-23752, an improper access check in web service endpoints in Joomla, you should monitor your webserver logs for GET requests that target the Joomla API endpoint '/api/index.php/v1/' with a query parameter including 'public=true'. This observation should focus on capturing the client's IP address and DNS name to aid in identifying the source of these requests. It is important to note that vulnerability scanners might trigger this detection mechanism; hence, they are considered as potential false positives. Given the high severity level of this issue, any match to this pattern signifies a high-priority alert for an attempted exploit of the vulnerability in question."
    }
  },
  {
    "instruction": "How to detect: Microsoft Cloud App Security reported when a user signs into your sanctioned apps from a risky IP address.",
    "context": "",
    "output": "In order to detect when a Microsoft Cloud App Security reported when a user signs into your sanctioned apps from a risky IP address, you should monitor logs from the threat management service within Microsoft 365. Specifically, look for events sourced from the SecurityComplianceCenter that report successful logon attempts noted as \"Log on from a risky IP address.\" This activity indicates that the system has identified and recorded an instance where a user has successfully signed into one of your organization's approved applications from an IP address that has been flagged as potentially dangerous, possibly implying a security threat or unauthorized access attempt. It's important to note that while this detection mechanism is a valuable part of a broader security strategy, there may be instances where legitimate logins are flagged due to various reasons unknown, making it crucial to assess each alert on a case-by-case basis. The severity of these events is considered to be of a medium level, reflecting the potential risk they pose to the secured environment. This detection is aligned with understanding and mitigating threats, particularly focusing on tactics and techniques such as Initial Access and Valid Accounts, which are essential concepts within the MITRE ATT&CK framework that describe how adversaries may gain access to a system using legitimate credentials from an IP address that poses a reputation risk.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported when a user signs into your sanctioned apps from a risky IP address.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported when a user signs into your sanctioned apps from a risky IP address, you should monitor logs from the threat management service within Microsoft 365. Specifically, look for events sourced from the SecurityComplianceCenter that report successful logon attempts noted as \"Log on from a risky IP address.\" This activity indicates that the system has identified and recorded an instance where a user has successfully signed into one of your organization's approved applications from an IP address that has been flagged as potentially dangerous, possibly implying a security threat or unauthorized access attempt. It's important to note that while this detection mechanism is a valuable part of a broader security strategy, there may be instances where legitimate logins are flagged due to various reasons unknown, making it crucial to assess each alert on a case-by-case basis. The severity of these events is considered to be of a medium level, reflecting the potential risk they pose to the secured environment. This detection is aligned with understanding and mitigating threats, particularly focusing on tactics and techniques such as Initial Access and Valid Accounts, which are essential concepts within the MITRE ATT&CK framework that describe how adversaries may gain access to a system using legitimate credentials from an IP address that poses a reputation risk."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when an Policy Rule is Modified or Deleted.",
    "context": "",
    "output": "In order to detect when a Policy Rule is Modified or Deleted, you should monitor log data from Okta services. Specifically, look for events where the event type indicates either a policy rule update or a policy rule deletion. These modifications to policy rules can signal unauthorized changes aiming to weaken security policies or bypass security controls. Keeping an eye on these events is vital as they might not necessarily be malicious on their own, but without legitimate reasons, they could indicate a security risk or a breach attempt. The level of concern for such events is considered medium, meaning while they may not always represent malicious activities, they are significant enough to warrant investigation. False positives can occur, meaning there might be instances where policy rules are legitimately modified or deleted, and distinguishing between malicious and non-malicious changes requires further investigation. This monitoring process is crucial for maintaining the integrity of security policies within an organization's Okta environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an Policy Rule is Modified or Deleted.",
      "answer": "In order to detect when a Policy Rule is Modified or Deleted, you should monitor log data from Okta services. Specifically, look for events where the event type indicates either a policy rule update or a policy rule deletion. These modifications to policy rules can signal unauthorized changes aiming to weaken security policies or bypass security controls. Keeping an eye on these events is vital as they might not necessarily be malicious on their own, but without legitimate reasons, they could indicate a security risk or a breach attempt. The level of concern for such events is considered medium, meaning while they may not always represent malicious activities, they are significant enough to warrant investigation. False positives can occur, meaning there might be instances where policy rules are legitimately modified or deleted, and distinguishing between malicious and non-malicious changes requires further investigation. This monitoring process is crucial for maintaining the integrity of security policies within an organization's Okta environment."
    }
  },
  {
    "instruction": "How can I detect: loading of a DLL by the VMware Xfer utility from the non-default directory which may be an attempt to sideload arbitrary DLL",
    "context": "",
    "output": "In order to detect loading of a DLL by the VMware Xfer utility from the non-default directory which may be an attempt to sideload arbitrary DLL, you should monitor for events where specific files are loaded within the Windows operating system, more precisely within the context of image loading events. Focus on any occurrences where the VMware Xfer utility, identified by the 'VMwareXferlogs.exe', loads DLL files, with particular attention to 'glib-2.0.dll'. It's important to distinguish legitimate use cases from malicious activities by filtering out events where the DLL is loaded from the default VMware installation directory, typically 'C:\\Program Files\\VMware\\'. This approach aims to identify attempts to exploit the VMware Xfer utility for DLL sideloading, a technique often used by adversaries to execute malicious code by loading it into a trusted process. Given the nature of this method, occurrences are less likely to represent false positives and should therefore be treated with a high level of scrutiny.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loading of a DLL by the VMware Xfer utility from the non-default directory which may be an attempt to sideload arbitrary DLL",
      "answer": "In order to detect loading of a DLL by the VMware Xfer utility from the non-default directory which may be an attempt to sideload arbitrary DLL, you should monitor for events where specific files are loaded within the Windows operating system, more precisely within the context of image loading events. Focus on any occurrences where the VMware Xfer utility, identified by the 'VMwareXferlogs.exe', loads DLL files, with particular attention to 'glib-2.0.dll'. It's important to distinguish legitimate use cases from malicious activities by filtering out events where the DLL is loaded from the default VMware installation directory, typically 'C:\\Program Files\\VMware\\'. This approach aims to identify attempts to exploit the VMware Xfer utility for DLL sideloading, a technique often used by adversaries to execute malicious code by loading it into a trusted process. Given the nature of this method, occurrences are less likely to represent false positives and should therefore be treated with a high level of scrutiny."
    }
  },
  {
    "instruction": "Can you explain how to detect: The \"Trace log generation tool for Media Foundation Tools\" (Mftrace.exe) can be used to execute arbitrary binaries",
    "context": "",
    "output": "Certainly!\n\nIn order to detect malicious use of the \"Trace log generation tool for Media Foundation Tools\" (Mftrace.exe) to execute arbitrary binaries, you should monitor process creation logs on Windows systems. Focus on spotting any instances where the process image or its original filename ends with '\\mftrace.exe'. Additionally, observe command lines that either contain '.exe ' (indicating an executable being specified after a space) or end with '.exe' as these patterns suggest the launching of an executable file. It's also crucial to watch for any parent processes with an image name ending in '\\mftrace.exe', indicating mftrace.exe may be used to initiate other executables. Always consider the potential for legitimate use of mftrace.exe for tracing purposes, as these instances can be false positives. This approach is characterized by a medium level of alertness and targets the identification of techniques and tactics like Execution, Command and Scripting Interpreter, and Execution through API, helping to safeguard against the exploitation of mftrace.exe for executing unauthorized binaries.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The \"Trace log generation tool for Media Foundation Tools\" (Mftrace.exe) can be used to execute arbitrary binaries",
      "answer": "In order to detect malicious use of the \"Trace log generation tool for Media Foundation Tools\" (Mftrace.exe) to execute arbitrary binaries, you should monitor process creation logs on Windows systems. Focus on spotting any instances where the process image or its original filename ends with '\\mftrace.exe'. Additionally, observe command lines that either contain '.exe ' (indicating an executable being specified after a space) or end with '.exe' as these patterns suggest the launching of an executable file. It's also crucial to watch for any parent processes with an image name ending in '\\mftrace.exe', indicating mftrace.exe may be used to initiate other executables. Always consider the potential for legitimate use of mftrace.exe for tracing purposes, as these instances can be false positives. This approach is characterized by a medium level of alertness and targets the identification of techniques and tactics like Execution, Command and Scripting Interpreter, and Execution through API, helping to safeguard against the exploitation of mftrace.exe for executing unauthorized binaries."
    }
  },
  {
    "instruction": "How can I detect: execution GMER tool based on image and hash fields.",
    "context": "",
    "output": "In order to detect the execution GMER tool based on image and hash fields, you should monitor Windows process creation logs for any activity that involves the execution of 'gmer.exe'. Pay particular attention to processes that have either of the specific hashes: MD5 hash as 'E9DC058440D321AA17D0600B3CA0AB04', SHA1 hash as '539C228B6B332F5AA523E5CE358C16647D8BBE57', or SHA256 hash as 'E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173'. These criteria are meticulously chosen to pinpoint the tool's execution without capturing unrelated processes, making false positives unlikely. The delineation on process creation and specific hash values is of high importance for ensuring the security and integrity of the system by identifying possible unauthorized or suspicious use of GMER, which is a tool known for its capabilities in the analysis and detection of rootkits.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution GMER tool based on image and hash fields.",
      "answer": "In order to detect the execution GMER tool based on image and hash fields, you should monitor Windows process creation logs for any activity that involves the execution of 'gmer.exe'. Pay particular attention to processes that have either of the specific hashes: MD5 hash as 'E9DC058440D321AA17D0600B3CA0AB04', SHA1 hash as '539C228B6B332F5AA523E5CE358C16647D8BBE57', or SHA256 hash as 'E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173'. These criteria are meticulously chosen to pinpoint the tool's execution without capturing unrelated processes, making false positives unlikely. The delineation on process creation and specific hash values is of high importance for ensuring the security and integrity of the system by identifying possible unauthorized or suspicious use of GMER, which is a tool known for its capabilities in the analysis and detection of rootkits."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect DLL deletions from Spooler Service driver folder. This might be a potential exploitation attempt of CVE-2021-1675",
    "context": "",
    "output": "Sure!\nIn order to detect DLL deletions from Spooler Service driver folder, which might be a potential exploitation attempt of CVE-2021-1675, you should: Monitor for file deletion events on Windows systems, specifically focusing on the files within the \"C:\\Windows\\System32\\spool\\drivers\\x64\\3\\\" directory. This is because an attack could involve deleting DLL files from this specific folder, a tactic that might be used in exploiting the mentioned vulnerability. The deletion events initiated by the process \"\\spoolsv.exe\" are of particular interest since this process is related to the Windows Print Spooler service, which is directly implicated in CVE-2021-1675. If such a deletion is detected, it should be considered suspicious and a potential indicator of an ongoing attack exploiting this vulnerability. The severity of this rule is set to high due to the potential impact of exploiting CVE-2021-1675.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect DLL deletions from Spooler Service driver folder. This might be a potential exploitation attempt of CVE-2021-1675",
      "answer": "In order to detect DLL deletions from Spooler Service driver folder, which might be a potential exploitation attempt of CVE-2021-1675, you should: Monitor for file deletion events on Windows systems, specifically focusing on the files within the \"C:\\Windows\\System32\\spool\\drivers\\x64\\3\\\" directory. This is because an attack could involve deleting DLL files from this specific folder, a tactic that might be used in exploiting the mentioned vulnerability. The deletion events initiated by the process \"\\spoolsv.exe\" are of particular interest since this process is related to the Windows Print Spooler service, which is directly implicated in CVE-2021-1675. If such a deletion is detected, it should be considered suspicious and a potential indicator of an ongoing attack exploiting this vulnerability. The severity of this rule is set to high due to the potential impact of exploiting CVE-2021-1675."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of rcedit to potentially alter executable PE metadata properties, which could conceal efforts to rename system utilities for defense evasion.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of rcedit to potentially alter executable PE metadata properties, which could conceal efforts to rename system utilities for defense evasion, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where processes are created with images ending in '\\rcedit-x64.exe' or '\\rcedit-x86.exe'. These executables are associated with rcedit, a tool that can edit resources of another executable. Pay attention not only to the name and path of the executable but also to the command line arguments. Specifically, look for command line arguments containing '--set-', which is indicative of commands used to edit various metadata properties of an executable, like setting resource strings or version strings.\n\nFurther investigation should focus on command line arguments that include modifications to metadata attributes such as 'OriginalFileName', 'CompanyName', 'FileDescription', 'ProductName', 'ProductVersion', and 'LegalCopyright'. These attributes are critical since changes to them can be used by an attacker to disguise malicious binaries as legitimate system utilities, facilitating defense evasion.\n\nHowever, it's important to consider that the rcedit tool might also be legitimately used by administrators or software developers to update binary metadata. Therefore, occurrences of such process creations should be analyzed in the context of their environment to discern between legitimate uses and potentially malicious activities.\n\nThis monitoring strategy leverages Windows process creation logs to identify attempts to misuse the rcedit tool for altering executable properties in a manner that could aid in evading defenses by renaming or otherwise disguising system utilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of rcedit to potentially alter executable PE metadata properties, which could conceal efforts to rename system utilities for defense evasion.",
      "answer": "In order to detect the use of rcedit to potentially alter executable PE metadata properties, which could conceal efforts to rename system utilities for defense evasion, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where processes are created with images ending in '\\rcedit-x64.exe' or '\\rcedit-x86.exe'. These executables are associated with rcedit, a tool that can edit resources of another executable. Pay attention not only to the name and path of the executable but also to the command line arguments. Specifically, look for command line arguments containing '--set-', which is indicative of commands used to edit various metadata properties of an executable, like setting resource strings or version strings.\n\nFurther investigation should focus on command line arguments that include modifications to metadata attributes such as 'OriginalFileName', 'CompanyName', 'FileDescription', 'ProductName', 'ProductVersion', and 'LegalCopyright'. These attributes are critical since changes to them can be used by an attacker to disguise malicious binaries as legitimate system utilities, facilitating defense evasion.\n\nHowever, it's important to consider that the rcedit tool might also be legitimately used by administrators or software developers to update binary metadata. Therefore, occurrences of such process creations should be analyzed in the context of their environment to discern between legitimate uses and potentially malicious activities.\n\nThis monitoring strategy leverages Windows process creation logs to identify attempts to misuse the rcedit tool for altering executable properties in a manner that could aid in evading defenses by renaming or otherwise disguising system utilities."
    }
  }
]