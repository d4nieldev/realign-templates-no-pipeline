[
  {
    "instruction": "How can I detect: Log4J Wstomcat process execution as seen in Mint Sandstorm activity",
    "context": "",
    "output": "In order to detect Log4J Wstomcat process execution as seen in Mint Sandstorm activity, you should: Focus on monitoring process creation events within Windows systems. Specifically, look for instances where the Wstomcat service ('ws_tomcatservice.exe') is listed as the parent image and is responsible for starting the 'repadmin.exe' process. This particular pattern of activity is indicative of the tactics and techniques associated with Mint Sandstorm activity, where adversaries might exploit Log4J vulnerabilities through specific process execution chains. It is important to pay close attention to these events, although be mindful that there might be cases where similar activity does not signify malicious intent, but such instances are currently unknown. The severity of detecting this activity is considered high, underscoring the potential risk involved.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Log4J Wstomcat process execution as seen in Mint Sandstorm activity",
      "answer": "In order to detect Log4J Wstomcat process execution as seen in Mint Sandstorm activity, you should: Focus on monitoring process creation events within Windows systems. Specifically, look for instances where the Wstomcat service ('ws_tomcatservice.exe') is listed as the parent image and is responsible for starting the 'repadmin.exe' process. This particular pattern of activity is indicative of the tactics and techniques associated with Mint Sandstorm activity, where adversaries might exploit Log4J vulnerabilities through specific process execution chains. It is important to pay close attention to these events, although be mindful that there might be cases where similar activity does not signify malicious intent, but such instances are currently unknown. The severity of detecting this activity is considered high, underscoring the potential risk involved."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files.",
    "context": "",
    "output": "Sure!\nIn order to detect execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files, you should: monitor the creation of processes on Windows systems for occurrences of the GUP.exe (the Notepad++ updater) being executed. Specifically, look for cases where the executable image name ends with '\\GUP.exe' or the original file name is identified as 'gup.exe'. Additionally, pay attention to the command line arguments used during the process creation, especially if it includes both ' -unzipTo ' and an 'http' indicating an attempt to download files from the internet. However, you should exclude any instances where the GUP.exe is launched by Notepad++ itself, as indicated by having Notepad++ (notepad++.exe) as the parent process. Be aware that there could be false positives if there are legitimate uses of the GUP outside of notepad++ that aren't currently identified. This approach is crucial for identifying instances where the Notepad++ updater might be abused to download malicious files onto a system, which is a high-severity security concern.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files.",
      "answer": "In order to detect execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files, you should: monitor the creation of processes on Windows systems for occurrences of the GUP.exe (the Notepad++ updater) being executed. Specifically, look for cases where the executable image name ends with '\\GUP.exe' or the original file name is identified as 'gup.exe'. Additionally, pay attention to the command line arguments used during the process creation, especially if it includes both ' -unzipTo ' and an 'http' indicating an attempt to download files from the internet. However, you should exclude any instances where the GUP.exe is launched by Notepad++ itself, as indicated by having Notepad++ (notepad++.exe) as the parent process. Be aware that there could be false positives if there are legitimate uses of the GUP outside of notepad++ that aren't currently identified. This approach is crucial for identifying instances where the Notepad++ updater might be abused to download malicious files onto a system, which is a high-severity security concern."
    }
  },
  {
    "instruction": "How can I detect: process, such as mimikatz, accesses the memory of svchost to dump credentials",
    "context": "",
    "output": "In order to detect when a process, such as mimikatz, accesses the memory of svchost to dump credentials, you should: Focus on Windows process access logs and look for events where a process targets the 'svchost.exe' file. Specifically, you should look for any process that has been granted access with the permissions '0x143a' to the memory of 'svchost.exe'. However, you must exclude any access instances where the source of the access is a known and trusted process, notably 'services.exe' or 'msiexec.exe'. This approach is designed to elevate the detection accuracy by minimizing false positives from legitimate executable accesses while ensuring high sensitivity to potentially malicious activities like credential dumping by targeting system processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process, such as mimikatz, accesses the memory of svchost to dump credentials",
      "answer": "In order to detect when a process, such as mimikatz, accesses the memory of svchost to dump credentials, you should: Focus on Windows process access logs and look for events where a process targets the 'svchost.exe' file. Specifically, you should look for any process that has been granted access with the permissions '0x143a' to the memory of 'svchost.exe'. However, you must exclude any access instances where the source of the access is a known and trusted process, notably 'services.exe' or 'msiexec.exe'. This approach is designed to elevate the detection accuracy by minimizing false positives from legitimate executable accesses while ensuring high sensitivity to potentially malicious activities like credential dumping by targeting system processes."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of the \"Squirrel.exe\" binary as a LOLBIN. This binary is part of multiple software installations (Slack, Teams, Discord, etc.)",
    "context": "",
    "output": "In order to detect the usage of the \"Squirrel.exe\" binary as a LOLBIN, which is part of multiple software installations such as Slack, Teams, and Discord, you should: Monitor the creation of processes on Windows systems, particularly focusing on the execution of 'squirrel.exe' and 'update.exe'. Pay attention to command line parameters that indicate downloading or updating actions, such as '--download', '--update', '--updateRollback=' along with command lines containing 'http' to catch potential remote fetching activities. Additionally, watch for execution flags like '--processStart', '--processStartAndWait', and '--createShortcut' that could be indicative of suspicious activities. It's important to filter out legitimate use cases of these binaries by applications like Discord, GitHub Desktop, Microsoft Teams, and Yammer based on specific command line patterns that are characteristic of normal operations. For instance, exceptions for Discord would involve its update executable path in 'C:\\Users\\[Username]\\AppData\\Local\\Discord\\Update.exe' with command lines that include '--processStart Discord.exe', and similar filters for GitHub Desktop, Teams, and Yammer, identifying genuine shortcuts and process starts. Be aware that there might be false positives, especially with electron-based applications, so a medium level of caution is advised while interpreting the results.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Squirrel.exe\" binary as a LOLBIN. This binary is part of multiple software installations (Slack, Teams, Discord, etc.)",
      "answer": "In order to detect the usage of the \"Squirrel.exe\" binary as a LOLBIN, which is part of multiple software installations such as Slack, Teams, and Discord, you should: Monitor the creation of processes on Windows systems, particularly focusing on the execution of 'squirrel.exe' and 'update.exe'. Pay attention to command line parameters that indicate downloading or updating actions, such as '--download', '--update', '--updateRollback=' along with command lines containing 'http' to catch potential remote fetching activities. Additionally, watch for execution flags like '--processStart', '--processStartAndWait', and '--createShortcut' that could be indicative of suspicious activities. It's important to filter out legitimate use cases of these binaries by applications like Discord, GitHub Desktop, Microsoft Teams, and Yammer based on specific command line patterns that are characteristic of normal operations. For instance, exceptions for Discord would involve its update executable path in 'C:\\Users\\[Username]\\AppData\\Local\\Discord\\Update.exe' with command lines that include '--processStart Discord.exe', and similar filters for GitHub Desktop, Teams, and Yammer, identifying genuine shortcuts and process starts. Be aware that there might be false positives, especially with electron-based applications, so a medium level of caution is advised while interpreting the results."
    }
  },
  {
    "instruction": "How can I detect: usage of the \"Import-Module\" cmdlet in order to add new Cmdlets to the current PowerShell session",
    "context": "",
    "output": "In order to detect usage of the \"Import-Module\" cmdlet in order to add new Cmdlets to the current PowerShell session, you should: focus on monitoring process creation within Windows environments. Specifically, keep an eye out for any instances where PowerShell (either through 'powershell.exe' or 'pwsh.exe') is invoked, as well as cases where the original file names 'PowerShell.EXE' or 'pwsh.dll' are used. Additionally, pay attention to command lines that contain the strings 'Import-Module ' or 'ipmo ', as these are indicative of attempts to import modules into the PowerShell session. It is important to apply this detection across all processes meeting these criteria. However, be aware that in many legitimate scenarios, scripts may import modules inline, meaning that this behavior is not exclusively malicious but should rather be used for hunting purposes with a low alert level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Import-Module\" cmdlet in order to add new Cmdlets to the current PowerShell session",
      "answer": "In order to detect usage of the \"Import-Module\" cmdlet in order to add new Cmdlets to the current PowerShell session, you should: focus on monitoring process creation within Windows environments. Specifically, keep an eye out for any instances where PowerShell (either through 'powershell.exe' or 'pwsh.exe') is invoked, as well as cases where the original file names 'PowerShell.EXE' or 'pwsh.dll' are used. Additionally, pay attention to command lines that contain the strings 'Import-Module ' or 'ipmo ', as these are indicative of attempts to import modules into the PowerShell session. It is important to apply this detection across all processes meeting these criteria. However, be aware that in many legitimate scenarios, scripts may import modules inline, meaning that this behavior is not exclusively malicious but should rather be used for hunting purposes with a low alert level."
    }
  },
  {
    "instruction": "Can you explain how to detect: Identifies when DNS zone is modified or deleted.",
    "context": "",
    "output": "Certainly!\n\nIn order to identifies when DNS zone is modified or deleted, you should: focus on monitoring Azure activity logs for events where the operation name starts with 'MICROSOFT.NETWORK/DNSZONES' and ends with '/WRITE' or '/DELETE'. This approach helps in identifying potentially malicious activities aimed at altering or removing DNS zones, which could lead to various security issues such as redirecting users to malicious sites or disrupting network operations. It's important to consider that while these modifications can be legitimate actions performed by system administrators, any DNS zone modification or deletion that appears unfamiliar or unauthorized should be promptly investigated. Verify the identity of the user making changes, the user agent, and hostname involved to ensure they should have access to make such changes in your environment. This monitoring is categorized with a medium level of importance and is associated with tactics and techniques such as DNS modification and deletion. To minimize false positives, known administrator behaviors that frequently modify or delete DNS zones can be exempted from monitoring.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies when DNS zone is modified or deleted.",
      "answer": "In order to identifies when DNS zone is modified or deleted, you should: focus on monitoring Azure activity logs for events where the operation name starts with 'MICROSOFT.NETWORK/DNSZONES' and ends with '/WRITE' or '/DELETE'. This approach helps in identifying potentially malicious activities aimed at altering or removing DNS zones, which could lead to various security issues such as redirecting users to malicious sites or disrupting network operations. It's important to consider that while these modifications can be legitimate actions performed by system administrators, any DNS zone modification or deletion that appears unfamiliar or unauthorized should be promptly investigated. Verify the identity of the user making changes, the user agent, and hostname involved to ensure they should have access to make such changes in your environment. This monitoring is categorized with a medium level of importance and is associated with tactics and techniques such as DNS modification and deletion. To minimize false positives, known administrator behaviors that frequently modify or delete DNS zones can be exempted from monitoring."
    }
  },
  {
    "instruction": "How can I detect: powershell scripts that import modules from suspicious directories",
    "context": "",
    "output": "In order to detect PowerShell scripts that import modules from suspicious directories, you should monitor process creation events on Windows systems for command lines that contain specific patterns indicating an import operation targeting unusual or risky file paths. Specifically, watch for the PowerShell \"Import-Module\" command or its alias \"ipmo,\" used with paths pointing to temporary directories (accessible via environment variables like \"$Env:Temp\" and \"$Env:Appdata\"), or the \"C:\\Users\\Public\\\" directory. These command lines might appear in various forms, including with and without quotation marks around the path, and with the paths being directly called or referenced through environment variables. This monitoring is crucial due to the common abuse of these directories by attackers to execute malicious PowerShell modules as part of their tactics. The tactics often associated with this behavior include execution and persistence, as attackers leverage this method to run code and maintain their foothold within a compromised system. Be aware that while monitoring for these patterns, there may be legitimate uses of these commands that could generate false positives, which are marked as \"Unknown\". The overall risk level for this type of activity is considered medium, underscoring the importance of vigilance without overestimating the threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "powershell scripts that import modules from suspicious directories",
      "answer": "In order to detect PowerShell scripts that import modules from suspicious directories, you should monitor process creation events on Windows systems for command lines that contain specific patterns indicating an import operation targeting unusual or risky file paths. Specifically, watch for the PowerShell \"Import-Module\" command or its alias \"ipmo,\" used with paths pointing to temporary directories (accessible via environment variables like \"$Env:Temp\" and \"$Env:Appdata\"), or the \"C:\\Users\\Public\\\" directory. These command lines might appear in various forms, including with and without quotation marks around the path, and with the paths being directly called or referenced through environment variables. This monitoring is crucial due to the common abuse of these directories by attackers to execute malicious PowerShell modules as part of their tactics. The tactics often associated with this behavior include execution and persistence, as attackers leverage this method to run code and maintain their foothold within a compromised system. Be aware that while monitoring for these patterns, there may be legitimate uses of these commands that could generate false positives, which are marked as \"Unknown\". The overall risk level for this type of activity is considered medium, underscoring the importance of vigilance without overestimating the threat."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of files that look like exports of the local SAM (Security Account Manager)",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of files that look like exports of the local SAM (Security Account Manager), you should: Monitor Windows file events for any creation or modification activities where filenames end with specific patterns such as '\\Temp\\sam', '\\sam.sav', '\\Intel\\sam', '\\sam.hive', '\\Perflogs\\sam', '\\ProgramData\\sam', '\\Users\\Public\\sam', '\\AppData\\Local\\sam', '\\AppData\\Roaming\\sam', and '_ShadowSteal.zip', which is associated with the ShadowSteal malware. Also, watch for filenames that contain patterns like '\\hive_sam_', indicating the use of tools like hivenightmare, as well as variations including '\\sam.save', '\\sam.export', '\\~reg_sam.save', '\\sam_backup', '\\sam.bck', and '\\sam.backup'. These indicators suggest an attempt to export or backup the Security Account Manager (SAM) file, which contains sensitive system and user account information. Note that there might be rare instances where similar file activity is part of legitimate administrative activities, however, under a high alert level, these should be scrutinized closely.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of files that look like exports of the local SAM (Security Account Manager)",
      "answer": "In order to detect the creation of files that look like exports of the local SAM (Security Account Manager), you should: Monitor Windows file events for any creation or modification activities where filenames end with specific patterns such as '\\Temp\\sam', '\\sam.sav', '\\Intel\\sam', '\\sam.hive', '\\Perflogs\\sam', '\\ProgramData\\sam', '\\Users\\Public\\sam', '\\AppData\\Local\\sam', '\\AppData\\Roaming\\sam', and '_ShadowSteal.zip', which is associated with the ShadowSteal malware. Also, watch for filenames that contain patterns like '\\hive_sam_', indicating the use of tools like hivenightmare, as well as variations including '\\sam.save', '\\sam.export', '\\~reg_sam.save', '\\sam_backup', '\\sam.bck', and '\\sam.backup'. These indicators suggest an attempt to export or backup the Security Account Manager (SAM) file, which contains sensitive system and user account information. Note that there might be rare instances where similar file activity is part of legitimate administrative activities, however, under a high alert level, these should be scrutinized closely."
    }
  },
  {
    "instruction": "Can you explain how to detect: attack technique pass the hash which is used to move laterally inside the network",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the attack technique pass the hash which is used to move laterally inside the network, you should monitor specific events and conditions within Windows security logs. Focus on capturing event IDs 4624, which signify a successful logon, and 4625, which indicate a failed logon attempt. These events are particularly relevant when the logon type is 3, representing a network logon which is commonly used during lateral movement attempts. Additionally, the logon process name should be 'NtLmSsp', which is indicative of NTLM (NT LAN Manager) authentication, often exploited in pass the hash attacks.\n\nIt is crucial to pay attention to the originating and target workstation names in these events. The condition implies that both the workstation from where the logon attempt was made and the target computer should match your network's workstation naming conventions (referred here as '%Workstations%'). This helps in pinpointing the attempts that are specifically targeted at moving laterally within your network.\n\nHowever, it's important to exclude any logon attempts that are recorded with the target username as 'ANONYMOUS LOGON'. These might not be related to malicious activity and can lead to false positives. Speaking of which, legitimate administrator activities could also trigger these conditions and should be considered when evaluating alerts.\n\nThis focused monitoring approach, by analyzing network logon attempts via the NTLM authentication involving specific workstations, aids in discerning potential lateral movement activities facilitated by pass the hash attacks. It stands on the medium level of alert severity due to the balance between the necessity of detecting malicious activities and the potential for false positives, such as routine administrator tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attack technique pass the hash which is used to move laterally inside the network",
      "answer": "In order to detect the attack technique pass the hash which is used to move laterally inside the network, you should monitor specific events and conditions within Windows security logs. Focus on capturing event IDs 4624, which signify a successful logon, and 4625, which indicate a failed logon attempt. These events are particularly relevant when the logon type is 3, representing a network logon which is commonly used during lateral movement attempts. Additionally, the logon process name should be 'NtLmSsp', which is indicative of NTLM (NT LAN Manager) authentication, often exploited in pass the hash attacks.\n\nIt is crucial to pay attention to the originating and target workstation names in these events. The condition implies that both the workstation from where the logon attempt was made and the target computer should match your network's workstation naming conventions (referred here as '%Workstations%'). This helps in pinpointing the attempts that are specifically targeted at moving laterally within your network.\n\nHowever, it's important to exclude any logon attempts that are recorded with the target username as 'ANONYMOUS LOGON'. These might not be related to malicious activity and can lead to false positives. Speaking of which, legitimate administrator activities could also trigger these conditions and should be considered when evaluating alerts.\n\nThis focused monitoring approach, by analyzing network logon attempts via the NTLM authentication involving specific workstations, aids in discerning potential lateral movement activities facilitated by pass the hash attacks. It stands on the medium level of alert severity due to the balance between the necessity of detecting malicious activities and the potential for false positives, such as routine administrator tasks."
    }
  },
  {
    "instruction": "Please help me detect the following: Obfuscated use of Clip.exe to execute PowerShell",
    "context": "",
    "output": "Sure!\nIn order to Detect Obfuscated use of Clip.exe to execute PowerShell, you should: Monitor Windows system logs for events that signify the unusual use of the Clip.exe by scrutinizing activities logged by the Service Control Manager. Specifically, look for event ID 7045, which represents a service installation. The critical aspect to watch for in these logs is the execution path that includes 'cmd' (indicating command prompt usage), '&&' (a method to chain commands together), and 'clipboard]::' (suggesting an attempt to interact with the clipboard in a potentially obfuscated manner). Such a combination of elements in the ImagePath indicates an attempt to leverage the clipboard utility (Clip.exe) to execute PowerShell commands, possibly in a concealed way. The level of concern for such findings is high, although there might be instances where similar patterns arise without malicious intent (known as unknown false positives). This detection strategy is aligned with identifying tactics and techniques like Execution, Obfuscation, and Command and Scripting Interpreter within the framework of understanding cyber threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated use of Clip.exe to execute PowerShell",
      "answer": "In order to Detect Obfuscated use of Clip.exe to execute PowerShell, you should: Monitor Windows system logs for events that signify the unusual use of the Clip.exe by scrutinizing activities logged by the Service Control Manager. Specifically, look for event ID 7045, which represents a service installation. The critical aspect to watch for in these logs is the execution path that includes 'cmd' (indicating command prompt usage), '&&' (a method to chain commands together), and 'clipboard]::' (suggesting an attempt to interact with the clipboard in a potentially obfuscated manner). Such a combination of elements in the ImagePath indicates an attempt to leverage the clipboard utility (Clip.exe) to execute PowerShell commands, possibly in a concealed way. The level of concern for such findings is high, although there might be instances where similar patterns arise without malicious intent (known as unknown false positives). This detection strategy is aligned with identifying tactics and techniques like Execution, Obfuscation, and Command and Scripting Interpreter within the framework of understanding cyber threats."
    }
  },
  {
    "instruction": "Explain how should I detect the following: flashplayer update from an unofficial location",
    "context": "",
    "output": "In order to detect a flashplayer update from an unofficial location, you should: Monitor proxy logs for specific patterns in URIs indicating an attempt to download Flash Player updates. Look for accesses to URLs containing '/flash_install.php' or ending with '/install_flash_player.exe'. These accesses suggest an attempt to install Flash Player, potentially mimicking a legitimate update mechanism. However, to accurately identify malicious activity, it's crucial to exclude any accesses to these resources hosted on domains ending with '.adobe.com', as this domain is associated with the legitimate Adobe Flash Player updates. The focus on excluding the official Adobe domain helps in reducing false positives, particularly concerning URLs that are not known locations for Flash Player downloads. The significance of this monitoring approach is heightened not only by the high level of risk associated with unauthorized Flash Player installations\u2014which could lead to malware infections or other security breaches\u2014but also categorizes the activity based on exploitation and possibly delivery of malicious payloads, considering it under tactics like execution, persistence, or privilege escalation if further leveraged by attackers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "flashplayer update from an unofficial location",
      "answer": "In order to detect a flashplayer update from an unofficial location, you should: Monitor proxy logs for specific patterns in URIs indicating an attempt to download Flash Player updates. Look for accesses to URLs containing '/flash_install.php' or ending with '/install_flash_player.exe'. These accesses suggest an attempt to install Flash Player, potentially mimicking a legitimate update mechanism. However, to accurately identify malicious activity, it's crucial to exclude any accesses to these resources hosted on domains ending with '.adobe.com', as this domain is associated with the legitimate Adobe Flash Player updates. The focus on excluding the official Adobe domain helps in reducing false positives, particularly concerning URLs that are not known locations for Flash Player downloads. The significance of this monitoring approach is heightened not only by the high level of risk associated with unauthorized Flash Player installations\u2014which could lead to malware infections or other security breaches\u2014but also categorizes the activity based on exploitation and possibly delivery of malicious payloads, considering it under tactics like execution, persistence, or privilege escalation if further leveraged by attackers."
    }
  },
  {
    "instruction": "Please help me detect the following: an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292.\nYou will likely have to tune this rule for your organization, but it is certainly something you should look for and could have applications for malicious activity beyond CVE-2021-42292.\n",
    "context": "",
    "output": "Sure!\nIn order to detect an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292, you should: \n\nMonitor network connections made by the Excel application on Windows systems, focusing on connections that are initiated by it. Pay particular attention to connections where the destination IP address is not within the IPv6 format and avoids the commonly used private IP address ranges such as '10.x.x.x', '192.168.x.x', and '172.16.x.x' to '172.31.x.x', including the loopback address '127.0.0.1'. These conditions help in identifying potentially malicious activity where Excel might be used as a vector for attack, specifically targeting vulnerabilities like CVE-2021-42292. \n\nIt's important to tune out legitimate connections often seen in business environments, including those to domains related to Microsoft or other operational needs, and connections to templates or resources that might be hosted on internal or trusted external sites. Given the high likelihood of encountering benign triggers due to regular use of Excel in organizational settings, it's advised to regularly review and refine the detection criteria based on observed traffic patterns and business use cases to minimize false positives. This tailored approach will help in maintaining an effective detection strategy for monitoring and mitigating potential security threats leveraging Excel as an attack vector.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292.\nYou will likely have to tune this rule for your organization, but it is certainly something you should look for and could have applications for malicious activity beyond CVE-2021-42292.\n",
      "answer": "In order to detect an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292, you should: \n\nMonitor network connections made by the Excel application on Windows systems, focusing on connections that are initiated by it. Pay particular attention to connections where the destination IP address is not within the IPv6 format and avoids the commonly used private IP address ranges such as '10.x.x.x', '192.168.x.x', and '172.16.x.x' to '172.31.x.x', including the loopback address '127.0.0.1'. These conditions help in identifying potentially malicious activity where Excel might be used as a vector for attack, specifically targeting vulnerabilities like CVE-2021-42292. \n\nIt's important to tune out legitimate connections often seen in business environments, including those to domains related to Microsoft or other operational needs, and connections to templates or resources that might be hosted on internal or trusted external sites. Given the high likelihood of encountering benign triggers due to regular use of Excel in organizational settings, it's advised to regularly review and refine the detection criteria based on observed traffic patterns and business use cases to minimize false positives. This tailored approach will help in maintaining an effective detection strategy for monitoring and mitigating potential security threats leveraging Excel as an attack vector."
    }
  },
  {
    "instruction": "Please help me detect the following: process execution patterns related to Griffon malware as reported by Kaspersky",
    "context": "",
    "output": "Sure!\nIn order to detect process execution patterns related to Griffon malware as reported by Kaspersky, you should: Monitor Windows process creation events for the execution patterns that closely match the known characteristics of Griffon malware. This involves looking for processes that are initiated with command lines containing specific markers. The key indicators include paths that reference the local temporary directory ('\\local\\temp\\'), the use of script execution commands ('//b /e:jscript'), and the inclusion of '.txt' files in the command line. Such patterns are critical to identify and are unlikely to generate false positives, signaling a strong need for immediate investigation when detected.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process execution patterns related to Griffon malware as reported by Kaspersky",
      "answer": "In order to detect process execution patterns related to Griffon malware as reported by Kaspersky, you should: Monitor Windows process creation events for the execution patterns that closely match the known characteristics of Griffon malware. This involves looking for processes that are initiated with command lines containing specific markers. The key indicators include paths that reference the local temporary directory ('\\local\\temp\\'), the use of script execution commands ('//b /e:jscript'), and the inclusion of '.txt' files in the command line. Such patterns are critical to identify and are unlikely to generate false positives, signaling a strong need for immediate investigation when detected."
    }
  },
  {
    "instruction": "How to detect: various anomalies in relation to regsvr32.exe",
    "context": "",
    "output": "In order to detect various anomalies in relation to regsvr32.exe, you should: Monitor Windows process creation logs for specific patterns involving regsvr32.exe, a legitimate Windows command, that may indicate malicious activity. Pay special attention to processes where regsvr32.exe is involved in the following scenarios: \n\n1. regsvr32.exe is executed with command line paths containing the Temp directory.\n2. regsvr32.exe is launched by known scripting environments like PowerShell (including powershell.exe, pwsh.exe, and powershell_ise.exe) or cmd.exe, suggesting script-based exploitation or lateral movement.\n3. Command lines invoking regsvr32.exe contain URLs (signaled by HTTP or FTP in the command line) followed by \"scrobj.dll\", indicating potential remote script object registration, a tactic often used to fetch and execute malicious code.\n4. regsvr32.exe is the parent process for script hosts cscript.exe or wscript.exe, or in cases where Office applications like EXCEL.EXE are used to indirectly call regsvr32.exe, hinting at document-based malware or phishing attempts.\n5. Specific attention should be paid to command lines ending with unusual extensions for regsvr32.exe operations such as image extensions (.jpg, .jpeg, .png, .gif) or temporary files (.bin, .tmp, .temp, .txt), which could be used to disguise malicious scripts or payloads.\n6. Also, watch for command lines containing paths to the user's AppData\\Local or C:\\Users\\Public directories when used in conjunction with regsvr32.exe, as these paths can be indicative of attempts to execute or drop malicious payloads on the system.\n\nExclude any activity related to legitimate application paths such as Microsoft Teams, WebEx, or Box's sync feature, as well as the legitimate use of RpcProxy.dll to avoid false positives. The focus here is to identify and investigate suspicious or anomalous usage patterns of regsvr32.exe that deviate from normal operational or system maintenance activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "various anomalies in relation to regsvr32.exe",
      "answer": "In order to detect various anomalies in relation to regsvr32.exe, you should: Monitor Windows process creation logs for specific patterns involving regsvr32.exe, a legitimate Windows command, that may indicate malicious activity. Pay special attention to processes where regsvr32.exe is involved in the following scenarios: \n\n1. regsvr32.exe is executed with command line paths containing the Temp directory.\n2. regsvr32.exe is launched by known scripting environments like PowerShell (including powershell.exe, pwsh.exe, and powershell_ise.exe) or cmd.exe, suggesting script-based exploitation or lateral movement.\n3. Command lines invoking regsvr32.exe contain URLs (signaled by HTTP or FTP in the command line) followed by \"scrobj.dll\", indicating potential remote script object registration, a tactic often used to fetch and execute malicious code.\n4. regsvr32.exe is the parent process for script hosts cscript.exe or wscript.exe, or in cases where Office applications like EXCEL.EXE are used to indirectly call regsvr32.exe, hinting at document-based malware or phishing attempts.\n5. Specific attention should be paid to command lines ending with unusual extensions for regsvr32.exe operations such as image extensions (.jpg, .jpeg, .png, .gif) or temporary files (.bin, .tmp, .temp, .txt), which could be used to disguise malicious scripts or payloads.\n6. Also, watch for command lines containing paths to the user's AppData\\Local or C:\\Users\\Public directories when used in conjunction with regsvr32.exe, as these paths can be indicative of attempts to execute or drop malicious payloads on the system.\n\nExclude any activity related to legitimate application paths such as Microsoft Teams, WebEx, or Box's sync feature, as well as the legitimate use of RpcProxy.dll to avoid false positives. The focus here is to identify and investigate suspicious or anomalous usage patterns of regsvr32.exe that deviate from normal operational or system maintenance activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of certutil with the \"encode\" flag to encode a file to base64, which can be abused by threat actors and attackers for data exfiltration, you should: Monitor for process creation events on Windows systems, specifically looking for the execution of 'certutil.exe'. Check the command line for the presence of either '-encode' or '/encode' flags. Such activity may indicate an attempt to misuse CertUtil for encoding files to Base64, a technique that could potentially be used in data exfiltration scenarios. It's important to note that while this behavior might suggest malicious intent, CertUtil is a legitimate tool that can also be used for benign purposes. Therefore, some legitimate actions might be flagged as false positives, and additional context or filters should be applied to refine detection accuracy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration",
      "answer": "In order to detect the execution of certutil with the \"encode\" flag to encode a file to base64, which can be abused by threat actors and attackers for data exfiltration, you should: Monitor for process creation events on Windows systems, specifically looking for the execution of 'certutil.exe'. Check the command line for the presence of either '-encode' or '/encode' flags. Such activity may indicate an attempt to misuse CertUtil for encoding files to Base64, a technique that could potentially be used in data exfiltration scenarios. It's important to note that while this behavior might suggest malicious intent, CertUtil is a legitimate tool that can also be used for benign purposes. Therefore, some legitimate actions might be flagged as false positives, and additional context or filters should be applied to refine detection accuracy."
    }
  },
  {
    "instruction": "Please help me detect the following: script interpreter wscript/cscript opening a network connection. Adversaries may use script to download malicious payloads.",
    "context": "",
    "output": "Sure!\nIn order to detect a script interpreter wscript/cscript opening a network connection, which adversaries may use to download malicious payloads, you should: Focus on analyzing network connection logs from Windows systems. Identify instances where an outgoing network connection is initiated by the images linked to either 'wscript.exe' or 'cscript.exe.' These executables are commonly associated with Windows Script Host, capable of running scripts on Windows machines. Given these characteristics, activity from these interpreters concerning network connections warrants scrutiny. It's important to be aware that there may be legitimate scripts that also trigger these conditions; hence, the detection level is considered medium. Monitoring for such activities helps in identifying potential attempts by attackers to use scripting environments to download malicious code onto the targeted systems. The associated tactics and techniques include Execution through Scripting and Command and Scripting Interpreter, underlining the usage of these interpreters by adversaries in their attack chain.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "script interpreter wscript/cscript opening a network connection. Adversaries may use script to download malicious payloads.",
      "answer": "In order to detect a script interpreter wscript/cscript opening a network connection, which adversaries may use to download malicious payloads, you should: Focus on analyzing network connection logs from Windows systems. Identify instances where an outgoing network connection is initiated by the images linked to either 'wscript.exe' or 'cscript.exe.' These executables are commonly associated with Windows Script Host, capable of running scripts on Windows machines. Given these characteristics, activity from these interpreters concerning network connections warrants scrutiny. It's important to be aware that there may be legitimate scripts that also trigger these conditions; hence, the detection level is considered medium. Monitoring for such activities helps in identifying potential attempts by attackers to use scripting environments to download malicious code onto the targeted systems. The associated tactics and techniques include Execution through Scripting and Command and Scripting Interpreter, underlining the usage of these interpreters by adversaries in their attack chain."
    }
  },
  {
    "instruction": "Explain how should I detect the following: user downloads file by using CertOC.exe",
    "context": "",
    "output": "In order to detect when a user downloads file by using CertOC.exe, you should: Monitor the creation of processes on Windows systems, with a particular focus on identifying instances where the process image name ends with '\\certoc.exe' or when the original file name is 'CertOC.exe'. Additionally, watch for command lines that contain '-GetCACAPS'. Both criteria need to be met for an alert to be considered accurate. This detection process is tagged under the MITRE ATT&CK tactics and techniques related to Execution. Be aware that there might be situations where legitimate activities trigger an alert, although such false positives are not currently known. The significance of detections based on these criteria is considered high, indicating a strong likelihood of malicious activity when such conditions are met.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user downloads file by using CertOC.exe",
      "answer": "In order to detect when a user downloads file by using CertOC.exe, you should: Monitor the creation of processes on Windows systems, with a particular focus on identifying instances where the process image name ends with '\\certoc.exe' or when the original file name is 'CertOC.exe'. Additionally, watch for command lines that contain '-GetCACAPS'. Both criteria need to be met for an alert to be considered accurate. This detection process is tagged under the MITRE ATT&CK tactics and techniques related to Execution. Be aware that there might be situations where legitimate activities trigger an alert, although such false positives are not currently known. The significance of detections based on these criteria is considered high, indicating a strong likelihood of malicious activity when such conditions are met."
    }
  },
  {
    "instruction": "Please help me detect the following: alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
    "context": "",
    "output": "Sure!\nIn order to detect alternate PowerShell hosts potentially bypassing detections looking for powershell.exe, you should: Focus on monitoring PowerShell activity within the Windows environment, particularly through the PowerShell module logging. Pay special attention to the context information recorded in these logs. Any event that contains context information is of interest, as malicious actors often exploit PowerShell's flexibility for executing commands.\n\nBe extra vigilant for specific indicators of alternate PowerShell invocation methods, which include but are not limited to, PowerShell being called directly from the command line (identified through keywords like 'powershell' or 'powershell.exe'), or invoked from directories without specifying the full \".exe\" extension, such as \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell\" or its SysWOW64 counterpart. Also, look for cases where PowerShell is launched with inverted slashes in the path, which is a less common technique used to evade simple detection mechanisms.\n\nFurthermore, the detection should account for other executables that could be misused to host PowerShell scripts or commands indirectly. These include the Diagnostic Script Host \"C:\\WINDOWS\\System32\\sdiagnhost.exe -Embedding\", used by MSDT, ConfigSyncRun.exe related to Citrix environments, the Active Directory Administrative Center Enhancements tool \"C:\\Windows\\system32\\dsac.exe\", the Windows Remote Management host \"C:\\Windows\\system32\\wsmprovhost.exe -Embedding\", among others. Monitoring these executable paths for unusual or unexpected PowerShell activity can reveal attempts to bypass traditional PowerShell execution monitoring.\n\nAdditionally, watch for PowerShell commands related to help updates, like 'Update-Help' or messages indicating a failure to update help for a module, as these can be misused in attack scenarios.\n\nHowever, be mindful of legitimate software that might directly invoke PowerShell for various non-malicious purposes. Programs that explicitly require PowerShell, MSP Detection Searcher, and certain Citrix configurations can generate similar activity, potentially leading to false positives.\n\nBy examining these aspects across the Windows ps_module log source with a medium level of scrutiny, you will enhance detection capabilities against adversaries attempting to leverage alternate methods for executing PowerShell commands, thus potentially bypassing traditional detection approaches that only focus on direct 'powershell.exe' invocations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
      "answer": "In order to detect alternate PowerShell hosts potentially bypassing detections looking for powershell.exe, you should: Focus on monitoring PowerShell activity within the Windows environment, particularly through the PowerShell module logging. Pay special attention to the context information recorded in these logs. Any event that contains context information is of interest, as malicious actors often exploit PowerShell's flexibility for executing commands.\n\nBe extra vigilant for specific indicators of alternate PowerShell invocation methods, which include but are not limited to, PowerShell being called directly from the command line (identified through keywords like 'powershell' or 'powershell.exe'), or invoked from directories without specifying the full \".exe\" extension, such as \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell\" or its SysWOW64 counterpart. Also, look for cases where PowerShell is launched with inverted slashes in the path, which is a less common technique used to evade simple detection mechanisms.\n\nFurthermore, the detection should account for other executables that could be misused to host PowerShell scripts or commands indirectly. These include the Diagnostic Script Host \"C:\\WINDOWS\\System32\\sdiagnhost.exe -Embedding\", used by MSDT, ConfigSyncRun.exe related to Citrix environments, the Active Directory Administrative Center Enhancements tool \"C:\\Windows\\system32\\dsac.exe\", the Windows Remote Management host \"C:\\Windows\\system32\\wsmprovhost.exe -Embedding\", among others. Monitoring these executable paths for unusual or unexpected PowerShell activity can reveal attempts to bypass traditional PowerShell execution monitoring.\n\nAdditionally, watch for PowerShell commands related to help updates, like 'Update-Help' or messages indicating a failure to update help for a module, as these can be misused in attack scenarios.\n\nHowever, be mindful of legitimate software that might directly invoke PowerShell for various non-malicious purposes. Programs that explicitly require PowerShell, MSP Detection Searcher, and certain Citrix configurations can generate similar activity, potentially leading to false positives.\n\nBy examining these aspects across the Windows ps_module log source with a medium level of scrutiny, you will enhance detection capabilities against adversaries attempting to leverage alternate methods for executing PowerShell commands, thus potentially bypassing traditional detection approaches that only focus on direct 'powershell.exe' invocations."
    }
  },
  {
    "instruction": "Can you explain how to detect: change of user type from \"Guest\" to \"Member\" for potential elevation of privilege.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the change of user type from \"Guest\" to \"Member\" for potential elevation of privilege, you should focus on monitoring Azure audit logs. Specifically, look for logs under the UserManagement category where the operation name is \"Update user\". The key indicator of this activity is when the properties.message field includes a change in the user's display name from \"Guest\" to \"Member\", as shown by the oldValue being \"[\\\"Guest\\\"]\" and newValue being \"[\\\"Member\\\"]\". It's essential to consider certain actions as acceptable, such as changes approved by the System Administrator; these are typically identified as false positives and should be handled accordingly. The severity level of this activity is considered medium, suggesting that while it's important, it may not immediately indicate a direct threat but should prompt further investigation. This monitoring approach is aligned with understanding tactics and techniques related to potential elevation of privilege attempts, ensuring that your defense mechanisms are adept at identifying such security events.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "change of user type from \"Guest\" to \"Member\" for potential elevation of privilege.",
      "answer": "In order to detect the change of user type from \"Guest\" to \"Member\" for potential elevation of privilege, you should focus on monitoring Azure audit logs. Specifically, look for logs under the UserManagement category where the operation name is \"Update user\". The key indicator of this activity is when the properties.message field includes a change in the user's display name from \"Guest\" to \"Member\", as shown by the oldValue being \"[\\\"Guest\\\"]\" and newValue being \"[\\\"Member\\\"]\". It's essential to consider certain actions as acceptable, such as changes approved by the System Administrator; these are typically identified as false positives and should be handled accordingly. The severity level of this activity is considered medium, suggesting that while it's important, it may not immediately indicate a direct threat but should prompt further investigation. This monitoring approach is aligned with understanding tactics and techniques related to potential elevation of privilege attempts, ensuring that your defense mechanisms are adept at identifying such security events."
    }
  },
  {
    "instruction": "Explain how should I detect the following: possible NTLM coercion via certutil using the 'syncwithWU' flag",
    "context": "",
    "output": "In order to detect possible NTLM coercion via certutil using the 'syncwithWU' flag, you should: Monitor process creation events on Windows systems for the execution of 'certutil.exe'. Specifically, look for instances where the process image ends with '\\certutil.exe' or has 'CertUtil.exe' as the OriginalFileName. Additionally, pay attention to the command line arguments, ensuring that they contain both ' -syncwithWU ' and a double backslash ('\\\\\\\\'). These criteria must all be met in order to flag a potential NTLM coercion attempt. It is important to be cautious as there might be unknown legitimate uses of these command line arguments, however, the combination specified typically indicates a high level of threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible NTLM coercion via certutil using the 'syncwithWU' flag",
      "answer": "In order to detect possible NTLM coercion via certutil using the 'syncwithWU' flag, you should: Monitor process creation events on Windows systems for the execution of 'certutil.exe'. Specifically, look for instances where the process image ends with '\\certutil.exe' or has 'CertUtil.exe' as the OriginalFileName. Additionally, pay attention to the command line arguments, ensuring that they contain both ' -syncwithWU ' and a double backslash ('\\\\\\\\'). These criteria must all be met in order to flag a potential NTLM coercion attempt. It is important to be cautious as there might be unknown legitimate uses of these command line arguments, however, the combination specified typically indicates a high level of threat."
    }
  },
  {
    "instruction": "Explain how should I detect the following: remote RPC calls to possibly abuse remote printing service via MS-RPRN / MS-PAR",
    "context": "",
    "output": "In order to detect remote RPC calls to possibly abuse remote printing service via MS-RPRN / MS-PAR, you should monitor the application logs specifically from RPC firewalls. Focus on events logged with the Event Log identifier \"RPCFW\" and an Event ID of 3. These events are critical to look into when they involve specific Interface UUIDs: \"12345678-1234-abcd-ef00-0123456789ab\", \"76f03f96-cdfd-44fc-a22c-64950a001209\", \"0b6edbfa-4a24-4fc6-8a23-942b1eca65d1\", and \"ae33069b-a2a8-46ee-a235-ddfd339be281\". These UUIDs are indicative of interaction with the remote printing service interfaces that are known to be potentially exploitable. It's important to note that not all traffic to these interfaces is malicious; legitimate printing activities can also trigger these alerts. Therefore, it's crucial to investigate the context of the detection further before assuming malicious activity. The severity level of such detections is considered high due to the potential abuse of these services for executing remote attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls to possibly abuse remote printing service via MS-RPRN / MS-PAR",
      "answer": "In order to detect remote RPC calls to possibly abuse remote printing service via MS-RPRN / MS-PAR, you should monitor the application logs specifically from RPC firewalls. Focus on events logged with the Event Log identifier \"RPCFW\" and an Event ID of 3. These events are critical to look into when they involve specific Interface UUIDs: \"12345678-1234-abcd-ef00-0123456789ab\", \"76f03f96-cdfd-44fc-a22c-64950a001209\", \"0b6edbfa-4a24-4fc6-8a23-942b1eca65d1\", and \"ae33069b-a2a8-46ee-a235-ddfd339be281\". These UUIDs are indicative of interaction with the remote printing service interfaces that are known to be potentially exploitable. It's important to note that not all traffic to these interfaces is malicious; legitimate printing activities can also trigger these alerts. Therefore, it's crucial to investigate the context of the detection further before assuming malicious activity. The severity level of such detections is considered high due to the potential abuse of these services for executing remote attacks."
    }
  },
  {
    "instruction": "How to detect: suspicious Ruby on Rails exceptions that could indicate exploitation attempts",
    "context": "",
    "output": "In order to detect suspicious Ruby on Rails exceptions that could indicate exploitation attempts, you should: Monitor Ruby on Rails applications for specific exception messages that are commonly associated with malicious activities or misconfigurations. Specifically, look for logs containing any of the following exception keywords: ActionController::InvalidAuthenticityToken, ActionController::InvalidCrossOriginRequest, ActionController::MethodNotAllowed, ActionController::BadRequest, and ActionController::ParameterMissing. These exceptions could hint at various attack vectors, including but not limited to CSRF (Cross-Site Request Forgery) attacks, CORS (Cross-Origin Resource Sharing) policy violations, improper HTTP method usage, bad requests due to malformed syntax, and requests with missing parameters that could potentially disrupt application processing. It's important to consider that not all instances of these exceptions are indicative of malicious behavior; they could also stem from application bugs. Therefore, while these detections are set at a medium level of seriousness, each alert should be investigated to distinguish between actual exploitation attempts and benign errors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious Ruby on Rails exceptions that could indicate exploitation attempts",
      "answer": "In order to detect suspicious Ruby on Rails exceptions that could indicate exploitation attempts, you should: Monitor Ruby on Rails applications for specific exception messages that are commonly associated with malicious activities or misconfigurations. Specifically, look for logs containing any of the following exception keywords: ActionController::InvalidAuthenticityToken, ActionController::InvalidCrossOriginRequest, ActionController::MethodNotAllowed, ActionController::BadRequest, and ActionController::ParameterMissing. These exceptions could hint at various attack vectors, including but not limited to CSRF (Cross-Site Request Forgery) attacks, CORS (Cross-Origin Resource Sharing) policy violations, improper HTTP method usage, bad requests due to malformed syntax, and requests with missing parameters that could potentially disrupt application processing. It's important to consider that not all instances of these exceptions are indicative of malicious behavior; they could also stem from application bugs. Therefore, while these detections are set at a medium level of seriousness, each alert should be investigated to distinguish between actual exploitation attempts and benign errors."
    }
  },
  {
    "instruction": "How to detect: suspicious certreq execution taken from the LOLBAS examples, which can be abused to download (small) files",
    "context": "",
    "output": "In order to detect a suspicious certreq execution taken from the LOLBAS examples, which can be abused to download (small) files, you should focus on monitoring the creation of processes within Windows systems. Specifically, identify instances where the process image ends with '\\certreq.exe' or the original file name is identified as 'CertReq.exe'. Additionally, scrutinize the command line arguments for the presence of ' -Post ', ' -config ', ' http', and the specific reference to ' C:\\windows\\win.ini '. These particular command line argument combinations are indicative of an attempt to misuse certreq.exe for downloading files, an activity that could be aligned with malicious operations. Command line monitoring along with tracking the parent command line execution can greatly aid in detecting this type of attack. The methodology for detection holds a high importance level due to the low likelihood of false positives under normal operational conditions. This approach ensures that activities related to the misuse of certreq for file downloading purposes are accurately identified and scrutinized.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious certreq execution taken from the LOLBAS examples, which can be abused to download (small) files",
      "answer": "In order to detect a suspicious certreq execution taken from the LOLBAS examples, which can be abused to download (small) files, you should focus on monitoring the creation of processes within Windows systems. Specifically, identify instances where the process image ends with '\\certreq.exe' or the original file name is identified as 'CertReq.exe'. Additionally, scrutinize the command line arguments for the presence of ' -Post ', ' -config ', ' http', and the specific reference to ' C:\\windows\\win.ini '. These particular command line argument combinations are indicative of an attempt to misuse certreq.exe for downloading files, an activity that could be aligned with malicious operations. Command line monitoring along with tracking the parent command line execution can greatly aid in detecting this type of attack. The methodology for detection holds a high importance level due to the low likelihood of false positives under normal operational conditions. This approach ensures that activities related to the misuse of certreq for file downloading purposes are accurately identified and scrutinized."
    }
  },
  {
    "instruction": "Please help me detect the following: Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.",
    "context": "",
    "output": "Sure!\nIn order to detect attempts by adversaries to gather information about attached peripheral devices and components connected to a computer system, you should focus on monitoring PowerShell script activities within Windows environments, particularly by leveraging Script Block Logging. Specifically, look for instances where the PowerShell script text contains references to \"Win32_PnPEntity\". This string indicates the script is querying information about plug and play devices connected to the system, which can be a method used by attackers to understand hardware characteristics of a target. It's crucial to have Script Block Logging enabled to capture these details. However, be aware that some legitimate administrative scripts might also query this information, which could lead to low-level false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.",
      "answer": "In order to detect attempts by adversaries to gather information about attached peripheral devices and components connected to a computer system, you should focus on monitoring PowerShell script activities within Windows environments, particularly by leveraging Script Block Logging. Specifically, look for instances where the PowerShell script text contains references to \"Win32_PnPEntity\". This string indicates the script is querying information about plug and play devices connected to the system, which can be a method used by attackers to understand hardware characteristics of a target. It's crucial to have Script Block Logging enabled to capture these details. However, be aware that some legitimate administrative scripts might also query this information, which could lead to low-level false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: process creation events that use the Sysnative folder (common for CobaltStrike spawns)",
    "context": "",
    "output": "Sure!\nIn order to detect process creation events that use the Sysnative folder (common for CobaltStrike spawns), you should: Monitor process creation logs in Windows environments, specifically focusing on instances where the command line starts with 'C:\\Windows\\Sysnative\\'. This detection method is crucial for identifying suspicious activity associated with CobaltStrike or similar threats, as attackers often leverage the Sysnative directory to execute 32-bit applications on 64-bit systems in an effort to evade detection. Always include both the command line and parent command line in the monitoring process to enhance context understanding. Be aware that there might be legitimate uses of this technique, although they are typically unknown, thus requiring a medium level of scrutiny when such activities are detected.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process creation events that use the Sysnative folder (common for CobaltStrike spawns)",
      "answer": "In order to detect process creation events that use the Sysnative folder (common for CobaltStrike spawns), you should: Monitor process creation logs in Windows environments, specifically focusing on instances where the command line starts with 'C:\\Windows\\Sysnative\\'. This detection method is crucial for identifying suspicious activity associated with CobaltStrike or similar threats, as attackers often leverage the Sysnative directory to execute 32-bit applications on 64-bit systems in an effort to evade detection. Always include both the command line and parent command line in the monitoring process to enhance context understanding. Be aware that there might be legitimate uses of this technique, although they are typically unknown, thus requiring a medium level of scrutiny when such activities are detected."
    }
  },
  {
    "instruction": "How to detect: shell32.dll executing a DLL in a suspicious directory",
    "context": "",
    "output": "In order to detect shell32.dll executing a DLL in a suspicious directory, you should monitor process creation events on Windows systems. Specifically, keep an eye out for instances where the process image name ends with '\\rundll32.exe' or where the original file name is explicitly 'RUNDLL32.EXE'. Additionally, scrutinize the command line for the following patterns: the command must include both 'shell32.dll' and 'Control_RunDLL' to match, and it may contain references to common ephemeral or user profile directories such as '%AppData%', '%LocalAppData%', '%Temp%', '%tmp%', '\\AppData\\', '\\Temp\\', or '\\Users\\Public\\'. For detection to be considered valid, both the image name or file name criteria and the command line conditions must be met. This approach aims to highlight activities potentially related to malware execution or persistence mechanisms that abuse shell32.dll to load malicious DLLs from directories that attackers often exploit for stealth.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "shell32.dll executing a DLL in a suspicious directory",
      "answer": "In order to detect shell32.dll executing a DLL in a suspicious directory, you should monitor process creation events on Windows systems. Specifically, keep an eye out for instances where the process image name ends with '\\rundll32.exe' or where the original file name is explicitly 'RUNDLL32.EXE'. Additionally, scrutinize the command line for the following patterns: the command must include both 'shell32.dll' and 'Control_RunDLL' to match, and it may contain references to common ephemeral or user profile directories such as '%AppData%', '%LocalAppData%', '%Temp%', '%tmp%', '\\AppData\\', '\\Temp\\', or '\\Users\\Public\\'. For detection to be considered valid, both the image name or file name criteria and the command line conditions must be met. This approach aims to highlight activities potentially related to malware execution or persistence mechanisms that abuse shell32.dll to load malicious DLLs from directories that attackers often exploit for stealth."
    }
  },
  {
    "instruction": "Explain how should I detect the following: curl process start on linux, which indicates a file download from a remote location or a simple web request to a remote server",
    "context": "",
    "output": "In order to detect a curl process start on linux, which indicates a file download from a remote location or a simple web request to a remote server, you should: Monitor process creation logs on Linux systems for instances where the process being started ends with '/curl'. This activity may suggest an attempt to download files from a remote location or make web requests to remote servers, which could be benign or malicious depending on the context. However, it is important to note that there might be false positives, such as scripts created by developers and admins as well as legitimate administrative activity. The severity of this rule is considered low, given that not all instances of curl usage are malicious but warrant attention to discern the intent behind the usage.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "curl process start on linux, which indicates a file download from a remote location or a simple web request to a remote server",
      "answer": "In order to detect a curl process start on linux, which indicates a file download from a remote location or a simple web request to a remote server, you should: Monitor process creation logs on Linux systems for instances where the process being started ends with '/curl'. This activity may suggest an attempt to download files from a remote location or make web requests to remote servers, which could be benign or malicious depending on the context. However, it is important to note that there might be false positives, such as scripts created by developers and admins as well as legitimate administrative activity. The severity of this rule is considered low, given that not all instances of curl usage are malicious but warrant attention to discern the intent behind the usage."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential process and execution activity related to APT10 Cloud Hopper operation",
    "context": "",
    "output": "In order to detect potential process and execution activity related to APT10 Cloud Hopper operation, you should: Focus on monitoring process creation events within the Windows operating system. Look specifically for instances where the process image ends with '\\cscript.exe' and the command line includes '.vbs /shell ', indicating the use of the cscript.exe utility to execute VBScript files with shell command access. Additionally, watch for command lines that contain 'csvde -f C:\\windows\\web\\' followed by '.log', which suggests the use of the csvde utility to export directory listings to a log file in a suspicious location. Recognizing either of these patterns is critical as they are associated with techniques employed by the APT10 group. It is deemed unlikely that there will be false positives at this detection level, indicating a high confidence in the specificity of these indicators for identifying threat activity related to the APT10 Cloud Hopper campaign.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential process and execution activity related to APT10 Cloud Hopper operation",
      "answer": "In order to detect potential process and execution activity related to APT10 Cloud Hopper operation, you should: Focus on monitoring process creation events within the Windows operating system. Look specifically for instances where the process image ends with '\\cscript.exe' and the command line includes '.vbs /shell ', indicating the use of the cscript.exe utility to execute VBScript files with shell command access. Additionally, watch for command lines that contain 'csvde -f C:\\windows\\web\\' followed by '.log', which suggests the use of the csvde utility to export directory listings to a log file in a suspicious location. Recognizing either of these patterns is critical as they are associated with techniques employed by the APT10 group. It is deemed unlikely that there will be false positives at this detection level, indicating a high confidence in the specificity of these indicators for identifying threat activity related to the APT10 Cloud Hopper campaign."
    }
  },
  {
    "instruction": "How can I detect: deletion of files with extensions often used for backup files. Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.",
    "context": "",
    "output": "In order to detect deletion of files with extensions often used for backup files, as adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery, you should: Monitor Windows file deletion events for actions initiated by command line interfaces such as cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Terminal (wt.exe), and DLL or application loading programs like rundll32.exe and regsvr32.exe. Specifically, pay attention to the deletion of files with extensions that are commonly associated with backups and system recovery, including .VHD, .bac, .bak, .wbcat, .bkf, .set, .win, and .dsk. Any occurrence of these file deletion activities should be investigated to ensure they are not part of a malicious attempt to hinder system recovery efforts. Be aware that there can be legitimate reasons for these actions, thus it\u2019s crucial to differentiate between genuine system or user-initiated processes and potentially harmful activities. This monitoring approach is of medium importance level and aligns with tactics to disrupt system recovery processes by eliminating backup or system recovery files.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deletion of files with extensions often used for backup files. Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.",
      "answer": "In order to detect deletion of files with extensions often used for backup files, as adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery, you should: Monitor Windows file deletion events for actions initiated by command line interfaces such as cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Terminal (wt.exe), and DLL or application loading programs like rundll32.exe and regsvr32.exe. Specifically, pay attention to the deletion of files with extensions that are commonly associated with backups and system recovery, including .VHD, .bac, .bak, .wbcat, .bkf, .set, .win, and .dsk. Any occurrence of these file deletion activities should be investigated to ensure they are not part of a malicious attempt to hinder system recovery efforts. Be aware that there can be legitimate reasons for these actions, thus it\u2019s crucial to differentiate between genuine system or user-initiated processes and potentially harmful activities. This monitoring approach is of medium importance level and aligns with tactics to disrupt system recovery processes by eliminating backup or system recovery files."
    }
  },
  {
    "instruction": "Explain how should I detect the following: service account is modified in Google Cloud.",
    "context": "",
    "output": "In order to identify when a service account is modified in Google Cloud, you should monitor for modifications to service accounts within Google Cloud Platform (GCP) audit logs. Specifically, look for audit log entries indicating that a service account has been patched, created, updated, enabled, or undeleted. These activities are significant as they could indicate attempts to compromise or misuse Google Cloud resources.\n\nLogs from GCP audit should be scrutinized for method names ending with .serviceAccounts.patch, .serviceAccounts.create, .serviceAccounts.update, .serviceAccounts.enable, and .serviceAccounts.undelete. These entries point toward actions taken on service accounts, which may include legitimate administrative activities or malicious modifications.\n\nIt's important to consider the possibility of false positives, such as modifications performed by system administrators as part of their routine tasks. Verify the user identity, user agent, and hostname involved in the modification to ascertain if they should be making changes in your environment. If modifications from unfamiliar users are detected, they should be investigated further. Known behaviors causing false positives might be exempted from monitoring to refine detection capabilities.\n\nThis approach aims to safeguard against unauthorized or harmful modifications to service accounts, falling under tactics and techniques related to account manipulation and abuse of resource permissions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "service account is modified in Google Cloud.",
      "answer": "In order to identify when a service account is modified in Google Cloud, you should monitor for modifications to service accounts within Google Cloud Platform (GCP) audit logs. Specifically, look for audit log entries indicating that a service account has been patched, created, updated, enabled, or undeleted. These activities are significant as they could indicate attempts to compromise or misuse Google Cloud resources.\n\nLogs from GCP audit should be scrutinized for method names ending with .serviceAccounts.patch, .serviceAccounts.create, .serviceAccounts.update, .serviceAccounts.enable, and .serviceAccounts.undelete. These entries point toward actions taken on service accounts, which may include legitimate administrative activities or malicious modifications.\n\nIt's important to consider the possibility of false positives, such as modifications performed by system administrators as part of their routine tasks. Verify the user identity, user agent, and hostname involved in the modification to ascertain if they should be making changes in your environment. If modifications from unfamiliar users are detected, they should be investigated further. Known behaviors causing false positives might be exempted from monitoring to refine detection capabilities.\n\nThis approach aims to safeguard against unauthorized or harmful modifications to service accounts, falling under tactics and techniques related to account manipulation and abuse of resource permissions."
    }
  },
  {
    "instruction": "How can I detect: potential DLL sideloading of \"appverifUI.dll\"",
    "context": "",
    "output": "In order to detect potential DLL sideloading of \"appverifUI.dll\", you should: monitor for instances where the \"appverifUI.dll\" file is loaded into memory, specifically within a Windows environment. This is achieved by focusing on the image load category, which tracks when DLL files are loaded by applications. The primary condition for raising an alert is when the loaded DLL file ends with the name '\\appverifUI.dll'. However, to reduce false positives and ensure legitimate use cases where \"appverifUI.dll\" is loaded by the system's app verification tools located at 'C:\\Windows\\System32\\appverif.exe' or 'C:\\Windows\\SysWOW64\\appverif.exe' are not flagged, any loading event originating from these paths or that start with 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', or 'C:\\Windows\\WinSxS\\' should be excluded from the detection logic. Due to the precision of this detection method, false positives are considered unlikely, and the severity level is set to high, indicating the importance of monitoring for this activity as it relates to security implications involving DLL sideloading techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"appverifUI.dll\"",
      "answer": "In order to detect potential DLL sideloading of \"appverifUI.dll\", you should: monitor for instances where the \"appverifUI.dll\" file is loaded into memory, specifically within a Windows environment. This is achieved by focusing on the image load category, which tracks when DLL files are loaded by applications. The primary condition for raising an alert is when the loaded DLL file ends with the name '\\appverifUI.dll'. However, to reduce false positives and ensure legitimate use cases where \"appverifUI.dll\" is loaded by the system's app verification tools located at 'C:\\Windows\\System32\\appverif.exe' or 'C:\\Windows\\SysWOW64\\appverif.exe' are not flagged, any loading event originating from these paths or that start with 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', or 'C:\\Windows\\WinSxS\\' should be excluded from the detection logic. Due to the precision of this detection method, false positives are considered unlikely, and the severity level is set to high, indicating the importance of monitoring for this activity as it relates to security implications involving DLL sideloading techniques."
    }
  },
  {
    "instruction": "Explain how should I detect the following: registry keys related to NetWire RAT",
    "context": "",
    "output": "In order to detect registry keys related to NetWire RAT, you should: Monitor Windows registry addition events for the creation of keys. Specifically, you need to focus on the event type 'CreateKey' which involves the creation of new registry keys. If any registry key additions occur under the path containing '\\software\\NetWire', it is indicative of potentially malicious activity associated with the NetWire Remote Access Trojan (RAT). This activity is of high importance due to its possible implications for unauthorized access and control over the affected system. Monitoring should be conducted through the Windows registry log source, specifically looking at registry addition categories. Be aware that there might be instances where false positives occur, although such instances are unknown. This detection mechanism is crucial for identifying tactics and techniques related to the use of malware for achieving persistence and command and control by threat actors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registry keys related to NetWire RAT",
      "answer": "In order to detect registry keys related to NetWire RAT, you should: Monitor Windows registry addition events for the creation of keys. Specifically, you need to focus on the event type 'CreateKey' which involves the creation of new registry keys. If any registry key additions occur under the path containing '\\software\\NetWire', it is indicative of potentially malicious activity associated with the NetWire Remote Access Trojan (RAT). This activity is of high importance due to its possible implications for unauthorized access and control over the affected system. Monitoring should be conducted through the Windows registry log source, specifically looking at registry addition categories. Be aware that there might be instances where false positives occur, although such instances are unknown. This detection mechanism is crucial for identifying tactics and techniques related to the use of malware for achieving persistence and command and control by threat actors."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of an executable that is typically used by PlugX for DLL side loading starting from an uncommon location",
    "context": "",
    "output": "In order to detect the execution of an executable that is typically used by PlugX for DLL side loading starting from an uncommon location, you should look into process creation events within Windows environments. The detection focuses on monitoring the execution of specific executables known to be leveraged by PlugX for DLL side-loading. These executables include:\n- `CamMute.exe`\n- `chrome_frame_helper.exe`\n- `dvcemumanager.exe`\n- `Gadget.exe`\n- `hcc.exe`\n- `hkcmd.exe`\n- `Mc.exe`\n- `MsMpEng.exe`\n- `msseces.exe`\n- `OInfoP11.exe`\n- `OleView.exe`\n- `rc.exe`\n\nFor each targeted executable, there are specific paths considered legitimate. If these executables run from locations not listed as legitimate, it's a strong indicator of malicious activity relating to DLL side-loading. For instance, `CamMute.exe` should be running from a Lenovo utility folder, and `chrome_frame_helper.exe` from a Google Chrome application directory. Deviations from these paths could signify an attack.\n\nImportant to this detection strategy are the detailed conditions for each executable:\n- The path ends with the specified executable name (indicating the process creation event to monitor).\n- The executable does not run from its expected directory or directories, thereby raising suspicion.\n\nThrough monitoring for such anomalies, organizations can identify and react to potential threats associated with the execution of seemingly benign executables from uncommon locations, which is a known method used by sophisticated threats like PlugX to achieve persistence and stealth. Key fields to observe include the command line used to launch these processes, as it can provide context and further evidence around the suspicious activity. It is also acknowledged that there could be unknown legitimate reasons for these deviations, although these would likely be rare given the specificity of the paths involved. The detection level for this kind of behavior is considered high due to the potential security implications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of an executable that is typically used by PlugX for DLL side loading starting from an uncommon location",
      "answer": "In order to detect the execution of an executable that is typically used by PlugX for DLL side loading starting from an uncommon location, you should look into process creation events within Windows environments. The detection focuses on monitoring the execution of specific executables known to be leveraged by PlugX for DLL side-loading. These executables include:\n- `CamMute.exe`\n- `chrome_frame_helper.exe`\n- `dvcemumanager.exe`\n- `Gadget.exe`\n- `hcc.exe`\n- `hkcmd.exe`\n- `Mc.exe`\n- `MsMpEng.exe`\n- `msseces.exe`\n- `OInfoP11.exe`\n- `OleView.exe`\n- `rc.exe`\n\nFor each targeted executable, there are specific paths considered legitimate. If these executables run from locations not listed as legitimate, it's a strong indicator of malicious activity relating to DLL side-loading. For instance, `CamMute.exe` should be running from a Lenovo utility folder, and `chrome_frame_helper.exe` from a Google Chrome application directory. Deviations from these paths could signify an attack.\n\nImportant to this detection strategy are the detailed conditions for each executable:\n- The path ends with the specified executable name (indicating the process creation event to monitor).\n- The executable does not run from its expected directory or directories, thereby raising suspicion.\n\nThrough monitoring for such anomalies, organizations can identify and react to potential threats associated with the execution of seemingly benign executables from uncommon locations, which is a known method used by sophisticated threats like PlugX to achieve persistence and stealth. Key fields to observe include the command line used to launch these processes, as it can provide context and further evidence around the suspicious activity. It is also acknowledged that there could be unknown legitimate reasons for these deviations, although these would likely be rare given the specificity of the paths involved. The detection level for this kind of behavior is considered high due to the potential security implications."
    }
  },
  {
    "instruction": "How can I detect: execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT)",
    "context": "",
    "output": "In order to detect execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT), you should: monitor the creation of processes within Windows environments, specifically focusing on the identification of instances where the process image name ends with '\\ntdsutil.exe'. This approach is targeted to uncover potential malicious activities involving the manipulation or attack on the NTDS database, which contains sensitive information. It is important to note that legitimate NTDS maintenance activities may also trigger this detection, so those should be considered as potential false positives. This monitoring carries a medium level of importance due to the potential for misuse of ntdsutil.exe in various attack scenarios.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT)",
      "answer": "In order to detect execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT), you should: monitor the creation of processes within Windows environments, specifically focusing on the identification of instances where the process image name ends with '\\ntdsutil.exe'. This approach is targeted to uncover potential malicious activities involving the manipulation or attack on the NTDS database, which contains sensitive information. It is important to note that legitimate NTDS maintenance activities may also trigger this detection, so those should be considered as potential false positives. This monitoring carries a medium level of importance due to the potential for misuse of ntdsutil.exe in various attack scenarios."
    }
  },
  {
    "instruction": "How to detect: execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n",
    "context": "",
    "output": "In order to detect execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server and helps to bypass protection mechanisms based on the analysis of script blocks logs, you should: Monitor the process creation logs on Windows systems for instances where the 'sqlps.exe' utility is initiated. Specifically, you should look for scenarios where 'sqlps.exe' acts as a parent process or is launched directly, indicating potential use for executing PowerShell code in a manner that may evade script block logging. It is important to also apply a filter to exclude cases where 'sqlps.exe' is a child process of 'sqlagent.exe', as this is a recognized legitimate action. Be aware that direct PowerShell command execution via 'sqlps.exe' is unusual, so such events merit scrutiny, albeit with an understanding that false positives can occur under certain legitimate use cases. This approach helps in identifying tactics that may be employed to avoid detection through log bypass mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n",
      "answer": "In order to detect execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server and helps to bypass protection mechanisms based on the analysis of script blocks logs, you should: Monitor the process creation logs on Windows systems for instances where the 'sqlps.exe' utility is initiated. Specifically, you should look for scenarios where 'sqlps.exe' acts as a parent process or is launched directly, indicating potential use for executing PowerShell code in a manner that may evade script block logging. It is important to also apply a filter to exclude cases where 'sqlps.exe' is a child process of 'sqlagent.exe', as this is a recognized legitimate action. Be aware that direct PowerShell command execution via 'sqlps.exe' is unusual, so such events merit scrutiny, albeit with an understanding that false positives can occur under certain legitimate use cases. This approach helps in identifying tactics that may be employed to avoid detection through log bypass mechanisms."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential evasion or obfuscation attempts using bogus path traversal via the commandline",
    "context": "",
    "output": "In order to detect potential evasion or obfuscation attempts using bogus path traversal via the commandline, you should: Monitor the creation of processes on Windows systems, specifically observing the command lines used to initiate these processes. Look for command lines that contain segments attempting to traverse directories in a suspicious manner. This involves detecting command lines that include paths trying to navigate upwards in the directory structure (`\\..\\`, `\\..\\..\\`) and then back into critical Windows directories (`\\Windows\\`, `\\System32\\`). Additionally, watch for command lines that append directory traversal patterns (`..\\) directly after executable names (`.exe\\..\\`). However, it's important to exclude command lines related to Google Drive or Citrix, as they might use similar patterns for legitimate purposes. These exclusions help in reducing false positive alerts that might arise from the proper use of Google Drive synchronization and Citrix Virtual Smart Card functionalities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential evasion or obfuscation attempts using bogus path traversal via the commandline",
      "answer": "In order to detect potential evasion or obfuscation attempts using bogus path traversal via the commandline, you should: Monitor the creation of processes on Windows systems, specifically observing the command lines used to initiate these processes. Look for command lines that contain segments attempting to traverse directories in a suspicious manner. This involves detecting command lines that include paths trying to navigate upwards in the directory structure (`\\..\\`, `\\..\\..\\`) and then back into critical Windows directories (`\\Windows\\`, `\\System32\\`). Additionally, watch for command lines that append directory traversal patterns (`..\\) directly after executable names (`.exe\\..\\`). However, it's important to exclude command lines related to Google Drive or Citrix, as they might use similar patterns for legitimate purposes. These exclusions help in reducing false positive alerts that might arise from the proper use of Google Drive synchronization and Citrix Virtual Smart Card functionalities."
    }
  },
  {
    "instruction": "How can I detect: usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor. As seen used in the DAMP project.",
    "context": "",
    "output": "In order to detect usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor, as seen used in the DAMP project, you should: Focus on the monitoring of PowerShell scripts within Windows environments by ensuring that Script Block Logging is enabled. Specifically, watch for scripts that contain the terms 'win32_Trustee', 'win32_Ace', '.AccessMask', '.AceType', and '.SetSecurityDescriptor'. These terms are indicative of actions taken to manipulate security descriptors. Additionally, the presence of strings such as '\\Lsa\\JD', '\\Lsa\\Skew1', '\\Lsa\\Data', '\\Lsa\\GBG' within the scripts should also raise alerts. These are associated with attempts to interact with or manipulate Windows Security Accounts Manager (SAM) database files, potentially to create backdoors. Given the sophisticated nature of these techniques, this monitoring approach is set to a high alert level due to the rarity and potential impact of such actions, although it acknowledges the possibility of unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor. As seen used in the DAMP project.",
      "answer": "In order to detect usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor, as seen used in the DAMP project, you should: Focus on the monitoring of PowerShell scripts within Windows environments by ensuring that Script Block Logging is enabled. Specifically, watch for scripts that contain the terms 'win32_Trustee', 'win32_Ace', '.AccessMask', '.AceType', and '.SetSecurityDescriptor'. These terms are indicative of actions taken to manipulate security descriptors. Additionally, the presence of strings such as '\\Lsa\\JD', '\\Lsa\\Skew1', '\\Lsa\\Data', '\\Lsa\\GBG' within the scripts should also raise alerts. These are associated with attempts to interact with or manipulate Windows Security Accounts Manager (SAM) database files, potentially to create backdoors. Given the sophisticated nature of these techniques, this monitoring approach is set to a high alert level due to the rarity and potential impact of such actions, although it acknowledges the possibility of unknown false positives."
    }
  },
  {
    "instruction": "How to detect: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and\nto identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n",
    "context": "",
    "output": "In order to identify adversaries who are attempting to discover folders and drives shared on remote systems as part of their initial information gathering or to pinpoint potential targets for lateral movement within a network, you should monitor for specific activities within Windows PowerShell modules. Look for any instances where the commands containing 'get-smbshare' are executed. This can indicate an attempt to enumerate SMB shares available on the network, which often serve as shared network drives and folders allowing access to file directories across different systems. These activities can be detected in logs that originate from PowerShell modules, which would typically be part of the Windows product log sources.\n\nIt's important to note, however, that occurrences of these commands may not always signify malicious intent. Administrators or legitimate automated scripts may execute these commands for valid operational reasons, such as routine network maintenance or auditing. Therefore, these detections are considered to have a low level of confidence in indicating malicious activity without additional context. However, continuous monitoring and analysis of these detections, especially in correlation with other suspicious activities, could reveal attempts by adversaries to gather information necessary for further collection of sensitive data or to facilitate lateral movement within the targeted network environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and\nto identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n",
      "answer": "In order to identify adversaries who are attempting to discover folders and drives shared on remote systems as part of their initial information gathering or to pinpoint potential targets for lateral movement within a network, you should monitor for specific activities within Windows PowerShell modules. Look for any instances where the commands containing 'get-smbshare' are executed. This can indicate an attempt to enumerate SMB shares available on the network, which often serve as shared network drives and folders allowing access to file directories across different systems. These activities can be detected in logs that originate from PowerShell modules, which would typically be part of the Windows product log sources.\n\nIt's important to note, however, that occurrences of these commands may not always signify malicious intent. Administrators or legitimate automated scripts may execute these commands for valid operational reasons, such as routine network maintenance or auditing. Therefore, these detections are considered to have a low level of confidence in indicating malicious activity without additional context. However, continuous monitoring and analysis of these detections, especially in correlation with other suspicious activities, could reveal attempts by adversaries to gather information necessary for further collection of sensitive data or to facilitate lateral movement within the targeted network environment."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of AdvancedRun utility",
    "context": "",
    "output": "In order to detect the execution of AdvancedRun utility, you should: Focus on monitoring Windows process creation events. Look for occurrences where the original file name is 'AdvancedRun.exe'. Then, within the command line arguments, ensure the presence of both '/EXEFilename' and '/Run'. Additionally, verify if '/WindowState 0', '/RunAs', and '/CommandLine' are all part of the command line parameters simultaneously. Monitoring for these specific parameters and the utility's execution can help in identifying potential misuse or malicious activities involving the AdvancedRun tool. This method is crucial for detecting unusual or unauthorized usage of the utility, which could be indicative of an attempt to execute commands or applications in a manner that hides or modifies the usual behavior, increasing the security posture by identifying such actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of AdvancedRun utility",
      "answer": "In order to detect the execution of AdvancedRun utility, you should: Focus on monitoring Windows process creation events. Look for occurrences where the original file name is 'AdvancedRun.exe'. Then, within the command line arguments, ensure the presence of both '/EXEFilename' and '/Run'. Additionally, verify if '/WindowState 0', '/RunAs', and '/CommandLine' are all part of the command line parameters simultaneously. Monitoring for these specific parameters and the utility's execution can help in identifying potential misuse or malicious activities involving the AdvancedRun tool. This method is crucial for detecting unusual or unauthorized usage of the utility, which could be indicative of an attempt to execute commands or applications in a manner that hides or modifies the usual behavior, increasing the security posture by identifying such actions."
    }
  },
  {
    "instruction": "Please help me detect the following: registry keys created in OceanLotus (also known as APT32) attacks",
    "context": "",
    "output": "Sure!\nIn order to detect registry keys created in OceanLotus (also known as APT32) attacks, you should monitor the Windows registry for specific activities that indicate compromise. Focus on registry events where keys are created or modified. Specifically, watch for any changes to the 'HKCU\\SOFTWARE\\Classes\\CLSID\\{E08A0F4B-1F65-4D4D-9A09-BD4625B9C5A1}\\Model' registry object. Additionally, look for any modifications starting with 'HKCU\\SOFTWARE\\App\\' or 'HKLM\\SOFTWARE\\App\\' and containing keys related to 'AppXbf13d4ea2945444d8b13e2121cb6b663\\', 'AppX70162486c7554f7f80f481985d67586d\\', or 'AppX37cc7fdccd644b4f85f4b22d5a3f105a\\', and ending in 'Application' or 'DefaultIcon'. \n\nFurthermore, pay close attention to modifications in the HKCU hive that start with 'HKCU\\' and include modifications to 'Classes\\AppXc52346ec40fb4061ad96be0e6cb7d16a\\', 'Classes\\AppX3bbba44c6cae4d9695755183472171e2\\', or 'Classes\\CLSID\\{E3517E26-8E93-458D-A6DF-8030BC80528B}\\', including the repeat mention of the 'Classes\\CLSID\\{E08A0F4B-1F65-4D4D-9A09-BD4625B9C5A1}\\Model'. Detecting any of these changes is critical for identifying potentially malicious activities related to OceanLotus attacks. Given the severity, such detections should be treated with a high priority, although one should remain aware of possible unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registry keys created in OceanLotus (also known as APT32) attacks",
      "answer": "In order to detect registry keys created in OceanLotus (also known as APT32) attacks, you should monitor the Windows registry for specific activities that indicate compromise. Focus on registry events where keys are created or modified. Specifically, watch for any changes to the 'HKCU\\SOFTWARE\\Classes\\CLSID\\{E08A0F4B-1F65-4D4D-9A09-BD4625B9C5A1}\\Model' registry object. Additionally, look for any modifications starting with 'HKCU\\SOFTWARE\\App\\' or 'HKLM\\SOFTWARE\\App\\' and containing keys related to 'AppXbf13d4ea2945444d8b13e2121cb6b663\\', 'AppX70162486c7554f7f80f481985d67586d\\', or 'AppX37cc7fdccd644b4f85f4b22d5a3f105a\\', and ending in 'Application' or 'DefaultIcon'. \n\nFurthermore, pay close attention to modifications in the HKCU hive that start with 'HKCU\\' and include modifications to 'Classes\\AppXc52346ec40fb4061ad96be0e6cb7d16a\\', 'Classes\\AppX3bbba44c6cae4d9695755183472171e2\\', or 'Classes\\CLSID\\{E3517E26-8E93-458D-A6DF-8030BC80528B}\\', including the repeat mention of the 'Classes\\CLSID\\{E08A0F4B-1F65-4D4D-9A09-BD4625B9C5A1}\\Model'. Detecting any of these changes is critical for identifying potentially malicious activities related to OceanLotus attacks. Given the severity, such detections should be treated with a high priority, although one should remain aware of possible unknown false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: successful authentication from potential clients using legacy authentication via user agent strings. This could be a sign of MFA bypass using a password spray attack.",
    "context": "",
    "output": "In order to detect successful authentication from potential clients using legacy authentication via user agent strings, which could be a sign of MFA bypass using a password spray attack, you should: Monitor sign-in logs from Azure for successful authentication events. Pay particular attention to the user agent strings within these logs. Specifically, look out for user agent strings that contain any of the identifiers 'BAV2ROPC', 'CBAinPROD', or 'CBAinTAR'. These strings are indicative of the use of legacy authentication methods, which might be employed by attackers attempting to bypass multi-factor authentication through password spray attacks. Be aware that there may be legitimate uses of these indicators, such as known legacy accounts, and these should be considered as potential false positives. The importance of scrutinizing these events is high due to the potential security implications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "successful authentication from potential clients using legacy authentication via user agent strings. This could be a sign of MFA bypass using a password spray attack.",
      "answer": "In order to detect successful authentication from potential clients using legacy authentication via user agent strings, which could be a sign of MFA bypass using a password spray attack, you should: Monitor sign-in logs from Azure for successful authentication events. Pay particular attention to the user agent strings within these logs. Specifically, look out for user agent strings that contain any of the identifiers 'BAV2ROPC', 'CBAinPROD', or 'CBAinTAR'. These strings are indicative of the use of legacy authentication methods, which might be employed by attackers attempting to bypass multi-factor authentication through password spray attacks. Be aware that there may be legitimate uses of these indicators, such as known legacy accounts, and these should be considered as potential false positives. The importance of scrutinizing these events is high due to the potential security implications."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential malicious .ICO files download from a compromised 3CXDesktopApp via web requests to the the malicious Github repository",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential malicious .ICO files download from a compromised 3CXDesktopApp via web requests to the malicious Github repository, you should: monitor proxy logs for web requests that contain both 'IconStorages/images/main/icon' and '.ico' in the URI. This detection logic is crucial because it signifies an attempt to download .ICO files, which are potentially malicious, from a specific path that is indicative of a compromised application making requests to a malicious Github repository. The detection is marked at a high level of importance, indicating that such activities are rare and, if detected, should be investigated promptly due to their potential security implications. Be aware that there may be unknown false positives, so while urgency is advised, so is validation of the detected activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential malicious .ICO files download from a compromised 3CXDesktopApp via web requests to the the malicious Github repository",
      "answer": "In order to detect potential malicious .ICO files download from a compromised 3CXDesktopApp via web requests to the malicious Github repository, you should: monitor proxy logs for web requests that contain both 'IconStorages/images/main/icon' and '.ico' in the URI. This detection logic is crucial because it signifies an attempt to download .ICO files, which are potentially malicious, from a specific path that is indicative of a compromised application making requests to a malicious Github repository. The detection is marked at a high level of importance, indicating that such activities are rare and, if detected, should be investigated promptly due to their potential security implications. Be aware that there may be unknown false positives, so while urgency is advised, so is validation of the detected activity."
    }
  },
  {
    "instruction": "How can I detect: ZxShell start by the called and well-known function name",
    "context": "",
    "output": "In order to detect a ZxShell start by the called and well-known function name, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\rundll32.exe'. Specifically, look for command lines that contain either 'zxFunction' or 'RemoteDiskXXXXX'. These particular patterns in the command line are indicative of ZxShell activity. It is critical to capture the command line and parent command line details during detection to aid in the investigation. This monitoring is highly specific and unlikely to produce false positives, classifying it as a critical level security measure.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "ZxShell start by the called and well-known function name",
      "answer": "In order to detect a ZxShell start by the called and well-known function name, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\rundll32.exe'. Specifically, look for command lines that contain either 'zxFunction' or 'RemoteDiskXXXXX'. These particular patterns in the command line are indicative of ZxShell activity. It is critical to capture the command line and parent command line details during detection to aid in the investigation. This monitoring is highly specific and unlikely to produce false positives, classifying it as a critical level security measure."
    }
  },
  {
    "instruction": "Please help me detect the following: many authentication failures from one source to one destination which is may indicate Brute Force activity",
    "context": "",
    "output": "Sure!\nIn order to detect many authentication failures from one source to one destination which may indicate Brute Force activity, you should focus on monitoring authentication logs. Specifically, look for occasions where there is a failure in authentication actions. If within a 10-minute (600 seconds) timeframe, the number of failed authentication attempts counted by destination IP (dst_ip) exceeds 30 from a single source IP (src_ip) to a single destination IP, it is indicative of potential brute force activity. In handling these logs, you should be aware of the pertinent fields for analysis, which include the source IP (src_ip), destination IP (dst_ip), and the user involved in these authentication attempts. It is also important to consider common false positives that might arise, such as inventory management systems, vulnerability scanners, or legitimate applications that may have reasons for repeated authentication failures. This monitoring approach is tied to the tactics and techniques of Credential Access, specifically identifying behavior that matches with brute force attempts to access credentials. Be mindful that this analysis has a medium level of threat indication and must be contextualized within your environment to differentiate between malicious attempts and benign anomalies effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "many authentication failures from one source to one destination which is may indicate Brute Force activity",
      "answer": "In order to detect many authentication failures from one source to one destination which may indicate Brute Force activity, you should focus on monitoring authentication logs. Specifically, look for occasions where there is a failure in authentication actions. If within a 10-minute (600 seconds) timeframe, the number of failed authentication attempts counted by destination IP (dst_ip) exceeds 30 from a single source IP (src_ip) to a single destination IP, it is indicative of potential brute force activity. In handling these logs, you should be aware of the pertinent fields for analysis, which include the source IP (src_ip), destination IP (dst_ip), and the user involved in these authentication attempts. It is also important to consider common false positives that might arise, such as inventory management systems, vulnerability scanners, or legitimate applications that may have reasons for repeated authentication failures. This monitoring approach is tied to the tactics and techniques of Credential Access, specifically identifying behavior that matches with brute force attempts to access credentials. Be mindful that this analysis has a medium level of threat indication and must be contextualized within your environment to differentiate between malicious attempts and benign anomalies effectively."
    }
  },
  {
    "instruction": "How can I detect: The Directory Service Restore Mode (DSRM) account is a local administrator account on Domain Controllers. Attackers may change the password to gain persistence.",
    "context": "",
    "output": "In order to detect if attackers are attempting to change the password of the Directory Service Restore Mode (DSRM) account to potentially gain persistence on Domain Controllers, you should monitor Windows security logs for the occurrence of Event ID 4794. The DSRM account acts as a local administrator on Domain Controllers, and its compromise could provide attackers with significant control over the domain. It is important to note that encountering this event ID during the initial installation of a domain controller could be a normal activity and considered a false positive. However, outside of this context, sightings of Event ID 4794 should be taken with high seriousness, as they indicate attempts to modify the DSRM password unexpectedly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The Directory Service Restore Mode (DSRM) account is a local administrator account on Domain Controllers. Attackers may change the password to gain persistence.",
      "answer": "In order to detect if attackers are attempting to change the password of the Directory Service Restore Mode (DSRM) account to potentially gain persistence on Domain Controllers, you should monitor Windows security logs for the occurrence of Event ID 4794. The DSRM account acts as a local administrator on Domain Controllers, and its compromise could provide attackers with significant control over the domain. It is important to note that encountering this event ID during the initial installation of a domain controller could be a normal activity and considered a false positive. However, outside of this context, sightings of Event ID 4794 should be taken with high seriousness, as they indicate attempts to modify the DSRM password unexpectedly."
    }
  },
  {
    "instruction": "Can you explain how to detect: weak passwords or often abused passwords (seen used by threat actors) via the CLI. An example would be a threat actor creating a new user via the net command and providing the password inline",
    "context": "",
    "output": "Certainly!\n\nIn order to detect weak passwords or often abused passwords (seen used by threat actors) via the CLI, such as when a threat actor is creating a new user via the net command and providing the password inline, you should monitor the creation of processes on Windows systems. Specifically, look for instances where commands are executed with command line arguments that contain any of the following passwords: 'Asd123.aaaa', 'password123' (which also includes variations like 'PASSWORD123123!'), '123456789', or 'P@ssw0rd!'. These particular passwords are commonly used in insecure practices or have been noted for their use in opportunistic ransomware campaigns targeting sectors like education. It\u2019s important to consider that the detection of these passwords in command lines could sometimes represent legitimate use, albeit such practices should be discouraged. Furthermore, be aware that there may be other instances that trigger alerts which might not be malicious in nature (termed as false positives). The severity level for these detections is regarded as medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "weak passwords or often abused passwords (seen used by threat actors) via the CLI. An example would be a threat actor creating a new user via the net command and providing the password inline",
      "answer": "In order to detect weak passwords or often abused passwords (seen used by threat actors) via the CLI, such as when a threat actor is creating a new user via the net command and providing the password inline, you should monitor the creation of processes on Windows systems. Specifically, look for instances where commands are executed with command line arguments that contain any of the following passwords: 'Asd123.aaaa', 'password123' (which also includes variations like 'PASSWORD123123!'), '123456789', or 'P@ssw0rd!'. These particular passwords are commonly used in insecure practices or have been noted for their use in opportunistic ransomware campaigns targeting sectors like education. It\u2019s important to consider that the detection of these passwords in command lines could sometimes represent legitimate use, albeit such practices should be discouraged. Furthermore, be aware that there may be other instances that trigger alerts which might not be malicious in nature (termed as false positives). The severity level for these detections is regarded as medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the \"Get-AdComputer\" to enumerate Computers or properties within Active Directory.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of the \"Get-AdComputer\" to enumerate Computers or properties within Active Directory, you should monitor PowerShell script executions on Windows systems. Focus on identifying instances where the script text contains the 'Get-AdComputer ' cmdlet, which is typically used for querying Active Directory for computer objects or their properties. Look specifically for script executions that include commands like '-Filter ', '-LDAPFilter ', and '-Properties ', as these are often used to refine queries and could indicate an attempt to enumerate or extract detailed information from Active Directory. Ensure that Script Block Logging is enabled to capture the necessary details for analysis. Note that while this detection is important, it has a low level of confidence and may result in unknown false positives, suggesting a need for manual verification of the context in which these commands are used.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Get-AdComputer\" to enumerate Computers or properties within Active Directory.",
      "answer": "In order to detect usage of the \"Get-AdComputer\" to enumerate Computers or properties within Active Directory, you should monitor PowerShell script executions on Windows systems. Focus on identifying instances where the script text contains the 'Get-AdComputer ' cmdlet, which is typically used for querying Active Directory for computer objects or their properties. Look specifically for script executions that include commands like '-Filter ', '-LDAPFilter ', and '-Properties ', as these are often used to refine queries and could indicate an attempt to enumerate or extract detailed information from Active Directory. Ensure that Script Block Logging is enabled to capture the necessary details for analysis. Note that while this detection is important, it has a low level of confidence and may result in unknown false positives, suggesting a need for manual verification of the context in which these commands are used."
    }
  },
  {
    "instruction": "Explain how should I detect the following: regedit started with TrustedInstaller privileges or by ProcessHacker.exe",
    "context": "",
    "output": "In order to detect a regedit started with TrustedInstaller privileges or by ProcessHacker.exe, you should: Monitor Windows process creation logs for instances where the registry editor (regedit.exe) is started. Specifically, look for situations where regedit.exe is launched either with privileges associated with the TrustedInstaller account or as a child process of ProcessHacker.exe. This activity is uncommon in regular operations and is therefore flagged with a high level of concern. It's essential to keep an eye on such actions as they could indicate attempts to manipulate or compromise system settings or security policies, which are critical components of maintaining system integrity and security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "regedit started with TrustedInstaller privileges or by ProcessHacker.exe",
      "answer": "In order to detect a regedit started with TrustedInstaller privileges or by ProcessHacker.exe, you should: Monitor Windows process creation logs for instances where the registry editor (regedit.exe) is started. Specifically, look for situations where regedit.exe is launched either with privileges associated with the TrustedInstaller account or as a child process of ProcessHacker.exe. This activity is uncommon in regular operations and is therefore flagged with a high level of concern. It's essential to keep an eye on such actions as they could indicate attempts to manipulate or compromise system settings or security policies, which are critical components of maintaining system integrity and security."
    }
  },
  {
    "instruction": "How can I detect: usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string",
    "context": "",
    "output": "In order to detect usage of the \"FromBase64String\" function in the command line which is used to decode a base64 encoded string, you should monitor process creation events on Windows platforms. Specifically, look for instances where the command line invocation includes the pattern '::FromBase64String('. This pattern indicates an attempt to decode a base64 encoded string, which can be a tactic employed by attackers to execute encoded payloads or scripts in a manner that evades detection. Be aware that there may be legitimate uses of this function, such as in administrative script libraries; therefore, these occurrences might not always signify malicious activity but should be investigated with a high priority due to the potential risks involved.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string",
      "answer": "In order to detect usage of the \"FromBase64String\" function in the command line which is used to decode a base64 encoded string, you should monitor process creation events on Windows platforms. Specifically, look for instances where the command line invocation includes the pattern '::FromBase64String('. This pattern indicates an attempt to decode a base64 encoded string, which can be a tactic employed by attackers to execute encoded payloads or scripts in a manner that evades detection. Be aware that there may be legitimate uses of this function, such as in administrative script libraries; therefore, these occurrences might not always signify malicious activity but should be investigated with a high priority due to the potential risks involved."
    }
  },
  {
    "instruction": "Can you explain how to detect: Open a handle on the drive volume via the \\\\.\\ DOS device path specifier and perform direct access read of the first few bytes of the volume.",
    "context": "",
    "output": "Certainly!\n\nIn order to open a handle on the drive volume via the \\\\.\\ DOS device path specifier and perform direct access read of the first few bytes of the volume, you should: Monitor PowerShell scripts for specific behavior patterns that are indicative of this attack method. Specifically, look for scripts that contain the PowerShell cmdlet `New-Object` in conjunction with the use of `IO.FileStream` and the DOS device path specifier `\\\\.\\` within their code. This suggests that the script is attempting to directly interact with a drive volume, which could be a part of malicious activity aiming to read or modify the disk at a low level. It is essential to have Script Block Logging enabled on Windows systems to detect such activities. Be mindful, however, that some legitimate PowerShell scripts might also use these patterns for valid purposes, so consider these instances as potential false positives. The risk level associated with this behavior is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Open a handle on the drive volume via the \\\\.\\ DOS device path specifier and perform direct access read of the first few bytes of the volume.",
      "answer": "In order to open a handle on the drive volume via the \\\\.\\ DOS device path specifier and perform direct access read of the first few bytes of the volume, you should: Monitor PowerShell scripts for specific behavior patterns that are indicative of this attack method. Specifically, look for scripts that contain the PowerShell cmdlet `New-Object` in conjunction with the use of `IO.FileStream` and the DOS device path specifier `\\\\.\\` within their code. This suggests that the script is attempting to directly interact with a drive volume, which could be a part of malicious activity aiming to read or modify the disk at a low level. It is essential to have Script Block Logging enabled on Windows systems to detect such activities. Be mindful, however, that some legitimate PowerShell scripts might also use these patterns for valid purposes, so consider these instances as potential false positives. The risk level associated with this behavior is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect standard users login that are part of high privileged groups such as the Administrator group",
    "context": "",
    "output": "Sure!\nIn order to detect standard users login that are part of high privileged groups such as the Administrator group, you should monitor the Local Security Authority (LSA) server events on Windows systems. Specifically, focus on the Microsoft-Windows-LSA/Operational event log, identified by the GUID {199FE037-2B82-40A9-82AC-E1D46C792B99}, which must be collected to receive these events. Look for event ID 300, which indicates a security-sensitive operation occurred.\n\nFilter the events to detect those involving standard user accounts starting with 'S-1-5-21-', which typically represents domain user accounts. Further refine the detection by checking if these user accounts are associated with high privilege groups. The notable group identifiers to watch include 'S-1-5-32-544' for local administrators, '-500}' for domain admins, '-518}' for schema admins, and '-519}' for enterprise admins within the SidList field. However, it's crucial to exclude any security identifiers (SIDs) ending with '-500', '-518', and '-519', as these may represent legitimate domain admin, schema admin, and enterprise admin activities, respectively, and thus avoid false positives.\n\nManage potential false positives by specifically considering scenarios where standard domain users, out of necessity, are part of the administrator group. These instances should preferably be filtered out employing the \"TargetUserName\" field to focus on genuine security concerns. This approach is tagged with MITRE ATT&CK tactics and techniques, including Initial Access and Privilege Escalation, as it aims to uncover attempts by attackers to gain footholds or elevate their access within a target system through manipulation or exploitation of user account group memberships.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect standard users login that are part of high privileged groups such as the Administrator group",
      "answer": "In order to detect standard users login that are part of high privileged groups such as the Administrator group, you should monitor the Local Security Authority (LSA) server events on Windows systems. Specifically, focus on the Microsoft-Windows-LSA/Operational event log, identified by the GUID {199FE037-2B82-40A9-82AC-E1D46C792B99}, which must be collected to receive these events. Look for event ID 300, which indicates a security-sensitive operation occurred.\n\nFilter the events to detect those involving standard user accounts starting with 'S-1-5-21-', which typically represents domain user accounts. Further refine the detection by checking if these user accounts are associated with high privilege groups. The notable group identifiers to watch include 'S-1-5-32-544' for local administrators, '-500}' for domain admins, '-518}' for schema admins, and '-519}' for enterprise admins within the SidList field. However, it's crucial to exclude any security identifiers (SIDs) ending with '-500', '-518', and '-519', as these may represent legitimate domain admin, schema admin, and enterprise admin activities, respectively, and thus avoid false positives.\n\nManage potential false positives by specifically considering scenarios where standard domain users, out of necessity, are part of the administrator group. These instances should preferably be filtered out employing the \"TargetUserName\" field to focus on genuine security concerns. This approach is tagged with MITRE ATT&CK tactics and techniques, including Initial Access and Privilege Escalation, as it aims to uncover attempts by attackers to gain footholds or elevate their access within a target system through manipulation or exploitation of user account group memberships."
    }
  },
  {
    "instruction": "Explain how should I detect the following: LSASS process access by LaZagne for credential dumping.",
    "context": "",
    "output": "In order to detect LSASS process access by LaZagne for credential dumping, you should look for process access activities in Windows operating systems that specifically involve accessing the Local Security Authority Subsystem Service (LSASS) executable. This detection focuses on instances where the LSASS executable is targeted, reflected by the end of the target image path '\\lsass.exe'. Additionally, the monitoring should check for a call trace that includes access from 'C:\\Windows\\SYSTEM32\\ntdll.dll', 'C:\\Windows\\System32\\KERNELBASE.dll', through '_ctypes.pyd', and involves 'python27.dll', indicating the use of Python, which is a common component of the LaZagne project utilized for extracting credentials. The access attempts should have a granted access level of '0x1FFFFF', which entails extensive permissions that could be abused for credential dumping. Such activities are considered critical due to their association with sensitive information theft.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "LSASS process access by LaZagne for credential dumping.",
      "answer": "In order to detect LSASS process access by LaZagne for credential dumping, you should look for process access activities in Windows operating systems that specifically involve accessing the Local Security Authority Subsystem Service (LSASS) executable. This detection focuses on instances where the LSASS executable is targeted, reflected by the end of the target image path '\\lsass.exe'. Additionally, the monitoring should check for a call trace that includes access from 'C:\\Windows\\SYSTEM32\\ntdll.dll', 'C:\\Windows\\System32\\KERNELBASE.dll', through '_ctypes.pyd', and involves 'python27.dll', indicating the use of Python, which is a common component of the LaZagne project utilized for extracting credentials. The access attempts should have a granted access level of '0x1FFFFF', which entails extensive permissions that could be abused for credential dumping. Such activities are considered critical due to their association with sensitive information theft."
    }
  },
  {
    "instruction": "Explain how should I detect the following: exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to RCE.",
    "context": "",
    "output": "In order to detect exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to Remote Code Execution (RCE), you should: Focus on monitoring application error logs specifically within applications that use the velocity template rendering engine. Ensure that these logs have a log level of ERROR or above as specified in the requirements. Detection can be achieved by looking out for specific exception keywords that indicate a problematic state during the rendering process. These keywords include 'ParseErrorException', 'VelocityException', and 'TemplateInitException'. It is essential to monitor for these exceptions because they indicate that something went wrong during the dynamic rendering of user input, which might be an attempt at or indicative of a possible RCE attack. Be aware that there could be certain situations where these alerts might not signify an actual attack but rather stem from internal application bugs or issues like missing '.vm' (Velocity template) files, representing potential false positives. Given the severity of what these exceptions might represent, the alert level for such detections is marked as high.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to RCE.",
      "answer": "In order to detect exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to Remote Code Execution (RCE), you should: Focus on monitoring application error logs specifically within applications that use the velocity template rendering engine. Ensure that these logs have a log level of ERROR or above as specified in the requirements. Detection can be achieved by looking out for specific exception keywords that indicate a problematic state during the rendering process. These keywords include 'ParseErrorException', 'VelocityException', and 'TemplateInitException'. It is essential to monitor for these exceptions because they indicate that something went wrong during the dynamic rendering of user input, which might be an attempt at or indicative of a possible RCE attack. Be aware that there could be certain situations where these alerts might not signify an actual attack but rather stem from internal application bugs or issues like missing '.vm' (Velocity template) files, representing potential false positives. Given the severity of what these exceptions might represent, the alert level for such detections is marked as high."
    }
  },
  {
    "instruction": "How can I detect: attempts to collect data stored in the clipboard from users with the usage of xclip tool.\nXclip has to be installed.\nHighly recommended using rule on servers, due to high usage of clipboard utilities on user workstations.\n",
    "context": "",
    "output": "In order to detect attempts to collect data stored in the clipboard from users with the usage of xclip tool, you should monitor audit logs on Linux systems, particularly for auditd service records. Look for events where the execution command (`EXECVE`) involves the `xclip` tool. Specifically, pay attention to usage patterns where the command-line arguments include '-selection' or '-sel', followed by either 'clipboard' or 'clip', and also the '-o' option. This pattern of arguments is indicative of attempts to output the contents of the clipboard, which could be a sign of malicious activity aiming to steal information.\n\nIt is important to note that the detection of this activity is set at a low level due to the possibility of legitimate uses of the xclip tool, especially on user workstations where clipboard utilities are frequently used for non-malicious purposes. However, the monitoring is highly recommended on servers where such usage patterns are less common and more likely to be indicative of an attack.\n\nThis monitoring strategy aligns with MITRE ATT&CK tactics and techniques focused on the collection of data, specifically from information stored in the clipboard, potentially as part of a larger espionage or data theft operation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to collect data stored in the clipboard from users with the usage of xclip tool.\nXclip has to be installed.\nHighly recommended using rule on servers, due to high usage of clipboard utilities on user workstations.\n",
      "answer": "In order to detect attempts to collect data stored in the clipboard from users with the usage of xclip tool, you should monitor audit logs on Linux systems, particularly for auditd service records. Look for events where the execution command (`EXECVE`) involves the `xclip` tool. Specifically, pay attention to usage patterns where the command-line arguments include '-selection' or '-sel', followed by either 'clipboard' or 'clip', and also the '-o' option. This pattern of arguments is indicative of attempts to output the contents of the clipboard, which could be a sign of malicious activity aiming to steal information.\n\nIt is important to note that the detection of this activity is set at a low level due to the possibility of legitimate uses of the xclip tool, especially on user workstations where clipboard utilities are frequently used for non-malicious purposes. However, the monitoring is highly recommended on servers where such usage patterns are less common and more likely to be indicative of an attack.\n\nThis monitoring strategy aligns with MITRE ATT&CK tactics and techniques focused on the collection of data, specifically from information stored in the clipboard, potentially as part of a larger espionage or data theft operation."
    }
  },
  {
    "instruction": "How to detect: file indicators of potential exploitation of MOVEit CVE-2023-34362.",
    "context": "",
    "output": "In order to detect file indicators of potential exploitation of MOVEit CVE-2023-34362, you should focus on monitoring Windows file events, specifically looking for activities that might indicate an attack. This involves scrutinizing various file creations, modifications, and actions that are unusual or indicative of exploitation patterns associated with this specific vulnerability.\n\nFirstly, you should watch for any file activities involving the directories related to MOVEit Transfer, particularly any actions within the `\\MOVEit Transfer\\wwwroot\\` or `\\MOVEitTransfer\\wwwroot\\` paths. This focus ensures that the surveillance is appropriately narrowed down to the MOVEit environments, hence reducing noise from irrelevant data.\n\nPay particular attention to files that end with extensions commonly associated with potentially malicious activities or scripts. These extensions include `.7z`, `.bat`, `.dll`, `.exe`, `.ps1`, `.rar`, `.vbe`, `.vbs`, and `.zip`. The appearance of such files under the MOVEit Transfer directories could signify unauthorized attempts to upload or modify executable or compressed files, which could be leveraged in an exploitation attempt.\n\nAdditionally, keep an eye out for known indicators of compromise (IoCs) specifically named files such as occurrences of `_human2.aspx`, `_human2.aspx.lnk`, `human2.aspx`, and `human2.aspx.lnk` under the MOVEit Transfer directories. These file names, especially when appearing in conjunction with `.lnk` or directly as `.aspx` files, are strong indicators of attempted or successful exploitation.\n\nFurther, be vigilant for newly compiled ASP.NET files within the `\\Windows\\Microsoft.net\\Framework64\\v` directory that falls under the `\\Temporary ASP.NET Files\\` path and contain the string `App_Web_` in their names. These should have a creation date within the months following the disclosure of CVE-2023-34362, specifically from March to June 2023, and end with `.dll`. This pattern could indicate the deployment of malicious ASP.NET applications intended to exploit or maintain persistence within the affected MOVEit environment.\n\nIt is also essential to apply this monitoring specifically to MOVEit servers to minimize false positives. This targeted approach ensures that the detection efforts are highly relevant and focused on the environments at risk from this vulnerability.\n\nBy actively monitoring for these signs and applying these detection strategies, organizations can significantly enhance their ability to identify potential exploitation attempts of MOVEit CVE-2023-34362. This proactive stance is critical for mitigating the vulnerability's impact and securing affected systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "file indicators of potential exploitation of MOVEit CVE-2023-34362.",
      "answer": "In order to detect file indicators of potential exploitation of MOVEit CVE-2023-34362, you should focus on monitoring Windows file events, specifically looking for activities that might indicate an attack. This involves scrutinizing various file creations, modifications, and actions that are unusual or indicative of exploitation patterns associated with this specific vulnerability.\n\nFirstly, you should watch for any file activities involving the directories related to MOVEit Transfer, particularly any actions within the `\\MOVEit Transfer\\wwwroot\\` or `\\MOVEitTransfer\\wwwroot\\` paths. This focus ensures that the surveillance is appropriately narrowed down to the MOVEit environments, hence reducing noise from irrelevant data.\n\nPay particular attention to files that end with extensions commonly associated with potentially malicious activities or scripts. These extensions include `.7z`, `.bat`, `.dll`, `.exe`, `.ps1`, `.rar`, `.vbe`, `.vbs`, and `.zip`. The appearance of such files under the MOVEit Transfer directories could signify unauthorized attempts to upload or modify executable or compressed files, which could be leveraged in an exploitation attempt.\n\nAdditionally, keep an eye out for known indicators of compromise (IoCs) specifically named files such as occurrences of `_human2.aspx`, `_human2.aspx.lnk`, `human2.aspx`, and `human2.aspx.lnk` under the MOVEit Transfer directories. These file names, especially when appearing in conjunction with `.lnk` or directly as `.aspx` files, are strong indicators of attempted or successful exploitation.\n\nFurther, be vigilant for newly compiled ASP.NET files within the `\\Windows\\Microsoft.net\\Framework64\\v` directory that falls under the `\\Temporary ASP.NET Files\\` path and contain the string `App_Web_` in their names. These should have a creation date within the months following the disclosure of CVE-2023-34362, specifically from March to June 2023, and end with `.dll`. This pattern could indicate the deployment of malicious ASP.NET applications intended to exploit or maintain persistence within the affected MOVEit environment.\n\nIt is also essential to apply this monitoring specifically to MOVEit servers to minimize false positives. This targeted approach ensures that the detection efforts are highly relevant and focused on the environments at risk from this vulnerability.\n\nBy actively monitoring for these signs and applying these detection strategies, organizations can significantly enhance their ability to identify potential exploitation attempts of MOVEit CVE-2023-34362. This proactive stance is critical for mitigating the vulnerability's impact and securing affected systems."
    }
  },
  {
    "instruction": "How to detect: Obfuscated Powershell via COMPRESS OBFUSCATION",
    "context": "",
    "output": "In order to detect Obfuscated Powershell via COMPRESS OBFUSCATION, you should monitor Windows systems for specific event patterns that are indicative of this attack technique. Focus on the Windows System log, particularly paying attention to events generated by the Service Control Manager. The relevant event ID to watch for is 7045, which signals the creation of a new service. The key indicator of an attack is found in the ImagePath of the new service, specifically looking for the presence of PowerShell scripts that are obfuscated through COMPRESS OBFUSCATION techniques.\n\nThese scripts often attempt to hide their true nature and intentions by employing various methods to obfuscate their code. The presence of certain strings within the ImagePath can signal such obfuscation attempts. Specifically, look for the combination of 'new-object' together with 'text.encoding]::ascii' and 'readtoend'. This combination is a strong indicator of obfuscation, as it usually signifies an attempt to encode and subsequently decode or manipulate ASCII text within a script, a common tactic in hiding the script's true functionality.\n\nAdditionally, the appearance of ':system.io.compression.deflatestream' or 'system.io.streamreader' within the ImagePath should also raise red flags. Both ':system.io.compression.deflatestream' and 'system.io.streamreader' are indicative of compression or decompression actions and reading of streams, respectively. These are methods that can be leveraged to obfuscate and later execute malicious PowerShell code, by compressing it in a way that evades basic detection mechanisms and then expanding it at runtime for execution.\n\nIt is important to note that while these indicators can be significant, they may also lead to false positives; therefore, the detection should be considered with a medium level of confidence and further investigated to confirm malicious activity.\n\nWhen monitoring for these indicators, tagging them with relevant MITRE ATT&CK tactics and techniques such as \"Defense Evasion\" and \"Execution\" can help contextualize the detection and aid in the response. These techniques often involve the evasion of detection mechanisms and the execution of malicious code, both of which are key components of the obfuscation and eventual execution of the obfuscated PowerShell scripts detected by these indicators.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via COMPRESS OBFUSCATION",
      "answer": "In order to detect Obfuscated Powershell via COMPRESS OBFUSCATION, you should monitor Windows systems for specific event patterns that are indicative of this attack technique. Focus on the Windows System log, particularly paying attention to events generated by the Service Control Manager. The relevant event ID to watch for is 7045, which signals the creation of a new service. The key indicator of an attack is found in the ImagePath of the new service, specifically looking for the presence of PowerShell scripts that are obfuscated through COMPRESS OBFUSCATION techniques.\n\nThese scripts often attempt to hide their true nature and intentions by employing various methods to obfuscate their code. The presence of certain strings within the ImagePath can signal such obfuscation attempts. Specifically, look for the combination of 'new-object' together with 'text.encoding]::ascii' and 'readtoend'. This combination is a strong indicator of obfuscation, as it usually signifies an attempt to encode and subsequently decode or manipulate ASCII text within a script, a common tactic in hiding the script's true functionality.\n\nAdditionally, the appearance of ':system.io.compression.deflatestream' or 'system.io.streamreader' within the ImagePath should also raise red flags. Both ':system.io.compression.deflatestream' and 'system.io.streamreader' are indicative of compression or decompression actions and reading of streams, respectively. These are methods that can be leveraged to obfuscate and later execute malicious PowerShell code, by compressing it in a way that evades basic detection mechanisms and then expanding it at runtime for execution.\n\nIt is important to note that while these indicators can be significant, they may also lead to false positives; therefore, the detection should be considered with a medium level of confidence and further investigated to confirm malicious activity.\n\nWhen monitoring for these indicators, tagging them with relevant MITRE ATT&CK tactics and techniques such as \"Defense Evasion\" and \"Execution\" can help contextualize the detection and aid in the response. These techniques often involve the evasion of detection mechanisms and the execution of malicious code, both of which are key components of the obfuscation and eventual execution of the obfuscated PowerShell scripts detected by these indicators."
    }
  },
  {
    "instruction": "How to detect: execution of WMIC in order to get a list of firewall and antivirus products",
    "context": "",
    "output": "In order to detect the execution of WMIC in order to get a list of firewall and antivirus products, you should: Monitor the creation of processes on Windows systems for events where the image ending matches '\\wmic.exe' or where the original file name is exactly 'wmic.exe'. Additionally, inspect the command line arguments for the presence of strings 'AntiVirusProduct' or 'FirewallProduct'. This detection is based on observing both the specific process being initiated and the nature of the command line instructions it's being given, aiming to catch attempts to enumerate installed security software through WMIC commands. The level of trust in these detections is medium, although it's noted that there could be scenarios (unknown at this time) where such activity could be legitimate.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of WMIC in order to get a list of firewall and antivirus products",
      "answer": "In order to detect the execution of WMIC in order to get a list of firewall and antivirus products, you should: Monitor the creation of processes on Windows systems for events where the image ending matches '\\wmic.exe' or where the original file name is exactly 'wmic.exe'. Additionally, inspect the command line arguments for the presence of strings 'AntiVirusProduct' or 'FirewallProduct'. This detection is based on observing both the specific process being initiated and the nature of the command line instructions it's being given, aiming to catch attempts to enumerate installed security software through WMIC commands. The level of trust in these detections is medium, although it's noted that there could be scenarios (unknown at this time) where such activity could be legitimate."
    }
  },
  {
    "instruction": "How to detect: execution of executables that can be used to bypass Applocker whitelisting",
    "context": "",
    "output": "In order to detect execution of executables that can be used to bypass Applocker whitelisting, you should monitor the creation of processes in Windows environments for executions involving specific executables that are commonly leveraged by threat actors for this purpose. Observations to be on the lookout for include the execution of 'msdt.exe', 'installutil.exe', 'regsvcs.exe', 'regasm.exe', 'msbuild.exe', and 'ieexec.exe'. It's important to tailor the detection mechanism to account for legitimate use of these executables, as their usage can sometimes be benign, such as using 'installutil.exe' for adding features to .NET applications, especially within developer environments. Be aware that while monitoring these executables can help in identifying malicious activity aiming to bypass Applocker rules, the risk of false positives exists and should be managed by understanding the typical behavior within your monitored environment. This approach focuses on the process creation category, leveraging the ability to scan command-line inputs for the mentioned executables, thereby offering an effective strategy to spot potential bypass attempts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of executables that can be used to bypass Applocker whitelisting",
      "answer": "In order to detect execution of executables that can be used to bypass Applocker whitelisting, you should monitor the creation of processes in Windows environments for executions involving specific executables that are commonly leveraged by threat actors for this purpose. Observations to be on the lookout for include the execution of 'msdt.exe', 'installutil.exe', 'regsvcs.exe', 'regasm.exe', 'msbuild.exe', and 'ieexec.exe'. It's important to tailor the detection mechanism to account for legitimate use of these executables, as their usage can sometimes be benign, such as using 'installutil.exe' for adding features to .NET applications, especially within developer environments. Be aware that while monitoring these executables can help in identifying malicious activity aiming to bypass Applocker rules, the risk of false positives exists and should be managed by understanding the typical behavior within your monitored environment. This approach focuses on the process creation category, leveraging the ability to scan command-line inputs for the mentioned executables, thereby offering an effective strategy to spot potential bypass attempts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of grep to identify information about the operating system architecture. Often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\"\n",
    "context": "",
    "output": "In order to detect the use of grep to identify information about the operating system architecture, often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\", you should: Monitor process creation logs on Linux systems for any instance where the 'grep' command ends its execution path, indicating it's being used. Additionally, pay attention to cases where the command line arguments end with architecture information keywords such as 'aarch64', 'arm', 'i386', 'i686', 'mips', or 'x86_64'. These indicators can suggest an attempt to pinpoint the architecture of the operating system, which may be a precursor or component of a larger reconnaissance strategy. It is important to capture all conditions where both the specific use of 'grep' and these architecture-related command line arguments occur together. However, be aware that this rule might produce unknown false positives, meaning it should be considered as having a low alert level until further verification of malicious intent can be established.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of grep to identify information about the operating system architecture. Often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\"\n",
      "answer": "In order to detect the use of grep to identify information about the operating system architecture, often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\", you should: Monitor process creation logs on Linux systems for any instance where the 'grep' command ends its execution path, indicating it's being used. Additionally, pay attention to cases where the command line arguments end with architecture information keywords such as 'aarch64', 'arm', 'i386', 'i686', 'mips', or 'x86_64'. These indicators can suggest an attempt to pinpoint the architecture of the operating system, which may be a precursor or component of a larger reconnaissance strategy. It is important to capture all conditions where both the specific use of 'grep' and these architecture-related command line arguments occur together. However, be aware that this rule might produce unknown false positives, meaning it should be considered as having a low alert level until further verification of malicious intent can be established."
    }
  },
  {
    "instruction": "Explain how should I detect the following: RunDLL32.exe spawning explorer.exe as child, which is very uncommon, often observes Gamarue spawning the explorer.exe process in an unusual way",
    "context": "",
    "output": "In order to detect RunDLL32.exe spawning explorer.exe as a child, which is very uncommon, often observed in Gamarue spawning the explorer.exe process in an unusual way, you should: Monitor Windows process creation logs for instances where the process 'rundll32.exe' acts as a parent to the 'explorer.exe' process. However, it is important to exclude any events where the parent command line includes '\\shell32.dll,Control_RunDLL', as this might not be related to the malicious activity we are concerned with. The focus is on identifying potential malicious behavior that deviates from normal operations, highlighting the need for careful analysis due to the high level of alert this generates. This method relies heavily on scrutinizing parent-child process relationships and contextual command line arguments to flag potential security threats accurately.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "RunDLL32.exe spawning explorer.exe as child, which is very uncommon, often observes Gamarue spawning the explorer.exe process in an unusual way",
      "answer": "In order to detect RunDLL32.exe spawning explorer.exe as a child, which is very uncommon, often observed in Gamarue spawning the explorer.exe process in an unusual way, you should: Monitor Windows process creation logs for instances where the process 'rundll32.exe' acts as a parent to the 'explorer.exe' process. However, it is important to exclude any events where the parent command line includes '\\shell32.dll,Control_RunDLL', as this might not be related to the malicious activity we are concerned with. The focus is on identifying potential malicious behavior that deviates from normal operations, highlighting the need for careful analysis due to the high level of alert this generates. This method relies heavily on scrutinizing parent-child process relationships and contextual command line arguments to flag potential security threats accurately."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of shell scripts under the \"profile.d\" path.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation of shell scripts under the \"profile.d\" path, you should: Monitor Linux file events specifically focusing on the creation or modification of files within the \"/etc/profile.d/\" directory. Pay particular attention to files that have extensions '.csh' or '.sh', as these are shell scripts. It's important to be aware that encountering such events could, at times, be due to legitimate activities. These could include the addition of shell scripts as part of system configurations or during software installations and updates, which commonly occur in the \"profile.d\" directory. Such legitimate actions might trigger false alerts. Therefore, it might be necessary to refine the detection strategy by excluding known good scripts or by integrating this detection with additional contextual events to minimize false positives. The initial severity level for these detections is considered low, allowing for adjustments based on specific environmental needs or after conducting further analysis to better distinguish between benign and malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of shell scripts under the \"profile.d\" path.",
      "answer": "In order to detect the creation of shell scripts under the \"profile.d\" path, you should: Monitor Linux file events specifically focusing on the creation or modification of files within the \"/etc/profile.d/\" directory. Pay particular attention to files that have extensions '.csh' or '.sh', as these are shell scripts. It's important to be aware that encountering such events could, at times, be due to legitimate activities. These could include the addition of shell scripts as part of system configurations or during software installations and updates, which commonly occur in the \"profile.d\" directory. Such legitimate actions might trigger false alerts. Therefore, it might be necessary to refine the detection strategy by excluding known good scripts or by integrating this detection with additional contextual events to minimize false positives. The initial severity level for these detections is considered low, allowing for adjustments based on specific environmental needs or after conducting further analysis to better distinguish between benign and malicious activities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation",
    "context": "",
    "output": "In order to detect the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation, you should: Focus on analyzing Windows System service logs for specific patterns indicating an attempt to escalate privileges or execute arbitrary commands. Look for logs where the 'Service Control Manager' is the provider, especially those with an Event ID of 7045, which signals a service installation event. The critical patterns to watch for include commands that run cmd.exe or %COMSPEC% with parameters '/c echo', followed by a reference to a pipe (e.g., '\\\\.\\pipe\\'). This pattern is a common tactic in Meterpreter and Cobalt Strike get system techniques, aiming to execute code or commands for privilege escalation.\n\nAdditionally, watch for instances where rundll32.exe is used to load DLL files with specific characteristics, such as using parameters like '.dll,a' and '/p:', or any service installation attempts originating from a UNC path that starts with '\\\\\\\\127.0.0.1\\\\ADMIN$\\', a method known to be exploited for similar purposes. \n\nLogs that match these patterns are critical to investigate as they are indicative of privilege escalation techniques used by threat actors leveraging tools like Meterpreter and Cobalt Strike. Such logs will contain essential details like the Computer Name, Domain Name, User Name, and the Image Path of the executed service. Due to the specificity of these patterns, false positives are considered highly unlikely. Thus, identifying and analyzing these signals in your logs is crucial for detecting and mitigating potential security threats related to unauthorized system access or privilege escalation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation",
      "answer": "In order to detect the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation, you should: Focus on analyzing Windows System service logs for specific patterns indicating an attempt to escalate privileges or execute arbitrary commands. Look for logs where the 'Service Control Manager' is the provider, especially those with an Event ID of 7045, which signals a service installation event. The critical patterns to watch for include commands that run cmd.exe or %COMSPEC% with parameters '/c echo', followed by a reference to a pipe (e.g., '\\\\.\\pipe\\'). This pattern is a common tactic in Meterpreter and Cobalt Strike get system techniques, aiming to execute code or commands for privilege escalation.\n\nAdditionally, watch for instances where rundll32.exe is used to load DLL files with specific characteristics, such as using parameters like '.dll,a' and '/p:', or any service installation attempts originating from a UNC path that starts with '\\\\\\\\127.0.0.1\\\\ADMIN$\\', a method known to be exploited for similar purposes. \n\nLogs that match these patterns are critical to investigate as they are indicative of privilege escalation techniques used by threat actors leveraging tools like Meterpreter and Cobalt Strike. Such logs will contain essential details like the Computer Name, Domain Name, User Name, and the Image Path of the executed service. Due to the specificity of these patterns, false positives are considered highly unlikely. Thus, identifying and analyzing these signals in your logs is crucial for detecting and mitigating potential security threats related to unauthorized system access or privilege escalation."
    }
  },
  {
    "instruction": "How can I detect: suspicious change of file privileges with chown and chmod commands",
    "context": "",
    "output": "In order to detect suspicious change of file privileges with chown and chmod commands, you should: Monitor Linux system logs, specifically focusing on the creation of processes. Within this monitoring, look for activities where the command line includes either the 'chown root' command to change the ownership of a file or directory to the root user or the commands 'chmod u+s' or 'chmod g+s' which are used to set the SUID (Set owner User ID up on execution) or SGID (Set Group ID) permissions on a file, respectively. These actions can potentially indicate an attempt to alter file or directory permissions in a way that could compromise system security. It's important to consider that such changes might sometimes be a part of legitimate administrative tasks, hence this kind of activity is classified with a low level of alertness.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious change of file privileges with chown and chmod commands",
      "answer": "In order to detect suspicious change of file privileges with chown and chmod commands, you should: Monitor Linux system logs, specifically focusing on the creation of processes. Within this monitoring, look for activities where the command line includes either the 'chown root' command to change the ownership of a file or directory to the root user or the commands 'chmod u+s' or 'chmod g+s' which are used to set the SUID (Set owner User ID up on execution) or SGID (Set Group ID) permissions on a file, respectively. These actions can potentially indicate an attempt to alter file or directory permissions in a way that could compromise system security. It's important to consider that such changes might sometimes be a part of legitimate administrative tasks, hence this kind of activity is classified with a low level of alertness."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint, you should focus on monitoring process creation events in Windows systems. Look for particular indicators such as the execution of processes remotely, the use of tools like Sysinternals PsExec, or processes with descriptions starting with \"Windows PowerShell\" or \"pwsh\". Also, pay attention to processes with specific original file names including but not limited to 'powershell.exe', 'pwsh.dll', 'powershell_ise.exe', 'psexec.exe', 'psexec.c', and various others known to be used in malicious activities.\n\nIt's critical to filter out false positives by excluding processes with images ending in common legitimate names such as '\\powershell.exe', '\\pwsh.exe', among others. This is important as attackers might rename binaries to slightly altered names that are hard to distinguish from the originals at a quick glance. Be aware of potential false positives like custom applications using renamed binaries with slight changes to the binary name, or the use of PsExec installed via the Windows Store, which doesn't contain the original filename field leading to possible false negatives.\n\nThis detection strategy is grounded in tactics and techniques akin to Credential Access, Execution, Defense Evasion, and Discovery, with a high importance level assigned due to the criticality of identifying and reacting to such malicious activities promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.",
      "answer": "In order to detect the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint, you should focus on monitoring process creation events in Windows systems. Look for particular indicators such as the execution of processes remotely, the use of tools like Sysinternals PsExec, or processes with descriptions starting with \"Windows PowerShell\" or \"pwsh\". Also, pay attention to processes with specific original file names including but not limited to 'powershell.exe', 'pwsh.dll', 'powershell_ise.exe', 'psexec.exe', 'psexec.c', and various others known to be used in malicious activities.\n\nIt's critical to filter out false positives by excluding processes with images ending in common legitimate names such as '\\powershell.exe', '\\pwsh.exe', among others. This is important as attackers might rename binaries to slightly altered names that are hard to distinguish from the originals at a quick glance. Be aware of potential false positives like custom applications using renamed binaries with slight changes to the binary name, or the use of PsExec installed via the Windows Store, which doesn't contain the original filename field leading to possible false negatives.\n\nThis detection strategy is grounded in tactics and techniques akin to Credential Access, Execution, Defense Evasion, and Discovery, with a high importance level assigned due to the criticality of identifying and reacting to such malicious activities promptly."
    }
  },
  {
    "instruction": "Can you explain how to detect: base64 encoded \"MpPreference\" PowerShell cmdlet code that tries to modifies or tamper with Windows Defender AV",
    "context": "",
    "output": "Certainly!\n\nIn order to detect base64 encoded \"MpPreference\" PowerShell cmdlet code that tries to modify or tamper with Windows Defender AV, you should: Monitor the creation of processes on Windows systems, particularly focusing on the command line executions. Pay special attention to the presence of specific commands, which include both normal and lowercase variations of 'Add-MpPreference ' and 'Set-MpPreference '. Additionally, look for these commands encoded in UTF16-LE format in the command line executions. This approach helps to identify attempts to bypass or disable Windows Defender AV, ensuring the detection of sophisticated methods used to tamper with security settings silently. It's essential to note that while this method is highly effective at identifying suspicious activities, there may be cases where it generates unknown false positives, indicating the need for further investigation when such detections occur. The severity of this detection is considered high, indicating its potential impact on system security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "base64 encoded \"MpPreference\" PowerShell cmdlet code that tries to modifies or tamper with Windows Defender AV",
      "answer": "In order to detect base64 encoded \"MpPreference\" PowerShell cmdlet code that tries to modify or tamper with Windows Defender AV, you should: Monitor the creation of processes on Windows systems, particularly focusing on the command line executions. Pay special attention to the presence of specific commands, which include both normal and lowercase variations of 'Add-MpPreference ' and 'Set-MpPreference '. Additionally, look for these commands encoded in UTF16-LE format in the command line executions. This approach helps to identify attempts to bypass or disable Windows Defender AV, ensuring the detection of sophisticated methods used to tamper with security settings silently. It's essential to note that while this method is highly effective at identifying suspicious activities, there may be cases where it generates unknown false positives, indicating the need for further investigation when such detections occur. The severity of this detection is considered high, indicating its potential impact on system security."
    }
  },
  {
    "instruction": "Can you explain how to detect: deletion of the event log files which may indicate an attempt to destroy forensic evidence",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the deletion of the event log files which may indicate an attempt to destroy forensic evidence, you should: Focus on monitoring file deletion events in Windows environments, specifically targeting files within the 'C:\\Windows\\System32\\winevt\\Logs\\' directory that have a '.evtx' file extension. These files are Windows event log files, and their deletion could be an indicator of an adversary attempting to erase their tracks or interfere with forensic investigations. It's vital to keep an eye on any action that matches these criteria, as it might suggest a potential compromise or malicious activity aimed at avoiding detection. The confidence level for this detection is classified as medium, although it is acknowledged that there might be scenarios where deletions of these files could occur for reasons not associated with malicious intent, labeled under unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deletion of the event log files which may indicate an attempt to destroy forensic evidence",
      "answer": "In order to detect the deletion of the event log files which may indicate an attempt to destroy forensic evidence, you should: Focus on monitoring file deletion events in Windows environments, specifically targeting files within the 'C:\\Windows\\System32\\winevt\\Logs\\' directory that have a '.evtx' file extension. These files are Windows event log files, and their deletion could be an indicator of an adversary attempting to erase their tracks or interfere with forensic investigations. It's vital to keep an eye on any action that matches these criteria, as it might suggest a potential compromise or malicious activity aimed at avoiding detection. The confidence level for this detection is classified as medium, although it is acknowledged that there might be scenarios where deletions of these files could occur for reasons not associated with malicious intent, labeled under unknown false positives."
    }
  },
  {
    "instruction": "How can I detect: possible password spraying attempts using Dsacls",
    "context": "",
    "output": "In order to detect possible password spraying attempts using Dsacls, you should: focus on monitoring process creation logs within Windows environments. The detection hinges on identifying instances where the 'dsacls.exe' executable or processes with the original file name 'DSACLS.EXE' are initiated. Specifically, look for command-line arguments that contain both '/user:' and '/passwd:', which are indicative of a command attempting to use 'dsacls.exe' for unauthorized access by trying different passwords for usernames. It is worth noting that there might be legitimate uses of 'dsacls.exe' related to binding to LDAP sessions, so such instances should be treated as potential false positives. This monitoring strategy is instrumental in highlighting medium-level security threats associated with the tactics and techniques of credential access through password spraying.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible password spraying attempts using Dsacls",
      "answer": "In order to detect possible password spraying attempts using Dsacls, you should: focus on monitoring process creation logs within Windows environments. The detection hinges on identifying instances where the 'dsacls.exe' executable or processes with the original file name 'DSACLS.EXE' are initiated. Specifically, look for command-line arguments that contain both '/user:' and '/passwd:', which are indicative of a command attempting to use 'dsacls.exe' for unauthorized access by trying different passwords for usernames. It is worth noting that there might be legitimate uses of 'dsacls.exe' related to binding to LDAP sessions, so such instances should be treated as potential false positives. This monitoring strategy is instrumental in highlighting medium-level security threats associated with the tactics and techniques of credential access through password spraying."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious curl process start on Windows and outputs the requested document to a local file",
    "context": "",
    "output": "In order to detect a suspicious curl process start on Windows and outputs the requested document to a local file, you should monitor for specific patterns in Windows process creation logs that might indicate malicious activity. First, be alert for any instances where the process name ends with '\\curl.exe' or where the product associated with the process is identified as 'The curl executable'. Such occurrences could signal the invocation of the curl command-line tool, often used for transferring data with URLs, which might be exploited by attackers.\n\nAdditionally, pay close attention to command lines that contain references to certain directories that are commonly used by malware for temporary storage or to hide from casual inspection. These locations include user-specific AppData and Temp directories, the Public user folder, and the Windows Temp directory, among others listed like '%AppData%', '%Public%', '%Temp%', '%tmp%', along with specific paths like '\\AppData\\', '\\Desktop\\', '\\Temp\\', '\\Users\\Public\\', and several root directories ('C:\\PerfLogs\\', 'C:\\ProgramData\\', 'C:\\Windows\\Temp\\').\n\nBe wary also of command lines that end with extensions indicative of either script files or typical file types that might be exploited for stealth, such as '.dll', '.gif', '.jpeg', '.jpg', '.png', '.temp', '.tmp', '.txt', '.vbe', and '.vbs'. The execution of scripts or the manipulation of these file types could be involved in malicious activity, especially when done in combination with suspicious locations.\n\nHowever, it's crucial to exclude known benign activities that might mimic these patterns. An example of such an exception includes the execution of the curl.exe process by Git for Windows during normal operations, specifically when the parent process is identified as 'C:\\Program Files\\Git\\usr\\bin\\sh.exe', the curl executable path is 'C:\\Program Files\\Git\\mingw64\\bin\\curl.exe', and the command line includes specific parameters indicative of a legitimate Git operation ('--silent', '--show-error', '--output', alongside a pattern that includes 'gfw-httpget-' and 'AppData').\n\nThis strategy involves a high level of vigilance for detecting potentially malicious use of the curl tool in conjunction with abnormal file locations and types on Windows systems, minimizing the chance of overlooking a subtle intrusion attempt while also avoiding false positives from legitimate software operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious curl process start on Windows and outputs the requested document to a local file",
      "answer": "In order to detect a suspicious curl process start on Windows and outputs the requested document to a local file, you should monitor for specific patterns in Windows process creation logs that might indicate malicious activity. First, be alert for any instances where the process name ends with '\\curl.exe' or where the product associated with the process is identified as 'The curl executable'. Such occurrences could signal the invocation of the curl command-line tool, often used for transferring data with URLs, which might be exploited by attackers.\n\nAdditionally, pay close attention to command lines that contain references to certain directories that are commonly used by malware for temporary storage or to hide from casual inspection. These locations include user-specific AppData and Temp directories, the Public user folder, and the Windows Temp directory, among others listed like '%AppData%', '%Public%', '%Temp%', '%tmp%', along with specific paths like '\\AppData\\', '\\Desktop\\', '\\Temp\\', '\\Users\\Public\\', and several root directories ('C:\\PerfLogs\\', 'C:\\ProgramData\\', 'C:\\Windows\\Temp\\').\n\nBe wary also of command lines that end with extensions indicative of either script files or typical file types that might be exploited for stealth, such as '.dll', '.gif', '.jpeg', '.jpg', '.png', '.temp', '.tmp', '.txt', '.vbe', and '.vbs'. The execution of scripts or the manipulation of these file types could be involved in malicious activity, especially when done in combination with suspicious locations.\n\nHowever, it's crucial to exclude known benign activities that might mimic these patterns. An example of such an exception includes the execution of the curl.exe process by Git for Windows during normal operations, specifically when the parent process is identified as 'C:\\Program Files\\Git\\usr\\bin\\sh.exe', the curl executable path is 'C:\\Program Files\\Git\\mingw64\\bin\\curl.exe', and the command line includes specific parameters indicative of a legitimate Git operation ('--silent', '--show-error', '--output', alongside a pattern that includes 'gfw-httpget-' and 'AppData').\n\nThis strategy involves a high level of vigilance for detecting potentially malicious use of the curl tool in conjunction with abnormal file locations and types on Windows systems, minimizing the chance of overlooking a subtle intrusion attempt while also avoiding false positives from legitimate software operations."
    }
  },
  {
    "instruction": "How can I detect: use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist. This non-existent DLL file is named \"ShellChromeAPI.dll\".\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
    "context": "",
    "output": "In order to detect the use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist, which adversaries might exploit to drop and execute their own DLL named \"ShellChromeAPI.dll\" via DeviceEnroller.exe, you should: Focus on monitoring process creation events within Windows environments. Specifically, track the execution of 'deviceenroller.exe' either by identifying processes where the image path ends with '\\deviceenroller.exe' or where the original file name is 'deviceenroller.exe'. Additionally, you should look for command-line executions containing the '/PhoneDeepLink' argument. It is crucial to evaluate both conditions - the execution of 'deviceenroller.exe' and the presence of '/PhoneDeepLink' in the command line - together to effectively detect this activity. Be aware that there might be unknown false positives, and this detection is considered to have a medium level of importance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist. This non-existent DLL file is named \"ShellChromeAPI.dll\".\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
      "answer": "In order to detect the use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist, which adversaries might exploit to drop and execute their own DLL named \"ShellChromeAPI.dll\" via DeviceEnroller.exe, you should: Focus on monitoring process creation events within Windows environments. Specifically, track the execution of 'deviceenroller.exe' either by identifying processes where the image path ends with '\\deviceenroller.exe' or where the original file name is 'deviceenroller.exe'. Additionally, you should look for command-line executions containing the '/PhoneDeepLink' argument. It is crucial to evaluate both conditions - the execution of 'deviceenroller.exe' and the presence of '/PhoneDeepLink' in the command line - together to effectively detect this activity. Be aware that there might be unknown false positives, and this detection is considered to have a medium level of importance."
    }
  },
  {
    "instruction": "Please help me detect the following: potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information.",
    "context": "",
    "output": "Sure!\nIn order to detect potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information, you should focus on monitoring Windows process creation logs for specific patterns of activity. Detect these patterns by identifying instances where the 'sqlcmd.exe' process is executed, especially when the command line involves keywords related to 'VeeamBackup' and 'From ' indicating a targeted query against Veeam backup databases. Additionally, look for command lines that contain references to 'BackupRepositories', 'Backups', 'Credentials', 'HostCreds', 'SmbFileShares', 'Ssh_creds', and 'VSphereInfo'. These elements signal attempts to access sensitive backup configuration details, credentials, and information across various repositories and platforms. It's essential to apply this detection mechanism across all related instances to catch any dubious activities aiming at extracting critical backup data. Pay attention to false positives which might arise, as the described activities could, under unknown circumstances, represent legitimate administrative behavior. This alert is of medium importance, indicating a need to analyze detected events to ensure they do not signify an ongoing or attempted compromise involving backup system information theft.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information.",
      "answer": "In order to detect potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information, you should focus on monitoring Windows process creation logs for specific patterns of activity. Detect these patterns by identifying instances where the 'sqlcmd.exe' process is executed, especially when the command line involves keywords related to 'VeeamBackup' and 'From ' indicating a targeted query against Veeam backup databases. Additionally, look for command lines that contain references to 'BackupRepositories', 'Backups', 'Credentials', 'HostCreds', 'SmbFileShares', 'Ssh_creds', and 'VSphereInfo'. These elements signal attempts to access sensitive backup configuration details, credentials, and information across various repositories and platforms. It's essential to apply this detection mechanism across all related instances to catch any dubious activities aiming at extracting critical backup data. Pay attention to false positives which might arise, as the described activities could, under unknown circumstances, represent legitimate administrative behavior. This alert is of medium importance, indicating a need to analyze detected events to ensure they do not signify an ongoing or attempted compromise involving backup system information theft."
    }
  },
  {
    "instruction": "Explain how should I detect the following: path traversal exploitation attempts",
    "context": "",
    "output": "In order to detect path traversal exploitation attempts, you should monitor web server logs for specific patterns in the query strings of HTTP requests that indicate an attempt to navigate directory structures in an unauthorized manner. These patterns include the use of sequences like '../../../../../etc/passwd', '../../../../windows/', and '../../../../../lib/password', which are typically employed by attackers trying to access critical system files or directories by exploiting a vulnerability in the web application. The presence of these patterns in the cs-uri-query (that is, the query part of the URI requested by the client) should raise alerts. However, it is important to note that such patterns can also be generated by benign activities, such as systems exposed to the Internet facing automated scans, or internal vulnerability scans conducted for security assessments, leading to potential false positives. The severity level for these detections is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "path traversal exploitation attempts",
      "answer": "In order to detect path traversal exploitation attempts, you should monitor web server logs for specific patterns in the query strings of HTTP requests that indicate an attempt to navigate directory structures in an unauthorized manner. These patterns include the use of sequences like '../../../../../etc/passwd', '../../../../windows/', and '../../../../../lib/password', which are typically employed by attackers trying to access critical system files or directories by exploiting a vulnerability in the web application. The presence of these patterns in the cs-uri-query (that is, the query part of the URI requested by the client) should raise alerts. However, it is important to note that such patterns can also be generated by benign activities, such as systems exposed to the Internet facing automated scans, or internal vulnerability scans conducted for security assessments, leading to potential false positives. The severity level for these detections is considered medium."
    }
  },
  {
    "instruction": "How to detect: abuse of custom file open handler, executing powershell",
    "context": "",
    "output": "In order to detect the abuse of custom file open handler, executing PowerShell, you should: Focus on monitoring Windows registry settings modifications. Specifically, watch for any changes to registry entries associated with file open commands (`shell\\open\\command\\`). These entries, when altered, might be leveraged by attackers to execute arbitrary PowerShell commands. A key indicator of such malicious activity includes modifications where both 'powershell' and '-command' strings are present in the details of the registry setting change, under the event type 'SetValue'. It's important to pay attention to these signs as they represent a high-level threat. Though there may be instances where these modifications don't signify malicious activity (unknown false positives), vigilance in tracking these specific alterations in registry settings is crucial for identifying potential abuse of file handlers to execute unauthorized PowerShell commands.\n\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "abuse of custom file open handler, executing powershell",
      "answer": "In order to detect the abuse of custom file open handler, executing PowerShell, you should: Focus on monitoring Windows registry settings modifications. Specifically, watch for any changes to registry entries associated with file open commands (`shell\\open\\command\\`). These entries, when altered, might be leveraged by attackers to execute arbitrary PowerShell commands. A key indicator of such malicious activity includes modifications where both 'powershell' and '-command' strings are present in the details of the registry setting change, under the event type 'SetValue'. It's important to pay attention to these signs as they represent a high-level threat. Though there may be instances where these modifications don't signify malicious activity (unknown false positives), vigilance in tracking these specific alterations in registry settings is crucial for identifying potential abuse of file handlers to execute unauthorized PowerShell commands.\n\n"
    }
  },
  {
    "instruction": "Explain how should I detect the following: command that accesses password storing registry hives via volume shadow backups",
    "context": "",
    "output": "In order to detect a command that accesses password storing registry hives via volume shadow backups, you should:\n\nMonitor process creation logs on Windows systems for commands that access the volume shadow copy of the Windows directory containing the Active Directory database (NTDS.dit) or registry hives like SYSTEM and SECURITY. Specifically, look for commands that attempt to read or copy these critical files, typically indicated by the presence of the path `\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy` in the command line, which signifies access to a shadow copy of these files. Further, watch for command lines that explicitly mention copying or accessing `NTDS.dit`, `SYSTEM`, `SECURITY` files, or creating logs in `C:\\tmp\\log`. These activities are unusual and could signify malicious efforts to steal sensitive account information stored in these files. \n\nBe aware, however, that in very rare cases, legitimate backup processes might also access these files in a similar manner. Thus, while the detection of such commands is of high importance due to the sensitive nature of the data involved, ensure to verify the context to rule out any false positives that might arise from uncommon but legitimate backup scenarios.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "command that accesses password storing registry hives via volume shadow backups",
      "answer": "In order to detect a command that accesses password storing registry hives via volume shadow backups, you should:\n\nMonitor process creation logs on Windows systems for commands that access the volume shadow copy of the Windows directory containing the Active Directory database (NTDS.dit) or registry hives like SYSTEM and SECURITY. Specifically, look for commands that attempt to read or copy these critical files, typically indicated by the presence of the path `\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy` in the command line, which signifies access to a shadow copy of these files. Further, watch for command lines that explicitly mention copying or accessing `NTDS.dit`, `SYSTEM`, `SECURITY` files, or creating logs in `C:\\tmp\\log`. These activities are unusual and could signify malicious efforts to steal sensitive account information stored in these files. \n\nBe aware, however, that in very rare cases, legitimate backup processes might also access these files in a similar manner. Thus, while the detection of such commands is of high importance due to the sensitive nature of the data involved, ensure to verify the context to rule out any false positives that might arise from uncommon but legitimate backup scenarios."
    }
  },
  {
    "instruction": "How to detect: mount of ISO images on an endpoint",
    "context": "",
    "output": "In order to detect the mount of ISO images on an endpoint, you should monitor Windows Security audit logs specifically for events related to the access of removable storage. Focus on capturing events identified by EventID 4663, indicating an object's access attempt. These logs should come from the Security ObjectServer and involve FileType objects. Particularly, pay attention to access attempts involving objects whose names start with '\\Device\\CdRom', as this indicates the interaction with CD-ROM devices, typically used to read ISO images.\n\nHowever, not all access events to CD-ROM devices should be considered suspicious. For instance, accessing the '\\Device\\CdRom0\\setup.exe' path is excluded from detection criteria because it's commonly accessed during legitimate software installations via ISO files. Therefore, while monitoring for the described activities, filter out events involving this specific path to reduce false positives such as those triggered by software installation ISO files.\n\nThis monitoring process is essential for identifying unauthorized or unexpected mount of ISO images, which could be indicative of an attack attempt or unauthorized data retrieval. It's assessed at a medium level of importance due to its potential to catch malicious activities early. Keep an eye out for events meeting these criteria, as they are aligned with the detection of misuse of removable media which relates to several ATT&CK tactics and techniques including Initial Access, Execution, and Persistence, among others.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "mount of ISO images on an endpoint",
      "answer": "In order to detect the mount of ISO images on an endpoint, you should monitor Windows Security audit logs specifically for events related to the access of removable storage. Focus on capturing events identified by EventID 4663, indicating an object's access attempt. These logs should come from the Security ObjectServer and involve FileType objects. Particularly, pay attention to access attempts involving objects whose names start with '\\Device\\CdRom', as this indicates the interaction with CD-ROM devices, typically used to read ISO images.\n\nHowever, not all access events to CD-ROM devices should be considered suspicious. For instance, accessing the '\\Device\\CdRom0\\setup.exe' path is excluded from detection criteria because it's commonly accessed during legitimate software installations via ISO files. Therefore, while monitoring for the described activities, filter out events involving this specific path to reduce false positives such as those triggered by software installation ISO files.\n\nThis monitoring process is essential for identifying unauthorized or unexpected mount of ISO images, which could be indicative of an attack attempt or unauthorized data retrieval. It's assessed at a medium level of importance due to its potential to catch malicious activities early. Keep an eye out for events meeting these criteria, as they are aligned with the detection of misuse of removable media which relates to several ATT&CK tactics and techniques including Initial Access, Execution, and Persistence, among others."
    }
  },
  {
    "instruction": "Can you explain how to detect: Microsoft Excel loading an Add-In (.xll) file from an uncommon location",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Microsoft Excel loading an Add-In (.xll) file from an uncommon location, you should: monitor Windows system image load events, specifically focusing on instances where the Excel application (`excel.exe`) loads an image. Pay particular attention to .xll file types being loaded from locations that are not typically used for legitimate purposes. These locations include but are not limited to user Desktops, Downloads folders, Perflogs, Temp directories, the Users\\Public folder, and the Windows\\Tasks directory. The detection strategy involves verifying that the action corresponds to an Excel process initiating an .xll file from any of these uncommon directories. It's important to note that depending on organizational policies and the specific environment, you might need to adjust which directories are monitored or excluded to minimize false positives and ensure accurate detection. This strategy is set at a medium level of urgency, indicating while it is significant, it may require validation considering potential benign activities mimicking this behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Excel loading an Add-In (.xll) file from an uncommon location",
      "answer": "In order to detect Microsoft Excel loading an Add-In (.xll) file from an uncommon location, you should: monitor Windows system image load events, specifically focusing on instances where the Excel application (`excel.exe`) loads an image. Pay particular attention to .xll file types being loaded from locations that are not typically used for legitimate purposes. These locations include but are not limited to user Desktops, Downloads folders, Perflogs, Temp directories, the Users\\Public folder, and the Windows\\Tasks directory. The detection strategy involves verifying that the action corresponds to an Excel process initiating an .xll file from any of these uncommon directories. It's important to note that depending on organizational policies and the specific environment, you might need to adjust which directories are monitored or excluded to minimize false positives and ensure accurate detection. This strategy is set at a medium level of urgency, indicating while it is significant, it may require validation considering potential benign activities mimicking this behavior."
    }
  },
  {
    "instruction": "Can you explain how to detect: Identifies user login with multifactor authentication failures, which might be an indication an attacker has the password for the account but can't pass the MFA challenge.",
    "context": "",
    "output": "Certainly!\n\nIn order to identify user login with multifactor authentication failures, which might be an indication an attacker has the password for the account but can't pass the MFA challenge, you should: monitor Azure signin logs for events that suggest failed attempts at passing multifactor authentication (MFA) challenges. Specifically, pay attention to logs that report with a ResultType of 50074, indicating a requirement for strong authentication, or ResultType of 500121, signaling that an authentication attempt has failed during a strong authentication request. These findings are pertinent as they might highlight instances where an unauthorized user has obtained the password to an account but is unable to bypass the additional security layer provided by MFA. It's important to investigate such events to prevent potential breaches. Keep in mind that some detected events may not necessarily indicate malicious activity (as some false positives are unknown), so thorough examination is advised. This monitoring process is guided by medium-level urgency, underscoring the significant risk that unsuccessful MFA attempts can pose.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies user login with multifactor authentication failures, which might be an indication an attacker has the password for the account but can't pass the MFA challenge.",
      "answer": "In order to identify user login with multifactor authentication failures, which might be an indication an attacker has the password for the account but can't pass the MFA challenge, you should: monitor Azure signin logs for events that suggest failed attempts at passing multifactor authentication (MFA) challenges. Specifically, pay attention to logs that report with a ResultType of 50074, indicating a requirement for strong authentication, or ResultType of 500121, signaling that an authentication attempt has failed during a strong authentication request. These findings are pertinent as they might highlight instances where an unauthorized user has obtained the password to an account but is unable to bypass the additional security layer provided by MFA. It's important to investigate such events to prevent potential breaches. Keep in mind that some detected events may not necessarily indicate malicious activity (as some false positives are unknown), so thorough examination is advised. This monitoring process is guided by medium-level urgency, underscoring the significant risk that unsuccessful MFA attempts can pose."
    }
  },
  {
    "instruction": "How can I detect: system changes made by Blue Mockingbird",
    "context": "",
    "output": "In order to detect system changes made by Blue Mockingbird, you should monitor the Windows Registry for specific modifications that are indicative of this attack. Specifically, focus on the registry setting events where the value is being set (Setvalue EventType). The critical alteration to lookout for occurs in the registry key path that ends with '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'. This particular change is a common tactic used by Blue Mockingbird to achieve persistence and control over a compromised system by potentially modifying the referenced DLL to one under their control. \n\nMonitoring for such alterations will require configuring your security systems to log and alert whenever this type of registry modification occurs. It's important to be aware that, as of the knowledge available, there are no known false positives associated with this detection strategy, indicating a high level of confidence in these specific modifications as indicators of Blue Mockingbird activity. However, always exercise caution and investigate alerts thoroughly to confirm malicious activity. This detection strategy is of high importance due to the direct association with Blue Mockingbird's technique for maintaining persistence and potentially executing unauthorized commands or software on the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "system changes made by Blue Mockingbird",
      "answer": "In order to detect system changes made by Blue Mockingbird, you should monitor the Windows Registry for specific modifications that are indicative of this attack. Specifically, focus on the registry setting events where the value is being set (Setvalue EventType). The critical alteration to lookout for occurs in the registry key path that ends with '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'. This particular change is a common tactic used by Blue Mockingbird to achieve persistence and control over a compromised system by potentially modifying the referenced DLL to one under their control. \n\nMonitoring for such alterations will require configuring your security systems to log and alert whenever this type of registry modification occurs. It's important to be aware that, as of the knowledge available, there are no known false positives associated with this detection strategy, indicating a high level of confidence in these specific modifications as indicators of Blue Mockingbird activity. However, always exercise caution and investigate alerts thoroughly to confirm malicious activity. This detection strategy is of high importance due to the direct association with Blue Mockingbird's technique for maintaining persistence and potentially executing unauthorized commands or software on the system."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect suspicious error on protocol RDP, potential CVE-2019-0708",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious error on protocol RDP, potential CVE-2019-0708, you should: Monitor Windows System events specifically looking for Event IDs 56 and 50 that are attributed to the TermDD provider. These Event IDs are crucial as they can indicate an anomaly or error related to the Remote Desktop Protocol (RDP), which is a common vector for the CVE-2019-0708 vulnerability. It is important to note that there can be false positives associated with these detections, such as bad connections or network interruptions. Thus, while these events should raise the level of alertness to a medium, they also warrant further investigation to confirm any malicious activity rather than immediate assumption of an attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect suspicious error on protocol RDP, potential CVE-2019-0708",
      "answer": "In order to detect suspicious error on protocol RDP, potential CVE-2019-0708, you should: Monitor Windows System events specifically looking for Event IDs 56 and 50 that are attributed to the TermDD provider. These Event IDs are crucial as they can indicate an anomaly or error related to the Remote Desktop Protocol (RDP), which is a common vector for the CVE-2019-0708 vulnerability. It is important to note that there can be false positives associated with these detections, such as bad connections or network interruptions. Thus, while these events should raise the level of alertness to a medium, they also warrant further investigation to confirm any malicious activity rather than immediate assumption of an attack."
    }
  },
  {
    "instruction": "Please help me detect the following: VB DLL's loaded by an office application. Which could indicate the presence of VBA Macros.",
    "context": "",
    "output": "Sure!\nIn order to detect VB DLLs loaded by an office application which could indicate the presence of VBA Macros, you should monitor for specific events related to the loading of image files in Windows environments. This involves watching for instances where Microsoft Office applications such as Excel, Publisher, OneNote, Outlook, PowerPoint, and Word are loading particular DLL files associated with Visual Basic for Applications (VBA), including VBE7.DLL, VBEUI.DLL, and VBE7INTL.DLL. Detection of such activities is critical as it might suggest that VBA Macros, potentially malicious, are being executed, an avenue often exploited by attackers for various malicious purposes. It is important, however, to consider the context in which these DLLs are loaded, as legitimate macro usage can also trigger these detection mechanisms. Therefore, adjustments may be necessary to minimize false positives, ensuring that legitimate business processes are not impeded while maintaining a high level of vigilance against potential threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "VB DLL's loaded by an office application. Which could indicate the presence of VBA Macros.",
      "answer": "In order to detect VB DLLs loaded by an office application which could indicate the presence of VBA Macros, you should monitor for specific events related to the loading of image files in Windows environments. This involves watching for instances where Microsoft Office applications such as Excel, Publisher, OneNote, Outlook, PowerPoint, and Word are loading particular DLL files associated with Visual Basic for Applications (VBA), including VBE7.DLL, VBEUI.DLL, and VBE7INTL.DLL. Detection of such activities is critical as it might suggest that VBA Macros, potentially malicious, are being executed, an avenue often exploited by attackers for various malicious purposes. It is important, however, to consider the context in which these DLLs are loaded, as legitimate macro usage can also trigger these detection mechanisms. Therefore, adjustments may be necessary to minimize false positives, ensuring that legitimate business processes are not impeded while maintaining a high level of vigilance against potential threats."
    }
  },
  {
    "instruction": "How to detect: Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification",
    "context": "",
    "output": "In order to bypass User Account Control using Event Viewer and a relevant Windows Registry modification, you should: Monitor registry set actions within Windows environments, specifically focusing on events where a SetValue operation occurs. This operation is crucial to watch as it could indicate an attempt to modify system settings through the registry that are unauthorized and potentially malicious. Key to identifying suspicious activity is the alteration of the registry key ending with '\\_Classes\\mscfile\\shell\\open\\command\\(Default)'. This specific modification is a known technique used by attackers to intercept and manipulate how certain administrative tools, like the Event Viewer, operate, effectively circumventing User Account Control mechanisms.\n\nYou must filter out benign modifications to this registry value, which are commonly identified by their details starting with '%SystemRoot%\\system32\\mmc.exe \"%1\" %'. These are typical configurations that should not be flagged as suspicious. However, any modification to this registry key not fitting this pattern should be considered a potential security threat. \n\nNo specific false positives have been identified, indicating that while the criteria are tightly defined, scrutiny of alerts is recommended to ensure they truly represent malicious activity. The severity level for this kind of detection has been classified as high due to the risk associated with successful bypasses of User Account Control, emphasizing the importance of prompt and effective response. \n\nMaintain vigilance for such registry modifications as part of your cyber defense strategy to protect against this sophisticated method of gaining elevated privileges without triggering standard security alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification",
      "answer": "In order to bypass User Account Control using Event Viewer and a relevant Windows Registry modification, you should: Monitor registry set actions within Windows environments, specifically focusing on events where a SetValue operation occurs. This operation is crucial to watch as it could indicate an attempt to modify system settings through the registry that are unauthorized and potentially malicious. Key to identifying suspicious activity is the alteration of the registry key ending with '\\_Classes\\mscfile\\shell\\open\\command\\(Default)'. This specific modification is a known technique used by attackers to intercept and manipulate how certain administrative tools, like the Event Viewer, operate, effectively circumventing User Account Control mechanisms.\n\nYou must filter out benign modifications to this registry value, which are commonly identified by their details starting with '%SystemRoot%\\system32\\mmc.exe \"%1\" %'. These are typical configurations that should not be flagged as suspicious. However, any modification to this registry key not fitting this pattern should be considered a potential security threat. \n\nNo specific false positives have been identified, indicating that while the criteria are tightly defined, scrutiny of alerts is recommended to ensure they truly represent malicious activity. The severity level for this kind of detection has been classified as high due to the risk associated with successful bypasses of User Account Control, emphasizing the importance of prompt and effective response. \n\nMaintain vigilance for such registry modifications as part of your cyber defense strategy to protect against this sophisticated method of gaining elevated privileges without triggering standard security alerts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: call to \"Win32_QuickFixEngineering\" in order to enumerate installed hotfixes often used in \"enum\" scripts by attackers",
    "context": "",
    "output": "In order to detect calls to \"Win32_QuickFixEngineering\" in order to enumerate installed hotfixes often used in \"enum\" scripts by attackers, you should: Focus on the Windows platform, particularly tracking PowerShell scripts. Ensure that the environment is set up for Script Block Logging, as this is critical for detecting the execution of specific PowerShell commands. Specifically, be on the lookout for scripts that contain both 'Win32_QuickFixEngineering' and 'HotFixID', as these are indicative of attempts to enumerate installed hotfixes, a common reconnaissance technique used by attackers to gain information about the system's vulnerabilities and configuration. It is important to note that while this detection is set at a medium level of alert due to the possibility of similar patterns being present in legitimate administration scripts, any detection should prompt a review to distinguish between benign activity and potential security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "call to \"Win32_QuickFixEngineering\" in order to enumerate installed hotfixes often used in \"enum\" scripts by attackers",
      "answer": "In order to detect calls to \"Win32_QuickFixEngineering\" in order to enumerate installed hotfixes often used in \"enum\" scripts by attackers, you should: Focus on the Windows platform, particularly tracking PowerShell scripts. Ensure that the environment is set up for Script Block Logging, as this is critical for detecting the execution of specific PowerShell commands. Specifically, be on the lookout for scripts that contain both 'Win32_QuickFixEngineering' and 'HotFixID', as these are indicative of attempts to enumerate installed hotfixes, a common reconnaissance technique used by attackers to gain information about the system's vulnerabilities and configuration. It is important to note that while this detection is set at a medium level of alert due to the possibility of similar patterns being present in legitimate administration scripts, any detection should prompt a review to distinguish between benign activity and potential security threats."
    }
  },
  {
    "instruction": "How to detect: loaded kernel modules that did not meet the WHQL signing requirements.",
    "context": "",
    "output": "In order to detect loaded kernel modules that did not meet the WHQL signing requirements, you should monitor the Windows Code Integrity operational logs. Specifically, focus on events with IDs 3082 and 3083, which indicate that a kernel module that doesn't meet the Windows Hardware Quality Labs (WHQL) requirements has been loaded into the system. For Event ID 3082, it's noted that although the kernel module did not meet WHQL requirements, due to the code integrity auditing policy, the image was allowed to load. Event ID 3083, on the other hand, advises checking with the publisher to see if a WHQL compliant kernel module is available because the loaded one did not meet the necessary requirements. \n\nHowever, it's important to apply a filter to exclude certain files associated with VMware tools - specifically `system32\\drivers\\vsock.sys` and `System32\\drivers\\vmci.sys` - as these are known to generate false positives in this context. The detection is highly reliable with few expected false positives, making it an effective measure for identifying potentially malicious or unauthorized kernel modules that could compromise the integrity of the operating system. \n\nThis detection strategy aligns with MITRE ATT&CK tactics related to persistence, privilege escalation, and defense evasion by capturing attempts to load unsigned or unverified kernel modules, which adversaries might exploit to execute malicious payloads or bypass security controls.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loaded kernel modules that did not meet the WHQL signing requirements.",
      "answer": "In order to detect loaded kernel modules that did not meet the WHQL signing requirements, you should monitor the Windows Code Integrity operational logs. Specifically, focus on events with IDs 3082 and 3083, which indicate that a kernel module that doesn't meet the Windows Hardware Quality Labs (WHQL) requirements has been loaded into the system. For Event ID 3082, it's noted that although the kernel module did not meet WHQL requirements, due to the code integrity auditing policy, the image was allowed to load. Event ID 3083, on the other hand, advises checking with the publisher to see if a WHQL compliant kernel module is available because the loaded one did not meet the necessary requirements. \n\nHowever, it's important to apply a filter to exclude certain files associated with VMware tools - specifically `system32\\drivers\\vsock.sys` and `System32\\drivers\\vmci.sys` - as these are known to generate false positives in this context. The detection is highly reliable with few expected false positives, making it an effective measure for identifying potentially malicious or unauthorized kernel modules that could compromise the integrity of the operating system. \n\nThis detection strategy aligns with MITRE ATT&CK tactics related to persistence, privilege escalation, and defense evasion by capturing attempts to load unsigned or unverified kernel modules, which adversaries might exploit to execute malicious payloads or bypass security controls."
    }
  },
  {
    "instruction": "How can I detect: Attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow.",
    "context": "",
    "output": "In order to attempt to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow, you should: Monitor Windows event logs for the classic PowerShell provider starting events that indicate an attempt to modify Windows Defender's settings. Specifically, look for the use of the 'Set-MpPreference' command in conjunction with parameters that aim to disable various protection features of Windows Defender such as real-time monitoring, archive scanning, behavior monitoring, intrusion prevention system, and scanning of removable drives, mapped network drives, and network files. The rule also covers attempts to disable script scanning and block at first sight feature which provides protection against new, unknown threats. Additionally, keep an eye out for modifications that set the default actions for high, low, moderate, and severe threats to 'Allow', which essentially instructs Windows Defender to ignore detected threats of these levels.\n\nBy closely monitoring for these specific command parameters, organizations can potentially detect malicious activities aimed at weakening Windows Defender's protective measures, thereby making the system more vulnerable to attacks. It is essential to investigate any such modifications as they could either be indicators of a malicious actor attempting to bypass security controls or legitimate troubleshooting efforts by system administrators. The level of concern for these detections is considered high, due to the implications of disabling critical security defenses within Windows Defender ATP.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow.",
      "answer": "In order to attempt to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow, you should: Monitor Windows event logs for the classic PowerShell provider starting events that indicate an attempt to modify Windows Defender's settings. Specifically, look for the use of the 'Set-MpPreference' command in conjunction with parameters that aim to disable various protection features of Windows Defender such as real-time monitoring, archive scanning, behavior monitoring, intrusion prevention system, and scanning of removable drives, mapped network drives, and network files. The rule also covers attempts to disable script scanning and block at first sight feature which provides protection against new, unknown threats. Additionally, keep an eye out for modifications that set the default actions for high, low, moderate, and severe threats to 'Allow', which essentially instructs Windows Defender to ignore detected threats of these levels.\n\nBy closely monitoring for these specific command parameters, organizations can potentially detect malicious activities aimed at weakening Windows Defender's protective measures, thereby making the system more vulnerable to attacks. It is essential to investigate any such modifications as they could either be indicators of a malicious actor attempting to bypass security controls or legitimate troubleshooting efforts by system administrators. The level of concern for these detections is considered high, due to the implications of disabling critical security defenses within Windows Defender ATP."
    }
  },
  {
    "instruction": "Please help me detect the following: activity when a member is added to a security-enabled global group",
    "context": "",
    "output": "Sure!\nIn order to detect activity when a member is added to a security-enabled global group, you should: observe the security logs from Windows operating systems for specific event identifiers that indicate this activity. Specifically, monitor for the event IDs 4728, which signifies \"A member was added to a security-enabled global group,\" and 632, which also denotes \"Security Enabled Global Group Member Added.\" It is important to understand that these logs are crucial in identifying potential unauthorized or suspicious additions to critical security groups that could indicate a breach or an attempt to gain elevated privileges. Be aware that some detections might not signify malicious activity, hence the low level of confidence in these indicators without further context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "activity when a member is added to a security-enabled global group",
      "answer": "In order to detect activity when a member is added to a security-enabled global group, you should: observe the security logs from Windows operating systems for specific event identifiers that indicate this activity. Specifically, monitor for the event IDs 4728, which signifies \"A member was added to a security-enabled global group,\" and 632, which also denotes \"Security Enabled Global Group Member Added.\" It is important to understand that these logs are crucial in identifying potential unauthorized or suspicious additions to critical security groups that could indicate a breach or an attempt to gain elevated privileges. Be aware that some detections might not signify malicious activity, hence the low level of confidence in these indicators without further context."
    }
  },
  {
    "instruction": "Please help me detect the following: Alert on when a user has performed an eDiscovery search or exported a PST file from the search. This PST file usually has sensitive information including email body content",
    "context": "",
    "output": "Sure!\nIn order to alert on when a user has performed an eDiscovery search or exported a PST file from the search, which usually contains sensitive information including email body content, you should focus on monitoring activities within the Microsoft 365 Threat Management service, specifically those logged by the SecurityComplianceCenter. The activity to be aware of is when an event named 'eDiscovery search started or exported' occurs, with a status of success. This means that an eDiscovery search was successfully initiated or the results were exported, possibly into a PST file. Such activities must be carefully monitored because, while exporting PST files can be a part of regular operations, it involves access to sensitive content, and thus, should always be scrutinized to ensure it aligns with legitimate purposes. The level of concern for these types of activities is considered medium, implying they should not be ignored but also recognized that they can occur as part of normal business operations. Monitoring these activities helps in identifying potentially unauthorized or malicious actions aimed at accessing or exporting sensitive data, which is associated with tactics and techniques like Data Exfiltration and Collection in cybersecurity frameworks such as MITRE ATT&CK.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Alert on when a user has performed an eDiscovery search or exported a PST file from the search. This PST file usually has sensitive information including email body content",
      "answer": "In order to alert on when a user has performed an eDiscovery search or exported a PST file from the search, which usually contains sensitive information including email body content, you should focus on monitoring activities within the Microsoft 365 Threat Management service, specifically those logged by the SecurityComplianceCenter. The activity to be aware of is when an event named 'eDiscovery search started or exported' occurs, with a status of success. This means that an eDiscovery search was successfully initiated or the results were exported, possibly into a PST file. Such activities must be carefully monitored because, while exporting PST files can be a part of regular operations, it involves access to sensitive content, and thus, should always be scrutinized to ensure it aligns with legitimate purposes. The level of concern for these types of activities is considered medium, implying they should not be ignored but also recognized that they can occur as part of normal business operations. Monitoring these activities helps in identifying potentially unauthorized or malicious actions aimed at accessing or exporting sensitive data, which is associated with tactics and techniques like Data Exfiltration and Collection in cybersecurity frameworks such as MITRE ATT&CK."
    }
  },
  {
    "instruction": "How to detect: creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes. This behavior was seen common across different Devil Bait samples and stages as described by the NCSC",
    "context": "",
    "output": "In order to detect the creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes, which was seen as a common behavior across different Devil Bait samples and stages as described by the NCSC, you should: Focus on monitoring file events within Windows environments. Particularly, you need to watch for the creation of \".txt\" and \".xml\" files in directories under the \"\\AppData\\Roaming\\Microsoft\" path. The processes of interest that could indicate malicious activity if they are creating these files are 'schtasks.exe', 'wscript.exe', and 'mshta.exe'. These executables are generally legitimate Windows components but can be misused by attackers for malicious purposes. The detection strategy is highly reliable with a low chance of false positives, emphasizing its importance in proactively identifying potential stages of a Devil Bait attack campaign.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes. This behavior was seen common across different Devil Bait samples and stages as described by the NCSC",
      "answer": "In order to detect the creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes, which was seen as a common behavior across different Devil Bait samples and stages as described by the NCSC, you should: Focus on monitoring file events within Windows environments. Particularly, you need to watch for the creation of \".txt\" and \".xml\" files in directories under the \"\\AppData\\Roaming\\Microsoft\" path. The processes of interest that could indicate malicious activity if they are creating these files are 'schtasks.exe', 'wscript.exe', and 'mshta.exe'. These executables are generally legitimate Windows components but can be misused by attackers for malicious purposes. The detection strategy is highly reliable with a low chance of false positives, emphasizing its importance in proactively identifying potential stages of a Devil Bait attack campaign."
    }
  },
  {
    "instruction": "Can you explain how to detect: Adversaries may use hidden windows to conceal malicious activity from the plain sight of users.\nIn some cases, windows that would typically be displayed when an application carries out an operation can be hidden\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect adversaries who may use hidden windows to conceal malicious activity from the plain sight of users, in some cases hiding windows that would typically be displayed when an application carries out an operation, you should: Monitor PowerShell script block logging on Windows systems for script texts that contain references to 'powershell', 'WindowStyle', and 'Hidden'. This is indicative of an effort to execute PowerShell commands or scripts in a hidden window, potentially to carry out covert operations. It is important to exclude script blocks that contain paths related to Amazon WorkSpaces configuration scripts, as these might be legitimate use cases and not related to malicious activity. The focus is on identifying unexpected or unauthorized use of PowerShell with specific characteristics that deviate from normal, benign scripts, especially those attempting to make their execution invisible to users. This approach facilitates the detection of hidden window utilization, which adversaries might leverage to execute attacks without detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users.\nIn some cases, windows that would typically be displayed when an application carries out an operation can be hidden\n",
      "answer": "In order to detect adversaries who may use hidden windows to conceal malicious activity from the plain sight of users, in some cases hiding windows that would typically be displayed when an application carries out an operation, you should: Monitor PowerShell script block logging on Windows systems for script texts that contain references to 'powershell', 'WindowStyle', and 'Hidden'. This is indicative of an effort to execute PowerShell commands or scripts in a hidden window, potentially to carry out covert operations. It is important to exclude script blocks that contain paths related to Amazon WorkSpaces configuration scripts, as these might be legitimate use cases and not related to malicious activity. The focus is on identifying unexpected or unauthorized use of PowerShell with specific characteristics that deviate from normal, benign scripts, especially those attempting to make their execution invisible to users. This approach facilitates the detection of hidden window utilization, which adversaries might leverage to execute attacks without detection."
    }
  },
  {
    "instruction": "Can you explain how to detect: Identifies the suspicious use of GetSessionToken. Tokens could be created and used by attackers to move laterally and escalate privileges.",
    "context": "",
    "output": "Certainly!\n\nIn order to identify the suspicious use of GetSessionToken, which could be created and used by attackers to move laterally and escalate privileges, you should focus on monitoring AWS CloudTrail logs. Specifically, look out for any use of the `GetSessionToken` action within these logs, which comes from the `eventSource` of `sts.amazonaws.com`. It is crucial to pay attention to the instances where the user identity type involved in making these requests is an `IAMUser`. \n\nRecognizing legitimate from illegitimate use of `GetSessionToken` could be somewhat challenging, as system or network administrators may use this action for routine tasks. To minimize false positives, closely examine whether the user identity, user agent, and/or hostname involved in these actions are expected to perform such operations within your environment. Activities performed by unfamiliar users or from unexpected hosts attempting to get a session token should be investigated thoroughly. Known legitimate behavior that frequently triggers this alert might need to be exempted to avoid unnecessary noise in your monitoring system.\n\nBy keeping an eye on these specific log entries and filtering activities based on the given criteria, you can flag potential security incidents. This proactive approach is based on well-recognized tactics and techniques, including lateral movement and privilege escalation, and aims to safeguard your AWS environment against unauthorized access and potential compromise.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies the suspicious use of GetSessionToken. Tokens could be created and used by attackers to move laterally and escalate privileges.",
      "answer": "In order to identify the suspicious use of GetSessionToken, which could be created and used by attackers to move laterally and escalate privileges, you should focus on monitoring AWS CloudTrail logs. Specifically, look out for any use of the `GetSessionToken` action within these logs, which comes from the `eventSource` of `sts.amazonaws.com`. It is crucial to pay attention to the instances where the user identity type involved in making these requests is an `IAMUser`. \n\nRecognizing legitimate from illegitimate use of `GetSessionToken` could be somewhat challenging, as system or network administrators may use this action for routine tasks. To minimize false positives, closely examine whether the user identity, user agent, and/or hostname involved in these actions are expected to perform such operations within your environment. Activities performed by unfamiliar users or from unexpected hosts attempting to get a session token should be investigated thoroughly. Known legitimate behavior that frequently triggers this alert might need to be exempted to avoid unnecessary noise in your monitoring system.\n\nBy keeping an eye on these specific log entries and filtering activities based on the given criteria, you can flag potential security incidents. This proactive approach is based on well-recognized tactics and techniques, including lateral movement and privilege escalation, and aims to safeguard your AWS environment against unauthorized access and potential compromise."
    }
  },
  {
    "instruction": "How can I detect: usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities. Notable capabilities could be \"OpenSSH\" and others.",
    "context": "",
    "output": "In order to detect usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities, notable capabilities being \"OpenSSH\" and others, you should: Monitor Windows PowerShell script logs, specifically looking for instances where the \"Add-WindowsCapability\" command is used. This implies that Script Block Logging must be enabled on the Windows machines you're monitoring. The key string to look out for within the PowerShell scripts is 'Add-WindowsCapability', which is a cmdlet used to add optional features to Windows, such as the \"OpenSSH.Server\" and \"OpenSSH.Client\". It's vital to scan both for the cmdlet itself and for the specific mention of OpenSSH related capabilities. Be aware, though, that there might be legitimate reasons for users or administrators to use this cmdlet, so it\u2019s crucial to apply additional filters or review these instances manually to distinguish between benign and malicious activity. This monitoring and analysis approach is encapsulated within a medium-level alert because while it's an essential method for detecting potential security threats or unauthorized changes, it also has a propensity for false positives due to legitimate administrative actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities. Notable capabilities could be \"OpenSSH\" and others.",
      "answer": "In order to detect usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities, notable capabilities being \"OpenSSH\" and others, you should: Monitor Windows PowerShell script logs, specifically looking for instances where the \"Add-WindowsCapability\" command is used. This implies that Script Block Logging must be enabled on the Windows machines you're monitoring. The key string to look out for within the PowerShell scripts is 'Add-WindowsCapability', which is a cmdlet used to add optional features to Windows, such as the \"OpenSSH.Server\" and \"OpenSSH.Client\". It's vital to scan both for the cmdlet itself and for the specific mention of OpenSSH related capabilities. Be aware, though, that there might be legitimate reasons for users or administrators to use this cmdlet, so it\u2019s crucial to apply additional filters or review these instances manually to distinguish between benign and malicious activity. This monitoring and analysis approach is encapsulated within a medium-level alert because while it's an essential method for detecting potential security threats or unauthorized changes, it also has a propensity for false positives due to legitimate administrative actions."
    }
  },
  {
    "instruction": "How to detect: exploits that use CVE-2017-11882 to start EQNEDT32.EXE and other sub processes like mshta.exe",
    "context": "",
    "output": "In order to detect exploits that use CVE-2017-11882 to start EQNEDT32.EXE and other sub processes like mshta.exe, you should: Monitor process creation events on Windows systems, focusing on spotting instances where the EQNEDT32.EXE application is the parent process initiating other processes. This activity is critical and typically signifies an exploitation of the CVE-2017-11882 vulnerability, which attackers leverage to execute arbitrary code through the Microsoft Office Equation Editor. Always pay attention to the command line context used during these process initiations for more detailed investigation and consider any occurrences as highly critical, though it's important to remember that there may be legitimate, albeit rare, uses of EQNEDT32.EXE that are not malicious in nature.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploits that use CVE-2017-11882 to start EQNEDT32.EXE and other sub processes like mshta.exe",
      "answer": "In order to detect exploits that use CVE-2017-11882 to start EQNEDT32.EXE and other sub processes like mshta.exe, you should: Monitor process creation events on Windows systems, focusing on spotting instances where the EQNEDT32.EXE application is the parent process initiating other processes. This activity is critical and typically signifies an exploitation of the CVE-2017-11882 vulnerability, which attackers leverage to execute arbitrary code through the Microsoft Office Equation Editor. Always pay attention to the command line context used during these process initiations for more detailed investigation and consider any occurrences as highly critical, though it's important to remember that there may be legitimate, albeit rare, uses of EQNEDT32.EXE that are not malicious in nature."
    }
  },
  {
    "instruction": "Explain how should I detect the following: an attempt to leverage the vulnerable servlet \"mboximport\" for an unauthenticated remote command injection",
    "context": "",
    "output": "In order to detect an attempt to leverage the vulnerable servlet \"mboximport\" for an unauthenticated remote command injection, you should monitor webserver logs for two types of suspicious activities. First, look for POST requests where the query URL contains '/service/extension/backup/mboximport?' and also includes key parameters such as 'account-name', 'ow', 'no-switch', and 'append'. These requests are particularly concerning if the server response code is either 401 (Unauthorized) or 200 (OK), indicating either an attempt was blocked due to authentication failure or successfully executed.\n\nSecond, be vigilant for any access attempts to the Zimbra Administration interface, identified by URLs containing '/zimbraAdmin/' and ending with '.jsp'. A successful access attempt is flagged by receiving a 200 (OK) server response code. This scenario could imply unauthorized access or an attempt to exploit administrative pages.\n\nBoth activities are identifiers of potential exploitation attempts targeting vulnerabilities in web applications, aligning with tactics and techniques such as remote command injection. It's crucial to address and investigate such alerts as they can be indicative of either reconnaissance attempts by attackers trying to understand the environment better or outright exploitation attempts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an attempt to leverage the vulnerable servlet \"mboximport\" for an unauthenticated remote command injection",
      "answer": "In order to detect an attempt to leverage the vulnerable servlet \"mboximport\" for an unauthenticated remote command injection, you should monitor webserver logs for two types of suspicious activities. First, look for POST requests where the query URL contains '/service/extension/backup/mboximport?' and also includes key parameters such as 'account-name', 'ow', 'no-switch', and 'append'. These requests are particularly concerning if the server response code is either 401 (Unauthorized) or 200 (OK), indicating either an attempt was blocked due to authentication failure or successfully executed.\n\nSecond, be vigilant for any access attempts to the Zimbra Administration interface, identified by URLs containing '/zimbraAdmin/' and ending with '.jsp'. A successful access attempt is flagged by receiving a 200 (OK) server response code. This scenario could imply unauthorized access or an attempt to exploit administrative pages.\n\nBoth activities are identifiers of potential exploitation attempts targeting vulnerabilities in web applications, aligning with tactics and techniques such as remote command injection. It's crucial to address and investigate such alerts as they can be indicative of either reconnaissance attempts by attackers trying to understand the environment better or outright exploitation attempts."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution from an Alternate Data Stream (ADS), where adversaries may use NTFS file attributes to hide their malicious data in order to evade detection, you should monitor process creation logs on Windows systems for specific command-line patterns. Look for instances where the command line contains 'txt:', which indicates potential access or interaction with an alternate data stream. Additionally, be alert for command lines that combine certain tools and parameters, such as:\n\n- Use of 'type ' along with redirection '> ', which may suggest an attempt to display or redirect the contents of a file, possibly involving an ADS.\n- Execution involving 'makecab ' followed by '.cab', which could indicate compression of files into a Cabinet file, potentially to disguise malicious activity.\n- Commands starting with 'reg ' followed by ' export ', suggesting attempts to export registry keys, possibly for analysis or manipulation outside of standard registry tools.\n- Utilization of 'regedit ' with ' /E ', indicating export operations via Registry Editor, again potentially for malicious manipulation.\n- Execution of 'esentutl ' accompanied by '/y', '/d', and '/o' flags, which points to attempts to copy, defragment, or repair Extensible Storage Engine databases, potentially indicating more sophisticated adversary behavior involving data manipulation or extraction.\n\nIn essence, by monitoring for these specific command-line activities within process creation events, one can uncover potential misuse of alternate data streams by adversaries aiming to execute or hide malicious data, supporting efforts to evade detection. This monitoring approach crucially targets a range of tools and operations that could be exploited for such purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection",
      "answer": "In order to detect execution from an Alternate Data Stream (ADS), where adversaries may use NTFS file attributes to hide their malicious data in order to evade detection, you should monitor process creation logs on Windows systems for specific command-line patterns. Look for instances where the command line contains 'txt:', which indicates potential access or interaction with an alternate data stream. Additionally, be alert for command lines that combine certain tools and parameters, such as:\n\n- Use of 'type ' along with redirection '> ', which may suggest an attempt to display or redirect the contents of a file, possibly involving an ADS.\n- Execution involving 'makecab ' followed by '.cab', which could indicate compression of files into a Cabinet file, potentially to disguise malicious activity.\n- Commands starting with 'reg ' followed by ' export ', suggesting attempts to export registry keys, possibly for analysis or manipulation outside of standard registry tools.\n- Utilization of 'regedit ' with ' /E ', indicating export operations via Registry Editor, again potentially for malicious manipulation.\n- Execution of 'esentutl ' accompanied by '/y', '/d', and '/o' flags, which points to attempts to copy, defragment, or repair Extensible Storage Engine databases, potentially indicating more sophisticated adversary behavior involving data manipulation or extraction.\n\nIn essence, by monitoring for these specific command-line activities within process creation events, one can uncover potential misuse of alternate data streams by adversaries aiming to execute or hide malicious data, supporting efforts to evade detection. This monitoring approach crucially targets a range of tools and operations that could be exploited for such purposes."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of a Microsoft signed script to execute commands",
    "context": "",
    "output": "In order to detect the use of a Microsoft signed script to execute commands, you should: Monitor process creation logs on Windows systems for instances where command lines contain both the '\\CL_Mutexverifiers.ps1' script and the 'runAfterCancelProcess' phrase. This involves paying attention to any process that is executed with these specific command line parameters, as it might indicate an attempt to misuse a Microsoft signed script for executing potentially unauthorized or malicious commands. The detection carries a medium severity level, suggesting a cautious approach to potential false positives, which may occur but are currently unspecified.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of a Microsoft signed script to execute commands",
      "answer": "In order to detect the use of a Microsoft signed script to execute commands, you should: Monitor process creation logs on Windows systems for instances where command lines contain both the '\\CL_Mutexverifiers.ps1' script and the 'runAfterCancelProcess' phrase. This involves paying attention to any process that is executed with these specific command line parameters, as it might indicate an attempt to misuse a Microsoft signed script for executing potentially unauthorized or malicious commands. The detection carries a medium severity level, suggesting a cautious approach to potential false positives, which may occur but are currently unspecified."
    }
  },
  {
    "instruction": "How to detect: use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.\nInvolved domains are bin.equinox.io for download and *.ngrok.io for connections.\n",
    "context": "",
    "output": "In order to detect the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available, you should: focus on monitoring process creation logs on Windows systems. Look for command lines that contain specific patterns indicating port forwarding activities over common ports such as 139 (SMB), 445 (Microsoft-DS SMB file sharing), 3389 (RDP), 5985 (WinRM HTTP), and 5986 (WinRM HTTPS). Additionally, detect instances where command lines include arguments that start Ngrok with all configurations from a YAML file, which is a strong indication of configuring a tunnel. Monitoring for the execution of 'ngrok.exe' is crucial, especially when command lines involve initiating TCP or HTTP tunnels or when an authtoken is specified, as this often relates to setting up secure connections using Ngrok. Also, watch out for command lines executing any executable followed by 'authtoken' or starting Ngrok with '--all' switch, which might indicate an attempt to launch tunnels automatically. However, be aware of legitimate uses of these command line switches by other tools or when Ngrok is used for authorized development purposes such as debugging with HTTP 3978. The alert level for these detections should be considered high due to the potential for abuse in facilitating remote access to local services, which could be indicative of initial access or persistence mechanisms by threat actors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.\nInvolved domains are bin.equinox.io for download and *.ngrok.io for connections.\n",
      "answer": "In order to detect the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available, you should: focus on monitoring process creation logs on Windows systems. Look for command lines that contain specific patterns indicating port forwarding activities over common ports such as 139 (SMB), 445 (Microsoft-DS SMB file sharing), 3389 (RDP), 5985 (WinRM HTTP), and 5986 (WinRM HTTPS). Additionally, detect instances where command lines include arguments that start Ngrok with all configurations from a YAML file, which is a strong indication of configuring a tunnel. Monitoring for the execution of 'ngrok.exe' is crucial, especially when command lines involve initiating TCP or HTTP tunnels or when an authtoken is specified, as this often relates to setting up secure connections using Ngrok. Also, watch out for command lines executing any executable followed by 'authtoken' or starting Ngrok with '--all' switch, which might indicate an attempt to launch tunnels automatically. However, be aware of legitimate uses of these command line switches by other tools or when Ngrok is used for authorized development purposes such as debugging with HTTP 3978. The alert level for these detections should be considered high due to the potential for abuse in facilitating remote access to local services, which could be indicative of initial access or persistence mechanisms by threat actors."
    }
  },
  {
    "instruction": "How can I detect: execution of ruby with the \"-e\" flag and calls to \"socket\" related functions. This could be an indication of a potential attempt to setup a reverse shell",
    "context": "",
    "output": "In order to detect execution of ruby with the \"-e\" flag and calls to \"socket\" related functions, which could be an indication of a potential attempt to setup a reverse shell, you should monitor process creation logs on Linux systems for instances where the command line includes execution of the 'ruby' command. Specifically, look for commands that utilize the '-e' option along with references to 'rsocket' or 'TCPSocket', which are indicative of socket-related operations that could be employed in the establishment of a reverse shell. Additionally, pay attention to whether these commands are executed within common shell environments, as indicated by the presence of shell names such as 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', or 'tcsh' within the command line. This approach allows for the identification of suspicious behavior that aligns with tactics and techniques related to the execution of potentially malicious code and the use of application layer protocols to facilitate command and control activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of ruby with the \"-e\" flag and calls to \"socket\" related functions. This could be an indication of a potential attempt to setup a reverse shell",
      "answer": "In order to detect execution of ruby with the \"-e\" flag and calls to \"socket\" related functions, which could be an indication of a potential attempt to setup a reverse shell, you should monitor process creation logs on Linux systems for instances where the command line includes execution of the 'ruby' command. Specifically, look for commands that utilize the '-e' option along with references to 'rsocket' or 'TCPSocket', which are indicative of socket-related operations that could be employed in the establishment of a reverse shell. Additionally, pay attention to whether these commands are executed within common shell environments, as indicated by the presence of shell names such as 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', or 'tcsh' within the command line. This approach allows for the identification of suspicious behavior that aligns with tactics and techniques related to the execution of potentially malicious code and the use of application layer protocols to facilitate command and control activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of an executable by another executable",
    "context": "",
    "output": "Certainly!\n\nTo detect the creation of an executable by another executable, you should monitor for events where an executable file creates another executable file within a Windows environment. This involves tracking file creation activities specifically where both the source (Image) and target (TargetFilename) elements end with '.exe', indicating the involvement of executable files. However, to reduce false positives and focus the detection, it's essential to exclude certain benign and system-related activities from triggering alarms. This includes ignoring file creation events initiated by known system processes like `msiexec.exe`, `cleanmgr.exe`, `explorer.exe`, among others, which are legitimate parts of Windows operations. Additionally, special attention should be given to exclude system-update-related activities, such as those involving `svchost.exe` interacting with Windows update directories or during Windows upgrade processes.\n\nKey exclusions also extend to activities involving common application update mechanisms, like those of Microsoft Teams or GitHub Desktop, where executable files might be created as part of their normal update process. Moreover, it's crucial to filter out processes associated with software installations, update utilities, and the execution of 32-bit applications launching their 64-bit counterparts to avoid misidentification of legitimate software behavior as malicious activities.\n\nIn essence, the detection aims to highlight unusual executable file creation occurrences that could indicate unauthorized or malicious software propagation. Still, it simultaneously avoids raising alerts on certified Windows update operations, legitimate software update processes, and recognized system activities to maintain a focus on potential security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of an executable by another executable",
      "answer": "To detect the creation of an executable by another executable, you should monitor for events where an executable file creates another executable file within a Windows environment. This involves tracking file creation activities specifically where both the source (Image) and target (TargetFilename) elements end with '.exe', indicating the involvement of executable files. However, to reduce false positives and focus the detection, it's essential to exclude certain benign and system-related activities from triggering alarms. This includes ignoring file creation events initiated by known system processes like `msiexec.exe`, `cleanmgr.exe`, `explorer.exe`, among others, which are legitimate parts of Windows operations. Additionally, special attention should be given to exclude system-update-related activities, such as those involving `svchost.exe` interacting with Windows update directories or during Windows upgrade processes.\n\nKey exclusions also extend to activities involving common application update mechanisms, like those of Microsoft Teams or GitHub Desktop, where executable files might be created as part of their normal update process. Moreover, it's crucial to filter out processes associated with software installations, update utilities, and the execution of 32-bit applications launching their 64-bit counterparts to avoid misidentification of legitimate software behavior as malicious activities.\n\nIn essence, the detection aims to highlight unusual executable file creation occurrences that could indicate unauthorized or malicious software propagation. Still, it simultaneously avoids raising alerts on certified Windows update operations, legitimate software update processes, and recognized system activities to maintain a focus on potential security threats."
    }
  },
  {
    "instruction": "How to detect: Detect indirect command execution via Program Compatibility Assistant pcwrun.exe",
    "context": "",
    "output": "In order to detect indirect command execution via Program Compatibility Assistant pcwrun.exe, you should monitor for process creation events on Windows systems where the parent process ends with '\\pcwrun.exe'. When this condition is met, it is advisable to collect additional information such as the name of the computer where the event occurred, the user account involved, the exact command line used by the parent process, and the command line of the process itself. Be aware that focusing solely on these events may lead to false positives due to legitimate uses of scripts or the necessity of applying additional analysis methods like 'unique_count' or 'filter' to identify unusual activities effectively. The severity of these findings is considered low, but they can nevertheless contribute to understanding the scope and methodology of an attack exploiting this method.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect indirect command execution via Program Compatibility Assistant pcwrun.exe",
      "answer": "In order to detect indirect command execution via Program Compatibility Assistant pcwrun.exe, you should monitor for process creation events on Windows systems where the parent process ends with '\\pcwrun.exe'. When this condition is met, it is advisable to collect additional information such as the name of the computer where the event occurred, the user account involved, the exact command line used by the parent process, and the command line of the process itself. Be aware that focusing solely on these events may lead to false positives due to legitimate uses of scripts or the necessity of applying additional analysis methods like 'unique_count' or 'filter' to identify unusual activities effectively. The severity of these findings is considered low, but they can nevertheless contribute to understanding the scope and methodology of an attack exploiting this method."
    }
  },
  {
    "instruction": "Please help me detect the following: commandline operations on shell history files",
    "context": "",
    "output": "Sure!\nIn order to detect commandline operations on shell history files, you should monitor Linux systems for specific activity using the auditd service. Focus on capturing 'EXECVE' type events, which indicate execution of programs or commands. Specifically, watch for interactions with shell history files, including '.bash_history', '.zsh_history', '.zhistory', '.history', '.sh_history', and 'fish_history'. These are common files that contain past commands run by the user in the shell. Ensuring these actions are tracked can help identify potentially malicious activity, such as attempts to tamper with or delete command history to cover tracks after a compromise. Collect relevant fields like the arguments passed to the command (a0, a1, a2, a3) and the key identifying the audit rule that matched this action. Be aware that there could be false positives from legitimate administrative activities or software that legitimately cleans history files. The sensitivity of detecting operations on these shell history files is considered at a medium level, indicating that while it's not uncommon, it should be treated with a reasonable degree of caution and investigated accordingly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "commandline operations on shell history files",
      "answer": "In order to detect commandline operations on shell history files, you should monitor Linux systems for specific activity using the auditd service. Focus on capturing 'EXECVE' type events, which indicate execution of programs or commands. Specifically, watch for interactions with shell history files, including '.bash_history', '.zsh_history', '.zhistory', '.history', '.sh_history', and 'fish_history'. These are common files that contain past commands run by the user in the shell. Ensuring these actions are tracked can help identify potentially malicious activity, such as attempts to tamper with or delete command history to cover tracks after a compromise. Collect relevant fields like the arguments passed to the command (a0, a1, a2, a3) and the key identifying the audit rule that matched this action. Be aware that there could be false positives from legitimate administrative activities or software that legitimately cleans history files. The sensitivity of detecting operations on these shell history files is considered at a medium level, indicating that while it's not uncommon, it should be treated with a reasonable degree of caution and investigated accordingly."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of the Impersonate tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should monitor for specific activity indicative of this tool's operation within Windows process creation logs. Look for the execution of a process named \"impersonate.exe\" in the command line. Additionally, watch for command-line options indicative of the tool's use, such as 'list', 'exec', and 'adduser'. To enhance the detection accuracy, also check for the presence of specific hash values associated with the Impersonate tool. These hash values include an MD5 hash of '9520714AB576B0ED01D1513691377D01', a SHA256 hash of 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A', and an IMPHASH of '0A358FFC1697B7A07D0E817AC740DF62'. The detection should trigger if any of the command-line criteria are met or if one of the specified hashes is identified. Maintaining a cautious approach to potential false positives is advised, as their occurrence is currently deemed unknown. This observance is evaluated at a medium level of importance in the context of cybersecurity efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively",
      "answer": "In order to detect execution of the Impersonate tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should monitor for specific activity indicative of this tool's operation within Windows process creation logs. Look for the execution of a process named \"impersonate.exe\" in the command line. Additionally, watch for command-line options indicative of the tool's use, such as 'list', 'exec', and 'adduser'. To enhance the detection accuracy, also check for the presence of specific hash values associated with the Impersonate tool. These hash values include an MD5 hash of '9520714AB576B0ED01D1513691377D01', a SHA256 hash of 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A', and an IMPHASH of '0A358FFC1697B7A07D0E817AC740DF62'. The detection should trigger if any of the command-line criteria are met or if one of the specified hashes is identified. Maintaining a cautious approach to potential false positives is advised, as their occurrence is currently deemed unknown. This observance is evaluated at a medium level of importance in the context of cybersecurity efforts."
    }
  },
  {
    "instruction": "How can I detect: Detect creation of suspicious executable file name. Some strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths.",
    "context": "",
    "output": "In order to detect creation of suspicious executable file name. Some strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths, you should: monitor Windows file event logs for the creation of executable files that either have misleading extensions such as '.bat.exe' or '.sys.exe', which may indicate an attempt to masquerade malicious files as innocent batch or system files. Additionally, watch for executable files being created with names that mimic critical Windows directories like 'C:\\$Recycle.Bin.exe', 'C:\\Documents and Settings.exe', 'C:\\MSOCache.exe', 'C:\\Recovery.exe', and 'C:\\PerfLogs.exe'. These names exploit unquoted service paths to potentially execute malicious code. Alerting on these conditions should be treated with high priority due to the likelihood of representing a malicious attempt to compromise the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect creation of suspicious executable file name. Some strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths.",
      "answer": "In order to detect creation of suspicious executable file name. Some strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths, you should: monitor Windows file event logs for the creation of executable files that either have misleading extensions such as '.bat.exe' or '.sys.exe', which may indicate an attempt to masquerade malicious files as innocent batch or system files. Additionally, watch for executable files being created with names that mimic critical Windows directories like 'C:\\$Recycle.Bin.exe', 'C:\\Documents and Settings.exe', 'C:\\MSOCache.exe', 'C:\\Recovery.exe', and 'C:\\PerfLogs.exe'. These names exploit unquoted service paths to potentially execute malicious code. Alerting on these conditions should be treated with high priority due to the likelihood of representing a malicious attempt to compromise the system."
    }
  },
  {
    "instruction": "How can I detect: potential suspicious winget package installation from a suspicious source.",
    "context": "",
    "output": "In order to detect potential suspicious winget package installation from a suspicious source, you should monitor the creation of stream hash logs on Windows systems. Specifically, look for entries where the content begins with '[ZoneTransfer] ZoneId=3', indicating a file downloaded from the Internet. Furthermore, scrutinize any content that contains URLs with a single digit following the '://', which might be indicative of an untrusted source. It's also crucial to pay attention to target filenames ending with ':Zone.Identifier' and containing the path '\\AppData\\Local\\Temp\\WinGet\\', as these are hallmarks of files associated with winget package installations. The condition for detecting suspicious activity rests on these specific criteria being met. While there are possibilities for false positives, given the nature of these indicators, the level of concern is classified as high, underscoring the importance of vigilance for such patterns to mitigate potential threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential suspicious winget package installation from a suspicious source.",
      "answer": "In order to detect potential suspicious winget package installation from a suspicious source, you should monitor the creation of stream hash logs on Windows systems. Specifically, look for entries where the content begins with '[ZoneTransfer] ZoneId=3', indicating a file downloaded from the Internet. Furthermore, scrutinize any content that contains URLs with a single digit following the '://', which might be indicative of an untrusted source. It's also crucial to pay attention to target filenames ending with ':Zone.Identifier' and containing the path '\\AppData\\Local\\Temp\\WinGet\\', as these are hallmarks of files associated with winget package installations. The condition for detecting suspicious activity rests on these specific criteria being met. While there are possibilities for false positives, given the nature of these indicators, the level of concern is classified as high, underscoring the importance of vigilance for such patterns to mitigate potential threats."
    }
  },
  {
    "instruction": "Can you explain how to detect: when an attacker modifies the registry key \"HtmlHelp Author\" to achieve persistence",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when an attacker modifies the registry key \"HtmlHelp Author\" to achieve persistence, you should: Monitor Windows registry set actions focusing on the 'SetValue' EventType. This involves paying close attention to changes in specific TargetObject paths, which are '\\Software\\Microsoft\\HtmlHelp Author\\Location' and its 32-bit counterpart '\\Software\\WOW6432Node\\Microsoft\\HtmlHelp Author\\Location'. Such modifications suggest an attempt at achieving persistence by tampering with the registry key associated with \"HtmlHelp Author.\" It is essential to treat these detection instances with a high level of suspicion due to their implications, although it's acknowledged that the possibility of unknown false positives exists. This surveillance is critical for identifying and mitigating tactics attackers use to maintain a presence on a compromised system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker modifies the registry key \"HtmlHelp Author\" to achieve persistence",
      "answer": "In order to detect when an attacker modifies the registry key \"HtmlHelp Author\" to achieve persistence, you should: Monitor Windows registry set actions focusing on the 'SetValue' EventType. This involves paying close attention to changes in specific TargetObject paths, which are '\\Software\\Microsoft\\HtmlHelp Author\\Location' and its 32-bit counterpart '\\Software\\WOW6432Node\\Microsoft\\HtmlHelp Author\\Location'. Such modifications suggest an attempt at achieving persistence by tampering with the registry key associated with \"HtmlHelp Author.\" It is essential to treat these detection instances with a high level of suspicion due to their implications, although it's acknowledged that the possibility of unknown false positives exists. This surveillance is critical for identifying and mitigating tactics attackers use to maintain a presence on a compromised system."
    }
  },
  {
    "instruction": "How to detect: changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll",
    "context": "",
    "output": "In order to detect changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll, you should: Look for modifications within the Windows Registry specifically targeting the setting values. Monitor registry events categorized under the setting changes, particularly focusing on those with the EventType of SetValue. The attention should be on changes made to the TargetObject ending with '\\Microsoft\\Windows NT\\Rpc\\ExtErrorInformation'. You need to be vigilant for modifications detailed as either 'DWORD (0x00000000)' or 'DWORD (0x00000002)', which represent the action of disabling or disabling with exceptions, respectively. This analysis is predicated on observations in the Windows environment, specifically noting registry modification events. The tagging relevant to this activity encompasses tactics and techniques such as Persistence, Privilege Escalation, and Defense Evasion by manipulating the registry to disable critical logging functions. Be aware that detections based on this method are categorized at a low level due to the potential unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll",
      "answer": "In order to detect changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll, you should: Look for modifications within the Windows Registry specifically targeting the setting values. Monitor registry events categorized under the setting changes, particularly focusing on those with the EventType of SetValue. The attention should be on changes made to the TargetObject ending with '\\Microsoft\\Windows NT\\Rpc\\ExtErrorInformation'. You need to be vigilant for modifications detailed as either 'DWORD (0x00000000)' or 'DWORD (0x00000002)', which represent the action of disabling or disabling with exceptions, respectively. This analysis is predicated on observations in the Windows environment, specifically noting registry modification events. The tagging relevant to this activity encompasses tactics and techniques such as Persistence, Privilege Escalation, and Defense Evasion by manipulating the registry to disable critical logging functions. Be aware that detections based on this method are categorized at a low level due to the potential unknown false positives."
    }
  },
  {
    "instruction": "How to detect: usage of the \"Write-EventLog\" cmdlet with 'RawData' flag. The cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve them later for later use",
    "context": "",
    "output": "In order to detect the usage of the \"Write-EventLog\" cmdlet with 'RawData' flag, which can be leveraged to write malicious payloads to the EventLog and then retrieve them later for use, you should: focus on monitoring Windows PowerShell script activities. This specifically entails ensuring that Script Block Logging is enabled, which is crucial for logging detailed execution information about PowerShell scripts, including the content of the scripts themselves. The detection strategy hinges on identifying the use of the \"Write-EventLog\" cmdlet in conjunction with the '-RawData' parameter within PowerShell scripts. These parameters together are indicative of an attempt to log data potentially for malicious purposes. It's essential to be aware of false positives, as legitimate applications may utilize this cmdlet for non-malicious purposes. Therefore, each alert generated under these criteria should be thoroughly investigated to ascertain whether the activity is benign or malevolent. The security severity associated with this kind of activity is considered medium, reflecting the need for prompt but measured response actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Write-EventLog\" cmdlet with 'RawData' flag. The cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve them later for later use",
      "answer": "In order to detect the usage of the \"Write-EventLog\" cmdlet with 'RawData' flag, which can be leveraged to write malicious payloads to the EventLog and then retrieve them later for use, you should: focus on monitoring Windows PowerShell script activities. This specifically entails ensuring that Script Block Logging is enabled, which is crucial for logging detailed execution information about PowerShell scripts, including the content of the scripts themselves. The detection strategy hinges on identifying the use of the \"Write-EventLog\" cmdlet in conjunction with the '-RawData' parameter within PowerShell scripts. These parameters together are indicative of an attempt to log data potentially for malicious purposes. It's essential to be aware of false positives, as legitimate applications may utilize this cmdlet for non-malicious purposes. Therefore, each alert generated under these criteria should be thoroughly investigated to ascertain whether the activity is benign or malevolent. The security severity associated with this kind of activity is considered medium, reflecting the need for prompt but measured response actions."
    }
  },
  {
    "instruction": "Please help me detect the following: piping the password to an anydesk instance via CMD and the '--set-password' flag.",
    "context": "",
    "output": "Sure!\nIn order to detect piping the password to an anydesk instance via CMD and the '--set-password' flag, you should: Monitor Windows process creation logs for command lines that contain a sequence including '/c ', 'echo ', and '.exe --set-password'. This pattern suggests an attempt to programmatically set a password for an application, specifically AnyDesk in this scenario, using Windows command prompt (cmd.exe). This could indicate a malicious attempt to configure or modify the remote access software's settings without user consent or knowledge. Be aware, however, that there might be false positives such as legitimate uses of command-line operations for setting passwords in AnyDesk or similar tools that utilize the '--set-password' command. The severity of this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "piping the password to an anydesk instance via CMD and the '--set-password' flag.",
      "answer": "In order to detect piping the password to an anydesk instance via CMD and the '--set-password' flag, you should: Monitor Windows process creation logs for command lines that contain a sequence including '/c ', 'echo ', and '.exe --set-password'. This pattern suggests an attempt to programmatically set a password for an application, specifically AnyDesk in this scenario, using Windows command prompt (cmd.exe). This could indicate a malicious attempt to configure or modify the remote access software's settings without user consent or knowledge. Be aware, however, that there might be false positives such as legitimate uses of command-line operations for setting passwords in AnyDesk or similar tools that utilize the '--set-password' command. The severity of this detection is considered medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: Invoke-Mimikatz PowerShell script and alike. Mimikatz is a credential dumper capable of obtaining plaintext Windows account logins and passwords.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Invoke-Mimikatz PowerShell script and alike, which are known for being capable of obtaining plaintext Windows account logins and passwords, you should focus on monitoring PowerShell scripts on Windows platforms. Specifically, look for scripts containing specific blocks of text indicative of credential dumping activities. Key patterns to watch for include the presence of 'DumpCreds' and 'DumpCerts' together, the string 'sekurlsa::logonpasswords', or both 'crypto::certificates' and 'CERT_SYSTEM_STORE_LOCAL_MACHINE' within the same block of script text. Any script matching one of these patterns should be considered suspicious of attempting to dump credentials or certificates, commonly associated with malicious activities. However, it's crucial to note that tools like Mimikatz can also be used legitimately for security testing, which could lead to potential false positives. Given the significant security implications, any detection on this level is deemed of high importance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Invoke-Mimikatz PowerShell script and alike. Mimikatz is a credential dumper capable of obtaining plaintext Windows account logins and passwords.",
      "answer": "In order to detect Invoke-Mimikatz PowerShell script and alike, which are known for being capable of obtaining plaintext Windows account logins and passwords, you should focus on monitoring PowerShell scripts on Windows platforms. Specifically, look for scripts containing specific blocks of text indicative of credential dumping activities. Key patterns to watch for include the presence of 'DumpCreds' and 'DumpCerts' together, the string 'sekurlsa::logonpasswords', or both 'crypto::certificates' and 'CERT_SYSTEM_STORE_LOCAL_MACHINE' within the same block of script text. Any script matching one of these patterns should be considered suspicious of attempting to dump credentials or certificates, commonly associated with malicious activities. However, it's crucial to note that tools like Mimikatz can also be used legitimately for security testing, which could lead to potential false positives. Given the significant security implications, any detection on this level is deemed of high importance."
    }
  },
  {
    "instruction": "How can I detect: PowerShell scripts attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow.",
    "context": "",
    "output": "In order to detect PowerShell scripts attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow, you should monitor Windows PowerShell script logs, ensuring that Script Block Logging is enabled. Look for scripts that contain the `Set-MpPreference` command indicating an attempt to modify Microsoft Defender Antivirus settings. Focus specifically on scripts that include statements to disable various features of Defender, such as Real-time Monitoring, Behavior Monitoring, Archive Scanning, and Intrusion Prevention, among others, using flags like `-DisableRealtimeMonitoring`, `-DisableBehaviorMonitoring`, and others with either a `$true` value or `1` to signify their activation. Additionally, pay attention to scripts setting the default action for detected threats to \"Allow\", which may significantly lower the security posture by allowing all threat levels, ranging from low to severe, through settings such as `HighThreatDefaultAction Allow`. Given the nature of these modifications, any detection should be treated with a high level of suspicion, although an understanding that there may be legitimate use cases for temporarily altering these settings for troubleshooting must be maintained. Any detection, therefore, requires immediate investigation to determine its nature and intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell scripts attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow.",
      "answer": "In order to detect PowerShell scripts attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow, you should monitor Windows PowerShell script logs, ensuring that Script Block Logging is enabled. Look for scripts that contain the `Set-MpPreference` command indicating an attempt to modify Microsoft Defender Antivirus settings. Focus specifically on scripts that include statements to disable various features of Defender, such as Real-time Monitoring, Behavior Monitoring, Archive Scanning, and Intrusion Prevention, among others, using flags like `-DisableRealtimeMonitoring`, `-DisableBehaviorMonitoring`, and others with either a `$true` value or `1` to signify their activation. Additionally, pay attention to scripts setting the default action for detected threats to \"Allow\", which may significantly lower the security posture by allowing all threat levels, ranging from low to severe, through settings such as `HighThreatDefaultAction Allow`. Given the nature of these modifications, any detection should be treated with a high level of suspicion, although an understanding that there may be legitimate use cases for temporarily altering these settings for troubleshooting must be maintained. Any detection, therefore, requires immediate investigation to determine its nature and intent."
    }
  },
  {
    "instruction": "Please help me detect the following: use of Advanced Port Scanner.",
    "context": "",
    "output": "Sure!\nIn order to detect the use of Advanced Port Scanner, you should: Focus on monitoring process creation events within Windows environments. To effectively identify suspicious activity, examine the image file names, original file names, and descriptions of newly created processes for the presence of the term 'Advanced Port Scanner' or variations such as 'advanced_port_scanner' and 'advanced_port_scanner_console.exe'. Additionally, scrutinize the command line arguments of processes for the simultaneous use of '/portable' and '/lng', which are indicative of Advanced Port Scanner operations. It is important to bear in mind that there may be legitimate administrative reasons for this tool's usage or rare cases where similar command-line arguments are used by other tools; these scenarios should be considered as potential false positives. The detection of such activities is crucial due to their association with reconnaissance tactics and techniques, specifically those related to scanning and profiling networked devices.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Advanced Port Scanner.",
      "answer": "In order to detect the use of Advanced Port Scanner, you should: Focus on monitoring process creation events within Windows environments. To effectively identify suspicious activity, examine the image file names, original file names, and descriptions of newly created processes for the presence of the term 'Advanced Port Scanner' or variations such as 'advanced_port_scanner' and 'advanced_port_scanner_console.exe'. Additionally, scrutinize the command line arguments of processes for the simultaneous use of '/portable' and '/lng', which are indicative of Advanced Port Scanner operations. It is important to bear in mind that there may be legitimate administrative reasons for this tool's usage or rare cases where similar command-line arguments are used by other tools; these scenarios should be considered as potential false positives. The detection of such activities is crucial due to their association with reconnaissance tactics and techniques, specifically those related to scanning and profiling networked devices."
    }
  },
  {
    "instruction": "Can you explain how to detect: when the macOS Script Editor utility spawns an unusual child process.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when the macOS Script Editor utility spawns an unusual child process, you should: monitor for instances where the Script Editor application initiates the execution of certain child processes that are not typically associated with its standard operation. Specifically, focus on detecting the creation of processes that end with common scripting and utility binaries such as '/curl', '/bash', '/sh', '/zsh', '/dash', '/fish', '/osascript', '/mktemp', '/chmod', '/php', '/nohup', '/openssl', '/plutil', '/PlistBuddy', '/xattr', '/sqlite', '/funzip', '/popen' or contain 'python' or 'perl'. These processes can indicate execution, persistence, defense evasion, and initial access methods often utilized by attackers to perform malicious activities on a macOS system. This approach is aimed at identifying techniques associated with the execution of scripts and commands, securing initial access through spearphishing links or attachments, and evading defenses, which are categorized under tactics like execution, persistence, defense evasion, and initial access in the MITRE ATT&CK framework.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when the macOS Script Editor utility spawns an unusual child process.",
      "answer": "In order to detect when the macOS Script Editor utility spawns an unusual child process, you should: monitor for instances where the Script Editor application initiates the execution of certain child processes that are not typically associated with its standard operation. Specifically, focus on detecting the creation of processes that end with common scripting and utility binaries such as '/curl', '/bash', '/sh', '/zsh', '/dash', '/fish', '/osascript', '/mktemp', '/chmod', '/php', '/nohup', '/openssl', '/plutil', '/PlistBuddy', '/xattr', '/sqlite', '/funzip', '/popen' or contain 'python' or 'perl'. These processes can indicate execution, persistence, defense evasion, and initial access methods often utilized by attackers to perform malicious activities on a macOS system. This approach is aimed at identifying techniques associated with the execution of scripts and commands, securing initial access through spearphishing links or attachments, and evading defenses, which are categorized under tactics like execution, persistence, defense evasion, and initial access in the MITRE ATT&CK framework."
    }
  },
  {
    "instruction": "Please help me detect the following: This detection excludes known namped pipes accessible remotely and notify on newly observed ones, may help to detect lateral movement and remote exec using named pipes",
    "context": "",
    "output": "Sure!\nIn order to detect lateral movement and remote execution using named pipes, which involves monitoring for newly observed named pipes that exclude those known to be accessible remotely, you should: Focus on the SMB file service logs from Zeek. Look specifically for interactions with the IPC$ share, identified by the path '\\\\*\\IPC$', as this is commonly used in lateral movement and remote execution attempts. However, it's crucial to exclude any activity involving known named pipes that are typically used for legitimate purposes. These legitimate named pipes include 'samr', 'lsarpc', 'winreg', 'netlogon', 'srvsvc', 'protected_storage', 'wkssvc', 'browser', 'netdfs', 'svcctl', 'spoolss', 'ntsvcs', 'LSM_API_service', 'HydraLsPipe', 'TermSrv_API_service', and 'MsFteWds'. Detecting activities that do not involve these known named pipes yet still access the IPC$ share could indicate an attack attempt related to lateral movement or remote execution. It's recommended to periodically update the list of excluded named pipes to filter out any newly observed legitimate ones, thus minimizing false positives. The detection level is set as high, indicating the importance of monitoring for such activities due to their potential impact.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This detection excludes known namped pipes accessible remotely and notify on newly observed ones, may help to detect lateral movement and remote exec using named pipes",
      "answer": "In order to detect lateral movement and remote execution using named pipes, which involves monitoring for newly observed named pipes that exclude those known to be accessible remotely, you should: Focus on the SMB file service logs from Zeek. Look specifically for interactions with the IPC$ share, identified by the path '\\\\*\\IPC$', as this is commonly used in lateral movement and remote execution attempts. However, it's crucial to exclude any activity involving known named pipes that are typically used for legitimate purposes. These legitimate named pipes include 'samr', 'lsarpc', 'winreg', 'netlogon', 'srvsvc', 'protected_storage', 'wkssvc', 'browser', 'netdfs', 'svcctl', 'spoolss', 'ntsvcs', 'LSM_API_service', 'HydraLsPipe', 'TermSrv_API_service', and 'MsFteWds'. Detecting activities that do not involve these known named pipes yet still access the IPC$ share could indicate an attack attempt related to lateral movement or remote execution. It's recommended to periodically update the list of excluded named pipes to filter out any newly observed legitimate ones, thus minimizing false positives. The detection level is set as high, indicating the importance of monitoring for such activities due to their potential impact."
    }
  },
  {
    "instruction": "Can you explain how to detect: file names used by different memory dumping tools to create a memory dump of the LSASS process memory, which contains user credentials",
    "context": "",
    "output": "Certainly!\n\nIn order to detect file names used by different memory dumping tools to create a memory dump of the LSASS process memory, which contains user credentials, you should: monitor Windows file event logs for the creation or modification of specific files that indicate the use of memory dumping tools targeting the LSASS process. Look for files with names ending in '\\lsass.dmp', '\\lsass.zip', '\\lsass.rar', '\\Andrew.dmp', '\\Coredump.dmp', or '\\NotLSASS.zip'. Additionally, watch for files containing the strings '\\lsass_2', '\\lsassdump', or '\\lsassdmp' in their names, which are typical formats for dumps generated by versions of procdump. Also, files that contain both '\\lsass' and '.dmp' in their name should be flagged. Be aware of the creation of files with names starting with 'nanodump' and ending in '.dmp', or files named 'SQLDmpr' ending in '.mdmp', as these are also indicative of memory dumping efforts. The detection of any of these file names should be treated with high suspicion of unauthorized memory dump attempts aimed at extracting sensitive user credentials stored in the LSASS process memory.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "file names used by different memory dumping tools to create a memory dump of the LSASS process memory, which contains user credentials",
      "answer": "In order to detect file names used by different memory dumping tools to create a memory dump of the LSASS process memory, which contains user credentials, you should: monitor Windows file event logs for the creation or modification of specific files that indicate the use of memory dumping tools targeting the LSASS process. Look for files with names ending in '\\lsass.dmp', '\\lsass.zip', '\\lsass.rar', '\\Andrew.dmp', '\\Coredump.dmp', or '\\NotLSASS.zip'. Additionally, watch for files containing the strings '\\lsass_2', '\\lsassdump', or '\\lsassdmp' in their names, which are typical formats for dumps generated by versions of procdump. Also, files that contain both '\\lsass' and '.dmp' in their name should be flagged. Be aware of the creation of files with names starting with 'nanodump' and ending in '.dmp', or files named 'SQLDmpr' ending in '.mdmp', as these are also indicative of memory dumping efforts. The detection of any of these file names should be treated with high suspicion of unauthorized memory dump attempts aimed at extracting sensitive user credentials stored in the LSASS process memory."
    }
  },
  {
    "instruction": "Please help me detect the following: exploitation of Nimbuspwn privilege escalation vulnerability (CVE-2022-29799 and CVE-2022-29800)",
    "context": "",
    "output": "Sure!\nIn order to detect exploitation of Nimbuspwn privilege escalation vulnerability (CVE-2022-29799 and CVE-2022-29800), you should: Monitor Linux system logs for specific indicators that signal an attack attempt related to these vulnerabilities. Look for log entries that contain any of the following keywords: 'networkd-dispatcher', 'Error handling notification for interface', or '../../'. These keywords suggest exploitation attempts that take advantage of the Nimbuspwn vulnerability, such as abnormal error handling notifications or the use of directory traversal patterns. It's important to treat any log entries matching these patterns with a high level of suspicion, as there are not known false positives that are common with these indicators in the context of a Linux environment. This detection focuses on key activities associated with privilege escalation attempts, leveraging the vulnerabilities in question.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of Nimbuspwn privilege escalation vulnerability (CVE-2022-29799 and CVE-2022-29800)",
      "answer": "In order to detect exploitation of Nimbuspwn privilege escalation vulnerability (CVE-2022-29799 and CVE-2022-29800), you should: Monitor Linux system logs for specific indicators that signal an attack attempt related to these vulnerabilities. Look for log entries that contain any of the following keywords: 'networkd-dispatcher', 'Error handling notification for interface', or '../../'. These keywords suggest exploitation attempts that take advantage of the Nimbuspwn vulnerability, such as abnormal error handling notifications or the use of directory traversal patterns. It's important to treat any log entries matching these patterns with a high level of suspicion, as there are not known false positives that are common with these indicators in the context of a Linux environment. This detection focuses on key activities associated with privilege escalation attempts, leveraging the vulnerabilities in question."
    }
  },
  {
    "instruction": "Please help me detect the following: PowerShell creating a binary executable or a script file.",
    "context": "",
    "output": "Sure!\nIn order to detect PowerShell creating a binary executable or a script file, you should: Monitor for instances where PowerShell (either through `powershell.exe` or `pwsh.exe`) is involved in the creation of files with extensions typically associated with executable or script files, such as `.bat`, `.chm`, `.cmd`, `.com`, `.dll`, `.exe`, `.hta`, `.jar`, `.js`, `.ocx`, `.scr`, `.sys`, `.vbe`, `.vbs`, or `.wsf`. It is critical to apply a filter to exclude events where the targeted filename begins with `C:\\Users\\` and contains `\\AppData\\Local\\Temp\\`, and ends with `.dll` or `.exe`, indicating usage of the main user's temp directory. Additionally, exclude events targeting the administrative temp directory with filenames starting with `C:\\Windows\\Temp\\` and ending in `.dll` or `.exe`. This approach reduces the likelihood of false positives but requires careful environment-specific adjustment to further filter out routine, legitimate activity. The focus on Windows file event logs for these specific patterns of PowerShell activity alerts to potential malicious behavior, aligning with tactics and techniques such as Execution and Scripting.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell creating a binary executable or a script file.",
      "answer": "In order to detect PowerShell creating a binary executable or a script file, you should: Monitor for instances where PowerShell (either through `powershell.exe` or `pwsh.exe`) is involved in the creation of files with extensions typically associated with executable or script files, such as `.bat`, `.chm`, `.cmd`, `.com`, `.dll`, `.exe`, `.hta`, `.jar`, `.js`, `.ocx`, `.scr`, `.sys`, `.vbe`, `.vbs`, or `.wsf`. It is critical to apply a filter to exclude events where the targeted filename begins with `C:\\Users\\` and contains `\\AppData\\Local\\Temp\\`, and ends with `.dll` or `.exe`, indicating usage of the main user's temp directory. Additionally, exclude events targeting the administrative temp directory with filenames starting with `C:\\Windows\\Temp\\` and ending in `.dll` or `.exe`. This approach reduces the likelihood of false positives but requires careful environment-specific adjustment to further filter out routine, legitimate activity. The focus on Windows file event logs for these specific patterns of PowerShell activity alerts to potential malicious behavior, aligning with tactics and techniques such as Execution and Scripting."
    }
  },
  {
    "instruction": "How can I detect: removal of a port or application rule in the Windows Firewall configuration using netsh",
    "context": "",
    "output": "In order to detect the removal of a port or application rule in the Windows Firewall configuration using netsh, you should: Look for the creation of processes on Windows systems specifically invoking 'netsh.exe', either by the exact name in the Image path or by the OriginalFileName. Pay attention to commands that include both 'firewall' and 'delete' within the CommandLine to catch incidences where firewall rules are being altered. However, ensure to exclude any actions originating from 'Dropbox.exe' or containing 'name=Dropbox' in the command line, as these are marked as known exceptions. Be aware that legitimate administration activities or software installations and removals might trigger this detection, which has been classified with a medium level of urgency. This process is aligned with identifying and mitigating tactics where attackers might try to disable security measures by manipulating firewall rules.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "removal of a port or application rule in the Windows Firewall configuration using netsh",
      "answer": "In order to detect the removal of a port or application rule in the Windows Firewall configuration using netsh, you should: Look for the creation of processes on Windows systems specifically invoking 'netsh.exe', either by the exact name in the Image path or by the OriginalFileName. Pay attention to commands that include both 'firewall' and 'delete' within the CommandLine to catch incidences where firewall rules are being altered. However, ensure to exclude any actions originating from 'Dropbox.exe' or containing 'name=Dropbox' in the command line, as these are marked as known exceptions. Be aware that legitimate administration activities or software installations and removals might trigger this detection, which has been classified with a medium level of urgency. This process is aligned with identifying and mitigating tactics where attackers might try to disable security measures by manipulating firewall rules."
    }
  },
  {
    "instruction": "Can you explain how to detect: Attackers can use print.exe for remote file copy",
    "context": "",
    "output": "Certainly!\n\nIn order to prevent attackers from using print.exe for remote file copy, you should monitor for the creation of processes on Windows systems where the process name ends with '\\print.exe'. Additionally, check if the command line initiating the process starts with 'print' and contains both '/D' and '.exe' in any order. However, exclude any instances where the command line explicitly contains 'print.exe' to reduce false positives. This approach focuses on identifying and mitigating tactics and techniques related to Initial Access and Execution, by specifically looking for abuse of the printing utility which can be leveraged in an unconventional way to copy files remotely.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Attackers can use print.exe for remote file copy",
      "answer": "In order to prevent attackers from using print.exe for remote file copy, you should monitor for the creation of processes on Windows systems where the process name ends with '\\print.exe'. Additionally, check if the command line initiating the process starts with 'print' and contains both '/D' and '.exe' in any order. However, exclude any instances where the command line explicitly contains 'print.exe' to reduce false positives. This approach focuses on identifying and mitigating tactics and techniques related to Initial Access and Execution, by specifically looking for abuse of the printing utility which can be leveraged in an unconventional way to copy files remotely."
    }
  },
  {
    "instruction": "How can I detect: unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity",
    "context": "",
    "output": "In order to detect unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity, you should monitor process creation events on Windows systems, focusing on the relationships between parent and child processes specifically involving wab.exe and wabmig.exe. Special attention should be given to scenarios where these processes are spawned by or spawn known suspicious executables, such as WmiPrvSE.exe, svchost.exe, or dllhost.exe. Identifying unfamiliar or unexpected parent-child process associations involving these specific executables could be indicative of malicious activities. The detection strategy labels this as exhibiting a high level of threat due to the potential for misuse in bumblebee-related cyber attacks, even though there might be instances where the activity is benign, the occurrence of false positives is acknowledged as unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity",
      "answer": "In order to detect unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity, you should monitor process creation events on Windows systems, focusing on the relationships between parent and child processes specifically involving wab.exe and wabmig.exe. Special attention should be given to scenarios where these processes are spawned by or spawn known suspicious executables, such as WmiPrvSE.exe, svchost.exe, or dllhost.exe. Identifying unfamiliar or unexpected parent-child process associations involving these specific executables could be indicative of malicious activities. The detection strategy labels this as exhibiting a high level of threat due to the potential for misuse in bumblebee-related cyber attacks, even though there might be instances where the activity is benign, the occurrence of false positives is acknowledged as unknown."
    }
  },
  {
    "instruction": "Can you explain how to detect: risky authencaition from a non AD registered device without MFA being required.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect risky authentication from a non AD registered device without MFA being required, you should: Monitor Azure sign-in logs for successful authentication attempts that only utilized single factor authentication from devices not registered with Active Directory and are marked as 'atRisk'. This involves focusing on sign-in attempts where 'Status' is marked as 'Success', 'AuthenticationRequirement' indicates 'singleFactorAuthentication', 'DeviceDetail.trusttype' is not specified (indicating a lack of device registration or trust), and 'RiskState' is flagged as 'atRisk', pointing towards a potentially compromised or risky authentication attempt. Noteworthy, this process does not predict all possible false positives, which remain unknown, and the significance level of these detection criteria is considered high.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "risky authencaition from a non AD registered device without MFA being required.",
      "answer": "In order to detect risky authentication from a non AD registered device without MFA being required, you should: Monitor Azure sign-in logs for successful authentication attempts that only utilized single factor authentication from devices not registered with Active Directory and are marked as 'atRisk'. This involves focusing on sign-in attempts where 'Status' is marked as 'Success', 'AuthenticationRequirement' indicates 'singleFactorAuthentication', 'DeviceDetail.trusttype' is not specified (indicating a lack of device registration or trust), and 'RiskState' is flagged as 'atRisk', pointing towards a potentially compromised or risky authentication attempt. Noteworthy, this process does not predict all possible false positives, which remain unknown, and the significance level of these detection criteria is considered high."
    }
  },
  {
    "instruction": "How to detect: execution of the \"groupdel\" binary. Which is used to delete a group. This is sometimes abused by threat actors in order to cover their tracks",
    "context": "",
    "output": "In order to detect execution of the \"groupdel\" binary, which is used to delete a group and is sometimes abused by threat actors in order to cover their tracks, you should focus on monitoring process creation logs from Linux systems. Specifically, watch for any processes that end with '/groupdel', as this indicates the execution of the groupdel binary. It is important to note that while this behavior can signify malicious activity, it may also represent legitimate administrator activities. The risk associated with this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the \"groupdel\" binary. Which is used to delete a group. This is sometimes abused by threat actors in order to cover their tracks",
      "answer": "In order to detect execution of the \"groupdel\" binary, which is used to delete a group and is sometimes abused by threat actors in order to cover their tracks, you should focus on monitoring process creation logs from Linux systems. Specifically, watch for any processes that end with '/groupdel', as this indicates the execution of the groupdel binary. It is important to note that while this behavior can signify malicious activity, it may also represent legitimate administrator activities. The risk associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: adversary creating screen capture of a desktop with Import Tool.\nHighly recommended using rule on servers, due to high usage of screenshot utilities on user workstations.\nImageMagick must be installed.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect adversary creating screen capture of a desktop with Import Tool, you should: focus on analyzing logs from Linux systems, specifically those generated by the Audit daemon (`auditd`). Look for the execution of the Import Tool which is a part of the ImageMagick suite of tools, used here for taking screenshots. Detection involves identifying the execution of this tool with specific arguments: either it's invoked with the '-window' argument followed by 'root', indicating a screenshot of the entire desktop is being captured, or it lacks these parameters but targets image files that end with '.png', '.jpg', or '.jpeg', which are common screenshot file formats. \n\nIt's important to note two scenarios in the detection mechanics: \n1. The Import Tool is executed with arguments specifying that a screenshot of the entire desktop is taken. This is identified by the execution with '-window root' arguments, followed by the output file with extensions '.png', '.jpg', or '.jpeg'.\n2. The Import Tool is executed without the 'window root' arguments but directly outputs to image file formats typical for screenshots.\n\nDespite this being a solid indicator of potentially malicious activity, there's a caveat of false positives, mainly because taking screenshots is a legitimate action commonly done for various non-malicious reasons. However, the utility's usage on servers as opposed to user workstations is considered unusual and might indicate malicious intent, supporting the recommendation for applying this detection strategy primarily to server environments where the ImageMagick utility is installed. This approach aligns with understanding and mitigating potential espionage or data exfiltration efforts by adversaries, as part of broader cyber defense strategies mapped to tactics and techniques like Collection and Exfiltration.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "adversary creating screen capture of a desktop with Import Tool.\nHighly recommended using rule on servers, due to high usage of screenshot utilities on user workstations.\nImageMagick must be installed.\n",
      "answer": "In order to detect adversary creating screen capture of a desktop with Import Tool, you should: focus on analyzing logs from Linux systems, specifically those generated by the Audit daemon (`auditd`). Look for the execution of the Import Tool which is a part of the ImageMagick suite of tools, used here for taking screenshots. Detection involves identifying the execution of this tool with specific arguments: either it's invoked with the '-window' argument followed by 'root', indicating a screenshot of the entire desktop is being captured, or it lacks these parameters but targets image files that end with '.png', '.jpg', or '.jpeg', which are common screenshot file formats. \n\nIt's important to note two scenarios in the detection mechanics: \n1. The Import Tool is executed with arguments specifying that a screenshot of the entire desktop is taken. This is identified by the execution with '-window root' arguments, followed by the output file with extensions '.png', '.jpg', or '.jpeg'.\n2. The Import Tool is executed without the 'window root' arguments but directly outputs to image file formats typical for screenshots.\n\nDespite this being a solid indicator of potentially malicious activity, there's a caveat of false positives, mainly because taking screenshots is a legitimate action commonly done for various non-malicious reasons. However, the utility's usage on servers as opposed to user workstations is considered unusual and might indicate malicious intent, supporting the recommendation for applying this detection strategy primarily to server environments where the ImageMagick utility is installed. This approach aligns with understanding and mitigating potential espionage or data exfiltration efforts by adversaries, as part of broader cyber defense strategies mapped to tactics and techniques like Collection and Exfiltration."
    }
  },
  {
    "instruction": "How can I detect: usage of Sysinternals PsSuspend which can be abused to suspend critical processes",
    "context": "",
    "output": "In order to Detect usage of Sysinternals PsSuspend which can be abused to suspend critical processes, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, keep an eye out for instances where the original file name matches 'pssuspend.exe', or when the path to the executing image ends with '\\pssuspend.exe' or '\\pssuspend64.exe'. This approach aims to catch any execution attempts of the PsSuspend utility, which, while a legitimate tool from the Sysinternals suite, can be maliciously used to halt important operating system or security processes. As always, be aware that there are scenarios where this tool might be used legitimately, which could lead to potential false positives. Therefore, it's classified with a medium level of confidence in its indicative value of malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of Sysinternals PsSuspend which can be abused to suspend critical processes",
      "answer": "In order to Detect usage of Sysinternals PsSuspend which can be abused to suspend critical processes, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, keep an eye out for instances where the original file name matches 'pssuspend.exe', or when the path to the executing image ends with '\\pssuspend.exe' or '\\pssuspend64.exe'. This approach aims to catch any execution attempts of the PsSuspend utility, which, while a legitimate tool from the Sysinternals suite, can be maliciously used to halt important operating system or security processes. As always, be aware that there are scenarios where this tool might be used legitimately, which could lead to potential false positives. Therefore, it's classified with a medium level of confidence in its indicative value of malicious activity."
    }
  },
  {
    "instruction": "Please help me detect the following: group membership additions of groups that have CA policy modification access",
    "context": "",
    "output": "Sure!\nIn order to monitor and alert on group membership additions of groups that have CA policy modification access, you should:\n\nLook for activity in Azure's audit logs that indicates a member has been added to a group. Specifically, pay attention to audit log entries where the message property contains \"Add member from group.\" This reflects a crucial action where users are granted additional privileges, likely affecting Conditional Access (CA) policy modification capabilities. It is essential to scrutinize these events as they could signify an attempt to modify access control and policies within the Azure environment. While doing so, consider that not all additions might be malevolent. Approved user changes to groups should be treated as legitimate and recorded as false positives to refine the alerting process. The severity of this rule is considered medium, suggesting a balanced approach towards monitoring while being aware of potentially innocuous group modifications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "group membership additions of groups that have CA policy modification access",
      "answer": "In order to monitor and alert on group membership additions of groups that have CA policy modification access, you should:\n\nLook for activity in Azure's audit logs that indicates a member has been added to a group. Specifically, pay attention to audit log entries where the message property contains \"Add member from group.\" This reflects a crucial action where users are granted additional privileges, likely affecting Conditional Access (CA) policy modification capabilities. It is essential to scrutinize these events as they could signify an attempt to modify access control and policies within the Azure environment. While doing so, consider that not all additions might be malevolent. Approved user changes to groups should be treated as legitimate and recorded as false positives to refine the alerting process. The severity of this rule is considered medium, suggesting a balanced approach towards monitoring while being aware of potentially innocuous group modifications."
    }
  },
  {
    "instruction": "How to detect: Rule to detect the use of the SCX RunAsProvider Invoke_ExecuteShellCommand to execute any UNIX/Linux command using the /bin/sh shell.\nSCXcore, started as the Microsoft Operations Manager UNIX/Linux Agent, is now used in a host of products including\nMicrosoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite.\n",
    "context": "",
    "output": "In order to detect the use of the SCX RunAsProvider Invoke_ExecuteShellCommand to execute any UNIX/Linux command using the /bin/sh shell, which is often part of SCXcore used in Microsoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite, you should monitor Linux system logs for process creation events. Specifically, look for instances where the process is initiated by the 'root' user with a Logon ID of '0' and the current directory is set to '/var/opt/microsoft/scx/tmp'. Additionally, the command line should contain '/bin/sh', indicating that the shell is being used to execute a command. It's important to be aware of legitimate uses of the SCX RunAsProvider Invoke_ExecuteShellCommand, as these can lead to false positives. This activity is considered to be of high importance due to its potential security implications, suggesting an attacker may be attempting to execute commands with high privileges in the context of the SCX environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Rule to detect the use of the SCX RunAsProvider Invoke_ExecuteShellCommand to execute any UNIX/Linux command using the /bin/sh shell.\nSCXcore, started as the Microsoft Operations Manager UNIX/Linux Agent, is now used in a host of products including\nMicrosoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite.\n",
      "answer": "In order to detect the use of the SCX RunAsProvider Invoke_ExecuteShellCommand to execute any UNIX/Linux command using the /bin/sh shell, which is often part of SCXcore used in Microsoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite, you should monitor Linux system logs for process creation events. Specifically, look for instances where the process is initiated by the 'root' user with a Logon ID of '0' and the current directory is set to '/var/opt/microsoft/scx/tmp'. Additionally, the command line should contain '/bin/sh', indicating that the shell is being used to execute a command. It's important to be aware of legitimate uses of the SCX RunAsProvider Invoke_ExecuteShellCommand, as these can lead to false positives. This activity is considered to be of high importance due to its potential security implications, suggesting an attacker may be attempting to execute commands with high privileges in the context of the SCX environment."
    }
  },
  {
    "instruction": "Explain how should I detect the following: users trying to exploit sudo vulnerability reported in CVE-2019-14287",
    "context": "",
    "output": "In order to detect users trying to exploit the sudo vulnerability reported in CVE-2019-14287, you should: Monitor process creation logs on Linux systems for commands that contain the pattern ' -u#' in their command line. This specific string pattern is indicative of an attempt to exploit the mentioned sudo vulnerability, where unauthorized command execution might be attempted by specifying a user ID of -1 or 4294967295, effectively allowing a user to run commands with root privileges. Due to the specificity of the command pattern exploitation attempt, false positives are considered unlikely. The detection of such activity should be treated with a high level of concern due to its potential impact.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "users trying to exploit sudo vulnerability reported in CVE-2019-14287",
      "answer": "In order to detect users trying to exploit the sudo vulnerability reported in CVE-2019-14287, you should: Monitor process creation logs on Linux systems for commands that contain the pattern ' -u#' in their command line. This specific string pattern is indicative of an attempt to exploit the mentioned sudo vulnerability, where unauthorized command execution might be attempted by specifying a user ID of -1 or 4294967295, effectively allowing a user to run commands with root privileges. Due to the specificity of the command pattern exploitation attempt, false positives are considered unlikely. The detection of such activity should be treated with a high level of concern due to its potential impact."
    }
  },
  {
    "instruction": "Please help me detect the following: PAExec default named pipe",
    "context": "",
    "output": "Sure!\nIn order to detect PAExec default named pipe, you should: Focus on monitoring the creation of named pipes in Windows systems, particularly through events that Sysmon logs under Event IDs 17 and 18, which pertain to pipe creation and connection events, respectively. To ensure these events are properly logged, you'll need to configure Sysmon with a configuration such as those available from popular repositories by SwiftOnSecurity, Neo23x0, or olafhartong. Effective detection hinges on identifying pipe names that start with '\\PAExec', a known indicator of the PAExec tool's usage, which might be leveraged by attackers for executing processes remotely. Although the activity's risk is regarded as medium, there exists a potential for false positives, which are currently undefined, indicating the need for cautious interpretation of detected events.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PAExec default named pipe",
      "answer": "In order to detect PAExec default named pipe, you should: Focus on monitoring the creation of named pipes in Windows systems, particularly through events that Sysmon logs under Event IDs 17 and 18, which pertain to pipe creation and connection events, respectively. To ensure these events are properly logged, you'll need to configure Sysmon with a configuration such as those available from popular repositories by SwiftOnSecurity, Neo23x0, or olafhartong. Effective detection hinges on identifying pipe names that start with '\\PAExec', a known indicator of the PAExec tool's usage, which might be leveraged by attackers for executing processes remotely. Although the activity's risk is regarded as medium, there exists a potential for false positives, which are currently undefined, indicating the need for cautious interpretation of detected events."
    }
  },
  {
    "instruction": "Please help me detect the following: Commandlet names from PowerView of PowerSploit exploitation framework.",
    "context": "",
    "output": "Sure!\nIn order to detect Commandlet names from PowerView of PowerSploit exploitation framework, you should: monitor Windows PowerShell scripts for execution of specific cmdlets. The detection focuses on various cmdlets that are frequently used within the PowerSploit exploitation framework, particularly its PowerView module. These cmdlets include, but are not limited to, commands for adding domain group members, manipulating domain object ACLs, fetching domain information like computer, controller, GPOs, and user details, as well as several other operations aimed at information gathering, ACL manipulation, and remote execution facilitation.\n\nBy enabling Script Block Logging on Windows, administrators can track the execution of these indicative cmdlets, such as `Add-DomainGroupMember`, `Get-DomainUser`, `Invoke-Kerberoast`, and many others that span a variety of tasks from local admin access checks to domain trust mapping. This robust list captures a wide array of activities that an attacker leveraging the PowerView tool might conduct for reconnaissance, lateral movement, privilege escalation, or maintaining access.\n\nConsidering the specificity and nature of these cmdlets, detections based on this rule set are expected to have a high level of accuracy, with minimal false positives, as these are tools and commandlets typically not used by administrators in their day-to-day operations. Therefore, any alert triggered by this detection should be taken seriously and investigated promptly, as it points towards potential unauthorized PowerSploit framework usage within the environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Commandlet names from PowerView of PowerSploit exploitation framework.",
      "answer": "In order to detect Commandlet names from PowerView of PowerSploit exploitation framework, you should: monitor Windows PowerShell scripts for execution of specific cmdlets. The detection focuses on various cmdlets that are frequently used within the PowerSploit exploitation framework, particularly its PowerView module. These cmdlets include, but are not limited to, commands for adding domain group members, manipulating domain object ACLs, fetching domain information like computer, controller, GPOs, and user details, as well as several other operations aimed at information gathering, ACL manipulation, and remote execution facilitation.\n\nBy enabling Script Block Logging on Windows, administrators can track the execution of these indicative cmdlets, such as `Add-DomainGroupMember`, `Get-DomainUser`, `Invoke-Kerberoast`, and many others that span a variety of tasks from local admin access checks to domain trust mapping. This robust list captures a wide array of activities that an attacker leveraging the PowerView tool might conduct for reconnaissance, lateral movement, privilege escalation, or maintaining access.\n\nConsidering the specificity and nature of these cmdlets, detections based on this rule set are expected to have a high level of accuracy, with minimal false positives, as these are tools and commandlets typically not used by administrators in their day-to-day operations. Therefore, any alert triggered by this detection should be taken seriously and investigated promptly, as it points towards potential unauthorized PowerSploit framework usage within the environment."
    }
  },
  {
    "instruction": "How to detect: Obfuscated Powershell via VAR++ LAUNCHER",
    "context": "",
    "output": "In order to detect obfuscated Powershell via VAR++ LAUNCHER, you should be aware of a specific pattern of behavior observed in Windows PowerShell modules. This detection focuses on identifying payloads that exhibit complex obfuscation techniques typically associated with malicious activities. Specifically, the activity is detected by monitoring the PowerShell module logs for payloads that combine several suspicious elements. These elements include the usage of double ampersands (&&) which indicates command chaining, the presence of 'set' commands that are used for declaring or modifying environment variables, a sequence of one or more curly braces with digits inside (\\{\\d\\}) repeated at least twice which is a common obfuscation tactic to avoid straightforward pattern recognition, the peculiar inclusion of a double-quoted space followed by a -f switch, indicative of format specifiers being used for string manipulation, and finally, the pattern concludes with another instance of command chaining into 'cmd /c', a technique used to execute commands directly.\n\nThis combination of elements within a PowerShell payload is highly indicative of obfuscated code execution attempts, which are often utilized by adversaries to bypass security mechanisms by making the malicious activity harder to detect. It's essential to monitor for such patterns as they are closely associated with advanced persistent threat (APT) activities, where attackers employ evasion techniques to maintain access and control over compromised systems.\n\nThe detection of such activities aligns with multiple MITRE ATT&CK tactics and techniques including Execution, Defense Evasion, and Command and Control, reflecting the sophisticated nature of attempts to execute obfuscated PowerShell commands as part of a larger attack campaign. Monitoring and alerting on these specific behaviors in PowerShell module logs can significantly enhance the identification of potential security threats, allowing for timely investigation and response to prevent or mitigate malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via VAR++ LAUNCHER",
      "answer": "In order to detect obfuscated Powershell via VAR++ LAUNCHER, you should be aware of a specific pattern of behavior observed in Windows PowerShell modules. This detection focuses on identifying payloads that exhibit complex obfuscation techniques typically associated with malicious activities. Specifically, the activity is detected by monitoring the PowerShell module logs for payloads that combine several suspicious elements. These elements include the usage of double ampersands (&&) which indicates command chaining, the presence of 'set' commands that are used for declaring or modifying environment variables, a sequence of one or more curly braces with digits inside (\\{\\d\\}) repeated at least twice which is a common obfuscation tactic to avoid straightforward pattern recognition, the peculiar inclusion of a double-quoted space followed by a -f switch, indicative of format specifiers being used for string manipulation, and finally, the pattern concludes with another instance of command chaining into 'cmd /c', a technique used to execute commands directly.\n\nThis combination of elements within a PowerShell payload is highly indicative of obfuscated code execution attempts, which are often utilized by adversaries to bypass security mechanisms by making the malicious activity harder to detect. It's essential to monitor for such patterns as they are closely associated with advanced persistent threat (APT) activities, where attackers employ evasion techniques to maintain access and control over compromised systems.\n\nThe detection of such activities aligns with multiple MITRE ATT&CK tactics and techniques including Execution, Defense Evasion, and Command and Control, reflecting the sophisticated nature of attempts to execute obfuscated PowerShell commands as part of a larger attack campaign. Monitoring and alerting on these specific behaviors in PowerShell module logs can significantly enhance the identification of potential security threats, allowing for timely investigation and response to prevent or mitigate malicious activities."
    }
  },
  {
    "instruction": "How can I detect: Windows executables that writes files with suspicious extensions",
    "context": "",
    "output": "In order to detect Windows executables that write files with suspicious extensions, you should monitor file system events on Windows systems for the creation or modification of files by specific Windows executables. Pay special attention to files ending with extensions like '.bat', '.vbe', '.txt', '.vbs', '.exe', '.ps1', '.hta', '.iso', and '.dll', as these can often be linked to malicious activities. The list of executables to watch includes common Windows process names such as 'smss.exe', 'RuntimeBroker.exe', 'sihost.exe', 'lsass.exe', 'csrss.exe', 'winlogon.exe', and 'wininit.exe'. However, increased scrutiny should be applied to actions initiated by 'rundll32.exe', 'svchost.exe', and 'dllhost.exe', as these are frequently leveraged by threat actors for malicious purposes. It is crucial to examine these file interactions within the file event logs to detect potentially harmful activities involving these file types and executables, aiding in identifying and mitigating attacks that leverage file manipulation or masquerade as legitimate system processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Windows executables that writes files with suspicious extensions",
      "answer": "In order to detect Windows executables that write files with suspicious extensions, you should monitor file system events on Windows systems for the creation or modification of files by specific Windows executables. Pay special attention to files ending with extensions like '.bat', '.vbe', '.txt', '.vbs', '.exe', '.ps1', '.hta', '.iso', and '.dll', as these can often be linked to malicious activities. The list of executables to watch includes common Windows process names such as 'smss.exe', 'RuntimeBroker.exe', 'sihost.exe', 'lsass.exe', 'csrss.exe', 'winlogon.exe', and 'wininit.exe'. However, increased scrutiny should be applied to actions initiated by 'rundll32.exe', 'svchost.exe', and 'dllhost.exe', as these are frequently leveraged by threat actors for malicious purposes. It is crucial to examine these file interactions within the file event logs to detect potentially harmful activities involving these file types and executables, aiding in identifying and mitigating attacks that leverage file manipulation or masquerade as legitimate system processes."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may modify file time attributes to hide new or changes to existing files.\nTimestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder.\n",
    "context": "",
    "output": "In order to detect adversaries who modify file time attributes to hide new or changes to existing files by employing Timestomping, a technique that alters the timestamps of a file such as the modify, access, create, and change times to mimic files that are in the same folder, you should:\n\nMonitor PowerShell script logs on Windows systems, specifically looking for script executions that contain commands related to the alteration of file timestamps. These commands include accessing or modifying properties such as '.CreationTime', '.LastWriteTime', '.LastAccessTime', or directly calling methods like '[IO.File]::SetCreationTime', '[IO.File]::SetLastAccessTime', '[IO.File]::SetLastWriteTime'. It is crucial to have Script Block Logging enabled to capture these details. While keeping an eye on such script activities, note that some scripts executed by legitimate administrators might also adjust file timestamps for valid purposes, so those instances should be considered when investigating potential Timestomping activities. The significance level for these findings is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may modify file time attributes to hide new or changes to existing files.\nTimestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder.\n",
      "answer": "In order to detect adversaries who modify file time attributes to hide new or changes to existing files by employing Timestomping, a technique that alters the timestamps of a file such as the modify, access, create, and change times to mimic files that are in the same folder, you should:\n\nMonitor PowerShell script logs on Windows systems, specifically looking for script executions that contain commands related to the alteration of file timestamps. These commands include accessing or modifying properties such as '.CreationTime', '.LastWriteTime', '.LastAccessTime', or directly calling methods like '[IO.File]::SetCreationTime', '[IO.File]::SetLastAccessTime', '[IO.File]::SetLastWriteTime'. It is crucial to have Script Block Logging enabled to capture these details. While keeping an eye on such script activities, note that some scripts executed by legitimate administrators might also adjust file timestamps for valid purposes, so those instances should be considered when investigating potential Timestomping activities. The significance level for these findings is considered medium."
    }
  },
  {
    "instruction": "How to detect: Obfuscated Powershell via use Clip.exe in Scripts",
    "context": "",
    "output": "In order to detect obfuscated Powershell via use Clip.exe in Scripts, you should: Identify instances where Powershell modules, specifically within Windows environments, exhibit peculiar behavior suggesting the use of obfuscation techniques involving Clip.exe. This detection focuses on monitoring Powershell modules for patterns that combine the use of the \"echo\" command with \"Clip.exe\" or variations of the \"Invoke\" command. This could signify attempts to manipulate or interact with the clipboard in a manner that's not standard for typical administrative tasks, potentially indicating malicious activity designed to hide its presence or intentions. Monitoring for such patterns requires careful attention to payload content that matches regular expressions hinting at this unusual combination of commands. It is important to note that due to the complex and adaptive nature of such obfuscation techniques, there might be cases where legitimate activity triggers a false positive, although these instances are currently unknown. This detection strategy is classified with a high level of importance due to the sophisticated nature of the attack vector, which leverages obfuscation to evade detection. The tactics and techniques associated with this detection strategy align with those identified by the MITRE ATT&CK framework, specifically focusing on the execution aspect of attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via use Clip.exe in Scripts",
      "answer": "In order to detect obfuscated Powershell via use Clip.exe in Scripts, you should: Identify instances where Powershell modules, specifically within Windows environments, exhibit peculiar behavior suggesting the use of obfuscation techniques involving Clip.exe. This detection focuses on monitoring Powershell modules for patterns that combine the use of the \"echo\" command with \"Clip.exe\" or variations of the \"Invoke\" command. This could signify attempts to manipulate or interact with the clipboard in a manner that's not standard for typical administrative tasks, potentially indicating malicious activity designed to hide its presence or intentions. Monitoring for such patterns requires careful attention to payload content that matches regular expressions hinting at this unusual combination of commands. It is important to note that due to the complex and adaptive nature of such obfuscation techniques, there might be cases where legitimate activity triggers a false positive, although these instances are currently unknown. This detection strategy is classified with a high level of importance due to the sophisticated nature of the attack vector, which leverages obfuscation to evade detection. The tactics and techniques associated with this detection strategy align with those identified by the MITRE ATT&CK framework, specifically focusing on the execution aspect of attacks."
    }
  },
  {
    "instruction": "Can you explain how to detect: DNS queries to an \".onion\" address related to Tor routing networks",
    "context": "",
    "output": "Certainly!\n\nIn order to detect DNS queries to an \".onion\" address related to Tor routing networks, you should monitor DNS query logs from Windows systems for queries that include the '.onion' domain. This activity is associated with Tor, a service that enables anonymous communication, and accessing '.onion' addresses typically occurs over the Tor network. However, since DNS queries for '.onion' domains in a standard network scenario should not occur, this could indicate an attempt to communicate with Tor services or navigate to dark web resources. It's important to note that the detection level for this activity is regarded as high, indicating that it's a significant security concern. False positives are unknown, suggesting that while detections might be rare, each should be investigated thoroughly due to the serious nature of the attempt to access these services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DNS queries to an \".onion\" address related to Tor routing networks",
      "answer": "In order to detect DNS queries to an \".onion\" address related to Tor routing networks, you should monitor DNS query logs from Windows systems for queries that include the '.onion' domain. This activity is associated with Tor, a service that enables anonymous communication, and accessing '.onion' addresses typically occurs over the Tor network. However, since DNS queries for '.onion' domains in a standard network scenario should not occur, this could indicate an attempt to communicate with Tor services or navigate to dark web resources. It's important to note that the detection level for this activity is regarded as high, indicating that it's a significant security concern. False positives are unknown, suggesting that while detections might be rare, each should be investigated thoroughly due to the serious nature of the attempt to access these services."
    }
  },
  {
    "instruction": "How to detect: Atbroker executing non-deafualt Assistive Technology applications",
    "context": "",
    "output": "In order to detect Atbroker executing non-default Assistive Technology applications, you should focus on monitoring process creation events in Windows systems. Specifically, watch for instances where the process image name ends with 'AtBroker.exe' and its command line includes the text 'start'. However, it is crucial to filter out any command line options that are associated with legitimate, default assistive technology applications, such as various accessibility settings (e.g., animations, high contrast, Narrator, etc.). By applying this approach, you aim to identify potentially malicious activities involving AtBroker.exe while minimizing false positives related to legitimate use of assistive technologies. This method is instrumental in protecting against attacks leveraging Atbroker for executing unauthorized applications under the guise of assistive technologies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Atbroker executing non-deafualt Assistive Technology applications",
      "answer": "In order to detect Atbroker executing non-default Assistive Technology applications, you should focus on monitoring process creation events in Windows systems. Specifically, watch for instances where the process image name ends with 'AtBroker.exe' and its command line includes the text 'start'. However, it is crucial to filter out any command line options that are associated with legitimate, default assistive technology applications, such as various accessibility settings (e.g., animations, high contrast, Narrator, etc.). By applying this approach, you aim to identify potentially malicious activities involving AtBroker.exe while minimizing false positives related to legitimate use of assistive technologies. This method is instrumental in protecting against attacks leveraging Atbroker for executing unauthorized applications under the guise of assistive technologies."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of the \"del\" builtin command to remove files using greedy/wildcard expression. This is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of the \"del\" builtin command to remove files using greedy/wildcard expression, which is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence, you should: Monitor process creation logs on Windows systems for activity related to the command prompt executable (cmd.exe) either by the image name ending with '\\cmd.exe' or the original file name being 'Cmd.Exe'. Specifically, look for command lines that include 'del ' or 'erase ', coupled with wildcards targeting '.dll' or '.exe' files, such as in the patterns '\\\\*.dll' or '\\\\*.exe'. This detection is crucial as it helps in identifying attempts to remove critical files, potentially as part of an attack to hide malicious activity or the traces of an infection. The rule treats unknown cases as potential false positives and assigns a medium severity level to such detection efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the \"del\" builtin command to remove files using greedy/wildcard expression. This is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence.",
      "answer": "In order to detect execution of the \"del\" builtin command to remove files using greedy/wildcard expression, which is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence, you should: Monitor process creation logs on Windows systems for activity related to the command prompt executable (cmd.exe) either by the image name ending with '\\cmd.exe' or the original file name being 'Cmd.Exe'. Specifically, look for command lines that include 'del ' or 'erase ', coupled with wildcards targeting '.dll' or '.exe' files, such as in the patterns '\\\\*.dll' or '\\\\*.exe'. This detection is crucial as it helps in identifying attempts to remove critical files, potentially as part of an attack to hide malicious activity or the traces of an infection. The rule treats unknown cases as potential false positives and assigns a medium severity level to such detection efforts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: outlvba (Microsoft VBA for Outlook Addin) DLL being loaded by the outlook process",
    "context": "",
    "output": "In order to detect outlvba (Microsoft VBA for Outlook Addin) DLL being loaded by the outlook process, you should: Monitor the event logs for instances where the Outlook application is observed loading the 'outlvba.dll' file. Focus on the image load logs within a Windows environment. Specifically, look for events where the image name ends with 'outlook.exe' indicating the Outlook application, and the loaded image (or DLL) name starts with 'outlvba.dll', which signifies the loading of the Microsoft VBA for Outlook Addin DLL. Be mindful of legitimate macro usages that may cause similar activities and adjust your monitoring filters accordingly. This activity is significant and flagged with a high level of attention due to its potential implication in suspicious behaviors or security concerns.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "outlvba (Microsoft VBA for Outlook Addin) DLL being loaded by the outlook process",
      "answer": "In order to detect outlvba (Microsoft VBA for Outlook Addin) DLL being loaded by the outlook process, you should: Monitor the event logs for instances where the Outlook application is observed loading the 'outlvba.dll' file. Focus on the image load logs within a Windows environment. Specifically, look for events where the image name ends with 'outlook.exe' indicating the Outlook application, and the loaded image (or DLL) name starts with 'outlvba.dll', which signifies the loading of the Microsoft VBA for Outlook Addin DLL. Be mindful of legitimate macro usages that may cause similar activities and adjust your monitoring filters accordingly. This activity is significant and flagged with a high level of attention due to its potential implication in suspicious behaviors or security concerns."
    }
  },
  {
    "instruction": "Please help me detect the following: driver load of the System Informer tool",
    "context": "",
    "output": "Sure!\nIn order to detect driver load of the System Informer tool, you should monitor Windows driver load events for any instances where the 'SystemInformer.sys' file is loaded. Specifically, lookout for situations where the loaded image's name ends with '\\SystemInformer.sys'. Moreover, it is crucial to scrutinize the hashes associated with the 'SystemInformer.sys' file. A set of specific SHA256 hashes has been identified that correlate with known instances of the System Informer tool. If any of these particular hashes are detected in connection with the loading of 'SystemInformer.sys', it may indicate an operational instance of the tool. These hashes are instrumental in distinguishing between legitimate and potentially malicious uses of System Informer. \n\nIt's important to note that while System Informer can be legitimately used by system administrators or developers for various purposes, its detection in driver load events might also signify misuse. Therefore, although the detection of these hashes or the loading of 'SystemInformer.sys' raises a medium-level alert, consider employing additional contextual filters or investigative actions to ascertain the intent behind its usage in your environment. This approach helps in reducing false positives and ensuring that routine administrative activities are not disrupted.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "driver load of the System Informer tool",
      "answer": "In order to detect driver load of the System Informer tool, you should monitor Windows driver load events for any instances where the 'SystemInformer.sys' file is loaded. Specifically, lookout for situations where the loaded image's name ends with '\\SystemInformer.sys'. Moreover, it is crucial to scrutinize the hashes associated with the 'SystemInformer.sys' file. A set of specific SHA256 hashes has been identified that correlate with known instances of the System Informer tool. If any of these particular hashes are detected in connection with the loading of 'SystemInformer.sys', it may indicate an operational instance of the tool. These hashes are instrumental in distinguishing between legitimate and potentially malicious uses of System Informer. \n\nIt's important to note that while System Informer can be legitimately used by system administrators or developers for various purposes, its detection in driver load events might also signify misuse. Therefore, although the detection of these hashes or the loading of 'SystemInformer.sys' raises a medium-level alert, consider employing additional contextual filters or investigative actions to ascertain the intent behind its usage in your environment. This approach helps in reducing false positives and ensuring that routine administrative activities are not disrupted."
    }
  },
  {
    "instruction": "Please help me detect the following: Show when a monitor or a span/rspan is setup or modified",
    "context": "",
    "output": "Sure!\nIn order to show when a monitor or a span/rspan is setup or modified, you should monitor Cisco AAA (Authentication, Authorization, and Accounting) service logs for specific command occurrences. Detecting this activity involves looking for logs containing any of the following phrases: \"monitor capture point\", \"set span\", or \"set rspan\". These commands are pivotal in configuring or changing monitoring settings that could indicate either legitimate administrative activities or potential unauthorized network monitoring setup by attackers.\n\nThe detection process primarily focuses on the command set (CmdSet) field within the logs, identifying any instance of the aforementioned keywords. It is important to bear in mind that these detections could sometimes trigger on legitimate administrative actions. Instances where administrators are setting up new monitoring points, modifying existing spans, or utilizing monitor commands for troubleshooting purposes are considered normal operations and therefore, can be marked as false positives. This necessitates a thorough review of the context in which these commands are executed to discern between routine maintenance and potential security incidents.\n\nThis approach is designed to safeguard against unauthorized network surveillance activities, aligning with the understanding and mitigation efforts against certain tactics and techniques cataloged by MITRE ATT&CK, specifically those involving the manipulation of network monitoring tools to eavesdrop or gather data unlawfully. By scrutinizing logs for these specific commands, organization can bolster their cyber defense mechanism against such adversarial tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Show when a monitor or a span/rspan is setup or modified",
      "answer": "In order to show when a monitor or a span/rspan is setup or modified, you should monitor Cisco AAA (Authentication, Authorization, and Accounting) service logs for specific command occurrences. Detecting this activity involves looking for logs containing any of the following phrases: \"monitor capture point\", \"set span\", or \"set rspan\". These commands are pivotal in configuring or changing monitoring settings that could indicate either legitimate administrative activities or potential unauthorized network monitoring setup by attackers.\n\nThe detection process primarily focuses on the command set (CmdSet) field within the logs, identifying any instance of the aforementioned keywords. It is important to bear in mind that these detections could sometimes trigger on legitimate administrative actions. Instances where administrators are setting up new monitoring points, modifying existing spans, or utilizing monitor commands for troubleshooting purposes are considered normal operations and therefore, can be marked as false positives. This necessitates a thorough review of the context in which these commands are executed to discern between routine maintenance and potential security incidents.\n\nThis approach is designed to safeguard against unauthorized network surveillance activities, aligning with the understanding and mitigation efforts against certain tactics and techniques cataloged by MITRE ATT&CK, specifically those involving the manipulation of network monitoring tools to eavesdrop or gather data unlawfully. By scrutinizing logs for these specific commands, organization can bolster their cyber defense mechanism against such adversarial tactics."
    }
  },
  {
    "instruction": "Can you explain how to detect: chmod targeting files in abnormal directory paths.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect chmod targeting files in abnormal directory paths, you should: Monitor process creation logs within Linux environments for instances where the chmod command is executed. Specifically, pay attention to commands ending with '/chmod' accompanied by command lines that include references to unusual directory paths such as '/tmp/', '/.Library/', '/etc/', and '/opt/'. This detection effort focuses on capturing potentially malicious activity where chmod might be used to alter file permissions in directories that are not commonly targeted for legitimate permission changes. It's important to consider legitimate administrative activities that involve changing file permissions as potential false positives. This monitoring is categorized with a medium severity level and is essential for identifying unauthorized or suspicious changes in file permissions, which could be indicative of a malicious actor attempting to modify system configurations or gain access to sensitive areas of the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "chmod targeting files in abnormal directory paths.",
      "answer": "In order to detect chmod targeting files in abnormal directory paths, you should: Monitor process creation logs within Linux environments for instances where the chmod command is executed. Specifically, pay attention to commands ending with '/chmod' accompanied by command lines that include references to unusual directory paths such as '/tmp/', '/.Library/', '/etc/', and '/opt/'. This detection effort focuses on capturing potentially malicious activity where chmod might be used to alter file permissions in directories that are not commonly targeted for legitimate permission changes. It's important to consider legitimate administrative activities that involve changing file permissions as potential false positives. This monitoring is categorized with a medium severity level and is essential for identifying unauthorized or suspicious changes in file permissions, which could be indicative of a malicious actor attempting to modify system configurations or gain access to sensitive areas of the system."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious program execution in a web service root folder (filter out false positives)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a suspicious program execution in a web service root folder (filter out false positives), you should: Monitor for the creation of processes on Windows systems, paying special attention to those initiated from directories commonly associated with web services, such as '\\wwwroot\\', '\\wmpub\\', and '\\htdocs\\'. It's important to exclude processes that are started from less suspicious directories often used for legitimate purposes, like 'bin\\', '\\Tools\\', and '\\SMSComponent\\'. Also, ensure the process wasn't started by 'services.exe' as its parent process to reduce the risk of false positives which might occur from routine operations or the usage of common diagnostic tools that include commands like ping or nslookup. Focus on logging and examining both the command line used to initiate the process and the parent process's command line to more accurately identify and assess potential threats. This approach is tagged with tactics and techniques that typically involve execution and persistence through web servers, aiming to medium level threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious program execution in a web service root folder (filter out false positives)",
      "answer": "In order to detect a suspicious program execution in a web service root folder (filter out false positives), you should: Monitor for the creation of processes on Windows systems, paying special attention to those initiated from directories commonly associated with web services, such as '\\wwwroot\\', '\\wmpub\\', and '\\htdocs\\'. It's important to exclude processes that are started from less suspicious directories often used for legitimate purposes, like 'bin\\', '\\Tools\\', and '\\SMSComponent\\'. Also, ensure the process wasn't started by 'services.exe' as its parent process to reduce the risk of false positives which might occur from routine operations or the usage of common diagnostic tools that include commands like ping or nslookup. Focus on logging and examining both the command line used to initiate the process and the parent process's command line to more accurately identify and assess potential threats. This approach is tagged with tactics and techniques that typically involve execution and persistence through web servers, aiming to medium level threats."
    }
  },
  {
    "instruction": "Please help me detect the following: Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious activities involving the Deployment Image Servicing and Management tool (DISM), which is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should monitor process creation logs on Windows systems for executions of `DismHost.exe` or `Dism.exe`. Specifically, you should look for instances where these processes are initiated with command-line arguments that include both '/Online' and '/Disable-Feature'. These parameters indicate an attempt to disable certain features of the Windows system online, which can be indicative of an adversary's attempt to manipulate system configurations to their advantage or to disable security features. It\u2019s important to note that while this activity can be legitimate, it could also represent malicious behavior. Any detections should be reviewed to distinguish between benign use by system administrators and potentially malicious activity. The level of concern for these detections is categorized as medium, acknowledging that there exists a possibility for false positives, particularly in environments where scripts or automation tools legitimately use these command-line arguments for system maintenance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images",
      "answer": "In order to detect suspicious activities involving the Deployment Image Servicing and Management tool (DISM), which is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should monitor process creation logs on Windows systems for executions of `DismHost.exe` or `Dism.exe`. Specifically, you should look for instances where these processes are initiated with command-line arguments that include both '/Online' and '/Disable-Feature'. These parameters indicate an attempt to disable certain features of the Windows system online, which can be indicative of an adversary's attempt to manipulate system configurations to their advantage or to disable security features. It\u2019s important to note that while this activity can be legitimate, it could also represent malicious behavior. Any detections should be reviewed to distinguish between benign use by system administrators and potentially malicious activity. The level of concern for these detections is categorized as medium, acknowledging that there exists a possibility for false positives, particularly in environments where scripts or automation tools legitimately use these command-line arguments for system maintenance."
    }
  },
  {
    "instruction": "Can you explain how to detect: an a non-browser process interacting with the Telegram API which could indicate use of a covert C2",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a non-browser process interacting with the Telegram API which could indicate the use of a covert command and control (C2) channel, you should monitor network connections specifically targeting Windows as the operating system. Focus on identifying any destination hostname within network connections that contains 'api.telegram.org'. This is because telegram.org is often used for legitimate communications, but when a non-browser application attempts to engage with it, it could suggest a covert operation.\n\nHowever, not all communications with 'api.telegram.org' are inherently suspicious. Applications like web browsers regularly communicate with the Telegram API for various legitimate reasons. Therefore, exclude known web browsers from triggering an alert by checking the process image path against a list of common browsers. This list includes multiple versions and install locations of Chrome, Firefox, Internet Explorer, Microsoft Edge, Safari, Opera, and others like Brave, Maxthon, SeaMonkey, Vivaldi, and Whale. If the process initiating the connection is not one of these browsers, as indicated by the image path, it may suggest a non-browser application is being used potentially to establish a covert command and control (C2) channel through Telegram's APIs.\n\nTake note that there can be false positives, such as legitimate applications not listed as exceptions which also use the Telegram API. Therefore, while this detection process indicates potential covert C2 communication, each alert should be investigated to confirm the nature of the interaction. The severity of these detections is considered medium, underscoring the need for cautious analysis of alerts generated by this detection logic.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an a non-browser process interacting with the Telegram API which could indicate use of a covert C2",
      "answer": "In order to detect a non-browser process interacting with the Telegram API which could indicate the use of a covert command and control (C2) channel, you should monitor network connections specifically targeting Windows as the operating system. Focus on identifying any destination hostname within network connections that contains 'api.telegram.org'. This is because telegram.org is often used for legitimate communications, but when a non-browser application attempts to engage with it, it could suggest a covert operation.\n\nHowever, not all communications with 'api.telegram.org' are inherently suspicious. Applications like web browsers regularly communicate with the Telegram API for various legitimate reasons. Therefore, exclude known web browsers from triggering an alert by checking the process image path against a list of common browsers. This list includes multiple versions and install locations of Chrome, Firefox, Internet Explorer, Microsoft Edge, Safari, Opera, and others like Brave, Maxthon, SeaMonkey, Vivaldi, and Whale. If the process initiating the connection is not one of these browsers, as indicated by the image path, it may suggest a non-browser application is being used potentially to establish a covert command and control (C2) channel through Telegram's APIs.\n\nTake note that there can be false positives, such as legitimate applications not listed as exceptions which also use the Telegram API. Therefore, while this detection process indicates potential covert C2 communication, each alert should be investigated to confirm the nature of the interaction. The severity of these detections is considered medium, underscoring the need for cautious analysis of alerts generated by this detection logic."
    }
  },
  {
    "instruction": "Can you explain how to detect: PowerShell called from an executable by the version mismatch method",
    "context": "",
    "output": "Certainly!\n\nIn order to detect PowerShell called from an executable by the version mismatch method, you should: Monitor Windows PowerShell classic start events, specifically focusing on instances where there is a mismatch in the versions of the PowerShell engine and host. Look for situations where the EngineVersion starts with '2.', '4.', or '5.', while simultaneously the HostVersion begins with '3.'. This detection is based on the premise that legitimate PowerShell sessions typically have matching or compatible engine and host versions, and a significant discrepancy, as described, could indicate an attempt to exploit or leverage PowerShell for malicious purposes. Being a high-level alert, any matches should be investigated thoroughly, although it is recognized that there may be unknown scenarios leading to false positives. This method ties into broader cybersecurity frameworks by addressing techniques commonly used in Initial Access, Execution, and Defense Evasion phases of an attack, aligning with tactics and techniques such as Execution through API, User Execution, and Scripting.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell called from an executable by the version mismatch method",
      "answer": "In order to detect PowerShell called from an executable by the version mismatch method, you should: Monitor Windows PowerShell classic start events, specifically focusing on instances where there is a mismatch in the versions of the PowerShell engine and host. Look for situations where the EngineVersion starts with '2.', '4.', or '5.', while simultaneously the HostVersion begins with '3.'. This detection is based on the premise that legitimate PowerShell sessions typically have matching or compatible engine and host versions, and a significant discrepancy, as described, could indicate an attempt to exploit or leverage PowerShell for malicious purposes. Being a high-level alert, any matches should be investigated thoroughly, although it is recognized that there may be unknown scenarios leading to false positives. This method ties into broader cybersecurity frameworks by addressing techniques commonly used in Initial Access, Execution, and Defense Evasion phases of an attack, aligning with tactics and techniques such as Execution through API, User Execution, and Scripting."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious mshta process execution patterns",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious mshta process execution patterns, you should monitor process creation events on Windows systems for specific conditions indicating potential misuse of the Microsoft HTML Application Host (mshta.exe). Focus on activities where the process image ends with '\\mshta.exe' or the original filename is identified exactly as 'MSHTA.EXE'. It's essential to scrutinize instances where this process is initiated by parent processes commonly abused in attacks, such as 'cmd.exe', 'cscript.exe', 'powershell.exe', 'pwsh.exe', 'regsvr32.exe', 'rundll32.exe', and 'wscript.exe'. These parent processes raise the alarm about possible script or command execution attacks aiming to bypass security measures.\n\nAdditionally, pay attention to commands that involve suspicious directories like '\\AppData\\Local\\', 'C:\\ProgramData\\', 'C:\\Users\\Public\\', and 'C:\\Windows\\Temp\\'. These locations are frequently used by attackers to execute malicious scripts or drop malware due to less stringent permissions or to evade detection. Furthermore, filter out legitimate execution paths from 'C:\\Windows\\System32\\' and 'C:\\Windows\\SysWOW64\\' to reduce false positives, while also being vigilant for command lines containing file extensions '.htm' and '.hta' that are typically associated with HTML applications and scripts, excluding those that simply end with 'mshta.exe' or 'mshta' to avoid catching regular program executions.\n\nThe condition for raising an alert is met if all the specified criteria in selections for suspicious parent processes or folders are observed or if there's an execution of 'mshta.exe' that doesn't fit the filtered-out legitimate use cases. The detection of such patterns is critical given the high risk associated with the tactics and techniques employed that may include execution, persistence, privilege escalation, defense evasion, among others, linked with the abuse of mshta.exe in the context of an attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious mshta process execution patterns",
      "answer": "In order to detect suspicious mshta process execution patterns, you should monitor process creation events on Windows systems for specific conditions indicating potential misuse of the Microsoft HTML Application Host (mshta.exe). Focus on activities where the process image ends with '\\mshta.exe' or the original filename is identified exactly as 'MSHTA.EXE'. It's essential to scrutinize instances where this process is initiated by parent processes commonly abused in attacks, such as 'cmd.exe', 'cscript.exe', 'powershell.exe', 'pwsh.exe', 'regsvr32.exe', 'rundll32.exe', and 'wscript.exe'. These parent processes raise the alarm about possible script or command execution attacks aiming to bypass security measures.\n\nAdditionally, pay attention to commands that involve suspicious directories like '\\AppData\\Local\\', 'C:\\ProgramData\\', 'C:\\Users\\Public\\', and 'C:\\Windows\\Temp\\'. These locations are frequently used by attackers to execute malicious scripts or drop malware due to less stringent permissions or to evade detection. Furthermore, filter out legitimate execution paths from 'C:\\Windows\\System32\\' and 'C:\\Windows\\SysWOW64\\' to reduce false positives, while also being vigilant for command lines containing file extensions '.htm' and '.hta' that are typically associated with HTML applications and scripts, excluding those that simply end with 'mshta.exe' or 'mshta' to avoid catching regular program executions.\n\nThe condition for raising an alert is met if all the specified criteria in selections for suspicious parent processes or folders are observed or if there's an execution of 'mshta.exe' that doesn't fit the filtered-out legitimate use cases. The detection of such patterns is critical given the high risk associated with the tactics and techniques employed that may include execution, persistence, privilege escalation, defense evasion, among others, linked with the abuse of mshta.exe in the context of an attack."
    }
  },
  {
    "instruction": "Can you explain how to detect: conditional access changes.",
    "context": "",
    "output": "Certainly!\n\nIn order to monitor and alert on conditional access changes, you should focus on the audit logs from Azure products. Specifically, keep an eye out for logs that record the message \"Add conditional access policy\". This action could indicate an attempt to modify access controls, which can impact the security posture of your environment. However, be mindful of potential false positives which might arise from misconfigured role permissions or legitimate but unexpected changes from certain users, user agents, or hostnames in your environment. The significance of these logs are considered to be of medium level, suggesting that while they are important to track, they should be contextualized within the broader security operations of your organization.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "conditional access changes.",
      "answer": "In order to monitor and alert on conditional access changes, you should focus on the audit logs from Azure products. Specifically, keep an eye out for logs that record the message \"Add conditional access policy\". This action could indicate an attempt to modify access controls, which can impact the security posture of your environment. However, be mindful of potential false positives which might arise from misconfigured role permissions or legitimate but unexpected changes from certain users, user agents, or hostnames in your environment. The significance of these logs are considered to be of medium level, suggesting that while they are important to track, they should be contextualized within the broader security operations of your organization."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of \"xterm\" as a potential reverse shell tunnel",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of \"xterm\" as a potential reverse shell tunnel, you should: Monitor process creation logs on Linux systems for instances where the process image name contains 'xterm', and the command line arguments include '-display' and end with ':1'. This activity could indicate an attempt to establish a reverse shell tunnel using the 'xterm' application, which is a scenario associated with potential malicious activity. It's important to note that the confidence level of this detection is medium, meaning that while it's a significant indicator of the outlined attack, there could be benign instances that match these criteria, although no specific known benign use cases are identified.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"xterm\" as a potential reverse shell tunnel",
      "answer": "In order to detect usage of \"xterm\" as a potential reverse shell tunnel, you should: Monitor process creation logs on Linux systems for instances where the process image name contains 'xterm', and the command line arguments include '-display' and end with ':1'. This activity could indicate an attempt to establish a reverse shell tunnel using the 'xterm' application, which is a scenario associated with potential malicious activity. It's important to note that the confidence level of this detection is medium, meaning that while it's a significant indicator of the outlined attack, there could be benign instances that match these criteria, although no specific known benign use cases are identified."
    }
  },
  {
    "instruction": "How can I detect: use of SharpUp, a tool for local privilege escalation",
    "context": "",
    "output": "In order to detect the use of SharpUp, a tool for local privilege escalation, you should:\n\nMonitor Windows process creation logs for activities indicative of SharpUp execution. Specifically, look for any process creation events where the image name ends with '\\SharpUp.exe' or where the process description explicitly mentions 'SharpUp'. Also, scrutinize the command line arguments of process creation events for the presence of keywords associated with typical SharpUp utilization, such as 'HijackablePaths', 'UnquotedServicePath', 'ProcessDLLHijack', 'ModifiableServiceBinaries', 'ModifiableScheduledTask', 'DomainGPPPassword', and 'CachedGPPPassword'. These indicators point to attempts at exploiting vulnerabilities for escalating privileges on the local system.\n\nGiven the critical level of this detection, it is important to have robust monitoring in place for these specific patterns within process creation logs. Identifying such activities could indicate malicious attempts to escalate privileges, leveraging the capabilities of SharpUp. While the potential for false positives exists and is acknowledged to be unknown, the severity of this threat necessitates vigilant surveillance. \n\nThis detection strategy aligns with understanding and mitigating techniques commonly employed in privilege escalation attacks, as these are common tactics attackers use to gain higher level access on compromised systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of SharpUp, a tool for local privilege escalation",
      "answer": "In order to detect the use of SharpUp, a tool for local privilege escalation, you should:\n\nMonitor Windows process creation logs for activities indicative of SharpUp execution. Specifically, look for any process creation events where the image name ends with '\\SharpUp.exe' or where the process description explicitly mentions 'SharpUp'. Also, scrutinize the command line arguments of process creation events for the presence of keywords associated with typical SharpUp utilization, such as 'HijackablePaths', 'UnquotedServicePath', 'ProcessDLLHijack', 'ModifiableServiceBinaries', 'ModifiableScheduledTask', 'DomainGPPPassword', and 'CachedGPPPassword'. These indicators point to attempts at exploiting vulnerabilities for escalating privileges on the local system.\n\nGiven the critical level of this detection, it is important to have robust monitoring in place for these specific patterns within process creation logs. Identifying such activities could indicate malicious attempts to escalate privileges, leveraging the capabilities of SharpUp. While the potential for false positives exists and is acknowledged to be unknown, the severity of this threat necessitates vigilant surveillance. \n\nThis detection strategy aligns with understanding and mitigating techniques commonly employed in privilege escalation attacks, as these are common tactics attackers use to gain higher level access on compromised systems."
    }
  },
  {
    "instruction": "Can you explain how to detect: This rule tries to detect powershell download cradles, e.g. powershell . (nslookup -q=txt http://some.owned.domain.com)[-1]",
    "context": "",
    "output": "Certainly!\n\nIn order to detect powershell download cradles, e.g. powershell . (nslookup -q=txt http://some.owned.domain.com)[-1], you should: focus on monitoring process creation events on Windows systems. Specifically, look for instances where the parent process is PowerShell (`powershell.exe`) and the child process involves `nslookup`. Additionally, check if the command line includes '=txt ', which is indicative of a DNS text record query often used in this context. This approach helps in identifying suspicious activities that attempt to leverage DNS queries through PowerShell for executing or downloading malicious payloads, serving as an effective method in pinpointing potential security breaches related to malicious domain interactions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This rule tries to detect powershell download cradles, e.g. powershell . (nslookup -q=txt http://some.owned.domain.com)[-1]",
      "answer": "In order to detect powershell download cradles, e.g. powershell . (nslookup -q=txt http://some.owned.domain.com)[-1], you should: focus on monitoring process creation events on Windows systems. Specifically, look for instances where the parent process is PowerShell (`powershell.exe`) and the child process involves `nslookup`. Additionally, check if the command line includes '=txt ', which is indicative of a DNS text record query often used in this context. This approach helps in identifying suspicious activities that attempt to leverage DNS queries through PowerShell for executing or downloading malicious payloads, serving as an effective method in pinpointing potential security breaches related to malicious domain interactions."
    }
  },
  {
    "instruction": "How to detect: execution of a renamed PsExec often used by attackers or malware",
    "context": "",
    "output": "In order to detect the execution of a renamed PsExec often used by attackers or malware, you should monitor for process creation events on Windows systems. Look for descriptions indicating the remote execution of processes, particularly those associated with the Sysinternals PsExec product. However, it's crucial to exclude events where the image path ends with '\\PsExec.exe' or '\\PsExec64.exe' as these indicate legitimate PsExec usage. The focus should be on instances where PsExec may have been renamed, as this can be a sign of malicious activity. Be aware that there might be false positives, such as software that integrates PsExec in a renamed form without malicious intent, or administrators who have renamed PsExec for reasons unknown. This detection is rated at a high level of importance due to the potential for abuse by attackers leveraging renamed instances of PsExec to conduct their operations covertly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a renamed PsExec often used by attackers or malware",
      "answer": "In order to detect the execution of a renamed PsExec often used by attackers or malware, you should monitor for process creation events on Windows systems. Look for descriptions indicating the remote execution of processes, particularly those associated with the Sysinternals PsExec product. However, it's crucial to exclude events where the image path ends with '\\PsExec.exe' or '\\PsExec64.exe' as these indicate legitimate PsExec usage. The focus should be on instances where PsExec may have been renamed, as this can be a sign of malicious activity. Be aware that there might be false positives, such as software that integrates PsExec in a renamed form without malicious intent, or administrators who have renamed PsExec for reasons unknown. This detection is rated at a high level of importance due to the potential for abuse by attackers leveraging renamed instances of PsExec to conduct their operations covertly."
    }
  },
  {
    "instruction": "How to detect: creation of files which are the results of executing the built-in reconnaissance script \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\".",
    "context": "",
    "output": "In order to detect creation of files which are the results of executing the built-in reconnaissance script \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\", you should: Monitor file events within the Windows operating system, specifically targeting the file creation activity in the directory \"C:\\Windows\\System32\\config\". Look out for files that are newly created and have names that start with this directory path and end with one of the following specific file names: 'Hotfixinfo.txt', 'netiostate.txt', 'sysportslog.txt', or 'VmSwitchLog.evtx'. The creation of these files could indicate the execution of the \"gatherNetworkInfo.vbs\" script, which is known for gathering network information and could be utilized for reconnaissance purposes by attackers. It's important to closely observe such activities, although one should be aware that there might be unknown cases that could trigger false positives. This detection falls under a medium severity level due to the potential implications of unauthorized reconnaissance activity within the targeted environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of files which are the results of executing the built-in reconnaissance script \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\".",
      "answer": "In order to detect creation of files which are the results of executing the built-in reconnaissance script \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\", you should: Monitor file events within the Windows operating system, specifically targeting the file creation activity in the directory \"C:\\Windows\\System32\\config\". Look out for files that are newly created and have names that start with this directory path and end with one of the following specific file names: 'Hotfixinfo.txt', 'netiostate.txt', 'sysportslog.txt', or 'VmSwitchLog.evtx'. The creation of these files could indicate the execution of the \"gatherNetworkInfo.vbs\" script, which is known for gathering network information and could be utilized for reconnaissance purposes by attackers. It's important to closely observe such activities, although one should be aware that there might be unknown cases that could trigger false positives. This detection falls under a medium severity level due to the potential implications of unauthorized reconnaissance activity within the targeted environment."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of the \"userdel\" binary. Which is used to delete a user account and related files. This is sometimes abused by threat actors in order to cover their tracks",
    "context": "",
    "output": "In order to detect the execution of the \"userdel\" binary, which is used to delete a user account and related files and is sometimes abused by threat actors in order to cover their tracks, you should: Monitor Linux process creation logs for activities where the process image name ends with '/userdel'. This action points toward the deletion of user accounts, a method that might be utilized by attackers to remove traces of their presence or malicious activities within a system. Be aware that there could be legitimate reasons for an administrator to use this command, so it's classified with a medium level of risk. Identifying unauthorized or suspicious usage of the 'userdel' command among system logs is crucial for maintaining security and integrity within Linux environments.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the \"userdel\" binary. Which is used to delete a user account and related files. This is sometimes abused by threat actors in order to cover their tracks",
      "answer": "In order to detect the execution of the \"userdel\" binary, which is used to delete a user account and related files and is sometimes abused by threat actors in order to cover their tracks, you should: Monitor Linux process creation logs for activities where the process image name ends with '/userdel'. This action points toward the deletion of user accounts, a method that might be utilized by attackers to remove traces of their presence or malicious activities within a system. Be aware that there could be legitimate reasons for an administrator to use this command, so it's classified with a medium level of risk. Identifying unauthorized or suspicious usage of the 'userdel' command among system logs is crucial for maintaining security and integrity within Linux environments."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious local connections via a named pipe to the AD FS configuration database (Windows Internal Database).\nUsed to access information such as the AD FS configuration settings which contains sensitive information used to sign SAML tokens.\n",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious local connections via a named pipe to the AD FS configuration database (Windows Internal Database), which is used to access information such as the AD FS configuration settings containing sensitive information used to sign SAML tokens, you should: Focus on monitoring the creation of specific named pipe connections within Windows environments, especially the ones targeting the \"\\MICROSOFT##WID\\tsql\\query\" named pipe. This is indicative of attempts to connect to the Windows Internal Database, potentially to access or manipulate the AD FS configuration settings. To achieve effective monitoring, ensure that logging for Named Pipe Events, specifically Event ID 17 (Pipe Created) and Event ID 18 (Pipe Connected), is enabled and properly configured in Sysmon. It's crucial to also apply filters to exclude legitimate processes that may normally interact with named pipes in a benign context. These processes include \"Microsoft.IdentityServer.ServiceHost.exe\", \"Microsoft.Identity.Health.Adfs.PshSurrogate.exe\", \"AzureADConnect.exe\", \"Microsoft.Tri.Sensor.exe\", \"wsmprovhost.exe\", \"mmc.exe\", \"sqlservr.exe\", and \"tssdis.exe\" among common system processes like \"C:\\Windows\\system32\\svchost.exe\". By setting these conditions, you can focus on identifying potential malicious activity while minimizing the incidence of false positives, which might arise from the legitimate use of named pipes by the filtered processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious local connections via a named pipe to the AD FS configuration database (Windows Internal Database).\nUsed to access information such as the AD FS configuration settings which contains sensitive information used to sign SAML tokens.\n",
      "answer": "In order to detect suspicious local connections via a named pipe to the AD FS configuration database (Windows Internal Database), which is used to access information such as the AD FS configuration settings containing sensitive information used to sign SAML tokens, you should: Focus on monitoring the creation of specific named pipe connections within Windows environments, especially the ones targeting the \"\\MICROSOFT##WID\\tsql\\query\" named pipe. This is indicative of attempts to connect to the Windows Internal Database, potentially to access or manipulate the AD FS configuration settings. To achieve effective monitoring, ensure that logging for Named Pipe Events, specifically Event ID 17 (Pipe Created) and Event ID 18 (Pipe Connected), is enabled and properly configured in Sysmon. It's crucial to also apply filters to exclude legitimate processes that may normally interact with named pipes in a benign context. These processes include \"Microsoft.IdentityServer.ServiceHost.exe\", \"Microsoft.Identity.Health.Adfs.PshSurrogate.exe\", \"AzureADConnect.exe\", \"Microsoft.Tri.Sensor.exe\", \"wsmprovhost.exe\", \"mmc.exe\", \"sqlservr.exe\", and \"tssdis.exe\" among common system processes like \"C:\\Windows\\system32\\svchost.exe\". By setting these conditions, you can focus on identifying potential malicious activity while minimizing the incidence of false positives, which might arise from the legitimate use of named pipes by the filtered processes."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potentially suspicious child processes spawned by PowerShell",
    "context": "",
    "output": "In order to detect potentially suspicious child processes spawned by PowerShell, you should: focus on monitoring process creation events within Windows environments. Specifically, look for instances where PowerShell tools (`powershell_ise.exe`, `powershell.exe`, or `pwsh.exe`) are the parent processes initiating the launch of several potentially suspicious or harmful executables. These include but are not limited to `bash.exe`, `bitsadmin.exe`, `certutil.exe`, `cscript.exe`, `forfiles.exe`, `hh.exe`, `mshta.exe`, `regsvr32.exe`, `rundll32.exe`, `schtasks.exe`, `scrcons.exe`, `scriptrunner.exe`, `sh.exe`, `wmic.exe`, and `wscript.exe`. \n\nWhile detecting these activities, also apply filters to exclude legitimate instances where these executables might be invoked by PowerShell scripts, specifically in environments such as AWS Workspaces, potentially indicating legitimate use. Be mindful of false positives, particularly from scripts leveraging these tools for non-malicious purposes, and consider refining detection methods to account for this. The primary aim here is to identify behaviors associated with command and control, defense evasion, and execution tactics, which such child processes could signify when spawned by PowerShell scripts, pointing toward a broader, possibly malicious operation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potentially suspicious child processes spawned by PowerShell",
      "answer": "In order to detect potentially suspicious child processes spawned by PowerShell, you should: focus on monitoring process creation events within Windows environments. Specifically, look for instances where PowerShell tools (`powershell_ise.exe`, `powershell.exe`, or `pwsh.exe`) are the parent processes initiating the launch of several potentially suspicious or harmful executables. These include but are not limited to `bash.exe`, `bitsadmin.exe`, `certutil.exe`, `cscript.exe`, `forfiles.exe`, `hh.exe`, `mshta.exe`, `regsvr32.exe`, `rundll32.exe`, `schtasks.exe`, `scrcons.exe`, `scriptrunner.exe`, `sh.exe`, `wmic.exe`, and `wscript.exe`. \n\nWhile detecting these activities, also apply filters to exclude legitimate instances where these executables might be invoked by PowerShell scripts, specifically in environments such as AWS Workspaces, potentially indicating legitimate use. Be mindful of false positives, particularly from scripts leveraging these tools for non-malicious purposes, and consider refining detection methods to account for this. The primary aim here is to identify behaviors associated with command and control, defense evasion, and execution tactics, which such child processes could signify when spawned by PowerShell scripts, pointing toward a broader, possibly malicious operation."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of default named pipe used by the DiagTrackEoP POC",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of default named pipe used by the DiagTrackEoP POC, you should focus on monitoring Windows named pipe creation events. This involves configuring logging specifically for named pipe events in Sysmon, specifically watching for Event ID 17 (pipe created) and Event ID 18 (pipe connected). It's important to ensure your Sysmon configuration is up to date and includes monitoring for named pipe events, utilizing popular Sysmon configurations found online as a starting point. The detection mechanism is set to trigger an alert when a pipe with the name \"thisispipe\" is created, which is a characteristic used by the DiagTrackEoP proof of concept. Given that this activity is closely associated with a known exploit, false positives are considered unlikely, and such detections should be treated with a high level of urgency.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of default named pipe used by the DiagTrackEoP POC",
      "answer": "In order to detect the creation of default named pipe used by the DiagTrackEoP POC, you should focus on monitoring Windows named pipe creation events. This involves configuring logging specifically for named pipe events in Sysmon, specifically watching for Event ID 17 (pipe created) and Event ID 18 (pipe connected). It's important to ensure your Sysmon configuration is up to date and includes monitoring for named pipe events, utilizing popular Sysmon configurations found online as a starting point. The detection mechanism is set to trigger an alert when a pipe with the name \"thisispipe\" is created, which is a characteristic used by the DiagTrackEoP proof of concept. Given that this activity is closely associated with a known exploit, false positives are considered unlikely, and such detections should be treated with a high level of urgency."
    }
  },
  {
    "instruction": "Please help me detect the following: This the exploitation of a NTFS vulnerability as reported without many details via Twitter",
    "context": "",
    "output": "Sure!\nIn order to detect the exploitation of a NTFS vulnerability as reported without many details via Twitter, you should: monitor Windows system logs, specifically looking for entries associated with the NTFS file system provider. Focus on events with an EventID of 55, which indicate an issue within the file system, originating from the 'File System Driver'. Be especially alert for descriptions that mention the filesystem contains a corrupted file record, specifically when the description also points out that the name of the file is \"\\\". Such events are unusual and, due to their specificity, false positives are unlikely. As this behavior may signify an attempt to exploit a known vulnerability in the NTFS file system, it's critical to investigate these alerts promptly. The severity of this detection is considered high due to the potential impact of exploiting NTFS vulnerabilities, highlighting the importance of swift response measures to mitigate possible security incidents.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This the exploitation of a NTFS vulnerability as reported without many details via Twitter",
      "answer": "In order to detect the exploitation of a NTFS vulnerability as reported without many details via Twitter, you should: monitor Windows system logs, specifically looking for entries associated with the NTFS file system provider. Focus on events with an EventID of 55, which indicate an issue within the file system, originating from the 'File System Driver'. Be especially alert for descriptions that mention the filesystem contains a corrupted file record, specifically when the description also points out that the name of the file is \"\\\". Such events are unusual and, due to their specificity, false positives are unlikely. As this behavior may signify an attempt to exploit a known vulnerability in the NTFS file system, it's critical to investigate these alerts promptly. The severity of this detection is considered high due to the potential impact of exploiting NTFS vulnerabilities, highlighting the importance of swift response measures to mitigate possible security incidents."
    }
  },
  {
    "instruction": "Please help me detect the following: scheduled task creations or modification on a suspicious schedule type",
    "context": "",
    "output": "Sure!\nIn order to detect scheduled task creations or modification on a suspicious schedule type, you should monitor for the creation or alteration of scheduled tasks in Windows environments specifically by tracking process creation logs. Look for the use of `schtasks.exe` either by its process image ending with `\\schtasks.exe` or having an original file name of `schtasks.exe`. Further scrutinize any command-line invocation of `schtasks.exe` that includes scheduling parameters such as `ONLOGON`, `ONSTART`, `ONCE`, or `ONIDLE` to pinpoint tasks set to trigger on logon, system start, one-time executions, or when the system is idle, respectively. However, it's crucial to filter out command lines that include \"NT AUT\", \" SYSTEM\", or \"HIGHEST\" to avoid false positives related to tasks run under common system authority or with highest privileges, as these might be legitimate system processes. This detection method is ranked with a high level of importance due to the potential misuse of scheduled tasks for malicious purposes, such as maintaining persistence or executing malware at specific triggers. Be aware of legitimate scheduled tasks that may fit these criteria and adjust the filtering according to your specific environment to minimize false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scheduled task creations or modification on a suspicious schedule type",
      "answer": "In order to detect scheduled task creations or modification on a suspicious schedule type, you should monitor for the creation or alteration of scheduled tasks in Windows environments specifically by tracking process creation logs. Look for the use of `schtasks.exe` either by its process image ending with `\\schtasks.exe` or having an original file name of `schtasks.exe`. Further scrutinize any command-line invocation of `schtasks.exe` that includes scheduling parameters such as `ONLOGON`, `ONSTART`, `ONCE`, or `ONIDLE` to pinpoint tasks set to trigger on logon, system start, one-time executions, or when the system is idle, respectively. However, it's crucial to filter out command lines that include \"NT AUT\", \" SYSTEM\", or \"HIGHEST\" to avoid false positives related to tasks run under common system authority or with highest privileges, as these might be legitimate system processes. This detection method is ranked with a high level of importance due to the potential misuse of scheduled tasks for malicious purposes, such as maintaining persistence or executing malware at specific triggers. Be aware of legitimate scheduled tasks that may fit these criteria and adjust the filtering according to your specific environment to minimize false positives."
    }
  },
  {
    "instruction": "Can you explain how to detect: user tampers with S3 data management in Amazon Web Services.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when a user tampers with S3 data management in Amazon Web Services, you should: Observe AWS CloudTrail logs for actions that modify S3 bucket configurations. Specifically, look for events where the `eventSource` is `s3.amazonaws.com` and the `eventName` includes activities such as enabling bucket logging (`PutBucketLogging`), setting up a bucket to serve a website (`PutBucketWebsite`), changing the bucket's encryption settings (`PutEncryptionConfiguration`), adjusting lifecycle configurations (`PutLifecycleConfiguration`), modifying replication settings (`PutReplicationConfiguration`), replicating objects (`ReplicateObject`), or restoring objects (`RestoreObject`). These activities could indicate unauthorized attempts to alter how S3 data is managed, stored, or accessed. It\u2019s important to note that while these events can be indicative of tampering, changes to S3 configurations might sometimes be performed by system or network administrators as part of legitimate operations. Therefore, it\u2019s essential to verify if the changes were made by recognized and authorized entities in your environment. Suspicious activities, especially those initiated by unfamiliar users or hosts, should be investigated thoroughly. Known legitimate behaviors causing alerts should be documented and can be configured to bypass this detection mechanism to reduce false positives. This observation has a low level of alert severity but is critical for maintaining the integrity and security of S3 data management.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user tampers with S3 data management in Amazon Web Services.",
      "answer": "In order to detect when a user tampers with S3 data management in Amazon Web Services, you should: Observe AWS CloudTrail logs for actions that modify S3 bucket configurations. Specifically, look for events where the `eventSource` is `s3.amazonaws.com` and the `eventName` includes activities such as enabling bucket logging (`PutBucketLogging`), setting up a bucket to serve a website (`PutBucketWebsite`), changing the bucket's encryption settings (`PutEncryptionConfiguration`), adjusting lifecycle configurations (`PutLifecycleConfiguration`), modifying replication settings (`PutReplicationConfiguration`), replicating objects (`ReplicateObject`), or restoring objects (`RestoreObject`). These activities could indicate unauthorized attempts to alter how S3 data is managed, stored, or accessed. It\u2019s important to note that while these events can be indicative of tampering, changes to S3 configurations might sometimes be performed by system or network administrators as part of legitimate operations. Therefore, it\u2019s essential to verify if the changes were made by recognized and authorized entities in your environment. Suspicious activities, especially those initiated by unfamiliar users or hosts, should be investigated thoroughly. Known legitimate behaviors causing alerts should be documented and can be configured to bypass this detection mechanism to reduce false positives. This observation has a low level of alert severity but is critical for maintaining the integrity and security of S3 data management."
    }
  },
  {
    "instruction": "Can you explain how to detect: The Tasks folder in system32 and syswow64 are globally writable paths.\nAdversaries can take advantage of this and load or influence any script hosts or ANY .NET Application \nin Tasks to load and execute a custom assembly into cscript, wscript, regsvr32, mshta, eventvwr\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect adversaries exploiting the globally writable paths in the Tasks folders of system32 and syswow64 to load or influence script hosts or .NET Applications, resulting in the execution of custom assemblies into cscript, wscript, regsvr32, mshta, eventvwr, you should: Monitor for process creation events on Windows systems that contain command line activities evidencing the use of commands such as 'echo', 'copy', 'type', and 'file createnew' for potentially malicious file manipulation. Additionally, pay special attention to processes being created with command lines that reference direct paths to the Tasks folders within C:\\Windows\\System32\\Tasks\\ or C:\\Windows\\SysWow64\\Tasks\\, as these indicate attempts to exploit the writable feature of these directories. The detection focuses on the command lines used during the process creation, and the parent process involved in these activities. Since these behaviors are attributed to a high-level of threat, any occurrence should be considered with caution, albeit acknowledging that there can be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The Tasks folder in system32 and syswow64 are globally writable paths.\nAdversaries can take advantage of this and load or influence any script hosts or ANY .NET Application \nin Tasks to load and execute a custom assembly into cscript, wscript, regsvr32, mshta, eventvwr\n",
      "answer": "In order to detect adversaries exploiting the globally writable paths in the Tasks folders of system32 and syswow64 to load or influence script hosts or .NET Applications, resulting in the execution of custom assemblies into cscript, wscript, regsvr32, mshta, eventvwr, you should: Monitor for process creation events on Windows systems that contain command line activities evidencing the use of commands such as 'echo', 'copy', 'type', and 'file createnew' for potentially malicious file manipulation. Additionally, pay special attention to processes being created with command lines that reference direct paths to the Tasks folders within C:\\Windows\\System32\\Tasks\\ or C:\\Windows\\SysWow64\\Tasks\\, as these indicate attempts to exploit the writable feature of these directories. The detection focuses on the command lines used during the process creation, and the parent process involved in these activities. Since these behaviors are attributed to a high-level of threat, any occurrence should be considered with caution, albeit acknowledging that there can be unknown false positives."
    }
  },
  {
    "instruction": "How can I detect: when sign-ins increased by 10% or greater.",
    "context": "",
    "output": "In order to detect when sign-ins increased by 10% or greater, you should: Monitor Azure's sign-in logs for an increase in sign-in failures. Specifically, look for events where the status is marked as a failure, and this failure rate constitutes less than 10% of total attempts. This monitoring approach is designed for Azure environments and concerns the sign-in logs service. An increase in sign-in failures might indicate an unauthorized attempt to access accounts, which could be part of a broader attack strategy. This detection strategy is of medium importance and is considered to have an unlikely chance of producing false positives, suggesting high confidence in the reliability of the detection. The tags associated with this form of monitoring include tactics and techniques that involve initial access attempts through credential exploitation or brute force methods.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when sign-ins increased by 10% or greater.",
      "answer": "In order to detect when sign-ins increased by 10% or greater, you should: Monitor Azure's sign-in logs for an increase in sign-in failures. Specifically, look for events where the status is marked as a failure, and this failure rate constitutes less than 10% of total attempts. This monitoring approach is designed for Azure environments and concerns the sign-in logs service. An increase in sign-in failures might indicate an unauthorized attempt to access accounts, which could be part of a broader attack strategy. This detection strategy is of medium importance and is considered to have an unlikely chance of producing false positives, suggesting high confidence in the reliability of the detection. The tags associated with this form of monitoring include tactics and techniques that involve initial access attempts through credential exploitation or brute force methods."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious changes to the Windows Defender configuration",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious changes to the Windows Defender configuration, you should monitor for specific modifications made to the Windows Defender\u2019s settings that could undermine the system's security integrity. This includes changes logged in Windows Defender's operational logs under the service name 'windefend', specifically with an event ID 5007, which denotes that the antimalware platform's configuration has been altered. Key changes to watch for include the disabling of AntiSpyware, the disabling of removable drive scanning, the disabling of scanning mapped network drives for a full scan, the disabling of block at first seen in SpyNet, changes to SpyNet reporting settings, and modifications to the consent level for submitting samples to Microsoft for analysis. These modifications are critical to monitor as they can significantly lower the protective measures of Windows Defender, making the system more vulnerable to malware and other cyber threats. It\u2019s also important to note that while administrator activity might account for some changes and could initially be considered as false positives, such activity still requires investigation to ensure it's not malicious. Monitoring these changes is crucial for maintaining the security posture of a Windows-based system and is associated with tactics and techniques like defense evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious changes to the Windows Defender configuration",
      "answer": "In order to detect suspicious changes to the Windows Defender configuration, you should monitor for specific modifications made to the Windows Defender\u2019s settings that could undermine the system's security integrity. This includes changes logged in Windows Defender's operational logs under the service name 'windefend', specifically with an event ID 5007, which denotes that the antimalware platform's configuration has been altered. Key changes to watch for include the disabling of AntiSpyware, the disabling of removable drive scanning, the disabling of scanning mapped network drives for a full scan, the disabling of block at first seen in SpyNet, changes to SpyNet reporting settings, and modifications to the consent level for submitting samples to Microsoft for analysis. These modifications are critical to monitor as they can significantly lower the protective measures of Windows Defender, making the system more vulnerable to malware and other cyber threats. It\u2019s also important to note that while administrator activity might account for some changes and could initially be considered as false positives, such activity still requires investigation to ensure it's not malicious. Monitoring these changes is crucial for maintaining the security posture of a Windows-based system and is associated with tactics and techniques like defense evasion."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of a file by \"dllhost.exe\" in System32 directory part of \"IDiagnosticProfileUAC\" UAC bypass technique",
    "context": "",
    "output": "Detects the creation of a file by my code in generating a response, the process involves explaining how the detection of a file creation task works. This is initiated by the \"dllhost.exe\" process within the System32 directory, which forms a part of the \"IDiagnosticProfileUAC\" technique used to bypass User Account Control (UAC). To detect this activity, one should monitor log sources from Windows systems, specifically those tracking file creation events. The detection focuses on identifying events where the \"dllhost.exe\" process creates a file. The criteria for this detection include ensuring that the executable file involved ends with \"dllhost.exe\" and that the target filename begins with \"C:\\Windows\\System32\\\" and ends with \".dll\". This configuration aims to capture activities where potentially malicious DLL files are being placed into the System32 directory by \"dllhost.exe\", a common tactic employed in UAC bypass methods.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a file by \"dllhost.exe\" in System32 directory part of \"IDiagnosticProfileUAC\" UAC bypass technique",
      "answer": "Detects the creation of a file by my code in generating a response, the process involves explaining how the detection of a file creation task works. This is initiated by the \"dllhost.exe\" process within the System32 directory, which forms a part of the \"IDiagnosticProfileUAC\" technique used to bypass User Account Control (UAC). To detect this activity, one should monitor log sources from Windows systems, specifically those tracking file creation events. The detection focuses on identifying events where the \"dllhost.exe\" process creates a file. The criteria for this detection include ensuring that the executable file involved ends with \"dllhost.exe\" and that the target filename begins with \"C:\\Windows\\System32\\\" and ends with \".dll\". This configuration aims to capture activities where potentially malicious DLL files are being placed into the System32 directory by \"dllhost.exe\", a common tactic employed in UAC bypass methods."
    }
  },
  {
    "instruction": "Please help me detect the following: deletion of local audit logs",
    "context": "",
    "output": "Sure!\nIn order to detect the deletion of local audit logs, you should: focus on monitoring macOS process creation logs for instances where command line utilities typically used for file deletion, such as '/rm', '/unlink', and '/shred', are executed. Pay special attention to commands that target directories associated with logging, specifically '/var/log' and paths that include both '/Users/' and '/Library/Logs/'. The presence of these commands, especially when coupled, is indicative of a user attempting to erase local audit logs, which can be a sign of malicious activity aimed at covering tracks or undermining system auditing capabilities. Be mindful that legitimate administration activities might also trigger these detections, so additional context and investigation are recommended to differentiate between harmful actions and benign administrative tasks. The security level for this kind of activity is considered to be medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deletion of local audit logs",
      "answer": "In order to detect the deletion of local audit logs, you should: focus on monitoring macOS process creation logs for instances where command line utilities typically used for file deletion, such as '/rm', '/unlink', and '/shred', are executed. Pay special attention to commands that target directories associated with logging, specifically '/var/log' and paths that include both '/Users/' and '/Library/Logs/'. The presence of these commands, especially when coupled, is indicative of a user attempting to erase local audit logs, which can be a sign of malicious activity aimed at covering tracks or undermining system auditing capabilities. Be mindful that legitimate administration activities might also trigger these detections, so additional context and investigation are recommended to differentiate between harmful actions and benign administrative tasks. The security level for this kind of activity is considered to be medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up, you should: look for signs in the Windows environment where the process access category indicates an anomaly. Specifically, look out for instances where the WerFault.exe process attempts to access the lsass.exe process with unusually high access permissions (granted access level of 0x1FFFFF). This kind of access suggests an attempt to read, write, or manipulate the LSASS memory, which is a common tactic in credential dumping attacks. Despite this detection method being highly indicative of malicious activity, be mindful of rare legitimate scenarios where WerFault.exe might legitimately access lsass.exe, such as genuine failures of the lsass.exe process that trigger a crash dump. However, these instances are considered unlikely. The detection of such activity is categorized with a high level of severity due to the sensitive nature of lsass.exe in Windows systems, which manages user authentication and security protocols.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up.",
      "answer": "In order to detect process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up, you should: look for signs in the Windows environment where the process access category indicates an anomaly. Specifically, look out for instances where the WerFault.exe process attempts to access the lsass.exe process with unusually high access permissions (granted access level of 0x1FFFFF). This kind of access suggests an attempt to read, write, or manipulate the LSASS memory, which is a common tactic in credential dumping attacks. Despite this detection method being highly indicative of malicious activity, be mindful of rare legitimate scenarios where WerFault.exe might legitimately access lsass.exe, such as genuine failures of the lsass.exe process that trigger a crash dump. However, these instances are considered unlikely. The detection of such activity is categorized with a high level of severity due to the sensitive nature of lsass.exe in Windows systems, which manages user authentication and security protocols."
    }
  },
  {
    "instruction": "Can you explain how to detect: patterns as noticed in exploitation of Windows CVE-2021-31979 CVE-2021-33771 vulnerability and DevilsTongue malware by threat group Sourgum",
    "context": "",
    "output": "Certainly!\n\nIn order to detect patterns as noticed in exploitation of Windows CVE-2021-31979, CVE-2021-33771 vulnerability, and DevilsTongue malware by threat group Sourgum, you should monitor the Windows registry for specific set value operations. Focus on capturing events where the registry key's `EventType` is `SetValue`. This operation should be particularly watched in two paths: `CLSID\\{CF4CC405-E2C5-4DDD-B3CE-5E7582D8C9FA}\\InprocServer32\\(Default)` and `CLSID\\{7C857801-7381-11CF-884D-00AA004B2E24}\\InProcServer32\\(Default)`, indicating an attempt to manipulate registry keys associated with COM objects.\n\nHowever, there is a need to exclude events where the modifications involve files ending in `system32\\wbem\\wmiutils.dll` or `system32\\wbem\\wbemsvc.dll`. Those particular file paths mentioned in the `Details` filter criteria are marked as exceptions and not considered part of this suspicious activity pattern.\n\nThis approach is designed with a very low rate of false positives, indicating a critical level of reliability in detecting specific exploitation patterns without considerable noise from valid system or software operations. Monitoring and analyzing modifications to these registry keys, with the noted exclusions, are essential steps in identifying attempts to exploit the vulnerabilities CVE-2021-31979 and CVE-2021-33771, or in deploying DevilsTongue malware, indicating potential compromise by the Sourgum threat group.\n\nBy focusing on such registry key modifications, security teams can quickly identify and mitigate activities linked to recognized tactics, techniques, and procedures associated with these specific vulnerabilities and threat actors. This level of monitoring is aligned with understanding the intricacies of the Windows registry and its role in system and software configuration, providing a vital checkpoint for intercepting malicious operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "patterns as noticed in exploitation of Windows CVE-2021-31979 CVE-2021-33771 vulnerability and DevilsTongue malware by threat group Sourgum",
      "answer": "In order to detect patterns as noticed in exploitation of Windows CVE-2021-31979, CVE-2021-33771 vulnerability, and DevilsTongue malware by threat group Sourgum, you should monitor the Windows registry for specific set value operations. Focus on capturing events where the registry key's `EventType` is `SetValue`. This operation should be particularly watched in two paths: `CLSID\\{CF4CC405-E2C5-4DDD-B3CE-5E7582D8C9FA}\\InprocServer32\\(Default)` and `CLSID\\{7C857801-7381-11CF-884D-00AA004B2E24}\\InProcServer32\\(Default)`, indicating an attempt to manipulate registry keys associated with COM objects.\n\nHowever, there is a need to exclude events where the modifications involve files ending in `system32\\wbem\\wmiutils.dll` or `system32\\wbem\\wbemsvc.dll`. Those particular file paths mentioned in the `Details` filter criteria are marked as exceptions and not considered part of this suspicious activity pattern.\n\nThis approach is designed with a very low rate of false positives, indicating a critical level of reliability in detecting specific exploitation patterns without considerable noise from valid system or software operations. Monitoring and analyzing modifications to these registry keys, with the noted exclusions, are essential steps in identifying attempts to exploit the vulnerabilities CVE-2021-31979 and CVE-2021-33771, or in deploying DevilsTongue malware, indicating potential compromise by the Sourgum threat group.\n\nBy focusing on such registry key modifications, security teams can quickly identify and mitigate activities linked to recognized tactics, techniques, and procedures associated with these specific vulnerabilities and threat actors. This level of monitoring is aligned with understanding the intricacies of the Windows registry and its role in system and software configuration, providing a vital checkpoint for intercepting malicious operations."
    }
  },
  {
    "instruction": "How can I detect: Detect attempt to enable auditing of TTY input",
    "context": "",
    "output": "In order to detect attempt to enable auditing of TTY input, you should: Monitor for specific events within Linux environments where the audit daemon (auditd) is enabled. Focus on detecting when there are modifications or interactions with critical authentication-related files, specifically '/etc/pam.d/system-auth' and '/etc/pam.d/password-auth'. Additionally, pay attention to events related to TTY (Teletypewriter) inputs, such as those classified as 'TTY' and 'USER_TTY'. These events should be carefully reviewed to determine if they represent legitimate administrative activities or if they are indicative of an attacker attempting to enable auditing on TTY inputs to capture user inputs, potentially including credentials. Administrative actions could sometimes trigger these events, so it's essential to differentiate between normal administrative work and potential security threats. The detection is considered high level due to the sensitive nature of the activity and its potential impact on security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect attempt to enable auditing of TTY input",
      "answer": "In order to detect attempt to enable auditing of TTY input, you should: Monitor for specific events within Linux environments where the audit daemon (auditd) is enabled. Focus on detecting when there are modifications or interactions with critical authentication-related files, specifically '/etc/pam.d/system-auth' and '/etc/pam.d/password-auth'. Additionally, pay attention to events related to TTY (Teletypewriter) inputs, such as those classified as 'TTY' and 'USER_TTY'. These events should be carefully reviewed to determine if they represent legitimate administrative activities or if they are indicative of an attacker attempting to enable auditing on TTY inputs to capture user inputs, potentially including credentials. Administrative actions could sometimes trigger these events, so it's essential to differentiate between normal administrative work and potential security threats. The detection is considered high level due to the sensitive nature of the activity and its potential impact on security."
    }
  },
  {
    "instruction": "Explain how should I detect the following: registry key used by Leviathan APT in Malaysian focused campaign",
    "context": "",
    "output": "In order to detect registry key used by Leviathan APT in Malaysian focused campaign, you should: Monitor the Windows Registry for changes, specifically focusing on the registry event category. Be on the lookout for any alterations to the 'HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ntkd' registry key. This particular key modification is critical as it is associated with the Leviathan Advanced Persistent Threat (APT) group, which has targeted campaigns focusing on Malaysia. Identifying changes to this key can help in early detection of their malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registry key used by Leviathan APT in Malaysian focused campaign",
      "answer": "In order to detect registry key used by Leviathan APT in Malaysian focused campaign, you should: Monitor the Windows Registry for changes, specifically focusing on the registry event category. Be on the lookout for any alterations to the 'HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ntkd' registry key. This particular key modification is critical as it is associated with the Leviathan Advanced Persistent Threat (APT) group, which has targeted campaigns focusing on Malaysia. Identifying changes to this key can help in early detection of their malicious activities."
    }
  },
  {
    "instruction": "How can I detect: usage of COM objects that can be abused to download files in PowerShell by CLSID",
    "context": "",
    "output": "In order to detect usage of COM objects that can be abused to download files in PowerShell by CLSID, you should examine PowerShell script block logging on Windows systems. Ensure that Script Block Logging is enabled to capture the execution of PowerShell commands. Specifically, look for instances where the script text contains any indications of using '[Type]::GetTypeFromCLSID(' followed by specific CLSID values known to be associated with file download capabilities. The CLSIDs to watch out for include '0002DF01-0000-0000-C000-000000000046', 'F6D90F16-9C73-11D3-B32E-00C04F990BB4', 'F5078F35-C551-11D3-89B9-0000F81FE221', '88d96a0a-f192-11d4-a65f-0040963251e5', 'AFBA6B42-5692-48EA-8141-DC517DCF0EF1', 'AFB40FFD-B609-40A3-9828-F88BBE11E4E3', '88d96a0b-f192-11d4-a65f-0040963251e5', and '2087c2f4-2cef-4953-a8ab-66779b670495' among others. It is important to approach detections with a mindset that there might be legitimate uses of these COM objects in the environment, hence the potential for false positives exists. The detection level for this activity is considered medium due to the balance between identifying malicious behavior and avoiding interference with valid operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of COM objects that can be abused to download files in PowerShell by CLSID",
      "answer": "In order to detect usage of COM objects that can be abused to download files in PowerShell by CLSID, you should examine PowerShell script block logging on Windows systems. Ensure that Script Block Logging is enabled to capture the execution of PowerShell commands. Specifically, look for instances where the script text contains any indications of using '[Type]::GetTypeFromCLSID(' followed by specific CLSID values known to be associated with file download capabilities. The CLSIDs to watch out for include '0002DF01-0000-0000-C000-000000000046', 'F6D90F16-9C73-11D3-B32E-00C04F990BB4', 'F5078F35-C551-11D3-89B9-0000F81FE221', '88d96a0a-f192-11d4-a65f-0040963251e5', 'AFBA6B42-5692-48EA-8141-DC517DCF0EF1', 'AFB40FFD-B609-40A3-9828-F88BBE11E4E3', '88d96a0b-f192-11d4-a65f-0040963251e5', and '2087c2f4-2cef-4953-a8ab-66779b670495' among others. It is important to approach detections with a mindset that there might be legitimate uses of these COM objects in the environment, hence the potential for false positives exists. The detection level for this activity is considered medium due to the balance between identifying malicious behavior and avoiding interference with valid operations."
    }
  },
  {
    "instruction": "Explain how should I detect the following: pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
    "context": "",
    "output": "In order to detect the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32), you should: monitor for process creations on Windows systems with a focus on two specific scenarios indicative of this attack technique. First, look for instances where the 'osk.exe', located in the C:\\Program Files\\Windows Media Player directory, is executed with either a High or System integrity level. Such an execution pattern is unusual for 'osk.exe' and hints at a potential misuse in the context of a UAC bypass attempt. Second, pay attention to the creation of 'cmd.exe' processes, where the parent command line is specifically launching 'eventvwr.msc' from 'mmc.exe' in the C:\\Windows\\system32 directory, also with High or System integrity levels. This particular parent-child relationship suggests a sophisticated method where attackers might leverage administrative tools to bypass User Account Control. The identification of these scenarios should be treated with a high level of suspicion due to the potential for false positives being unknown. This approach is critical for defending against manipulation of built-in Windows functionalities to elevate privileges without triggering standard UAC prompts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
      "answer": "In order to detect the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32), you should: monitor for process creations on Windows systems with a focus on two specific scenarios indicative of this attack technique. First, look for instances where the 'osk.exe', located in the C:\\Program Files\\Windows Media Player directory, is executed with either a High or System integrity level. Such an execution pattern is unusual for 'osk.exe' and hints at a potential misuse in the context of a UAC bypass attempt. Second, pay attention to the creation of 'cmd.exe' processes, where the parent command line is specifically launching 'eventvwr.msc' from 'mmc.exe' in the C:\\Windows\\system32 directory, also with High or System integrity levels. This particular parent-child relationship suggests a sophisticated method where attackers might leverage administrative tools to bypass User Account Control. The identification of these scenarios should be treated with a high level of suspicion due to the potential for false positives being unknown. This approach is critical for defending against manipulation of built-in Windows functionalities to elevate privileges without triggering standard UAC prompts."
    }
  },
  {
    "instruction": "Please help me detect the following: Use OfflineScannerShell.exe to execute mpclient.dll library in the current working directory",
    "context": "",
    "output": "Sure!\nIn order to use OfflineScannerShell.exe to execute mpclient.dll library in the current working directory, you should: focus on monitoring process creation events on Windows systems. Specifically, look for instances where a process named 'OfflineScannerShell.exe' is started. This executable is of particular interest when it is not being initiated from its default directory, which is 'C:\\Program Files\\Windows Defender\\Offline\\'. This scenario suggests an attempt to exploit Living-off-the-land binaries (LoLBAS), where legitimate system utilities are used for malicious purposes, such as executing arbitrary code. It is essential to confirm that the 'CurrentDirectory' from which 'OfflineScannerShell.exe' is executed is not null and differs from its legitimate path. This detection method is crucial in identifying suspicious activities that align with tactics and techniques like Execution and Defense Evasion, although the precise MITRE ATT&CK tags have not been explicitly mentioned. Be aware that there might be cases where this behavior does not necessarily indicate a security threat, hence unknown false positives could occur. The security alert severity for this activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Use OfflineScannerShell.exe to execute mpclient.dll library in the current working directory",
      "answer": "In order to use OfflineScannerShell.exe to execute mpclient.dll library in the current working directory, you should: focus on monitoring process creation events on Windows systems. Specifically, look for instances where a process named 'OfflineScannerShell.exe' is started. This executable is of particular interest when it is not being initiated from its default directory, which is 'C:\\Program Files\\Windows Defender\\Offline\\'. This scenario suggests an attempt to exploit Living-off-the-land binaries (LoLBAS), where legitimate system utilities are used for malicious purposes, such as executing arbitrary code. It is essential to confirm that the 'CurrentDirectory' from which 'OfflineScannerShell.exe' is executed is not null and differs from its legitimate path. This detection method is crucial in identifying suspicious activities that align with tactics and techniques like Execution and Defense Evasion, although the precise MITRE ATT&CK tags have not been explicitly mentioned. Be aware that there might be cases where this behavior does not necessarily indicate a security threat, hence unknown false positives could occur. The security alert severity for this activity is considered medium."
    }
  },
  {
    "instruction": "How to detect: Detect failed attempts to sign in to disabled accounts.",
    "context": "",
    "output": "In order to detect failed attempts to sign in to disabled accounts, you should monitor Azure sign-in logs for specific activities that indicate such attempts. Focus on analyzing sign-in logs (`signinlogs`) from Azure. Look for logs where the `ResultType` is `50057`, which indicates a sign-in attempt was made to an account that has been disabled. Additionally, these logs will have a `ResultDescription` explicitly stating \"User account is disabled. The account has been disabled by an administrator.\" Recognizing these signs is crucial for identifying unauthorized or potentially malicious attempts to access disabled accounts. It's noted that there might be unknown situations that could cause similar log entries without malicious intent; however, these instances are generally rare. The severity level for this type of activity is considered medium, implying it is of moderate importance and should be investigated accordingly. By focusing on these specific log entries, security teams can effectively spot and respond to unsuccessful sign-in attempts to accounts that have been administratively disabled, aiding in the protection against potential security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect failed attempts to sign in to disabled accounts.",
      "answer": "In order to detect failed attempts to sign in to disabled accounts, you should monitor Azure sign-in logs for specific activities that indicate such attempts. Focus on analyzing sign-in logs (`signinlogs`) from Azure. Look for logs where the `ResultType` is `50057`, which indicates a sign-in attempt was made to an account that has been disabled. Additionally, these logs will have a `ResultDescription` explicitly stating \"User account is disabled. The account has been disabled by an administrator.\" Recognizing these signs is crucial for identifying unauthorized or potentially malicious attempts to access disabled accounts. It's noted that there might be unknown situations that could cause similar log entries without malicious intent; however, these instances are generally rare. The severity level for this type of activity is considered medium, implying it is of moderate importance and should be investigated accordingly. By focusing on these specific log entries, security teams can effectively spot and respond to unsuccessful sign-in attempts to accounts that have been administratively disabled, aiding in the protection against potential security threats."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
    "context": "",
    "output": "In order to detect adversaries using Valid Accounts to interact with remote systems using Windows Remote Management (WinRM), thereby performing actions as the logged-on user, you should: focus on monitoring Windows Script Block Logging for instances where scripts contain the text 'Enable-PSRemoting '. This requires Script Block Logging to be enabled on the system. Such scripts are often used to set up PowerShell Remoting, which can be a method used by attackers to execute commands remotely under the guise of a legitimate user's account. However, it's important to consider that enabling PowerShell Remoting can also be part of legitimate administrative activities, so some alerts generated from this detection might be false positives. The sensitivity of this monitoring is rated at a medium level, indicating that while this behavior is not inherently malicious, it is significant enough to warrant investigation when detected.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
      "answer": "In order to detect adversaries using Valid Accounts to interact with remote systems using Windows Remote Management (WinRM), thereby performing actions as the logged-on user, you should: focus on monitoring Windows Script Block Logging for instances where scripts contain the text 'Enable-PSRemoting '. This requires Script Block Logging to be enabled on the system. Such scripts are often used to set up PowerShell Remoting, which can be a method used by attackers to execute commands remotely under the guise of a legitimate user's account. However, it's important to consider that enabling PowerShell Remoting can also be part of legitimate administrative activities, so some alerts generated from this detection might be false positives. The sensitivity of this monitoring is rated at a medium level, indicating that while this behavior is not inherently malicious, it is significant enough to warrant investigation when detected."
    }
  },
  {
    "instruction": "Please help me detect the following: when highly privileged delegated permissions are granted on behalf of all users",
    "context": "",
    "output": "Sure!\nIn order to detect when highly privileged delegated permissions are granted on behalf of all users, you should: Monitor the audit logs from Azure services for any activity involving the addition of delegated permission grants. This involves looking for events where the message includes the action of adding delegated permissions. It's important to scrutinize these events, especially because the assignment of highly privileged delegated permissions might indicate a potential compromise or abuse of the permissions model. Be aware that there are legitimate scenarios where these permissions are necessary for an application's function, so not every detection will indicate malicious intent. However, given the high level of access these permissions grant, it's crucial to investigate these events diligently to ensure they are justified and secure.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when highly privileged delegated permissions are granted on behalf of all users",
      "answer": "In order to detect when highly privileged delegated permissions are granted on behalf of all users, you should: Monitor the audit logs from Azure services for any activity involving the addition of delegated permission grants. This involves looking for events where the message includes the action of adding delegated permissions. It's important to scrutinize these events, especially because the assignment of highly privileged delegated permissions might indicate a potential compromise or abuse of the permissions model. Be aware that there are legitimate scenarios where these permissions are necessary for an application's function, so not every detection will indicate malicious intent. However, given the high level of access these permissions grant, it's crucial to investigate these events diligently to ensure they are justified and secure."
    }
  },
  {
    "instruction": "Explain how should I detect the following: addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder",
    "context": "",
    "output": "In order to detect the addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder, you should: \n\nMonitor the Windows firewall activity, particularly on Windows 10 and 11 platforms. Keep an eye out for event IDs 2004 and 2071, which indicate that a new rule has been added to the Windows Defender Firewall exception list. Specifically, focus on applications added to the exception list that are located within the '\\AppData\\' or '\\Temp\\' directories. These locations are often used by malicious software because they are user-accessible and frequently overlooked by users and some security programs.\n\nIt's important to exclude from alerts any changes that involve a predefined list of applications that might normally operate from those directories for benign reasons. These include well-known applications such as Microsoft Teams, Keybase, Messenger, and Opera Browser if they are exactly located in their usual application paths like '\\AppData\\local\\microsoft\\teams\\current\\teams.exe' for Teams, '\\AppData\\Local\\Keybase\\keybase.exe' for Keybase, etc.\n\nYou need to be cautious and consider any legitimate application that runs from the AppData user directory as a potential false positive. Such applications may also add firewall exceptions as part of their normal operations. Therefore, while maintaining a high level of alertness for suspicious activity associated with these event IDs and paths, careful investigation of each incident is advised to distinguish between legitimate and malicious activities.\n\nThis monitoring approach targets tactics associated with Persistence and Privilege Escalation, where attackers attempt to maintain their presence on a system and potentially elevate their control by making their malicious software harder to block by adding it to the firewall's exception list.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder",
      "answer": "In order to detect the addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder, you should: \n\nMonitor the Windows firewall activity, particularly on Windows 10 and 11 platforms. Keep an eye out for event IDs 2004 and 2071, which indicate that a new rule has been added to the Windows Defender Firewall exception list. Specifically, focus on applications added to the exception list that are located within the '\\AppData\\' or '\\Temp\\' directories. These locations are often used by malicious software because they are user-accessible and frequently overlooked by users and some security programs.\n\nIt's important to exclude from alerts any changes that involve a predefined list of applications that might normally operate from those directories for benign reasons. These include well-known applications such as Microsoft Teams, Keybase, Messenger, and Opera Browser if they are exactly located in their usual application paths like '\\AppData\\local\\microsoft\\teams\\current\\teams.exe' for Teams, '\\AppData\\Local\\Keybase\\keybase.exe' for Keybase, etc.\n\nYou need to be cautious and consider any legitimate application that runs from the AppData user directory as a potential false positive. Such applications may also add firewall exceptions as part of their normal operations. Therefore, while maintaining a high level of alertness for suspicious activity associated with these event IDs and paths, careful investigation of each incident is advised to distinguish between legitimate and malicious activities.\n\nThis monitoring approach targets tactics associated with Persistence and Privilege Escalation, where attackers attempt to maintain their presence on a system and potentially elevate their control by making their malicious software harder to block by adding it to the firewall's exception list."
    }
  },
  {
    "instruction": "How to detect: Identifies when an user or application modified the federation settings on the domain.",
    "context": "",
    "output": "In order to identify when a user or application modified the federation settings on the domain, you should: monitor Azure audit logs for any activity involving the modification of federation settings on a domain. Specifically, look out for activities with the display name \"Set federation settings on domain.\" This activity can indicate that someone has changed how authentication is handled within your Azure environment, which could potentially compromise security or facilitate unauthorized access to your resources. \n\nIt's important to note that there are legitimate reasons for modifying federation settings, such as administrative updates or maintenance tasks. Hence, not all instances of this activity are malicious. To distinguish between benign and potential security threats, consider the context of the modification, such as the user identity, user agent, and hostname involved in making the changes. Modifications from unfamiliar users or sources should be treated with suspicion and investigated further.\n\nAdjustments to federation settings authorized by known system administrators or through recognized patterns of behavior can be considered as false positives and thus can be exempted from monitoring to avoid unnecessary alerts. This approach allows for a more focused and efficient monitoring strategy, reducing the workload on security teams by filtering out expected changes from the overall alert stream.\n\nBy keeping an eye out for changes to federation settings in the identified manner and context, organizations can protect against unauthorized or malicious alterations that could undermine their security posture.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies when an user or application modified the federation settings on the domain.",
      "answer": "In order to identify when a user or application modified the federation settings on the domain, you should: monitor Azure audit logs for any activity involving the modification of federation settings on a domain. Specifically, look out for activities with the display name \"Set federation settings on domain.\" This activity can indicate that someone has changed how authentication is handled within your Azure environment, which could potentially compromise security or facilitate unauthorized access to your resources. \n\nIt's important to note that there are legitimate reasons for modifying federation settings, such as administrative updates or maintenance tasks. Hence, not all instances of this activity are malicious. To distinguish between benign and potential security threats, consider the context of the modification, such as the user identity, user agent, and hostname involved in making the changes. Modifications from unfamiliar users or sources should be treated with suspicion and investigated further.\n\nAdjustments to federation settings authorized by known system administrators or through recognized patterns of behavior can be considered as false positives and thus can be exempted from monitoring to avoid unnecessary alerts. This approach allows for a more focused and efficient monitoring strategy, reducing the workload on security teams by filtering out expected changes from the overall alert stream.\n\nBy keeping an eye out for changes to federation settings in the identified manner and context, organizations can protect against unauthorized or malicious alterations that could undermine their security posture."
    }
  },
  {
    "instruction": "How to detect: inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location",
    "context": "",
    "output": "In order to Detect inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location, you should: Focus on monitoring the creation of processes on Windows systems, specifically looking for instances where the 'cmd.exe' command-line interpreter is invoked, identified either by the process image ending with '\\cmd.exe' or having an 'OriginalFileName' attribute of 'Cmd.Exe'. Additionally, scrutinize command-line inputs for patterns that include the redirection symbol '>' followed by paths to commonly abused directories such as '\\Users\\Public\\', '%APPDATA%\\', '%TEMP%\\', '%TMP%\\', '%USERPROFILE%\\', 'C:\\Temp\\', 'C:\\Users\\Public\\', and 'C:\\Windows\\Temp\\'. Also, pay attention to commands that contain a space or quotation mark before the redirection symbol '>', suggesting an attempt to redirect output. Specifically, commands that redirect to a user's local AppData folder, indicated by the presence of 'C:\\Users\\' combined with '\\AppData\\Local\\', should be investigated. However, be aware that legitimate administrative tasks or third-party scripts might occasionally use similar patterns for benign purposes, potentially leading to false positives. This analysis is critical for pinpointing malicious activities where attackers attempt to discreetly execute or log commands in sensitive or commonly overlooked file locations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location",
      "answer": "In order to Detect inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location, you should: Focus on monitoring the creation of processes on Windows systems, specifically looking for instances where the 'cmd.exe' command-line interpreter is invoked, identified either by the process image ending with '\\cmd.exe' or having an 'OriginalFileName' attribute of 'Cmd.Exe'. Additionally, scrutinize command-line inputs for patterns that include the redirection symbol '>' followed by paths to commonly abused directories such as '\\Users\\Public\\', '%APPDATA%\\', '%TEMP%\\', '%TMP%\\', '%USERPROFILE%\\', 'C:\\Temp\\', 'C:\\Users\\Public\\', and 'C:\\Windows\\Temp\\'. Also, pay attention to commands that contain a space or quotation mark before the redirection symbol '>', suggesting an attempt to redirect output. Specifically, commands that redirect to a user's local AppData folder, indicated by the presence of 'C:\\Users\\' combined with '\\AppData\\Local\\', should be investigated. However, be aware that legitimate administrative tasks or third-party scripts might occasionally use similar patterns for benign purposes, potentially leading to false positives. This analysis is critical for pinpointing malicious activities where attackers attempt to discreetly execute or log commands in sensitive or commonly overlooked file locations."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of some potentially unwanted tools such as PsExec, Procdump, etc. (part of the Sysinternals suite) via the creation of the \"accepteula\" registry key.",
    "context": "",
    "output": "In order to detect the execution of some potentially unwanted tools such as PsExec, Procdump, etc. (part of the Sysinternals suite) via the creation of the \"accepteula\" registry key, you should monitor Windows registry addition events specifically looking for the creation of a key. Focus on registry add events where the EventType is \"CreateKey\" and the TargetObject contains specific substrings related to Sysinternals tools, including 'Active Directory Explorer', 'Handle', 'LiveKd', 'Process Explorer', 'ProcDump', 'PsExec', 'PsLoglist', 'PsPasswd', 'SDelete', and 'Sysinternals'. Additionally, it's important to check if the TargetObject ends with '\\EulaAccepted', indicating the acceptance of a User Agreement typically associated with first-time running these tools. However, be aware that there may be legitimate uses of these tools within your environment, and filtering may be required to distinguish between benign and malicious activity. This monitoring strategy aims to identify potential security incidents involving the misuse of system administration tools, which could be indicative of Discovery, Lateral Movement, or Persistence techniques, without explicitly mentioning these methodologies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of some potentially unwanted tools such as PsExec, Procdump, etc. (part of the Sysinternals suite) via the creation of the \"accepteula\" registry key.",
      "answer": "In order to detect the execution of some potentially unwanted tools such as PsExec, Procdump, etc. (part of the Sysinternals suite) via the creation of the \"accepteula\" registry key, you should monitor Windows registry addition events specifically looking for the creation of a key. Focus on registry add events where the EventType is \"CreateKey\" and the TargetObject contains specific substrings related to Sysinternals tools, including 'Active Directory Explorer', 'Handle', 'LiveKd', 'Process Explorer', 'ProcDump', 'PsExec', 'PsLoglist', 'PsPasswd', 'SDelete', and 'Sysinternals'. Additionally, it's important to check if the TargetObject ends with '\\EulaAccepted', indicating the acceptance of a User Agreement typically associated with first-time running these tools. However, be aware that there may be legitimate uses of these tools within your environment, and filtering may be required to distinguish between benign and malicious activity. This monitoring strategy aims to identify potential security incidents involving the misuse of system administration tools, which could be indicative of Discovery, Lateral Movement, or Persistence techniques, without explicitly mentioning these methodologies."
    }
  },
  {
    "instruction": "How to detect: service creation persistence used by the Goofy Guineapig backdoor",
    "context": "",
    "output": "In order to detect service creation persistence used by the Goofy Guineapig backdoor, you should focus on monitoring Windows system service logs for specific events that indicate potential malicious activity. Look for logs from the Service Control Manager with an Event ID of 7045. This event ID indicates a service was installed on the system. Pay special attention to any service named 'GoogleUpdate'. However, the critical aspect to look out for in identifying this specific backdoor is the path specified in the service's installation. If the ImagePath contains all the following sequences: 'rundll32', 'FileProtocolHandler', and includes a path that seems to be '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe', it suggests that the service being installed is not a legitimate Google Update service but is instead masquerading as one to gain persistence on the system. Given the specifics of the detection method, false positives are considered unlikely. The severity of this type of detection is marked as critical due to the potential impact of allowing backdoor access to persist on a compromised system through seemingly legitimate service creation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "service creation persistence used by the Goofy Guineapig backdoor",
      "answer": "In order to detect service creation persistence used by the Goofy Guineapig backdoor, you should focus on monitoring Windows system service logs for specific events that indicate potential malicious activity. Look for logs from the Service Control Manager with an Event ID of 7045. This event ID indicates a service was installed on the system. Pay special attention to any service named 'GoogleUpdate'. However, the critical aspect to look out for in identifying this specific backdoor is the path specified in the service's installation. If the ImagePath contains all the following sequences: 'rundll32', 'FileProtocolHandler', and includes a path that seems to be '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe', it suggests that the service being installed is not a legitimate Google Update service but is instead masquerading as one to gain persistence on the system. Given the specifics of the detection method, false positives are considered unlikely. The severity of this type of detection is marked as critical due to the potential impact of allowing backdoor access to persist on a compromised system through seemingly legitimate service creation."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute",
    "context": "",
    "output": "In order to detect the use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute, you should monitor for the creation of processes on Windows systems where the new process image name ends with '\\wlrmdr.exe' or the OriginalFileName is 'WLRMNDR.EXE'. Additionally, look for command line arguments that contain all of the following: '-s ', '-f ', '-t ', '-m ', '-a ', and particularly '-u '. It is crucial to also check for instances where these processes are spawned by a parent process ending with '\\wlrmdr.exe'. However, make an exception for processes that have 'C:\\Windows\\System32\\winlogon.exe' as their parent image to minimize false positives and ignore cases where the parent image information is not available. This monitoring helps in identifying potentially malicious use of Wlrmdr.exe, which could be indicative of an attack attempt exploiting ShellExecute with specific parameters to perform unauthorized actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute",
      "answer": "In order to detect the use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute, you should monitor for the creation of processes on Windows systems where the new process image name ends with '\\wlrmdr.exe' or the OriginalFileName is 'WLRMNDR.EXE'. Additionally, look for command line arguments that contain all of the following: '-s ', '-f ', '-t ', '-m ', '-a ', and particularly '-u '. It is crucial to also check for instances where these processes are spawned by a parent process ending with '\\wlrmdr.exe'. However, make an exception for processes that have 'C:\\Windows\\System32\\winlogon.exe' as their parent image to minimize false positives and ignore cases where the parent image information is not available. This monitoring helps in identifying potentially malicious use of Wlrmdr.exe, which could be indicative of an attack attempt exploiting ShellExecute with specific parameters to perform unauthorized actions."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of known compromised version of 3CXDesktopApp",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of known compromised version of 3CXDesktopApp, you should monitor process creation events on Windows systems for specific indicators of compromise. These indicators include a variety of cryptographic hashes representing known malicious versions of the 3CXDesktopApp software. Specifically, look out for process creation events where the hash of the executable matches any in a list that includes both SHA256, SHA1, and MD5 hashes. Additionally, monitor for processes that have filenames, image paths, or product names matching '3CXDesktopApp' or where the file version contains '18.12.', which are indicative of potentially compromised software versions.\n\nBe aware that legitimate usage of the 3CXDesktopApp may sometimes trigger these alerts; thus, it's crucial to validate potential incidents carefully to distinguish between malicious and benign activities. The detection level for these indicators is considered high due to the specificity and potential impact of executing a compromised application version.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of known compromised version of 3CXDesktopApp",
      "answer": "In order to detect execution of known compromised version of 3CXDesktopApp, you should monitor process creation events on Windows systems for specific indicators of compromise. These indicators include a variety of cryptographic hashes representing known malicious versions of the 3CXDesktopApp software. Specifically, look out for process creation events where the hash of the executable matches any in a list that includes both SHA256, SHA1, and MD5 hashes. Additionally, monitor for processes that have filenames, image paths, or product names matching '3CXDesktopApp' or where the file version contains '18.12.', which are indicative of potentially compromised software versions.\n\nBe aware that legitimate usage of the 3CXDesktopApp may sometimes trigger these alerts; thus, it's crucial to validate potential incidents carefully to distinguish between malicious and benign activities. The detection level for these indicators is considered high due to the specificity and potential impact of executing a compromised application version."
    }
  },
  {
    "instruction": "How can I detect: transfer lock was removed from a Route 53 domain. It is recommended to refrain from performing this action unless intending to transfer the domain to a different registrar.",
    "context": "",
    "output": "In order to detect when a transfer lock was removed from a Route 53 domain, which is not advised unless there is an intention to transfer the domain to a different registrar, you should monitor AWS CloudTrail logs for any activity related to the disabling of a domain transfer lock. Specifically, look for events where the source is identified as route53.amazonaws.com with the event name DisableDomainTransferLock. It is crucial to consider that sometimes a domain transfer lock may be disabled legitimately by a system or network administrator. Therefore, verify if the user identity, user agent, and/or hostname that initiated the action is recognized and should have the authority to make such changes within your environment. Any activity conducted by unfamiliar users or systems should be scrutinized. If certain activities are known and expected, causing false alarms, they can be excluded to avoid unnecessary alerts. This approach is established with a low level of alarm due to the potential for legitimate administrative actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "transfer lock was removed from a Route 53 domain. It is recommended to refrain from performing this action unless intending to transfer the domain to a different registrar.",
      "answer": "In order to detect when a transfer lock was removed from a Route 53 domain, which is not advised unless there is an intention to transfer the domain to a different registrar, you should monitor AWS CloudTrail logs for any activity related to the disabling of a domain transfer lock. Specifically, look for events where the source is identified as route53.amazonaws.com with the event name DisableDomainTransferLock. It is crucial to consider that sometimes a domain transfer lock may be disabled legitimately by a system or network administrator. Therefore, verify if the user identity, user agent, and/or hostname that initiated the action is recognized and should have the authority to make such changes within your environment. Any activity conducted by unfamiliar users or systems should be scrutinized. If certain activities are known and expected, causing false alarms, they can be excluded to avoid unnecessary alerts. This approach is established with a low level of alarm due to the potential for legitimate administrative actions."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files",
    "context": "",
    "output": "Certainly!\n\nIn order to detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to processes that end with '\\cmstp.exe' or have the original filename 'CMSTP.EXE'. Moreover, scrutinize the command line arguments for specific flags, including '/s', '-s', '/au', '-au', '/ni', and '-ni', which are indicative of silent installation attempts and automatic updates without user notification or consent. It's essential to gather and review data fields such as the computer name, user account, and the full command line used in the execution to effectively identify malicious activities. However, be cautious of false positives, which may arise from legitimate uses of the cmstp.exe utility by authorized users. This method is tagged with high importance due to its relevance in detecting potential misuse of system utilities to install malware or unauthorized configurations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files",
      "answer": "In order to detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to processes that end with '\\cmstp.exe' or have the original filename 'CMSTP.EXE'. Moreover, scrutinize the command line arguments for specific flags, including '/s', '-s', '/au', '-au', '/ni', and '-ni', which are indicative of silent installation attempts and automatic updates without user notification or consent. It's essential to gather and review data fields such as the computer name, user account, and the full command line used in the execution to effectively identify malicious activities. However, be cautious of false positives, which may arise from legitimate uses of the cmstp.exe utility by authorized users. This method is tagged with high importance due to its relevance in detecting potential misuse of system utilities to install malware or unauthorized configurations."
    }
  },
  {
    "instruction": "How can I detect: potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB",
    "context": "",
    "output": "In order to detect potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB, you should monitor DNS query logs for requests to specific domains that have been identified as indicators of compromise. These domains include 'addatamarket.net', 'ans7tv.net', 'anstv.net', 'backuprabbit.com', 'businessvideonews.com', 'cloudsponcer.com', 'datamarketplace.net', 'growthtransport.com', 'mobilegamerstats.com', 'snoweeanalytics.com', 'tagclick-cdn.com', 'topographyupdates.com', 'unlimitedteacup.com', 'virtuallaughing.com', and 'web-trackers.com'. Any DNS queries to these domains should be considered suspicious and warrant further investigation, as they could signal an ongoing attack or compromise involving iOS devices. This monitoring is crucial for identifying potential security breaches early on, allowing for a timely response to mitigate any damage. Note that while this detection has a high importance level, there may be unknown false positives, and not all detections may signify malicious activity. However, given these domains' association with sophisticated attacks, any hits on these indicators should be taken seriously and investigated accordingly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB",
      "answer": "In order to detect potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB, you should monitor DNS query logs for requests to specific domains that have been identified as indicators of compromise. These domains include 'addatamarket.net', 'ans7tv.net', 'anstv.net', 'backuprabbit.com', 'businessvideonews.com', 'cloudsponcer.com', 'datamarketplace.net', 'growthtransport.com', 'mobilegamerstats.com', 'snoweeanalytics.com', 'tagclick-cdn.com', 'topographyupdates.com', 'unlimitedteacup.com', 'virtuallaughing.com', and 'web-trackers.com'. Any DNS queries to these domains should be considered suspicious and warrant further investigation, as they could signal an ongoing attack or compromise involving iOS devices. This monitoring is crucial for identifying potential security breaches early on, allowing for a timely response to mitigate any damage. Note that while this detection has a high importance level, there may be unknown false positives, and not all detections may signify malicious activity. However, given these domains' association with sophisticated attacks, any hits on these indicators should be taken seriously and investigated accordingly."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.",
    "context": "",
    "output": "In order to detect the execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti, you should monitor the process creation logs on Windows systems. Specifically, look for processes where the original filename was \"megasync.exe\" but the actual image path does not end with \"\\megasync.exe\". This indicates that the executable, typically associated with the legitimate MegaSync application, has been renamed, a tactic commonly observed in ransomware attacks to evade detection. Be aware of potential false positives, which may arise from software that includes MegaSync functionality under a different name or from administrators who have legitimate reasons to rename the MegaSync executable. This detection strategy is of high importance due to its association with significant ransomware threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.",
      "answer": "In order to detect the execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti, you should monitor the process creation logs on Windows systems. Specifically, look for processes where the original filename was \"megasync.exe\" but the actual image path does not end with \"\\megasync.exe\". This indicates that the executable, typically associated with the legitimate MegaSync application, has been renamed, a tactic commonly observed in ransomware attacks to evade detection. Be aware of potential false positives, which may arise from software that includes MegaSync functionality under a different name or from administrators who have legitimate reasons to rename the MegaSync executable. This detection strategy is of high importance due to its association with significant ransomware threats."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential suspicious run-only executions compiled using OSACompile",
    "context": "",
    "output": "In order to detect potential suspicious run-only executions compiled using OSACompile, you should monitor process creation logs on macOS systems for instances where the command line contains 'osacompile', along with the flags ' -x ' and ' -e '. This specific combination of command and flags indicates an attempt to compile scripts in a manner that could be utilized for obfuscation or malicious purposes, suggesting a run-only execution which is harder to analyze and reverse-engineer. Pay close attention to the CommandLine field in the logs to catch such activities. Be aware that due to the nature of the detection, there might be instances where legitimate use triggers an alert, although such false positives are not specifically known. The severity level for this activity is considered high, underscoring the importance of monitoring for these specific command line parameters.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential suspicious run-only executions compiled using OSACompile",
      "answer": "In order to detect potential suspicious run-only executions compiled using OSACompile, you should monitor process creation logs on macOS systems for instances where the command line contains 'osacompile', along with the flags ' -x ' and ' -e '. This specific combination of command and flags indicates an attempt to compile scripts in a manner that could be utilized for obfuscation or malicious purposes, suggesting a run-only execution which is harder to analyze and reverse-engineer. Pay close attention to the CommandLine field in the logs to catch such activities. Be aware that due to the nature of the detection, there might be instances where legitimate use triggers an alert, although such false positives are not specifically known. The severity level for this activity is considered high, underscoring the importance of monitoring for these specific command line parameters."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon process or a process located in a suspicious directory",
    "context": "",
    "output": "In order to detect the creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon process or a process located in a suspicious directory, you should monitor Windows file events for the creation of files ending with \"\\ntds.dit\". Additionally, pay attention to the execution of specific processes that could be involved in unauthorized creation or manipulation of such files. These processes include 'cmd.exe', 'cscript.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', 'regsvr32.exe', 'rundll32.exe', 'wscript.exe', 'wsl.exe', and 'wt.exe'. It's particularly noteworthy when these processes are executed from unusual paths such as directories within '\\AppData\\', '\\Temp\\', '\\Public\\', and '\\PerfLogs\\'. This behavior is indicative of potential malicious activity, as normal operations do not typically involve direct interaction with the \"ntds.dit\" file by these executables, especially from the specified directory paths. This monitoring strategy is aimed at identifying potentially unauthorized and malicious attempts to access or manipulate the Active Directory Database, thereby enhancing the detection of advanced attacks targeting domain credentials and network security infrastructure.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon process or a process located in a suspicious directory",
      "answer": "In order to detect the creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon process or a process located in a suspicious directory, you should monitor Windows file events for the creation of files ending with \"\\ntds.dit\". Additionally, pay attention to the execution of specific processes that could be involved in unauthorized creation or manipulation of such files. These processes include 'cmd.exe', 'cscript.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', 'regsvr32.exe', 'rundll32.exe', 'wscript.exe', 'wsl.exe', and 'wt.exe'. It's particularly noteworthy when these processes are executed from unusual paths such as directories within '\\AppData\\', '\\Temp\\', '\\Public\\', and '\\PerfLogs\\'. This behavior is indicative of potential malicious activity, as normal operations do not typically involve direct interaction with the \"ntds.dit\" file by these executables, especially from the specified directory paths. This monitoring strategy is aimed at identifying potentially unauthorized and malicious attempts to access or manipulate the Active Directory Database, thereby enhancing the detection of advanced attacks targeting domain credentials and network security infrastructure."
    }
  },
  {
    "instruction": "How to detect: events in which a history file gets deleted, e.g. the ~/bash_history to remove traces of malicious activity",
    "context": "",
    "output": "In order to detect events in which a history file gets deleted, e.g. the ~/bash_history to remove traces of malicious activity, you should: focus on monitoring process creation logs in Linux environments for executions of commands that end with '/rm', '/unlink', or '/shred'. Additionally, pay special attention to command line inputs that contain references to either '/.bash_history' or '/.zsh_history', or that end with '_history', '.history', or 'zhistory'. These patterns are indicative of attempts to delete history files, which can be a sign of an attacker trying to erase evidence of their presence or actions on a system. It\u2019s important to note that there could be false positives, such as legitimate administration activities that involve deleting history files for housekeeping purposes. Nonetheless, due to the high level of risk associated with the deletion of history files to cover malicious activities, such detections should be treated with significant caution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "events in which a history file gets deleted, e.g. the ~/bash_history to remove traces of malicious activity",
      "answer": "In order to detect events in which a history file gets deleted, e.g. the ~/bash_history to remove traces of malicious activity, you should: focus on monitoring process creation logs in Linux environments for executions of commands that end with '/rm', '/unlink', or '/shred'. Additionally, pay special attention to command line inputs that contain references to either '/.bash_history' or '/.zsh_history', or that end with '_history', '.history', or 'zhistory'. These patterns are indicative of attempts to delete history files, which can be a sign of an attacker trying to erase evidence of their presence or actions on a system. It\u2019s important to note that there could be false positives, such as legitimate administration activities that involve deleting history files for housekeeping purposes. Nonetheless, due to the high level of risk associated with the deletion of history files to cover malicious activities, such detections should be treated with significant caution."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records",
    "context": "",
    "output": "In order to detect suspicious PowerShell download cradle using nslookup, which utilizes nslookup to extract payloads from DNS records, you should: Monitor Windows PowerShell classic start events for indications of PowerShell being used in conjunction with the 'nslookup' command. Specifically, look for instances where the 'HostApplication' field contains both 'powershell' and 'nslookup', indicating PowerShell is being used to run 'nslookup'. Additionally, watch for arguments '-q=txt' or '-querytype=txt' within the same command, as these are used to query text records from DNS - a technique often exploited to retrieve malicious payloads. It's crucial to scrutinize such activities due to their potential misuse in cyber attacks, although it's important to consider that there could be benign use cases that might generate false positives. The importance of vigilance with this medium-level threat cannot be overstated, given its association with unconventional methods of executing malicious downloads.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records",
      "answer": "In order to detect suspicious PowerShell download cradle using nslookup, which utilizes nslookup to extract payloads from DNS records, you should: Monitor Windows PowerShell classic start events for indications of PowerShell being used in conjunction with the 'nslookup' command. Specifically, look for instances where the 'HostApplication' field contains both 'powershell' and 'nslookup', indicating PowerShell is being used to run 'nslookup'. Additionally, watch for arguments '-q=txt' or '-querytype=txt' within the same command, as these are used to query text records from DNS - a technique often exploited to retrieve malicious payloads. It's crucial to scrutinize such activities due to their potential misuse in cyber attacks, although it's important to consider that there could be benign use cases that might generate false positives. The importance of vigilance with this medium-level threat cannot be overstated, given its association with unconventional methods of executing malicious downloads."
    }
  },
  {
    "instruction": "How can I detect: creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself.\nHack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver and removes it afterwards.\n",
    "context": "",
    "output": "In order to detect the creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself, where hack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver, and removes it afterwards, you should: focus on monitoring file events within Windows environments. Specifically, look for any file creation activities where the target filename includes '\\PROCEXP' or ends with '.sys'. However, it's important to exclude any events where the process creating these files is 'procexp.exe' or 'procexp64.exe', as these are legitimate Process Explorer processes. Moreover, be aware that there might be some false positives, especially in cases where legitimate binaries of the Process Explorer have been renamed. This approach is crucial in identifying malicious activities associated with privilege escalation tactics, where adversaries might attempt to exploit the capabilities of trusted system drivers. Identifying such activities requires high vigilance due to the sophisticated nature of the attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself.\nHack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver and removes it afterwards.\n",
      "answer": "In order to detect the creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself, where hack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver, and removes it afterwards, you should: focus on monitoring file events within Windows environments. Specifically, look for any file creation activities where the target filename includes '\\PROCEXP' or ends with '.sys'. However, it's important to exclude any events where the process creating these files is 'procexp.exe' or 'procexp64.exe', as these are legitimate Process Explorer processes. Moreover, be aware that there might be some false positives, especially in cases where legitimate binaries of the Process Explorer have been renamed. This approach is crucial in identifying malicious activities associated with privilege escalation tactics, where adversaries might attempt to exploit the capabilities of trusted system drivers. Identifying such activities requires high vigilance due to the sophisticated nature of the attack."
    }
  },
  {
    "instruction": "Please help me detect the following: triggering of AMSI by Windows Defender.",
    "context": "",
    "output": "Sure!\nIn order to detect triggering of AMSI by Windows Defender, you should: Monitor Windows Defender logs specifically for event ID 1116, which indicates that the antimalware platform detected malware or other potentially unwanted software. Focus particularly on alerts generated by the Antimalware Scan Interface (AMSI). This method is highly reliable with unlikely chances of false positives. The associated tactics and techniques involved in this monitoring are related to Initial Access and Execution, as the detection of AMSI triggering by Windows Defender could indicate attempts to execute malicious scripts or malware on the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "triggering of AMSI by Windows Defender.",
      "answer": "In order to detect triggering of AMSI by Windows Defender, you should: Monitor Windows Defender logs specifically for event ID 1116, which indicates that the antimalware platform detected malware or other potentially unwanted software. Focus particularly on alerts generated by the Antimalware Scan Interface (AMSI). This method is highly reliable with unlikely chances of false positives. The associated tactics and techniques involved in this monitoring are related to Initial Access and Execution, as the detection of AMSI triggering by Windows Defender could indicate attempts to execute malicious scripts or malware on the system."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation.\nScreen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations\n",
    "context": "",
    "output": "In order to detect adversaries who attempt to take screen captures of the desktop to gather information over the course of an operation, where screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations, you should focus on monitoring PowerShell script activity within the Windows environment. Specifically, ensure that Script Block Logging is enabled, as it plays a crucial role in identifying potentially malicious activities. Look for PowerShell scripts that include the method '.CopyFromScreen' in their text. This method is a tell-tale sign that a script is attempting to capture the screen, which is often associated with adversarial behavior aiming to collect sensitive information post system compromise. Be aware that there are scenarios where this detection might flag benign activities, although such cases are currently unknown, indicating the rule's relevance and specificity towards malicious conduct. This detection strategy is especially critical, given its medium-level prioritization, in the broader context of defending against information gathering tactics and techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation.\nScreen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations\n",
      "answer": "In order to detect adversaries who attempt to take screen captures of the desktop to gather information over the course of an operation, where screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations, you should focus on monitoring PowerShell script activity within the Windows environment. Specifically, ensure that Script Block Logging is enabled, as it plays a crucial role in identifying potentially malicious activities. Look for PowerShell scripts that include the method '.CopyFromScreen' in their text. This method is a tell-tale sign that a script is attempting to capture the screen, which is often associated with adversarial behavior aiming to collect sensitive information post system compromise. Be aware that there are scenarios where this detection might flag benign activities, although such cases are currently unknown, indicating the rule's relevance and specificity towards malicious conduct. This detection strategy is especially critical, given its medium-level prioritization, in the broader context of defending against information gathering tactics and techniques."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential DLL injection and execution using \"Tracker.exe\"",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential DLL injection and execution using \"Tracker.exe\", you should monitor for process creation events on Windows operating systems, focusing specifically on instances where the process image name ends with '\\tracker.exe' and the process description is 'Tracker'. Additionally, observe any command line arguments that contain ' /d ' or ' /c ', as these are indicative of commands that could be involved in malicious activity.\n\nHowever, it's crucial to exclude certain benign activities from your detection to avoid false positives. Specifically, processes that have command line arguments containing ' /ERRORREPORT:PROMPT ' should be considered safe as this parameter is often associated with legitimate development tools. Moreover, any process that is a child of 'MSBuild.exe' located in the Visual Studio directories should also be excluded. This can be identified by the parent image ending with '\\Msbuild\\Current\\Bin\\MSBuild.exe' or '\\Msbuild\\Current\\Bin\\amd64\\MSBuild.exe', as these are legitimate uses of Tracker.exe for build and compilation tasks within Microsoft Visual Studio, not malicious DLL injection or execution.\n\nBy focusing on these selection criteria and excluding the specified false positive conditions, you can effectively identify potential malicious activity involving DLL injection and execution attempts using Tracker.exe without overwhelming your security teams with incorrect alerts. This monitoring will target tactics and techniques related to execution and defense evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL injection and execution using \"Tracker.exe\"",
      "answer": "In order to detect potential DLL injection and execution using \"Tracker.exe\", you should monitor for process creation events on Windows operating systems, focusing specifically on instances where the process image name ends with '\\tracker.exe' and the process description is 'Tracker'. Additionally, observe any command line arguments that contain ' /d ' or ' /c ', as these are indicative of commands that could be involved in malicious activity.\n\nHowever, it's crucial to exclude certain benign activities from your detection to avoid false positives. Specifically, processes that have command line arguments containing ' /ERRORREPORT:PROMPT ' should be considered safe as this parameter is often associated with legitimate development tools. Moreover, any process that is a child of 'MSBuild.exe' located in the Visual Studio directories should also be excluded. This can be identified by the parent image ending with '\\Msbuild\\Current\\Bin\\MSBuild.exe' or '\\Msbuild\\Current\\Bin\\amd64\\MSBuild.exe', as these are legitimate uses of Tracker.exe for build and compilation tasks within Microsoft Visual Studio, not malicious DLL injection or execution.\n\nBy focusing on these selection criteria and excluding the specified false positive conditions, you can effectively identify potential malicious activity involving DLL injection and execution attempts using Tracker.exe without overwhelming your security teams with incorrect alerts. This monitoring will target tactics and techniques related to execution and defense evasion."
    }
  },
  {
    "instruction": "Please help me detect the following: system process (i.e. located in system32, syswow64, etc.) loads a DLL from a suspicious location such as C:\\Users\\Public",
    "context": "",
    "output": "Sure!\nIn order to detect when a system process (i.e. located in system32, syswow64, etc.) loads a DLL from a suspicious location such as C:\\Users\\Public, you should monitor Windows system processes for instances where a process initially started from the C:\\Windows\\ directory attempts to load a Dynamic Link Library (DLL) from potentially suspicious locations. These suspicious locations include directories that are not typical for system process interactions, such as C:\\Users\\Public\\ and C:\\PerfLogs\\. It is crucial to focus on these loading actions as they may indicate compromised system integrity or unauthorized modifications. This observation relies on examining the references to DLL files within logs related to image loading activities. Given the high importance of catching such anomalies due to their possible implications on system security, any detections where system processes load DLLs from these unusual paths should be treated with a high level of scrutiny. However, it is also recognized that there might be instances where the detection could flag legitimate activities as suspicious. Regardless, due to the potential severity of the threat, such detections are considered of high importance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "system process (i.e. located in system32, syswow64, etc.) loads a DLL from a suspicious location such as C:\\Users\\Public",
      "answer": "In order to detect when a system process (i.e. located in system32, syswow64, etc.) loads a DLL from a suspicious location such as C:\\Users\\Public, you should monitor Windows system processes for instances where a process initially started from the C:\\Windows\\ directory attempts to load a Dynamic Link Library (DLL) from potentially suspicious locations. These suspicious locations include directories that are not typical for system process interactions, such as C:\\Users\\Public\\ and C:\\PerfLogs\\. It is crucial to focus on these loading actions as they may indicate compromised system integrity or unauthorized modifications. This observation relies on examining the references to DLL files within logs related to image loading activities. Given the high importance of catching such anomalies due to their possible implications on system security, any detections where system processes load DLLs from these unusual paths should be treated with a high level of scrutiny. However, it is also recognized that there might be instances where the detection could flag legitimate activities as suspicious. Regardless, due to the potential severity of the threat, such detections are considered of high importance."
    }
  },
  {
    "instruction": "Please help me detect the following: attempts to create a DLL file to a known desktop application dependencies folder such as Slack, Teams or OneDrive and by an unusual process. This may indicate an attempt to load a malicious module via DLL search order hijacking.",
    "context": "",
    "output": "Sure!\nIn order to detect attempts to create a DLL file to a known desktop application dependencies folder such as Slack, Teams, or OneDrive by an unusual process, which may indicate an attempt to load a malicious module via DLL search order hijacking, you should: Monitor Windows file events for the creation of DLL files in specific user folders, particularly within the AppData directory that are associated with popular applications like Microsoft OneDrive, Microsoft Teams, Slack, and Visual Studio Code. Key processes to watch include Word, Excel, PowerPoint, Access, Publisher, Filter Loader, Command Prompt, Certutil, HTML Application Host, CScript, WScript, Curl, PowerShell, and PowerShell Core that are trying to create '.dll' files in these directories. Be cautious of any such activities not initiated by 'cmd.exe' when examining file paths that include user directories, the AppData folder, and particularly paths involving Microsoft OneDrive - to reduce false positives, especially if the file paths also contain specific API sets like 'api-ms-win-core-'. This monitoring is essential to spot tactics and techniques associated with initial access attempts and defense evasion, particularly those linked with spearphishing for malicious attachment delivery (T1566, T1566.001) and the hijacking of DLL search order to evade defenses (T1574, T1574.001).",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to create a DLL file to a known desktop application dependencies folder such as Slack, Teams or OneDrive and by an unusual process. This may indicate an attempt to load a malicious module via DLL search order hijacking.",
      "answer": "In order to detect attempts to create a DLL file to a known desktop application dependencies folder such as Slack, Teams, or OneDrive by an unusual process, which may indicate an attempt to load a malicious module via DLL search order hijacking, you should: Monitor Windows file events for the creation of DLL files in specific user folders, particularly within the AppData directory that are associated with popular applications like Microsoft OneDrive, Microsoft Teams, Slack, and Visual Studio Code. Key processes to watch include Word, Excel, PowerPoint, Access, Publisher, Filter Loader, Command Prompt, Certutil, HTML Application Host, CScript, WScript, Curl, PowerShell, and PowerShell Core that are trying to create '.dll' files in these directories. Be cautious of any such activities not initiated by 'cmd.exe' when examining file paths that include user directories, the AppData folder, and particularly paths involving Microsoft OneDrive - to reduce false positives, especially if the file paths also contain specific API sets like 'api-ms-win-core-'. This monitoring is essential to spot tactics and techniques associated with initial access attempts and defense evasion, particularly those linked with spearphishing for malicious attachment delivery (T1566, T1566.001) and the hijacking of DLL search order to evade defenses (T1574, T1574.001)."
    }
  },
  {
    "instruction": "How can I detect: execition of commands and binaries from the context of \"forfiles.exe\". This can be used as a LOLBIN in order to bypass application whitelisting.",
    "context": "",
    "output": "In order to detect execution of commands and binaries from the context of \"forfiles.exe\", which can be used as a LOLBIN (Living Off The Land Binaries) in order to bypass application whitelisting, you should: Monitor Windows process creation logs for instances where \"forfiles.exe\" is used as the parent image. Specifically, look for command lines that include switches such as '/c', '-c' (for executing commands), '/p', '-p' (which specify the path to operate on), and '/m', '-m' (used to match files). However, you must exclude detections where the process image ends with '\\cmd.exe' and the command line contains both 'xcopy' and 'cmd /c del', as these are considered common legitimate uses that could result in false positives. This approach is pertinent for identifying potentially malicious activity wherein attackers utilize built-in system tools to execute commands that may evade detection by security solutions relying on blacklists of known-bad executables.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execition of commands and binaries from the context of \"forfiles.exe\". This can be used as a LOLBIN in order to bypass application whitelisting.",
      "answer": "In order to detect execution of commands and binaries from the context of \"forfiles.exe\", which can be used as a LOLBIN (Living Off The Land Binaries) in order to bypass application whitelisting, you should: Monitor Windows process creation logs for instances where \"forfiles.exe\" is used as the parent image. Specifically, look for command lines that include switches such as '/c', '-c' (for executing commands), '/p', '-p' (which specify the path to operate on), and '/m', '-m' (used to match files). However, you must exclude detections where the process image ends with '\\cmd.exe' and the command line contains both 'xcopy' and 'cmd /c del', as these are considered common legitimate uses that could result in false positives. This approach is pertinent for identifying potentially malicious activity wherein attackers utilize built-in system tools to execute commands that may evade detection by security solutions relying on blacklists of known-bad executables."
    }
  },
  {
    "instruction": "Explain how should I detect the following: that a powershell code is written to the registry as a service.",
    "context": "",
    "output": "In order to detect that a PowerShell code is written to the registry as a service, you should focus on monitoring registry set events on Windows products. Specifically, look out for events where the EventType is marked as SetValue. These events are indicative of changes being made to the registry values. Next, narrow down the observations to where the TargetObject contains the path '\\Services\\' and ends with '\\ImagePath'. This specific pathway is crucial as it commonly denotes service-related configurations in Windows registries.\n\nFurther refine your detection by filtering for the inclusion of 'powershell' or 'pwsh' in the Details field of the registry set event. This detail is critical because the presence of these terms suggests that PowerShell code, which is a powerful scripting language used for automation and configuration management, is being registered as a part of a service's configuration. This could potentially be malicious if the PowerShell is being used to execute unauthorized commands or scripts.\n\nIt is important to note that while this detection mechanism is high in its threat level due to the potential misuse of PowerShell within service configurations, there may still be unknown false positives. These are instances where legitimate uses of PowerShell in services could inadvertently trigger the detection criteria. Hence, while this method is effective in identifying possible malicious activity associated with PowerShell code written to the registry as a service, each alert should be investigated to confirm the nature of the activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "that a powershell code is written to the registry as a service.",
      "answer": "In order to detect that a PowerShell code is written to the registry as a service, you should focus on monitoring registry set events on Windows products. Specifically, look out for events where the EventType is marked as SetValue. These events are indicative of changes being made to the registry values. Next, narrow down the observations to where the TargetObject contains the path '\\Services\\' and ends with '\\ImagePath'. This specific pathway is crucial as it commonly denotes service-related configurations in Windows registries.\n\nFurther refine your detection by filtering for the inclusion of 'powershell' or 'pwsh' in the Details field of the registry set event. This detail is critical because the presence of these terms suggests that PowerShell code, which is a powerful scripting language used for automation and configuration management, is being registered as a part of a service's configuration. This could potentially be malicious if the PowerShell is being used to execute unauthorized commands or scripts.\n\nIt is important to note that while this detection mechanism is high in its threat level due to the potential misuse of PowerShell within service configurations, there may still be unknown false positives. These are instances where legitimate uses of PowerShell in services could inadvertently trigger the detection criteria. Hence, while this method is effective in identifying possible malicious activity associated with PowerShell code written to the registry as a service, each alert should be investigated to confirm the nature of the activity."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.\nAdversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.\nWindows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services\n",
    "context": "",
    "output": "In order to detect adversaries executing their own malicious payloads by hijacking the Registry entries used by services, you should monitor the process creation logs on Windows systems. Focus on tracking the usage of the \"reg.exe\" application, specifically when it is involved in adding or modifying the ImagePath for services under \"SYSTEM\\CurrentControlSet\\Services\\\" in the registry. Detection criteria include command lines that end with \"\\reg.exe\" and contain the strings \"add \", \"SYSTEM\\CurrentControlSet\\Services\\\", and \" ImagePath \", along with optional flags \" /d \" or \" -d \" which are used to specify the data for a registry value. This detection helps identify attempts to use Registry modifications for redirecting service executables to malicious files, leveraging potential flaws in registry permissions. Be aware that some activity might generate false positives due to the dynamic nature of registry operations and should be investigated accordingly. The severity level for this detection strategy is considered medium, highlighting its importance in identifying service hijacking attempts as part of broader tactics such as Persistence, Privilege Escalation, and Execution, but also recognizing that not all modifications may be malicious in nature.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.\nAdversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.\nWindows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services\n",
      "answer": "In order to detect adversaries executing their own malicious payloads by hijacking the Registry entries used by services, you should monitor the process creation logs on Windows systems. Focus on tracking the usage of the \"reg.exe\" application, specifically when it is involved in adding or modifying the ImagePath for services under \"SYSTEM\\CurrentControlSet\\Services\\\" in the registry. Detection criteria include command lines that end with \"\\reg.exe\" and contain the strings \"add \", \"SYSTEM\\CurrentControlSet\\Services\\\", and \" ImagePath \", along with optional flags \" /d \" or \" -d \" which are used to specify the data for a registry value. This detection helps identify attempts to use Registry modifications for redirecting service executables to malicious files, leveraging potential flaws in registry permissions. Be aware that some activity might generate false positives due to the dynamic nature of registry operations and should be investigated accordingly. The severity level for this detection strategy is considered medium, highlighting its importance in identifying service hijacking attempts as part of broader tactics such as Persistence, Privilege Escalation, and Execution, but also recognizing that not all modifications may be malicious in nature."
    }
  },
  {
    "instruction": "Can you explain how to detect: command line parameters or strings often used by crypto miners",
    "context": "",
    "output": "Certainly!\n\nIn order to detect command line parameters or strings often used by crypto miners, you should focus on monitoring process creation events within Linux systems. Look for command line arguments indicating the operation of crypto mining software, specifically those associated with the popular Monero crypto miner, Xmrig. Key indicators include modifications of CPU priority, explicit donation levels set to zero (to avoid giving a percentage of mined cryptocurrency to the software's developers), pool connection settings (often starting with '-o pool.'), usage of the NiceHash service, specification of the mining algorithm (like '--algo=rx/0'), and connections to mining pools through both TCP and UDP protocols indicated by 'stratum+tcp://' and 'stratum+udp://' respectively. Additionally, watch for subprocesses started by Xmrig which might attempt to load the 'msr' module with write permissions turned on, likely to optimize mining operations by modifying system registries.\n\nAlso important is detection of base64 encoded versions of key parameters such as '--donate-level=' and mining pool URIs (Uniform Resource Identifiers) starting with 'stratum+tcp://' and 'stratum+udp://', indicating advanced attempts to disguise mining activity. The presence of these command line arguments is a strong indicator of crypto mining activity on the system.\n\nHowever, it is important to consider the potential for false positives, as legitimate uses of crypto miners on the system could produce similar indicators. For instance, authorized crypto mining for research or revenue generation within organizational policies will generate the same command line parameters. The severity of finding such events has been marked high due to the substantial impact unauthorized crypto mining can have on system resources and operational costs.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "command line parameters or strings often used by crypto miners",
      "answer": "In order to detect command line parameters or strings often used by crypto miners, you should focus on monitoring process creation events within Linux systems. Look for command line arguments indicating the operation of crypto mining software, specifically those associated with the popular Monero crypto miner, Xmrig. Key indicators include modifications of CPU priority, explicit donation levels set to zero (to avoid giving a percentage of mined cryptocurrency to the software's developers), pool connection settings (often starting with '-o pool.'), usage of the NiceHash service, specification of the mining algorithm (like '--algo=rx/0'), and connections to mining pools through both TCP and UDP protocols indicated by 'stratum+tcp://' and 'stratum+udp://' respectively. Additionally, watch for subprocesses started by Xmrig which might attempt to load the 'msr' module with write permissions turned on, likely to optimize mining operations by modifying system registries.\n\nAlso important is detection of base64 encoded versions of key parameters such as '--donate-level=' and mining pool URIs (Uniform Resource Identifiers) starting with 'stratum+tcp://' and 'stratum+udp://', indicating advanced attempts to disguise mining activity. The presence of these command line arguments is a strong indicator of crypto mining activity on the system.\n\nHowever, it is important to consider the potential for false positives, as legitimate uses of crypto miners on the system could produce similar indicators. For instance, authorized crypto mining for research or revenue generation within organizational policies will generate the same command line parameters. The severity of finding such events has been marked high due to the substantial impact unauthorized crypto mining can have on system resources and operational costs."
    }
  },
  {
    "instruction": "How to detect: Look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$).",
    "context": "",
    "output": "In order to look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$), you should: Monitor Windows security logs for event ID 5145, which indicates an attempt to access a file system object. Specifically, pay attention to access attempts where the shared object name ends with 'C$', indicating an administrative share access, and where the AccessMask is set to '0x2', signifying write access. It is crucial to exclude events generated by system accounts, which can be identified by usernames ending with '$', as these are generally considered legitimate activities. While this monitoring approach aims to detect potential unauthorized access attempts via administrative shares by non-system accounts with write permissions, be aware that not all detections may represent malicious activity, and some may be unknown false positives. The associated attack techniques for this behavior include techniques related to credential access, lateral movement, and persistence, though specific MITRE ATT&CK tactics and techniques were not directly mentioned in the provided information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$).",
      "answer": "In order to look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$), you should: Monitor Windows security logs for event ID 5145, which indicates an attempt to access a file system object. Specifically, pay attention to access attempts where the shared object name ends with 'C$', indicating an administrative share access, and where the AccessMask is set to '0x2', signifying write access. It is crucial to exclude events generated by system accounts, which can be identified by usernames ending with '$', as these are generally considered legitimate activities. While this monitoring approach aims to detect potential unauthorized access attempts via administrative shares by non-system accounts with write permissions, be aware that not all detections may represent malicious activity, and some may be unknown false positives. The associated attack techniques for this behavior include techniques related to credential access, lateral movement, and persistence, though specific MITRE ATT&CK tactics and techniques were not directly mentioned in the provided information."
    }
  },
  {
    "instruction": "Explain how should I detect the following: users trying to exploit sudo vulnerability reported in CVE-2019-14287",
    "context": "",
    "output": "In order to detect users trying to exploit the sudo vulnerability reported in CVE-2019-14287, you should focus on monitoring sudo service logs on Linux systems. Specifically, look for instances where the USER field in these logs matches either of two patterns: beginning with a dash followed by any characters ('#-*') or containing the numeric string '#*4294967295'. These patterns are indicative of attempts to exploit the mentioned vulnerability. Due to the critical nature of this vulnerability, any detection of these patterns should be treated with high urgency. False positives are considered unlikely in this context, suggesting that almost any detection based on these criteria is a potential exploitation attempt. This detection strategy is designed to protect against the exploitation of the sudo service, which falls under various attack tactics and techniques but specifically targets privilege escalation vulnerabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "users trying to exploit sudo vulnerability reported in CVE-2019-14287",
      "answer": "In order to detect users trying to exploit the sudo vulnerability reported in CVE-2019-14287, you should focus on monitoring sudo service logs on Linux systems. Specifically, look for instances where the USER field in these logs matches either of two patterns: beginning with a dash followed by any characters ('#-*') or containing the numeric string '#*4294967295'. These patterns are indicative of attempts to exploit the mentioned vulnerability. Due to the critical nature of this vulnerability, any detection of these patterns should be treated with high urgency. False positives are considered unlikely in this context, suggesting that almost any detection based on these criteria is a potential exploitation attempt. This detection strategy is designed to protect against the exploitation of the sudo service, which falls under various attack tactics and techniques but specifically targets privilege escalation vulnerabilities."
    }
  },
  {
    "instruction": "Please help me detect the following: use of Replace.exe which can be used to replace file with another file",
    "context": "",
    "output": "Sure!\nIn order to detect the use of Replace.exe which can be used to replace file with another file, you should: Monitor process creation logs on Windows systems, focusing on instances where the 'Image' path ends with '\\replace.exe'. Also, scrutinize the command line arguments for the presence of either '/a' or '-a' as these indicate an attempt to use Replace.exe for its file replacement function. This detection strategy applies when both the specific command path and argument conditions are met simultaneously. It is set at a medium alert level due to potential unknown benign usages of Replace.exe that might not be related to malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Replace.exe which can be used to replace file with another file",
      "answer": "In order to detect the use of Replace.exe which can be used to replace file with another file, you should: Monitor process creation logs on Windows systems, focusing on instances where the 'Image' path ends with '\\replace.exe'. Also, scrutinize the command line arguments for the presence of either '/a' or '-a' as these indicate an attempt to use Replace.exe for its file replacement function. This detection strategy applies when both the specific command path and argument conditions are met simultaneously. It is set at a medium alert level due to potential unknown benign usages of Replace.exe that might not be related to malicious activities."
    }
  },
  {
    "instruction": "How to detect: usage of base64 utility to decode arbitrary base64-encoded text",
    "context": "",
    "output": "In order to detect usage of base64 utility to decode arbitrary base64-encoded text, you should monitor process creation logs on macOS systems for instances where the base64 utility, located at '/usr/bin/base64', is invoked with the '-d' option in the command line. This activity is indicative of decoding operations being performed, which could be legitimate or malicious depending on the context. However, given the common use of base64 decoding in various benign scenarios, the likelihood of false positives is considered low, suggesting a cautious approach in interpreting the detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of base64 utility to decode arbitrary base64-encoded text",
      "answer": "In order to detect usage of base64 utility to decode arbitrary base64-encoded text, you should monitor process creation logs on macOS systems for instances where the base64 utility, located at '/usr/bin/base64', is invoked with the '-d' option in the command line. This activity is indicative of decoding operations being performed, which could be legitimate or malicious depending on the context. However, given the common use of base64 decoding in various benign scenarios, the likelihood of false positives is considered low, suggesting a cautious approach in interpreting the detection."
    }
  },
  {
    "instruction": "How can I detect: potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
    "context": "",
    "output": "In order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should: Monitor DNS query logs on Windows systems for queries to a specific list of domains that are associated with malicious activities. Look for queries to domains such as 'akamaicontainer.com', 'akamaitechcloudservices.com', 'azuredeploystore.com', 'azureonlinecloud.com', 'azureonlinestorage.com', 'dunamistrd.com', 'glcloudservice.com', 'journalide.org', 'msedgepackageinfo.com', 'msedgeupdate.net', 'msstorageazure.com', 'msstorageboxes.com', 'officeaddons.com', 'officestoragebox.com', 'pbxcloudeservices.com', 'pbxphonenetwork.com', 'pbxsources.com', 'qwepoi123098.com', 'sbmsa.wiki', 'sourceslabs.com', 'visualstudiofactory.com', and 'zacharryblogs.com'. These domains have been linked to beaconing behavior indicative of a compromised 3CXDesktopApp. The detection of queries to these domains should be considered a high-level security concern due to the unlikely chance of false positives, suggesting a very specific and targeted attack behavior. This activity aligns with tactics and techniques related to command and control as well as initial access, where attackers establish communication with compromised systems to control them or exfiltrate data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
      "answer": "In order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should: Monitor DNS query logs on Windows systems for queries to a specific list of domains that are associated with malicious activities. Look for queries to domains such as 'akamaicontainer.com', 'akamaitechcloudservices.com', 'azuredeploystore.com', 'azureonlinecloud.com', 'azureonlinestorage.com', 'dunamistrd.com', 'glcloudservice.com', 'journalide.org', 'msedgepackageinfo.com', 'msedgeupdate.net', 'msstorageazure.com', 'msstorageboxes.com', 'officeaddons.com', 'officestoragebox.com', 'pbxcloudeservices.com', 'pbxphonenetwork.com', 'pbxsources.com', 'qwepoi123098.com', 'sbmsa.wiki', 'sourceslabs.com', 'visualstudiofactory.com', and 'zacharryblogs.com'. These domains have been linked to beaconing behavior indicative of a compromised 3CXDesktopApp. The detection of queries to these domains should be considered a high-level security concern due to the unlikely chance of false positives, suggesting a very specific and targeted attack behavior. This activity aligns with tactics and techniques related to command and control as well as initial access, where attackers establish communication with compromised systems to control them or exfiltrate data."
    }
  },
  {
    "instruction": "Explain how should I detect the following: possible exploitation of VMware Workspace ONE Access Admin Remote Code Execution vulnerability as described in CVE-2022-31659",
    "context": "",
    "output": "In order to detect possible exploitation of VMware Workspace ONE Access Admin Remote Code Execution vulnerability as described in CVE-2022-31659, you should monitor your web server logs for POST requests that target the URI '/SAAS/jersey/manager/api/migrate/tenant'. This specific path is crucial as it may be used in attempts to exploit the mentioned vulnerability. Ensuring to scrutinize the contents of the post body for any indications of suspicious hosts, which could be under the control of an attacker, is a fundamental part of the detection process. However, it's important to bear in mind that some legitimate vulnerability scanners or authorized access could trigger similar patterns, hence they are considered as potential sources of false positives. This investigative measure has been categorized with a medium level of urgency.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible exploitation of VMware Workspace ONE Access Admin Remote Code Execution vulnerability as described in CVE-2022-31659",
      "answer": "In order to detect possible exploitation of VMware Workspace ONE Access Admin Remote Code Execution vulnerability as described in CVE-2022-31659, you should monitor your web server logs for POST requests that target the URI '/SAAS/jersey/manager/api/migrate/tenant'. This specific path is crucial as it may be used in attempts to exploit the mentioned vulnerability. Ensuring to scrutinize the contents of the post body for any indications of suspicious hosts, which could be under the control of an attacker, is a fundamental part of the detection process. However, it's important to bear in mind that some legitimate vulnerability scanners or authorized access could trigger similar patterns, hence they are considered as potential sources of false positives. This investigative measure has been categorized with a medium level of urgency."
    }
  },
  {
    "instruction": "How can I detect: execution of the LocalPotato POC based on basic PE metadata information and default CLI examples",
    "context": "",
    "output": "In order to detect the execution of the LocalPotato Proof of Concept (POC) based on basic Portable Executable (PE) metadata information and default Command Line Interface (CLI) examples, you should monitor for the creation of processes on Windows systems where the executable involved ends with '\\LocalPotato.exe'. Additionally, detect if the command line used for executing the process contains specific parameters, including both '.exe -i C:\\' and '-o Windows\\' in any order. The detection should also encompass checking for known malicious hashes, specifically IMPHASH values of 'E1742EE971D6549E8D4D81115F88F1FC' and 'DD82066EFBA94D7556EF582F247C8BB5', which could be present either directly within the process hash properties or as an Import Hash (Imphash) metadata attribute. Given the specificity of these indicators and the context in which this detection operates, it is considered unlikely to generate false positives and is treated with a high level of severity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the LocalPotato POC based on basic PE metadata information and default CLI examples",
      "answer": "In order to detect the execution of the LocalPotato Proof of Concept (POC) based on basic Portable Executable (PE) metadata information and default Command Line Interface (CLI) examples, you should monitor for the creation of processes on Windows systems where the executable involved ends with '\\LocalPotato.exe'. Additionally, detect if the command line used for executing the process contains specific parameters, including both '.exe -i C:\\' and '-o Windows\\' in any order. The detection should also encompass checking for known malicious hashes, specifically IMPHASH values of 'E1742EE971D6549E8D4D81115F88F1FC' and 'DD82066EFBA94D7556EF582F247C8BB5', which could be present either directly within the process hash properties or as an Import Hash (Imphash) metadata attribute. Given the specificity of these indicators and the context in which this detection operates, it is considered unlikely to generate false positives and is treated with a high level of severity."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files",
    "context": "",
    "output": "Certainly!\n\nIn order to detect use of icacls to deny access for everyone in Users folder, sometimes used to hide malicious files, you should monitor for the creation of processes related to the execution of the 'icacls.exe' command, specifically under the Windows operating system. Look for instances where the original file name is marked as 'iCACLS.EXE' or the image path ends with '\\icacls.exe'. Additionally, pay close attention to the command line parameters, particularly commands that include paths starting with 'C:\\Users\\', coupled with the '/deny' parameter and the security identifier '*S-1-1-0:', which corresponds to denying access to the \"Everyone\" group. This combination of path, option, and identifier is a strong indicator that icacls is being used with potentially malicious intent, specifically to modify permissions in the User's folder to conceal unauthorized files. It's worth noting that there may be legitimate uses for these commands, so it is essential to consider the context in which they are being executed to reduce the number of false positives. The detection is based on process creation logs, making it critical to have a comprehensive logging mechanism on Windows machines to effectively monitor and react to such activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files",
      "answer": "In order to detect use of icacls to deny access for everyone in Users folder, sometimes used to hide malicious files, you should monitor for the creation of processes related to the execution of the 'icacls.exe' command, specifically under the Windows operating system. Look for instances where the original file name is marked as 'iCACLS.EXE' or the image path ends with '\\icacls.exe'. Additionally, pay close attention to the command line parameters, particularly commands that include paths starting with 'C:\\Users\\', coupled with the '/deny' parameter and the security identifier '*S-1-1-0:', which corresponds to denying access to the \"Everyone\" group. This combination of path, option, and identifier is a strong indicator that icacls is being used with potentially malicious intent, specifically to modify permissions in the User's folder to conceal unauthorized files. It's worth noting that there may be legitimate uses for these commands, so it is essential to consider the context in which they are being executed to reduce the number of false positives. The detection is based on process creation logs, making it critical to have a comprehensive logging mechanism on Windows machines to effectively monitor and react to such activities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious execution of Sysinternals PsSuspend, where the utility is used to suspend critical processes such as AV or EDR to bypass defenses",
    "context": "",
    "output": "In order to detect suspicious execution of Sysinternals PsSuspend, where the utility is used to suspend critical processes such as AV or EDR to bypass defenses, you should: monitor Windows process creation logs for the execution of 'pssuspend.exe' or 'pssuspend64.exe'. Specifically, look for cases where the original file name or the image path ends with these exe names. Additionally, pay close attention to the command line arguments to identify if 'msmpeng.exe', which is a critical process associated with Windows Defender, is being targeted. This approach helps in identifying attempts to suspend important security processes, thereby providing an indicator of malicious activity aiming to bypass system defenses. The probability of false positives is considered unlikely, and the threat level associated with this detection is rated as high.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious execution of Sysinternals PsSuspend, where the utility is used to suspend critical processes such as AV or EDR to bypass defenses",
      "answer": "In order to detect suspicious execution of Sysinternals PsSuspend, where the utility is used to suspend critical processes such as AV or EDR to bypass defenses, you should: monitor Windows process creation logs for the execution of 'pssuspend.exe' or 'pssuspend64.exe'. Specifically, look for cases where the original file name or the image path ends with these exe names. Additionally, pay close attention to the command line arguments to identify if 'msmpeng.exe', which is a critical process associated with Windows Defender, is being targeted. This approach helps in identifying attempts to suspend important security processes, thereby providing an indicator of malicious activity aiming to bypass system defenses. The probability of false positives is considered unlikely, and the threat level associated with this detection is rated as high."
    }
  },
  {
    "instruction": "How to detect: usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.",
    "context": "",
    "output": "In order to detect usage of \"appcmd\" to create new global URL rewrite rules, which has been observed being used by threat actors to add new rules so they can access their webshells, you should: Monitor Windows process creation logs for instances of the application \"appcmd.exe\" being executed, especially focusing on commands that include 'set', 'config', 'section:system.webServer/rewrite/globalRules', and 'commit:' in the command line. This behavior is indicative of attempts to modify web server configurations, potentially to insert malicious URL rewrite rules that could facilitate unsanctioned access to webshells. It is important to note, though, that there might be legitimate cases where administrators use \"appcmd.exe\" to add new URL rewrite rules for valid reasons, which are considered as possible false positives that need to be carefully evaluated. The severity of this activity is assessed as medium, suggesting a balanced approach to monitoring and investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.",
      "answer": "In order to detect usage of \"appcmd\" to create new global URL rewrite rules, which has been observed being used by threat actors to add new rules so they can access their webshells, you should: Monitor Windows process creation logs for instances of the application \"appcmd.exe\" being executed, especially focusing on commands that include 'set', 'config', 'section:system.webServer/rewrite/globalRules', and 'commit:' in the command line. This behavior is indicative of attempts to modify web server configurations, potentially to insert malicious URL rewrite rules that could facilitate unsanctioned access to webshells. It is important to note, though, that there might be legitimate cases where administrators use \"appcmd.exe\" to add new URL rewrite rules for valid reasons, which are considered as possible false positives that need to be carefully evaluated. The severity of this activity is assessed as medium, suggesting a balanced approach to monitoring and investigation."
    }
  },
  {
    "instruction": "How to detect: invocation of TabTip via CLSID as seen when JuicyPotatoNG is used on a system in brute force mode",
    "context": "",
    "output": "In order to detect the invocation of TabTip via CLSID as seen when JuicyPotatoNG is used on a system in brute force mode, you should monitor for specific events on Windows systems. Focus on collecting logs from the Windows System service, specifically looking for logs generated by the 'Microsoft-Windows-DistributedCOM' provider. Pay attention to event ID 10001, which is crucial for identifying this attack scenario.\n\nThe details you should look out for in the logs include the path to the binary invoked, 'C:\\Program Files\\Common Files\\microsoft shared\\ink\\TabTip.exe', which is a significant indicator of the TabTip application being executed. Additionally, an error ID of 2147943140 and the CLSID '{054AAE20-4BEA-4347-8A35-64A533254A9D}' associated with the DCOM server being targeted are pivotal in identifying this specific attack vector.\n\nWhile analyzing these logs, be aware of potential unknown false positives, indicating that while this detection logic is high fidelity, there may be legitimate scenarios where these indicators could be observed. Make sure to contextualize any alerts with additional investigation to confirm the malicious nature of the activity.\n\nThe tags associated with this behavior, indicating its relation to notorious cyber attack tactics and techniques, should guide the security measures and responses. These logs and their scrutiny are critical for early detection of such sophisticated attack techniques, underscoring the importance of a proactive security posture in defending against potential brute force attacks facilitated by tools like JuicyPotatoNG.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "invocation of TabTip via CLSID as seen when JuicyPotatoNG is used on a system in brute force mode",
      "answer": "In order to detect the invocation of TabTip via CLSID as seen when JuicyPotatoNG is used on a system in brute force mode, you should monitor for specific events on Windows systems. Focus on collecting logs from the Windows System service, specifically looking for logs generated by the 'Microsoft-Windows-DistributedCOM' provider. Pay attention to event ID 10001, which is crucial for identifying this attack scenario.\n\nThe details you should look out for in the logs include the path to the binary invoked, 'C:\\Program Files\\Common Files\\microsoft shared\\ink\\TabTip.exe', which is a significant indicator of the TabTip application being executed. Additionally, an error ID of 2147943140 and the CLSID '{054AAE20-4BEA-4347-8A35-64A533254A9D}' associated with the DCOM server being targeted are pivotal in identifying this specific attack vector.\n\nWhile analyzing these logs, be aware of potential unknown false positives, indicating that while this detection logic is high fidelity, there may be legitimate scenarios where these indicators could be observed. Make sure to contextualize any alerts with additional investigation to confirm the malicious nature of the activity.\n\nThe tags associated with this behavior, indicating its relation to notorious cyber attack tactics and techniques, should guide the security measures and responses. These logs and their scrutiny are critical for early detection of such sophisticated attack techniques, underscoring the importance of a proactive security posture in defending against potential brute force attacks facilitated by tools like JuicyPotatoNG."
    }
  },
  {
    "instruction": "Please help me detect the following:  when a firewall rule is modified or deleted in Google Cloud Platform (GCP).",
    "context": "",
    "output": "Sure!\nIn order to detect when a firewall rule is modified or deleted in Google Cloud Platform (GCP), you should monitor the Google Cloud Platform's audit logs, specifically within the GCP audit service. Look for the following method names indicating modifications to firewall rules: `v*.Compute.Firewalls.Delete`, `v*.Compute.Firewalls.Patch`, `v*.Compute.Firewalls.Update`, and `v*.Compute.Firewalls.Insert`. These activities represent the deletion, patching, updating, or insertion of firewall rules, respectively. It's significant to interpret these logs accurately because changes to firewall rules could potentially expose vulnerabilities or compromise the protected network infrastructure, possibly leading to unauthorized access.\n\nBe aware that modifications to firewall rules might originate from legitimate administrative actions. Therefore, it's crucial to verify whether any detected modification or deletion of a firewall rule was expected or authorized. This verification process can help in distinguishing between ordinary maintenance activities and potential security incidents. In cases where certain activities are identified as routine or expected, exceptions can be incorporated to refine the monitoring process, helping to reduce false positive alerts.\n\nThis monitoring strategy has a medium level of urgency, indicating that while modifications to firewall rules are significant, they may not always represent an immediate threat to the organization's security posture. However, given the potential impact of unauthorized changes to firewall rules, such activities should be closely scrutinized and investigated promptly to ensure the security and integrity of the Google Cloud Platform environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": " when a firewall rule is modified or deleted in Google Cloud Platform (GCP).",
      "answer": "In order to detect when a firewall rule is modified or deleted in Google Cloud Platform (GCP), you should monitor the Google Cloud Platform's audit logs, specifically within the GCP audit service. Look for the following method names indicating modifications to firewall rules: `v*.Compute.Firewalls.Delete`, `v*.Compute.Firewalls.Patch`, `v*.Compute.Firewalls.Update`, and `v*.Compute.Firewalls.Insert`. These activities represent the deletion, patching, updating, or insertion of firewall rules, respectively. It's significant to interpret these logs accurately because changes to firewall rules could potentially expose vulnerabilities or compromise the protected network infrastructure, possibly leading to unauthorized access.\n\nBe aware that modifications to firewall rules might originate from legitimate administrative actions. Therefore, it's crucial to verify whether any detected modification or deletion of a firewall rule was expected or authorized. This verification process can help in distinguishing between ordinary maintenance activities and potential security incidents. In cases where certain activities are identified as routine or expected, exceptions can be incorporated to refine the monitoring process, helping to reduce false positive alerts.\n\nThis monitoring strategy has a medium level of urgency, indicating that while modifications to firewall rules are significant, they may not always represent an immediate threat to the organization's security posture. However, given the potential impact of unauthorized changes to firewall rules, such activities should be closely scrutinized and investigated promptly to ensure the security and integrity of the Google Cloud Platform environment."
    }
  },
  {
    "instruction": "Please help me detect the following: Well-known DNS Exfiltration tools execution",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of well-known DNS Exfiltration tools, you should focus on monitoring the process creation logs within Windows systems. Specifically, look out for any process executions where the image path ends with '\\iodine.exe' or contains '\\dnscat2'. Such indicators are strong signs of DNS-based data exfiltration attempts using known tools like Iodine and Dnscat2, which are often used by attackers to stealthily extract data from compromised networks. The likelihood of these activities being benign is very low, hence they are marked with a high severity level. Identifying these activities promptly can help in mitigating potential data loss through DNS queries.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Well-known DNS Exfiltration tools execution",
      "answer": "In order to detect the execution of well-known DNS Exfiltration tools, you should focus on monitoring the process creation logs within Windows systems. Specifically, look out for any process executions where the image path ends with '\\iodine.exe' or contains '\\dnscat2'. Such indicators are strong signs of DNS-based data exfiltration attempts using known tools like Iodine and Dnscat2, which are often used by attackers to stealthily extract data from compromised networks. The likelihood of these activities being benign is very low, hence they are marked with a high severity level. Identifying these activities promptly can help in mitigating potential data loss through DNS queries."
    }
  },
  {
    "instruction": "Please help me detect the following: Silence downloader. These commands are hardcoded into the binary.",
    "context": "",
    "output": "Sure!\nIn order to Detect Silence downloader. These commands are hardcoded into the binary, you should: Focus on monitoring process creation logs from Windows systems. Specifically, be on the lookout for the execution of certain command-line utilities such as 'tasklist.exe', 'qwinsta.exe', 'ipconfig.exe', and 'hostname.exe' that end with these specific names. These utilities are commonly used for reconnaissance activities to gather information about the system and network environment. Additionally, pay special attention to command lines that contain redirection (indicated by '>>') towards a file that ends with 'temps.dat'. This specific pattern of behavior is indicative of attempts to silently capture and store output for later retrieval, which is not commonly observed in legitimate scenarios.\n\nMoreover, watch for command lines that include the specific registry modification command '/C REG ADD \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v \"WinNetworkSecurity\" /t REG_SZ /d'. This command is an attempt to achieve persistence on the system by adding a registry entry that ensures the malware starts every time the infected user logs into Windows. The detection hinges on the association of reconnaissance behaviors with attempts to establish persistence. This combination is highly indicative of malicious activity related to the Silence downloader malware, characterized by its methodical approach to probing the infected environment before securing its presence for long-term operations.\n\nBe aware that detection requires both reconnaissance actions and persistence attempts to occur in proximity. This method reduces the likelihood of false positives, which are, as of now, not well-defined for this detection scenario. Any match should be investigated with high priority due to the critical nature of the behaviors involved. Focus on the relevant fields such as 'ComputerName', 'User', 'Image', and 'CommandLine' during the investigation to contextualize and confirm the suspected malicious activity. This detection is aligned with MITRE ATT&CK tactics and techniques, particularly those relating to Discovery and Persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Silence downloader. These commands are hardcoded into the binary.",
      "answer": "In order to Detect Silence downloader. These commands are hardcoded into the binary, you should: Focus on monitoring process creation logs from Windows systems. Specifically, be on the lookout for the execution of certain command-line utilities such as 'tasklist.exe', 'qwinsta.exe', 'ipconfig.exe', and 'hostname.exe' that end with these specific names. These utilities are commonly used for reconnaissance activities to gather information about the system and network environment. Additionally, pay special attention to command lines that contain redirection (indicated by '>>') towards a file that ends with 'temps.dat'. This specific pattern of behavior is indicative of attempts to silently capture and store output for later retrieval, which is not commonly observed in legitimate scenarios.\n\nMoreover, watch for command lines that include the specific registry modification command '/C REG ADD \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v \"WinNetworkSecurity\" /t REG_SZ /d'. This command is an attempt to achieve persistence on the system by adding a registry entry that ensures the malware starts every time the infected user logs into Windows. The detection hinges on the association of reconnaissance behaviors with attempts to establish persistence. This combination is highly indicative of malicious activity related to the Silence downloader malware, characterized by its methodical approach to probing the infected environment before securing its presence for long-term operations.\n\nBe aware that detection requires both reconnaissance actions and persistence attempts to occur in proximity. This method reduces the likelihood of false positives, which are, as of now, not well-defined for this detection scenario. Any match should be investigated with high priority due to the critical nature of the behaviors involved. Focus on the relevant fields such as 'ComputerName', 'User', 'Image', and 'CommandLine' during the investigation to contextualize and confirm the suspected malicious activity. This detection is aligned with MITRE ATT&CK tactics and techniques, particularly those relating to Discovery and Persistence."
    }
  },
  {
    "instruction": "Explain how should I detect the following: specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Honk Kong universities",
    "context": "",
    "output": "In order to detect specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Hong Kong universities, you should monitor Windows process creations for specific patterns indicative of this malware activity. Look for processes that are initiated from certain suspicious locations or exhibit unusual behaviors, such as:\n\n1. Processes that are launched from the Windows Temp directory or by 'hpqhvind.exe', and those creating files in 'C:\\ProgramData\\DRM'.\n2. Instances where 'C:\\ProgramData\\DRM' is the starting location of a parent process that launches 'wmplayer.exe'.\n3. Processes that are started by 'Test.exe' and also create an instance of 'wmplayer.exe'.\n4. The specific creation of a process named 'C:\\ProgramData\\DRM\\CLR\\CLR.exe'.\n5. Processes begun by any executables located in 'C:\\ProgramData\\DRM\\Windows' that subsequently start 'SearchFilterHost.exe'.\n\nMonitoring for such process creation events will help in identifying activities associated with the Winnti malware. Generally, there should be minimal false positives for these detection criteria, indicating a high level of confidence in these as indicators of compromise. This approach is critical for ensuring the cybersecurity of systems, particularly in environments that are known targets of this malware, such as universities in Hong Kong.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Honk Kong universities",
      "answer": "In order to detect specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Hong Kong universities, you should monitor Windows process creations for specific patterns indicative of this malware activity. Look for processes that are initiated from certain suspicious locations or exhibit unusual behaviors, such as:\n\n1. Processes that are launched from the Windows Temp directory or by 'hpqhvind.exe', and those creating files in 'C:\\ProgramData\\DRM'.\n2. Instances where 'C:\\ProgramData\\DRM' is the starting location of a parent process that launches 'wmplayer.exe'.\n3. Processes that are started by 'Test.exe' and also create an instance of 'wmplayer.exe'.\n4. The specific creation of a process named 'C:\\ProgramData\\DRM\\CLR\\CLR.exe'.\n5. Processes begun by any executables located in 'C:\\ProgramData\\DRM\\Windows' that subsequently start 'SearchFilterHost.exe'.\n\nMonitoring for such process creation events will help in identifying activities associated with the Winnti malware. Generally, there should be minimal false positives for these detection criteria, indicating a high level of confidence in these as indicators of compromise. This approach is critical for ensuring the cybersecurity of systems, particularly in environments that are known targets of this malware, such as universities in Hong Kong."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of particular AttributeLDAPDisplayNames, which are known for data exchange via LDAP by the tool LDAPFragger and are additionally not commonly used in companies.",
    "context": "",
    "output": "Sure!\nIn order to detect the usage of particular AttributeLDAPDisplayNames, which are known for data exchange via LDAP by the tool LDAPFragger and are additionally not commonly used in companies, you should monitor for event logs generated under the Windows Security service. Specifically, you should look out for Audit Directory Service Changes events, particularly those with event ID 5136. These events are generated when objects with configured System Access Control Lists (SACLs) are accessed in a manner that matches their SACL settings. The attributes to be vigilant of include 'primaryInternationalISDNNumber', 'otherFacsimileTelephoneNumber', and 'primaryTelexNumber'. These specific LDAP Display Names are recognized for their rare usage in typical company operations but are known vectors for data exchange utilized by LDAPFragger. It's important to note that detecting activities involving these attributes can help identify potential unauthorized data exchange or exfiltration attempts via LDAP. However, there may be false positives, particularly in scenarios where companies use these LDAP attributes for legitimate personal information storage. The critical nature of these detections warrants a high level of attention to such security events.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of particular AttributeLDAPDisplayNames, which are known for data exchange via LDAP by the tool LDAPFragger and are additionally not commonly used in companies.",
      "answer": "In order to detect the usage of particular AttributeLDAPDisplayNames, which are known for data exchange via LDAP by the tool LDAPFragger and are additionally not commonly used in companies, you should monitor for event logs generated under the Windows Security service. Specifically, you should look out for Audit Directory Service Changes events, particularly those with event ID 5136. These events are generated when objects with configured System Access Control Lists (SACLs) are accessed in a manner that matches their SACL settings. The attributes to be vigilant of include 'primaryInternationalISDNNumber', 'otherFacsimileTelephoneNumber', and 'primaryTelexNumber'. These specific LDAP Display Names are recognized for their rare usage in typical company operations but are known vectors for data exchange utilized by LDAPFragger. It's important to note that detecting activities involving these attributes can help identify potential unauthorized data exchange or exfiltration attempts via LDAP. However, there may be false positives, particularly in scenarios where companies use these LDAP attributes for legitimate personal information storage. The critical nature of these detections warrants a high level of attention to such security events."
    }
  },
  {
    "instruction": "How to detect: potential DLL side loading of DLLs that are part of the Wazuh security platform",
    "context": "",
    "output": "In order to detect potential DLL side loading of DLLs that are part of the Wazuh security platform, you should: Monitor Windows systems for the loading of specific DLL files, focusing on the occurrence of '\\libwazuhshared.dll' and '\\libwinpthread-1.dll' being loaded. It's important to disregard cases where these files are loaded from common directories such as 'C:\\Program Files\\' and 'C:\\Program Files (x86)\\', as legitimate software commonly uses these paths. Special attention should be paid to avoid false positives that could arise from the legitimate use of 'libwinpthread-1.dll' by many applications, particularly those installed in \"AppData\" or \"ProgramData\" directories and involving \"mingw64\". Applications such as Visual Studio, JetBrains, Ruby, Anaconda, and GithubDesktop, among others, often use this DLL legitimately. Therefore, while detecting DLL side loading attempts, ensure that checks are refined to minimize interference with the normal operation of such legitimate software applications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL side loading of DLLs that are part of the Wazuh security platform",
      "answer": "In order to detect potential DLL side loading of DLLs that are part of the Wazuh security platform, you should: Monitor Windows systems for the loading of specific DLL files, focusing on the occurrence of '\\libwazuhshared.dll' and '\\libwinpthread-1.dll' being loaded. It's important to disregard cases where these files are loaded from common directories such as 'C:\\Program Files\\' and 'C:\\Program Files (x86)\\', as legitimate software commonly uses these paths. Special attention should be paid to avoid false positives that could arise from the legitimate use of 'libwinpthread-1.dll' by many applications, particularly those installed in \"AppData\" or \"ProgramData\" directories and involving \"mingw64\". Applications such as Visual Studio, JetBrains, Ruby, Anaconda, and GithubDesktop, among others, often use this DLL legitimately. Therefore, while detecting DLL side loading attempts, ensure that checks are refined to minimize interference with the normal operation of such legitimate software applications."
    }
  },
  {
    "instruction": "Can you explain how to detect: MSI package installation from suspicious locations",
    "context": "",
    "output": "Certainly!\n\nIn order to detect MSI package installation from suspicious locations, you should look out for events generated by the MsiInstaller on Windows within the application service logs. Specifically, pay attention to event ids 1040 and 1042 which denote the initiation and completion of an MSI installation process, respectively. An alert should trigger when the MSI installation source path includes potentially suspicious directories such as \"\\Users\\Public\\\", \"\\PerfLogs\\\", \"\\Desktop\\\", or \"C:\\Windows\\TEMP\\\". Additionally, installations initiated from any remote network shares, indicated by the presence of \"\\\\\\\\\", should be scrutinized.\n\nHowever, it's important to exclude certain conditions to reduce the number of false alerts. MSI installations proceeding from \"\\AppData\\Local\\Temp\\WinGet\\\" and installations of the \"UpdHealthTools.msi\" package from \"C:\\Windows\\TEMP\\\" are considered legitimate and should not trigger alerts as these are recognized exceptions.\n\nThis detection mechanism primarily aims to mitigate risks associated with tactics and techniques like Privilege Escalation, Persistence, and Execution, by alerting on potential misuse of the MSI installer service for deploying malicious applications from locations not typically used for legitimate software installation.\n\nBe aware that false positives may occur, especially if there is a practice within your environment of allowing MSI installations from locations such as the user's Desktop, the Public folder, or remote shares. The severity level for this detection has been classified as medium, suggesting a balanced approach to monitoring and responding to these alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "MSI package installation from suspicious locations",
      "answer": "In order to detect MSI package installation from suspicious locations, you should look out for events generated by the MsiInstaller on Windows within the application service logs. Specifically, pay attention to event ids 1040 and 1042 which denote the initiation and completion of an MSI installation process, respectively. An alert should trigger when the MSI installation source path includes potentially suspicious directories such as \"\\Users\\Public\\\", \"\\PerfLogs\\\", \"\\Desktop\\\", or \"C:\\Windows\\TEMP\\\". Additionally, installations initiated from any remote network shares, indicated by the presence of \"\\\\\\\\\", should be scrutinized.\n\nHowever, it's important to exclude certain conditions to reduce the number of false alerts. MSI installations proceeding from \"\\AppData\\Local\\Temp\\WinGet\\\" and installations of the \"UpdHealthTools.msi\" package from \"C:\\Windows\\TEMP\\\" are considered legitimate and should not trigger alerts as these are recognized exceptions.\n\nThis detection mechanism primarily aims to mitigate risks associated with tactics and techniques like Privilege Escalation, Persistence, and Execution, by alerting on potential misuse of the MSI installer service for deploying malicious applications from locations not typically used for legitimate software installation.\n\nBe aware that false positives may occur, especially if there is a practice within your environment of allowing MSI installations from locations such as the user's Desktop, the Public folder, or remote shares. The severity level for this detection has been classified as medium, suggesting a balanced approach to monitoring and responding to these alerts."
    }
  },
  {
    "instruction": "Can you explain how to detect: Suspicious behaviours related to an actor tracked by Microsoft as SOURGUM",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious behaviors related to an actor tracked by Microsoft as SOURGUM, you should monitor the creation of processes on Windows systems, specifically looking for instances where the process image path includes unusual references to system directories or files. These suspicious activities can be indicative of an attack when the image path contains references to 'windows\\system32\\Physmem.sys', 'Windows\\system32\\ime\\SHARED\\WimBootConfigurations.ini', 'Windows\\system32\\ime\\IMEJP\\WimBootConfigurations.ini', or 'Windows\\system32\\ime\\IMETC\\WimBootConfigurations.ini'.\n\nAdditionally, be vigilant for modifications in the Windows registry that could signify malicious attempts to establish persistence or control over the system. This includes commands attempting to add registry values or keys, especially when the command line includes 'reg add' in conjunction with paths that contain 'windows\\system32\\filepath2' or 'windows\\system32\\ime'. Moreover, registry key modifications targeting specific CLSIDs such as '{7c857801-7381-11cf-884d-00aa004b2e24}\\inprocserver32' and '{cf4cc405-e2c5-4ddd-b3ce-5e7582d8c9fa}\\inprocserver32' are critical to monitor.\n\nThis detection strategy is essential due to the high risk and ambiguity surrounding these activities; there's a lack of known benign reasons for such behaviors to occur in a normal system operation context. The tags related to the MITRE ATT&CK framework to watch out for with this detection strategy are `Persistence`, `Privilege Escalation`, and `Defense Evasion`. These signify that the tactics used could involve gaining a persistent foothold on the system, elevating privileges to execute unauthorized actions, and evading detection mechanisms to maintain their presence undetected.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Suspicious behaviours related to an actor tracked by Microsoft as SOURGUM",
      "answer": "In order to detect suspicious behaviors related to an actor tracked by Microsoft as SOURGUM, you should monitor the creation of processes on Windows systems, specifically looking for instances where the process image path includes unusual references to system directories or files. These suspicious activities can be indicative of an attack when the image path contains references to 'windows\\system32\\Physmem.sys', 'Windows\\system32\\ime\\SHARED\\WimBootConfigurations.ini', 'Windows\\system32\\ime\\IMEJP\\WimBootConfigurations.ini', or 'Windows\\system32\\ime\\IMETC\\WimBootConfigurations.ini'.\n\nAdditionally, be vigilant for modifications in the Windows registry that could signify malicious attempts to establish persistence or control over the system. This includes commands attempting to add registry values or keys, especially when the command line includes 'reg add' in conjunction with paths that contain 'windows\\system32\\filepath2' or 'windows\\system32\\ime'. Moreover, registry key modifications targeting specific CLSIDs such as '{7c857801-7381-11cf-884d-00aa004b2e24}\\inprocserver32' and '{cf4cc405-e2c5-4ddd-b3ce-5e7582d8c9fa}\\inprocserver32' are critical to monitor.\n\nThis detection strategy is essential due to the high risk and ambiguity surrounding these activities; there's a lack of known benign reasons for such behaviors to occur in a normal system operation context. The tags related to the MITRE ATT&CK framework to watch out for with this detection strategy are `Persistence`, `Privilege Escalation`, and `Defense Evasion`. These signify that the tactics used could involve gaining a persistent foothold on the system, elevating privileges to execute unauthorized actions, and evading detection mechanisms to maintain their presence undetected."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious or uncommon parent processes of PowerShell",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a suspicious or uncommon parent processes of PowerShell, you should monitor process creation events on Windows systems with specific attention to parent-child relationships involving the PowerShell executable or PowerShell Core 6 (also known as pwsh). Key indicators include situations where the PowerShell (powershell.exe or pwsh.exe) process is initiated by a process that typically does not do so, particularly web servers (like Tomcat, HTTPD, Nginx), web browsers (such as Chrome, Firefox, Internet Explorer, Edge, Safari, Vivaldi), common Microsoft Office applications (like Outlook), various database server processes (like SQL Server), and specific system or scripting processes (like services.exe, regsvr32.exe, rundll32.exe). Additionally, any instance where a command line contains '/c powershell' or '/c pwsh' invokes PowerShell directly in a manner suggesting an attempt to execute PowerShell commands or scripts in a stealthy or potentially malicious way. Monitoring for these condiitons is crucial as they are often tactics employed by attackers to execute malicious code, maintain persistence, or move laterally within a network undetected. Tagging these activities can involve tags related to Execution, Persistence, Privilege Escalation, and Defense Evasion tactics. It's essential to note that false positives can occur, particularly with scripts or legitimate administrative activity that might use PowerShell in non-standard ways for benign purposes. Any such detection should be set at a high level of importance due to the potential severity but verified carefully to avoid misidentification of legitimate activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious or uncommon parent processes of PowerShell",
      "answer": "In order to detect a suspicious or uncommon parent processes of PowerShell, you should monitor process creation events on Windows systems with specific attention to parent-child relationships involving the PowerShell executable or PowerShell Core 6 (also known as pwsh). Key indicators include situations where the PowerShell (powershell.exe or pwsh.exe) process is initiated by a process that typically does not do so, particularly web servers (like Tomcat, HTTPD, Nginx), web browsers (such as Chrome, Firefox, Internet Explorer, Edge, Safari, Vivaldi), common Microsoft Office applications (like Outlook), various database server processes (like SQL Server), and specific system or scripting processes (like services.exe, regsvr32.exe, rundll32.exe). Additionally, any instance where a command line contains '/c powershell' or '/c pwsh' invokes PowerShell directly in a manner suggesting an attempt to execute PowerShell commands or scripts in a stealthy or potentially malicious way. Monitoring for these condiitons is crucial as they are often tactics employed by attackers to execute malicious code, maintain persistence, or move laterally within a network undetected. Tagging these activities can involve tags related to Execution, Persistence, Privilege Escalation, and Defense Evasion tactics. It's essential to note that false positives can occur, particularly with scripts or legitimate administrative activity that might use PowerShell in non-standard ways for benign purposes. Any such detection should be set at a high level of importance due to the potential severity but verified carefully to avoid misidentification of legitimate activities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of local users via the net.exe command with the option \"never expire\"",
    "context": "",
    "output": "In order to detect the creation of local users via the net.exe command with the option \"never expire\", you should: Focus on monitoring process creation logs within Windows environments. Look specifically for processes that are initiated by 'net.exe' or 'net1.exe', which can be identified not only by their image paths ending with '\\net.exe' or '\\net1.exe' but also by checking the OriginalFileName attribute for 'net.exe' or 'net1.exe'. Moreover, scrutinize the command line arguments accompanying these process creations for the presence of 'user', 'add', and 'expires:never' simultaneously. This detection strategy is crucial as it is aimed at identifying malicious activities characterized by the creation of local user accounts configured to never expire, which could imply unauthorised persistence mechanisms set up by attackers. The false positive rate for these detections is considered unlikely, indicating a high level of confidence in this approach. The associated tactics and techniques for this activity would include Persistence, Privilege Escalation, and potentially Initial Access, due to the use of these tactics in maintaining access to compromised systems and escalating privileges within them.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of local users via the net.exe command with the option \"never expire\"",
      "answer": "In order to detect the creation of local users via the net.exe command with the option \"never expire\", you should: Focus on monitoring process creation logs within Windows environments. Look specifically for processes that are initiated by 'net.exe' or 'net1.exe', which can be identified not only by their image paths ending with '\\net.exe' or '\\net1.exe' but also by checking the OriginalFileName attribute for 'net.exe' or 'net1.exe'. Moreover, scrutinize the command line arguments accompanying these process creations for the presence of 'user', 'add', and 'expires:never' simultaneously. This detection strategy is crucial as it is aimed at identifying malicious activities characterized by the creation of local user accounts configured to never expire, which could imply unauthorised persistence mechanisms set up by attackers. The false positive rate for these detections is considered unlikely, indicating a high level of confidence in this approach. The associated tactics and techniques for this activity would include Persistence, Privilege Escalation, and potentially Initial Access, due to the use of these tactics in maintaining access to compromised systems and escalating privileges within them."
    }
  },
  {
    "instruction": "How can I detect: attempts to force stop the ufw using ufw-init",
    "context": "",
    "output": "In order to detect attempts to force stop the ufw using ufw-init, you should: Monitor for process creation events on Linux systems, specifically looking for command line commands that both contain '-ufw-init' and 'force-stop', indicating an attempt to force stop the Uncomplicated Firewall (ufw). Additionally, watch for command line commands containing both 'ufw' and 'disable', as this also signals an attempt to disable the firewall. It is important to note that such activities might sometimes be legitimate, particularly when performed by network administrators, thus they could be considered as potential false positives. The severity level of this detection is classified as medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to force stop the ufw using ufw-init",
      "answer": "In order to detect attempts to force stop the ufw using ufw-init, you should: Monitor for process creation events on Linux systems, specifically looking for command line commands that both contain '-ufw-init' and 'force-stop', indicating an attempt to force stop the Uncomplicated Firewall (ufw). Additionally, watch for command line commands containing both 'ufw' and 'disable', as this also signals an attempt to disable the firewall. It is important to note that such activities might sometimes be legitimate, particularly when performed by network administrators, thus they could be considered as potential false positives. The severity level of this detection is classified as medium."
    }
  },
  {
    "instruction": "How can I detect: Commandlet names from well-known PowerShell exploitation frameworks",
    "context": "",
    "output": "In order to detect Commandlet names from well-known PowerShell exploitation frameworks, you should monitor Windows PowerShell script activity, ensuring that Script Block Logging is enabled. This monitoring aims to identify any usage of specific commandlets that are commonly associated with various stages of cyber-attacks, such as establishing persistence, backdoor insertion, data exfiltration, environment reconnaissance, credential dumping, and many others that are part of well-known exploitation frameworks. Look for the presence of any suspicious PowerShell commandlet names in script blocks, which could include operations like adding various forms of backdoors (e.g., 'Add-RegBackdoor', 'Add-RemoteRegBackdoor'), performing exfiltration tasks ('Do-Exfiltration'), disabling security measures ('Disable-ADIDNSNode'), exploiting vulnerabilities ('Exploit-Jboss'), among other indicative signs of malicious activities. It is critical to exclude potential false positives related to Amazon EC2 instances by considering specific script block text content that may lead to incorrect detections. The level of concern for these detections is high due to the severe implications of successful exploitation through PowerShell, which ranges from unauthorized access to sensitive information leakage and system compromise.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Commandlet names from well-known PowerShell exploitation frameworks",
      "answer": "In order to detect Commandlet names from well-known PowerShell exploitation frameworks, you should monitor Windows PowerShell script activity, ensuring that Script Block Logging is enabled. This monitoring aims to identify any usage of specific commandlets that are commonly associated with various stages of cyber-attacks, such as establishing persistence, backdoor insertion, data exfiltration, environment reconnaissance, credential dumping, and many others that are part of well-known exploitation frameworks. Look for the presence of any suspicious PowerShell commandlet names in script blocks, which could include operations like adding various forms of backdoors (e.g., 'Add-RegBackdoor', 'Add-RemoteRegBackdoor'), performing exfiltration tasks ('Do-Exfiltration'), disabling security measures ('Disable-ADIDNSNode'), exploiting vulnerabilities ('Exploit-Jboss'), among other indicative signs of malicious activities. It is critical to exclude potential false positives related to Amazon EC2 instances by considering specific script block text content that may lead to incorrect detections. The level of concern for these detections is high due to the severe implications of successful exploitation through PowerShell, which ranges from unauthorized access to sensitive information leakage and system compromise."
    }
  },
  {
    "instruction": "How to detect: suspicious curl process start the adds a file to a web request",
    "context": "",
    "output": "In order to detect a suspicious curl process start that adds a file to a web request, you should: Monitor Linux-based systems for the initiation of curl processes that are employing command-line flags indicative of web requests containing file data. Specifically, look for curl commands concluding with '/curl' and command line options that signify file upload or data inclusion in the web request. These options include '--form' (or '--form-string'), '--upload-file', '--data', '--data-' (to catch variants like '--data-ascii', '--data-binary', '--data-raw', '--data-urlencode'), and also short-hand flags matched using a regular expression to find '-F', '-T', '-d' with a space following. However, curl commands targeting 'localhost' or '127.0.0.1' should be considered optional filters and their appearances could exempt an event from being flagged to reduce the incidence of false positives, which might often originate from scripts developed internally by administrators or developers. The analysis is of medium importance level and contributes towards identifying potential data exfiltration or malware communication efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious curl process start the adds a file to a web request",
      "answer": "In order to detect a suspicious curl process start that adds a file to a web request, you should: Monitor Linux-based systems for the initiation of curl processes that are employing command-line flags indicative of web requests containing file data. Specifically, look for curl commands concluding with '/curl' and command line options that signify file upload or data inclusion in the web request. These options include '--form' (or '--form-string'), '--upload-file', '--data', '--data-' (to catch variants like '--data-ascii', '--data-binary', '--data-raw', '--data-urlencode'), and also short-hand flags matched using a regular expression to find '-F', '-T', '-d' with a space following. However, curl commands targeting 'localhost' or '127.0.0.1' should be considered optional filters and their appearances could exempt an event from being flagged to reduce the incidence of false positives, which might often originate from scripts developed internally by administrators or developers. The analysis is of medium importance level and contributes towards identifying potential data exfiltration or malware communication efforts."
    }
  },
  {
    "instruction": "Can you explain how to detect: TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia",
    "context": "",
    "output": "Certainly!\n\nIn order to detect TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia, you should monitor for the creation of processes in Windows operating systems that include the command line containing the specific string 'abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc'. Such a unique string in the command line may indicate malicious activities associated with the TropicTrooper threat actor. This monitoring is considered of high importance due to the potential impact and the targeted nature of the TropicTrooper's operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia",
      "answer": "In order to detect TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia, you should monitor for the creation of processes in Windows operating systems that include the command line containing the specific string 'abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc'. Such a unique string in the command line may indicate malicious activities associated with the TropicTrooper threat actor. This monitoring is considered of high importance due to the potential impact and the targeted nature of the TropicTrooper's operations."
    }
  },
  {
    "instruction": "How to detect: Well-known TAP software installation. Possible preparation for data exfiltration using tunneling techniques",
    "context": "",
    "output": "In order to detect well-known TAP software installation, which could be a possible preparation for data exfiltration using tunneling techniques, you should: Focus on monitoring process creation logs within Windows environments. Specifically, look for processes ending with '\\tapinstall.exe' to catch instances of TAP software installations. However, it's crucial to exclude legitimate TAP software installations from certain known directories to reduce false positives. These exclusions include any process creation events from:\n\n- `C:\\Program Files\\Avast Software\\SecureLine VPN\\tapinstall.exe`\n- `C:\\Program Files (x86)\\Avast Software\\SecureLine VPN\\tapinstall.exe`\n- Paths starting with `C:\\Program Files\\OpenVPN Connect\\drivers\\tap\\`\n- Paths starting with `C:\\Program Files (x86)\\Proton Technologies\\ProtonVPNTap\\installer\\`\n\nBy applying these filters, you can more accurately identify suspicious TAP software installations potentially used for setting up data exfiltration channels, while minimizing interruptions from legitimate VPN software operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Well-known TAP software installation. Possible preparation for data exfiltration using tunneling techniques",
      "answer": "In order to detect well-known TAP software installation, which could be a possible preparation for data exfiltration using tunneling techniques, you should: Focus on monitoring process creation logs within Windows environments. Specifically, look for processes ending with '\\tapinstall.exe' to catch instances of TAP software installations. However, it's crucial to exclude legitimate TAP software installations from certain known directories to reduce false positives. These exclusions include any process creation events from:\n\n- `C:\\Program Files\\Avast Software\\SecureLine VPN\\tapinstall.exe`\n- `C:\\Program Files (x86)\\Avast Software\\SecureLine VPN\\tapinstall.exe`\n- Paths starting with `C:\\Program Files\\OpenVPN Connect\\drivers\\tap\\`\n- Paths starting with `C:\\Program Files (x86)\\Proton Technologies\\ProtonVPNTap\\installer\\`\n\nBy applying these filters, you can more accurately identify suspicious TAP software installations potentially used for setting up data exfiltration channels, while minimizing interruptions from legitimate VPN software operations."
    }
  },
  {
    "instruction": "How can I detect: disabling security tools",
    "context": "",
    "output": "In order to detect disabling security tools, you should monitor Linux system logs, specifically focusing on syslog entries. Key indicators of this type of activity include log entries that contain phrases like \"stopping iptables,\" \"stopping ip6tables,\" \"stopping firewalld,\" \"stopping cbdaemon,\" and \"stopping falcon-sensor.\" These entries suggest actions that could disable vital security components on a Linux system, potentially making it more vulnerable to attacks. It is important to note, however, that there could be legitimate reasons for these actions, such as during routine administration tasks, so not every instance identified might indicate a security threat. The severity of these findings is considered medium, indicating that while this activity can be a serious security concern, context is key to understanding the risk it poses.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "disabling security tools",
      "answer": "In order to detect disabling security tools, you should monitor Linux system logs, specifically focusing on syslog entries. Key indicators of this type of activity include log entries that contain phrases like \"stopping iptables,\" \"stopping ip6tables,\" \"stopping firewalld,\" \"stopping cbdaemon,\" and \"stopping falcon-sensor.\" These entries suggest actions that could disable vital security components on a Linux system, potentially making it more vulnerable to attacks. It is important to note, however, that there could be legitimate reasons for these actions, such as during routine administration tasks, so not every instance identified might indicate a security threat. The severity of these findings is considered medium, indicating that while this activity can be a serious security concern, context is key to understanding the risk it poses."
    }
  },
  {
    "instruction": "Can you explain how to detect: Winword starting uncommon sub process MicroScMgmt.exe as used in exploits for CVE-2015-1641",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Winword starting uncommon sub-process MicroScMgmt.exe as used in exploits for CVE-2015-1641, you should: Monitor process creation logs on Windows systems. Specifically, look for instances where Microsoft Word (WINWORD.EXE) is recorded as the parent image of a process named MicroScMgmt.exe. This specific behavior is unusual and strongly indicates an attempt to exploit the CVE-2015-1641 vulnerability, which should be treated as a critical security threat. Be aware that there might be unknown scenarios leading to false positives, however, due to the critical nature of this detection, any occurrence should be thoroughly investigated.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Winword starting uncommon sub process MicroScMgmt.exe as used in exploits for CVE-2015-1641",
      "answer": "In order to detect Winword starting uncommon sub-process MicroScMgmt.exe as used in exploits for CVE-2015-1641, you should: Monitor process creation logs on Windows systems. Specifically, look for instances where Microsoft Word (WINWORD.EXE) is recorded as the parent image of a process named MicroScMgmt.exe. This specific behavior is unusual and strongly indicates an attempt to exploit the CVE-2015-1641 vulnerability, which should be treated as a critical security threat. Be aware that there might be unknown scenarios leading to false positives, however, due to the critical nature of this detection, any occurrence should be thoroughly investigated."
    }
  },
  {
    "instruction": "How can I detect: Triggers on any Sysmon \"FileExecutableDetected\" event, which triggers every time a PE that is monitored by the config is created.",
    "context": "",
    "output": "In order to trigger on any Sysmon \"FileExecutableDetected\" event, which triggers every time a PE that is monitored by the config is created, you should: focus on monitoring Windows systems using Sysmon service. Specifically, set up alerts for Event ID 29, which corresponds to the Sysmon event for \"FileExecutableDetected.\" This event is significant because it is triggered whenever a Portable Executable file (PE), which is under surveillance by the system's configuration, gets created. Due to the nature of this detection targeting a critical step in numerous attack sequences \u2013 the creation of executable files on the system \u2013 false positives are considered unlikely. The importance of closely monitoring such events is rated at a medium level, indicating a balanced approach between alert sensitivity and the potential for false alarms. This procedure is tied to tactics and techniques like Execution and Persistence, which attackers often exploit by creating or modifying executable files to execute malicious code or maintain their presence on a system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Triggers on any Sysmon \"FileExecutableDetected\" event, which triggers every time a PE that is monitored by the config is created.",
      "answer": "In order to trigger on any Sysmon \"FileExecutableDetected\" event, which triggers every time a PE that is monitored by the config is created, you should: focus on monitoring Windows systems using Sysmon service. Specifically, set up alerts for Event ID 29, which corresponds to the Sysmon event for \"FileExecutableDetected.\" This event is significant because it is triggered whenever a Portable Executable file (PE), which is under surveillance by the system's configuration, gets created. Due to the nature of this detection targeting a critical step in numerous attack sequences \u2013 the creation of executable files on the system \u2013 false positives are considered unlikely. The importance of closely monitoring such events is rated at a medium level, indicating a balanced approach between alert sensitivity and the potential for false alarms. This procedure is tied to tactics and techniques like Execution and Persistence, which attackers often exploit by creating or modifying executable files to execute malicious code or maintain their presence on a system."
    }
  },
  {
    "instruction": "Please help me detect the following: AWS Config Service disabling",
    "context": "",
    "output": "Sure!\nIn order to detect AWS Config Service disabling, you should monitor CloudTrail logs for specific activities that indicate a potential disruption of the AWS Config service. Specifically, look out for logs where the event source is `config.amazonaws.com` and the event name is either `DeleteDeliveryChannel` or `StopConfigurationRecorder`. These events suggest that someone might be trying to delete the delivery channel or stop the configuration recorder within AWS Config, which are critical components for the monitoring and governance of AWS resources. The configurations being changed or stopped could signify a deliberate attempt to evade detection or weaken security policies. It is essential to treat these actions with a high level of suspicion, although it's also important to recognize that there may be legitimate reasons for such changes, such as a valid modification in the AWS Config service setup by the administrators. As such, while this activity is being flagged as of 'high' level concern due to its potential implications on security posture, it is also recommended to verify the context of these actions to discern between malicious activity and legitimate administrative tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "AWS Config Service disabling",
      "answer": "In order to detect AWS Config Service disabling, you should monitor CloudTrail logs for specific activities that indicate a potential disruption of the AWS Config service. Specifically, look out for logs where the event source is `config.amazonaws.com` and the event name is either `DeleteDeliveryChannel` or `StopConfigurationRecorder`. These events suggest that someone might be trying to delete the delivery channel or stop the configuration recorder within AWS Config, which are critical components for the monitoring and governance of AWS resources. The configurations being changed or stopped could signify a deliberate attempt to evade detection or weaken security policies. It is essential to treat these actions with a high level of suspicion, although it's also important to recognize that there may be legitimate reasons for such changes, such as a valid modification in the AWS Config service setup by the administrators. As such, while this activity is being flagged as of 'high' level concern due to its potential implications on security posture, it is also recommended to verify the context of these actions to discern between malicious activity and legitimate administrative tasks."
    }
  },
  {
    "instruction": "Please help me detect the following: when end user consent is blocked due to risk-based consent.",
    "context": "",
    "output": "Sure!\nIn order to detect when end user consent is blocked due to risk-based consent, you should monitor Azure audit logs for specific events where a failure status reason is identified as 'Microsoft.online.Security.userConsentBlockedForRiskyAppsExceptions'. This condition indicates that the system has automatically blocked an end user's consent for an application due to it being deemed risky. Monitoring for such events is crucial in identifying and mitigating potential security threats associated with unauthorized or malicious applications trying to gain access through user consent. Tags associated with this activity would include Initial Access and Credential Access, as such blockages are indicative of protective measures against techniques that seek to exploit user permissions or credentials for unauthorized access. The detection of this event should be treated with a medium level of importance, and while it's possible to encounter scenarios where such blockages are legitimate and not an indication of a security threat, these instances are considered as unknown false positives and warrant further investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when end user consent is blocked due to risk-based consent.",
      "answer": "In order to detect when end user consent is blocked due to risk-based consent, you should monitor Azure audit logs for specific events where a failure status reason is identified as 'Microsoft.online.Security.userConsentBlockedForRiskyAppsExceptions'. This condition indicates that the system has automatically blocked an end user's consent for an application due to it being deemed risky. Monitoring for such events is crucial in identifying and mitigating potential security threats associated with unauthorized or malicious applications trying to gain access through user consent. Tags associated with this activity would include Initial Access and Credential Access, as such blockages are indicative of protective measures against techniques that seek to exploit user permissions or credentials for unauthorized access. The detection of this event should be treated with a medium level of importance, and while it's possible to encounter scenarios where such blockages are legitimate and not an indication of a security threat, these instances are considered as unknown false positives and warrant further investigation."
    }
  },
  {
    "instruction": "How can I detect: Obfuscated use of stdin to execute PowerShell",
    "context": "",
    "output": "In order to detect obfuscated use of stdin to execute PowerShell, you should monitor Windows PowerShell modules for specific command execution patterns. Focus on observations where command lines include a sequence that involves the 'cmd' command followed by switches '/c' or '/r', which is closely succeeded by 'powershell'. The detection relies on identifying commands that also contain either the `${input}` variable (with optional curly braces) or the 'noexit' flag within a quoted string. This pattern suggests an attempt to execute PowerShell commands in an obfuscated manner, likely to evade detection or analysis. The observation of such a pattern, especially within the context of PowerShell modules, should trigger a high-level alert. It's important to consider that there might be legitimate scenarios that generate similar patterns, though they are not specifically known, indicating the need for thorough investigation once such activity is detected. This approach focuses on PowerShell scripting misuse, aligning with tactics such as Execution and Defense Evasion, particularly when adversaries attempt to run PowerShell commands without drawing attention to their activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should monitor Windows PowerShell modules for specific command execution patterns. Focus on observations where command lines include a sequence that involves the 'cmd' command followed by switches '/c' or '/r', which is closely succeeded by 'powershell'. The detection relies on identifying commands that also contain either the `${input}` variable (with optional curly braces) or the 'noexit' flag within a quoted string. This pattern suggests an attempt to execute PowerShell commands in an obfuscated manner, likely to evade detection or analysis. The observation of such a pattern, especially within the context of PowerShell modules, should trigger a high-level alert. It's important to consider that there might be legitimate scenarios that generate similar patterns, though they are not specifically known, indicating the need for thorough investigation once such activity is detected. This approach focuses on PowerShell scripting misuse, aligning with tactics such as Execution and Defense Evasion, particularly when adversaries attempt to run PowerShell commands without drawing attention to their activities."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of known offensive powershell scripts used for exploitation or reconnaissance",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of known offensive PowerShell scripts used for exploitation or reconnaissance, you should monitor PowerShell module logs on Windows systems. Specifically, look for evidence of script execution that matches a comprehensive list of known malicious scripts. These scripts span a variety of tactics and techniques, suggesting the potential involvement of several MITRE ATT&CK tactics such as Credential Access, Execution, Defense Evasion, Persistence, Privilege Escalation, Discovery, Lateral Movement, Collection, Command and Control, Exfiltration, and Impact.\n\nDetection should focus on script names within the PowerShell module logs, including, but not limited to:\n\n- Scripts for adding backdoors, exfiltration, persistence mechanisms, and registry modifications (`Add-ConstrainedDelegationBackdoor.ps1`, `Add-Exfiltration.ps1`, `Add-Persistence.ps1`, etc.).\n- Tools for system reconnaissance, like checking for VM presence, extracting passwords, and more (`Check-VM.ps1`, `Get-PassHashes.ps1`, `Find-AVSignature.ps1`, etc.).\n- Means for bypassing security measures, executing remote commands, and performing lateral movement (`Invoke-BypassUAC.ps1`, `Invoke-CredentialInjection.ps1`, `Execute-Command-MSSQL.ps1`, etc.).\n- Scripts that aid in collecting sensitive data, such as keystrokes and screenshot capturing (`Get-Keystrokes.ps1`, `Get-Screenshot.ps1`, etc.).\n- Utility and exploitation scripts, including those for performing network scans, credential dumping, and injecting malicious payloads (`Port-Scan.ps1`, `Invoke-Mimikatz.ps1`, `Invoke-ReflectivePEInjection.ps1`, etc.).\n\nAdditionally, scripts containing 'Invoke-Sharp' followed by '.ps1', representing a variety of potentially malicious activities performed through custom PowerShell code, should raise alerts.\n\nThese monitoring efforts are crucial for identifying potential hostile activities early on, enabling timely response actions. Due to the nature of these scripts and techniques, encounters will likely represent high-severity incidents that necessitate further investigation, though it's acknowledged that there may be scenarios in which their presence or execution does not indicate a clear threat (marked as unknown false positives).\n\nSuch vigilance is critical for maintaining the integrity, confidentiality, and availability of IT environments against adversaries seeking to exploit PowerShell as a vector for attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of known offensive powershell scripts used for exploitation or reconnaissance",
      "answer": "In order to detect the execution of known offensive PowerShell scripts used for exploitation or reconnaissance, you should monitor PowerShell module logs on Windows systems. Specifically, look for evidence of script execution that matches a comprehensive list of known malicious scripts. These scripts span a variety of tactics and techniques, suggesting the potential involvement of several MITRE ATT&CK tactics such as Credential Access, Execution, Defense Evasion, Persistence, Privilege Escalation, Discovery, Lateral Movement, Collection, Command and Control, Exfiltration, and Impact.\n\nDetection should focus on script names within the PowerShell module logs, including, but not limited to:\n\n- Scripts for adding backdoors, exfiltration, persistence mechanisms, and registry modifications (`Add-ConstrainedDelegationBackdoor.ps1`, `Add-Exfiltration.ps1`, `Add-Persistence.ps1`, etc.).\n- Tools for system reconnaissance, like checking for VM presence, extracting passwords, and more (`Check-VM.ps1`, `Get-PassHashes.ps1`, `Find-AVSignature.ps1`, etc.).\n- Means for bypassing security measures, executing remote commands, and performing lateral movement (`Invoke-BypassUAC.ps1`, `Invoke-CredentialInjection.ps1`, `Execute-Command-MSSQL.ps1`, etc.).\n- Scripts that aid in collecting sensitive data, such as keystrokes and screenshot capturing (`Get-Keystrokes.ps1`, `Get-Screenshot.ps1`, etc.).\n- Utility and exploitation scripts, including those for performing network scans, credential dumping, and injecting malicious payloads (`Port-Scan.ps1`, `Invoke-Mimikatz.ps1`, `Invoke-ReflectivePEInjection.ps1`, etc.).\n\nAdditionally, scripts containing 'Invoke-Sharp' followed by '.ps1', representing a variety of potentially malicious activities performed through custom PowerShell code, should raise alerts.\n\nThese monitoring efforts are crucial for identifying potential hostile activities early on, enabling timely response actions. Due to the nature of these scripts and techniques, encounters will likely represent high-severity incidents that necessitate further investigation, though it's acknowledged that there may be scenarios in which their presence or execution does not indicate a clear threat (marked as unknown false positives).\n\nSuch vigilance is critical for maintaining the integrity, confidentiality, and availability of IT environments against adversaries seeking to exploit PowerShell as a vector for attack."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM and SECURITY",
    "context": "",
    "output": "Sure!\nIn order to detect the usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM, and SECURITY, you should look for processes being created on Windows systems where the process image ends with '\\reg.exe' or the original file name is identified as 'reg.exe'. This focuses on detecting commands that involve saving or exporting information, specifically when these commands contain flags like 'save', 'export', or variations thereof that may attempt to evade detection by slightly altering the characters. Furthermore, attention is paid to commands targeting critical registry hive keys such as HKLM (HKEY_LOCAL_MACHINE) or any obfuscated variations of this term. The detection extends to specifics about which registry hives are being targeted for dumping, including SYSTEM, SAM, and SECURITY, along with any attempts to obfuscate these terms within the command line. It's also important to consider that there could be legitimate reasons for such activities, including backups or forensic investigations, which might be considered as false positives in such detection efforts. The detection level for these activities is set to high due to their potential impact on system security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM and SECURITY",
      "answer": "In order to detect the usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM, and SECURITY, you should look for processes being created on Windows systems where the process image ends with '\\reg.exe' or the original file name is identified as 'reg.exe'. This focuses on detecting commands that involve saving or exporting information, specifically when these commands contain flags like 'save', 'export', or variations thereof that may attempt to evade detection by slightly altering the characters. Furthermore, attention is paid to commands targeting critical registry hive keys such as HKLM (HKEY_LOCAL_MACHINE) or any obfuscated variations of this term. The detection extends to specifics about which registry hives are being targeted for dumping, including SYSTEM, SAM, and SECURITY, along with any attempts to obfuscate these terms within the command line. It's also important to consider that there could be legitimate reasons for such activities, including backups or forensic investigations, which might be considered as false positives in such detection efforts. The detection level for these activities is set to high due to their potential impact on system security."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of the \"systeminfo\" command to retrieve information",
    "context": "",
    "output": "In order to detect the usage of the \"systeminfo\" command to retrieve information, you should: Monitor the creation of processes on Windows systems, focusing on any process where the image name ends with '\\systeminfo.exe' or the original file name is identified as 'sysinfo.exe'. The detection of these particular process creations is a sign that the \"systeminfo\" command may be being used. This technique is associated with obtaining system information, which can be indicative of reconnaissance activity. The level of certainty for this detection is considered low, implying that while these indicators can suggest suspicious activity, they are not definitive proof of malicious behavior alone and could result in unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"systeminfo\" command to retrieve information",
      "answer": "In order to detect the usage of the \"systeminfo\" command to retrieve information, you should: Monitor the creation of processes on Windows systems, focusing on any process where the image name ends with '\\systeminfo.exe' or the original file name is identified as 'sysinfo.exe'. The detection of these particular process creations is a sign that the \"systeminfo\" command may be being used. This technique is associated with obtaining system information, which can be indicative of reconnaissance activity. The level of certainty for this detection is considered low, implying that while these indicators can suggest suspicious activity, they are not definitive proof of malicious behavior alone and could result in unknown false positives."
    }
  },
  {
    "instruction": "How can I detect: automated lateral movement by Turla group",
    "context": "",
    "output": "In order to detect automated lateral movement by Turla group, you should: Look for the creation of processes in Windows environments that could indicate unauthorized access or movements across your network. Take particular notice if you see the command line being used to connect to a Domain Controller using 'net use' with a specific path and password, as well as commands searching for documents across drives or executable files in the temporary folder. These patterns are critical to identify as they could signify the Turla group\u2019s tactics to exploit network credentials and search for sensitive files or deploy malicious executables, aligning with intrusion techniques related to discovery and lateral movement within a compromised network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "automated lateral movement by Turla group",
      "answer": "In order to detect automated lateral movement by Turla group, you should: Look for the creation of processes in Windows environments that could indicate unauthorized access or movements across your network. Take particular notice if you see the command line being used to connect to a Domain Controller using 'net use' with a specific path and password, as well as commands searching for documents across drives or executable files in the temporary folder. These patterns are critical to identify as they could signify the Turla group\u2019s tactics to exploit network credentials and search for sensitive files or deploy malicious executables, aligning with intrusion techniques related to discovery and lateral movement within a compromised network."
    }
  },
  {
    "instruction": "How can I detect: password change for the logged-on user's via \"ksetup.exe\"",
    "context": "",
    "output": "In order to detect password change for the logged-on user's via \"ksetup.exe\", you should: Monitor for the creation of processes on Windows systems, specifically focusing on instances where the process being created ends with '\\ksetup.exe' or has 'ksetup.exe' as its original filename. Additionally, keep an eye out for command-line parameters containing ' /ChangePassword ', as this indicates an attempt to change a password using \"ksetup.exe\". This observation is crucial as it directly relates to detecting unauthorized or malicious password changes. Take note that any matches to these criteria warrant a medium level of concern, though be aware that not all detections might represent malicious activity and there could be unknown benign cases.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "password change for the logged-on user's via \"ksetup.exe\"",
      "answer": "In order to detect password change for the logged-on user's via \"ksetup.exe\", you should: Monitor for the creation of processes on Windows systems, specifically focusing on instances where the process being created ends with '\\ksetup.exe' or has 'ksetup.exe' as its original filename. Additionally, keep an eye out for command-line parameters containing ' /ChangePassword ', as this indicates an attempt to change a password using \"ksetup.exe\". This observation is crucial as it directly relates to detecting unauthorized or malicious password changes. Take note that any matches to these criteria warrant a medium level of concern, though be aware that not all detections might represent malicious activity and there could be unknown benign cases."
    }
  },
  {
    "instruction": "Explain how should I detect the following: possible collection of data from the clipboard via execution of the osascript binary",
    "context": "",
    "output": "In order to detect possible collection of data from the clipboard via execution of the osascript binary, you should: Monitor the creation of processes on macOS systems, paying special attention to instances where the command line contains 'osascript' alongside ' -e ' and 'clipboard'. This indicates the osascript binary is being used, possibly to manipulate or access the clipboard contents. Given the context, such activity is regarded with high suspicion, and under normal circumstances, false positives are considered unlikely. It\u2019s crucial to capture and review the full command line arguments in these events to understand the full scope of the action being performed. This detection strategy is crucial for identifying potential unauthorized access to sensitive data stored temporarily in the clipboard by attackers leveraging macOS system functionalities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible collection of data from the clipboard via execution of the osascript binary",
      "answer": "In order to detect possible collection of data from the clipboard via execution of the osascript binary, you should: Monitor the creation of processes on macOS systems, paying special attention to instances where the command line contains 'osascript' alongside ' -e ' and 'clipboard'. This indicates the osascript binary is being used, possibly to manipulate or access the clipboard contents. Given the context, such activity is regarded with high suspicion, and under normal circumstances, false positives are considered unlikely. It\u2019s crucial to capture and review the full command line arguments in these events to understand the full scope of the action being performed. This detection strategy is crucial for identifying potential unauthorized access to sensitive data stored temporarily in the clipboard by attackers leveraging macOS system functionalities."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious shell commands or program code that may be executed or used in command line to establish a reverse shell",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious shell commands or program code that may be executed or used in command line to establish a reverse shell, you should monitor Linux systems for occurrences of specific strings within their logs. These strings represent commands or pieces of code often used by attackers to gain unauthorized access or control over a system remotely. They typically involve initiating connections from the compromised system to the attacker's system using TCP or UDP protocols, thus creating a reverse shell.\n\nKey indicators include commands that initiate TCP or UDP connections (/inet/tcp/0/, /dev/tcp/, /dev/udp/), utilize netcat (nc) with execution flags such as '-e', or manipulate file descriptors and network sockets for bash and sh shells to redirect input and output, establishing a persistent backdoor. Look for commands that involve creating named pipes with mknod and using them with netcat, or sophisticated use of socket programming in various programming languages to open connections and execute remote commands.\n\nThe detection of commands involving the redirection of shells to network sockets (bash -i, sh -i, exec 5<>/dev/tcp/), execution of interactive shells over network connections with advanced features (socat exec), or the presentation of a shell interface over network protocols indicates potential reverse shell activity. Additionally, commands that explicitly attempt to clean up evidence (modifying HISTFILE to /dev/null) or involve listening on ports with netcat in verbose mode are strong indicators of malicious intent.\n\nSpecial attention should be given to code snippets that perform direct socket manipulation or use high-level programming constructs to create network connections for command execution. This includes, but is not limited to, using Python or Perl for socket creation and duplication, or leveraging PowerShell to encode and send commands over network streams.\n\nWhile these indicators are strong signs of an attempt to establish a reverse shell, it is important to consider that there could be false positives, particularly in environments where such techniques are used for legitimate purposes. The level of alert for these detections is categorized as high, given the potential for significant impact on security through unauthorized remote access.\n\nThe associated techniques and tactics include the MITRE ATT&CK framework's categories such as Execution, Persistence, Privilege Escalation, and Defense Evasion, given that attackers may use these methods not only to gain initial access but also to maintain persistence, escalate privileges, or evade detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious shell commands or program code that may be executed or used in command line to establish a reverse shell",
      "answer": "In order to detect suspicious shell commands or program code that may be executed or used in command line to establish a reverse shell, you should monitor Linux systems for occurrences of specific strings within their logs. These strings represent commands or pieces of code often used by attackers to gain unauthorized access or control over a system remotely. They typically involve initiating connections from the compromised system to the attacker's system using TCP or UDP protocols, thus creating a reverse shell.\n\nKey indicators include commands that initiate TCP or UDP connections (/inet/tcp/0/, /dev/tcp/, /dev/udp/), utilize netcat (nc) with execution flags such as '-e', or manipulate file descriptors and network sockets for bash and sh shells to redirect input and output, establishing a persistent backdoor. Look for commands that involve creating named pipes with mknod and using them with netcat, or sophisticated use of socket programming in various programming languages to open connections and execute remote commands.\n\nThe detection of commands involving the redirection of shells to network sockets (bash -i, sh -i, exec 5<>/dev/tcp/), execution of interactive shells over network connections with advanced features (socat exec), or the presentation of a shell interface over network protocols indicates potential reverse shell activity. Additionally, commands that explicitly attempt to clean up evidence (modifying HISTFILE to /dev/null) or involve listening on ports with netcat in verbose mode are strong indicators of malicious intent.\n\nSpecial attention should be given to code snippets that perform direct socket manipulation or use high-level programming constructs to create network connections for command execution. This includes, but is not limited to, using Python or Perl for socket creation and duplication, or leveraging PowerShell to encode and send commands over network streams.\n\nWhile these indicators are strong signs of an attempt to establish a reverse shell, it is important to consider that there could be false positives, particularly in environments where such techniques are used for legitimate purposes. The level of alert for these detections is categorized as high, given the potential for significant impact on security through unauthorized remote access.\n\nThe associated techniques and tactics include the MITRE ATT&CK framework's categories such as Execution, Persistence, Privilege Escalation, and Defense Evasion, given that attackers may use these methods not only to gain initial access but also to maintain persistence, escalate privileges, or evade detection."
    }
  },
  {
    "instruction": "Please help me detect the following: Execution via SyncInvoke in CL_Invocation.ps1 module",
    "context": "",
    "output": "Sure!\nIn order to Detect Execution via SyncInvoke in CL_Invocation.ps1 module, you should monitor PowerShell script activities on Windows systems with a specific focus on the Script Block Logging feature. To effectively detect malicious activities, ensure that Script Block Logging is enabled to catch detailed execution traces of PowerShell scripts. Pay particular attention to PowerShell scripts that contain both the 'CL_Invocation.ps1' module and the 'SyncInvoke' method within their script blocks. The presence of these indicators suggests a high probability of an attack attempt leveraging the synchronous invocation capabilities in PowerShell for potentially malicious executions. Be wary as false positives can be indicated as \"Unknown\", meaning there might be legitimate uses of these indicators, so investigative judgment is required when these conditions are met.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Execution via SyncInvoke in CL_Invocation.ps1 module",
      "answer": "In order to Detect Execution via SyncInvoke in CL_Invocation.ps1 module, you should monitor PowerShell script activities on Windows systems with a specific focus on the Script Block Logging feature. To effectively detect malicious activities, ensure that Script Block Logging is enabled to catch detailed execution traces of PowerShell scripts. Pay particular attention to PowerShell scripts that contain both the 'CL_Invocation.ps1' module and the 'SyncInvoke' method within their script blocks. The presence of these indicators suggests a high probability of an attack attempt leveraging the synchronous invocation capabilities in PowerShell for potentially malicious executions. Be wary as false positives can be indicated as \"Unknown\", meaning there might be legitimate uses of these indicators, so investigative judgment is required when these conditions are met."
    }
  },
  {
    "instruction": "Explain how should I detect the following: removal of Sysmon, which could be a potential attempt at defense evasion",
    "context": "",
    "output": "In order to detect the removal of Sysmon, which could be a potential attempt at defense evasion, you should monitor Windows process creation logs for instances where processes named Sysmon64.exe or Sysmon.exe are started with command line parameters that include '-u' or '/u', which are used to uninstall Sysmon. Additionally, attention should be paid to the process description to identify any that are explicitly labeled as a 'System activity monitor'. These criteria help in identifying malicious activities aimed at evading defenses by uninstalling the Sysmon tool, a critical component for system monitoring and logging. Be aware, however, that legitimate administrators might sometimes use these commands to remove Sysmon for debugging or other benign purposes, which are considered acceptable false positives. Such events should be treated with high caution, as they could indicate an attacker's efforts to weaken the host's defenses by removing vital monitoring mechanisms, falling under the tactics of defense evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "removal of Sysmon, which could be a potential attempt at defense evasion",
      "answer": "In order to detect the removal of Sysmon, which could be a potential attempt at defense evasion, you should monitor Windows process creation logs for instances where processes named Sysmon64.exe or Sysmon.exe are started with command line parameters that include '-u' or '/u', which are used to uninstall Sysmon. Additionally, attention should be paid to the process description to identify any that are explicitly labeled as a 'System activity monitor'. These criteria help in identifying malicious activities aimed at evading defenses by uninstalling the Sysmon tool, a critical component for system monitoring and logging. Be aware, however, that legitimate administrators might sometimes use these commands to remove Sysmon for debugging or other benign purposes, which are considered acceptable false positives. Such events should be treated with high caution, as they could indicate an attacker's efforts to weaken the host's defenses by removing vital monitoring mechanisms, falling under the tactics of defense evasion."
    }
  },
  {
    "instruction": "How to detect: a DHCP server in which a specified Callout DLL (in registry) was loaded",
    "context": "",
    "output": "In order to detect a DHCP server in which a specified Callout DLL (in registry) was loaded, you should monitor Windows system logs for events with EventID 1033 that are generated by the Microsoft-Windows-DHCP-Server provider. This detection focuses on identifying instances where a Callout DLL, which is specified in the registry, has been loaded by the DHCP server. Such an event could indicate potentially malicious activity, as attackers may attempt to load malicious DLLs to interfere with or control DHCP server operations. It's important to note that while this detection is critical, there may still be scenarios where false positives occur, and these are currently categorized as unknown. Therefore, thorough investigation of each detection is recommended to confirm or rule out malicious activity. The severity level for this detection is high, underscoring the importance of promptly addressing any incidents that match the detection criteria.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "a DHCP server in which a specified Callout DLL (in registry) was loaded",
      "answer": "In order to detect a DHCP server in which a specified Callout DLL (in registry) was loaded, you should monitor Windows system logs for events with EventID 1033 that are generated by the Microsoft-Windows-DHCP-Server provider. This detection focuses on identifying instances where a Callout DLL, which is specified in the registry, has been loaded by the DHCP server. Such an event could indicate potentially malicious activity, as attackers may attempt to load malicious DLLs to interfere with or control DHCP server operations. It's important to note that while this detection is critical, there may still be scenarios where false positives occur, and these are currently categorized as unknown. Therefore, thorough investigation of each detection is recommended to confirm or rule out malicious activity. The severity level for this detection is high, underscoring the importance of promptly addressing any incidents that match the detection criteria."
    }
  },
  {
    "instruction": "Please help me detect the following: loading of essential DLLs used by PowerShell, but not by the process powershell.exe. behaviour similar to meterpreter's \"load powershell\" extension.",
    "context": "",
    "output": "Sure!\nIn order to detect loading of essential DLLs used by PowerShell, but not by the process powershell.exe, detects behavior similar to meterpreter's \"load powershell\" extension, you should monitor Windows images being loaded that match the patterns indicative of PowerShell usage without involving the standard PowerShell executables. Specifically, this involves looking for the loading of the `System.Management.Automation.dll` or `System.Management.Automation.ni.dll`. Pay special attention to any instance where these DLLs are loaded, but exclude cases where they are loaded by a set of known, generally trustworthy executables, which include various PowerShell versions, DSA Crypto executables, and several Windows System32 and SysWOW64 specific utilities and scripts, among others. Also, exclude loading instances by specific Microsoft .NET Framework directories, Microsoft SQL Server Management Studio, SQL Server tools, Citrix, Microsoft Visual Studio, and the Nextron systems. Monitoring should be applied cautiously to reduce false positive alerts, which are likely minimal and mostly restricted to certain .NET binaries on user workstations or by Microsoft SQL Server Management Studio. This monitoring is of a medium level of concern due to the potential use of PowerShell for malicious purposes while circumventing detection by not directly invoking known PowerShell processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loading of essential DLLs used by PowerShell, but not by the process powershell.exe. behaviour similar to meterpreter's \"load powershell\" extension.",
      "answer": "In order to detect loading of essential DLLs used by PowerShell, but not by the process powershell.exe, detects behavior similar to meterpreter's \"load powershell\" extension, you should monitor Windows images being loaded that match the patterns indicative of PowerShell usage without involving the standard PowerShell executables. Specifically, this involves looking for the loading of the `System.Management.Automation.dll` or `System.Management.Automation.ni.dll`. Pay special attention to any instance where these DLLs are loaded, but exclude cases where they are loaded by a set of known, generally trustworthy executables, which include various PowerShell versions, DSA Crypto executables, and several Windows System32 and SysWOW64 specific utilities and scripts, among others. Also, exclude loading instances by specific Microsoft .NET Framework directories, Microsoft SQL Server Management Studio, SQL Server tools, Citrix, Microsoft Visual Studio, and the Nextron systems. Monitoring should be applied cautiously to reduce false positive alerts, which are likely minimal and mostly restricted to certain .NET binaries on user workstations or by Microsoft SQL Server Management Studio. This monitoring is of a medium level of concern due to the potential use of PowerShell for malicious purposes while circumventing detection by not directly invoking known PowerShell processes."
    }
  },
  {
    "instruction": "How to detect: file and folder permission changes.",
    "context": "",
    "output": "In order to detect file and folder permission changes, you should: Monitor logs generated by the Auditd service on Linux systems for execution (EXECVE) events where the command executed involves changing file or folder permissions or ownership. Specifically, look for instances where the command includes 'chmod' or 'chown', as these are indicative of attempts to modify the permissions or ownership of files and folders. It's important to note that changes to file and folder permissions and ownership are common in both benign and malicious activities. Therefore, occurrences of these commands might not always signify an attack, and can often be a part of regular system maintenance or user interactions with file permissions. Hence, while monitoring for these commands, it's essential to consider the context in which they are used to differentiate between normal behavior and potential security threats. The detection of such activities has been categorized with a low level of alert due to the possibility of false positives, which include regular user interactions with file permissions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "file and folder permission changes.",
      "answer": "In order to detect file and folder permission changes, you should: Monitor logs generated by the Auditd service on Linux systems for execution (EXECVE) events where the command executed involves changing file or folder permissions or ownership. Specifically, look for instances where the command includes 'chmod' or 'chown', as these are indicative of attempts to modify the permissions or ownership of files and folders. It's important to note that changes to file and folder permissions and ownership are common in both benign and malicious activities. Therefore, occurrences of these commands might not always signify an attack, and can often be a part of regular system maintenance or user interactions with file permissions. Hence, while monitoring for these commands, it's essential to consider the context in which they are used to differentiate between normal behavior and potential security threats. The detection of such activities has been categorized with a low level of alert due to the possibility of false positives, which include regular user interactions with file permissions."
    }
  },
  {
    "instruction": "Explain how should I detect the following: exploitation of a security bypass and elevation of privilege vulnerability with Authentication Negotiation by using weak RC4-HMAC negotiation",
    "context": "",
    "output": "In order to detect the exploitation of a security bypass and elevation of privilege vulnerability with Authentication Negotiation by using weak RC4-HMAC negotiation, you should: Monitor Windows System logs for specific error events that could indicate an attempt at exploiting this vulnerability. Focus on logs where the EventID is 42, which signals a relevant event, and where the Provider_Name is marked as 'Kerberos-Key-Distribution-Center'. This provider name suggests the event is directly related to Kerberos authentication mechanisms, which are typically targeted in such attacks. Additionally, only consider log entries with a Level of 2, indicating they are error messages. Such errors could be indicative of abnormal or malicious negotiation attempts using the weaker RC4-HMAC protocol, attempting to bypass security or elevate privileges illegitimately. It is important to note that there might be instances where such detections are false positives; however, given the high severity level of this monitoring strategy, each alert should be thoroughly investigated to confirm if it's an actual exploit attempt or a benign incident.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of a security bypass and elevation of privilege vulnerability with Authentication Negotiation by using weak RC4-HMAC negotiation",
      "answer": "In order to detect the exploitation of a security bypass and elevation of privilege vulnerability with Authentication Negotiation by using weak RC4-HMAC negotiation, you should: Monitor Windows System logs for specific error events that could indicate an attempt at exploiting this vulnerability. Focus on logs where the EventID is 42, which signals a relevant event, and where the Provider_Name is marked as 'Kerberos-Key-Distribution-Center'. This provider name suggests the event is directly related to Kerberos authentication mechanisms, which are typically targeted in such attacks. Additionally, only consider log entries with a Level of 2, indicating they are error messages. Such errors could be indicative of abnormal or malicious negotiation attempts using the weaker RC4-HMAC protocol, attempting to bypass security or elevate privileges illegitimately. It is important to note that there might be instances where such detections are false positives; however, given the high severity level of this monitoring strategy, each alert should be thoroughly investigated to confirm if it's an actual exploit attempt or a benign incident."
    }
  },
  {
    "instruction": "How to detect: potential execution of the PowerShell script POWERTRASH",
    "context": "",
    "output": "In order to detect potential execution of the PowerShell script POWERTRASH, you should: monitor PowerShell script activities on Windows systems, particularly focusing on scripts that involve certain indicative operations. Look for scripts that include the usage of 'IO.Compression.DeflateStream' and 'IO.MemoryStream', which suggest data compression and memory operations respectively, typically to evade detection or analysis. Additionally, the presence of '::FromBase64String' indicates data is being decoded from Base64, which is a common tactic to obfuscate malicious payloads. The usage of 'GetDelegateForFunctionPointer' and '.Invoke()' are indicative of attempts to execute code dynamically, further suggesting an attempt to bypass conventional execution controls. Finally, references to 'GlobalAssemblyCache' could denote attempts to interfere with, or leverage, .NET's assembly caching for malicious purposes. Monitoring for combinations of these script characteristics within PowerShell scripts contributes to identifying suspicious activities that align with tactics and techniques associated with POWERTRASH execution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential execution of the PowerShell script POWERTRASH",
      "answer": "In order to detect potential execution of the PowerShell script POWERTRASH, you should: monitor PowerShell script activities on Windows systems, particularly focusing on scripts that involve certain indicative operations. Look for scripts that include the usage of 'IO.Compression.DeflateStream' and 'IO.MemoryStream', which suggest data compression and memory operations respectively, typically to evade detection or analysis. Additionally, the presence of '::FromBase64String' indicates data is being decoded from Base64, which is a common tactic to obfuscate malicious payloads. The usage of 'GetDelegateForFunctionPointer' and '.Invoke()' are indicative of attempts to execute code dynamically, further suggesting an attempt to bypass conventional execution controls. Finally, references to 'GlobalAssemblyCache' could denote attempts to interfere with, or leverage, .NET's assembly caching for malicious purposes. Monitoring for combinations of these script characteristics within PowerShell scripts contributes to identifying suspicious activities that align with tactics and techniques associated with POWERTRASH execution."
    }
  },
  {
    "instruction": "Explain how should I detect the following: PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking.",
    "context": "",
    "output": "In order to Detects PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking, you should: Monitor Windows PowerShell modules for any instances where the contents of the module are explicitly set to contain \"function Get-VMRemoteFXPhysicalVideoAdapter\". This specific function is a key indicator that an attacker may be attempting to exploit a known vulnerability associated with the RemoteFXvGPUDisablement.exe binary. Such an attack involves module load-order hijacking which can lead to the potential execution of unauthorized or malicious code. Due to the nature of this attack vector, logs from PowerShell modules (ps_module) should be scrutinized for any payload containing the specified function. Given the context, this activity is considered to possess a high level of threat. However, it is worth noting that there may be instances where the detection could raise false positives, although such occurrences are currently unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking.",
      "answer": "In order to Detects PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking, you should: Monitor Windows PowerShell modules for any instances where the contents of the module are explicitly set to contain \"function Get-VMRemoteFXPhysicalVideoAdapter\". This specific function is a key indicator that an attacker may be attempting to exploit a known vulnerability associated with the RemoteFXvGPUDisablement.exe binary. Such an attack involves module load-order hijacking which can lead to the potential execution of unauthorized or malicious code. Due to the nature of this attack vector, logs from PowerShell modules (ps_module) should be scrutinized for any payload containing the specified function. Given the context, this activity is considered to possess a high level of threat. However, it is worth noting that there may be instances where the detection could raise false positives, although such occurrences are currently unknown."
    }
  },
  {
    "instruction": "How can I detect: PowerShell script execution from Alternate Data Stream (ADS)",
    "context": "",
    "output": "In order to detect PowerShell script execution from Alternate Data Stream (ADS), you should: Monitor process creation events on Windows systems, specifically focusing on instances where PowerShell (`powershell.exe` or the newer version `pwsh.exe`) is launched either by itself or by another instance of PowerShell. The critical aspect to watch for in the command line arguments is the use of `Get-Content` combined with the `-Stream` parameter, which is a common technique to interact with data in Alternate Data Streams, often used for stealthy execution of scripts. Due to the nature of this activity, it is flagged with a high level of concern, although there might be legitimate uses of these command line parameters that could generate false positive alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell script execution from Alternate Data Stream (ADS)",
      "answer": "In order to detect PowerShell script execution from Alternate Data Stream (ADS), you should: Monitor process creation events on Windows systems, specifically focusing on instances where PowerShell (`powershell.exe` or the newer version `pwsh.exe`) is launched either by itself or by another instance of PowerShell. The critical aspect to watch for in the command line arguments is the use of `Get-Content` combined with the `-Stream` parameter, which is a common technique to interact with data in Alternate Data Streams, often used for stealthy execution of scripts. Due to the nature of this activity, it is flagged with a high level of concern, although there might be legitimate uses of these command line parameters that could generate false positive alerts."
    }
  },
  {
    "instruction": "Please help me detect the following: HandleKatz opening LSASS to duplicate its handle to later dump the memory without opening any new handles",
    "context": "",
    "output": "Sure!\nIn order to detect HandleKatz opening LSASS to duplicate its handle to later dump the memory without opening any new handles, you should: Monitor Windows process access logs specifically focusing on accesses to the LSASS (Local Security Authority Subsystem Service) process. Look for any process that ends its target image name with '\\lsass.exe', signifying it's interacting with LSASS, and where the granted access rights are specifically '0x1440'. This access code indicates the process is requesting permissions only for duplicating handles (PROCESS_DUP_HANDLE), querying limited information (PROCESS_QUERY_LIMITED_INFORMATION), and querying information (PROCESS_QUERY_INFORMATION) about LSASS, which are minimal and stealthy permissions for an attack. Also, scrutinize the call trace logs for entries that start with 'C:\\Windows\\System32\\ntdll.dll+', contain an unknown marker '|UNKNOWN(', and end with a parenthesis ')'. This pattern in the call trace suggests an anomalous or injected call possibly attempting to manipulate LSASS in a covert manner, characteristic of HandleKatz operation. Paying attention to these specific indicators within the respective Windows log sources is crucial for early detection of this sophisticated attack tactic.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "HandleKatz opening LSASS to duplicate its handle to later dump the memory without opening any new handles",
      "answer": "In order to detect HandleKatz opening LSASS to duplicate its handle to later dump the memory without opening any new handles, you should: Monitor Windows process access logs specifically focusing on accesses to the LSASS (Local Security Authority Subsystem Service) process. Look for any process that ends its target image name with '\\lsass.exe', signifying it's interacting with LSASS, and where the granted access rights are specifically '0x1440'. This access code indicates the process is requesting permissions only for duplicating handles (PROCESS_DUP_HANDLE), querying limited information (PROCESS_QUERY_LIMITED_INFORMATION), and querying information (PROCESS_QUERY_INFORMATION) about LSASS, which are minimal and stealthy permissions for an attack. Also, scrutinize the call trace logs for entries that start with 'C:\\Windows\\System32\\ntdll.dll+', contain an unknown marker '|UNKNOWN(', and end with a parenthesis ')'. This pattern in the call trace suggests an anomalous or injected call possibly attempting to manipulate LSASS in a covert manner, characteristic of HandleKatz operation. Paying attention to these specific indicators within the respective Windows log sources is crucial for early detection of this sophisticated attack tactic."
    }
  },
  {
    "instruction": "How can I detect: repeated failed (outgoing) attempts to mount a hidden share",
    "context": "",
    "output": "In order to detect repeated failed (outgoing) attempts to mount a hidden share, you should monitor security events from the Windows SMB client service. Focus on events with the EventID 31010, which signal such attempts. Specifically, look for attempts to access shares that are named with a trailing dollar sign ('$'), indicating they are hidden shares. If you observe more than 10 of these attempts within a 1-minute timeframe, it's indicative of a suspicious activity that may represent an adversary trying to gain access to sensitive areas of the network. Capture and review the ShareName involved in these attempts to understand the target of these access attempts better.\n\nHowever, keep in mind that not all activities caught by this monitoring might be malicious. Legitimate administrative activities often necessitate accessing hidden shares, and sometimes scripts designed to automate tasks might mistakenly attempt to access these shares repeatedly, leading to false positives. The severity level for alerts generated based on this monitoring is considered medium, reflecting the balance between the potential for malicious activity and the likelihood of legitimate explanations for the detected behavior. \n\nThis detection strategy aligns with mitigating tactics and techniques that include, but are not limited to, Initial Access and Execution, as attackers might be attempting to use compromised credentials to access hidden network shares during their campaign.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "repeated failed (outgoing) attempts to mount a hidden share",
      "answer": "In order to detect repeated failed (outgoing) attempts to mount a hidden share, you should monitor security events from the Windows SMB client service. Focus on events with the EventID 31010, which signal such attempts. Specifically, look for attempts to access shares that are named with a trailing dollar sign ('$'), indicating they are hidden shares. If you observe more than 10 of these attempts within a 1-minute timeframe, it's indicative of a suspicious activity that may represent an adversary trying to gain access to sensitive areas of the network. Capture and review the ShareName involved in these attempts to understand the target of these access attempts better.\n\nHowever, keep in mind that not all activities caught by this monitoring might be malicious. Legitimate administrative activities often necessitate accessing hidden shares, and sometimes scripts designed to automate tasks might mistakenly attempt to access these shares repeatedly, leading to false positives. The severity level for alerts generated based on this monitoring is considered medium, reflecting the balance between the potential for malicious activity and the likelihood of legitimate explanations for the detected behavior. \n\nThis detection strategy aligns with mitigating tactics and techniques that include, but are not limited to, Initial Access and Execution, as attackers might be attempting to use compromised credentials to access hidden network shares during their campaign."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of the LOLBIN jsc.exe used by .NET to compile javascript code to .exe or .dll format",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of the LOLBIN jsc.exe used by .NET to compile javascript code to .exe or .dll format, you should: Look for instances where the Windows process creation logs indicate the activation of the executable 'jsc.exe', a legitimate Windows utility that might be abused to compile .js (JavaScript) files into executable formats (.exe or .dll). Specifically, focus on identifying process creation events where the image path ends with '\\jsc.exe' and the command line includes '.js', suggesting the utility is being used in a potentially malicious context to manipulate JavaScript. Although the certainty of these detection criteria being indicative of malicious use remains medium, with unknown false positives, the outlined method reliably flags suspicious activities aligning with misuse of system tools for compiling malicious code.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the LOLBIN jsc.exe used by .NET to compile javascript code to .exe or .dll format",
      "answer": "In order to detect the execution of the LOLBIN jsc.exe used by .NET to compile javascript code to .exe or .dll format, you should: Look for instances where the Windows process creation logs indicate the activation of the executable 'jsc.exe', a legitimate Windows utility that might be abused to compile .js (JavaScript) files into executable formats (.exe or .dll). Specifically, focus on identifying process creation events where the image path ends with '\\jsc.exe' and the command line includes '.js', suggesting the utility is being used in a potentially malicious context to manipulate JavaScript. Although the certainty of these detection criteria being indicative of malicious use remains medium, with unknown false positives, the outlined method reliably flags suspicious activities aligning with misuse of system tools for compiling malicious code."
    }
  },
  {
    "instruction": "How to detect: potential C2 communication related to Devil Bait malware",
    "context": "",
    "output": "In order to detect potential C2 communication related to Devil Bait malware, you should: focus on monitoring proxy logs for specific patterns of HTTP GET requests. Look for requests that include the following indicators in their URL: '/cross.php?op=', '&dt=', and '&uid='. These parameters within the requests are characteristic of communication patterns associated with Devil Bait malware, attempting to reach out to its command and control servers. This type of analysis is crucial for identifying potential breaches, as the detection of these specific request patterns, especially when they are found together in proxy logs, is a strong indicator of malicious activity linked to Devil Bait malware. False positives are considered unlikely due to the specificity of these patterns, indicating that such detection should be treated with a high level of concern.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential C2 communication related to Devil Bait malware",
      "answer": "In order to detect potential C2 communication related to Devil Bait malware, you should: focus on monitoring proxy logs for specific patterns of HTTP GET requests. Look for requests that include the following indicators in their URL: '/cross.php?op=', '&dt=', and '&uid='. These parameters within the requests are characteristic of communication patterns associated with Devil Bait malware, attempting to reach out to its command and control servers. This type of analysis is crucial for identifying potential breaches, as the detection of these specific request patterns, especially when they are found together in proxy logs, is a strong indicator of malicious activity linked to Devil Bait malware. False positives are considered unlikely due to the specificity of these patterns, indicating that such detection should be treated with a high level of concern."
    }
  },
  {
    "instruction": "Can you explain how to detect: specific command line execution used by FIN7 as reported by WithSecureLabs for reconnaissance and POWERTRASH execution",
    "context": "",
    "output": "Certainly!\n\nIn order to detect specific command line execution used by FIN7 as reported by WithSecureLabs for reconnaissance and POWERTRASH execution, you should monitor process creation logs on Windows systems for command line executions that match specific patterns indicating a probable attack. The detection focuses on two main command line patterns. \n\nThe first pattern to watch out for includes command lines that contain all of the following elements: '-noni -nop -exe bypass -f \\\\', and also reference 'ADMIN$'. This pattern suggests an attempt to bypass execution policies, likely aiming at remote execution or elevation of privileges, part of reconnaissance activities or initial execution phases of an attack.\n\nThe second pattern of interest includes command lines that contain all elements: '-ex bypass -noprof -nolog -nonint -f', followed by a reference to 'C:\\Windows\\Temp\\'. This pattern indicates an attempt to execute scripts or commands in a way that avoids logging and profiling, reducing the visibility of the attack. The use of the Windows temporary directory implies an attempt to execute or drop malicious scripts or payloads, which is typical for initial access or execution phases of an attack, including the deployment of the POWERTRASH malware.\n\nGiven the specific and sophisticated nature of these command line executions, detections tied to these patterns are considered high level, with false positives being unlikely. Monitoring for these patterns can significantly aid in identifying activities associated with the FIN7 group, focusing on reconnaissance, and execution tactics, techniques, and procedures.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific command line execution used by FIN7 as reported by WithSecureLabs for reconnaissance and POWERTRASH execution",
      "answer": "In order to detect specific command line execution used by FIN7 as reported by WithSecureLabs for reconnaissance and POWERTRASH execution, you should monitor process creation logs on Windows systems for command line executions that match specific patterns indicating a probable attack. The detection focuses on two main command line patterns. \n\nThe first pattern to watch out for includes command lines that contain all of the following elements: '-noni -nop -exe bypass -f \\\\', and also reference 'ADMIN$'. This pattern suggests an attempt to bypass execution policies, likely aiming at remote execution or elevation of privileges, part of reconnaissance activities or initial execution phases of an attack.\n\nThe second pattern of interest includes command lines that contain all elements: '-ex bypass -noprof -nolog -nonint -f', followed by a reference to 'C:\\Windows\\Temp\\'. This pattern indicates an attempt to execute scripts or commands in a way that avoids logging and profiling, reducing the visibility of the attack. The use of the Windows temporary directory implies an attempt to execute or drop malicious scripts or payloads, which is typical for initial access or execution phases of an attack, including the deployment of the POWERTRASH malware.\n\nGiven the specific and sophisticated nature of these command line executions, detections tied to these patterns are considered high level, with false positives being unlikely. Monitoring for these patterns can significantly aid in identifying activities associated with the FIN7 group, focusing on reconnaissance, and execution tactics, techniques, and procedures."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task, you should monitor for specific event IDs and file paths that indicate the creation of a task which triggers the execution of programs not typically associated with scheduled tasks. \n\nFocusing on the Windows Task Scheduler service, especially looking for Event ID 129, which signifies the creation of a task process, is crucial. The detection is more effective if the Task Scheduler's operational logs are enabled, as they are disabled by default. \n\nPay particular attention to tasks that are initiating programs such as Calculator, Command Scripting Utility (CScript), Microsoft HTML Application Host (mshta), Microsoft Paint, Notepad, Microsoft Register Server (regsvr32), and Windows Script Host (wscript). These applications are generally not expected to be launched via scheduled tasks in most secure environments, their usage in such a manner can signify malicious intent, like an attacker seeking to execute code or scripts surreptitiously.\n\nHowever, it's important to note that some legitimate tasks might use these programs. Therefore, an analysis that considers the context in which these applications are used, and possibly excluding known and trusted tasks that use them, is crucial to reduce false positives and focus on genuinely suspicious activity. This nuanced approach is necessary to differentiate between benign and malicious task creations effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task",
      "answer": "In order to detect the execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task, you should monitor for specific event IDs and file paths that indicate the creation of a task which triggers the execution of programs not typically associated with scheduled tasks. \n\nFocusing on the Windows Task Scheduler service, especially looking for Event ID 129, which signifies the creation of a task process, is crucial. The detection is more effective if the Task Scheduler's operational logs are enabled, as they are disabled by default. \n\nPay particular attention to tasks that are initiating programs such as Calculator, Command Scripting Utility (CScript), Microsoft HTML Application Host (mshta), Microsoft Paint, Notepad, Microsoft Register Server (regsvr32), and Windows Script Host (wscript). These applications are generally not expected to be launched via scheduled tasks in most secure environments, their usage in such a manner can signify malicious intent, like an attacker seeking to execute code or scripts surreptitiously.\n\nHowever, it's important to note that some legitimate tasks might use these programs. Therefore, an analysis that considers the context in which these applications are used, and possibly excluding known and trusted tasks that use them, is crucial to reduce false positives and focus on genuinely suspicious activity. This nuanced approach is necessary to differentiate between benign and malicious task creations effectively."
    }
  },
  {
    "instruction": "How to detect: Obfuscated Powershell via use Clip.exe in Scripts",
    "context": "",
    "output": "In order to Detect Obfuscated Powershell via use Clip.exe in Scripts, you should: Focus on monitoring PowerShell script activities within Windows environments, specifically targeting instances where script block logging is enabled. This detection strategy hinges on identifying instances within the PowerShell scripts that involve the usage of the \"echo\" command followed by the invocation of \"clip.exe\" or variations of the \"Invoke\" command, which are typically leveraged together in an obfuscated manner to manipulate the clipboard for potentially malicious purposes. Such patterns are indicative of attempts to obfuscate PowerShell scripts, potentially to bypass security measures or perform surreptitious activities. The detection criteria use regular expression matching to identify these suspicious combinations within script text. Given the high level of concern associated with this behavior, there are no known safe instances (false positives) predetermined, signifying the critical need for immediate investigation upon detection of such patterns. This monitoring process is pertinent to environments that utilize PowerShell for scripting and have script block logging feature enabled, as it forms the foundational basis for logging the detailed execution of PowerShell scripts, thereby enabling the effective detection of these obfuscated scripts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via use Clip.exe in Scripts",
      "answer": "In order to Detect Obfuscated Powershell via use Clip.exe in Scripts, you should: Focus on monitoring PowerShell script activities within Windows environments, specifically targeting instances where script block logging is enabled. This detection strategy hinges on identifying instances within the PowerShell scripts that involve the usage of the \"echo\" command followed by the invocation of \"clip.exe\" or variations of the \"Invoke\" command, which are typically leveraged together in an obfuscated manner to manipulate the clipboard for potentially malicious purposes. Such patterns are indicative of attempts to obfuscate PowerShell scripts, potentially to bypass security measures or perform surreptitious activities. The detection criteria use regular expression matching to identify these suspicious combinations within script text. Given the high level of concern associated with this behavior, there are no known safe instances (false positives) predetermined, signifying the critical need for immediate investigation upon detection of such patterns. This monitoring process is pertinent to environments that utilize PowerShell for scripting and have script block logging feature enabled, as it forms the foundational basis for logging the detailed execution of PowerShell scripts, thereby enabling the effective detection of these obfuscated scripts."
    }
  },
  {
    "instruction": "How to detect: Exports the target Registry key and hides it in the specified alternate data stream.",
    "context": "",
    "output": "In order to exports the target Registry key and hides it in the specified alternate data stream, you should: Monitor the creation of stream hashes in Windows, particularly focusing on instances where the process image ends with '\\regedit.exe'. This specific activity can indicate an attempt to export a registry key and then conceal this export within an alternate data stream, a technique often used for stealth. Make sure to keep track of the target filename during such operations. While there might be legitimate uses of this process, due to its potential for misuse, such activities are flagged at a high level of concern and should be scrutinized.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Exports the target Registry key and hides it in the specified alternate data stream.",
      "answer": "In order to exports the target Registry key and hides it in the specified alternate data stream, you should: Monitor the creation of stream hashes in Windows, particularly focusing on instances where the process image ends with '\\regedit.exe'. This specific activity can indicate an attempt to export a registry key and then conceal this export within an alternate data stream, a technique often used for stealth. Make sure to keep track of the target filename during such operations. While there might be legitimate uses of this process, due to its potential for misuse, such activities are flagged at a high level of concern and should be scrutinized."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious PowerShell download command",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious PowerShell download commands, you should monitor Windows PowerShell modules for specific patterns of activity that indicate a potential security threat. Focus on identifying scripts that use the System.Net.WebClient class, particularly those that employ the methods .DownloadFile() or .DownloadString(). These methods are commonly utilized in scripts to download files or data from the Internet, which can be a legitimate activity but may also be associated with malicious operations, such as downloading malware or other unwanted content onto a system.\n\nTo ensure a comprehensive detection strategy, all related detection options within the Windows PowerShell module environment must be considered. Specifically, look for instances where the context information contains references to 'System.Net.WebClient', along with either '.DownloadFile(' or '.DownloadString(', as these are strong indicators of the download commands in question.\n\nIt is important to note, however, that there can be legitimate uses of these methods by PowerShell scripts, resulting in potential false positives. Such benign activities could involve scripts that download content from the Internet for valid reasons, such as software updates or retrieval of public data. Therefore, while monitoring for these indicators, it is crucial to consider the context in which these commands are used to differentiate between malicious and non-malicious intent.\n\nThis detection strategy is aligned with known MITRE ATT&CK tactics and techniques associated with the execution and command and control phases of an attack, highlighting the importance of vigilance against the misuse of PowerShell for downloading malicious content as part of broader cybersecurity threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious PowerShell download command",
      "answer": "In order to detect suspicious PowerShell download commands, you should monitor Windows PowerShell modules for specific patterns of activity that indicate a potential security threat. Focus on identifying scripts that use the System.Net.WebClient class, particularly those that employ the methods .DownloadFile() or .DownloadString(). These methods are commonly utilized in scripts to download files or data from the Internet, which can be a legitimate activity but may also be associated with malicious operations, such as downloading malware or other unwanted content onto a system.\n\nTo ensure a comprehensive detection strategy, all related detection options within the Windows PowerShell module environment must be considered. Specifically, look for instances where the context information contains references to 'System.Net.WebClient', along with either '.DownloadFile(' or '.DownloadString(', as these are strong indicators of the download commands in question.\n\nIt is important to note, however, that there can be legitimate uses of these methods by PowerShell scripts, resulting in potential false positives. Such benign activities could involve scripts that download content from the Internet for valid reasons, such as software updates or retrieval of public data. Therefore, while monitoring for these indicators, it is crucial to consider the context in which these commands are used to differentiate between malicious and non-malicious intent.\n\nThis detection strategy is aligned with known MITRE ATT&CK tactics and techniques associated with the execution and command and control phases of an attack, highlighting the importance of vigilance against the misuse of PowerShell for downloading malicious content as part of broader cybersecurity threats."
    }
  },
  {
    "instruction": "Please help me detect the following: potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\"",
    "context": "",
    "output": "Sure!\nIn order to detect potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\", you should: Monitor Windows image load events to identify instances where \"libvlc.dll\" is loaded outside the standard VLC installation paths. Specifically, look for events where a process has loaded \"libvlc.dll\" but ensure it is not loaded from either \"C:\\Program Files (x86)\\VideoLAN\\VLC\\\" or \"C:\\Program Files\\VideoLAN\\VLC\\\" directories. Be aware that false alerts may occur if the VLC media player is installed in a non-standard directory. This approach aims at spotting malicious activities where attackers might attempt to misuse \"libvlc.dll\" for nefarious purposes, leveraging DLL sideloading techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\"",
      "answer": "In order to detect potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\", you should: Monitor Windows image load events to identify instances where \"libvlc.dll\" is loaded outside the standard VLC installation paths. Specifically, look for events where a process has loaded \"libvlc.dll\" but ensure it is not loaded from either \"C:\\Program Files (x86)\\VideoLAN\\VLC\\\" or \"C:\\Program Files\\VideoLAN\\VLC\\\" directories. Be aware that false alerts may occur if the VLC media player is installed in a non-standard directory. This approach aims at spotting malicious activities where attackers might attempt to misuse \"libvlc.dll\" for nefarious purposes, leveraging DLL sideloading techniques."
    }
  },
  {
    "instruction": "Explain how should I detect the following: detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one",
    "context": "",
    "output": "In order to detect execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one, you should: Monitor SMB file service logs for specific patterns that indicate the use of remote execution tools such as psexec or paexec, which are often utilized by attackers to execute commands on remote systems. Focus on logs where the file path includes both backslashes \"\\\\\" and the special IPC$ share '\\IPC$', indicating an attempt to access administrative shares typical in lateral movement activities. Moreover, look for files with names ending in '-stdin', '-stdout', or '-stderr', which are indicative of input/output redirection commonly used by these tools. It's important to exclude any activity where the file name starts with 'PSEXESVC', as this is the default service name used by psexec for legitimate purposes. The detection of such activities is considered high priority due to the potential misuse for malicious purposes, particularly in lateral movement during an attack. Pay attention to any false positives that may arise, although they are currently unknown, and continuously refine detection methods to improve accuracy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one",
      "answer": "In order to detect execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one, you should: Monitor SMB file service logs for specific patterns that indicate the use of remote execution tools such as psexec or paexec, which are often utilized by attackers to execute commands on remote systems. Focus on logs where the file path includes both backslashes \"\\\\\" and the special IPC$ share '\\IPC$', indicating an attempt to access administrative shares typical in lateral movement activities. Moreover, look for files with names ending in '-stdin', '-stdout', or '-stderr', which are indicative of input/output redirection commonly used by these tools. It's important to exclude any activity where the file name starts with 'PSEXESVC', as this is the default service name used by psexec for legitimate purposes. The detection of such activities is considered high priority due to the potential misuse for malicious purposes, particularly in lateral movement during an attack. Pay attention to any false positives that may arise, although they are currently unknown, and continuously refine detection methods to improve accuracy."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of the \"reg.exe\" utility to disable PPL protection on the LSA process",
    "context": "",
    "output": "Sure!\nIn order to detect the usage of the \"reg.exe\" utility to disable PPL protection on the LSA process, you should: Monitor the creation of processes across Windows systems, focusing on instances where the \"reg.exe\" utility is involved. Specifically, look for processes whose image (executable path) ends with '\\reg.exe' or where the original file name is identified explicitly as 'reg.exe'. Further hone in on command line arguments connected to the Registry Editor actions that target the \u2018SYSTEM\\CurrentControlSet\\Control\\Lsa\u2019 path. These actions are particularly suspicious when they include a combination of adding a new entry (' add '), setting a value to 0 (' /d 0'), and involving the 'RunAsPPL' parameter (' /v RunAsPPL '). All these conditions must be met to trigger an alert. Given the specificity of these indicators, false positives are unlikely, and such detection should be treated with a high level of concern due to its implications on system security by tampering with Protected Process Light (PPL) configurations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"reg.exe\" utility to disable PPL protection on the LSA process",
      "answer": "In order to detect the usage of the \"reg.exe\" utility to disable PPL protection on the LSA process, you should: Monitor the creation of processes across Windows systems, focusing on instances where the \"reg.exe\" utility is involved. Specifically, look for processes whose image (executable path) ends with '\\reg.exe' or where the original file name is identified explicitly as 'reg.exe'. Further hone in on command line arguments connected to the Registry Editor actions that target the \u2018SYSTEM\\CurrentControlSet\\Control\\Lsa\u2019 path. These actions are particularly suspicious when they include a combination of adding a new entry (' add '), setting a value to 0 (' /d 0'), and involving the 'RunAsPPL' parameter (' /v RunAsPPL '). All these conditions must be met to trigger an alert. Given the specificity of these indicators, false positives are unlikely, and such detection should be treated with a high level of concern due to its implications on system security by tampering with Protected Process Light (PPL) configurations."
    }
  },
  {
    "instruction": "How to detect: deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group",
    "context": "",
    "output": "In order to detect the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group, you should: Monitor Windows process creation logs for occurrences where the process is `schtasks.exe`, which is indicative of task scheduling operations. Specifically, focus on command lines that include attempts to either delete (`/delete`) or change (`/change`) scheduled tasks, with a mandatory condition that these commands also specifically target the `\\Microsoft\\Windows\\Defrag\\ScheduledDefrag` task by using `/TN` (which specifies the task name). This detection points to the malicious tampering with scheduled defragmentation, a behavior observed in attacks attributed to the Slingshot APT group. Note that while this behavior is suspicious, there can be unknown legitimate reasons (false positives) for these operations, so it's classified with a medium level of severity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group",
      "answer": "In order to detect the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group, you should: Monitor Windows process creation logs for occurrences where the process is `schtasks.exe`, which is indicative of task scheduling operations. Specifically, focus on command lines that include attempts to either delete (`/delete`) or change (`/change`) scheduled tasks, with a mandatory condition that these commands also specifically target the `\\Microsoft\\Windows\\Defrag\\ScheduledDefrag` task by using `/TN` (which specifies the task name). This detection points to the malicious tampering with scheduled defragmentation, a behavior observed in attacks attributed to the Slingshot APT group. Note that while this behavior is suspicious, there can be unknown legitimate reasons (false positives) for these operations, so it's classified with a medium level of severity."
    }
  },
  {
    "instruction": "Explain how should I detect the following: disabling security tools",
    "context": "",
    "output": "In order to detect disabling security tools, you should monitor process creation logs in Linux systems for commands that indicate the stopping or disabling of critical security services. Specifically, look for commands that end the functioning of firewall using 'iptables' or 'ip6tables', either through direct calls to these services or via system configuration tools like 'service' or 'chkconfig'. Also, watch for actions that stop or disable 'firewalld' through 'systemctl', aiming at firewall rules management.\n\nBeyond firewall considerations, there's a need to observe for the disabling of endpoint security solutions such as 'Carbon Black' (denoted by 'cbdaemon') and 'CrowdStrike Falcon' (indicated by 'falcon-sensor'), again through 'service', 'chkconfig', or 'systemctl' utilities. This includes both stopping the services or completely disabling them to avoid their automatic startup.\n\nAdditionally, the monitoring should extend to the enforcement status of SELinux, a security enhancement module, which can be compromised by setting it to a permissive mode ('0') via the 'setenforce' command.\n\nGiven the above scenarios, any detection should be carefully assessed to differentiate between legitimate administrative activities\u2014such as system maintenance or updates\u2014and malicious activities aimed at weakening the system's defenses. These detections are crucial as they are indicative of preparatory steps by adversaries intending to operate undetected or to escalate their privileges without being stopped by these security measures. The tags associated with these activities include Impact, Defense Evasion, and Privilege Escalation, acknowledging the potential tactics and techniques employed by attackers to disable or interfere with security tools and measures on a Linux system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "disabling security tools",
      "answer": "In order to detect disabling security tools, you should monitor process creation logs in Linux systems for commands that indicate the stopping or disabling of critical security services. Specifically, look for commands that end the functioning of firewall using 'iptables' or 'ip6tables', either through direct calls to these services or via system configuration tools like 'service' or 'chkconfig'. Also, watch for actions that stop or disable 'firewalld' through 'systemctl', aiming at firewall rules management.\n\nBeyond firewall considerations, there's a need to observe for the disabling of endpoint security solutions such as 'Carbon Black' (denoted by 'cbdaemon') and 'CrowdStrike Falcon' (indicated by 'falcon-sensor'), again through 'service', 'chkconfig', or 'systemctl' utilities. This includes both stopping the services or completely disabling them to avoid their automatic startup.\n\nAdditionally, the monitoring should extend to the enforcement status of SELinux, a security enhancement module, which can be compromised by setting it to a permissive mode ('0') via the 'setenforce' command.\n\nGiven the above scenarios, any detection should be carefully assessed to differentiate between legitimate administrative activities\u2014such as system maintenance or updates\u2014and malicious activities aimed at weakening the system's defenses. These detections are crucial as they are indicative of preparatory steps by adversaries intending to operate undetected or to escalate their privileges without being stopped by these security measures. The tags associated with these activities include Impact, Defense Evasion, and Privilege Escalation, acknowledging the potential tactics and techniques employed by attackers to disable or interfere with security tools and measures on a Linux system."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of mimikatz through WinRM protocol by monitoring access to lsass process by wsmprovhost.exe.",
    "context": "",
    "output": "In order to detect usage of mimikatz through WinRM protocol by monitoring access to lsass process by wsmprovhost.exe, you should monitor process access logs on Windows systems. Specifically, look for events where the target process is 'lsass.exe' indicating that it's the Local Security Authority Subsystem Service, a common target for credential theft through tools like Mimikatz. These events become suspicious when the accessing source process is 'C:\\Windows\\system32\\wsmprovhost.exe', which is associated with Windows Remote Management (WinRM). However, it's important to filter out access instances where the granted access code is '0x80000000', as these might not be indicative of malicious activity. By setting these criteria, you're aiming to catch potential unauthorized access attempts to the lsass.exe process without being overwhelmed by false positives, which are considered unlikely given the specific conditions laid out. The detection level is set to high due to the sensitivity of the process being monitored and the typical association of such access patterns with credential theft attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of mimikatz through WinRM protocol by monitoring access to lsass process by wsmprovhost.exe.",
      "answer": "In order to detect usage of mimikatz through WinRM protocol by monitoring access to lsass process by wsmprovhost.exe, you should monitor process access logs on Windows systems. Specifically, look for events where the target process is 'lsass.exe' indicating that it's the Local Security Authority Subsystem Service, a common target for credential theft through tools like Mimikatz. These events become suspicious when the accessing source process is 'C:\\Windows\\system32\\wsmprovhost.exe', which is associated with Windows Remote Management (WinRM). However, it's important to filter out access instances where the granted access code is '0x80000000', as these might not be indicative of malicious activity. By setting these criteria, you're aiming to catch potential unauthorized access attempts to the lsass.exe process without being overwhelmed by false positives, which are considered unlikely given the specific conditions laid out. The detection level is set to high due to the sensitivity of the process being monitored and the typical association of such access patterns with credential theft attacks."
    }
  },
  {
    "instruction": "How can I detect: exploitation of Zoho ManageEngine Desktop Central Java Deserialization vulnerability reported as CVE-2020-10189",
    "context": "",
    "output": "In order to detect the exploitation of Zoho ManageEngine Desktop Central Java Deserialization vulnerability reported as CVE-2020-10189, you should monitor Windows process creation logs for any instances where the Java executable associated with the Desktop Central Server ('DesktopCentral_Server\\jre\\bin\\java.exe') launches a series of potentially malicious executables. These include command line tools and utilities such as 'cmd.exe', 'powershell.exe', 'pwsh.exe' (PowerShell Core), 'bitsadmin.exe', 'systeminfo.exe', 'net.exe', 'net1.exe', 'reg.exe', and 'query.exe'. The initiation of these processes by the Java executable could indicate an exploitation attempt, where attackers may be endeavoring to execute commands, manipulate systems, or extract sensitive information subsequent to exploiting the CVE-2020-10189 vulnerability. Considering the high-risk level associated with this behavior, any detections warrant immediate investigation despite the possibility of unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of Zoho ManageEngine Desktop Central Java Deserialization vulnerability reported as CVE-2020-10189",
      "answer": "In order to detect the exploitation of Zoho ManageEngine Desktop Central Java Deserialization vulnerability reported as CVE-2020-10189, you should monitor Windows process creation logs for any instances where the Java executable associated with the Desktop Central Server ('DesktopCentral_Server\\jre\\bin\\java.exe') launches a series of potentially malicious executables. These include command line tools and utilities such as 'cmd.exe', 'powershell.exe', 'pwsh.exe' (PowerShell Core), 'bitsadmin.exe', 'systeminfo.exe', 'net.exe', 'net1.exe', 'reg.exe', and 'query.exe'. The initiation of these processes by the Java executable could indicate an exploitation attempt, where attackers may be endeavoring to execute commands, manipulate systems, or extract sensitive information subsequent to exploiting the CVE-2020-10189 vulnerability. Considering the high-risk level associated with this behavior, any detections warrant immediate investigation despite the possibility of unknown false positives."
    }
  },
  {
    "instruction": "How to detect: potential malicious and unauthorized usage of bcdedit.exe",
    "context": "",
    "output": "In order to detect potential malicious and unauthorized usage of bcdedit.exe, you should: Focus on monitoring process creation within Windows environments, specifically looking for instances where the process image ends with '\\bcdedit.exe' or the original file name matches 'bcdedit.exe'. Moreover, pay attention to the command line arguments used with bcdedit.exe, particularly if they include 'delete', 'deletevalue', 'import', 'safeboot', or 'network'. The detection requires both the image criteria and command line patterns to match, indicating a medium-level threat. This monitoring approach helps in recognizing possible misuse of bcdedit.exe that could indicate an attacker attempting to modify boot configuration data, potentially to disable security settings or enable alternate boot methods for persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential malicious and unauthorized usage of bcdedit.exe",
      "answer": "In order to detect potential malicious and unauthorized usage of bcdedit.exe, you should: Focus on monitoring process creation within Windows environments, specifically looking for instances where the process image ends with '\\bcdedit.exe' or the original file name matches 'bcdedit.exe'. Moreover, pay attention to the command line arguments used with bcdedit.exe, particularly if they include 'delete', 'deletevalue', 'import', 'safeboot', or 'network'. The detection requires both the image criteria and command line patterns to match, indicating a medium-level threat. This monitoring approach helps in recognizing possible misuse of bcdedit.exe that could indicate an attacker attempting to modify boot configuration data, potentially to disable security settings or enable alternate boot methods for persistence."
    }
  },
  {
    "instruction": "Can you explain how to detect: scripts or commands that disabled the Powershell command history by removing psreadline module",
    "context": "",
    "output": "Certainly!\n\nIn order to detect scripts or commands that disabled the PowerShell command history by removing psreadline module, you should monitor Windows PowerShell script block logs, ensuring that Script Block Logging is enabled as a requirement. Focus on identifying any occurrence where the script block text includes both \"Remove-Module\" and \"psreadline\" together. This detection is crucial because it signifies an attempt to disable PowerShell's command history, which could be a tactic used by adversaries to avoid leaving traces of their activities. Be aware that there might be false positives, such as legitimate scripts performing this action for non-malicious reasons. The severity of this rule is considered high due to its potential implication in evasive tactics related to PowerShell use.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scripts or commands that disabled the Powershell command history by removing psreadline module",
      "answer": "In order to detect scripts or commands that disabled the PowerShell command history by removing psreadline module, you should monitor Windows PowerShell script block logs, ensuring that Script Block Logging is enabled as a requirement. Focus on identifying any occurrence where the script block text includes both \"Remove-Module\" and \"psreadline\" together. This detection is crucial because it signifies an attempt to disable PowerShell's command history, which could be a tactic used by adversaries to avoid leaving traces of their activities. Be aware that there might be false positives, such as legitimate scripts performing this action for non-malicious reasons. The severity of this rule is considered high due to its potential implication in evasive tactics related to PowerShell use."
    }
  },
  {
    "instruction": "Please help me detect the following: AppInstaller.exe is spawned by the default handler for the \"ms-appinstaller\" URI. It attempts to load/install a package from the referenced URL",
    "context": "",
    "output": "Sure!\nIn order to detect scenarios where AppInstaller.exe is spawned by the default handler for the \"ms-appinstaller\" URI, attempting to load or install a package from the referenced URL, you should: Monitor DNS query logs on Windows systems for any instances where the process path starts with 'C:\\Program Files\\WindowsApps\\Microsoft.DesktopAppInstaller_' and ends with '\\AppInstaller.exe'. This specific observation points towards the execution of the AppInstaller, which might be an indication of an attempt to automatically install or load a software package from an internet location. It's important to note that these detections serve as a medium-level alert, indicating potential suspicious activity that might not always correspond to malicious intent, thereby unknown false positives might occur.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "AppInstaller.exe is spawned by the default handler for the \"ms-appinstaller\" URI. It attempts to load/install a package from the referenced URL",
      "answer": "In order to detect scenarios where AppInstaller.exe is spawned by the default handler for the \"ms-appinstaller\" URI, attempting to load or install a package from the referenced URL, you should: Monitor DNS query logs on Windows systems for any instances where the process path starts with 'C:\\Program Files\\WindowsApps\\Microsoft.DesktopAppInstaller_' and ends with '\\AppInstaller.exe'. This specific observation points towards the execution of the AppInstaller, which might be an indication of an attempt to automatically install or load a software package from an internet location. It's important to note that these detections serve as a medium-level alert, indicating potential suspicious activity that might not always correspond to malicious intent, thereby unknown false positives might occur."
    }
  },
  {
    "instruction": "How can I detect: usage of the wevtutil utility to perform reconnaissance",
    "context": "",
    "output": "In order to detect usage of the wevtutil utility to perform reconnaissance, you should monitor the creation of processes on Windows systems, focusing on instances where the wevtutil.exe executable is involved. Specifically, look for the execution of wevtutil.exe followed by command-line arguments that include 'qe' or 'query-events', which signifies querying of event logs. Additionally, pay attention to command-line usage that targets specific event log channels known to be of interest to attackers, such as 'Microsoft-Windows-TerminalServices-LocalSessionManager/Operational', 'Microsoft-Windows-Terminal-Services-RemoteConnectionManager/Operational', and 'Security'. The detection of such activity should consider the possibility of legitimate administrative use of wevtutil for event log queries, thereby reducing the risk of false positive identifications. This monitoring practice is aimed at identifying potential reconnaissance efforts by attackers seeking to understand the environment, user activities, or system configurations through the event logs.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the wevtutil utility to perform reconnaissance",
      "answer": "In order to detect usage of the wevtutil utility to perform reconnaissance, you should monitor the creation of processes on Windows systems, focusing on instances where the wevtutil.exe executable is involved. Specifically, look for the execution of wevtutil.exe followed by command-line arguments that include 'qe' or 'query-events', which signifies querying of event logs. Additionally, pay attention to command-line usage that targets specific event log channels known to be of interest to attackers, such as 'Microsoft-Windows-TerminalServices-LocalSessionManager/Operational', 'Microsoft-Windows-Terminal-Services-RemoteConnectionManager/Operational', and 'Security'. The detection of such activity should consider the possibility of legitimate administrative use of wevtutil for event log queries, thereby reducing the risk of false positive identifications. This monitoring practice is aimed at identifying potential reconnaissance efforts by attackers seeking to understand the environment, user activities, or system configurations through the event logs."
    }
  },
  {
    "instruction": "Please help me detect the following: import of '.reg' files from suspicious paths using the 'reg.exe' utility",
    "context": "",
    "output": "Sure!\nIn order to detect the import of '.reg' files from suspicious paths using the 'reg.exe' utility, you should monitor the creation of processes on Windows systems, specifically looking for instances where the 'reg.exe' utility is executed. Pay close attention to the command line used during the process creation, particularly watching for the use of ' import ' as this indicates the importation of registry keys. Equally important is to scrutinize the paths from which these '.reg' files are being imported. Common pathways for suspicious activity include user directories like 'C:\\Users\\', temporary folders such as '%temp%', '%tmp%', system application data folders like '%appdata%' and specific paths including '\\AppData\\Local\\Temp\\', 'C:\\Windows\\Temp\\', and 'C:\\ProgramData\\'. All these elements combined indicate potentially malicious action. However, bear in mind that there are legitimate uses for importing keys, and these should be considered as possible false positives. The importance of this detection process is rated as medium due to its potential for flagging normal administrative activities as suspicious.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "import of '.reg' files from suspicious paths using the 'reg.exe' utility",
      "answer": "In order to detect the import of '.reg' files from suspicious paths using the 'reg.exe' utility, you should monitor the creation of processes on Windows systems, specifically looking for instances where the 'reg.exe' utility is executed. Pay close attention to the command line used during the process creation, particularly watching for the use of ' import ' as this indicates the importation of registry keys. Equally important is to scrutinize the paths from which these '.reg' files are being imported. Common pathways for suspicious activity include user directories like 'C:\\Users\\', temporary folders such as '%temp%', '%tmp%', system application data folders like '%appdata%' and specific paths including '\\AppData\\Local\\Temp\\', 'C:\\Windows\\Temp\\', and 'C:\\ProgramData\\'. All these elements combined indicate potentially malicious action. However, bear in mind that there are legitimate uses for importing keys, and these should be considered as possible false positives. The importance of this detection process is rated as medium due to its potential for flagging normal administrative activities as suspicious."
    }
  },
  {
    "instruction": "How to detect: variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block linked in the references",
    "context": "",
    "output": "In order to detect all variations of obfuscated PowerShell IEX invocation code generated by Invoke-Obfuscation framework from the code block linked in the references, you should monitor Windows system service logs, specifically looking for event ID 7045. This event is crucial because it is related to the service installation, which attackers may exploit to execute obfuscated PowerShell code. \n\nThe detection criteria focus on the ImagePath field within these logs, searching for patterns that indicate obfuscation techniques. These patterns include irregular use of variables like `$PSHome`, `$ShellId`, `$env:Public`, and `$env:ComSpec`, alongside more complex indicators such as strings modifications and method invocations that are typically not found in conventional PowerShell scripts. \n\nSpecifically, look for:\n- Use of `$PSHome` or `$ShellId` in a manner that involves array access with numeric values, potentially obfuscating access to system paths.\n- Manipulation of `$env:Public` and `$env:ComSpec` environment variables in unusual patterns, indicating attempts to hide the true nature of the command.\n- Patterns like `*mdr*` within the context that may not conform to typical script operations, pointing towards code obfuscation attempts.\n- Irregular invocations of methods such as `.ToString()` on system variables like `$VerbosePreference`, which can be an indication of obfuscation attempts to convert or hide PowerShell commands.\n\nThe detection of such patterns is of high importance and should be treated with a high level of alertness, given the potential for misuse in executing unauthorized commands and scripts on the system, which could lead to further malicious activities. While there may be unknown false positives, the unique nature of these patterns typically indicates an attempt to invoke PowerShell code through obfuscation, aligning with the tactics and techniques used to evade detection and execute malicious scripts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block linked in the references",
      "answer": "In order to detect all variations of obfuscated PowerShell IEX invocation code generated by Invoke-Obfuscation framework from the code block linked in the references, you should monitor Windows system service logs, specifically looking for event ID 7045. This event is crucial because it is related to the service installation, which attackers may exploit to execute obfuscated PowerShell code. \n\nThe detection criteria focus on the ImagePath field within these logs, searching for patterns that indicate obfuscation techniques. These patterns include irregular use of variables like `$PSHome`, `$ShellId`, `$env:Public`, and `$env:ComSpec`, alongside more complex indicators such as strings modifications and method invocations that are typically not found in conventional PowerShell scripts. \n\nSpecifically, look for:\n- Use of `$PSHome` or `$ShellId` in a manner that involves array access with numeric values, potentially obfuscating access to system paths.\n- Manipulation of `$env:Public` and `$env:ComSpec` environment variables in unusual patterns, indicating attempts to hide the true nature of the command.\n- Patterns like `*mdr*` within the context that may not conform to typical script operations, pointing towards code obfuscation attempts.\n- Irregular invocations of methods such as `.ToString()` on system variables like `$VerbosePreference`, which can be an indication of obfuscation attempts to convert or hide PowerShell commands.\n\nThe detection of such patterns is of high importance and should be treated with a high level of alertness, given the potential for misuse in executing unauthorized commands and scripts on the system, which could lead to further malicious activities. While there may be unknown false positives, the unique nature of these patterns typically indicates an attempt to invoke PowerShell code through obfuscation, aligning with the tactics and techniques used to evade detection and execute malicious scripts."
    }
  },
  {
    "instruction": "How can I detect: Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against",
    "context": "",
    "output": "In order to execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against, you should: monitor the process creation logs on Windows systems for instances where the 'hashcat.exe' application is executed. Specifically, look for executions of 'hashcat.exe' that include the command line flags '-a ', '-m 1000 ', and '-r ', which are indicative of an attack that utilizes Hashcat to crack Windows account passwords by leveraging the SAM file and a list of passwords. Be aware that there may be false positives, as other tools might use similar command line arguments. The severity of this detection is considered high, underscoring the importance of vigilance against such activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against",
      "answer": "In order to execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against, you should: monitor the process creation logs on Windows systems for instances where the 'hashcat.exe' application is executed. Specifically, look for executions of 'hashcat.exe' that include the command line flags '-a ', '-m 1000 ', and '-r ', which are indicative of an attack that utilizes Hashcat to crack Windows account passwords by leveraging the SAM file and a list of passwords. Be aware that there may be false positives, as other tools might use similar command line arguments. The severity of this detection is considered high, underscoring the importance of vigilance against such activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: Extexport.exe loads dll and is execute from other folder the original path",
    "context": "",
    "output": "Certainly!\n\nIn order to detect instances where Extexport.exe loads DLL and is executed from a location other than its original path, you should: focus on monitoring process creation logs within Windows environments. Specifically, look for any instances where the command line includes 'Extexport.exe', any process image paths that end with '\\Extexport.exe', or occurrences where 'extexport.exe' is noted as the OriginalFileName. This approach helps in identifying abnormal execution paths or methods of this executable, which might indicate malicious activity related to process manipulation or unauthorized accesses. Be aware that some events captured might not be malicious in nature, hence the identification of these as false positives requires vigilance and further investigation. The attention level for these activities is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Extexport.exe loads dll and is execute from other folder the original path",
      "answer": "In order to detect instances where Extexport.exe loads DLL and is executed from a location other than its original path, you should: focus on monitoring process creation logs within Windows environments. Specifically, look for any instances where the command line includes 'Extexport.exe', any process image paths that end with '\\Extexport.exe', or occurrences where 'extexport.exe' is noted as the OriginalFileName. This approach helps in identifying abnormal execution paths or methods of this executable, which might indicate malicious activity related to process manipulation or unauthorized accesses. Be aware that some events captured might not be malicious in nature, hence the identification of these as false positives requires vigilance and further investigation. The attention level for these activities is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of \"hh.exe\" to execute \".chm\" files.",
    "context": "",
    "output": "Sure!\nIn order to detect the usage of \"hh.exe\" to execute \".chm\" files, you should: look for process creation events within Windows systems where the originating file is identified as \"HH.exe\" either by its original filename or where the executing image ends with \"\\hh.exe\". Additionally, pay attention to command line arguments that contain the \".chm\" file extension. Both criteria - associated file and command line argument - need to be met to create an alert. Be aware that there could be legitimate uses of \".chm\" files leading to possible false positives. This detection is set at a medium level of importance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"hh.exe\" to execute \".chm\" files.",
      "answer": "In order to detect the usage of \"hh.exe\" to execute \".chm\" files, you should: look for process creation events within Windows systems where the originating file is identified as \"HH.exe\" either by its original filename or where the executing image ends with \"\\hh.exe\". Additionally, pay attention to command line arguments that contain the \".chm\" file extension. Both criteria - associated file and command line argument - need to be met to create an alert. Be aware that there could be legitimate uses of \".chm\" files leading to possible false positives. This detection is set at a medium level of importance."
    }
  },
  {
    "instruction": "How can I detect: User has indicated they haven't instigated the MFA prompt and could indicate an attacker has the password for the account.",
    "context": "",
    "output": "In order to detect signs indicating that an attacker may have obtained the password for an account, especially when a user reports not initiating a multi-factor authentication (MFA) prompt, you should focus on monitoring Azure sign-in logs. Look specifically for log entries where MFA was required for authentication and the status indicates that the MFA request was denied. This scenario suggests that although multi-factor authentication was prompted, it was not successfully completed. It could signal an unauthorized attempt to access the account, possibly indicating that someone other than the account owner is attempting to log in. Keep in mind that there could be legitimate instances where users accidentally deny the MFA prompt, which should be considered as potential false positives. This monitoring activity aligns with understanding how threat actors might gain access to accounts (Credential Access) and their attempts to penetrate security measures that protect against unauthorized access (Defense Evasion).",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "User has indicated they haven't instigated the MFA prompt and could indicate an attacker has the password for the account.",
      "answer": "In order to detect signs indicating that an attacker may have obtained the password for an account, especially when a user reports not initiating a multi-factor authentication (MFA) prompt, you should focus on monitoring Azure sign-in logs. Look specifically for log entries where MFA was required for authentication and the status indicates that the MFA request was denied. This scenario suggests that although multi-factor authentication was prompted, it was not successfully completed. It could signal an unauthorized attempt to access the account, possibly indicating that someone other than the account owner is attempting to log in. Keep in mind that there could be legitimate instances where users accidentally deny the MFA prompt, which should be considered as potential false positives. This monitoring activity aligns with understanding how threat actors might gain access to accounts (Credential Access) and their attempts to penetrate security measures that protect against unauthorized access (Defense Evasion)."
    }
  },
  {
    "instruction": "How to detect: suspicious ways to download files or content using PowerShell",
    "context": "",
    "output": "In order to detect suspicious ways to download files or content using PowerShell, you should: Monitor the process creation logs on Windows systems for any occurrences where the command line contains specific strings indicative of file or content download attempts via PowerShell. These strings include '.DownloadString(', '.DownloadFile(', 'Invoke-WebRequest ', and 'iwr '. Notably, this monitoring is set at a medium level of alert due to the potential for false positives, which could arise from legitimate scripts or tools that download files. This approach is designed to spot techniques that may be utilized by attackers to retrieve malicious payloads or scripts onto a targeted system covertly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious ways to download files or content using PowerShell",
      "answer": "In order to detect suspicious ways to download files or content using PowerShell, you should: Monitor the process creation logs on Windows systems for any occurrences where the command line contains specific strings indicative of file or content download attempts via PowerShell. These strings include '.DownloadString(', '.DownloadFile(', 'Invoke-WebRequest ', and 'iwr '. Notably, this monitoring is set at a medium level of alert due to the potential for false positives, which could arise from legitimate scripts or tools that download files. This approach is designed to spot techniques that may be utilized by attackers to retrieve malicious payloads or scripts onto a targeted system covertly."
    }
  },
  {
    "instruction": "How can I detect: use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.",
    "context": "",
    "output": "In order to detect the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application, you should: Focus on monitoring Windows process creation logs for instances where the command line contains both '\\register_app.vbs' and '-register'. This detection points out the execution of the 'register_app.vbs' script with the specific command line argument '-register', which is typically used for registering a Volume Shadow Copy Service (VSS) or Virtual Disk Service (VDS) provider as a COM+ application. Such actions may be indicative of malicious activities, although it's important to consider that there could be legitimate reasons for using this script in this manner. To differentiate between benign and malicious usage, closely investigate the context in which the script is being executed. The level of threat is considered medium, suggesting that while this activity is suspicious, it doesn\u2019t always correlate with a security threat. Always verify the nature of what's being registered by the script to ensure it's not part of an attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.",
      "answer": "In order to detect the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application, you should: Focus on monitoring Windows process creation logs for instances where the command line contains both '\\register_app.vbs' and '-register'. This detection points out the execution of the 'register_app.vbs' script with the specific command line argument '-register', which is typically used for registering a Volume Shadow Copy Service (VSS) or Virtual Disk Service (VDS) provider as a COM+ application. Such actions may be indicative of malicious activities, although it's important to consider that there could be legitimate reasons for using this script in this manner. To differentiate between benign and malicious usage, closely investigate the context in which the script is being executed. The level of threat is considered medium, suggesting that while this activity is suspicious, it doesn\u2019t always correlate with a security threat. Always verify the nature of what's being registered by the script to ensure it's not part of an attack."
    }
  },
  {
    "instruction": "How can I detect: extraction of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information.",
    "context": "",
    "output": "In order to detect extraction of files with the usage of steghide binary, as adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for audit logs that capture execution events (EXECVE) specifically involving the 'steghide' command line tool. Look for instances where this tool is used to execute the 'extract' command, indicating an attempt to extract hidden information. This should particularly raise attention when the '-sf' argument is spotted, followed by a file name that ends with '.jpg' or '.png'. These file types are commonly associated with this form of information hiding. This behavior, while suspicious, is considered to have a low level of certainty regarding maliciousness, due to potential legitimate uses of steganography. Therefore, it's crucial to investigate these events when they occur to determine if they are part of a security incident or a benign activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "extraction of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information.",
      "answer": "In order to detect extraction of files with the usage of steghide binary, as adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for audit logs that capture execution events (EXECVE) specifically involving the 'steghide' command line tool. Look for instances where this tool is used to execute the 'extract' command, indicating an attempt to extract hidden information. This should particularly raise attention when the '-sf' argument is spotted, followed by a file name that ends with '.jpg' or '.png'. These file types are commonly associated with this form of information hiding. This behavior, while suspicious, is considered to have a low level of certainty regarding maliciousness, due to potential legitimate uses of steganography. Therefore, it's crucial to investigate these events when they occur to determine if they are part of a security incident or a benign activity."
    }
  },
  {
    "instruction": "Can you explain how to detect: potentially suspicious child processes of \"regsvr32.exe\".",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potentially suspicious child processes of \"regsvr32.exe\", you should monitor for the creation of specific processes that are initiated as child processes by \"regsvr32.exe\" on Windows systems. This monitoring should target processes that end with executable names such as 'calc.exe', 'cscript.exe', 'explorer.exe', 'mshta.exe', 'net.exe', 'net1.exe', 'nltest.exe', 'notepad.exe', 'powershell.exe', 'pwsh.exe', 'reg.exe', 'schtasks.exe', 'werfault.exe', and 'wscript.exe'. However, it's important to note that if 'werfault.exe' is involved and its command line includes ' -u -p ', this scenario should not be considered suspicious by this detection logic, distinguishing genuine system behaviors or error reporting from malicious activity. Although false positives are deemed unlikely, there remains a rare chance for them, so it's advisable to refine detection with additional filters if necessary. This approach is aligned with identifying potential misuse of legitimate Windows processes, which could be indicative of various attack techniques, including but not limited to, privilege escalation, execution of unauthorized commands, or lateral movement within networks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potentially suspicious child processes of \"regsvr32.exe\".",
      "answer": "In order to detect potentially suspicious child processes of \"regsvr32.exe\", you should monitor for the creation of specific processes that are initiated as child processes by \"regsvr32.exe\" on Windows systems. This monitoring should target processes that end with executable names such as 'calc.exe', 'cscript.exe', 'explorer.exe', 'mshta.exe', 'net.exe', 'net1.exe', 'nltest.exe', 'notepad.exe', 'powershell.exe', 'pwsh.exe', 'reg.exe', 'schtasks.exe', 'werfault.exe', and 'wscript.exe'. However, it's important to note that if 'werfault.exe' is involved and its command line includes ' -u -p ', this scenario should not be considered suspicious by this detection logic, distinguishing genuine system behaviors or error reporting from malicious activity. Although false positives are deemed unlikely, there remains a rare chance for them, so it's advisable to refine detection with additional filters if necessary. This approach is aligned with identifying potential misuse of legitimate Windows processes, which could be indicative of various attack techniques, including but not limited to, privilege escalation, execution of unauthorized commands, or lateral movement within networks."
    }
  },
  {
    "instruction": "How to detect: usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files to download arbitrary files",
    "context": "",
    "output": "In order to detect usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files to download arbitrary files, you should: Focus on the creation of processes within Windows environments. Specifically, monitor for instances where the process creation involves \"PresentationHost.exe\" or more generally, executables that end with '\\presentationhost.exe'. Additionally, scrutinize the command lines associated with these process creations for URLs starting with 'http://', 'https://', or 'ftp://', as these indicate attempts to access or download from external sources. This detection strategy is relevant since malicious actors often leverage \"PresentationHost\" to download arbitrary files from the internet, posing a threat to security. Note that the certainty level of this rule is set to medium, acknowledging the potential for scenarios that might not be malicious but match these criteria.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files to download arbitrary files",
      "answer": "In order to detect usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files to download arbitrary files, you should: Focus on the creation of processes within Windows environments. Specifically, monitor for instances where the process creation involves \"PresentationHost.exe\" or more generally, executables that end with '\\presentationhost.exe'. Additionally, scrutinize the command lines associated with these process creations for URLs starting with 'http://', 'https://', or 'ftp://', as these indicate attempts to access or download from external sources. This detection strategy is relevant since malicious actors often leverage \"PresentationHost\" to download arbitrary files from the internet, posing a threat to security. Note that the certainty level of this rule is set to medium, acknowledging the potential for scenarios that might not be malicious but match these criteria."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious processes based on name and location that access the windows credential manager and vault.\nWhich can be a sign of credential stealing. Example case would be usage of mimikatz \"dpapi::cred\" function\n",
    "context": "",
    "output": "In order to detect suspicious processes based on name and location that access the windows credential manager and vault, which can be a sign of credential stealing, such as the usage of Mimikatz's \"dpapi::cred\" function, you should: Monitor file access events on Windows systems, specifically looking for access to certain directories that store sensitive credentials. These directories include '\\AppData\\Local\\Microsoft\\Credentials\\', '\\AppData\\Roaming\\Microsoft\\Credentials\\', '\\AppData\\Local\\Microsoft\\Vault\\', and '\\ProgramData\\Microsoft\\Vault\\'. It's important to ensure that the monitoring process excludes access from system folders typically regarded as benign and expected, such as 'C:\\Program Files\\', 'C:\\Program Files (x86)\\', 'C:\\Windows\\system32\\', and 'C:\\Windows\\SysWOW64\\'. While implementing this, be mindful of potential false positives, as legitimate software installed by users, especially within the \"AppData\" directory, may access these files for various non-malicious reasons. This analysis is based on event logs sourced from the Microsoft-Windows-Kernel-File Event Tracing for Windows (ETW) provider, with a medium level of confidence recommended once filters effectively reduce false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious processes based on name and location that access the windows credential manager and vault.\nWhich can be a sign of credential stealing. Example case would be usage of mimikatz \"dpapi::cred\" function\n",
      "answer": "In order to detect suspicious processes based on name and location that access the windows credential manager and vault, which can be a sign of credential stealing, such as the usage of Mimikatz's \"dpapi::cred\" function, you should: Monitor file access events on Windows systems, specifically looking for access to certain directories that store sensitive credentials. These directories include '\\AppData\\Local\\Microsoft\\Credentials\\', '\\AppData\\Roaming\\Microsoft\\Credentials\\', '\\AppData\\Local\\Microsoft\\Vault\\', and '\\ProgramData\\Microsoft\\Vault\\'. It's important to ensure that the monitoring process excludes access from system folders typically regarded as benign and expected, such as 'C:\\Program Files\\', 'C:\\Program Files (x86)\\', 'C:\\Windows\\system32\\', and 'C:\\Windows\\SysWOW64\\'. While implementing this, be mindful of potential false positives, as legitimate software installed by users, especially within the \"AppData\" directory, may access these files for various non-malicious reasons. This analysis is based on event logs sourced from the Microsoft-Windows-Kernel-File Event Tracing for Windows (ETW) provider, with a medium level of confidence recommended once filters effectively reduce false positives."
    }
  },
  {
    "instruction": "How can I detect: suspicious process command line that uses whoami as first parameter (as e.g. used by EfsPotato)",
    "context": "",
    "output": "In order to detect a suspicious process command line that uses whoami as the first parameter (as e.g. used by EfsPotato), you should monitor for process creation events on Windows systems where the command line includes the sequence '.exe whoami'. This specific sequence may indicate that an adversary is attempting to gather information about the current user's privileges or identity, which can be a precursor to privilege escalation or lateral movement within the network. It's important to note that while this activity can be indicative of malicious behavior, the possibility of false positives exists due to legitimate use of the 'whoami' command in benign contexts, though such instances are considered unknown. The detection of this pattern should be treated with a high level of concern due to its potential association with malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious process command line that uses whoami as first parameter (as e.g. used by EfsPotato)",
      "answer": "In order to detect a suspicious process command line that uses whoami as the first parameter (as e.g. used by EfsPotato), you should monitor for process creation events on Windows systems where the command line includes the sequence '.exe whoami'. This specific sequence may indicate that an adversary is attempting to gather information about the current user's privileges or identity, which can be a precursor to privilege escalation or lateral movement within the network. It's important to note that while this activity can be indicative of malicious behavior, the possibility of false positives exists due to legitimate use of the 'whoami' command in benign contexts, though such instances are considered unknown. The detection of this pattern should be treated with a high level of concern due to its potential association with malicious activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory, you should: focus on monitoring Windows process creation logs. Specifically, look out for commands containing references to 'TrolleyExpress' followed by a single digit ranging from 7 to 9, both with and without the '.exe' extension. This range is indicative of an attempt to specify a process ID associated with lsass.exe, based on the assumption that its process ID is between 700 and 999. Additionally, any command lines ending with 'TrolleyExpress.exe -ma', which is a common parameter used in memory dumping processes, should be flagged. Further attention should be paid to instances where the executable image has been renamed to 'TrolleyExpress.exe', especially in scenarios where the original file name contains 'CtxInstall' or is absent, as these could potentially mask unauthorized memory dump attempts. It's essential to note that these criteria primarily target techniques associated with Credential Access through LSASS memory content acquisition, with a high level of scrutiny due to the likelihood of false positives being unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory",
      "answer": "In order to detect a possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory, you should: focus on monitoring Windows process creation logs. Specifically, look out for commands containing references to 'TrolleyExpress' followed by a single digit ranging from 7 to 9, both with and without the '.exe' extension. This range is indicative of an attempt to specify a process ID associated with lsass.exe, based on the assumption that its process ID is between 700 and 999. Additionally, any command lines ending with 'TrolleyExpress.exe -ma', which is a common parameter used in memory dumping processes, should be flagged. Further attention should be paid to instances where the executable image has been renamed to 'TrolleyExpress.exe', especially in scenarios where the original file name contains 'CtxInstall' or is absent, as these could potentially mask unauthorized memory dump attempts. It's essential to note that these criteria primarily target techniques associated with Credential Access through LSASS memory content acquisition, with a high level of scrutiny due to the likelihood of false positives being unknown."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows to run all sub processes of that newly started explorer.exe without any UAC checks",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows running all subprocesses of that newly started explorer.exe without any UAC checks, you should: focus on monitoring process creation logs within a Windows environment. Specifically, look for instances where the process image ends with '\\explorer.exe' and the command line includes the flag '/NOUACCHECK'. It's important to exclude events where the parent command line is 'C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule' or the parent image is 'C:\\Windows\\System32\\svchost.exe', as these are associated with domain controller user logon and may generate false positives. This detection identifies a high-severity security risk, however, please be aware that there might be legitimate software products that use this method, which could also trigger this alert.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows to run all sub processes of that newly started explorer.exe without any UAC checks",
      "answer": "In order to detect suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows running all subprocesses of that newly started explorer.exe without any UAC checks, you should: focus on monitoring process creation logs within a Windows environment. Specifically, look for instances where the process image ends with '\\explorer.exe' and the command line includes the flag '/NOUACCHECK'. It's important to exclude events where the parent command line is 'C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule' or the parent image is 'C:\\Windows\\System32\\svchost.exe', as these are associated with domain controller user logon and may generate false positives. This detection identifies a high-severity security risk, however, please be aware that there might be legitimate software products that use this method, which could also trigger this alert."
    }
  },
  {
    "instruction": "Please help me detect the following: AS-REP roasting is an attack that is often-overlooked. It is not very common as you have to explicitly set accounts that do not require pre-authentication.",
    "context": "",
    "output": "Sure!\nIn order to detect AS-REP roasting, an attack that is often-overlooked because it involves explicitly setting accounts to not require pre-authentication, you should: Monitor Windows PowerShell scripts for specific operations that may indicate an attempt to exploit this vulnerability. Specifically, ensure that Script Block Logging is enabled to capture detailed logging of PowerShell script executions. Look for scripts that include the combination of 'Get-ADUser', '-Filter', 'useraccountcontrol', '-band', and '4194304'. This pattern suggests an attempt to identify user accounts configured to not require Kerberos pre-authentication (indicated by the userAccountControl attribute flag 'DONT_REQ_PREAUTH' or the numerical value 4194304), a key indicator of AS-REP roasting attempts. Be aware that there may be legitimate scripts that perform similar queries, so evaluate detections in context to reduce false positives. The detection is considered to have a medium level of confidence due to the balance between identifying malicious activity and avoiding false positive detections from legitimate script use.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "AS-REP roasting is an attack that is often-overlooked. It is not very common as you have to explicitly set accounts that do not require pre-authentication.",
      "answer": "In order to detect AS-REP roasting, an attack that is often-overlooked because it involves explicitly setting accounts to not require pre-authentication, you should: Monitor Windows PowerShell scripts for specific operations that may indicate an attempt to exploit this vulnerability. Specifically, ensure that Script Block Logging is enabled to capture detailed logging of PowerShell script executions. Look for scripts that include the combination of 'Get-ADUser', '-Filter', 'useraccountcontrol', '-band', and '4194304'. This pattern suggests an attempt to identify user accounts configured to not require Kerberos pre-authentication (indicated by the userAccountControl attribute flag 'DONT_REQ_PREAUTH' or the numerical value 4194304), a key indicator of AS-REP roasting attempts. Be aware that there may be legitimate scripts that perform similar queries, so evaluate detections in context to reduce false positives. The detection is considered to have a medium level of confidence due to the balance between identifying malicious activity and avoiding false positive detections from legitimate script use."
    }
  },
  {
    "instruction": "How to detect: Rorschach ransomware execution activity",
    "context": "",
    "output": "In order to detect Rorschach ransomware execution activity, you should: focus on monitoring process creation logs within Windows systems. Specifically, look out for processes that end with paths to the following executables: bcdedit.exe, net.exe, net1.exe, netsh.exe, wevtutil.exe, and vssadmin.exe, which are key indicators. Additionally, any command line arguments that contain '11111111' should raise an alarm. The occurrence of these conditions suggests a critical level of threat, and, although false positives are considered unlikely, they should always be verified to confirm the presence of Rorschach ransomware activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Rorschach ransomware execution activity",
      "answer": "In order to detect Rorschach ransomware execution activity, you should: focus on monitoring process creation logs within Windows systems. Specifically, look out for processes that end with paths to the following executables: bcdedit.exe, net.exe, net1.exe, netsh.exe, wevtutil.exe, and vssadmin.exe, which are key indicators. Additionally, any command line arguments that contain '11111111' should raise an alarm. The occurrence of these conditions suggests a critical level of threat, and, although false positives are considered unlikely, they should always be verified to confirm the presence of Rorschach ransomware activity."
    }
  },
  {
    "instruction": "How to detect: suspicious IIS module registration as described in Microsoft threat report on IIS backdoors",
    "context": "",
    "output": "In order to detect a suspicious IIS module registration as described in Microsoft threat report on IIS backdoors, you should: focus on monitoring process creation logs within Windows systems. Specifically, be on the lookout for activities initiated by the parent process 'w3wp.exe', which is associated with IIS worker processes. The detection process involves identifying commands related to suspicious activities, including the use of 'appcmd.exe' to add modules, operations involving 'system.enterpriseservices.internal.publish' in conjunction with PowerShell (powershell.exe), or the use of 'gacutil' with the '/I' option, indicating an installation operation. Given the high-security risks associated with unauthorized IIS module registration, which can enable attackers to establish persistence or perform malicious activities discretely, any matches to these conditions should be treated with caution. However, it's important to consider that similar activities might occasionally be part of legitimate administrative tasks, so validating the context of these detections is essential to avoid false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious IIS module registration as described in Microsoft threat report on IIS backdoors",
      "answer": "In order to detect a suspicious IIS module registration as described in Microsoft threat report on IIS backdoors, you should: focus on monitoring process creation logs within Windows systems. Specifically, be on the lookout for activities initiated by the parent process 'w3wp.exe', which is associated with IIS worker processes. The detection process involves identifying commands related to suspicious activities, including the use of 'appcmd.exe' to add modules, operations involving 'system.enterpriseservices.internal.publish' in conjunction with PowerShell (powershell.exe), or the use of 'gacutil' with the '/I' option, indicating an installation operation. Given the high-security risks associated with unauthorized IIS module registration, which can enable attackers to establish persistence or perform malicious activities discretely, any matches to these conditions should be treated with caution. However, it's important to consider that similar activities might occasionally be part of legitimate administrative tasks, so validating the context of these detections is essential to avoid false positives."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of \"msdt.exe\" using an answer file which is simulating the legitimate way of calling msdt via \"pcwrun.exe\" (For example from the compatibility tab)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of \"msdt.exe\" using an answer file which is simulating the legitimate way of calling msdt via \"pcwrun.exe\" (For example from the compatibility tab), you should: Monitor for process creation events on Windows systems, specifically focusing on the execution of \"msdt.exe\". An important condition to watch for is when the command line includes a reference to the Windows diagnostics path \"\\WINDOWS\\diagnostics\\index\\PCWDiagnostic.xml\" and uses an answer file, signified by command line arguments \" -af \" or \" /af \". However, it's important to exclude any instances where \"msdt.exe\" is launched by \"pcwrun.exe\", as indicated by the parent process name ending with \"\\pcwrun.exe\". This approach helps in identifying potential abuses of \"msdt.exe\" to perform unauthorized activities, while minimizing false positives by excluding documented legitimate uses of \"msdt.exe\" with \"pcwrun.exe\" as its parent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"msdt.exe\" using an answer file which is simulating the legitimate way of calling msdt via \"pcwrun.exe\" (For example from the compatibility tab)",
      "answer": "In order to detect execution of \"msdt.exe\" using an answer file which is simulating the legitimate way of calling msdt via \"pcwrun.exe\" (For example from the compatibility tab), you should: Monitor for process creation events on Windows systems, specifically focusing on the execution of \"msdt.exe\". An important condition to watch for is when the command line includes a reference to the Windows diagnostics path \"\\WINDOWS\\diagnostics\\index\\PCWDiagnostic.xml\" and uses an answer file, signified by command line arguments \" -af \" or \" /af \". However, it's important to exclude any instances where \"msdt.exe\" is launched by \"pcwrun.exe\", as indicated by the parent process name ending with \"\\pcwrun.exe\". This approach helps in identifying potential abuses of \"msdt.exe\" to perform unauthorized activities, while minimizing false positives by excluding documented legitimate uses of \"msdt.exe\" with \"pcwrun.exe\" as its parent."
    }
  },
  {
    "instruction": "Please help me detect the following: Enable Dynamic Data Exchange protocol (DDE) in all supported editions of Microsoft Word or Excel.",
    "context": "",
    "output": "Sure!\nIn order to enable Dynamic Data Exchange protocol (DDE) in all supported editions of Microsoft Word or Excel, you should monitor modifications to specific registry settings indicative of this action being performed on Windows systems. These registry settings control the DDE feature in Microsoft Word and Excel, which can be utilized for executing arbitrary commands or code under certain conditions.\n\nFor Microsoft Word, observe for events where the registry key value is being set under \"\\Word\\Security\\AllowDDE\". Specifically, you should look for events where the EventType is \"SetValue\" and the TargetObject ends with \"\\Word\\Security\\AllowDDE\". Additionally, attention should be paid when the details of these modifications are either 'DWORD (0x00000001)' or 'DWORD (0x00000002)', as these values indicate that DDE feature is being enabled or its security is being adjusted.\n\nSimilarly, for Microsoft Excel, track changes where EventType is \"SetValue\" concerning the registry keys ending with \"\\Excel\\Security\\DisableDDEServerLaunch\" and \"\\Excel\\Security\\DisableDDEServerLookup\". The key modifications of interest here involve setting these values to 'DWORD (0x00000000)' which effectively enables the DDE protocol despite any previous disablement, thus allowing data exchange.\n\nThe tagging of these monitoring actions aligns with certain tactics and techniques including the potential for execution through macros (when DDE is explicitly enabled) and persistence or privilege escalation (by allowing arbitrary code execution through DDE). While encountering these specific registry modifications may not always indicate malicious activity, as there can be legitimate reasons for their adjustment, it is crucial to investigate further to discern the true intent behind these changes. False positives are considered unknown, indicating that while not expected, they can occur, and thus each detection should be analyzed for its context. The overall level of concern for these activities is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Enable Dynamic Data Exchange protocol (DDE) in all supported editions of Microsoft Word or Excel.",
      "answer": "In order to enable Dynamic Data Exchange protocol (DDE) in all supported editions of Microsoft Word or Excel, you should monitor modifications to specific registry settings indicative of this action being performed on Windows systems. These registry settings control the DDE feature in Microsoft Word and Excel, which can be utilized for executing arbitrary commands or code under certain conditions.\n\nFor Microsoft Word, observe for events where the registry key value is being set under \"\\Word\\Security\\AllowDDE\". Specifically, you should look for events where the EventType is \"SetValue\" and the TargetObject ends with \"\\Word\\Security\\AllowDDE\". Additionally, attention should be paid when the details of these modifications are either 'DWORD (0x00000001)' or 'DWORD (0x00000002)', as these values indicate that DDE feature is being enabled or its security is being adjusted.\n\nSimilarly, for Microsoft Excel, track changes where EventType is \"SetValue\" concerning the registry keys ending with \"\\Excel\\Security\\DisableDDEServerLaunch\" and \"\\Excel\\Security\\DisableDDEServerLookup\". The key modifications of interest here involve setting these values to 'DWORD (0x00000000)' which effectively enables the DDE protocol despite any previous disablement, thus allowing data exchange.\n\nThe tagging of these monitoring actions aligns with certain tactics and techniques including the potential for execution through macros (when DDE is explicitly enabled) and persistence or privilege escalation (by allowing arbitrary code execution through DDE). While encountering these specific registry modifications may not always indicate malicious activity, as there can be legitimate reasons for their adjustment, it is crucial to investigate further to discern the true intent behind these changes. False positives are considered unknown, indicating that while not expected, they can occur, and thus each detection should be analyzed for its context. The overall level of concern for these activities is considered medium."
    }
  },
  {
    "instruction": "How can I detect: exploitation of vulnerabilities in Arcadyan routers as reported in CVE-2021-20090 and CVE-2021-20091.",
    "context": "",
    "output": "In order to detect exploitation of vulnerabilities in Arcadyan routers as reported in CVE-2021-20090 and CVE-2021-20091, you should: Monitor web server logs for specific patterns that indicate an attack attempt. Look for instances where the query string in the URL (cs-uri-query) contains patterns related to path traversal ('..%2f') which is a technique used to move up a directory level, bypassing authorization mechanisms. This pattern is associated with CVE-2021-20090. Moreover, pay attention to sequences where the query string combines this path traversal with an attempt to inject or manipulate configuration files, specifically targeting 'apply_abstract.cgi'. This behavior indicates a chaining of CVE-2021-20090 with CVE-2021-20091, aiming at config file injection. Additionally, be vigilant for query strings that direct access to directories commonly not requiring authentication such as '/images/', '/js/', '/css/', as well as specific login-related pages like '/setup_top_login.htm', '/login.html', '/loginerror.html', '/loginexclude.html', and '/loginlock.html'. An alert should be raised when evidence of path traversal or config file injection is detected in conjunction with requests to these non-authenticated directories or pages, suggesting an exploitation attempt. It\u2019s critical to note that this type of monitoring is set at the highest severity level due to the significant risk posed by these vulnerabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of vulnerabilities in Arcadyan routers as reported in CVE-2021-20090 and CVE-2021-20091.",
      "answer": "In order to detect exploitation of vulnerabilities in Arcadyan routers as reported in CVE-2021-20090 and CVE-2021-20091, you should: Monitor web server logs for specific patterns that indicate an attack attempt. Look for instances where the query string in the URL (cs-uri-query) contains patterns related to path traversal ('..%2f') which is a technique used to move up a directory level, bypassing authorization mechanisms. This pattern is associated with CVE-2021-20090. Moreover, pay attention to sequences where the query string combines this path traversal with an attempt to inject or manipulate configuration files, specifically targeting 'apply_abstract.cgi'. This behavior indicates a chaining of CVE-2021-20090 with CVE-2021-20091, aiming at config file injection. Additionally, be vigilant for query strings that direct access to directories commonly not requiring authentication such as '/images/', '/js/', '/css/', as well as specific login-related pages like '/setup_top_login.htm', '/login.html', '/loginerror.html', '/loginexclude.html', and '/loginlock.html'. An alert should be raised when evidence of path traversal or config file injection is detected in conjunction with requests to these non-authenticated directories or pages, suggesting an exploitation attempt. It\u2019s critical to note that this type of monitoring is set at the highest severity level due to the significant risk posed by these vulnerabilities."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of \"git\" in order to clone a remote repository that contain suspicious keywords which might be suspicious",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of \"git\" in order to clone a remote repository that contains suspicious keywords which might be suspicious, you should: Monitor process creation events on Linux systems for any use of the \"git\" command, particularly those that involve cloning a repository. Pay special attention to command line arguments that contain the 'clone' keyword to identify repository cloning activities. Further scrutinize these git cloning operations for the presence of certain keywords in the command line that could indicate malicious intent. These keywords include 'exploit', 'Vulns', 'vulnerability', 'RCE' (Remote Code Execution), 'RemoteCodeExecution', 'Invoke-', 'CVE-' indicating specific known vulnerabilities, 'poc-' (proof of concept), 'ProofOfConcept', and names of known vulnerabilities such as 'proxyshell', 'log4shell', 'eternalblue', 'eternal-blue', and any that start with 'MS17-'. Events matching these criteria should be flagged for further investigation despite the possibility of false positives, treating the severity of these findings at a medium level. This approach helps in identifying suspicious activities related to the exploitation or investigation of vulnerabilities through the misuse of the git command on Linux systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"git\" in order to clone a remote repository that contain suspicious keywords which might be suspicious",
      "answer": "In order to detect execution of \"git\" in order to clone a remote repository that contains suspicious keywords which might be suspicious, you should: Monitor process creation events on Linux systems for any use of the \"git\" command, particularly those that involve cloning a repository. Pay special attention to command line arguments that contain the 'clone' keyword to identify repository cloning activities. Further scrutinize these git cloning operations for the presence of certain keywords in the command line that could indicate malicious intent. These keywords include 'exploit', 'Vulns', 'vulnerability', 'RCE' (Remote Code Execution), 'RemoteCodeExecution', 'Invoke-', 'CVE-' indicating specific known vulnerabilities, 'poc-' (proof of concept), 'ProofOfConcept', and names of known vulnerabilities such as 'proxyshell', 'log4shell', 'eternalblue', 'eternal-blue', and any that start with 'MS17-'. Events matching these criteria should be flagged for further investigation despite the possibility of false positives, treating the severity of these findings at a medium level. This approach helps in identifying suspicious activities related to the exploitation or investigation of vulnerabilities through the misuse of the git command on Linux systems."
    }
  },
  {
    "instruction": "Please help me detect the following: abuse of the cron utility to perform task scheduling for initial or recurring execution of malicious code. Detection will focus on crontab jobs uploaded from the tmp folder.",
    "context": "",
    "output": "Sure!\nIn order to detect abuse of the cron utility to perform task scheduling for initial or recurring execution of malicious code, you should: Focus on monitoring the creation of processes on macOS systems. Specifically, look for instances where the 'crontab' utility is used, which indicates the scheduling of tasks. An important sign of malicious activity is when the command line used to create or modify crontab jobs includes references to the '/tmp/' directory. This is a common tactic used by attackers to execute malicious code because files in this directory can be easily placed and executed without arousing suspicion. It's crucial to note, however, that there might be legitimate administrative activities that use similar patterns, so any detections should be investigated to confirm their nature. The importance of monitoring this behavior is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "abuse of the cron utility to perform task scheduling for initial or recurring execution of malicious code. Detection will focus on crontab jobs uploaded from the tmp folder.",
      "answer": "In order to detect abuse of the cron utility to perform task scheduling for initial or recurring execution of malicious code, you should: Focus on monitoring the creation of processes on macOS systems. Specifically, look for instances where the 'crontab' utility is used, which indicates the scheduling of tasks. An important sign of malicious activity is when the command line used to create or modify crontab jobs includes references to the '/tmp/' directory. This is a common tactic used by attackers to execute malicious code because files in this directory can be easily placed and executed without arousing suspicion. It's crucial to note, however, that there might be legitimate administrative activities that use similar patterns, so any detections should be investigated to confirm their nature. The importance of monitoring this behavior is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: RDP session hijacking by using MSTSC shadowing",
    "context": "",
    "output": "Sure!\nIn order to detect RDP session hijacking by using MSTSC shadowing, you should: Monitor the creation of processes on Windows systems for command lines that contain both 'noconsentprompt' and 'shadow:'. This detection aims to identify the tactics used for unauthorized control or viewing of Remote Desktop Protocol (RDP) sessions without the consent of the user. Alerting on such commands can signal an attempt at RDP session hijacking, a method often employed to gain remote access or maintain persistence in a compromised system. Given the high severity level, any detection of such activity should be investigated promptly to mitigate potential security breaches.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "RDP session hijacking by using MSTSC shadowing",
      "answer": "In order to detect RDP session hijacking by using MSTSC shadowing, you should: Monitor the creation of processes on Windows systems for command lines that contain both 'noconsentprompt' and 'shadow:'. This detection aims to identify the tactics used for unauthorized control or viewing of Remote Desktop Protocol (RDP) sessions without the consent of the user. Alerting on such commands can signal an attempt at RDP session hijacking, a method often employed to gain remote access or maintain persistence in a compromised system. Given the high severity level, any detection of such activity should be investigated promptly to mitigate potential security breaches."
    }
  },
  {
    "instruction": "Please help me detect the following: when the enablement of developer features such as \"Developer Mode\" or \"Application Sideloading\". Which allows the user to install untrusted packages.",
    "context": "",
    "output": "Sure!\nIn order to detect when the enablement of developer features such as \"Developer Mode\" or \"Application Sideloading\", which allows the user to install untrusted packages, you should focus on monitoring Windows registry settings modifications specifically targeting the developer features enabling functionalities. This involves tracking any changes to registry keys under two main paths: '\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock' and '\\Policies\\Microsoft\\Windows\\Appx\\'. The critical registry keys to watch for changes are those ending with '\\AllowAllTrustedApps' and '\\AllowDevelopmentWithoutDevLicense', which, when set to a DWORD value of '0x00000001', indicate the activation of developer features allowing sideloading of apps or developer mode.\n\nThis monitoring is vital because enabling these features could potentially expose the system to untrusted and potentially malicious applications, bypassing the more secure and vetted paths of software installation. The detection strategy falls under the category of registry settings modification with the specific product being Windows. The potential for false positives is acknowledged as unknown, suggesting that while detections are of high importance, there might be legitimate scenarios for enabling these features that require contextual evaluation. The associated MITRE ATT&CK tactics and techniques with this kind of detection involve defense evasion techniques, as enabling developer features could be used by attackers to facilitate the installation of malicious software under the guise of development/testing scenarios.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when the enablement of developer features such as \"Developer Mode\" or \"Application Sideloading\". Which allows the user to install untrusted packages.",
      "answer": "In order to detect when the enablement of developer features such as \"Developer Mode\" or \"Application Sideloading\", which allows the user to install untrusted packages, you should focus on monitoring Windows registry settings modifications specifically targeting the developer features enabling functionalities. This involves tracking any changes to registry keys under two main paths: '\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock' and '\\Policies\\Microsoft\\Windows\\Appx\\'. The critical registry keys to watch for changes are those ending with '\\AllowAllTrustedApps' and '\\AllowDevelopmentWithoutDevLicense', which, when set to a DWORD value of '0x00000001', indicate the activation of developer features allowing sideloading of apps or developer mode.\n\nThis monitoring is vital because enabling these features could potentially expose the system to untrusted and potentially malicious applications, bypassing the more secure and vetted paths of software installation. The detection strategy falls under the category of registry settings modification with the specific product being Windows. The potential for false positives is acknowledged as unknown, suggesting that while detections are of high importance, there might be legitimate scenarios for enabling these features that require contextual evaluation. The associated MITRE ATT&CK tactics and techniques with this kind of detection involve defense evasion techniques, as enabling developer features could be used by attackers to facilitate the installation of malicious software under the guise of development/testing scenarios."
    }
  },
  {
    "instruction": "Can you explain how to detect: Obfuscated Powershell via use Clip.exe in Scripts",
    "context": "",
    "output": "Certainly!\n\nIn order to detect obfuscated PowerShell via use Clip.exe in Scripts, you should focus on monitoring Windows security logs, specifically looking for instances where the \"System Security Extension\" audit subcategory has been enabled to record Event ID (EID) 4697. This specific event ID is vital as it logs the creation or installation of a service, an action which can be used maliciously, especially when PowerShell commands are designed to evade detection by leveraging the clipboard utility (Clip.exe) as part of their process. \n\nIn your detection strategy, pay particular attention to any service creation logs where the Service File Name includes references to 'Clipboard' or begins with 'i'. These service file names are indicators that the clipboard utility is being used in a manner that is potentially malicious, often as part of an obfuscation technique to hide the true purpose or actions of a PowerShell script.\n\nConsider any hits on these criteria to be of high importance due to their potential for indicating malicious activity. However, be aware that there could be unknown false positives, as legitimate services might coincidentally meet these criteria under very rare circumstances. \n\nThe tactics associated with this kind of detection include \"Execution\" and \"Defense Evasion,\" as the attackers are executing PowerShell scripts and attempting to evade detection through the use of obfuscation techniques involving system utilities like Clip.exe. This approach highlights the importance of tight monitoring and control over script execution and privilege escalation within a Windows environment to mitigate such threats effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via use Clip.exe in Scripts",
      "answer": "In order to detect obfuscated PowerShell via use Clip.exe in Scripts, you should focus on monitoring Windows security logs, specifically looking for instances where the \"System Security Extension\" audit subcategory has been enabled to record Event ID (EID) 4697. This specific event ID is vital as it logs the creation or installation of a service, an action which can be used maliciously, especially when PowerShell commands are designed to evade detection by leveraging the clipboard utility (Clip.exe) as part of their process. \n\nIn your detection strategy, pay particular attention to any service creation logs where the Service File Name includes references to 'Clipboard' or begins with 'i'. These service file names are indicators that the clipboard utility is being used in a manner that is potentially malicious, often as part of an obfuscation technique to hide the true purpose or actions of a PowerShell script.\n\nConsider any hits on these criteria to be of high importance due to their potential for indicating malicious activity. However, be aware that there could be unknown false positives, as legitimate services might coincidentally meet these criteria under very rare circumstances. \n\nThe tactics associated with this kind of detection include \"Execution\" and \"Defense Evasion,\" as the attackers are executing PowerShell scripts and attempting to evade detection through the use of obfuscation techniques involving system utilities like Clip.exe. This approach highlights the importance of tight monitoring and control over script execution and privilege escalation within a Windows environment to mitigate such threats effectively."
    }
  },
  {
    "instruction": "How to detect: modification of PortProxy registry key which is used for port forwarding. For command execution see rule win_netsh_port_fwd.yml.",
    "context": "",
    "output": "In order to detect the modification of the PortProxy registry key which is used for port forwarding, you should: Monitor Windows Registry events, specifically targeting changes to the registry key at `HKLM\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\\tcp`. This vigilance is essential as unauthorized modifications can indicate attempts to manipulate port forwarding settings, possibly for command execution. However, be aware that there are legitimate uses that could trigger false alerts, such as the WSL2 network bridge PowerShell script often used with WSL, Kubernetes, or Docker, and the Synergy Software KVM for sharing a keyboard and mouse between computers. These exceptions are noteworthy to reduce unnecessary alarms. The severity level for this kind of detection is considered medium, indicating it's important but not always indicative of a high-threat activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of PortProxy registry key which is used for port forwarding. For command execution see rule win_netsh_port_fwd.yml.",
      "answer": "In order to detect the modification of the PortProxy registry key which is used for port forwarding, you should: Monitor Windows Registry events, specifically targeting changes to the registry key at `HKLM\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\\tcp`. This vigilance is essential as unauthorized modifications can indicate attempts to manipulate port forwarding settings, possibly for command execution. However, be aware that there are legitimate uses that could trigger false alerts, such as the WSL2 network bridge PowerShell script often used with WSL, Kubernetes, or Docker, and the Synergy Software KVM for sharing a keyboard and mouse between computers. These exceptions are noteworthy to reduce unnecessary alarms. The severity level for this kind of detection is considered medium, indicating it's important but not always indicative of a high-threat activity."
    }
  },
  {
    "instruction": "Can you explain how to detect: pattern of UAC Bypass using IEInstal.exe (UACMe 64)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the pattern of UAC Bypass using IEInstal.exe (UACMe 64), you should focus on monitoring Windows process creation logs for specific characteristics that indicate an attempt to exploit this particular UAC bypass technique. Key indicators include the creation of processes that run at either High integrity level or as System processes, which is suggestive of escalated privileges. Specifically, look for any newly created processes that have 'ieinstal.exe' as their parent process. This IEInstal.exe is a known vector used in bypassing User Account Control (UAC) mechanisms. Additionally, pay attention to processes that are executed from the user's AppData\\Local\\Temp directory or processes that end with 'consent.exe'. The use of the Temp directory often suggests an attempt to execute malicious scripts or binaries in a manner that avoids detection, while consent.exe is directly tied to UAC bypass techniques. Given these detection criteria, it's important to investigate such occurrences closely due to their high association with malicious activity, although it's also noted that there may be unknown false positives. This detection strategy directly combats techniques used for privilege escalation, specifically focusing on monitoring for abuse scenarios surrounding UAC bypass.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using IEInstal.exe (UACMe 64)",
      "answer": "In order to detect the pattern of UAC Bypass using IEInstal.exe (UACMe 64), you should focus on monitoring Windows process creation logs for specific characteristics that indicate an attempt to exploit this particular UAC bypass technique. Key indicators include the creation of processes that run at either High integrity level or as System processes, which is suggestive of escalated privileges. Specifically, look for any newly created processes that have 'ieinstal.exe' as their parent process. This IEInstal.exe is a known vector used in bypassing User Account Control (UAC) mechanisms. Additionally, pay attention to processes that are executed from the user's AppData\\Local\\Temp directory or processes that end with 'consent.exe'. The use of the Temp directory often suggests an attempt to execute malicious scripts or binaries in a manner that avoids detection, while consent.exe is directly tied to UAC bypass techniques. Given these detection criteria, it's important to investigate such occurrences closely due to their high association with malicious activity, although it's also noted that there may be unknown false positives. This detection strategy directly combats techniques used for privilege escalation, specifically focusing on monitoring for abuse scenarios surrounding UAC bypass."
    }
  },
  {
    "instruction": "How can I detect: specific command line arguments sequence seen used by SNAKE malware during its installation as described by CISA in their report",
    "context": "",
    "output": "In order to detect a specific command line arguments sequence seen used by SNAKE malware during its installation as described by CISA in their report, you should: Monitor the creation of processes on Windows systems, paying special attention to command lines that follow a very specific pattern. This pattern consists of two critical arguments passed to an executable: the first is a 64-character hexadecimal string, representing a SHA-256 hashed wide character string. This argument is significant as it is rarely used in common applications and can be a strong indicator of malicious activity. The second argument, also hexadecimal, must be at least 16 characters long, indicating the minimum required length for an AES initialization vector (IV). This specific sequence of arguments, when observed, points to the installation routine of the SNAKE malware, leveraging these cryptographic elements for its execution. The rarity of such command line patterns in benign applications coupled with the high level of specificity associated with this malware's installation method makes the likelihood of false positives low. Monitoring for and identifying these command line arguments can significantly contribute to thwarting attempts of SNAKE malware installation on Windows systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific command line arguments sequence seen used by SNAKE malware during its installation as described by CISA in their report",
      "answer": "In order to detect a specific command line arguments sequence seen used by SNAKE malware during its installation as described by CISA in their report, you should: Monitor the creation of processes on Windows systems, paying special attention to command lines that follow a very specific pattern. This pattern consists of two critical arguments passed to an executable: the first is a 64-character hexadecimal string, representing a SHA-256 hashed wide character string. This argument is significant as it is rarely used in common applications and can be a strong indicator of malicious activity. The second argument, also hexadecimal, must be at least 16 characters long, indicating the minimum required length for an AES initialization vector (IV). This specific sequence of arguments, when observed, points to the installation routine of the SNAKE malware, leveraging these cryptographic elements for its execution. The rarity of such command line patterns in benign applications coupled with the high level of specificity associated with this malware's installation method makes the likelihood of false positives low. Monitoring for and identifying these command line arguments can significantly contribute to thwarting attempts of SNAKE malware installation on Windows systems."
    }
  },
  {
    "instruction": "Can you explain how to detect: Credential Acquisition via Registry Hive Dumping",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Credential Acquisition via Registry Hive Dumping, you should look for the creation of processes on Windows systems that are specifically associated with the registry editor application (`reg.exe`). These processes should be identified by their image name ending with `\\reg.exe` and having an original filename of `reg.exe`. Furthermore, the command lines of these processes should include operations indicative of attempts to save or export data, identified by the presence of `save` or `export` in the command line. Additionally, these command lines should contain references to specific registry hives that are crucial for holding sensitive information, including `hklm\\sam`, `hklm\\security`, `HKEY_LOCAL_MACHINE\\SAM`, and `HKEY_LOCAL_MACHINE\\SECURITY`. The detection of processes meeting all these criteria\u2014usage of `reg.exe`, intent to export or save, and targeting specific sensitive registry hives\u2014indicates an active attempt at credential acquisition through registry hive dumping.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Credential Acquisition via Registry Hive Dumping",
      "answer": "In order to detect Credential Acquisition via Registry Hive Dumping, you should look for the creation of processes on Windows systems that are specifically associated with the registry editor application (`reg.exe`). These processes should be identified by their image name ending with `\\reg.exe` and having an original filename of `reg.exe`. Furthermore, the command lines of these processes should include operations indicative of attempts to save or export data, identified by the presence of `save` or `export` in the command line. Additionally, these command lines should contain references to specific registry hives that are crucial for holding sensitive information, including `hklm\\sam`, `hklm\\security`, `HKEY_LOCAL_MACHINE\\SAM`, and `HKEY_LOCAL_MACHINE\\SECURITY`. The detection of processes meeting all these criteria\u2014usage of `reg.exe`, intent to export or save, and targeting specific sensitive registry hives\u2014indicates an active attempt at credential acquisition through registry hive dumping."
    }
  },
  {
    "instruction": "How to detect: TeamViewer_Desktop.exe is create during install",
    "context": "",
    "output": "In order to detect the creation of \"TeamViewer_Desktop.exe\" during an installation process, you should monitor for file events within the Windows environment. Specifically, look for any event where the target filename ends with '\\TeamViewer_Desktop.exe'. This approach is particularly important as it helps to identify potential misuse or malicious deployments of TeamViewer by tracking its installation footprint. Keep in mind that false positives are currently unknown, suggesting caution and further investigation for any alerts. The alert level for this kind of detection has been set to medium, highlighting its importance in the broader context of monitoring and threat detection activities related to various tactics and techniques, such as Execution, Persistence, or Privilege Escalation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "TeamViewer_Desktop.exe is create during install",
      "answer": "In order to detect the creation of \"TeamViewer_Desktop.exe\" during an installation process, you should monitor for file events within the Windows environment. Specifically, look for any event where the target filename ends with '\\TeamViewer_Desktop.exe'. This approach is particularly important as it helps to identify potential misuse or malicious deployments of TeamViewer by tracking its installation footprint. Keep in mind that false positives are currently unknown, suggesting caution and further investigation for any alerts. The alert level for this kind of detection has been set to medium, highlighting its importance in the broader context of monitoring and threat detection activities related to various tactics and techniques, such as Execution, Persistence, or Privilege Escalation."
    }
  },
  {
    "instruction": "How to detect: usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver.\nWith this privilege, the user can dynamically load and unload device drivers or other code in to kernel mode.\nThis user right does not apply to Plug and Play device drivers.\nIf you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers.\nThis will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\n",
    "context": "",
    "output": "In order to \"Detects the usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver. With this privilege, the user can dynamically load and unload device drivers or other code into kernel mode. This user right does not apply to Plug and Play device drivers. If you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers. This will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\", you should:\n\nMonitor security logs from Windows systems for specific events indicating that the 'SeLoadDriverPrivilege' is being utilized. Specifically, look out for EventID 4673, which signifies an attempt to use this privilege. This privilege is crucial for operations like dynamically loading or unloading device drivers into kernel mode, an action which does not pertain to Plug and Play device drivers and should be scrutinized especially if not performed by privileged users or admins. \n\nIt is essential to filter these detection logs carefully. Exclude events associated with known and trusted processes, such as common Windows executables like Dism.exe, rundll32.exe, fltMC.exe, and several others including process executable paths related to the System32 directory, HelpPane, and the Windows explorer among the list. Moreover, any process names ending with tools commonly used for system monitoring or web browsers like Chrome, and applications like Microsoft Teams should be considered with caution as these might lead to false positives due to legitimate usage. Additionally, any process that starts with the path 'C:\\Program Files\\WindowsApps\\Microsoft' also warrants exclusion from the suspicious activity to minimize the detection of benign activities as malicious.\n\nHowever, despite these exclusions, it's pivotal to establish a comprehensive understanding of what is classified as normal within your environment. This could involve creating a baseline of legitimate tools that load drivers, including but not limited to, system internals, hardware monitoring tools like CPU-Z, antivirus software, and others. Special attention should be made to exclude users who have legitimate reasons to load drivers\u2014this aids in refining the detection process to ensure only potentially malicious activities are flagged.\n\nBy adopting such an approach, entities can effectively monitor and detect unauthorized or suspicious uses of the 'SeLoadDriverPrivilege', flagging attempts to load malicious kernel drivers while reducing false positives by considering legitimate software and authorized user activities. Establishing and maintaining a whitelist is crucial to differentiate between harmful and benign use of this privilege, thus enhancing the security posture against threats attempting to exploit kernel mode operations for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver.\nWith this privilege, the user can dynamically load and unload device drivers or other code in to kernel mode.\nThis user right does not apply to Plug and Play device drivers.\nIf you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers.\nThis will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\n",
      "answer": "In order to \"Detects the usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver. With this privilege, the user can dynamically load and unload device drivers or other code into kernel mode. This user right does not apply to Plug and Play device drivers. If you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers. This will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\", you should:\n\nMonitor security logs from Windows systems for specific events indicating that the 'SeLoadDriverPrivilege' is being utilized. Specifically, look out for EventID 4673, which signifies an attempt to use this privilege. This privilege is crucial for operations like dynamically loading or unloading device drivers into kernel mode, an action which does not pertain to Plug and Play device drivers and should be scrutinized especially if not performed by privileged users or admins. \n\nIt is essential to filter these detection logs carefully. Exclude events associated with known and trusted processes, such as common Windows executables like Dism.exe, rundll32.exe, fltMC.exe, and several others including process executable paths related to the System32 directory, HelpPane, and the Windows explorer among the list. Moreover, any process names ending with tools commonly used for system monitoring or web browsers like Chrome, and applications like Microsoft Teams should be considered with caution as these might lead to false positives due to legitimate usage. Additionally, any process that starts with the path 'C:\\Program Files\\WindowsApps\\Microsoft' also warrants exclusion from the suspicious activity to minimize the detection of benign activities as malicious.\n\nHowever, despite these exclusions, it's pivotal to establish a comprehensive understanding of what is classified as normal within your environment. This could involve creating a baseline of legitimate tools that load drivers, including but not limited to, system internals, hardware monitoring tools like CPU-Z, antivirus software, and others. Special attention should be made to exclude users who have legitimate reasons to load drivers\u2014this aids in refining the detection process to ensure only potentially malicious activities are flagged.\n\nBy adopting such an approach, entities can effectively monitor and detect unauthorized or suspicious uses of the 'SeLoadDriverPrivilege', flagging attempts to load malicious kernel drivers while reducing false positives by considering legitimate software and authorized user activities. Establishing and maintaining a whitelist is crucial to differentiate between harmful and benign use of this privilege, thus enhancing the security posture against threats attempting to exploit kernel mode operations for malicious purposes."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel.",
    "context": "",
    "output": "In order to detect when a Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel, you should monitor logs generated by the threat management system for Microsoft 365 services. Specifically, focus on logs coming from the Security Compliance Center. The key event to look out for is labeled as \"Impossible travel activity\" and must have a status indicating success. This detection aims to identify when a user's credentials have been used to attempt sign-ins from geographical locations that are physically impossible to travel between within the time frame of the sign-in attempts. It is important to note that while this is a medium-level security alert, there may be unknown scenarios that could trigger false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel, you should monitor logs generated by the threat management system for Microsoft 365 services. Specifically, focus on logs coming from the Security Compliance Center. The key event to look out for is labeled as \"Impossible travel activity\" and must have a status indicating success. This detection aims to identify when a user's credentials have been used to attempt sign-ins from geographical locations that are physically impossible to travel between within the time frame of the sign-in attempts. It is important to note that while this is a medium-level security alert, there may be unknown scenarios that could trigger false positives."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of an encoded/obfuscated version of an IP address (hex, octal...) in an URL combined with a download command",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of an encoded/obfuscated version of an IP address (hex, octal, etc.) in a URL combined with a download command, you should monitor for the creation of processes on Windows systems that involve command lines executing common download commands such as 'Invoke-WebRequest', 'iwr', 'wget', 'curl', 'DownloadFile', and 'DownloadString'. Additionally, pay attention to command lines that contain potential hexadecimal or octal representations of IP addresses indicated by patterns like '//0x', '.0x', '.00x', or command lines that contain 'http://%' in conjunction with '%2e', signaling an attempt at obfuscation in the URL. These indicators may point toward an attacker's attempt at hiding their tracks while performing malicious downloads, which could be part of a larger attack strategy involving tactics like Command and Control or Exfiltration. Since some legitimate activities might accidentally trigger this detection, be aware of potential false positives, although these are currently unknown. This strategy ensures a medium-level security posture against such threats by focusing on the detailed aspects of the process creation log entries.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of an encoded/obfuscated version of an IP address (hex, octal...) in an URL combined with a download command",
      "answer": "In order to detect the use of an encoded/obfuscated version of an IP address (hex, octal, etc.) in a URL combined with a download command, you should monitor for the creation of processes on Windows systems that involve command lines executing common download commands such as 'Invoke-WebRequest', 'iwr', 'wget', 'curl', 'DownloadFile', and 'DownloadString'. Additionally, pay attention to command lines that contain potential hexadecimal or octal representations of IP addresses indicated by patterns like '//0x', '.0x', '.00x', or command lines that contain 'http://%' in conjunction with '%2e', signaling an attempt at obfuscation in the URL. These indicators may point toward an attacker's attempt at hiding their tracks while performing malicious downloads, which could be part of a larger attack strategy involving tactics like Command and Control or Exfiltration. Since some legitimate activities might accidentally trigger this detection, be aware of potential false positives, although these are currently unknown. This strategy ensures a medium-level security posture against such threats by focusing on the detailed aspects of the process creation log entries."
    }
  },
  {
    "instruction": "How to detect: Extremely high rate of TXT record type DNS requests from host per short period of time. Possible result of Do-exfiltration tool execution",
    "context": "",
    "output": "In order to detect an extremely high rate of TXT record type DNS requests from a host per short period of time, possibly resulting from the execution of a Do-exfiltration tool, you should: Monitor DNS logs for a significant number of TXT record requests. Specifically, this involves looking for instances where a single source IP addresses more than 50 DNS TXT record requests within a brief timeframe of one minute. Such behavior might indicate an attempt at data exfiltration or a similar cyber-attack, as normal operations rarely require such high volumes of TXT record requests in such a short period. It's important to note that there are legitimate scenarios that might lead to high rates of DNS TXT requests. These legitimate cases, which do not pose a security threat, should be identified and whitelisted to avoid false positives. The detection strategy focuses on DNS logs, as these are crucial in identifying the specified activity. Given that the severity of this detection has been assessed at a medium level, it suggests that while the activity is suspicious, it may not always be indicative of a malicious intent without further context. Nonetheless, it's critical to include this detection capability as part of a broader security monitoring strategy to effectively counter possible malicious activities related to data exfiltration.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Extremely high rate of TXT record type DNS requests from host per short period of time. Possible result of Do-exfiltration tool execution",
      "answer": "In order to detect an extremely high rate of TXT record type DNS requests from a host per short period of time, possibly resulting from the execution of a Do-exfiltration tool, you should: Monitor DNS logs for a significant number of TXT record requests. Specifically, this involves looking for instances where a single source IP addresses more than 50 DNS TXT record requests within a brief timeframe of one minute. Such behavior might indicate an attempt at data exfiltration or a similar cyber-attack, as normal operations rarely require such high volumes of TXT record requests in such a short period. It's important to note that there are legitimate scenarios that might lead to high rates of DNS TXT requests. These legitimate cases, which do not pose a security threat, should be identified and whitelisted to avoid false positives. The detection strategy focuses on DNS logs, as these are crucial in identifying the specified activity. Given that the severity of this detection has been assessed at a medium level, it suggests that while the activity is suspicious, it may not always be indicative of a malicious intent without further context. Nonetheless, it's critical to include this detection capability as part of a broader security monitoring strategy to effectively counter possible malicious activities related to data exfiltration."
    }
  },
  {
    "instruction": "How can I detect: Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller. This value can be decrypted with gpp-decrypt.",
    "context": "",
    "output": "In order to look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller, which can be decrypted with gpp-decrypt, you should: Monitor the creation of processes on Windows systems for instances of the findstr.exe utility being executed with command-line arguments that include 'cpassword', '\\sysvol\\', and '.xml'. This detection focuses on pinpointing attempts to search Group Policy files for the cpassword attribute, a technique attackers might use to find credentials stored within Group Policy Preferences. It is essential to closely observe both the process image name endings to confirm they are indeed invoking findstr.exe and the original file name attribute to ensure it matches FINDSTR.EXE, alongside the specified command line parameters that could indicate a suspicious search operation relating to this attack tactic. However, be aware that detections might not always be malicious and could trigger false positives, where the intent is not harmful. The priority level for investigating these alerts should be high due to the sensitive nature of the information that could be exposed through such an attack methodology.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller. This value can be decrypted with gpp-decrypt.",
      "answer": "In order to look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller, which can be decrypted with gpp-decrypt, you should: Monitor the creation of processes on Windows systems for instances of the findstr.exe utility being executed with command-line arguments that include 'cpassword', '\\sysvol\\', and '.xml'. This detection focuses on pinpointing attempts to search Group Policy files for the cpassword attribute, a technique attackers might use to find credentials stored within Group Policy Preferences. It is essential to closely observe both the process image name endings to confirm they are indeed invoking findstr.exe and the original file name attribute to ensure it matches FINDSTR.EXE, alongside the specified command line parameters that could indicate a suspicious search operation relating to this attack tactic. However, be aware that detections might not always be malicious and could trigger false positives, where the intent is not harmful. The priority level for investigating these alerts should be high due to the sensitive nature of the information that could be exposed through such an attack methodology."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of a file with an uncommon extension in an Office application startup folder",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation of a file with an uncommon extension in an Office application startup folder, you should monitor file events on Windows systems, particularly focusing on the creation of files within specific startup directories used by Microsoft Office applications like Word and Excel. This involves checking for files created in the '\\Microsoft\\Word\\STARTUP' directory, as well as a combination of directories including '\\Office', '\\Program Files', and '\\STARTUP' for Word. Similarly, for Excel, monitor files created in '\\Microsoft\\Excel\\XLSTART', and again a combination including '\\Office', '\\Program Files', and '\\XLSTART'. \n\nHowever, it's essential to exclude files with common extensions associated with Word (.docb, .docm, .docx, .dotm, .wll, .wwl) and Excel (.xls, .xlsm, .xlsx, .xlt, .xltm, .xll, .xlw) since their creation in startup folders might not signify unusual activity. Additionally, you should disregard events tied to the execution of main Office application processes (like Word and Excel) through common file paths and the Office ClickToRun service, as these are usually legitimate actions and could lead to false positives.\n\nThis monitoring is vital in identifying potential malicious activities designed to gain persistence or execute unauthorized code through Office applications by taking advantage of the startup folders. It's a strategic point for attackers who might attempt to place malicious files in these locations to have them auto-execute when the Office applications start. By excluding common file extensions and legitimate application processes, the detection focuses on uncommon extensions that are more likely to be used in unauthorized or malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a file with an uncommon extension in an Office application startup folder",
      "answer": "In order to detect the creation of a file with an uncommon extension in an Office application startup folder, you should monitor file events on Windows systems, particularly focusing on the creation of files within specific startup directories used by Microsoft Office applications like Word and Excel. This involves checking for files created in the '\\Microsoft\\Word\\STARTUP' directory, as well as a combination of directories including '\\Office', '\\Program Files', and '\\STARTUP' for Word. Similarly, for Excel, monitor files created in '\\Microsoft\\Excel\\XLSTART', and again a combination including '\\Office', '\\Program Files', and '\\XLSTART'. \n\nHowever, it's essential to exclude files with common extensions associated with Word (.docb, .docm, .docx, .dotm, .wll, .wwl) and Excel (.xls, .xlsm, .xlsx, .xlt, .xltm, .xll, .xlw) since their creation in startup folders might not signify unusual activity. Additionally, you should disregard events tied to the execution of main Office application processes (like Word and Excel) through common file paths and the Office ClickToRun service, as these are usually legitimate actions and could lead to false positives.\n\nThis monitoring is vital in identifying potential malicious activities designed to gain persistence or execute unauthorized code through Office applications by taking advantage of the startup folders. It's a strategic point for attackers who might attempt to place malicious files in these locations to have them auto-execute when the Office applications start. By excluding common file extensions and legitimate application processes, the detection focuses on uncommon extensions that are more likely to be used in unauthorized or malicious activities."
    }
  },
  {
    "instruction": "How can I detect: Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization.",
    "context": "",
    "output": "In order to detect when a Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization, you should: Focus on analyzing logs generated by the threat management service within Microsoft 365 products. Specifically, pay attention to entries coming from the SecurityComplianceCenter. Look for events named 'Data exfiltration to unsanctioned apps' that have been marked as successful. This detection mechanism aims to identify actions that may involve transferring sensitive data outside the organization through applications that are not approved or recognized, indicating a potential security threat. Be aware of false positives, as the nature of these incidents might sometimes be misidentified. The severity level of this activity is considered medium, highlighting the need for timely investigation to prevent unauthorized access or loss of data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization, you should: Focus on analyzing logs generated by the threat management service within Microsoft 365 products. Specifically, pay attention to entries coming from the SecurityComplianceCenter. Look for events named 'Data exfiltration to unsanctioned apps' that have been marked as successful. This detection mechanism aims to identify actions that may involve transferring sensitive data outside the organization through applications that are not approved or recognized, indicating a potential security threat. Be aware of false positives, as the nature of these incidents might sometimes be misidentified. The severity level of this activity is considered medium, highlighting the need for timely investigation to prevent unauthorized access or loss of data."
    }
  },
  {
    "instruction": "Please help me detect the following: potential network sniffing via use of network tools such as \"tshark\", \"windump\".\nNetwork sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n",
    "context": "",
    "output": "Sure!\nIn order to detect potential network sniffing via use of network tools such as \"tshark\", \"windump\", you should: Focus on capturing process creation events in Windows environments. Look for instances where executables ending in '\\tshark.exe' or '\\windump.exe' are launched, particularly those that include the '-i' command line argument, which suggests interfacing with network devices. This activity is often indicative of an adversary's attempt to monitor or capture network traffic, as tools like \"tshark\" and \"windump\" are capable of placing a network interface into promiscuous mode or using span ports for capturing traffic. It's important to consider that such detections might also be triggered by legitimate network troubleshooting efforts by administrators, hence the level of alert is set to medium. Identifying the use of these tools is crucial for thwarting or understanding espionage and credential theft tactics, as the unauthorized acquisition and analysis of network traffic can provide adversaries with sensitive information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential network sniffing via use of network tools such as \"tshark\", \"windump\".\nNetwork sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n",
      "answer": "In order to detect potential network sniffing via use of network tools such as \"tshark\", \"windump\", you should: Focus on capturing process creation events in Windows environments. Look for instances where executables ending in '\\tshark.exe' or '\\windump.exe' are launched, particularly those that include the '-i' command line argument, which suggests interfacing with network devices. This activity is often indicative of an adversary's attempt to monitor or capture network traffic, as tools like \"tshark\" and \"windump\" are capable of placing a network interface into promiscuous mode or using span ports for capturing traffic. It's important to consider that such detections might also be triggered by legitimate network troubleshooting efforts by administrators, hence the level of alert is set to medium. Identifying the use of these tools is crucial for thwarting or understanding espionage and credential theft tactics, as the unauthorized acquisition and analysis of network traffic can provide adversaries with sensitive information."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Unfixed method for UAC bypass from Windows 10. WSReset.exe file associated with the Windows Store. It will run a binary file contained in a low-privilege registry.",
    "context": "",
    "output": "In order to detect an unfixed method for UAC bypass from Windows 10 that involves the WSReset.exe file associated with the Windows Store, which will run a binary file contained in a low-privilege registry, you should: Monitor Windows registry events, specifically looking for any changes or modifications made to the registry key that ends with '\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command'. This particular registry key alteration is indicative of an attempt to exploit this specific UAC bypass vulnerability. It's crucial to pay attention to the following pieces of information during detection: the name of the computer where the modification occurred, the image path of the executable or process making the change, the type of event that triggered the record, and specifically the target registry object that was affected. Given the high level of risk associated with this kind of modification, any instances found should be promptly investigated to mitigate potential security threats. The tags relevant to this attack include Privilege Escalation, Bypass User Account Control (UAC), and techniques related to executing binary files through registry modifications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Unfixed method for UAC bypass from Windows 10. WSReset.exe file associated with the Windows Store. It will run a binary file contained in a low-privilege registry.",
      "answer": "In order to detect an unfixed method for UAC bypass from Windows 10 that involves the WSReset.exe file associated with the Windows Store, which will run a binary file contained in a low-privilege registry, you should: Monitor Windows registry events, specifically looking for any changes or modifications made to the registry key that ends with '\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command'. This particular registry key alteration is indicative of an attempt to exploit this specific UAC bypass vulnerability. It's crucial to pay attention to the following pieces of information during detection: the name of the computer where the modification occurred, the image path of the executable or process making the change, the type of event that triggered the record, and specifically the target registry object that was affected. Given the high level of risk associated with this kind of modification, any instances found should be promptly investigated to mitigate potential security threats. The tags relevant to this attack include Privilege Escalation, Bypass User Account Control (UAC), and techniques related to executing binary files through registry modifications."
    }
  },
  {
    "instruction": "How can I detect: DNS-answer with TTL <10.",
    "context": "",
    "output": "In order to detect DNS-answer with TTL <10, you should: monitor DNS logs for responses that have a TTL (Time to Live) less than 10 seconds, which can indicate suspicious or malicious activity. Specifically, focus on responses where any answer is provided (indicating a successful query response) and the TTL value for the response is greater than 0 but less than 10 seconds. Additionally, it is important to observe the rate at which these responses occur; if more than 3 such responses are identified coming from the same source IP address within a 30-second window, it warrants attention. The detection of such activity is considered to be of medium severity and aligns with tactics and techniques that involve the exploitation of DNS for command and control or other malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DNS-answer with TTL <10.",
      "answer": "In order to detect DNS-answer with TTL <10, you should: monitor DNS logs for responses that have a TTL (Time to Live) less than 10 seconds, which can indicate suspicious or malicious activity. Specifically, focus on responses where any answer is provided (indicating a successful query response) and the TTL value for the response is greater than 0 but less than 10 seconds. Additionally, it is important to observe the rate at which these responses occur; if more than 3 such responses are identified coming from the same source IP address within a 30-second window, it warrants attention. The detection of such activity is considered to be of medium severity and aligns with tactics and techniques that involve the exploitation of DNS for command and control or other malicious purposes."
    }
  },
  {
    "instruction": "Please help me detect the following: modification of an EC2 snapshot's permissions to enable access from another account",
    "context": "",
    "output": "Sure!\nIn order to detect the modification of an EC2 snapshot's permissions to enable access from another account, you should: Monitor AWS CloudTrail logs for events where the source is EC2 (`ec2.amazonaws.com`) and the event name is `ModifySnapshotAttribute`. This activity might indicate that an EC2 snapshot's permissions are being changed to allow access from an external account, which can be a sign of unauthorized access or data exfiltration. Be aware that there can be legitimate reasons for altering a snapshot's permissions, such as granting access to a snapshot for collaboration purposes or transferring resources between accounts. Therefore, it's important to examine these events in the context of known and expected administrative activities to differentiate between benign and malicious intent. The severity level for this activity is considered medium, emphasizing the need for a balanced approach to monitoring and response.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of an EC2 snapshot's permissions to enable access from another account",
      "answer": "In order to detect the modification of an EC2 snapshot's permissions to enable access from another account, you should: Monitor AWS CloudTrail logs for events where the source is EC2 (`ec2.amazonaws.com`) and the event name is `ModifySnapshotAttribute`. This activity might indicate that an EC2 snapshot's permissions are being changed to allow access from an external account, which can be a sign of unauthorized access or data exfiltration. Be aware that there can be legitimate reasons for altering a snapshot's permissions, such as granting access to a snapshot for collaboration purposes or transferring resources between accounts. Therefore, it's important to examine these events in the context of known and expected administrative activities to differentiate between benign and malicious intent. The severity level for this activity is considered medium, emphasizing the need for a balanced approach to monitoring and response."
    }
  },
  {
    "instruction": "How to detect: Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials.\nThese can be files created by users to store their own credentials, shared credential stores for a group of individuals,\nconfiguration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n",
    "context": "",
    "output": "In order to detect adversaries searching local file systems and remote file shares for files containing insecurely stored credentials, you should focus on monitoring Windows PowerShell scripts. Specifically, ensure that Script Block Logging is enabled to capture the execution of PowerShell scripts. You are looking for script blocks that contain the use of the 'ls' command in combination with the '-R' flag for recursive directory listing, and the use of 'select-string' in conjunction with '-Pattern'. This combination of commands and flags is indicative of behavior where an adversary is attempting to search through files and directories, potentially looking for those containing insecurely stored credentials. These activities fall under tactics and techniques associated with credential access. Monitoring for such patterns in PowerShell script execution can help identify malicious activities related to the searching of sensitive files for credentials. It is important to note that while this detection logic is critical in identifying possible credential harvesting activities, there might be false positives due to legitimate administrative tasks that use similar command combinations, albeit for non-malicious purposes. The detection severity level for these activities is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials.\nThese can be files created by users to store their own credentials, shared credential stores for a group of individuals,\nconfiguration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n",
      "answer": "In order to detect adversaries searching local file systems and remote file shares for files containing insecurely stored credentials, you should focus on monitoring Windows PowerShell scripts. Specifically, ensure that Script Block Logging is enabled to capture the execution of PowerShell scripts. You are looking for script blocks that contain the use of the 'ls' command in combination with the '-R' flag for recursive directory listing, and the use of 'select-string' in conjunction with '-Pattern'. This combination of commands and flags is indicative of behavior where an adversary is attempting to search through files and directories, potentially looking for those containing insecurely stored credentials. These activities fall under tactics and techniques associated with credential access. Monitoring for such patterns in PowerShell script execution can help identify malicious activities related to the searching of sensitive files for credentials. It is important to note that while this detection logic is critical in identifying possible credential harvesting activities, there might be false positives due to legitimate administrative tasks that use similar command combinations, albeit for non-malicious purposes. The detection severity level for these activities is considered medium."
    }
  },
  {
    "instruction": "How to detect: Adversaries may use port monitors to run an attacker supplied DLL during system boot for persistence or privilege escalation.\nA port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup.\n",
    "context": "",
    "output": "In order to detect adversaries attempting to achieve persistence or escalate privileges by using port monitors to run attacker-supplied DLLs during system boot, you should monitor for specific registry modifications on Windows systems. Focus on the registry set events, particularly changes within the \"HKLM\\System\\CurrentControlSet\\Control\\Print\\Monitors\\\" registry path. These modifications should raise alerts if the details of the change include the setting of a value where the target object starts with the specified registry path and the details end with '.dll', indicating the loading of a DLL file.\n\nHowever, to reduce false positives, it's essential to exclude certain benign instances from triggering alerts. Exclude modifications related to \"C:\\Windows\\System32\\spoolsv.exe\" that involve the specific registry path \"\\System\\CurrentControlSet\\Control\\Print\\Monitors\\CutePDF Writer Monitor v4.0\\Driver\" and the \"cpwmon64_v40.dll\" details. This exclusion applies particularly when the user context contains various internationalized versions of 'AUTHORI' or 'AUTORI', indicating a legitimate process related to CutePDF Writer Monitor v4.0. Additionally, exclude changes linked to the \"Control\\Print\\Monitors\\MONVNC\\Driver\" object and modifications that simultaneously relate to the \"Control\\Print\\Environments\\\", \"\\Drivers\\\", and \"\\VNC Printer\" paths, as these are identified as legitimate configurations.\n\nSuspicious modifications that do not match these exclusions at the specified registry path, particularly those aiming to set a DLL to load at startup, are indicative of tactics aimed at persistence or privilege escalation. These activities can be associated with adversaries leveraging the AddMonitor API for malicious purposes. Tagging these detection instances appropriately includes noting their relevance to tactics such as persistence and privilege escalation for a more informed security response. The severity level associated with these findings is high, indicating a significant risk. However, one should be aware that unknown scenarios might lead to false positives, highlighting the importance of context in analysis.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may use port monitors to run an attacker supplied DLL during system boot for persistence or privilege escalation.\nA port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup.\n",
      "answer": "In order to detect adversaries attempting to achieve persistence or escalate privileges by using port monitors to run attacker-supplied DLLs during system boot, you should monitor for specific registry modifications on Windows systems. Focus on the registry set events, particularly changes within the \"HKLM\\System\\CurrentControlSet\\Control\\Print\\Monitors\\\" registry path. These modifications should raise alerts if the details of the change include the setting of a value where the target object starts with the specified registry path and the details end with '.dll', indicating the loading of a DLL file.\n\nHowever, to reduce false positives, it's essential to exclude certain benign instances from triggering alerts. Exclude modifications related to \"C:\\Windows\\System32\\spoolsv.exe\" that involve the specific registry path \"\\System\\CurrentControlSet\\Control\\Print\\Monitors\\CutePDF Writer Monitor v4.0\\Driver\" and the \"cpwmon64_v40.dll\" details. This exclusion applies particularly when the user context contains various internationalized versions of 'AUTHORI' or 'AUTORI', indicating a legitimate process related to CutePDF Writer Monitor v4.0. Additionally, exclude changes linked to the \"Control\\Print\\Monitors\\MONVNC\\Driver\" object and modifications that simultaneously relate to the \"Control\\Print\\Environments\\\", \"\\Drivers\\\", and \"\\VNC Printer\" paths, as these are identified as legitimate configurations.\n\nSuspicious modifications that do not match these exclusions at the specified registry path, particularly those aiming to set a DLL to load at startup, are indicative of tactics aimed at persistence or privilege escalation. These activities can be associated with adversaries leveraging the AddMonitor API for malicious purposes. Tagging these detection instances appropriately includes noting their relevance to tactics such as persistence and privilege escalation for a more informed security response. The severity level associated with these findings is high, indicating a significant risk. However, one should be aware that unknown scenarios might lead to false positives, highlighting the importance of context in analysis."
    }
  },
  {
    "instruction": "Can you explain how to detect: NotPetya ransomware activity in which the extracted passwords are passed back to the main module via named pipe, the file system journal of drive C is deleted and Windows eventlogs are cleared using wevtutil",
    "context": "",
    "output": "Certainly!\n\nIn order to detect NotPetya ransomware activity in which the extracted passwords are passed back to the main module via named pipe, the file system journal of drive C is deleted and Windows eventlogs are cleared using wevtutil, you should monitor process creation logs in Windows systems for specific patterns of command line usage that indicate malicious activities. This includes looking for command lines that contain operations such as clearing the Application event log and deleting the file system journal on drive C using the command 'wevtutil cl Application & fsutil usn deletejournal /D C:'. Additionally, be on the lookout for command lines that try to execute or interact with suspiciously named files such as 'dllhost.dat' located in the %WINDIR%\\ransoms directory, often associated with ransomware.\n\nParticular attention should be paid to instances of 'rundll32.exe' being executed with command-line arguments ending in patterns like '.dat,#1', '.dat #1' (taking into account that Sysmon may remove commas), or '.zip.dll\",#1', as these are techniques used to stealthily load and execute malicious code. Also, the presence of '\\perfc.dat' in command lines should be considered a strong indicator of NotPetya ransomware activity, as this file name is explicitly associated with this ransomware's execution patterns.\n\nIt's crucial to capture and analyze the command lines and parent command lines used in process creation events to detect the activities indicative of NotPetya. While false positives are considered unknown, the seriousness of the threat means any detection should be treated with high urgency, labeled as critical level. By focusing on these detection methods, cybersecurity professionals can identify and respond to NotPetya ransomware threats to mitigate damage and prevent widespread infection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "NotPetya ransomware activity in which the extracted passwords are passed back to the main module via named pipe, the file system journal of drive C is deleted and Windows eventlogs are cleared using wevtutil",
      "answer": "In order to detect NotPetya ransomware activity in which the extracted passwords are passed back to the main module via named pipe, the file system journal of drive C is deleted and Windows eventlogs are cleared using wevtutil, you should monitor process creation logs in Windows systems for specific patterns of command line usage that indicate malicious activities. This includes looking for command lines that contain operations such as clearing the Application event log and deleting the file system journal on drive C using the command 'wevtutil cl Application & fsutil usn deletejournal /D C:'. Additionally, be on the lookout for command lines that try to execute or interact with suspiciously named files such as 'dllhost.dat' located in the %WINDIR%\\ransoms directory, often associated with ransomware.\n\nParticular attention should be paid to instances of 'rundll32.exe' being executed with command-line arguments ending in patterns like '.dat,#1', '.dat #1' (taking into account that Sysmon may remove commas), or '.zip.dll\",#1', as these are techniques used to stealthily load and execute malicious code. Also, the presence of '\\perfc.dat' in command lines should be considered a strong indicator of NotPetya ransomware activity, as this file name is explicitly associated with this ransomware's execution patterns.\n\nIt's crucial to capture and analyze the command lines and parent command lines used in process creation events to detect the activities indicative of NotPetya. While false positives are considered unknown, the seriousness of the threat means any detection should be treated with high urgency, labeled as critical level. By focusing on these detection methods, cybersecurity professionals can identify and respond to NotPetya ransomware threats to mitigate damage and prevent widespread infection."
    }
  },
  {
    "instruction": "Explain how should I detect the following: DNS server error in which a specified plugin DLL (in registry) could not be loaded",
    "context": "",
    "output": "In order to detect a DNS server error in which a specified plugin DLL (in registry) could not be loaded, you should focus on monitoring the event logs from a Windows DNS server for specific event IDs that signal this issue. Pay special attention to events with IDs 150, 770, and 771. These identifiers are crucial as they signify attempts or occurrences where a DNS server fails to load a plugin DLL as specified in its registry settings. This detection is important as it could indicate a misconfiguration or potentially malicious activity attempting to manipulate DNS operations. The importance of keeping an eye on these events is underscored by classifying the detection level as high, suggesting that occurrences of such events should be treated with a substantial degree of concern. Being vigilant about these specific event IDs on a Windows DNS server helps in promptly identifying and mitigating scenarios where the DNS functionality might be compromised due to issues with plugin DLLs.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DNS server error in which a specified plugin DLL (in registry) could not be loaded",
      "answer": "In order to detect a DNS server error in which a specified plugin DLL (in registry) could not be loaded, you should focus on monitoring the event logs from a Windows DNS server for specific event IDs that signal this issue. Pay special attention to events with IDs 150, 770, and 771. These identifiers are crucial as they signify attempts or occurrences where a DNS server fails to load a plugin DLL as specified in its registry settings. This detection is important as it could indicate a misconfiguration or potentially malicious activity attempting to manipulate DNS operations. The importance of keeping an eye on these events is underscored by classifying the detection level as high, suggesting that occurrences of such events should be treated with a substantial degree of concern. Being vigilant about these specific event IDs on a Windows DNS server helps in promptly identifying and mitigating scenarios where the DNS functionality might be compromised due to issues with plugin DLLs."
    }
  },
  {
    "instruction": "How to detect: potential DLL sideloading using the Microsoft Office winword process via the '/l' flag.",
    "context": "",
    "output": "In order to detect potential DLL sideloading using the Microsoft Office winword process via the '/l' flag, you should: Monitor the creation of processes on Windows systems, specifically focusing on instances where the winword.exe process is initiated. Look for scenarios where the command line includes the use of the '/l' flag followed by a reference to a DLL file. This is accomplished by checking for processes that have either their image path ending with '\\WINWORD.exe' or the original file name being 'WinWord.exe'. Furthermore, verify that the command line arguments for these processes contain both '/l ' and reference a '.dll' file, indicating a DLL is being specified explicitly for loading. This method is indicative of an attempt to sideload a DLL, which could be malicious in nature. Be aware that there might be instances where similar behavior is flagged but turns out to be benign, though these cases are not specifically known. The risk level associated with this behavior is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading using the Microsoft Office winword process via the '/l' flag.",
      "answer": "In order to detect potential DLL sideloading using the Microsoft Office winword process via the '/l' flag, you should: Monitor the creation of processes on Windows systems, specifically focusing on instances where the winword.exe process is initiated. Look for scenarios where the command line includes the use of the '/l' flag followed by a reference to a DLL file. This is accomplished by checking for processes that have either their image path ending with '\\WINWORD.exe' or the original file name being 'WinWord.exe'. Furthermore, verify that the command line arguments for these processes contain both '/l ' and reference a '.dll' file, indicating a DLL is being specified explicitly for loading. This method is indicative of an attempt to sideload a DLL, which could be malicious in nature. Be aware that there might be instances where similar behavior is flagged but turns out to be benign, though these cases are not specifically known. The risk level associated with this behavior is considered medium."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious children spawned via the Windows Terminal application which could be a sign of persistence via WindowsTerminal (see references section)",
    "context": "",
    "output": "In order to detect suspicious children spawned via the Windows Terminal application which could be a sign of persistence via WindowsTerminal, you should: Look for the creation of processes on Windows systems, specifically focusing on those initiated by the Windows Terminal (WindowsTerminal.exe or wt.exe). Pay attention to processes that are commonly used for malicious purposes, such as rundll32.exe, regsvr32.exe, certutil.exe, cscript.exe, wscript.exe, and csc.exe. Additionally, scrutinize any process initiated from potentially suspicious locations like the Public user directory, Downloads, Desktop, or the Temp directories of AppData\\Local and Windows itself. Also, be vigilant about command lines containing indications of script execution or downloading commands (e.g., iex, icm, Invoke-, Import-Module, ipmo, DownloadString(), and usage of cmd execution switches like /c, /k, /r). However, filter out and ignore certain activities that are known to be legitimate, such as actions involving built-in Visual Studio shells, opening settings for the Windows Terminal, or using the Visual Studio command prompt (VsDevCmd.bat). This approach strikes a balance between detecting potential threats and reducing false positives from legitimate development and configuration activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious children spawned via the Windows Terminal application which could be a sign of persistence via WindowsTerminal (see references section)",
      "answer": "In order to detect suspicious children spawned via the Windows Terminal application which could be a sign of persistence via WindowsTerminal, you should: Look for the creation of processes on Windows systems, specifically focusing on those initiated by the Windows Terminal (WindowsTerminal.exe or wt.exe). Pay attention to processes that are commonly used for malicious purposes, such as rundll32.exe, regsvr32.exe, certutil.exe, cscript.exe, wscript.exe, and csc.exe. Additionally, scrutinize any process initiated from potentially suspicious locations like the Public user directory, Downloads, Desktop, or the Temp directories of AppData\\Local and Windows itself. Also, be vigilant about command lines containing indications of script execution or downloading commands (e.g., iex, icm, Invoke-, Import-Module, ipmo, DownloadString(), and usage of cmd execution switches like /c, /k, /r). However, filter out and ignore certain activities that are known to be legitimate, such as actions involving built-in Visual Studio shells, opening settings for the Windows Terminal, or using the Visual Studio command prompt (VsDevCmd.bat). This approach strikes a balance between detecting potential threats and reducing false positives from legitimate development and configuration activities."
    }
  },
  {
    "instruction": "How can I detect: uses of the rdrleakdiag.exe LOLOBIN utility to dump process memory",
    "context": "",
    "output": "In order to detect uses of the rdrleakdiag.exe LOLBIN (Living Off the Land Binaries and Scripts) utility to dump process memory, you should monitor for the execution of processes in Windows environments. Specifically, look for the creation of processes where the executable image name ends with '\\rdrleakdiag.exe'. Additionally, the command line should contain the string '/fullmemdmp' which is a clear indicator that the utility is being used to dump the full memory. Alternatively, the detection can trigger if the command line includes all of the following strings: '/fullmemdmp', ' /o ', and ' /p ', suggesting a refined use of the command options to output and specify a process for memory dumping. These patterns of behavior are noteworthy and flagged at a high level due to their potential malicious use, although it's acknowledged that there might be unknown benign instances leading to false positives. This monitoring is crucial for identifying activities typically associated with information gathering or credential access endeavors, as part of a larger attack sequence involving living off the land techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "uses of the rdrleakdiag.exe LOLOBIN utility to dump process memory",
      "answer": "In order to detect uses of the rdrleakdiag.exe LOLBIN (Living Off the Land Binaries and Scripts) utility to dump process memory, you should monitor for the execution of processes in Windows environments. Specifically, look for the creation of processes where the executable image name ends with '\\rdrleakdiag.exe'. Additionally, the command line should contain the string '/fullmemdmp' which is a clear indicator that the utility is being used to dump the full memory. Alternatively, the detection can trigger if the command line includes all of the following strings: '/fullmemdmp', ' /o ', and ' /p ', suggesting a refined use of the command options to output and specify a process for memory dumping. These patterns of behavior are noteworthy and flagged at a high level due to their potential malicious use, although it's acknowledged that there might be unknown benign instances leading to false positives. This monitoring is crucial for identifying activities typically associated with information gathering or credential access endeavors, as part of a larger attack sequence involving living off the land techniques."
    }
  },
  {
    "instruction": "How to detect: attempts to record audio with arecord utility",
    "context": "",
    "output": "In order to detect attempts to record audio with arecord utility, you should monitor Linux systems, specifically auditing logs generated by Auditd, for execution events (EXECVE). Look for instances where the arecord utility is executed with specific arguments: the first argument being '-vv' which increases the verbosity of the output, making it more detailed, and the second argument '-fdat' which specifies the format of the recording, in this case, DAT. This combination of arguments is indicative of an attempt to record audio, potentially for surreptitious purposes. Since these logs might contain benign uses of the arecord utility, the level of threat is considered low, but any detection should still be scrutinized. \n\nIn analyzing such activities, it is vital to consider possible false positives, as the use of the arecord command with these arguments might occur in legitimate contexts, and the intention behind these commands might not always be malicious. Nonetheless, monitoring for this behavior is crucial as it aligns with tactics and techniques that could be utilized in reconnaissance or collection efforts by adversaries, though these specific MITRE ATT&CK tags are not directly mentioned in the scenario provided.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to record audio with arecord utility",
      "answer": "In order to detect attempts to record audio with arecord utility, you should monitor Linux systems, specifically auditing logs generated by Auditd, for execution events (EXECVE). Look for instances where the arecord utility is executed with specific arguments: the first argument being '-vv' which increases the verbosity of the output, making it more detailed, and the second argument '-fdat' which specifies the format of the recording, in this case, DAT. This combination of arguments is indicative of an attempt to record audio, potentially for surreptitious purposes. Since these logs might contain benign uses of the arecord utility, the level of threat is considered low, but any detection should still be scrutinized. \n\nIn analyzing such activities, it is vital to consider possible false positives, as the use of the arecord command with these arguments might occur in legitimate contexts, and the intention behind these commands might not always be malicious. Nonetheless, monitoring for this behavior is crucial as it aligns with tactics and techniques that could be utilized in reconnaissance or collection efforts by adversaries, though these specific MITRE ATT&CK tags are not directly mentioned in the scenario provided."
    }
  },
  {
    "instruction": "How can I detect: potential RDP connection via Mstsc using a local \".rdp\" file",
    "context": "",
    "output": "In order to detect potential RDP connection via Mstsc using a local \".rdp\" file, you should: Monitor Windows process creation logs to flag occurrences when the \"mstsc.exe\" process is launched, either directly indicated by the image ending with '\\mstsc.exe' or by the original file name being 'mstsc.exe'. Also, pay attention to command-line arguments ending with '.rdp' or '.rdp\"', which suggests an RDP connection attempt using a local file. Additionally, any instance where the process is initiated by 'C:\\Windows\\System32\\lxss\\wslhost.exe' with a command line containing 'C:\\ProgramData\\Microsoft\\WSL\\wslg.rdp' should be excluded as it could falsely indicate an RDP connection attempt. Be aware that legitimate use of \".rdp\" files might lead to false positives, classifying this detection's level of concern as low.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential RDP connection via Mstsc using a local \".rdp\" file",
      "answer": "In order to detect potential RDP connection via Mstsc using a local \".rdp\" file, you should: Monitor Windows process creation logs to flag occurrences when the \"mstsc.exe\" process is launched, either directly indicated by the image ending with '\\mstsc.exe' or by the original file name being 'mstsc.exe'. Also, pay attention to command-line arguments ending with '.rdp' or '.rdp\"', which suggests an RDP connection attempt using a local file. Additionally, any instance where the process is initiated by 'C:\\Windows\\System32\\lxss\\wslhost.exe' with a command line containing 'C:\\ProgramData\\Microsoft\\WSL\\wslg.rdp' should be excluded as it could falsely indicate an RDP connection attempt. Be aware that legitimate use of \".rdp\" files might lead to false positives, classifying this detection's level of concern as low."
    }
  },
  {
    "instruction": "Can you explain how to detect: The DNS Z flag is bit within the DNS protocol header that is, per the IETF design, meant to be used reserved (unused).\nAlthough recently it has been used in DNSSec, the value being set to anything other than 0 should be rare.\nOtherwise if it is set to non 0 and DNSSec is being used, then excluding the legitimate domains is low effort and high reward.\nDetermine if multiple of these files were accessed in a short period of time to further enhance the possibility of seeing if this was a one off or the possibility of larger sensitive file gathering.\nThis Sigma query is designed to accompany the Corelight Threat Hunting Guide, which can be found here: https://www3.corelight.com/corelights-introductory-guide-to-threat-hunting-with-zeek-bro-logs'\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect misuse of the DNS Z flag, which is a bit within the DNS protocol header designed to be unused but has occasionally been employed in DNSSec, you should: Monitor DNS traffic for queries where the Z flag is not set to 0, indicating a deviation from standard behavior, which could be a sign of malicious activity. You should focus on DNS queries that contain a dot, suggesting they are directed towards fully qualified domain names, yet exclude certain top-level domains such as '.arpa', '.local', '.ultradns.net', '.twtrdns.net', '.azuredns-prd.info', '.azure-dns.com', '.azuredns-ff.info', '.azuredns-ff.org', '.azuregov-dns.org' to minimize false positives from legitimate DNS traffic. Additionally, DNS queries seeking name server (NS) and mail exchange (MX) records should be left out of the monitoring scope, as well as any DNS responses ending with a null character, which could indicate non-standard or malicious responses. Monitoring should also disregard traffic to well-known NetBIOS ports (137, 138, 139) since this traffic is unrelated to DNS and could lead to false alerts. Keep an eye on fields such as timestamp, source and destination IPs and ports, protocol, DNS query type names and codes, queries and their answers, response codes, transaction IDs, time-to-live (TTL) values, and authoritative answer flags to build a comprehensive picture of any potentially malicious DNS activity. Bear in mind that encountering DNS queries with non-zero Z flag values could occasionally result from internal or legitimate external domains utilizing DNSSec; such instances should be verified and, if deemed legitimate, excluded from alerts. Special consideration should also be given to domains ending in '.edu', '.gov', and '.mil', especially in environments like the public sector, to minimize false positives. This approach aligns with medium-level security monitoring, leveraging the Corelight Threat Hunting Guide's recommendations for using Zeek (Bro) logs to identify potentially malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The DNS Z flag is bit within the DNS protocol header that is, per the IETF design, meant to be used reserved (unused).\nAlthough recently it has been used in DNSSec, the value being set to anything other than 0 should be rare.\nOtherwise if it is set to non 0 and DNSSec is being used, then excluding the legitimate domains is low effort and high reward.\nDetermine if multiple of these files were accessed in a short period of time to further enhance the possibility of seeing if this was a one off or the possibility of larger sensitive file gathering.\nThis Sigma query is designed to accompany the Corelight Threat Hunting Guide, which can be found here: https://www3.corelight.com/corelights-introductory-guide-to-threat-hunting-with-zeek-bro-logs'\n",
      "answer": "In order to detect misuse of the DNS Z flag, which is a bit within the DNS protocol header designed to be unused but has occasionally been employed in DNSSec, you should: Monitor DNS traffic for queries where the Z flag is not set to 0, indicating a deviation from standard behavior, which could be a sign of malicious activity. You should focus on DNS queries that contain a dot, suggesting they are directed towards fully qualified domain names, yet exclude certain top-level domains such as '.arpa', '.local', '.ultradns.net', '.twtrdns.net', '.azuredns-prd.info', '.azure-dns.com', '.azuredns-ff.info', '.azuredns-ff.org', '.azuregov-dns.org' to minimize false positives from legitimate DNS traffic. Additionally, DNS queries seeking name server (NS) and mail exchange (MX) records should be left out of the monitoring scope, as well as any DNS responses ending with a null character, which could indicate non-standard or malicious responses. Monitoring should also disregard traffic to well-known NetBIOS ports (137, 138, 139) since this traffic is unrelated to DNS and could lead to false alerts. Keep an eye on fields such as timestamp, source and destination IPs and ports, protocol, DNS query type names and codes, queries and their answers, response codes, transaction IDs, time-to-live (TTL) values, and authoritative answer flags to build a comprehensive picture of any potentially malicious DNS activity. Bear in mind that encountering DNS queries with non-zero Z flag values could occasionally result from internal or legitimate external domains utilizing DNSSec; such instances should be verified and, if deemed legitimate, excluded from alerts. Special consideration should also be given to domains ending in '.edu', '.gov', and '.mil', especially in environments like the public sector, to minimize false positives. This approach aligns with medium-level security monitoring, leveraging the Corelight Threat Hunting Guide's recommendations for using Zeek (Bro) logs to identify potentially malicious activity."
    }
  },
  {
    "instruction": "Please help me detect the following: process connections to a Monero crypto mining pool",
    "context": "",
    "output": "Sure!\nIn order to detect process connections to a Monero crypto mining pool, you should monitor network connections coming from Linux systems that are directed towards specific domain names linked to known Monero mining pools. These include various global miner pool domains like 'pool.minexmr.com', 'mine.c3pool.com', 'xmr.2miners.com', and several others across different regions such as Europe, Asia, and the Americas. This encompasses a wide range of domains used by crypto miners to connect to mining pools for Monero, a popular cryptocurrency. It's crucial to acknowledge that while this activity may often be malicious, especially if the connections are originating from systems without the knowledge or consent of their owners, there could be instances where the use of such crypto miners is legitimate and authorized. Therefore, despite the high level of suspicion associated with these connections, one must consider the context of their occurrence to reduce the chances of false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process connections to a Monero crypto mining pool",
      "answer": "In order to detect process connections to a Monero crypto mining pool, you should monitor network connections coming from Linux systems that are directed towards specific domain names linked to known Monero mining pools. These include various global miner pool domains like 'pool.minexmr.com', 'mine.c3pool.com', 'xmr.2miners.com', and several others across different regions such as Europe, Asia, and the Americas. This encompasses a wide range of domains used by crypto miners to connect to mining pools for Monero, a popular cryptocurrency. It's crucial to acknowledge that while this activity may often be malicious, especially if the connections are originating from systems without the knowledge or consent of their owners, there could be instances where the use of such crypto miners is legitimate and authorized. Therefore, despite the high level of suspicion associated with these connections, one must consider the context of their occurrence to reduce the chances of false positives."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious Django web application framework exceptions that could indicate exploitation attempts",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious Django web application framework exceptions that could indicate exploitation attempts, you should monitor the application logs for specific keywords that represent various types of suspicious activities. These activities are typically flagged by Django when certain operations that could potentially harm the security of the web application are performed. Specifically, look out for logs containing exceptions such as SuspiciousOperation and its subclasses including DisallowedHost, which indicates an unauthorized domain access attempt; DisallowedModelAdminLookup, signaling potentially harmful queries to the database through the admin interface; DisallowedModelAdminToField, denoting unauthorized attempts to modify database fields; DisallowedRedirect, flagging attempts to redirect users to untrusted sites; InvalidSessionKey, pointing to the use of an invalid session identifier; RequestDataTooBig, indicating an unusually large request payload that could be an attempt to cause a denial of service; SuspiciousFileOperation, marking attempts to access or modify files in an unauthorized manner; SuspiciousMultipartForm, which could signify an attempt to upload malicious files; SuspiciousSession, identifying unusual session patterns that could indicate session hijacking; TooManyFieldsSent, signaling an attack attempt that involves sending excessive amounts of data fields; and finally, PermissionDenied, which could highlight unauthorized access attempts. It's crucial to take note of false positives that might arise from application bugs. The severity of these signals is considered medium, indicating that while they might not always represent a security threat, they warrant investigation to ensure the integrity and security of the web application.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious Django web application framework exceptions that could indicate exploitation attempts",
      "answer": "In order to detect suspicious Django web application framework exceptions that could indicate exploitation attempts, you should monitor the application logs for specific keywords that represent various types of suspicious activities. These activities are typically flagged by Django when certain operations that could potentially harm the security of the web application are performed. Specifically, look out for logs containing exceptions such as SuspiciousOperation and its subclasses including DisallowedHost, which indicates an unauthorized domain access attempt; DisallowedModelAdminLookup, signaling potentially harmful queries to the database through the admin interface; DisallowedModelAdminToField, denoting unauthorized attempts to modify database fields; DisallowedRedirect, flagging attempts to redirect users to untrusted sites; InvalidSessionKey, pointing to the use of an invalid session identifier; RequestDataTooBig, indicating an unusually large request payload that could be an attempt to cause a denial of service; SuspiciousFileOperation, marking attempts to access or modify files in an unauthorized manner; SuspiciousMultipartForm, which could signify an attempt to upload malicious files; SuspiciousSession, identifying unusual session patterns that could indicate session hijacking; TooManyFieldsSent, signaling an attack attempt that involves sending excessive amounts of data fields; and finally, PermissionDenied, which could highlight unauthorized access attempts. It's crucial to take note of false positives that might arise from application bugs. The severity of these signals is considered medium, indicating that while they might not always represent a security threat, they warrant investigation to ensure the integrity and security of the web application."
    }
  },
  {
    "instruction": "How to detect: There is an option for a MS VS Just-In-Time Debugger \"vsjitdebugger.exe\" to launch specified executable and attach a debugger.\nThis option may be used adversaries to execute malicious code by signed verified binary.\nThe debugger is installed alongside with Microsoft Visual Studio package.\n",
    "context": "",
    "output": "In order to detect attempts where adversaries may use the Microsoft Visual Studio Just-In-Time Debugger (vsjitdebugger.exe) to execute malicious code via a signed and verified binary, you should: focus on monitoring process creation logs within Windows environments. Look for occurrences where the process `vsjitdebugger.exe` initiates another process. However, it's crucial to exclude instances where `vsjitdebugger.exe` starts `vsimmersiveactivatehelper*.exe` or `devenv.exe`, as these are legitimate processes related to Visual Studio's operation and development environment, respectively. Identifying such behavior is vital as it could indicate that an attacker is exploiting the debugger's legitimate functionality to run malicious code. Keep in mind that false positives could arise if the process spawned by `vsjitdebugger.exe` is uncommon, so a medium level of alert is suggested for such detections.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "There is an option for a MS VS Just-In-Time Debugger \"vsjitdebugger.exe\" to launch specified executable and attach a debugger.\nThis option may be used adversaries to execute malicious code by signed verified binary.\nThe debugger is installed alongside with Microsoft Visual Studio package.\n",
      "answer": "In order to detect attempts where adversaries may use the Microsoft Visual Studio Just-In-Time Debugger (vsjitdebugger.exe) to execute malicious code via a signed and verified binary, you should: focus on monitoring process creation logs within Windows environments. Look for occurrences where the process `vsjitdebugger.exe` initiates another process. However, it's crucial to exclude instances where `vsjitdebugger.exe` starts `vsimmersiveactivatehelper*.exe` or `devenv.exe`, as these are legitimate processes related to Visual Studio's operation and development environment, respectively. Identifying such behavior is vital as it could indicate that an attacker is exploiting the debugger's legitimate functionality to run malicious code. Keep in mind that false positives could arise if the process spawned by `vsjitdebugger.exe` is uncommon, so a medium level of alert is suggested for such detections."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious parent processes that should not have any children or should only have a single possible child program",
    "context": "",
    "output": "In order to detect suspicious parent processes that should not have any children or should only have a single possible child program, you should:\n\nFocus on monitoring process creation activities on Windows systems. Your detection strategy involves identifying when specific applications, that generally do not spawn child processes during regular operation, unusually initiate a child process. Specifically, look out for instances where 'minesweeper.exe', 'winver.exe', or 'bitsadmin.exe' serve as parent images for any child processes. Moreover, a special emphasis is placed on situations where 'csrss.exe', 'certutil.exe', 'eventvwr.exe', 'calc.exe', and 'notepad.exe' act as parent images, due to their typical usage patterns or functions within the operating system.\n\nHowever, be aware of and exclude from alerts certain child processes such as 'WerFault.exe', 'wermgr.exe', 'conhost.exe', 'mmc.exe', 'win32calc.exe', and 'notepad.exe' following specific parents like 'csrss.exe', 'certutil.exe', 'eventvwr.exe', and 'calc.exe', as these combinations are common and can be legitimate under particular circumstances. This refined approach helps to reduce the risk of flagging benign activity as suspicious, reducing the volume of false positives.\n\nThis targeted monitoring is anchored in responding to tactics and techniques associated with persistence, privilege escalation, and defense evasion by malicious actors, as these actions often require manipulation of parent-child process relationships to execute unauthorized or malicious code under the guise of legitimate system or software operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious parent processes that should not have any children or should only have a single possible child program",
      "answer": "In order to detect suspicious parent processes that should not have any children or should only have a single possible child program, you should:\n\nFocus on monitoring process creation activities on Windows systems. Your detection strategy involves identifying when specific applications, that generally do not spawn child processes during regular operation, unusually initiate a child process. Specifically, look out for instances where 'minesweeper.exe', 'winver.exe', or 'bitsadmin.exe' serve as parent images for any child processes. Moreover, a special emphasis is placed on situations where 'csrss.exe', 'certutil.exe', 'eventvwr.exe', 'calc.exe', and 'notepad.exe' act as parent images, due to their typical usage patterns or functions within the operating system.\n\nHowever, be aware of and exclude from alerts certain child processes such as 'WerFault.exe', 'wermgr.exe', 'conhost.exe', 'mmc.exe', 'win32calc.exe', and 'notepad.exe' following specific parents like 'csrss.exe', 'certutil.exe', 'eventvwr.exe', and 'calc.exe', as these combinations are common and can be legitimate under particular circumstances. This refined approach helps to reduce the risk of flagging benign activity as suspicious, reducing the volume of false positives.\n\nThis targeted monitoring is anchored in responding to tactics and techniques associated with persistence, privilege escalation, and defense evasion by malicious actors, as these actions often require manipulation of parent-child process relationships to execute unauthorized or malicious code under the guise of legitimate system or software operations."
    }
  },
  {
    "instruction": "How can I detect: disabling Windows Defender threat protection",
    "context": "",
    "output": "In order to detect disabling Windows Defender threat protection, you should: focus on monitoring the Windows Defender service (windefend) logs for specific event IDs that signify critical functionalities of the Windows Defender being turned off or compromised. These event IDs include 5001, which indicates that real-time protection has been disabled; 5010, which shows that scanning for malware and other potentially unwanted software has been turned off; 5012, pointing to the disabling of virus scanning; and 5101, which signals that the antimalware platform has expired. It's essential to treat these events with a high level of suspicion, as they could imply a deliberate action to undermine the system's defenses, possibly by an administrator for legitimate reasons or as part of a cyber attack. However, note that these events might be triggered incorrectly during some Windows 8 Defender updates, so while these detections should prompt an investigation, they might not always point to a security breach.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "disabling Windows Defender threat protection",
      "answer": "In order to detect disabling Windows Defender threat protection, you should: focus on monitoring the Windows Defender service (windefend) logs for specific event IDs that signify critical functionalities of the Windows Defender being turned off or compromised. These event IDs include 5001, which indicates that real-time protection has been disabled; 5010, which shows that scanning for malware and other potentially unwanted software has been turned off; 5012, pointing to the disabling of virus scanning; and 5101, which signals that the antimalware platform has expired. It's essential to treat these events with a high level of suspicion, as they could imply a deliberate action to undermine the system's defenses, possibly by an administrator for legitimate reasons or as part of a cyber attack. However, note that these events might be triggered incorrectly during some Windows 8 Defender updates, so while these detections should prompt an investigation, they might not always point to a security breach."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through Windows Registry where the SAM database is stored",
    "context": "",
    "output": "In order to detect when adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through Windows Registry where the SAM database is stored, you should: Focus on monitoring process creation logs on Windows systems. Look for commands that contain the term 'save' in conjunction with actions that access key Windows Registry paths related to the SAM database, specifically: HKLM\\sam, HKLM\\system, and HKLM\\security. When both of these conditions are met \u2014 a command references saving and access to critical SAM database locations \u2014 it is indicative of a high-level threat. Such activities are unusual and not commonly part of benign operations, pointing towards a potential compromise aimed at extracting sensitive credential materials from the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through Windows Registry where the SAM database is stored",
      "answer": "In order to detect when adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through Windows Registry where the SAM database is stored, you should: Focus on monitoring process creation logs on Windows systems. Look for commands that contain the term 'save' in conjunction with actions that access key Windows Registry paths related to the SAM database, specifically: HKLM\\sam, HKLM\\system, and HKLM\\security. When both of these conditions are met \u2014 a command references saving and access to critical SAM database locations \u2014 it is indicative of a high-level threat. Such activities are unusual and not commonly part of benign operations, pointing towards a potential compromise aimed at extracting sensitive credential materials from the system."
    }
  },
  {
    "instruction": "How can I detect: presence of a potentially xor encoded powershell command",
    "context": "",
    "output": "In order to detect the presence of a potentially xor encoded PowerShell command, you should: Monitor for the execution of PowerShell processes on Windows systems by watching for processes with images ending in '\\powershell.exe' or '\\pwsh.exe', or those specifically labeled with the original file names 'PowerShell.EXE' or 'pwsh.dll'. Additionally, look for processes that have a description of 'Windows PowerShell' or are identified as part of 'PowerShell Core 6' product. Focus on PowerShell command lines that contain the 'bxor' operation, which is indicative of xor encoding. Also, be vigilant for command lines that involve iterations or string manipulations, such as use of 'ForEach', explicit 'for' loops (notated as 'for(' or 'for '), string join operations (('-join ', \"-join'\", '-join\"', '-join`'), the '::Join' method, or the use of '[char]' for character conversion. \n\nMonitoring should be comprehensive, covering all the aforementioned conditions to ensure no potentially malicious xor encoded command goes undetected. Keep in mind that there may be legitimate uses of these patterns and operations, leading to potential false positives. The level of threat for these activities is considered medium, implying that while not all uses are malicious, the specified activity warrants attention and investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "presence of a potentially xor encoded powershell command",
      "answer": "In order to detect the presence of a potentially xor encoded PowerShell command, you should: Monitor for the execution of PowerShell processes on Windows systems by watching for processes with images ending in '\\powershell.exe' or '\\pwsh.exe', or those specifically labeled with the original file names 'PowerShell.EXE' or 'pwsh.dll'. Additionally, look for processes that have a description of 'Windows PowerShell' or are identified as part of 'PowerShell Core 6' product. Focus on PowerShell command lines that contain the 'bxor' operation, which is indicative of xor encoding. Also, be vigilant for command lines that involve iterations or string manipulations, such as use of 'ForEach', explicit 'for' loops (notated as 'for(' or 'for '), string join operations (('-join ', \"-join'\", '-join\"', '-join`'), the '::Join' method, or the use of '[char]' for character conversion. \n\nMonitoring should be comprehensive, covering all the aforementioned conditions to ensure no potentially malicious xor encoded command goes undetected. Keep in mind that there may be legitimate uses of these patterns and operations, leading to potential false positives. The level of threat for these activities is considered medium, implying that while not all uses are malicious, the specified activity warrants attention and investigation."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious PowerShell download command",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious PowerShell download command, you should monitor PowerShell logs for the presence of specific command patterns that indicate a file or data is being downloaded from the Internet. Focus on the interception of commands from the System.Net.WebClient class being invoked. This class is commonly used in PowerShell scripts to interact with web resources. Specifically, look for the usage of either the .DownloadFile( or .DownloadString( methods, as these are indicative of download activity. These particular patterns of PowerShell activity are significant as they can be utilized in various malicious scenarios, including the download of malware, exfiltration of data, or even fetching additional payloads in a multi-stage attack.\n\nThe logs you should pay attention to come from the Windows operating system, specifically within the service responsible for executing PowerShell scripts. It is important to be aware that there might be legitimate use cases where scripts download content from the Internet, which are considered false positives in the context of this detection strategy. The detection of such activities should be considered of medium importance, and further investigation is advised to ascertain the context and intent of the download activities. MITRE ATT&CK tactics associated with this activity include Execution, Command and Control, and potentially Initial Access, depending on the usage scenario of the download capabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious PowerShell download command",
      "answer": "In order to detect suspicious PowerShell download command, you should monitor PowerShell logs for the presence of specific command patterns that indicate a file or data is being downloaded from the Internet. Focus on the interception of commands from the System.Net.WebClient class being invoked. This class is commonly used in PowerShell scripts to interact with web resources. Specifically, look for the usage of either the .DownloadFile( or .DownloadString( methods, as these are indicative of download activity. These particular patterns of PowerShell activity are significant as they can be utilized in various malicious scenarios, including the download of malware, exfiltration of data, or even fetching additional payloads in a multi-stage attack.\n\nThe logs you should pay attention to come from the Windows operating system, specifically within the service responsible for executing PowerShell scripts. It is important to be aware that there might be legitimate use cases where scripts download content from the Internet, which are considered false positives in the context of this detection strategy. The detection of such activities should be considered of medium importance, and further investigation is advised to ascertain the context and intent of the download activities. MITRE ATT&CK tactics associated with this activity include Execution, Command and Control, and potentially Initial Access, depending on the usage scenario of the download capabilities."
    }
  },
  {
    "instruction": "How to detect: modification of autostart extensibility point (ASEP) in registry.",
    "context": "",
    "output": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should consider monitoring the Windows registry particularly for changes made in the 'CurrentVersion' keys within the SOFTWARE\\Microsoft\\Windows branch. Look for the 'SetValue' event type that indicates a value change in registry items. Pay special attention to modifications in autostart locations such as ShellServiceObjectDelayLoad, Run, RunOnce, RunServices, Policies, Group Policy Scripts, Explorer configurations (ShellServiceObjects, ShellIconOverlayIdentifiers, ShellExecuteHooks, SharedTaskScheduler, Browser Helper Objects), and Authentication Providers. These modifications are crucial as they could indicate unauthorized attempts to establish persistency or escalate privileges by running malicious software during the startup or shutdown processes, or even during logon.\n\nFilter out any registry modifications that involve known benign software paths or actions, such as updates or legitimate software installation routines from software like OneDrive, Spotify, WebEx, device census tools, Windows System Assessment Tool (WinSAT), KeePass, Microsoft Office, antivirus software like AVG, as well as other popular applications including Dropbox, Opera Browser, iTunes, Zoom, Greenshot, Google Drive, Microsoft Teams, and others. This filtering helps to reduce false positives which can be triggered by legitimate software or system updates automatically setting registry keys for valid reasons.\n\nFurthermore, detections should ignore modifications made by the system to security and logon UI components, especially if those modifications involve well-known credential providers or changes made by the Edge browser, LogonUI, or other system processes like ClickToRun, MsMpEng (Windows Defender), or userinit executing ctfmon.\n\nLastly, ensure tracking and logging of critical details such as the Security ID, ObjectName, OldValueType, and NewValueType for audit and investigation purposes. Be aware that legitimate software installations and administrator actions can also modify these registry keys for valid reasons, which must be considered when investigating alerts to avoid misinterpreting valid actions as malicious. The sensitivity level for these detections is generally medium, indicating a balanced approach between alert fidelity and potential for false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should consider monitoring the Windows registry particularly for changes made in the 'CurrentVersion' keys within the SOFTWARE\\Microsoft\\Windows branch. Look for the 'SetValue' event type that indicates a value change in registry items. Pay special attention to modifications in autostart locations such as ShellServiceObjectDelayLoad, Run, RunOnce, RunServices, Policies, Group Policy Scripts, Explorer configurations (ShellServiceObjects, ShellIconOverlayIdentifiers, ShellExecuteHooks, SharedTaskScheduler, Browser Helper Objects), and Authentication Providers. These modifications are crucial as they could indicate unauthorized attempts to establish persistency or escalate privileges by running malicious software during the startup or shutdown processes, or even during logon.\n\nFilter out any registry modifications that involve known benign software paths or actions, such as updates or legitimate software installation routines from software like OneDrive, Spotify, WebEx, device census tools, Windows System Assessment Tool (WinSAT), KeePass, Microsoft Office, antivirus software like AVG, as well as other popular applications including Dropbox, Opera Browser, iTunes, Zoom, Greenshot, Google Drive, Microsoft Teams, and others. This filtering helps to reduce false positives which can be triggered by legitimate software or system updates automatically setting registry keys for valid reasons.\n\nFurthermore, detections should ignore modifications made by the system to security and logon UI components, especially if those modifications involve well-known credential providers or changes made by the Edge browser, LogonUI, or other system processes like ClickToRun, MsMpEng (Windows Defender), or userinit executing ctfmon.\n\nLastly, ensure tracking and logging of critical details such as the Security ID, ObjectName, OldValueType, and NewValueType for audit and investigation purposes. Be aware that legitimate software installations and administrator actions can also modify these registry keys for valid reasons, which must be considered when investigating alerts to avoid misinterpreting valid actions as malicious. The sensitivity level for these detections is generally medium, indicating a balanced approach between alert fidelity and potential for false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: This method uses uncommon error codes on failed logons to determine suspicious activity and tampering with accounts that have been disabled or somehow restricted.",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious activity and tampering with accounts that have been disabled or somehow restricted, you should monitor Windows security service logs for specific failed logon events and their associated error codes. Focus on the detection of events with ID 4625 and 4776, which indicate a failed logon attempt. The key to identifying potentially malicious behavior lies in paying attention to the following error codes: \n\n- '0xC0000072' indicating a user attempted to logon to an account that has been disabled by an administrator.\n- '0xC000006F' signifying a user tried logging on outside of the authorized hours.\n- '0xC0000070' suggesting a logon attempt from an unauthorized workstation.\n- '0xC0000413' indicating a logon failure due to the machine being protected by an authentication firewall, and the specified account is not allowed to authenticate to the machine.\n- '0xC000018C' showing the logon request failed because the trust relationship between the primary domain and the trusted domain failed.\n- '0xC000015B' demonstrating the user has not been granted the requested logon type at the machine.\n\nAdditionally, it's important to filter out any events where the 'SubjectUserSid' is 'S-1-0-0', as this might reduce the number of false positives, such as legitimate user activities using a disabled account. Keep an eye out for these specific error codes in your security logs because they serve as strong indicators of attempted unauthorized access, potentially revealing malicious intent or insider threats attempting to bypass security measures. This practice is aligned with various MITRE ATT&CK techniques focusing on Credential Access and Initial Access strategies, helping to detect and mitigate attempts at exploiting user accounts and logon procedures.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This method uses uncommon error codes on failed logons to determine suspicious activity and tampering with accounts that have been disabled or somehow restricted.",
      "answer": "In order to detect suspicious activity and tampering with accounts that have been disabled or somehow restricted, you should monitor Windows security service logs for specific failed logon events and their associated error codes. Focus on the detection of events with ID 4625 and 4776, which indicate a failed logon attempt. The key to identifying potentially malicious behavior lies in paying attention to the following error codes: \n\n- '0xC0000072' indicating a user attempted to logon to an account that has been disabled by an administrator.\n- '0xC000006F' signifying a user tried logging on outside of the authorized hours.\n- '0xC0000070' suggesting a logon attempt from an unauthorized workstation.\n- '0xC0000413' indicating a logon failure due to the machine being protected by an authentication firewall, and the specified account is not allowed to authenticate to the machine.\n- '0xC000018C' showing the logon request failed because the trust relationship between the primary domain and the trusted domain failed.\n- '0xC000015B' demonstrating the user has not been granted the requested logon type at the machine.\n\nAdditionally, it's important to filter out any events where the 'SubjectUserSid' is 'S-1-0-0', as this might reduce the number of false positives, such as legitimate user activities using a disabled account. Keep an eye out for these specific error codes in your security logs because they serve as strong indicators of attempted unauthorized access, potentially revealing malicious intent or insider threats attempting to bypass security measures. This practice is aligned with various MITRE ATT&CK techniques focusing on Credential Access and Initial Access strategies, helping to detect and mitigate attempts at exploiting user accounts and logon procedures."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious DNS queries known from Cobalt Strike beacons",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious DNS queries known from Cobalt Strike beacons, you should: Monitor DNS logs for queries that begin with 'aaa.stage.' or 'post.1'. Additionally, keep an eye out for queries containing the pattern '.stage.123456.' within them. These specific patterns in DNS queries are indicative of Cobalt Strike beacon communication, which is a common tool used in cyber attacks to establish a backdoor for persistent access or to exfiltrate data. Any detection of these query patterns should be considered critical, as they are a strong signal of an ongoing or imminent threat. Given the critical nature of these detections, there are no known benign causes for these query patterns (no known false positives), implying that investigations should be prioritized when alerts are triggered. This analysis focuses on DNS logs, highlighting the importance of monitoring and analyzing DNS traffic to uncover potential malicious activities related to Cobalt Strike beacons.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious DNS queries known from Cobalt Strike beacons",
      "answer": "In order to detect suspicious DNS queries known from Cobalt Strike beacons, you should: Monitor DNS logs for queries that begin with 'aaa.stage.' or 'post.1'. Additionally, keep an eye out for queries containing the pattern '.stage.123456.' within them. These specific patterns in DNS queries are indicative of Cobalt Strike beacon communication, which is a common tool used in cyber attacks to establish a backdoor for persistent access or to exfiltrate data. Any detection of these query patterns should be considered critical, as they are a strong signal of an ongoing or imminent threat. Given the critical nature of these detections, there are no known benign causes for these query patterns (no known false positives), implying that investigations should be prioritized when alerts are triggered. This analysis focuses on DNS logs, highlighting the importance of monitoring and analyzing DNS traffic to uncover potential malicious activities related to Cobalt Strike beacons."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious new RUN key element pointing to an executable in a suspicious folder",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious new RUN key element pointing to an executable in a suspicious folder, you should: Focus on monitoring Windows Registry operations specifically within the `registry_set` category with the product set to Windows. Pay attention to events where the type is `SetValue` indicating a value set operation on registry keys. Particularly, scrutinize changes to the `TargetObject` path to include elements related to startup execution paths such as `\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\` and `\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\`. This is critical as these registry paths are commonly used for programs that need to start automatically with Windows.\n\nAdditionally, examine the `Details` of the SetValue operation to identify if the executable or script is located in directories that are not typically used for such purposes, such as `C:\\Windows\\Temp\\`, `C:\\$Recycle.bin\\`, `C:\\Temp\\`, `C:\\Users\\Public\\`, `C:\\Users\\Default\\`, `C:\\Users\\Desktop\\`, `\\AppData\\Local\\Temp\\`, `%temp%\\`, and `%tmp%\\`. Also, be vigilant for `Details` that start with certain indicators like `%Public%\\`, and commands like `wscript` or `cscript` which are scripting tools that can be leveraged maliciously. \n\nMake sure to log and analyze the `Image` field for additional context on the executable or script that's being set to run at startup. Be aware of potential false positives that may arise from legitimate software that utilizes unconventional folders for updates or operations. The level of concern for such detections is considered high due to the typical misuse of these mechanisms by malicious actors for persistence, execution after reboot, or for launching attacks discreetly at system startup. This detection is aligned with MITRE ATT&CK tactics and techniques focusing on persistence and execution methods abused by adversaries.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious new RUN key element pointing to an executable in a suspicious folder",
      "answer": "In order to detect suspicious new RUN key element pointing to an executable in a suspicious folder, you should: Focus on monitoring Windows Registry operations specifically within the `registry_set` category with the product set to Windows. Pay attention to events where the type is `SetValue` indicating a value set operation on registry keys. Particularly, scrutinize changes to the `TargetObject` path to include elements related to startup execution paths such as `\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\` and `\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\`. This is critical as these registry paths are commonly used for programs that need to start automatically with Windows.\n\nAdditionally, examine the `Details` of the SetValue operation to identify if the executable or script is located in directories that are not typically used for such purposes, such as `C:\\Windows\\Temp\\`, `C:\\$Recycle.bin\\`, `C:\\Temp\\`, `C:\\Users\\Public\\`, `C:\\Users\\Default\\`, `C:\\Users\\Desktop\\`, `\\AppData\\Local\\Temp\\`, `%temp%\\`, and `%tmp%\\`. Also, be vigilant for `Details` that start with certain indicators like `%Public%\\`, and commands like `wscript` or `cscript` which are scripting tools that can be leveraged maliciously. \n\nMake sure to log and analyze the `Image` field for additional context on the executable or script that's being set to run at startup. Be aware of potential false positives that may arise from legitimate software that utilizes unconventional folders for updates or operations. The level of concern for such detections is considered high due to the typical misuse of these mechanisms by malicious actors for persistence, execution after reboot, or for launching attacks discreetly at system startup. This detection is aligned with MITRE ATT&CK tactics and techniques focusing on persistence and execution methods abused by adversaries."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor proxy logs for traffic to specific hostnames that exhibit characteristics of malicious communication. This detection strategy involves scrutinizing the hostnames within proxy logs to identify any traffic directed towards a list of suspicious domain names. These domains include 'akamaicontainer.com', 'akamaitechcloudservices.com', 'azuredeploystore.com', 'azureonlinecloud.com', 'azureonlinestorage.com', 'dunamistrd.com', 'glcloudservice.com', 'journalide.org', 'msedgepackageinfo.com', 'msstorageazure.com', 'msstorageboxes.com', 'officeaddons.com', 'officestoragebox.com', 'pbxcloudeservices.com', 'pbxphonenetwork.com', 'pbxsources.com', 'qwepoi123098.com', 'sbmsa.wiki', 'sourceslabs.com', 'visualstudiofactory.com', and 'zacharryblogs.com'. Monitoring for communication with these domains is crucial as they have been identified as indicators of compromise associated with malicious activity related to the 3CX 3CXDesktopApp. Ensuring vigilant monitoring and analysis of proxy logs for these signs can aid in early detection of potential threats, facilitating timely response measures to mitigate any adverse impacts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
      "answer": "In order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor proxy logs for traffic to specific hostnames that exhibit characteristics of malicious communication. This detection strategy involves scrutinizing the hostnames within proxy logs to identify any traffic directed towards a list of suspicious domain names. These domains include 'akamaicontainer.com', 'akamaitechcloudservices.com', 'azuredeploystore.com', 'azureonlinecloud.com', 'azureonlinestorage.com', 'dunamistrd.com', 'glcloudservice.com', 'journalide.org', 'msedgepackageinfo.com', 'msstorageazure.com', 'msstorageboxes.com', 'officeaddons.com', 'officestoragebox.com', 'pbxcloudeservices.com', 'pbxphonenetwork.com', 'pbxsources.com', 'qwepoi123098.com', 'sbmsa.wiki', 'sourceslabs.com', 'visualstudiofactory.com', and 'zacharryblogs.com'. Monitoring for communication with these domains is crucial as they have been identified as indicators of compromise associated with malicious activity related to the 3CX 3CXDesktopApp. Ensuring vigilant monitoring and analysis of proxy logs for these signs can aid in early detection of potential threats, facilitating timely response measures to mitigate any adverse impacts."
    }
  },
  {
    "instruction": "How to detect: Alert on when legecy authentication has been used on an account",
    "context": "",
    "output": "In order to alert on when legacy authentication has been used on an account, you should monitor sign-in logs from Azure. Specifically, look for sign-in activities where the client application used falls under categories like Other clients, IMAP, POP3, MAPI, SMTP, Exchange ActiveSync, or Exchange Web Services. These are considered forms of legacy authentication. The username should be noted in the format of 'UPN' (User Principal Name) to correctly identify the account in question. Generally, any use of these specified client applications for signing in could indicate that legacy authentication methods are being used. \n\nBe aware of situations where a user has been explicitly allowed to use legacy authentication, as these cases would be considered false positives. Such exceptions usually involve the user being placed in a specific acceptance group that permits the use of these older authentication methods. The significance of detecting the use of legacy authentication methods is high, given that these methods are typically less secure and more vulnerable to attack compared to modern authentication techniques. Recognizing the usage of these methods could point towards potential security risks or active security breaches, which necessitate prompt attention and action.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Alert on when legecy authentication has been used on an account",
      "answer": "In order to alert on when legacy authentication has been used on an account, you should monitor sign-in logs from Azure. Specifically, look for sign-in activities where the client application used falls under categories like Other clients, IMAP, POP3, MAPI, SMTP, Exchange ActiveSync, or Exchange Web Services. These are considered forms of legacy authentication. The username should be noted in the format of 'UPN' (User Principal Name) to correctly identify the account in question. Generally, any use of these specified client applications for signing in could indicate that legacy authentication methods are being used. \n\nBe aware of situations where a user has been explicitly allowed to use legacy authentication, as these cases would be considered false positives. Such exceptions usually involve the user being placed in a specific acceptance group that permits the use of these older authentication methods. The significance of detecting the use of legacy authentication methods is high, given that these methods are typically less secure and more vulnerable to attack compared to modern authentication techniques. Recognizing the usage of these methods could point towards potential security risks or active security breaches, which necessitate prompt attention and action."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of Sysinternals PsService which can be abused for service reconnaissance and tampering",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of Sysinternals PsService which can be abused for service reconnaissance and tampering, you should monitor process creation logs on Windows systems. Specifically, look for events where the process being created has the OriginalFileName attribute set to 'psservice.exe' or where the Image attribute of the process ends with '\\PsService.exe' or '\\PsService64.exe'. This will help in identifying instances where the PsService utility is being executed, which, while potentially legitimate, can also indicate malicious activity aimed at querying, modifying, or otherwise interacting with system services in a manner that could compromise security or facilitate further attacks. It's important to note that there could be false positives, particularly in scenarios where an administrator is legitimately using PsService for maintenance or administration purposes. Therefore, while this detection is set at a medium level of confidence, any alerts should be investigated to differentiate between benign and malicious use of PsService.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of Sysinternals PsService which can be abused for service reconnaissance and tampering",
      "answer": "In order to detect usage of Sysinternals PsService which can be abused for service reconnaissance and tampering, you should monitor process creation logs on Windows systems. Specifically, look for events where the process being created has the OriginalFileName attribute set to 'psservice.exe' or where the Image attribute of the process ends with '\\PsService.exe' or '\\PsService64.exe'. This will help in identifying instances where the PsService utility is being executed, which, while potentially legitimate, can also indicate malicious activity aimed at querying, modifying, or otherwise interacting with system services in a manner that could compromise security or facilitate further attacks. It's important to note that there could be false positives, particularly in scenarios where an administrator is legitimately using PsService for maintenance or administration purposes. Therefore, while this detection is set at a medium level of confidence, any alerts should be investigated to differentiate between benign and malicious use of PsService."
    }
  },
  {
    "instruction": "How to detect: modification of autostart extensibility point (ASEP) in registry.",
    "context": "",
    "output": "In order to detect modification of autostart extensibility point (ASEP) in the registry, you should monitor for registry sets within Windows environments focusing on events where the `SetValue` type signifies a modification in registry keys. Specifically, lookout for changes made to the `SYSTEM\\CurrentControlSet\\Control` path or any alterations to critical system functionalities and security settings such as Terminal Server settings like `RDP-Tcp\\InitialProgram` and `StartupPrograms`, `SecurityProviders`, settings that affect safe boot operations like `AlternateShell`, configurations related to `Print` providers and monitors, adjustments in the network provider's order, and modifications in the Local Security Authority (LSA) pertaining to `Notification Packages` and `Authentication Packages`, as well as changes to the Boot Verification Program's image path.\n\nAdditionally, it's crucial to filter out events associated with known legitimate operations that could cause false positives. For instance, ignore modifications done by `C:\\Windows\\System32\\spoolsv.exe` specifically targeting `CutePDF Writer Monitor` linked to the `cpwmon64_v40.dll` or `CutePDF Writer`, adjustments through `C:\\Windows\\System32\\spoolsv.exe` focused on `Microsoft.Office.OneNote_` printer monitors by users with a name that contains 'AUTHORI' or 'AUTORI' indicative of different language settings, alterations related to network provider's order done by `C:\\Windows\\System32\\poqexec.exe`, and changes to printer monitors for `VNCpm.dll` via `C:\\Windows\\System32\\spoolsv.exe`.\n\nThis detailed monitoring and filtering ensure accurate detection while reducing noise from false positives such as the legitimate software installation or administrator's legitimate setup of autorun keys. This approach leverages knowledge about registry autostart extensibility points (ASEP) to fortify detection mechanisms against unauthorized modifications aiming to achieve persistence, execute malicious payloads at startup, or compromise system security settings. Pay attention to security events associated with modifying these registry keys, ensuring comprehensive coverage of potential attack vectors while excluding known legitimate behavior patterns to maintain operational efficiency and security integrity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in the registry, you should monitor for registry sets within Windows environments focusing on events where the `SetValue` type signifies a modification in registry keys. Specifically, lookout for changes made to the `SYSTEM\\CurrentControlSet\\Control` path or any alterations to critical system functionalities and security settings such as Terminal Server settings like `RDP-Tcp\\InitialProgram` and `StartupPrograms`, `SecurityProviders`, settings that affect safe boot operations like `AlternateShell`, configurations related to `Print` providers and monitors, adjustments in the network provider's order, and modifications in the Local Security Authority (LSA) pertaining to `Notification Packages` and `Authentication Packages`, as well as changes to the Boot Verification Program's image path.\n\nAdditionally, it's crucial to filter out events associated with known legitimate operations that could cause false positives. For instance, ignore modifications done by `C:\\Windows\\System32\\spoolsv.exe` specifically targeting `CutePDF Writer Monitor` linked to the `cpwmon64_v40.dll` or `CutePDF Writer`, adjustments through `C:\\Windows\\System32\\spoolsv.exe` focused on `Microsoft.Office.OneNote_` printer monitors by users with a name that contains 'AUTHORI' or 'AUTORI' indicative of different language settings, alterations related to network provider's order done by `C:\\Windows\\System32\\poqexec.exe`, and changes to printer monitors for `VNCpm.dll` via `C:\\Windows\\System32\\spoolsv.exe`.\n\nThis detailed monitoring and filtering ensure accurate detection while reducing noise from false positives such as the legitimate software installation or administrator's legitimate setup of autorun keys. This approach leverages knowledge about registry autostart extensibility points (ASEP) to fortify detection mechanisms against unauthorized modifications aiming to achieve persistence, execute malicious payloads at startup, or compromise system security settings. Pay attention to security events associated with modifying these registry keys, ensuring comprehensive coverage of potential attack vectors while excluding known legitimate behavior patterns to maintain operational efficiency and security integrity."
    }
  },
  {
    "instruction": "Can you explain how to detect: WerFault creating a dump file with a name that indicates that the dump file could be an LSASS process memory, which contains user credentials",
    "context": "",
    "output": "Certainly!\n\nIn order to detect WerFault creating a dump file with a name that indicates that the dump file could be an LSASS process memory, which contains user credentials, you should: Monitor file events on Windows systems focusing on instances where the WerFault.exe program, located in C:\\WINDOWS\\system32, is involved in creating or modifying files. Pay particular attention to files that have 'lsass' or 'lsass.exe' in their names as part of their file paths. These specific activities are indicative of attempts to dump or access the LSASS process memory, which is a critical component of the Windows security subsystem holding user credentials. It's important to note that while monitoring these actions, the level of alert for such detections is classified as high due to the potentially malicious nature of accessing LSASS memory content, even though there may be instances where the activities are benign and thus could result in unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "WerFault creating a dump file with a name that indicates that the dump file could be an LSASS process memory, which contains user credentials",
      "answer": "In order to detect WerFault creating a dump file with a name that indicates that the dump file could be an LSASS process memory, which contains user credentials, you should: Monitor file events on Windows systems focusing on instances where the WerFault.exe program, located in C:\\WINDOWS\\system32, is involved in creating or modifying files. Pay particular attention to files that have 'lsass' or 'lsass.exe' in their names as part of their file paths. These specific activities are indicative of attempts to dump or access the LSASS process memory, which is a critical component of the Windows security subsystem holding user credentials. It's important to note that while monitoring these actions, the level of alert for such detections is classified as high due to the potentially malicious nature of accessing LSASS memory content, even though there may be instances where the activities are benign and thus could result in unknown false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: registry changes to Microsoft Office \"VBAWarning\" to a value of \"1\" which enables the execution of all macros, whether signed or unsigned.",
    "context": "",
    "output": "Sure!\nIn order to detect registry changes to Microsoft Office \"VBAWarning\" to a value of \"1\" which enables the execution of all macros, whether signed or unsigned, you should: Focus on monitoring Windows registry modifications, particularly with registry settings category as the log source. The detection should hone in on events where the registry value is being set (EventType: Setvalue) specifically for the registry key that ends with '\\Security\\VBAWarnings'. The crucial detail to watch for is the change of this registry setting to 'DWORD (0x00000001)', indicating that the VBA macro settings are altered to allow all macros to run without restrictions. The tags associated with this security monitoring are Persistence, Privilege Escalation, and Execution, which correspond to techniques that might leverage this registry modification to maintain persistence, elevate privileges, or execute malicious code through Office macros. The severity level of this alert is considered high, acknowledging the potential risk, but instances of false positives are deemed unlikely.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registry changes to Microsoft Office \"VBAWarning\" to a value of \"1\" which enables the execution of all macros, whether signed or unsigned.",
      "answer": "In order to detect registry changes to Microsoft Office \"VBAWarning\" to a value of \"1\" which enables the execution of all macros, whether signed or unsigned, you should: Focus on monitoring Windows registry modifications, particularly with registry settings category as the log source. The detection should hone in on events where the registry value is being set (EventType: Setvalue) specifically for the registry key that ends with '\\Security\\VBAWarnings'. The crucial detail to watch for is the change of this registry setting to 'DWORD (0x00000001)', indicating that the VBA macro settings are altered to allow all macros to run without restrictions. The tags associated with this security monitoring are Persistence, Privilege Escalation, and Execution, which correspond to techniques that might leverage this registry modification to maintain persistence, elevate privileges, or execute malicious code through Office macros. The severity level of this alert is considered high, acknowledging the potential risk, but instances of false positives are deemed unlikely."
    }
  },
  {
    "instruction": "How can I detect: suspicious execution from an uncommon folder",
    "context": "",
    "output": "In order to detect a suspicious execution from an uncommon folder, you should monitor the creation of processes on Windows systems, focusing on executions that originate from certain directories that are unusual for standard software or system processes to execute from. Specifically, watch for processes starting from directories such as the Recycle Bin, system profiles, logs directories (Intel, RSA), user directories (including All Users, Default, NetworkService, Public), and several Windows internal directories (including addins, debug, Fonts, Help, IME, Media, repair, security, System32\\Tasks, and Tasks). Additionally, any process that starts with 'C:\\Perflogs\\' should be regarded as suspicious.\n\nHowever, to reduce false positives, ignore any detections that originate from the IBM Client Solutions start programs directory within the Public user's directory or from specific Citrix Updater Binaries locations, including the CitrixReceiverUpdater.exe executable.\n\nIn your monitoring, specifically look at the CommandLine and ParentCommandLine fields, if available, to gain further context around the suspicious execution. Given the high severity of detecting processes in these locations, it's crucial to maintain an up-to-date list of false positives, although currently, the potential for unknown false positives exists.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious execution from an uncommon folder",
      "answer": "In order to detect a suspicious execution from an uncommon folder, you should monitor the creation of processes on Windows systems, focusing on executions that originate from certain directories that are unusual for standard software or system processes to execute from. Specifically, watch for processes starting from directories such as the Recycle Bin, system profiles, logs directories (Intel, RSA), user directories (including All Users, Default, NetworkService, Public), and several Windows internal directories (including addins, debug, Fonts, Help, IME, Media, repair, security, System32\\Tasks, and Tasks). Additionally, any process that starts with 'C:\\Perflogs\\' should be regarded as suspicious.\n\nHowever, to reduce false positives, ignore any detections that originate from the IBM Client Solutions start programs directory within the Public user's directory or from specific Citrix Updater Binaries locations, including the CitrixReceiverUpdater.exe executable.\n\nIn your monitoring, specifically look at the CommandLine and ParentCommandLine fields, if available, to gain further context around the suspicious execution. Given the high severity of detecting processes in these locations, it's crucial to maintain an up-to-date list of false positives, although currently, the potential for unknown false positives exists."
    }
  },
  {
    "instruction": "How can I detect: new BITS transfer job saving local files with potential suspicious extensions",
    "context": "",
    "output": "In order to detect new BITS transfer job saving local files with potential suspicious extensions, you should: Monitor the Windows Background Intelligent Transfer Service (BITS) for specific behaviors that could indicate malicious activity. Be alert for event ID 16403, which signals the creation of a new BITS transfer job. The focus should be on jobs that save local files with extensions that are commonly associated with malicious scripts and executable files, such as '.bat' (batch files), '.dll' (dynamic link libraries), '.exe' (executables), '.hta' (HTML applications), '.ps1' (PowerShell scripts), '.psd1' (PowerShell module manifests), '.sh' (UNIX shell scripts), '.vbe' (VBScript encoded scripts), and '.vbs' (VBScript files). It is critical to apply filters to exclude known benign transfers, particularly those involving common applications like Chrome or Dropbox, which can be identified through file paths containing '\\AppData\\' or remote names containing '.com'. Implementing such filters will help reduce false positives, acknowledging that while the presence of these file extensions can be suspect, they can also frequently occur in non-malicious contexts. The adjustment of these filters might be necessary to align with the unique characteristics of your operational environment. The detection carries a medium level of urgency, indicating its importance in maintaining a secure network environment while also balancing the need to manage alerts effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "new BITS transfer job saving local files with potential suspicious extensions",
      "answer": "In order to detect new BITS transfer job saving local files with potential suspicious extensions, you should: Monitor the Windows Background Intelligent Transfer Service (BITS) for specific behaviors that could indicate malicious activity. Be alert for event ID 16403, which signals the creation of a new BITS transfer job. The focus should be on jobs that save local files with extensions that are commonly associated with malicious scripts and executable files, such as '.bat' (batch files), '.dll' (dynamic link libraries), '.exe' (executables), '.hta' (HTML applications), '.ps1' (PowerShell scripts), '.psd1' (PowerShell module manifests), '.sh' (UNIX shell scripts), '.vbe' (VBScript encoded scripts), and '.vbs' (VBScript files). It is critical to apply filters to exclude known benign transfers, particularly those involving common applications like Chrome or Dropbox, which can be identified through file paths containing '\\AppData\\' or remote names containing '.com'. Implementing such filters will help reduce false positives, acknowledging that while the presence of these file extensions can be suspect, they can also frequently occur in non-malicious contexts. The adjustment of these filters might be necessary to align with the unique characteristics of your operational environment. The detection carries a medium level of urgency, indicating its importance in maintaining a secure network environment while also balancing the need to manage alerts effectively."
    }
  },
  {
    "instruction": "How can I detect: password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage.\nThe process in field Process is the malicious program. A single execution can lead to hundreds of events.\n",
    "context": "",
    "output": "In order to detect password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage, you should: focus on monitoring events within Windows systems specifically looking for the creation of remote threads that target the lsass.exe process. Key indicators of such suspicious activity include instances where the TargetImage field ends with '\\lsass.exe' and the StartModule field is empty. It is important to be aware that antivirus products may sometimes generate false positives. The activity is classified at a high severity level due to the critical nature of the lsass.exe process, which is central to the security subsystem of Windows and often targeted by attackers seeking to extract sensitive credential information. Monitoring for these events is essential in identifying potential password dumping attempts, which can involve the malicious program creating hundreds of events in a single execution as it tries to manipulate the lsass.exe process. Identifying these attempts early can prevent unauthorized access and potential breaches.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage.\nThe process in field Process is the malicious program. A single execution can lead to hundreds of events.\n",
      "answer": "In order to detect password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage, you should: focus on monitoring events within Windows systems specifically looking for the creation of remote threads that target the lsass.exe process. Key indicators of such suspicious activity include instances where the TargetImage field ends with '\\lsass.exe' and the StartModule field is empty. It is important to be aware that antivirus products may sometimes generate false positives. The activity is classified at a high severity level due to the critical nature of the lsass.exe process, which is central to the security subsystem of Windows and often targeted by attackers seeking to extract sensitive credential information. Monitoring for these events is essential in identifying potential password dumping attempts, which can involve the malicious program creating hundreds of events in a single execution as it tries to manipulate the lsass.exe process. Identifying these attempts early can prevent unauthorized access and potential breaches."
    }
  },
  {
    "instruction": "How can I detect: loading of a DLL by the VMware Xfer utility from the non-default directory which may be an attempt to sideload arbitrary DLL",
    "context": "",
    "output": "In order to detect loading of a DLL by the VMware Xfer utility from the non-default directory which may be an attempt to sideload arbitrary DLL, you should monitor for events where specific files are loaded within the Windows operating system, more precisely within the context of image loading events. Focus on any occurrences where the VMware Xfer utility, identified by the 'VMwareXferlogs.exe', loads DLL files, with particular attention to 'glib-2.0.dll'. It's important to distinguish legitimate use cases from malicious activities by filtering out events where the DLL is loaded from the default VMware installation directory, typically 'C:\\Program Files\\VMware\\'. This approach aims to identify attempts to exploit the VMware Xfer utility for DLL sideloading, a technique often used by adversaries to execute malicious code by loading it into a trusted process. Given the nature of this method, occurrences are less likely to represent false positives and should therefore be treated with a high level of scrutiny.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loading of a DLL by the VMware Xfer utility from the non-default directory which may be an attempt to sideload arbitrary DLL",
      "answer": "In order to detect loading of a DLL by the VMware Xfer utility from the non-default directory which may be an attempt to sideload arbitrary DLL, you should monitor for events where specific files are loaded within the Windows operating system, more precisely within the context of image loading events. Focus on any occurrences where the VMware Xfer utility, identified by the 'VMwareXferlogs.exe', loads DLL files, with particular attention to 'glib-2.0.dll'. It's important to distinguish legitimate use cases from malicious activities by filtering out events where the DLL is loaded from the default VMware installation directory, typically 'C:\\Program Files\\VMware\\'. This approach aims to identify attempts to exploit the VMware Xfer utility for DLL sideloading, a technique often used by adversaries to execute malicious code by loading it into a trusted process. Given the nature of this method, occurrences are less likely to represent false positives and should therefore be treated with a high level of scrutiny."
    }
  },
  {
    "instruction": "How can I detect: Use of the commandline to shutdown or reboot windows",
    "context": "",
    "output": "In order to use the commandline to shutdown or reboot windows, you should monitor the creation of process events on Windows systems that end with the initiation of 'shutdown.exe'. Specifically look for commands that include the arguments '/r ' which indicates a reboot or '/s ' which signifies a shutdown operation. This approach assists in detecting activities that could be related to unauthorized or malicious attempts to shutdown or reboot a system, which can be a part of disruptive actions against the system's availability. The detection falls under the category of process creation with a medium level of alert due to potential false positives, as there might be legitimate reasons for using these commands in administrative contexts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Use of the commandline to shutdown or reboot windows",
      "answer": "In order to use the commandline to shutdown or reboot windows, you should monitor the creation of process events on Windows systems that end with the initiation of 'shutdown.exe'. Specifically look for commands that include the arguments '/r ' which indicates a reboot or '/s ' which signifies a shutdown operation. This approach assists in detecting activities that could be related to unauthorized or malicious attempts to shutdown or reboot a system, which can be a part of disruptive actions against the system's availability. The detection falls under the category of process creation with a medium level of alert due to potential false positives, as there might be legitimate reasons for using these commands in administrative contexts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation or patching of potential malicious RoleBinding/ClusterRoleBinding.",
    "context": "",
    "output": "In order to detect the creation or patching of potential malicious RoleBinding/ClusterRoleBinding, you should monitor Azure Activity Logs for specific operations related to Kubernetes. These operations include writing and deleting both ClusterRoleBindings and RoleBindings within the Microsoft Kubernetes Connected Clusters RBAC (Role-Based Access Control). The activities to watch for explicitly are the operation names: MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLEBINDINGS/WRITE, MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLEBINDINGS/DELETE, MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLEBINDINGS/WRITE, and MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLEBINDINGS/DELETE.\n\nThis monitoring activity is crucial as unauthorized modifications could indicate a compromise or an attempt to elevate privileges within a Kubernetes environment. It's important to note that while modifications to RoleBindings and ClusterRoleBindings can often be genuine administrative actions, any modifications or deletions from unfamiliar users should be swiftly investigated to confirm whether these actions are expected and legitimate within your operational environment. Known administrator actions might occasionally cause false positives; hence, verification of user identity, user agent, and hostname is recommended to discern whether modifications should raise alerts. Identifying unexpected changes in these areas could be indicative of malicious activity and warrants further investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation or patching of potential malicious RoleBinding/ClusterRoleBinding.",
      "answer": "In order to detect the creation or patching of potential malicious RoleBinding/ClusterRoleBinding, you should monitor Azure Activity Logs for specific operations related to Kubernetes. These operations include writing and deleting both ClusterRoleBindings and RoleBindings within the Microsoft Kubernetes Connected Clusters RBAC (Role-Based Access Control). The activities to watch for explicitly are the operation names: MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLEBINDINGS/WRITE, MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLEBINDINGS/DELETE, MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLEBINDINGS/WRITE, and MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLEBINDINGS/DELETE.\n\nThis monitoring activity is crucial as unauthorized modifications could indicate a compromise or an attempt to elevate privileges within a Kubernetes environment. It's important to note that while modifications to RoleBindings and ClusterRoleBindings can often be genuine administrative actions, any modifications or deletions from unfamiliar users should be swiftly investigated to confirm whether these actions are expected and legitimate within your operational environment. Known administrator actions might occasionally cause false positives; hence, verification of user identity, user agent, and hostname is recommended to discern whether modifications should raise alerts. Identifying unexpected changes in these areas could be indicative of malicious activity and warrants further investigation."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when an application Sign-on Policy is modified or deleted.",
    "context": "",
    "output": "In order to detect when an application Sign-on Policy is modified or deleted, you should monitor for specific events within Okta logs. Focus on events related to the updating of an application's sign-on policy or the deletion of an application's sign-on rule, specifically looking for event types labeled as \"application.policy.sign_on.update\" and \"application.policy.sign_on.rule.delete\". It's important to pay attention to these activities as they can indicate changes that may impact the security and access management of applications. The level of concern for these detections is considered medium, and while there might be instances where changes do not represent a security threat (thus potentially leading to false positives), any modifications or deletions of sign-on policies should be scrutinized to ensure they're legitimate and authorized. This focus on monitoring Okta logs for alterations in sign-on policies aligns with practices aimed at safeguarding against unauthorized access and potential compromise.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an application Sign-on Policy is modified or deleted.",
      "answer": "In order to detect when an application Sign-on Policy is modified or deleted, you should monitor for specific events within Okta logs. Focus on events related to the updating of an application's sign-on policy or the deletion of an application's sign-on rule, specifically looking for event types labeled as \"application.policy.sign_on.update\" and \"application.policy.sign_on.rule.delete\". It's important to pay attention to these activities as they can indicate changes that may impact the security and access management of applications. The level of concern for these detections is considered medium, and while there might be instances where changes do not represent a security threat (thus potentially leading to false positives), any modifications or deletions of sign-on policies should be scrutinized to ensure they're legitimate and authorized. This focus on monitoring Okta logs for alterations in sign-on policies aligns with practices aimed at safeguarding against unauthorized access and potential compromise."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of \"certmgr\" with the \"add\" flag in order to install a new certificate on the system.\nAdversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of \"certmgr\" with the \"add\" flag in order to install a new certificate on the system, you should: Monitor Windows process creation logs for executions of \"CertMgr.exe\" or when the \"OriginalFileName\" is \"CERTMGT.EXE\". Additionally, look for command line arguments containing both \"/add\" and \"root\". This detection mechanism is crucial because adversaries might install a root certificate on a compromised system to sidestep warnings when connecting to adversary-controlled web servers. However, be aware that legitimate scenarios such as Help Desk or IT staff manually adding a corporate Root Certificate Authority might cause false positives, especially if Group Policy Object (GPO) pushes do not trigger these alerts. This monitoring has a medium alert level due to its potential for both detecting malicious activities and generating false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"certmgr\" with the \"add\" flag in order to install a new certificate on the system.\nAdversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\n",
      "answer": "In order to detect execution of \"certmgr\" with the \"add\" flag in order to install a new certificate on the system, you should: Monitor Windows process creation logs for executions of \"CertMgr.exe\" or when the \"OriginalFileName\" is \"CERTMGT.EXE\". Additionally, look for command line arguments containing both \"/add\" and \"root\". This detection mechanism is crucial because adversaries might install a root certificate on a compromised system to sidestep warnings when connecting to adversary-controlled web servers. However, be aware that legitimate scenarios such as Help Desk or IT staff manually adding a corporate Root Certificate Authority might cause false positives, especially if Group Policy Object (GPO) pushes do not trigger these alerts. This monitoring has a medium alert level due to its potential for both detecting malicious activities and generating false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: load of advapi31.dll by a process running in an uncommon folder",
    "context": "",
    "output": "Sure!\nIn order to detect the load of advapi32.dll by a process running in an uncommon folder, you should focus on monitoring Windows image load events. Specifically, you should look for cases where the advapi32.dll library is loaded by an image whose path doesn't start with common Windows, Program Files, or Windows Defender directories. This involves checking if the image loaded ends with '\\advapi32.dll' but excluding any that start with 'C:\\Windows\\', 'C:\\Program Files (x86)\\', 'C:\\Program Files\\', or specifically for Windows Defender, 'C:\\ProgramData\\Microsoft\\Windows Defender\\platform\\' with an image ending on '\\MpCmdRun.exe', and also excluding any OneDrive related loads starting with 'C:\\Users\\' that contain '\\AppData\\Local\\Microsoft\\OneDrive\\' and end with 'FileCoAuth.exe'. Logs meeting these criteria indicate an uncommonly located process is invoking advapi32.dll, which could be of informational security relevance due to the unusual activity. Be aware that this detection strategy aims at identifying activities beyond normal scopes, thus it might flag unknown cases as potential false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "load of advapi31.dll by a process running in an uncommon folder",
      "answer": "In order to detect the load of advapi32.dll by a process running in an uncommon folder, you should focus on monitoring Windows image load events. Specifically, you should look for cases where the advapi32.dll library is loaded by an image whose path doesn't start with common Windows, Program Files, or Windows Defender directories. This involves checking if the image loaded ends with '\\advapi32.dll' but excluding any that start with 'C:\\Windows\\', 'C:\\Program Files (x86)\\', 'C:\\Program Files\\', or specifically for Windows Defender, 'C:\\ProgramData\\Microsoft\\Windows Defender\\platform\\' with an image ending on '\\MpCmdRun.exe', and also excluding any OneDrive related loads starting with 'C:\\Users\\' that contain '\\AppData\\Local\\Microsoft\\OneDrive\\' and end with 'FileCoAuth.exe'. Logs meeting these criteria indicate an uncommonly located process is invoking advapi32.dll, which could be of informational security relevance due to the unusual activity. Be aware that this detection strategy aims at identifying activities beyond normal scopes, thus it might flag unknown cases as potential false positives."
    }
  },
  {
    "instruction": "How can I detect: remote thread creation from CACTUSTORCH as described in references.",
    "context": "",
    "output": "In order to detect remote thread creation from CACTUSTORCH as described in references, you should monitor for specific behaviors occurring on Windows systems, specifically focusing on the event of creating remote threads, a common tactic in malicious activities. This monitoring should look for the initiation of these threads by particular Windows system processes or commonly misused office applications. Specifically, attention should be paid to threads being created from the following source executables: 'cscript.exe', 'wscript.exe', 'mshta.exe' located within the System32 directory, or 'winword.exe' and 'excel.exe' without specifying their directory. Additionally, it's critical to check if these threads are targeting those applications within the '\\SysWOW64\\' directory, indicating a potential attempt to execute code within a 32-bit subsystem on a 64-bit machine, a common evasion technique. The StartModule value being null (unspecified) is also a key characteristic of this detection, indicating that the thread was started without loading an additional module, which can be a sign of code injection. Due to the nature of these indicators, the potential for false positives is acknowledged as 'Unknown,' suggesting that while the detection strategy is focused, unexpected legitimate software behaviors might occasionally match these criteria. The severity of detections based on these criteria is considered high, emphasizing the need for immediate investigation upon alerts. This approach aligns with the MITRE ATT&CK tactics and techniques by focusing on detection of execution and defense evasion behaviors typically associated with software like CACTUSTORCH.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote thread creation from CACTUSTORCH as described in references.",
      "answer": "In order to detect remote thread creation from CACTUSTORCH as described in references, you should monitor for specific behaviors occurring on Windows systems, specifically focusing on the event of creating remote threads, a common tactic in malicious activities. This monitoring should look for the initiation of these threads by particular Windows system processes or commonly misused office applications. Specifically, attention should be paid to threads being created from the following source executables: 'cscript.exe', 'wscript.exe', 'mshta.exe' located within the System32 directory, or 'winword.exe' and 'excel.exe' without specifying their directory. Additionally, it's critical to check if these threads are targeting those applications within the '\\SysWOW64\\' directory, indicating a potential attempt to execute code within a 32-bit subsystem on a 64-bit machine, a common evasion technique. The StartModule value being null (unspecified) is also a key characteristic of this detection, indicating that the thread was started without loading an additional module, which can be a sign of code injection. Due to the nature of these indicators, the potential for false positives is acknowledged as 'Unknown,' suggesting that while the detection strategy is focused, unexpected legitimate software behaviors might occasionally match these criteria. The severity of detections based on these criteria is considered high, emphasizing the need for immediate investigation upon alerts. This approach aligns with the MITRE ATT&CK tactics and techniques by focusing on detection of execution and defense evasion behaviors typically associated with software like CACTUSTORCH."
    }
  },
  {
    "instruction": "Can you explain how to detect: specific process tree behavior of a \"rundll32\" execution often linked with potential Qakbot activity.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect specific process tree behavior of a \"rundll32\" execution often linked with potential Qakbot activity, you should: monitor Windows process creation logs for instances where specific parent processes, including 'cmd.exe', 'cscript.exe', 'curl.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', and 'wscript.exe', spawn 'rundll32.exe'. It is crucial to look for 'rundll32.exe' executions that also have command lines containing paths indicative of Qakbot's behavior, such as files located in '\\ProgramData\\', '\\Users\\Public\\', '\\AppData\\Local\\Temp\\', and '\\AppData\\Roaming\\'. An additional sign of this malware's activity includes the 'rundll32.exe' command line invoking a '.dll' file. Given that these characteristics have been uniquely observed in Qakbot infections, their presence with the specified conditions suggests a high likelihood of this specific malware strain operating on the system without the common risk of false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific process tree behavior of a \"rundll32\" execution often linked with potential Qakbot activity.",
      "answer": "In order to detect specific process tree behavior of a \"rundll32\" execution often linked with potential Qakbot activity, you should: monitor Windows process creation logs for instances where specific parent processes, including 'cmd.exe', 'cscript.exe', 'curl.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', and 'wscript.exe', spawn 'rundll32.exe'. It is crucial to look for 'rundll32.exe' executions that also have command lines containing paths indicative of Qakbot's behavior, such as files located in '\\ProgramData\\', '\\Users\\Public\\', '\\AppData\\Local\\Temp\\', and '\\AppData\\Roaming\\'. An additional sign of this malware's activity includes the 'rundll32.exe' command line invoking a '.dll' file. Given that these characteristics have been uniquely observed in Qakbot infections, their presence with the specified conditions suggests a high likelihood of this specific malware strain operating on the system without the common risk of false positives."
    }
  },
  {
    "instruction": "How to detect: tampering with the \"Enabled\" registry key in order to disable Windows logging of a Windows event channel",
    "context": "",
    "output": "In order to detect tampering with the \"Enabled\" registry key in order to disable Windows logging of a Windows event channel, you should:\n\nMonitor the Windows registry for any SetValue events that target the \"Enabled\" keys within the 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\' path. Specifically, you are looking for changes that set these keys to 'DWORD (0x00000000)', which effectively disables logging for that event channel. \n\nHowever, there are several conditions under which this activity may not indicate a malicious attempt to disable Windows logging. One such condition is when the modification comes from the 'wevtutil.exe' tool found in the '\\Windows\\system32\\' directory, as this is a standard tool used for event log configuration, including during legitimate installations of manifests. Similarly, modifications originating from 'TiWorker.exe' located in the 'C:\\Windows\\winsxs\\' directory, or from 'TrustedInstaller.exe' in the 'C:\\Windows\\servicing\\' directory, should also be considered with caution since these are associated with legitimate system updates and installations.\n\nFurther exceptions should be made for changes initiated by 'svchost.exe' in 'C:\\Windows\\System32\\' when the target objects include specific channels related to the FileInfoMinifilter, ASN1, Kernel-AppCompat, Runtime Error, or CAPI2 event logs. This is because such changes can be part of normal system operations or updates, especially when they involve system components or security features.\n\nUnfortunately, there are filters related to potential errors, identified as 'filter_optional_empty' and 'filter_optional_null', which currently do not specify any criteria and are placeholders for future adjustments. \n\nIt is noteworthy that while the overall intention is to capture and alert on unauthorized disablement of logging, legitimate administrative actions undertaken for troubleshooting or system configuration purposes may occasionally trigger alerts, resulting in rare false positives.\n\nThe severity level for this detection mechanism is classified as high due to the significant security implications of successfully tampering with event logging, which could undermine the integrity of audit logs and hinder the detection of malicious activities. This detection strategy is aligned with mitigating tactics against evasion techniques that aim to disable or interfere with event logging, as cataloged in the MITRE ATT&CK framework under Indicator Blocking and Defense Evasion tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "tampering with the \"Enabled\" registry key in order to disable Windows logging of a Windows event channel",
      "answer": "In order to detect tampering with the \"Enabled\" registry key in order to disable Windows logging of a Windows event channel, you should:\n\nMonitor the Windows registry for any SetValue events that target the \"Enabled\" keys within the 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\' path. Specifically, you are looking for changes that set these keys to 'DWORD (0x00000000)', which effectively disables logging for that event channel. \n\nHowever, there are several conditions under which this activity may not indicate a malicious attempt to disable Windows logging. One such condition is when the modification comes from the 'wevtutil.exe' tool found in the '\\Windows\\system32\\' directory, as this is a standard tool used for event log configuration, including during legitimate installations of manifests. Similarly, modifications originating from 'TiWorker.exe' located in the 'C:\\Windows\\winsxs\\' directory, or from 'TrustedInstaller.exe' in the 'C:\\Windows\\servicing\\' directory, should also be considered with caution since these are associated with legitimate system updates and installations.\n\nFurther exceptions should be made for changes initiated by 'svchost.exe' in 'C:\\Windows\\System32\\' when the target objects include specific channels related to the FileInfoMinifilter, ASN1, Kernel-AppCompat, Runtime Error, or CAPI2 event logs. This is because such changes can be part of normal system operations or updates, especially when they involve system components or security features.\n\nUnfortunately, there are filters related to potential errors, identified as 'filter_optional_empty' and 'filter_optional_null', which currently do not specify any criteria and are placeholders for future adjustments. \n\nIt is noteworthy that while the overall intention is to capture and alert on unauthorized disablement of logging, legitimate administrative actions undertaken for troubleshooting or system configuration purposes may occasionally trigger alerts, resulting in rare false positives.\n\nThe severity level for this detection mechanism is classified as high due to the significant security implications of successfully tampering with event logging, which could undermine the integrity of audit logs and hinder the detection of malicious activities. This detection strategy is aligned with mitigating tactics against evasion techniques that aim to disable or interfere with event logging, as cataloged in the MITRE ATT&CK framework under Indicator Blocking and Defense Evasion tactics."
    }
  },
  {
    "instruction": "How to detect: PowerShell scripts with potential registry reconnaissance capabilities. Adversaries may interact with the Windows registry to gather information about the system credentials, configuration, and installed software.",
    "context": "",
    "output": "In order to detect PowerShell scripts with potential registry reconnaissance capabilities, where adversaries may interact with the Windows registry to gather information about the system credentials, configuration, and installed software, you should: monitor Windows PowerShell scripts for specific patterns of accessing the registry. Focus on script block logging, specifically on scripts that involve commands like Get-Item, gci, or Get-ChildItem, followed within a short distance by a '-Path' argument that points towards critical registry paths. These paths include locations within the registry such as 'currentcontrolset\\\\services', 'CurrentVersion\\\\Policies\\\\Explorer\\\\Run', 'CurrentVersion\\\\Run', 'CurrentVersion\\\\ShellServiceObjectDelayLoad', and 'CurrentVersion\\\\Windows\\\\winlogon', which are often queried by adversaries looking for valuable information or settings to exploit. Remember, this detection requires that PowerShell's Script Block Logging feature is enabled to capture the relevant script content for analysis. Be aware that there might be false positives due to the nature of the script block, so use this method as a tool for hunting potential malicious activities rather than definitive evidence. The detection level set for this activity is medium, indicating it requires additional investigation when alerted.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell scripts with potential registry reconnaissance capabilities. Adversaries may interact with the Windows registry to gather information about the system credentials, configuration, and installed software.",
      "answer": "In order to detect PowerShell scripts with potential registry reconnaissance capabilities, where adversaries may interact with the Windows registry to gather information about the system credentials, configuration, and installed software, you should: monitor Windows PowerShell scripts for specific patterns of accessing the registry. Focus on script block logging, specifically on scripts that involve commands like Get-Item, gci, or Get-ChildItem, followed within a short distance by a '-Path' argument that points towards critical registry paths. These paths include locations within the registry such as 'currentcontrolset\\\\services', 'CurrentVersion\\\\Policies\\\\Explorer\\\\Run', 'CurrentVersion\\\\Run', 'CurrentVersion\\\\ShellServiceObjectDelayLoad', and 'CurrentVersion\\\\Windows\\\\winlogon', which are often queried by adversaries looking for valuable information or settings to exploit. Remember, this detection requires that PowerShell's Script Block Logging feature is enabled to capture the relevant script content for analysis. Be aware that there might be false positives due to the nature of the script block, so use this method as a tool for hunting potential malicious activities rather than definitive evidence. The detection level set for this activity is medium, indicating it requires additional investigation when alerted."
    }
  },
  {
    "instruction": "How to detect: new process creation using WMIC via the \"process call create\" flag",
    "context": "",
    "output": "In order to detect new process creation using WMIC via the \"process call create\" flag, you should: focus on process creation events within Windows environments. Specifically, the detection mechanism centers on identifying instances where the WMIC (Windows Management Instrumentation Command-line) utility, recognizable either through the image file ending with '\\wmic.exe' or having an original file name of 'wmic.exe', is employed to initiate a new process. This activity is typically signified by the command line arguments containing the keywords 'process', 'call', and 'create' concurrently. Such detection criteria aim to flag potentially malicious behavior where WMIC is misused to launch new processes, a tactic often leveraged by attackers to execute code or scripts. It is important to note that while this detection method is of medium sensitivity, it might also encounter scenarios where its findings are not indicative of malicious activity, thus necessitating further investigation to ascertain the context of the detected events.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "new process creation using WMIC via the \"process call create\" flag",
      "answer": "In order to detect new process creation using WMIC via the \"process call create\" flag, you should: focus on process creation events within Windows environments. Specifically, the detection mechanism centers on identifying instances where the WMIC (Windows Management Instrumentation Command-line) utility, recognizable either through the image file ending with '\\wmic.exe' or having an original file name of 'wmic.exe', is employed to initiate a new process. This activity is typically signified by the command line arguments containing the keywords 'process', 'call', and 'create' concurrently. Such detection criteria aim to flag potentially malicious behavior where WMIC is misused to launch new processes, a tactic often leveraged by attackers to execute code or scripts. It is important to note that while this detection method is of medium sensitivity, it might also encounter scenarios where its findings are not indicative of malicious activity, thus necessitating further investigation to ascertain the context of the detected events."
    }
  },
  {
    "instruction": "Can you explain how to detect: activity mentioned in Operation Wocao report",
    "context": "",
    "output": "Certainly!\n\nIn order to detect activity mentioned in Operation Wocao report, you should: Monitor Windows security logs for events with an ID of 4799. Specifically, look for events where the targeted username begins with 'Administr' and the name of the caller process ends with '\\checkadmin.exe'. This approach helps identify when there\u2019s an attempt to enumerate local administrators potentially for malicious purposes, aligning with practices reported in Operation Wocao. However, it's important to note that legitimate usage of the tool 'checkadmin.exe' by administrators for checking local group memberships could also trigger this detection, and those instances should be considered false positives. The severity of these detections is considered high due to their potential tie to targeted attack methodologies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "activity mentioned in Operation Wocao report",
      "answer": "In order to detect activity mentioned in Operation Wocao report, you should: Monitor Windows security logs for events with an ID of 4799. Specifically, look for events where the targeted username begins with 'Administr' and the name of the caller process ends with '\\checkadmin.exe'. This approach helps identify when there\u2019s an attempt to enumerate local administrators potentially for malicious purposes, aligning with practices reported in Operation Wocao. However, it's important to note that legitimate usage of the tool 'checkadmin.exe' by administrators for checking local group memberships could also trigger this detection, and those instances should be considered false positives. The severity of these detections is considered high due to their potential tie to targeted attack methodologies."
    }
  },
  {
    "instruction": "Can you explain how to detect: Potential adversaries accessing the microphone and webcam in an endpoint.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential adversaries accessing the microphone and webcam in an endpoint, you should monitor Windows Security logs for events with IDs 4657, 4656, and 4663 that indicate modifications or attempts to modify the registry entries associated with the permission settings of non-packaged applications for the microphone and webcam. Specifically, lookout for changes in the registry paths '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged' and '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged'. Being vigilant about such modifications can help in identifying unauthorized access to these sensitive resources.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Potential adversaries accessing the microphone and webcam in an endpoint.",
      "answer": "In order to detect potential adversaries accessing the microphone and webcam in an endpoint, you should monitor Windows Security logs for events with IDs 4657, 4656, and 4663 that indicate modifications or attempts to modify the registry entries associated with the permission settings of non-packaged applications for the microphone and webcam. Specifically, lookout for changes in the registry paths '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged' and '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged'. Being vigilant about such modifications can help in identifying unauthorized access to these sensitive resources."
    }
  },
  {
    "instruction": "Please help me detect the following: Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques",
    "context": "",
    "output": "Sure!\nIn order to detect well-known TAP software installation which could be a preparation for data exfiltration using tunneling techniques, you should monitor Windows System logs, specifically focusing on entries from the Service Control Manager. Look for Event ID 7045, which signifies a service installation. Pay special attention to the ImagePath field to check if it contains 'tap0901', a known identifier for TAP software commonly used in VPN installations. It is essential, however, to be aware that detecting this event could also flag legitimate installations of OpenVPN TAP drivers, thus necessitating a careful review of alerts to discern between malicious and legitimate activities. The detection of such activities is crucial as it is associated with various tactics and techniques including tunneling, which could ultimately lead to data exfiltration attempts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques",
      "answer": "In order to detect well-known TAP software installation which could be a preparation for data exfiltration using tunneling techniques, you should monitor Windows System logs, specifically focusing on entries from the Service Control Manager. Look for Event ID 7045, which signifies a service installation. Pay special attention to the ImagePath field to check if it contains 'tap0901', a known identifier for TAP software commonly used in VPN installations. It is essential, however, to be aware that detecting this event could also flag legitimate installations of OpenVPN TAP drivers, thus necessitating a careful review of alerts to discern between malicious and legitimate activities. The detection of such activities is crucial as it is associated with various tactics and techniques including tunneling, which could ultimately lead to data exfiltration attempts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when an attacker register a new SIP provider for persistence and defense evasion",
    "context": "",
    "output": "In order to detect when an attacker registers a new SIP provider for persistence and defense evasion, you should: Monitor and analyze registry set events within Windows environments, specifically focusing on instances where the EventType is set to SetValue and the TargetObject includes the path '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\mpnotify'. This particular registry key modification is indicative of attempts to register a new SIP provider, which could be leveraged by attackers for maintaining persistent access to a system or evading defensive measures. It's important to consider that while changes to this registry key could occasionally be legitimate\u2014for instance, if a new SIP provider is being officially registered in the environment\u2014such events are rare and should prompt investigation due to the high risk associated with unauthorized modifications. This scenario is closely associated with tactics and techniques of persistence and defense evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker register a new SIP provider for persistence and defense evasion",
      "answer": "In order to detect when an attacker registers a new SIP provider for persistence and defense evasion, you should: Monitor and analyze registry set events within Windows environments, specifically focusing on instances where the EventType is set to SetValue and the TargetObject includes the path '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\mpnotify'. This particular registry key modification is indicative of attempts to register a new SIP provider, which could be leveraged by attackers for maintaining persistent access to a system or evading defensive measures. It's important to consider that while changes to this registry key could occasionally be legitimate\u2014for instance, if a new SIP provider is being officially registered in the environment\u2014such events are rare and should prompt investigation due to the high risk associated with unauthorized modifications. This scenario is closely associated with tactics and techniques of persistence and defense evasion."
    }
  },
  {
    "instruction": "How to detect: Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n",
    "context": "",
    "output": "In order to detect adversaries abusing msiexec.exe to proxy execution of malicious payloads, which is a technique often seen where msiexec.exe, a utility commonly used for executing installation packages (.msi), is manipulated for executing malicious code or payloads, you should:\n\nMonitor Windows process creation logs for occurrences of msiexec.exe being executed. Specifically, look for the process image ending with '\\msiexec.exe' or having an original filename of 'msiexec.exe'. Additionally, inspect the command line arguments used during the execution of msiexec.exe for flags related to installation (/i or -i), package management (/package or -package), administrative installation (/a or -a), advertising a product without installing it (/j or -j), and especially for silent installation flags (/q or -q), which are often used by attackers to hide their activities.\n\nHowever, you need to apply certain filters to reduce false positives. Exclude cases where the parent process image path suggests a benign origin, such as processes initiating from the user's temp folder ('C:\\Users\\[User Name]\\AppData\\Local\\Temp\\' indicates a common location for legitimate installers), the system's temp folder ('C:\\Windows\\Temp\\'), or the CCM folder ('C:\\Windows\\CCM\\Ccm32BitLauncher.exe') often involved in legitimate operations, particularly if executed with system integrity level. \n\nUnderstanding that sometimes legitimate Windows applications may use these techniques for updates or system functions, be mindful of false positives, notably Windows Apps installing updates silently using msiexec.exe with the quiet flag.\n\nTaking these steps enables you to better identify malicious use of msiexec.exe for executing unauthorized payloads, keeping in line with recognizing and preventing proxy execution tactics used by adversaries.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n",
      "answer": "In order to detect adversaries abusing msiexec.exe to proxy execution of malicious payloads, which is a technique often seen where msiexec.exe, a utility commonly used for executing installation packages (.msi), is manipulated for executing malicious code or payloads, you should:\n\nMonitor Windows process creation logs for occurrences of msiexec.exe being executed. Specifically, look for the process image ending with '\\msiexec.exe' or having an original filename of 'msiexec.exe'. Additionally, inspect the command line arguments used during the execution of msiexec.exe for flags related to installation (/i or -i), package management (/package or -package), administrative installation (/a or -a), advertising a product without installing it (/j or -j), and especially for silent installation flags (/q or -q), which are often used by attackers to hide their activities.\n\nHowever, you need to apply certain filters to reduce false positives. Exclude cases where the parent process image path suggests a benign origin, such as processes initiating from the user's temp folder ('C:\\Users\\[User Name]\\AppData\\Local\\Temp\\' indicates a common location for legitimate installers), the system's temp folder ('C:\\Windows\\Temp\\'), or the CCM folder ('C:\\Windows\\CCM\\Ccm32BitLauncher.exe') often involved in legitimate operations, particularly if executed with system integrity level. \n\nUnderstanding that sometimes legitimate Windows applications may use these techniques for updates or system functions, be mindful of false positives, notably Windows Apps installing updates silently using msiexec.exe with the quiet flag.\n\nTaking these steps enables you to better identify malicious use of msiexec.exe for executing unauthorized payloads, keeping in line with recognizing and preventing proxy execution tactics used by adversaries."
    }
  },
  {
    "instruction": "How to detect: command that type the content of ntdll.dll to a different file or a pipe in order to evade AV / EDR detection. As seen being used in the POC NtdllPipe",
    "context": "",
    "output": "In order to detect commands that type the content of ntdll.dll to a different file or a pipe in order to evade AV / EDR detection, as seen being used in the POC NtdllPipe, you should: keep an eye on processes launched in Windows that involve specific command line actions. These actions include utilizing the 'type' command against the 'ntdll.dll' file located in the system32 directory, using either environment variables (%windir% or %systemroot%) or a hardcoded path (c:\\windows\\system32\\ntdll.dll). Also, watch for operations that redirect ('>') the content of 'ntdll.dll' to a pipe ('\\\\\\\\.\\\\pipe\\\\'). This kind of activity could indicate an attempt to bypass antivirus or Endpoint Detection and Response (EDR) mechanisms by manipulating or inspecting the 'ntdll.dll', a critical system library file. Such actions are considered highly suspicious and warrant investigation as they could be part of a broader attack strategy to evade detection tools.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "command that type the content of ntdll.dll to a different file or a pipe in order to evade AV / EDR detection. As seen being used in the POC NtdllPipe",
      "answer": "In order to detect commands that type the content of ntdll.dll to a different file or a pipe in order to evade AV / EDR detection, as seen being used in the POC NtdllPipe, you should: keep an eye on processes launched in Windows that involve specific command line actions. These actions include utilizing the 'type' command against the 'ntdll.dll' file located in the system32 directory, using either environment variables (%windir% or %systemroot%) or a hardcoded path (c:\\windows\\system32\\ntdll.dll). Also, watch for operations that redirect ('>') the content of 'ntdll.dll' to a pipe ('\\\\\\\\.\\\\pipe\\\\'). This kind of activity could indicate an attempt to bypass antivirus or Endpoint Detection and Response (EDR) mechanisms by manipulating or inspecting the 'ntdll.dll', a critical system library file. Such actions are considered highly suspicious and warrant investigation as they could be part of a broader attack strategy to evade detection tools."
    }
  },
  {
    "instruction": "Please help me detect the following: processes that query known 3rd party registry keys that holds credentials via commandline",
    "context": "",
    "output": "Sure!\nIn order to detect processes that query known 3rd party registry keys that holds credentials via commandline, you should monitor for process creation events on Windows systems where the command line includes references to specific registry paths. These paths are known to store sensitive information such as credentials for various applications, including PuTTY, MobaXterm, Radmin, Foxmail, IncrediMail, Eudora, B2 (presumably Becky! Internet Mail), OpenVPN-GUI, WinSCP, COREFTP, internet download managers, OpenSSH, TightVNC, WinVNC (both VNC3 and WinVNC4), suggesting that an attacker might be attempting to access stored credentials. This detection focuses on spotting suspicious activities where command lines contain references to these paths, which could indicate an attempt to extract sensitive data. Since these actions might yield some false positives due to legitimate process activities that also access these registry keys, it remains categorized at a medium level of alertness.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "processes that query known 3rd party registry keys that holds credentials via commandline",
      "answer": "In order to detect processes that query known 3rd party registry keys that holds credentials via commandline, you should monitor for process creation events on Windows systems where the command line includes references to specific registry paths. These paths are known to store sensitive information such as credentials for various applications, including PuTTY, MobaXterm, Radmin, Foxmail, IncrediMail, Eudora, B2 (presumably Becky! Internet Mail), OpenVPN-GUI, WinSCP, COREFTP, internet download managers, OpenSSH, TightVNC, WinVNC (both VNC3 and WinVNC4), suggesting that an attacker might be attempting to access stored credentials. This detection focuses on spotting suspicious activities where command lines contain references to these paths, which could indicate an attempt to extract sensitive data. Since these actions might yield some false positives due to legitimate process activities that also access these registry keys, it remains categorized at a medium level of alertness."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation or removal of a computer. Can be used to detect attacks such as DCShadow via the creation of a new SPN.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation or removal of a computer, which can be used to detect attacks such as DCShadow via the creation of a new SPN, you should: Monitor Windows security logs for events with IDs 4741 and 4743. These event IDs are indicative of a computer being added to or removed from the domain, respectively. Such activities can be legitimate in normal enterprise operations, but in certain contexts, they might signal an attempt to manipulate Active Directory objects, an essential tactic in advanced persistent threat scenarios like DCShadow. Although the confidence level for this detection is marked low due to the potential for legitimate administrative activities to trigger these events, careful monitoring and context analysis are crucial for identifying malicious activities disguised as routine domain management.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation or removal of a computer. Can be used to detect attacks such as DCShadow via the creation of a new SPN.",
      "answer": "In order to detect the creation or removal of a computer, which can be used to detect attacks such as DCShadow via the creation of a new SPN, you should: Monitor Windows security logs for events with IDs 4741 and 4743. These event IDs are indicative of a computer being added to or removed from the domain, respectively. Such activities can be legitimate in normal enterprise operations, but in certain contexts, they might signal an attempt to manipulate Active Directory objects, an essential tactic in advanced persistent threat scenarios like DCShadow. Although the confidence level for this detection is marked low due to the potential for legitimate administrative activities to trigger these events, careful monitoring and context analysis are crucial for identifying malicious activities disguised as routine domain management."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of the builtin \"del\"/\"erase\" commands in order to delete files.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of the builtin \"del\"/\"erase\" commands in order to delete files since adversaries may delete files left behind by the actions of their intrusion activity, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, watch for the initiation of the command prompt executable 'cmd.exe', identified either through the image path ending with '\\cmd.exe' or the original file name being 'Cmd.Exe'. Once command prompt activity is identified, further inspect if any command lines include the use of 'del ' or 'erase ' commands which are known to delete files. Additionally, pay special attention to command lines that contain flags like ' /f' indicating the forced deletion of read-only files, ' /s' for the deletion of specified files from all subdirectories, and ' /q' for quiet mode operation where no confirmation is asked when deleting files globally. This form of monitoring helps in identifying the malicious deletion of files which could be part of an adversary's efforts to minimize their footprint and hide their activities following an intrusion. Be aware, however, that the level of false positives can vary, and it might be necessary to further refine detection by considering additional context such as the parent image of the process or specific command line patterns deemed legitimate within your environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the builtin \"del\"/\"erase\" commands in order to delete files.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n",
      "answer": "In order to detect execution of the builtin \"del\"/\"erase\" commands in order to delete files since adversaries may delete files left behind by the actions of their intrusion activity, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, watch for the initiation of the command prompt executable 'cmd.exe', identified either through the image path ending with '\\cmd.exe' or the original file name being 'Cmd.Exe'. Once command prompt activity is identified, further inspect if any command lines include the use of 'del ' or 'erase ' commands which are known to delete files. Additionally, pay special attention to command lines that contain flags like ' /f' indicating the forced deletion of read-only files, ' /s' for the deletion of specified files from all subdirectories, and ' /q' for quiet mode operation where no confirmation is asked when deleting files globally. This form of monitoring helps in identifying the malicious deletion of files which could be part of an adversary's efforts to minimize their footprint and hide their activities following an intrusion. Be aware, however, that the level of false positives can vary, and it might be necessary to further refine detection by considering additional context such as the parent image of the process or specific command line patterns deemed legitimate within your environment."
    }
  },
  {
    "instruction": "Can you explain how to detect: changes to the Internet Explorer \"DisableFirstRunCustomize\" value, which prevents Internet Explorer from running the first run wizard the first time a user starts the browser after installing Internet Explorer or Windows.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect changes to the Internet Explorer \"DisableFirstRunCustomize\" value, which prevents Internet Explorer from running the first run wizard the first time a user starts the browser after installing Internet Explorer or Windows, you should focus on monitoring the Windows Registry for modifications. Look for events where the EventType is 'SetValue' on registry entries that end with '\\Microsoft\\Internet Explorer\\Main\\DisableFirstRunCustomize'. Specifically, monitor for details indicating that the value has been set to 'DWORD (0x00000001)' indicating the home page is modified, or 'DWORD (0x00000002)' indicating a customization of the welcome message to Internet Explorer. \n\nExclude events where these changes originate from common and expected sources such as 'C:\\Windows\\explorer.exe' or 'C:\\Windows\\System32\\ie4uinit.exe', as these may represent routine operations rather than malicious activity. However, remain aware that some legitimate modifications might trigger this detection due to group policy changes or user settings adjustments, leading to potential false positives. \n\nThe monitoring effort is crucial for identifying unauthorized changes that might indicate an attacker is trying to suppress the standard first-run process of Internet Explorer, possibly as part of a broader attempt to evade detection or persist within a compromised system without attracting attention. This detection mechanism aligns with the tactics and techniques of Persistence and Privilege Escalation by manipulating browser settings to maintain control over key settings and behavior of applications on the target system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the Internet Explorer \"DisableFirstRunCustomize\" value, which prevents Internet Explorer from running the first run wizard the first time a user starts the browser after installing Internet Explorer or Windows.\n",
      "answer": "In order to detect changes to the Internet Explorer \"DisableFirstRunCustomize\" value, which prevents Internet Explorer from running the first run wizard the first time a user starts the browser after installing Internet Explorer or Windows, you should focus on monitoring the Windows Registry for modifications. Look for events where the EventType is 'SetValue' on registry entries that end with '\\Microsoft\\Internet Explorer\\Main\\DisableFirstRunCustomize'. Specifically, monitor for details indicating that the value has been set to 'DWORD (0x00000001)' indicating the home page is modified, or 'DWORD (0x00000002)' indicating a customization of the welcome message to Internet Explorer. \n\nExclude events where these changes originate from common and expected sources such as 'C:\\Windows\\explorer.exe' or 'C:\\Windows\\System32\\ie4uinit.exe', as these may represent routine operations rather than malicious activity. However, remain aware that some legitimate modifications might trigger this detection due to group policy changes or user settings adjustments, leading to potential false positives. \n\nThe monitoring effort is crucial for identifying unauthorized changes that might indicate an attacker is trying to suppress the standard first-run process of Internet Explorer, possibly as part of a broader attempt to evade detection or persist within a compromised system without attracting attention. This detection mechanism aligns with the tactics and techniques of Persistence and Privilege Escalation by manipulating browser settings to maintain control over key settings and behavior of applications on the target system."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Detect usage of the \"runexehelper.exe\" binary as a proxy to launch other programs",
    "context": "",
    "output": "In order to detect usage of the \"runexehelper.exe\" binary as a proxy to launch other programs, you should focus on monitoring the creation of processes within Windows operating systems. Specifically, look for instances where the parent image ends with '\\runexehelper.exe', which indicates that this binary is being used to initiate other processes. As false positives are categorized as unknown, it is essential to remain vigilant and further investigate any matches found. This method directly relates to identifying malicious processes and execution techniques, helping to uncover potentially stealthy behaviors used by attackers to evade detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect usage of the \"runexehelper.exe\" binary as a proxy to launch other programs",
      "answer": "In order to detect usage of the \"runexehelper.exe\" binary as a proxy to launch other programs, you should focus on monitoring the creation of processes within Windows operating systems. Specifically, look for instances where the parent image ends with '\\runexehelper.exe', which indicates that this binary is being used to initiate other processes. As false positives are categorized as unknown, it is essential to remain vigilant and further investigate any matches found. This method directly relates to identifying malicious processes and execution techniques, helping to uncover potentially stealthy behaviors used by attackers to evade detection."
    }
  },
  {
    "instruction": "How can I detect: removal of system firewall rules. Adversaries may only delete or modify a specific system firewall rule to bypass controls limiting network usage or access.\nDetection rules that match only on the disabling of firewalls will miss this.\n",
    "context": "",
    "output": "In order to detect the removal of system firewall rules, where adversaries may only delete or modify a specific system firewall rule to bypass controls limiting network usage or access, you should: Monitor Linux audit logs for commands that are indicative of someone attempting to remove firewall rules. Specifically, look for execution events (`EXECVE`) associated with the key commands `iptables`, `firewall-cmd`, and `ufw`. For `iptables`, the presence of the argument `DROP` should be noted. Similarly, for `firewall-cmd`, watch for the argument containing the term `remove`, and for `ufw`, the argument should contain `delete`. This monitoring helps in identifying potential malicious attempts to modify or delete firewall rules, which could be an indicator of an adversary trying to bypass network security controls. It's important to note that there could be legitimate administrative reasons for these actions, so any detection should be considered with the possibility of false positives, specifically arising from legitimate admin activity. The significance of these activities is considered to be of medium level, emphasizing the need for further investigation upon detection. This approach is aligned with understanding and mitigating tactics where adversaries attempt to manipulate firewall rules for their benefit, directly impacting network defense techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "removal of system firewall rules. Adversaries may only delete or modify a specific system firewall rule to bypass controls limiting network usage or access.\nDetection rules that match only on the disabling of firewalls will miss this.\n",
      "answer": "In order to detect the removal of system firewall rules, where adversaries may only delete or modify a specific system firewall rule to bypass controls limiting network usage or access, you should: Monitor Linux audit logs for commands that are indicative of someone attempting to remove firewall rules. Specifically, look for execution events (`EXECVE`) associated with the key commands `iptables`, `firewall-cmd`, and `ufw`. For `iptables`, the presence of the argument `DROP` should be noted. Similarly, for `firewall-cmd`, watch for the argument containing the term `remove`, and for `ufw`, the argument should contain `delete`. This monitoring helps in identifying potential malicious attempts to modify or delete firewall rules, which could be an indicator of an adversary trying to bypass network security controls. It's important to note that there could be legitimate administrative reasons for these actions, so any detection should be considered with the possibility of false positives, specifically arising from legitimate admin activity. The significance of these activities is considered to be of medium level, emphasizing the need for further investigation upon detection. This approach is aligned with understanding and mitigating tactics where adversaries attempt to manipulate firewall rules for their benefit, directly impacting network defense techniques."
    }
  },
  {
    "instruction": "How to detect: dropped files with double extensions, which is often used by malware as a method to abuse the fact that Windows hide default extensions by default.",
    "context": "",
    "output": "In order to detect dropped files with double extensions, which is often used by malware as a method to abuse the fact that Windows hide default extensions by default, you should monitor file events on Windows systems for the creation or modification of files that use suspicious combinations of extensions. Focus on detecting files that end with extensions typically associated with executables or compressed files such as '.exe', '.iso', '.rar', and '.zip'. Additionally, be vigilant for files that contain unusual patterns within their names, like document or image file names embedded with additional extensions ('.doc.', '.docx.', '.jpg.', '.pdf.', '.ppt.', '.pptx.', '.xls.', '.xlsx.'). These can include files trying to masquerade as one type while actually being another, particularly dangerous are files with double extensions that imply they are archives or documents but are executables (.rar.exe, .zip.exe). Considering the high risk and the low likelihood of false positives, this detection strategy is critical for identifying and reacting to attempts by malware to exploit the Windows feature that hides known file extensions, thereby preventing such malicious content from causing harm.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "dropped files with double extensions, which is often used by malware as a method to abuse the fact that Windows hide default extensions by default.",
      "answer": "In order to detect dropped files with double extensions, which is often used by malware as a method to abuse the fact that Windows hide default extensions by default, you should monitor file events on Windows systems for the creation or modification of files that use suspicious combinations of extensions. Focus on detecting files that end with extensions typically associated with executables or compressed files such as '.exe', '.iso', '.rar', and '.zip'. Additionally, be vigilant for files that contain unusual patterns within their names, like document or image file names embedded with additional extensions ('.doc.', '.docx.', '.jpg.', '.pdf.', '.ppt.', '.pptx.', '.xls.', '.xlsx.'). These can include files trying to masquerade as one type while actually being another, particularly dangerous are files with double extensions that imply they are archives or documents but are executables (.rar.exe, .zip.exe). Considering the high risk and the low likelihood of false positives, this detection strategy is critical for identifying and reacting to attempts by malware to exploit the Windows feature that hides known file extensions, thereby preventing such malicious content from causing harm."
    }
  },
  {
    "instruction": "Explain how should I detect the following: uncommon or suspicious child processes spawning from a WSL process. This could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL",
    "context": "",
    "output": "In order to detect uncommon or suspicious child processes spawning from a WSL process, which could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL, you should monitor process creation events specifically within Windows environments. Focus on instances where the parent process is either `wsl.exe` or `wslhost.exe`. These particular parent processes, associated with the Windows Subsystem for Linux (WSL), should not typically spawn certain types of child processes under normal operations. Therefore, pay close attention to the creation of child processes like `powershell.exe`, `pwsh.exe` (PowerShell Core), `cmd.exe` (Command Prompt), and even `calc.exe` (Calculator), which could be leveraged for malicious activities. Additionally, it's crucial to observe the paths from which these child processes are launched. Uncommon or suspicious paths to watch include the `AppData\\Local\\Temp\\`, public user directories (`C:\\Users\\Public\\`), and various temporary folders commonly used by Windows (`C:\\Windows\\Temp\\`, `C:\\Temp\\`) as well as directories like `Downloads` and `Desktop`. Such child processes spawning from WSL processes and launching from these locations suggest a potential security risk, reflecting activities that are not part of the typical usage patterns and might signal evasion or persistence mechanisms employed by adversaries.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "uncommon or suspicious child processes spawning from a WSL process. This could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL",
      "answer": "In order to detect uncommon or suspicious child processes spawning from a WSL process, which could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL, you should monitor process creation events specifically within Windows environments. Focus on instances where the parent process is either `wsl.exe` or `wslhost.exe`. These particular parent processes, associated with the Windows Subsystem for Linux (WSL), should not typically spawn certain types of child processes under normal operations. Therefore, pay close attention to the creation of child processes like `powershell.exe`, `pwsh.exe` (PowerShell Core), `cmd.exe` (Command Prompt), and even `calc.exe` (Calculator), which could be leveraged for malicious activities. Additionally, it's crucial to observe the paths from which these child processes are launched. Uncommon or suspicious paths to watch include the `AppData\\Local\\Temp\\`, public user directories (`C:\\Users\\Public\\`), and various temporary folders commonly used by Windows (`C:\\Windows\\Temp\\`, `C:\\Temp\\`) as well as directories like `Downloads` and `Desktop`. Such child processes spawning from WSL processes and launching from these locations suggest a potential security risk, reflecting activities that are not part of the typical usage patterns and might signal evasion or persistence mechanisms employed by adversaries."
    }
  },
  {
    "instruction": "Please help me detect the following: well-known credential dumping tools execution via service execution events",
    "context": "",
    "output": "Sure!\nIn order to detect well-known credential dumping tools execution via service execution events, you should monitor the Windows System logs for any service execution events that are initiated by the Service Control Manager with the EventID 7045. Specifically, look for the creation of services that have an ImagePath indicating the invocation of widely recognized credential dumping tool executables such as 'fgexec', 'dumpsvc', 'cachedump', 'mimidrv', 'gsecdump', 'servpw', and 'pwdump'. These particular tools are frequently used by attackers to exfiltrate passwords from a system's memory or saved on disk, constituting a significant security risk. However, it is worth noting that there may be legitimate cases where an administrator might use such tools for password recovery purposes, which can be considered as false positives. The severity of detecting such activities is high, given the critical impact of credential theft on an organization's security posture.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "well-known credential dumping tools execution via service execution events",
      "answer": "In order to detect well-known credential dumping tools execution via service execution events, you should monitor the Windows System logs for any service execution events that are initiated by the Service Control Manager with the EventID 7045. Specifically, look for the creation of services that have an ImagePath indicating the invocation of widely recognized credential dumping tool executables such as 'fgexec', 'dumpsvc', 'cachedump', 'mimidrv', 'gsecdump', 'servpw', and 'pwdump'. These particular tools are frequently used by attackers to exfiltrate passwords from a system's memory or saved on disk, constituting a significant security risk. However, it is worth noting that there may be legitimate cases where an administrator might use such tools for password recovery purposes, which can be considered as false positives. The severity of detecting such activities is high, given the critical impact of credential theft on an organization's security posture."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious user agent strings used by crypto miners in proxy logs",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious user agent strings used by crypto miners in proxy logs, you should: Look into the proxy log sources for user agents beginning with specific patterns indicative of crypto-mining software. Focus on identifying any user agents that start with \"XMRig \" or \"ccminer\" as these are commonly associated with crypto mining activities. Ensure to meticulously collect data fields such as ClientIP, requested URI (c-uri), and the complete user agent string (c-useragent) for further analysis. It's important to be aware of the potential for unknown false positives, but given the high level of scrutiny required for such detections, the risk is deemed high. This method is tied to monitoring techniques and behaviors that relate to the use of system resources for unauthorized cryptocurrency mining.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious user agent strings used by crypto miners in proxy logs",
      "answer": "In order to detect suspicious user agent strings used by crypto miners in proxy logs, you should: Look into the proxy log sources for user agents beginning with specific patterns indicative of crypto-mining software. Focus on identifying any user agents that start with \"XMRig \" or \"ccminer\" as these are commonly associated with crypto mining activities. Ensure to meticulously collect data fields such as ClientIP, requested URI (c-uri), and the complete user agent string (c-useragent) for further analysis. It's important to be aware of the potential for unknown false positives, but given the high level of scrutiny required for such detections, the risk is deemed high. This method is tied to monitoring techniques and behaviors that relate to the use of system resources for unauthorized cryptocurrency mining."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share",
    "context": "",
    "output": "In order to detect usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share, you should: Focus on monitoring process creation logs in Windows. Specifically, look for instances where 'cmd.exe' or its original filename 'Cmd.Exe' is executed. Both conditions must be met: 1) The command line contains the keyword 'copy ' followed by a double backslash '\\\\', indicating an operation to copy files from a network location. 2) The command must also include either '.dmp' or '.dump' in it, suggesting the types of files being copied are memory dump files. These indicators, when present together, suggest that an action is being taken to copy potentially sensitive or diagnostic information from a remote share, possibly for malicious reasons. Due to the nature of the data being targeted and the method of acquisition, this activity is flagged at a high level of concern. However, there might be instances where such actions are legitimate and thus could be considered false positives, although such cases are unknown. The tactics associated with this activity include the retrieval of information and potentially the exfiltration of data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share",
      "answer": "In order to detect usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share, you should: Focus on monitoring process creation logs in Windows. Specifically, look for instances where 'cmd.exe' or its original filename 'Cmd.Exe' is executed. Both conditions must be met: 1) The command line contains the keyword 'copy ' followed by a double backslash '\\\\', indicating an operation to copy files from a network location. 2) The command must also include either '.dmp' or '.dump' in it, suggesting the types of files being copied are memory dump files. These indicators, when present together, suggest that an action is being taken to copy potentially sensitive or diagnostic information from a remote share, possibly for malicious reasons. Due to the nature of the data being targeted and the method of acquisition, this activity is flagged at a high level of concern. However, there might be instances where such actions are legitimate and thus could be considered false positives, although such cases are unknown. The tactics associated with this activity include the retrieval of information and potentially the exfiltration of data."
    }
  },
  {
    "instruction": "Please help me detect the following: Checks for event id 1102 which indicates the security event log was cleared.",
    "context": "",
    "output": "Sure!\nIn order to check for event id 1102 which indicates the security event log was cleared, you should: Monitor Windows security logs specifically for Event ID 1102 with the provider name Microsoft-Windows-Eventlog. This event indicates that the security event log has been cleared, which can be a significant indicator of malicious activity as attackers might clear event logs to hide their tracks after gaining access to a system or performing unauthorized activities. It's important to capture details such as SubjectLogonId, SubjectUserName, SubjectUserSid, and SubjectDomainName associated with this event to help identify who cleared the log. While this detection is critical for identifying potential security breaches, keep in mind that there are legitimate scenarios where administrative actions may require clearing these logs. Therefore, these alerts should be investigated to distinguish between malicious activities and legitimate administrative activities. The level of concern for such events is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Checks for event id 1102 which indicates the security event log was cleared.",
      "answer": "In order to check for event id 1102 which indicates the security event log was cleared, you should: Monitor Windows security logs specifically for Event ID 1102 with the provider name Microsoft-Windows-Eventlog. This event indicates that the security event log has been cleared, which can be a significant indicator of malicious activity as attackers might clear event logs to hide their tracks after gaining access to a system or performing unauthorized activities. It's important to capture details such as SubjectLogonId, SubjectUserName, SubjectUserSid, and SubjectDomainName associated with this event to help identify who cleared the log. While this detection is critical for identifying potential security breaches, keep in mind that there are legitimate scenarios where administrative actions may require clearing these logs. Therefore, these alerts should be investigated to distinguish between malicious activities and legitimate administrative activities. The level of concern for such events is considered medium."
    }
  },
  {
    "instruction": "How to detect: creation of new services potentially related to COLDSTEEL RAT",
    "context": "",
    "output": "In order to detect the creation of new services potentially related to COLDSTEEL RAT, you should: Monitor Windows system logs for events indicating the creation of new services. Focus specifically on logs from the Service Control Manager with an Event ID of 7045. This event signals that a new service has been installed in the system. Pay special attention to services named 'Name', 'msupdate', or 'msupdate2'. Additionally, scrutinize the ImagePath field for any instances containing the path '\\Windows\\System32\\svchost.exe', as this is a common tactic used by malware to disguise themselves as legitimate Windows services. False positives are considered unlikely, indicating the detection methods are highly specific and closely associated with malicious activity. The severity level of this activity is marked as high due to its potential impact related to the COLDSTEEL RAT, implicating this monitoring strategy as critical for identifying and mitigating threats early on.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of new services potentially related to COLDSTEEL RAT",
      "answer": "In order to detect the creation of new services potentially related to COLDSTEEL RAT, you should: Monitor Windows system logs for events indicating the creation of new services. Focus specifically on logs from the Service Control Manager with an Event ID of 7045. This event signals that a new service has been installed in the system. Pay special attention to services named 'Name', 'msupdate', or 'msupdate2'. Additionally, scrutinize the ImagePath field for any instances containing the path '\\Windows\\System32\\svchost.exe', as this is a common tactic used by malware to disguise themselves as legitimate Windows services. False positives are considered unlikely, indicating the detection methods are highly specific and closely associated with malicious activity. The severity level of this activity is marked as high due to its potential impact related to the COLDSTEEL RAT, implicating this monitoring strategy as critical for identifying and mitigating threats early on."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect usage of the \"sqlite\" binary to query databases in Firefox and other Gecko-based browsers for potential data stealing.",
    "context": "",
    "output": "Sure!\nIn order to detect usage of the \"sqlite\" binary to query databases in Firefox and other Gecko-based browsers for potential data stealing, you should focus on monitoring process creation events within Windows systems. Specifically, you should look for signs that the SQLite executable, which can be identified as either 'sqlite.exe' or 'sqlite3.exe', is being used. Attention should also be paid to command lines that contain references to 'cookies.sqlite' or 'places.sqlite'. The former is often associated with the storage of cookies, while the latter usually pertains to bookmarks and browser history in Firefox and other Gecko-based browsers. This detection is significant as it could indicate unauthorized attempts to access or steal sensitive data, such as session cookies or browsing history, which can lead to privacy breaches or further malicious activities. False positives are currently unknown, highlighting the need for careful analysis of detected events, and the severity level is set to high, reflecting the potential risk associated with this behavior. Monitoring for these specific indicators can aid in identifying potential data theft activities involving SQLite database queries in the context of web browsing data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect usage of the \"sqlite\" binary to query databases in Firefox and other Gecko-based browsers for potential data stealing.",
      "answer": "In order to detect usage of the \"sqlite\" binary to query databases in Firefox and other Gecko-based browsers for potential data stealing, you should focus on monitoring process creation events within Windows systems. Specifically, you should look for signs that the SQLite executable, which can be identified as either 'sqlite.exe' or 'sqlite3.exe', is being used. Attention should also be paid to command lines that contain references to 'cookies.sqlite' or 'places.sqlite'. The former is often associated with the storage of cookies, while the latter usually pertains to bookmarks and browser history in Firefox and other Gecko-based browsers. This detection is significant as it could indicate unauthorized attempts to access or steal sensitive data, such as session cookies or browsing history, which can lead to privacy breaches or further malicious activities. False positives are currently unknown, highlighting the need for careful analysis of detected events, and the severity level is set to high, reflecting the potential risk associated with this behavior. Monitoring for these specific indicators can aid in identifying potential data theft activities involving SQLite database queries in the context of web browsing data."
    }
  },
  {
    "instruction": "How can I detect: Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft \u201cRoslyn\u201d Community Technology Preview was named 'rcsi.exe'",
    "context": "",
    "output": "In order to detect potential abuse of the 'csi.exe' and 'rcsi.exe' binaries which are legitimate Microsoft-signed executables from Visual Studio and are intended for running C# code interactively, often through the command line, you should:\n\nMonitor for the creation of processes that are named 'csi.exe' or 'rcsi.exe'. This can be identified when the executable image ends with these specific names or when the original file name matches 'csi.exe' or 'rcsi.exe'. Additionally, any command-line invocation of these executables coming from an entity identified as 'Microsoft Corporation' should be closely scrutinized. It's essential to capture key details such as the computer name, user account, full command line used to launch the process, and the parent command line if available. This allows for a comprehensive understanding of the context surrounding potential misuse. However, it\u2019s important to note that these utilities might be legitimately used by software developers; thus, some alerts might represent false positives. The monitoring approach should consider the balance between detecting malicious activity and minimizing interruptions to legitimate software development practices. These checks mainly focus on the tactics and techniques related to the execution phase of an attack, specifically monitoring the execution of Windows processes that could potentially be abused by attackers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft \u201cRoslyn\u201d Community Technology Preview was named 'rcsi.exe'",
      "answer": "In order to detect potential abuse of the 'csi.exe' and 'rcsi.exe' binaries which are legitimate Microsoft-signed executables from Visual Studio and are intended for running C# code interactively, often through the command line, you should:\n\nMonitor for the creation of processes that are named 'csi.exe' or 'rcsi.exe'. This can be identified when the executable image ends with these specific names or when the original file name matches 'csi.exe' or 'rcsi.exe'. Additionally, any command-line invocation of these executables coming from an entity identified as 'Microsoft Corporation' should be closely scrutinized. It's essential to capture key details such as the computer name, user account, full command line used to launch the process, and the parent command line if available. This allows for a comprehensive understanding of the context surrounding potential misuse. However, it\u2019s important to note that these utilities might be legitimately used by software developers; thus, some alerts might represent false positives. The monitoring approach should consider the balance between detecting malicious activity and minimizing interruptions to legitimate software development practices. These checks mainly focus on the tactics and techniques related to the execution phase of an attack, specifically monitoring the execution of Windows processes that could potentially be abused by attackers."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of the default dump file used by Outflank Dumpert tool. A process dumper, which dumps the lsass process memory",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation of the default dump file used by Outflank Dumpert tool, a process dumper, which dumps the lsass process memory, you should: Monitor file events within Windows systems for any instances where a file is created with the name ending in 'dumpert.dmp'. This is a critical indicator of a potential malicious activity, as the mentioned filename is associated with the Outflank Dumpert tool \u2013 a known process dumper specifically targeting the Local Security Authority Subsystem Service (lsass) memory. The creation of such a file is highly indicative of an adversary attempting to extract sensitive information from the lsass process, which could include passwords, keys, and other credentials. Due to the nature of this activity, false positives are considered to be very unlikely. Identifying the creation of a file with this name should prompt immediate investigation to confirm the presence of and mitigate a potential security breach.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of the default dump file used by Outflank Dumpert tool. A process dumper, which dumps the lsass process memory",
      "answer": "In order to detect the creation of the default dump file used by Outflank Dumpert tool, a process dumper, which dumps the lsass process memory, you should: Monitor file events within Windows systems for any instances where a file is created with the name ending in 'dumpert.dmp'. This is a critical indicator of a potential malicious activity, as the mentioned filename is associated with the Outflank Dumpert tool \u2013 a known process dumper specifically targeting the Local Security Authority Subsystem Service (lsass) memory. The creation of such a file is highly indicative of an adversary attempting to extract sensitive information from the lsass process, which could include passwords, keys, and other credentials. Due to the nature of this activity, false positives are considered to be very unlikely. Identifying the creation of a file with this name should prompt immediate investigation to confirm the presence of and mitigate a potential security breach."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the \"Add-AppxPackage\" or it's alias \"Add-AppPackage\" to install unsigned AppX packages",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of the \"Add-AppxPackage\" or its alias \"Add-AppPackage\" to install unsigned AppX packages, you should: Monitor Windows PowerShell script logs to identify any instances where scripts include the commands 'Add-AppPackage ' or 'Add-AppxPackage ', especially when these commands are combined with the flag ' -AllowUnsigned'. This monitoring is predicated on having Script Block Logging enabled to capture PowerShell script activities. It is important to be cautious as there may be legitimate reasons for installing unsigned packages, such as during testing phases. The risk level associated with this activity is deemed medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Add-AppxPackage\" or it's alias \"Add-AppPackage\" to install unsigned AppX packages",
      "answer": "In order to detect usage of the \"Add-AppxPackage\" or its alias \"Add-AppPackage\" to install unsigned AppX packages, you should: Monitor Windows PowerShell script logs to identify any instances where scripts include the commands 'Add-AppPackage ' or 'Add-AppxPackage ', especially when these commands are combined with the flag ' -AllowUnsigned'. This monitoring is predicated on having Script Block Logging enabled to capture PowerShell script activities. It is important to be cautious as there may be legitimate reasons for installing unsigned packages, such as during testing phases. The risk level associated with this activity is deemed medium."
    }
  },
  {
    "instruction": "Please help me detect the following: rule has been modified in the Windows firewall exception list",
    "context": "",
    "output": "Sure!\nIn order to detect when a rule has been modified in the Windows firewall exception list, you should monitor Windows Defender Firewall logs specifically for Event IDs 2005 and 2073, which indicate a rule modification in the firewall exception list on Windows 10 and Windows 11, respectively. It's crucial to be attentive to modifications initiated by applications running from common directories such as 'C:\\Program Files (x86)\\' and 'C:\\Program Files\\'. However, if the modification originates from these directories, it might be considered regular activity and may not trigger an alert. This monitoring practice helps in identifying unauthorized or malicious changes to firewall rules, which could potentially expose the system to external threats or facilitate lateral movement within the network. This approach ties into understanding and mitigating tactics and techniques related to Persistence, Privilege Escalation, and Defense Evasion by closely observing changes within the system's protective barriers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "rule has been modified in the Windows firewall exception list",
      "answer": "In order to detect when a rule has been modified in the Windows firewall exception list, you should monitor Windows Defender Firewall logs specifically for Event IDs 2005 and 2073, which indicate a rule modification in the firewall exception list on Windows 10 and Windows 11, respectively. It's crucial to be attentive to modifications initiated by applications running from common directories such as 'C:\\Program Files (x86)\\' and 'C:\\Program Files\\'. However, if the modification originates from these directories, it might be considered regular activity and may not trigger an alert. This monitoring practice helps in identifying unauthorized or malicious changes to firewall rules, which could potentially expose the system to external threats or facilitate lateral movement within the network. This approach ties into understanding and mitigating tactics and techniques related to Persistence, Privilege Escalation, and Defense Evasion by closely observing changes within the system's protective barriers."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious DACL modifications to allow access to a service from a suspicious trustee. This can be used to override access restrictions set by previous ACLs.",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious DACL modifications to allow access to a service from a suspicious trustee, which can be used to override access restrictions set by previous ACLs, you should: Monitor process creation logs in Windows for the execution of \"sc.exe\". Specifically, look for instances where \"sc.exe\" appears at the end of the image path and its original file name is \"sc.exe\", indicating the service controller is being utilized. Additionally, scan for command lines that contain both \"sdset\" and \"A;\", signifying an attempt to modify Security Descriptors (DACLs) to permit access. Pay special attention to command lines that indicate modifications involving various trustees, such as interactively logged-on user (';IU'), service logon user (';SU'), built-in administrators (';BA'), local system (';SY'), and everyone (';WD'). This comprehensive approach is critical as it helps identify attempts to change DACLs to illicitly grant permissions to services, representing a high-level security risk.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious DACL modifications to allow access to a service from a suspicious trustee. This can be used to override access restrictions set by previous ACLs.",
      "answer": "In order to detect suspicious DACL modifications to allow access to a service from a suspicious trustee, which can be used to override access restrictions set by previous ACLs, you should: Monitor process creation logs in Windows for the execution of \"sc.exe\". Specifically, look for instances where \"sc.exe\" appears at the end of the image path and its original file name is \"sc.exe\", indicating the service controller is being utilized. Additionally, scan for command lines that contain both \"sdset\" and \"A;\", signifying an attempt to modify Security Descriptors (DACLs) to permit access. Pay special attention to command lines that indicate modifications involving various trustees, such as interactively logged-on user (';IU'), service logon user (';SU'), built-in administrators (';BA'), local system (';SY'), and everyone (';WD'). This comprehensive approach is critical as it helps identify attempts to change DACLs to illicitly grant permissions to services, representing a high-level security risk."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n",
    "context": "",
    "output": "In order to detect usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool, similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should: Monitor the creation of processes on Windows systems, specifically focusing on instances where the command line includes the invocation of 'Enable-WindowsOptionalFeature' with the parameters '-Online' and '-FeatureName'. This approach is aimed at identifying the enablement of Windows features that could potentially be insecure or unusual within your environment. Specifically, keep an eye out for the activation of features such as 'TelnetServer', 'Internet-Explorer-Optional-amd64', 'TFTP', 'SMB1Protocol', 'Client-ProjFS', and 'Microsoft-Windows-Subsystem-Linux'. These are considered to be of interest since their activation could indicate a misuse of the system's capabilities, possibly for nefarious purposes. Be aware, however, that there could be legitimate reasons for the use of these commands and features within different environments, so it is important to analyze the context of their usage before making a determination. This monitoring approach situates itself at a medium level of alert due to the nature of the actions being monitored and their potential implications on system security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n",
      "answer": "In order to detect usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool, similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should: Monitor the creation of processes on Windows systems, specifically focusing on instances where the command line includes the invocation of 'Enable-WindowsOptionalFeature' with the parameters '-Online' and '-FeatureName'. This approach is aimed at identifying the enablement of Windows features that could potentially be insecure or unusual within your environment. Specifically, keep an eye out for the activation of features such as 'TelnetServer', 'Internet-Explorer-Optional-amd64', 'TFTP', 'SMB1Protocol', 'Client-ProjFS', and 'Microsoft-Windows-Subsystem-Linux'. These are considered to be of interest since their activation could indicate a misuse of the system's capabilities, possibly for nefarious purposes. Be aware, however, that there could be legitimate reasons for the use of these commands and features within different environments, so it is important to analyze the context of their usage before making a determination. This monitoring approach situates itself at a medium level of alert due to the nature of the actions being monitored and their potential implications on system security."
    }
  },
  {
    "instruction": "How can I detect: loading of diagcab packages from a remote path, as seen in DogWalk vulnerability",
    "context": "",
    "output": "In order to detect loading of diagcab packages from a remote path, as seen in DogWalk vulnerability, you should focus on monitoring diagnosis-scripted services on Windows systems. Specifically, you should look for event ID 101, which may indicate an attempt to load a diagcab package. A critical sign of a potential attack involves the PackagePath field containing double backslashes, suggesting a remote path is being used, such as in cases where the path looks similar to '\\\\webdav-test.herokuapp.com@ssl\\DavWWWRoot\\package'. This pattern is a strong indicator of a potential exploitation attempt, given that diagcab packages should not typically be loaded from remote locations in a secure environment.\n\nHowever, it is important to note that not all instances flagged by these criteria are malicious. Legitimate scenarios may include packages hosted on known and authorized remote locations. Therefore, while the detection level is high, indicating a serious concern, careful analysis and verification of the context in which these diagcab packages are being loaded from remote paths are essential to reduce the risk of false positives.\n\nThis analysis connects to various tactics and techniques, emphasizing the importance of vigilance in monitoring and controlling diagnostic scripts and remote package loading activities as part of a comprehensive cybersecurity strategy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loading of diagcab packages from a remote path, as seen in DogWalk vulnerability",
      "answer": "In order to detect loading of diagcab packages from a remote path, as seen in DogWalk vulnerability, you should focus on monitoring diagnosis-scripted services on Windows systems. Specifically, you should look for event ID 101, which may indicate an attempt to load a diagcab package. A critical sign of a potential attack involves the PackagePath field containing double backslashes, suggesting a remote path is being used, such as in cases where the path looks similar to '\\\\webdav-test.herokuapp.com@ssl\\DavWWWRoot\\package'. This pattern is a strong indicator of a potential exploitation attempt, given that diagcab packages should not typically be loaded from remote locations in a secure environment.\n\nHowever, it is important to note that not all instances flagged by these criteria are malicious. Legitimate scenarios may include packages hosted on known and authorized remote locations. Therefore, while the detection level is high, indicating a serious concern, careful analysis and verification of the context in which these diagcab packages are being loaded from remote paths are essential to reduce the risk of false positives.\n\nThis analysis connects to various tactics and techniques, emphasizing the importance of vigilance in monitoring and controlling diagnostic scripts and remote package loading activities as part of a comprehensive cybersecurity strategy."
    }
  },
  {
    "instruction": "How to detect: creation of files with the \".pub\" extension in suspicious or uncommon locations. This could be a sign of attackers abusing Publisher documents",
    "context": "",
    "output": "In order to detect the creation of files with the \".pub\" extension in suspicious or uncommon locations, which could be a sign of attackers abusing Publisher documents, you should monitor file events on Windows systems. Specifically, look for the creation of \".pub\" files in the following directories: '\\AppData\\Local\\Temp\\', '\\Users\\Public\\', '\\Windows\\Temp\\', and 'C:\\Temp\\'. These locations are typically used by attackers to store malicious files as they are often not monitored closely. The detection of such activities should be treated with caution due to the possibility of legitimate usage of \".pub\" files in these locations, although this should be considered a medium-level threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of files with the \".pub\" extension in suspicious or uncommon locations. This could be a sign of attackers abusing Publisher documents",
      "answer": "In order to detect the creation of files with the \".pub\" extension in suspicious or uncommon locations, which could be a sign of attackers abusing Publisher documents, you should monitor file events on Windows systems. Specifically, look for the creation of \".pub\" files in the following directories: '\\AppData\\Local\\Temp\\', '\\Users\\Public\\', '\\Windows\\Temp\\', and 'C:\\Temp\\'. These locations are typically used by attackers to store malicious files as they are often not monitored closely. The detection of such activities should be treated with caution due to the possibility of legitimate usage of \".pub\" files in these locations, although this should be considered a medium-level threat."
    }
  },
  {
    "instruction": "Explain how should I detect the following: process dump via legitimate sqldumper.exe binary",
    "context": "",
    "output": "In order to detect process dump via legitimate sqldumper.exe binary, you should: Monitor the creation of processes on Windows systems, specifically focusing on instances where the process name ends with '\\sqldumper.exe'. This monitoring is crucial as it targets the execution of the sqldumper.exe binary, which is a legitimate Microsoft SQL Server component that might be misused for malicious purposes. To ensure more precise detection, you should also look for command line arguments containing '0x0110' or '0x01100:40', as these arguments are typically associated with dumping processes. However, be mindful of potential false positives, as the use of sqldumper.exe can also be a part of legitimate Microsoft SQL Server operations. The alert level associated with this detection is medium, indicating a moderate risk or impact.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process dump via legitimate sqldumper.exe binary",
      "answer": "In order to detect process dump via legitimate sqldumper.exe binary, you should: Monitor the creation of processes on Windows systems, specifically focusing on instances where the process name ends with '\\sqldumper.exe'. This monitoring is crucial as it targets the execution of the sqldumper.exe binary, which is a legitimate Microsoft SQL Server component that might be misused for malicious purposes. To ensure more precise detection, you should also look for command line arguments containing '0x0110' or '0x01100:40', as these arguments are typically associated with dumping processes. However, be mindful of potential false positives, as the use of sqldumper.exe can also be a part of legitimate Microsoft SQL Server operations. The alert level associated with this detection is medium, indicating a moderate risk or impact."
    }
  },
  {
    "instruction": "How can I detect: Rule to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log",
    "context": "",
    "output": "In order to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log, you should focus on monitoring the log data coming from Windows servers that are running the MS Exchange Management service. Look specifically for instances where the actions or commands involve 'Set-OabVirtualDirectory', 'ExternalUrl', 'Page_Load', or 'script'. These keywords are vital because they can indicate that an adversary is attempting to inject or modify the External URL property of an OabVirtualDirectory with a script, which could be malicious. This activity is crucial to monitor as it has been tagged with tactics and techniques that suggest manipulation of web properties to control server behaviors or to distribute malicious codes. The severity of these actions is considered high, and while there might be cases where these keywords appear in non-malicious contexts, those instances are unknown or rare. Thus, any detection of these keywords in relation to the MS Exchange Management service should be taken seriously and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Rule to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log",
      "answer": "In order to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log, you should focus on monitoring the log data coming from Windows servers that are running the MS Exchange Management service. Look specifically for instances where the actions or commands involve 'Set-OabVirtualDirectory', 'ExternalUrl', 'Page_Load', or 'script'. These keywords are vital because they can indicate that an adversary is attempting to inject or modify the External URL property of an OabVirtualDirectory with a script, which could be malicious. This activity is crucial to monitor as it has been tagged with tactics and techniques that suggest manipulation of web properties to control server behaviors or to distribute malicious codes. The severity of these actions is considered high, and while there might be cases where these keywords appear in non-malicious contexts, those instances are unknown or rare. Thus, any detection of these keywords in relation to the MS Exchange Management service should be taken seriously and investigated promptly."
    }
  },
  {
    "instruction": "Please help me detect the following: modification of Outlook setting \"LoadMacroProviderOnBoot\" which if enabled allows the automatic loading of any configured VBA project/module",
    "context": "",
    "output": "Sure!\nIn order to detect the modification of Outlook setting \"LoadMacroProviderOnBoot\" which if enabled allows the automatic loading of any configured VBA project/module, you should: Monitor Windows registry settings specifically within the category of registry modifications. Look out for the event where the ValueType is set (SetValue event type). The primary focus should be on changes made to the registry key that ends with '\\Outlook\\LoadMacroProviderOnBoot'. Additionally, be vigilant for settings where the Details attribute contains the hexadecimal value '0x00000001', indicating that the \"LoadMacroProviderOnBoot\" feature has been enabled. This specific configuration change is considered suspicious as it allows the automatic execution of VBA macros at Outlook startup, which can be a vector for malware or other malicious campaigns. It is classified with a high level of importance due to the potential for abuse in facilitating attacks. Whilst being watchful, it's significant to note that false positives are currently marked as unknown, indicating that while not expected, they could occur and should be factored into alert analyses. This monitoring is paramount in identifying and mitigating potential threats linked with tactics and techniques such as persistence, privilege escalation, and potentially others, depending on the context of the attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of Outlook setting \"LoadMacroProviderOnBoot\" which if enabled allows the automatic loading of any configured VBA project/module",
      "answer": "In order to detect the modification of Outlook setting \"LoadMacroProviderOnBoot\" which if enabled allows the automatic loading of any configured VBA project/module, you should: Monitor Windows registry settings specifically within the category of registry modifications. Look out for the event where the ValueType is set (SetValue event type). The primary focus should be on changes made to the registry key that ends with '\\Outlook\\LoadMacroProviderOnBoot'. Additionally, be vigilant for settings where the Details attribute contains the hexadecimal value '0x00000001', indicating that the \"LoadMacroProviderOnBoot\" feature has been enabled. This specific configuration change is considered suspicious as it allows the automatic execution of VBA macros at Outlook startup, which can be a vector for malware or other malicious campaigns. It is classified with a high level of importance due to the potential for abuse in facilitating attacks. Whilst being watchful, it's significant to note that false positives are currently marked as unknown, indicating that while not expected, they could occur and should be factored into alert analyses. This monitoring is paramount in identifying and mitigating potential threats linked with tactics and techniques such as persistence, privilege escalation, and potentially others, depending on the context of the attack."
    }
  },
  {
    "instruction": "How can I detect: an executable accessing ngrok.io, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors",
    "context": "",
    "output": "In order to detect an executable accessing ngrok.io, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors, you should: Monitor network connections on Windows systems for instances where a connection has been initiated to a destination hostname that ends with '.ngrok.io'. This analysis focuses on detecting potentially malicious activity, given that ngrok.io is commonly used for securely exposing a local web server to the internet, but it can also be leveraged by attackers for data exfiltration purposes. While this behavior may flag legitimate uses of ngrok.io, it is marked with a high level of caution due to the potential for misuse in bypassing network security measures and exfiltrating sensitive information. Therefore, any detection of such activity should be thoroughly investigated for indications of malicious behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an executable accessing ngrok.io, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors",
      "answer": "In order to detect an executable accessing ngrok.io, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors, you should: Monitor network connections on Windows systems for instances where a connection has been initiated to a destination hostname that ends with '.ngrok.io'. This analysis focuses on detecting potentially malicious activity, given that ngrok.io is commonly used for securely exposing a local web server to the internet, but it can also be leveraged by attackers for data exfiltration purposes. While this behavior may flag legitimate uses of ngrok.io, it is marked with a high level of caution due to the potential for misuse in bypassing network security measures and exfiltrating sensitive information. Therefore, any detection of such activity should be thoroughly investigated for indications of malicious behavior."
    }
  },
  {
    "instruction": "Can you explain how to detect: the execution of Run Once task as configured in the registry",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of Run Once task as configured in the registry, you should: Monitor Windows process creation logs for any occurrences where the process image path ends with '\\runonce.exe' and its description is 'Run Once Wrapper'. Additionally, pay attention to command lines containing '/AlternateShellStartup' or ending with '/r'. These observations should be considered together to reliably identify the activity. It's essential to note that this detection mechanism is rated with a low level of confidence due to the potential for unknown false positives, which necessitates further investigation whenever such activity is flagged.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "the execution of Run Once task as configured in the registry",
      "answer": "In order to detect the execution of Run Once task as configured in the registry, you should: Monitor Windows process creation logs for any occurrences where the process image path ends with '\\runonce.exe' and its description is 'Run Once Wrapper'. Additionally, pay attention to command lines containing '/AlternateShellStartup' or ending with '/r'. These observations should be considered together to reliably identify the activity. It's essential to note that this detection mechanism is rated with a low level of confidence due to the potential for unknown false positives, which necessitates further investigation whenever such activity is flagged."
    }
  },
  {
    "instruction": "How to detect: suspicious command with /dev/tcp",
    "context": "",
    "output": "In order to detect suspicious command with /dev/tcp, you should monitor Linux system logs for the appearance of specific patterns indicating potential malicious activity. Specifically, search for commands that involve redirection or connections via /dev/tcp or /dev/udp. Such commands usually include the use of 'cat', 'exec', 'echo', and 'bash' in conjunction with /dev/tcp or /dev/udp to establish a connection, execute commands, or send data. Look out for patterns like 'cat </dev/tcp/', 'exec 3<>/dev/tcp/', 'echo >/dev/tcp/', 'bash -i >& /dev/tcp/', 'sh -i >& /dev/udp/', '0<&196;exec 196<>/dev/tcp/', 'exec 5<>/dev/tcp/', '(sh)0>/dev/tcp/', 'bash -c ''bash -i >& /dev/tcp/' and 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'. These patterns might be used by attackers to execute commands remotely, create reverse shells, or exfiltrate data. It's important to closely investigate occurrences of these patterns as their usage might indicate an intrusion or an attempt to leverage your system as part of an attack, although keep in mind that there might be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious command with /dev/tcp",
      "answer": "In order to detect suspicious command with /dev/tcp, you should monitor Linux system logs for the appearance of specific patterns indicating potential malicious activity. Specifically, search for commands that involve redirection or connections via /dev/tcp or /dev/udp. Such commands usually include the use of 'cat', 'exec', 'echo', and 'bash' in conjunction with /dev/tcp or /dev/udp to establish a connection, execute commands, or send data. Look out for patterns like 'cat </dev/tcp/', 'exec 3<>/dev/tcp/', 'echo >/dev/tcp/', 'bash -i >& /dev/tcp/', 'sh -i >& /dev/udp/', '0<&196;exec 196<>/dev/tcp/', 'exec 5<>/dev/tcp/', '(sh)0>/dev/tcp/', 'bash -c ''bash -i >& /dev/tcp/' and 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'. These patterns might be used by attackers to execute commands remotely, create reverse shells, or exfiltrate data. It's important to closely investigate occurrences of these patterns as their usage might indicate an intrusion or an attempt to leverage your system as part of an attack, although keep in mind that there might be unknown false positives."
    }
  },
  {
    "instruction": "How to detect: Files with well-known filenames (sensitive files with credential data) copying",
    "context": "",
    "output": "In order to detect the copying of files with well-known filenames that contain sensitive credential data, you should monitor for process creation events on Windows systems, specifically looking for instances where the 'esentutl.exe' executable is involved. This can be identified either by the image or the original filename ending with '\\esentutl.exe'. Additionally, check for command line arguments that include references to 'vss', ' /m ', or ' /y ', which may indicate an attempt to manipulate or interact with shadow copies or specific operations related to the executable.\n\nIt's also crucial to be aware of command line activities that point to sensitive locations often targeted for data extraction, such as '\\windows\\ntds\\ntds.dit' (Active Directory database), various configuration files like '\\config\\sam' (Security Account Manager), '\\config\\security', '\\config\\system', and their counterparts in the '\\repair' and '\\config\\RegBack' directories. These files are critical as they contain user credentials and system information which could be exploited if copied or accessed by unauthorized individuals.\n\nThis detection strategy is pivotal for identifying potential security incidents involving the unauthorized collection of credentials and other sensitive information. However, note that there may be legitimate reasons for accessing or copying these files, such as during backup operations or forensic investigations by authorized personnel. Thus, while this approach is set to a high alert level due to the sensitive nature of the data involved, it's essential to consider potential false positives and verify the context of detected activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Files with well-known filenames (sensitive files with credential data) copying",
      "answer": "In order to detect the copying of files with well-known filenames that contain sensitive credential data, you should monitor for process creation events on Windows systems, specifically looking for instances where the 'esentutl.exe' executable is involved. This can be identified either by the image or the original filename ending with '\\esentutl.exe'. Additionally, check for command line arguments that include references to 'vss', ' /m ', or ' /y ', which may indicate an attempt to manipulate or interact with shadow copies or specific operations related to the executable.\n\nIt's also crucial to be aware of command line activities that point to sensitive locations often targeted for data extraction, such as '\\windows\\ntds\\ntds.dit' (Active Directory database), various configuration files like '\\config\\sam' (Security Account Manager), '\\config\\security', '\\config\\system', and their counterparts in the '\\repair' and '\\config\\RegBack' directories. These files are critical as they contain user credentials and system information which could be exploited if copied or accessed by unauthorized individuals.\n\nThis detection strategy is pivotal for identifying potential security incidents involving the unauthorized collection of credentials and other sensitive information. However, note that there may be legitimate reasons for accessing or copying these files, such as during backup operations or forensic investigations by authorized personnel. Thus, while this approach is set to a high alert level due to the sensitive nature of the data involved, it's essential to consider potential false positives and verify the context of detected activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious process patterns used in NTDS.DIT exfiltration",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious process patterns used in NTDS.DIT exfiltration, you should focus on monitoring process creation events within Windows environments. Pay particular attention to processes associated with the execution of NTDSDump.exe or NTDSDumpEx.exe, especially when command lines indicate the handling of 'ntds.dit' or 'system.hiv' files, which are critical for NTDS.DIT exfiltration attempts. Additionally, be on the lookout for usage of the PowerShell script 'NTDSgrab.ps1'.\n\nBe vigilant for command lines that resemble system tools being misused for exfiltration purposes, such as one-liners utilizing 'ntdsutil.exe' for creating full directory copies of critical databases, or command lines copying the 'ntds.dit' file from its original location to another, which is a blatant sign of data exfiltration attempt.\n\nAnother key indicator of NTDS.DIT exfiltration includes PowerShell command lines specifically targeting 'ntds.dit' files. This can be a subtler approach but equally significant in the context of cyber attacks.\n\nFurthermore, scrutinize processes where 'ntds.dit' is involved, especially if the initiating parent process or the process itself is located in unusual directories like apache, tomcat, AppData, Temp, Public, or PerfLogs folders. These locations are not standard for legitimate system or administrative tools to operate from and can be indicative of an adversary attempting to camouflage their actions.\n\nImplementing these detection strategies involves looking for one or more of these suspicious activities. The high severity level attributed to these signs reflects their potential impact on organizational security, indicating a high likelihood of a targeted NTDS.DIT exfiltration attempt.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious process patterns used in NTDS.DIT exfiltration",
      "answer": "In order to detect suspicious process patterns used in NTDS.DIT exfiltration, you should focus on monitoring process creation events within Windows environments. Pay particular attention to processes associated with the execution of NTDSDump.exe or NTDSDumpEx.exe, especially when command lines indicate the handling of 'ntds.dit' or 'system.hiv' files, which are critical for NTDS.DIT exfiltration attempts. Additionally, be on the lookout for usage of the PowerShell script 'NTDSgrab.ps1'.\n\nBe vigilant for command lines that resemble system tools being misused for exfiltration purposes, such as one-liners utilizing 'ntdsutil.exe' for creating full directory copies of critical databases, or command lines copying the 'ntds.dit' file from its original location to another, which is a blatant sign of data exfiltration attempt.\n\nAnother key indicator of NTDS.DIT exfiltration includes PowerShell command lines specifically targeting 'ntds.dit' files. This can be a subtler approach but equally significant in the context of cyber attacks.\n\nFurthermore, scrutinize processes where 'ntds.dit' is involved, especially if the initiating parent process or the process itself is located in unusual directories like apache, tomcat, AppData, Temp, Public, or PerfLogs folders. These locations are not standard for legitimate system or administrative tools to operate from and can be indicative of an adversary attempting to camouflage their actions.\n\nImplementing these detection strategies involves looking for one or more of these suspicious activities. The high severity level attributed to these signs reflects their potential impact on organizational security, indicating a high likelihood of a targeted NTDS.DIT exfiltration attempt."
    }
  },
  {
    "instruction": "Can you explain how to detect: application security group is modified or deleted.",
    "context": "",
    "output": "Certainly!\n\nIn order to identify when an application security group is modified or deleted, you should monitor Azure activity logs for signs of unauthorized or suspicious modifications or deletions of application security groups. Specifically, look for operations named MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/WRITE and MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/DELETE. These operations indicate that an application security group has either been modified or deleted. It\u2019s crucial to assess the context of these actions. Normally, system administrators perform these operations as part of legitimate maintenance or configuration tasks. Therefore, it's important to verify the user identity, user agent, and hostname involved in these operations to ensure they align with expected activities within your environment. Unauthorized modifications or deletions can serve as indicators of malicious activity, possibly indicating a threat actor's attempt to alter security controls to bypass network security measures. Investigate any modifications or deletions carried out by unfamiliar users, as these are more likely to indicate malicious activity. If certain activities are causing false positives because they are known and legitimate behaviors within your environment, you may consider exempting them from monitoring under this criterion to enhance the accuracy of your detection efforts. This proactive approach helps in maintaining the integrity and security of your network infrastructure by promptly identifying and responding to unauthorized changes in application security groups.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "application security group is modified or deleted.",
      "answer": "In order to identify when an application security group is modified or deleted, you should monitor Azure activity logs for signs of unauthorized or suspicious modifications or deletions of application security groups. Specifically, look for operations named MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/WRITE and MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/DELETE. These operations indicate that an application security group has either been modified or deleted. It\u2019s crucial to assess the context of these actions. Normally, system administrators perform these operations as part of legitimate maintenance or configuration tasks. Therefore, it's important to verify the user identity, user agent, and hostname involved in these operations to ensure they align with expected activities within your environment. Unauthorized modifications or deletions can serve as indicators of malicious activity, possibly indicating a threat actor's attempt to alter security controls to bypass network security measures. Investigate any modifications or deletions carried out by unfamiliar users, as these are more likely to indicate malicious activity. If certain activities are causing false positives because they are known and legitimate behaviors within your environment, you may consider exempting them from monitoring under this criterion to enhance the accuracy of your detection efforts. This proactive approach helps in maintaining the integrity and security of your network infrastructure by promptly identifying and responding to unauthorized changes in application security groups."
    }
  },
  {
    "instruction": "Can you explain how to detect: Pandemic Windows Implant",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Pandemic Windows Implant, you should: Monitor registry events on Windows operating systems for any activities that involve the specific registry path '\\SYSTEM\\CurrentControlSet\\services\\null\\Instance'. This approach relies on recognizing attempts to interact with a registry key often associated with the Pandemic implant, which might indicate the presence of this malicious software on the system. The detection process includes gathering additional context such as the EventID, CommandLine, ParentCommandLine, Image, User, and the TargetObject involved in the operation. While it's critical to watch for such activities, be aware that not all modifications or interactions with this registry key are malicious, though they are considered highly suspicious hence classified at a critical level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Pandemic Windows Implant",
      "answer": "In order to detect Pandemic Windows Implant, you should: Monitor registry events on Windows operating systems for any activities that involve the specific registry path '\\SYSTEM\\CurrentControlSet\\services\\null\\Instance'. This approach relies on recognizing attempts to interact with a registry key often associated with the Pandemic implant, which might indicate the presence of this malicious software on the system. The detection process includes gathering additional context such as the EventID, CommandLine, ParentCommandLine, Image, User, and the TargetObject involved in the operation. While it's critical to watch for such activities, be aware that not all modifications or interactions with this registry key are malicious, though they are considered highly suspicious hence classified at a critical level."
    }
  },
  {
    "instruction": "Please help me detect the following: important or interesting Windows services that got terminated for whatever reason",
    "context": "",
    "output": "Sure!\nIn order to detect important or interesting Windows services that got terminated for whatever reason, you should focus on monitoring the Windows System log. Specifically, you should look for logs from the Service Control Manager with an EventID of 7023, which signifies that a service has terminated with a particular error. It's vital to pay attention to the termination of critical security-related services. These include services related to antivirus programs, firewalls, Application Guard, BitLocker Drive Encryption, Encrypting File System (EFS), Microsoft Defender, Threat Protection, and the Windows Event Log.\n\nFor more precise detection, consider both the Display Names of services and their binary values. Display Names of interest include those containing phrases such as 'Antivirus', 'Firewall', 'Application Guard', 'BitLocker Drive Encryption Service', 'Encrypting File System', 'Microsoft Defender', 'Threat Protection', and 'Windows Event Log'. The binary values represent the hexadecimal encoding of service names and are unique identifiers for services like Microsoft Defender Antivirus Service, Windows Defender Firewall, Windows Defender Advanced Threat Protection Service, the Encrypting File System, and the BitLocker Drive Encryption Service.\n\nIt's crucial to monitor these service terminations as they are integral to the security and operational integrity of Windows systems. Detecting the unexpected termination of these services can be an early indicator of malicious activity, helping you respond to potential security breaches more swiftly. Keep in mind that while such terminations could indicate malicious activities, rare false positives can occur, as services might stop for benign reasons. Therefore, detections should be investigated to confirm their nature, ensuring an appropriate response to potential security incidents.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "important or interesting Windows services that got terminated for whatever reason",
      "answer": "In order to detect important or interesting Windows services that got terminated for whatever reason, you should focus on monitoring the Windows System log. Specifically, you should look for logs from the Service Control Manager with an EventID of 7023, which signifies that a service has terminated with a particular error. It's vital to pay attention to the termination of critical security-related services. These include services related to antivirus programs, firewalls, Application Guard, BitLocker Drive Encryption, Encrypting File System (EFS), Microsoft Defender, Threat Protection, and the Windows Event Log.\n\nFor more precise detection, consider both the Display Names of services and their binary values. Display Names of interest include those containing phrases such as 'Antivirus', 'Firewall', 'Application Guard', 'BitLocker Drive Encryption Service', 'Encrypting File System', 'Microsoft Defender', 'Threat Protection', and 'Windows Event Log'. The binary values represent the hexadecimal encoding of service names and are unique identifiers for services like Microsoft Defender Antivirus Service, Windows Defender Firewall, Windows Defender Advanced Threat Protection Service, the Encrypting File System, and the BitLocker Drive Encryption Service.\n\nIt's crucial to monitor these service terminations as they are integral to the security and operational integrity of Windows systems. Detecting the unexpected termination of these services can be an early indicator of malicious activity, helping you respond to potential security breaches more swiftly. Keep in mind that while such terminations could indicate malicious activities, rare false positives can occur, as services might stop for benign reasons. Therefore, detections should be investigated to confirm their nature, ensuring an appropriate response to potential security incidents."
    }
  },
  {
    "instruction": "Please help me detect the following: non-system users failing to get a handle of the SCM database.",
    "context": "",
    "output": "Sure!\nIn order to detect non-system users failing to get a handle of the SCM database, you should monitor Windows security event logs for event ID 4656 with specific attributes. This occurs when an attempt is made to open the Service Control Manager (SCM) database, indicated by the Object Type 'SC_MANAGER OBJECT' and the Object Name 'ServicesActive'. It\u2019s crucial to note the AccessMask value '0xf003f', as this suggests an operation trying to acquire a handle with comprehensive permissions, which could be a potential security concern. However, to reduce false positives and focus on significant events, this detection ignores entries related to the well-known system account, identified by the SubjectLogonId '0x3e4'. While the detection mechanism has a medium level of reliability, it's acknowledged that in some environments, this activity might trigger numerous alerts across many hosts. The detection of such events is pivotal for identifying unauthorized access attempts regarding the management of service configurations on Windows systems, potentially signaling malicious activities aligned with techniques observed in various attack scenarios.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "non-system users failing to get a handle of the SCM database.",
      "answer": "In order to detect non-system users failing to get a handle of the SCM database, you should monitor Windows security event logs for event ID 4656 with specific attributes. This occurs when an attempt is made to open the Service Control Manager (SCM) database, indicated by the Object Type 'SC_MANAGER OBJECT' and the Object Name 'ServicesActive'. It\u2019s crucial to note the AccessMask value '0xf003f', as this suggests an operation trying to acquire a handle with comprehensive permissions, which could be a potential security concern. However, to reduce false positives and focus on significant events, this detection ignores entries related to the well-known system account, identified by the SubjectLogonId '0x3e4'. While the detection mechanism has a medium level of reliability, it's acknowledged that in some environments, this activity might trigger numerous alerts across many hosts. The detection of such events is pivotal for identifying unauthorized access attempts regarding the management of service configurations on Windows systems, potentially signaling malicious activities aligned with techniques observed in various attack scenarios."
    }
  },
  {
    "instruction": "How can I detect: explorer.exe sub process of the RazerInstaller software which can be invoked from the installer to select a different installation folder but can also be exploited to escalate privileges to LOCAL SYSTEM",
    "context": "",
    "output": "In order to detect a explorer.exe subprocess of the RazerInstaller software which can be invoked from the installer to select a different installation folder but can also be exploited to escalate privileges to LOCAL SYSTEM, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, look for any process that has 'RazerInstaller.exe' as its parent image and operates at the 'System' integrity level. It's important to exclude any processes that start with 'C:\\Windows\\Installer\\Razer\\Installer\\' to avoid false positives, which might occur if a user is legitimately choosing a different installation folder. This detection is critical as it's associated with potential privilege escalation tactics, where threat actors might exploit the legitimate RazerInstaller process to gain system-level access.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "explorer.exe sub process of the RazerInstaller software which can be invoked from the installer to select a different installation folder but can also be exploited to escalate privileges to LOCAL SYSTEM",
      "answer": "In order to detect a explorer.exe subprocess of the RazerInstaller software which can be invoked from the installer to select a different installation folder but can also be exploited to escalate privileges to LOCAL SYSTEM, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, look for any process that has 'RazerInstaller.exe' as its parent image and operates at the 'System' integrity level. It's important to exclude any processes that start with 'C:\\Windows\\Installer\\Razer\\Installer\\' to avoid false positives, which might occur if a user is legitimately choosing a different installation folder. This detection is critical as it's associated with potential privilege escalation tactics, where threat actors might exploit the legitimate RazerInstaller process to gain system-level access."
    }
  },
  {
    "instruction": "Please help me detect the following: Dependabot performs a scan to detect insecure dependencies, and sends Dependabot alerts.\nwhen an organization owner disables Dependabot alerts private repositories or Dependabot security updates for all repositories.\n",
    "context": "",
    "output": "Sure!\nIn order to detect when an organization owner disables Dependabot alerts for private repositories or Dependabot security updates for all repositories, you should monitor GitHub audit logs for specific actions. These actions include the disabling of Dependabot alerts, Dependabot alerts for new repositories, Dependabot security updates, Dependabot security updates for new repositories, and repository vulnerability alerts. Focus on capturing details such as the action taken, the actor (user who performed the action), the organization affected, the actor's country code, the transport protocol name used during the action, and the specific repository involved. Additionally, include whether the repository was public and the time of the action. It is important to consider approved changes by the organization owner as potential false positives; thus, verify whether the actor is authorized to make the changes. The actions to watch, which are crucial for identifying potential security risks, indicate an attempt to weaken the security posture of repositories by disabling features designed to alert on vulnerable dependencies. Understanding these actions can provide insights into tactics that attackers might use to bypass security measures or to prepare for further malicious activity within GitHub-hosted repositories.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Dependabot performs a scan to detect insecure dependencies, and sends Dependabot alerts.\nwhen an organization owner disables Dependabot alerts private repositories or Dependabot security updates for all repositories.\n",
      "answer": "In order to detect when an organization owner disables Dependabot alerts for private repositories or Dependabot security updates for all repositories, you should monitor GitHub audit logs for specific actions. These actions include the disabling of Dependabot alerts, Dependabot alerts for new repositories, Dependabot security updates, Dependabot security updates for new repositories, and repository vulnerability alerts. Focus on capturing details such as the action taken, the actor (user who performed the action), the organization affected, the actor's country code, the transport protocol name used during the action, and the specific repository involved. Additionally, include whether the repository was public and the time of the action. It is important to consider approved changes by the organization owner as potential false positives; thus, verify whether the actor is authorized to make the changes. The actions to watch, which are crucial for identifying potential security risks, indicate an attempt to weaken the security posture of repositories by disabling features designed to alert on vulnerable dependencies. Understanding these actions can provide insights into tactics that attackers might use to bypass security measures or to prepare for further malicious activity within GitHub-hosted repositories."
    }
  },
  {
    "instruction": "How to detect: an exploitation attempt of SystemNightmare in order to obtain a shell as LOCAL_SYSTEM",
    "context": "",
    "output": "In order to detect an exploitation attempt of SystemNightmare in order to obtain a shell as LOCAL_SYSTEM, you should: Monitor process creation logs in Windows for any command line invocation that includes the terms 'printnightmare.gentilkiwi.com', ' /user:gentilguest ', or 'Kiwi Legit Printer'. These specific strings indicate an attempt to exploit the SystemNightmare vulnerability, which can potentially allow an attacker to gain LOCAL_SYSTEM privileges. Due to the critical nature of this activity, any detection associated with these command line arguments should be investigated promptly to mitigate the risk of an attacker exploiting this vulnerability to obtain elevated privileges.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an exploitation attempt of SystemNightmare in order to obtain a shell as LOCAL_SYSTEM",
      "answer": "In order to detect an exploitation attempt of SystemNightmare in order to obtain a shell as LOCAL_SYSTEM, you should: Monitor process creation logs in Windows for any command line invocation that includes the terms 'printnightmare.gentilkiwi.com', ' /user:gentilguest ', or 'Kiwi Legit Printer'. These specific strings indicate an attempt to exploit the SystemNightmare vulnerability, which can potentially allow an attacker to gain LOCAL_SYSTEM privileges. Due to the critical nature of this activity, any detection associated with these command line arguments should be investigated promptly to mitigate the risk of an attacker exploiting this vulnerability to obtain elevated privileges."
    }
  },
  {
    "instruction": "Can you explain how to detect: Execute C# code with the Build Provider and proper folder structure in place.",
    "context": "",
    "output": "Certainly!\n\nIn order to execute C# code with the Build Provider and proper folder structure in place, you should monitor the creation of processes on Windows systems, specifically looking for instances where the `aspnet_compiler.exe` executable is being run from any subdirectory within the `C:\\Windows\\Microsoft.NET\\Framework` directory. This activity is crucial to detect because it can indicate an attacker's attempt to compile and execute C# code using the ASP.NET Compilation Tool, which is a legitimate tool but may be misused in this context. Identifying this pattern of behavior is essential in defending against threats that utilize legitimate system tools for malicious purposes. Monitor for such occurrences diligently, as false positives are considered to be unknown, indicating that while this detection rule is valuable, one must also be aware of potential legitimate uses of the `aspnet_compiler.exe` that may trigger alerts. The threat detection level for this activity is classified as medium, reflecting its significance in the context of cybersecurity defense efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Execute C# code with the Build Provider and proper folder structure in place.",
      "answer": "In order to execute C# code with the Build Provider and proper folder structure in place, you should monitor the creation of processes on Windows systems, specifically looking for instances where the `aspnet_compiler.exe` executable is being run from any subdirectory within the `C:\\Windows\\Microsoft.NET\\Framework` directory. This activity is crucial to detect because it can indicate an attacker's attempt to compile and execute C# code using the ASP.NET Compilation Tool, which is a legitimate tool but may be misused in this context. Identifying this pattern of behavior is essential in defending against threats that utilize legitimate system tools for malicious purposes. Monitor for such occurrences diligently, as false positives are considered to be unknown, indicating that while this detection rule is valuable, one must also be aware of potential legitimate uses of the `aspnet_compiler.exe` that may trigger alerts. The threat detection level for this activity is classified as medium, reflecting its significance in the context of cybersecurity defense efforts."
    }
  },
  {
    "instruction": "Can you explain how to detect: specific broken command that was used by Goofy-Guineapig as described by the NCSC report.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a specific broken command that was used by Goofy-Guineapig as described by the NCSC report, you should: focus on monitoring process creation logs on Windows systems. Specifically, be alert for instances where the command line contains the particular sequence 'choice /t %d /d y /n >nul'. The occurrence of this command is a strong indicator of the described malicious activity, with false positives being unlikely. The significance of detecting this command is considered high due to its association with specific attack tactics and techniques outlined by the NCSC in their report on Goofy-Guineapig's operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific broken command that was used by Goofy-Guineapig as described by the NCSC report.",
      "answer": "In order to detect a specific broken command that was used by Goofy-Guineapig as described by the NCSC report, you should: focus on monitoring process creation logs on Windows systems. Specifically, be alert for instances where the command line contains the particular sequence 'choice /t %d /d y /n >nul'. The occurrence of this command is a strong indicator of the described malicious activity, with false positives being unlikely. The significance of detecting this command is considered high due to its association with specific attack tactics and techniques outlined by the NCSC in their report on Goofy-Guineapig's operations."
    }
  },
  {
    "instruction": "Please help me detect the following: potential remote threat creation with certain characteristics which are typical for Cobalt Strike beacons",
    "context": "",
    "output": "Sure!\nIn order to detect a potential remote threat creation with certain characteristics which are typical for Cobalt Strike beacons, you should: monitor Windows logs specifically for events categorized under creating remote threads. Focus on instances where the starting address of these threads ends with either '0B80', '0C7C', or '0C88'. These specific patterns in the starting address are indicative of Cobalt Strike beacon activities. It's important to keep in mind that while this method is highly indicative of malicious activity, there might be unknown situations that could trigger false positives. Hence, the level of confidence in this detection mechanism is considered high.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential remote threat creation with certain characteristics which are typical for Cobalt Strike beacons",
      "answer": "In order to detect a potential remote threat creation with certain characteristics which are typical for Cobalt Strike beacons, you should: monitor Windows logs specifically for events categorized under creating remote threads. Focus on instances where the starting address of these threads ends with either '0B80', '0C7C', or '0C88'. These specific patterns in the starting address are indicative of Cobalt Strike beacon activities. It's important to keep in mind that while this method is highly indicative of malicious activity, there might be unknown situations that could trigger false positives. Hence, the level of confidence in this detection mechanism is considered high."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Initial execution of malicious document calls wmic to execute the file with regsvr32",
    "context": "",
    "output": "In order to detect initial execution of malicious documents that call WMIC to execute the file with regsvr32, you should monitor process creation logs on Windows systems for specific patterns. Look for any instances where the process image ends with '\\wbem\\WMIC.exe' or where the original file name is identified as 'wmic.exe'. These are indications that the Windows Management Instrumentation Command-line (WMIC) tool is being used, which is not typical behavior for standard document operations.\n\nMoreover, it is critical to inspect the parent process that initiated the WMIC call. Specifically, scrutinize process creations where the parent process image ends with '\\winword.exe', '\\excel.exe', or '\\powerpnt.exe'. This scenario flags an uncommon sequence where office applications, which are typically used for legitimate purposes, are potentially harnessed to execute malicious scripts or commands via WMIC, a tool often exploited for malicious purposes within the context of executing a file with regsvr32.\n\nGiven the intricate ways attackers manipulate legitimate tools for malicious purposes, these detection strategies are paramount. The specified log source, detection options, and the association of these actions with tactics and techniques such as execution through office applications leveraged in the initial stages of attack, form the basis of a vigilant defense strategy. Notably, the potential for false positives is acknowledged due to the non-malicious use of similar command patterns, hence the importance of context and further investigation upon detection. This approach helps in maintaining a robust security posture by preempting malicious actions that exploit the WMIC utility within Windows environments for initial execution stages of an attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Initial execution of malicious document calls wmic to execute the file with regsvr32",
      "answer": "In order to detect initial execution of malicious documents that call WMIC to execute the file with regsvr32, you should monitor process creation logs on Windows systems for specific patterns. Look for any instances where the process image ends with '\\wbem\\WMIC.exe' or where the original file name is identified as 'wmic.exe'. These are indications that the Windows Management Instrumentation Command-line (WMIC) tool is being used, which is not typical behavior for standard document operations.\n\nMoreover, it is critical to inspect the parent process that initiated the WMIC call. Specifically, scrutinize process creations where the parent process image ends with '\\winword.exe', '\\excel.exe', or '\\powerpnt.exe'. This scenario flags an uncommon sequence where office applications, which are typically used for legitimate purposes, are potentially harnessed to execute malicious scripts or commands via WMIC, a tool often exploited for malicious purposes within the context of executing a file with regsvr32.\n\nGiven the intricate ways attackers manipulate legitimate tools for malicious purposes, these detection strategies are paramount. The specified log source, detection options, and the association of these actions with tactics and techniques such as execution through office applications leveraged in the initial stages of attack, form the basis of a vigilant defense strategy. Notably, the potential for false positives is acknowledged due to the non-malicious use of similar command patterns, hence the importance of context and further investigation upon detection. This approach helps in maintaining a robust security posture by preempting malicious actions that exploit the WMIC utility within Windows environments for initial execution stages of an attack."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of \"getcap\" binary. This is often used during recon activity to determine potential binaries that can be abused as GTFOBins or other.",
    "context": "",
    "output": "Sure!\nIn order to detect usage of \"getcap\" binary, which is often used during recon activity to determine potential binaries that can be abused as GTFOBins or others, you should: monitor process creation events on Linux systems for the execution of the \"getcap\" binary, particularly focusing on command lines that include either \" /r \" or \" -r \". This involves checking the end of the image path for '/getcap' to accurately identify the use of this specific binary. Understanding that there might be unknown cases that could be falsely identified as suspicious, this detection strategy is set with a low level of confidence. Nonetheless, it remains a crucial step in identifying reconnaissance activities where attackers might be searching for exploitable binaries to leverage in their attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"getcap\" binary. This is often used during recon activity to determine potential binaries that can be abused as GTFOBins or other.",
      "answer": "In order to detect usage of \"getcap\" binary, which is often used during recon activity to determine potential binaries that can be abused as GTFOBins or others, you should: monitor process creation events on Linux systems for the execution of the \"getcap\" binary, particularly focusing on command lines that include either \" /r \" or \" -r \". This involves checking the end of the image path for '/getcap' to accurately identify the use of this specific binary. Understanding that there might be unknown cases that could be falsely identified as suspicious, this detection strategy is set with a low level of confidence. Nonetheless, it remains a crucial step in identifying reconnaissance activities where attackers might be searching for exploitable binaries to leverage in their attacks."
    }
  },
  {
    "instruction": "How to detect: See what commands are being input into the device by other people, full credentials can be in the history",
    "context": "",
    "output": "In order to see what commands are being input into the device by other people, full credentials can be in the history, you should monitor for specific activities that involve examining the command history on devices. Detection focuses on the utilization of AAA (Authentication, Authorization, and Accounting) services within Cisco products. Specifically, one should look out for instances where commands such as 'show history', 'show history all', or 'show logging' are executed. These commands are typically used to view the command history or the logging history on a device, which can include sensitive information such as command inputs or possibly even credentials if they were typed as part of a command.\n\nThe primary fields you'll be concerned with in analyzing and detecting this activity include the command set executed (CmdSet). It is important to note that in environments where administrators commonly do not run these commands, especially if remote logging is configured to centralize log data, executing these commands can be considered unusual and thus a potential indicator of unauthorized access or reconnaissance activities.\n\nGiven the nature of these activities, they are associated with tactics and techniques that include but are not limited to reconnaissance and collection, as they represent an attempt to gather information that could be leveraged for further access or exploitation within the targeted environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "See what commands are being input into the device by other people, full credentials can be in the history",
      "answer": "In order to see what commands are being input into the device by other people, full credentials can be in the history, you should monitor for specific activities that involve examining the command history on devices. Detection focuses on the utilization of AAA (Authentication, Authorization, and Accounting) services within Cisco products. Specifically, one should look out for instances where commands such as 'show history', 'show history all', or 'show logging' are executed. These commands are typically used to view the command history or the logging history on a device, which can include sensitive information such as command inputs or possibly even credentials if they were typed as part of a command.\n\nThe primary fields you'll be concerned with in analyzing and detecting this activity include the command set executed (CmdSet). It is important to note that in environments where administrators commonly do not run these commands, especially if remote logging is configured to centralize log data, executing these commands can be considered unusual and thus a potential indicator of unauthorized access or reconnaissance activities.\n\nGiven the nature of these activities, they are associated with tactics and techniques that include but are not limited to reconnaissance and collection, as they represent an attempt to gather information that could be leveraged for further access or exploitation within the targeted environment."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of files with the \".one\"/\".onepkg\" extension in suspicious or uncommon locations. This could be a sign of attackers abusing OneNote attachments",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation of files with the \".one\"/\".onepkg\" extension in suspicious or uncommon locations, which could be a sign of attackers abusing OneNote attachments, you should: Monitor file event logs on Windows for the creation of files that have the extensions \".one\" or \".onepkg\". Specifically, watch for these files being created in paths that are not typical for standard operations, including \"\\AppData\\Local\\Temp\\\", \"\\Users\\Public\\\", \"\\Windows\\Temp\\\", and \"C:\\Temp\\\". The detection of such activity at these paths can indicate a potential misuse of OneNote files, which might be leveraged by attackers. Be aware that there can be legitimate reasons for these types of files to be located in these directories, so consider this when investigating potential incidents. The severity of this rule is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of files with the \".one\"/\".onepkg\" extension in suspicious or uncommon locations. This could be a sign of attackers abusing OneNote attachments",
      "answer": "In order to detect the creation of files with the \".one\"/\".onepkg\" extension in suspicious or uncommon locations, which could be a sign of attackers abusing OneNote attachments, you should: Monitor file event logs on Windows for the creation of files that have the extensions \".one\" or \".onepkg\". Specifically, watch for these files being created in paths that are not typical for standard operations, including \"\\AppData\\Local\\Temp\\\", \"\\Users\\Public\\\", \"\\Windows\\Temp\\\", and \"C:\\Temp\\\". The detection of such activity at these paths can indicate a potential misuse of OneNote files, which might be leveraged by attackers. Be aware that there can be legitimate reasons for these types of files to be located in these directories, so consider this when investigating potential incidents. The severity of this rule is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of a process executing as user called \"ANONYMOUS\" seen used by the \"MileStone2016\" variant of COLDSTEEL",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of a process executing as user called \"ANONYMOUS\" seen used by the \"MileStone2016\" variant of COLDSTEEL, you should: focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where the parent image path of the process being created includes either '\\Windows\\System32\\' or '\\AppData\\'. Additionally, the process should be executing under the user account named \"ANONYMOUS\". It's important to pay close attention to such activities as they are indicative of suspicious behavior, often associated with malicious operations like those executed by the \"MileStone2016\" variant of the COLDSTEEL malware. Be aware that while monitoring these criteria, there may be instances that are not related to malicious activity, but the potential security risk is considered high due to the nature of the behaviors being observed.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a process executing as user called \"ANONYMOUS\" seen used by the \"MileStone2016\" variant of COLDSTEEL",
      "answer": "In order to detect the creation of a process executing as user called \"ANONYMOUS\" seen used by the \"MileStone2016\" variant of COLDSTEEL, you should: focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where the parent image path of the process being created includes either '\\Windows\\System32\\' or '\\AppData\\'. Additionally, the process should be executing under the user account named \"ANONYMOUS\". It's important to pay close attention to such activities as they are indicative of suspicious behavior, often associated with malicious operations like those executed by the \"MileStone2016\" variant of the COLDSTEEL malware. Be aware that while monitoring these criteria, there may be instances that are not related to malicious activity, but the potential security risk is considered high due to the nature of the behaviors being observed."
    }
  },
  {
    "instruction": "Please help me detect the following: when an user creates or invokes a lambda function.",
    "context": "",
    "output": "Sure!\nIn order to detect when a user creates or invokes a lambda function, you should monitor the AWS CloudTrail logs for specific activities. Focus on identifying two main types of events: 'CreateFunction' and 'Invoke'. The first event type 'CreateFunction' indicates the creation of a new Lambda function, while the second type 'Invoke' represents the invocation of an existing Lambda function. Both activities are flagged when they originate from the Lambda service, identified by the event source 'lambda.amazonaws.com'.\n\nWhen analyzing these events, it\u2019s important to be aware of potential false positives. In many cases, these events may be initiated by system administrators as part of legitimate activities. Therefore, it\u2019s crucial to verify the user identity, user agent, and hostname to ensure that these actions should indeed be occurring within your environment. If certain activities are known to be benign and are consistently flagged, it might be beneficial to adjust the monitoring criteria to avoid these known false positives.\n\nThis monitoring and detection process is associated with identifying potentially malicious activity within the AWS environment, specifically focusing on unauthorized or unexpected creation and invocation of Lambda functions. The detection level for this activity is generally considered low, indicating it could be common and not always indicative of malicious behavior but should nevertheless be investigated to ensure the security of your AWS environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an user creates or invokes a lambda function.",
      "answer": "In order to detect when a user creates or invokes a lambda function, you should monitor the AWS CloudTrail logs for specific activities. Focus on identifying two main types of events: 'CreateFunction' and 'Invoke'. The first event type 'CreateFunction' indicates the creation of a new Lambda function, while the second type 'Invoke' represents the invocation of an existing Lambda function. Both activities are flagged when they originate from the Lambda service, identified by the event source 'lambda.amazonaws.com'.\n\nWhen analyzing these events, it\u2019s important to be aware of potential false positives. In many cases, these events may be initiated by system administrators as part of legitimate activities. Therefore, it\u2019s crucial to verify the user identity, user agent, and hostname to ensure that these actions should indeed be occurring within your environment. If certain activities are known to be benign and are consistently flagged, it might be beneficial to adjust the monitoring criteria to avoid these known false positives.\n\nThis monitoring and detection process is associated with identifying potentially malicious activity within the AWS environment, specifically focusing on unauthorized or unexpected creation and invocation of Lambda functions. The detection level for this activity is generally considered low, indicating it could be common and not always indicative of malicious behavior but should nevertheless be investigated to ensure the security of your AWS environment."
    }
  },
  {
    "instruction": "How can I detect: remote task creation via at.exe or API interacting with ATSVC namedpipe",
    "context": "",
    "output": "In order to detect remote task creation via at.exe or API interacting with ATSVC namedpipe, you should: Monitor SMB (Server Message Block) file activities for specific patterns that indicate misuse of the SMB service for remote task management. Specifically, pay attention to file activities within the SMB protocol that involve access to the \"IPC$\" share, which is a special share that Windows computers use for inter-process communication. Additionally, look for any interaction with a file or named pipe called \"atsvc\", as this is a common tactic used by attackers to remotely create tasks on a target machine, typically utilizing the \"at.exe\" command or directly interacting with the ATSVC named pipe through an API. As such activities could potentially represent malicious behavior, it's important to log and analyze these interactions. Note that this monitoring is configured with a medium alert level due to the potential for false positives, as the exact circumstances under which these patterns may be benign are currently unknown and therefore any detection should be investigated to confirm the nature of the activity. This detection process is crucial for defending against tactics and techniques that involve Execution through remote task creation, specifically tying back to MITRE ATT&CK framework's documentation on these types of attack methodologies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote task creation via at.exe or API interacting with ATSVC namedpipe",
      "answer": "In order to detect remote task creation via at.exe or API interacting with ATSVC namedpipe, you should: Monitor SMB (Server Message Block) file activities for specific patterns that indicate misuse of the SMB service for remote task management. Specifically, pay attention to file activities within the SMB protocol that involve access to the \"IPC$\" share, which is a special share that Windows computers use for inter-process communication. Additionally, look for any interaction with a file or named pipe called \"atsvc\", as this is a common tactic used by attackers to remotely create tasks on a target machine, typically utilizing the \"at.exe\" command or directly interacting with the ATSVC named pipe through an API. As such activities could potentially represent malicious behavior, it's important to log and analyze these interactions. Note that this monitoring is configured with a medium alert level due to the potential for false positives, as the exact circumstances under which these patterns may be benign are currently unknown and therefore any detection should be investigated to confirm the nature of the activity. This detection process is crucial for defending against tactics and techniques that involve Execution through remote task creation, specifically tying back to MITRE ATT&CK framework's documentation on these types of attack methodologies."
    }
  },
  {
    "instruction": "How can I detect: possible process memory dump that uses the white-listed filename like TrolleyExpress.exe as a way to dump the lsass process memory without Microsoft Defender interference",
    "context": "",
    "output": "In order to detect a possible process memory dump that uses the white-listed filename like TrolleyExpress.exe as a way to dump the lsass process memory without Microsoft Defender interference, you should: Monitor process access logs on Windows systems for attempts to access the Local Security Authority Subsystem Service (lsass.exe) file. Specifically, look for access attempts where the accessing process is one of several known applications that could be misused for memory dumping purposes, including TrolleyExpress.exe (Citrix), ProcessDump.exe (Cisco Jabber), and dump64.exe (Visual Studio). Be alert for access requests that have specific 'GrantedAccess' values ranging from '10' to 'FA' in hexadecimal (including '0x14C2'), as these indicate potential unauthorized memory dump attempts. Given the specificity of these applications accessing lsass.exe with such permissions and the known malicious use of these access codes, such detections are unlikely to be false positives and should be treated with high urgency.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible process memory dump that uses the white-listed filename like TrolleyExpress.exe as a way to dump the lsass process memory without Microsoft Defender interference",
      "answer": "In order to detect a possible process memory dump that uses the white-listed filename like TrolleyExpress.exe as a way to dump the lsass process memory without Microsoft Defender interference, you should: Monitor process access logs on Windows systems for attempts to access the Local Security Authority Subsystem Service (lsass.exe) file. Specifically, look for access attempts where the accessing process is one of several known applications that could be misused for memory dumping purposes, including TrolleyExpress.exe (Citrix), ProcessDump.exe (Cisco Jabber), and dump64.exe (Visual Studio). Be alert for access requests that have specific 'GrantedAccess' values ranging from '10' to 'FA' in hexadecimal (including '0x14C2'), as these indicate potential unauthorized memory dump attempts. Given the specificity of these applications accessing lsass.exe with such permissions and the known malicious use of these access codes, such detections are unlikely to be false positives and should be treated with high urgency."
    }
  },
  {
    "instruction": "Explain how should I detect the following: an executable in the Windows folder accessing suspicious domains",
    "context": "",
    "output": "In order to detect an executable in the Windows folder accessing suspicious domains, you should monitor network connections originating from Windows-based systems. Specifically, observe for any executables initiating connections that are located within common Windows directories such as C:\\PerfLogs, C:\\Temp\\, C:\\Users\\Public\\, and C:\\Windows\\ as well as any instances where the executable path includes the subdirectory \\AppData\\Temp\\. In addition to the paths, it's crucial to monitor the destinations of these connections. The connections of interest are those being made to a specific set of external domains, including .ghostbin.co, .githubusercontent.com, .hastebin.com, .paste.ee, .pastebin.com, anonfiles.com, cdn.discordapp.com, ddns.net, dl.dropboxusercontent.com, mediafire.com, mega.nz, paste.ee, pastebin.pl, pastetext.net, privatlab.com, privatlab.net, send.exploit.in, sendspace.com, transfer.sh, and ufile.io. These domains are commonly associated with activities such as data exfiltration, command and control (C2) communication, and hosting of malicious payloads.\n\nWhen executing this monitoring, consider connections initiated from these directories to the specified domains as potentially malicious, but also be aware that false positives may occur. This vigilance is critical for identifying potential security incidents related to a variety of malicious activities, including but not limited to data theft, beaconing to C2 servers, and downloading of further payloads. By tracking attempts to communicate with these known suspicious or malicious domains, an organization can effectively detect and respond to potential threats in their early stages, enhancing their overall security posture.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an executable in the Windows folder accessing suspicious domains",
      "answer": "In order to detect an executable in the Windows folder accessing suspicious domains, you should monitor network connections originating from Windows-based systems. Specifically, observe for any executables initiating connections that are located within common Windows directories such as C:\\PerfLogs, C:\\Temp\\, C:\\Users\\Public\\, and C:\\Windows\\ as well as any instances where the executable path includes the subdirectory \\AppData\\Temp\\. In addition to the paths, it's crucial to monitor the destinations of these connections. The connections of interest are those being made to a specific set of external domains, including .ghostbin.co, .githubusercontent.com, .hastebin.com, .paste.ee, .pastebin.com, anonfiles.com, cdn.discordapp.com, ddns.net, dl.dropboxusercontent.com, mediafire.com, mega.nz, paste.ee, pastebin.pl, pastetext.net, privatlab.com, privatlab.net, send.exploit.in, sendspace.com, transfer.sh, and ufile.io. These domains are commonly associated with activities such as data exfiltration, command and control (C2) communication, and hosting of malicious payloads.\n\nWhen executing this monitoring, consider connections initiated from these directories to the specified domains as potentially malicious, but also be aware that false positives may occur. This vigilance is critical for identifying potential security incidents related to a variety of malicious activities, including but not limited to data theft, beaconing to C2 servers, and downloading of further payloads. By tracking attempts to communicate with these known suspicious or malicious domains, an organization can effectively detect and respond to potential threats in their early stages, enhancing their overall security posture."
    }
  },
  {
    "instruction": "Explain how should I detect the following: PoC tool used to exploit LPE vulnerability CVE-2021-41379",
    "context": "",
    "output": "In order to detect PoC tool used to exploit LPE vulnerability CVE-2021-41379, you should: Monitor Windows application logs for specific event patterns that indicate the exploitation attempt. Focus on logs generated by the MsiInstaller with the EventID 1033, which could signify that an MSI package is being installed or modified on the system. Specifically, look for the presence of the string 'test pkg' within the data field of these events, as it suggests the potential use of a known Proof of Concept (PoC) tool associated with exploiting this vulnerability. Be aware that legitimate MSI packages which happen to include 'test pkg' in their names can generate false positives. Evaluate these events with a high level of scrutiny due to the severe implications of a successful exploit of the CVE-2021-41379 vulnerability. This monitoring strategy is pivotal in identifying and mitigating attempts to leverage this Local Privilege Escalation (LPE) vulnerability, thus enhancing the security posture against such targeted attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PoC tool used to exploit LPE vulnerability CVE-2021-41379",
      "answer": "In order to detect PoC tool used to exploit LPE vulnerability CVE-2021-41379, you should: Monitor Windows application logs for specific event patterns that indicate the exploitation attempt. Focus on logs generated by the MsiInstaller with the EventID 1033, which could signify that an MSI package is being installed or modified on the system. Specifically, look for the presence of the string 'test pkg' within the data field of these events, as it suggests the potential use of a known Proof of Concept (PoC) tool associated with exploiting this vulnerability. Be aware that legitimate MSI packages which happen to include 'test pkg' in their names can generate false positives. Evaluate these events with a high level of scrutiny due to the severe implications of a successful exploit of the CVE-2021-41379 vulnerability. This monitoring strategy is pivotal in identifying and mitigating attempts to leverage this Local Privilege Escalation (LPE) vulnerability, thus enhancing the security posture against such targeted attacks."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Detect use of X509Enrollment",
    "context": "",
    "output": "In order to detect use of X509Enrollment, you should monitor the creation of processes on Windows systems for specific command-line arguments that indicate the use of X509Enrollment for potentially malicious purposes. Focus on detecting the presence of either 'X509Enrollment.CBinaryConverter' or the identifier '884e2002-217d-11da-b2a4-000e7bbb2b09' within the command line arguments. These indicators are associated with actions that may utilize the X509Enrollment interface, a component that can be leveraged in various certificate-related operations, potentially including the generation or manipulation of certificates in a manner not intended by system administrators or security policies. It is important to note that while detecting these command-line arguments can point towards malicious activities, there might be legitimate administrative scripts that use this interface for valid reasons. Therefore, any detection should be investigated to distinguish between benign and malicious use, keeping in mind that the detection level is classified as medium due to the possibility of legitimate use cases. The focus on the Windows process creation log source enhances the ability to catch such activities early in their operation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect use of X509Enrollment",
      "answer": "In order to detect use of X509Enrollment, you should monitor the creation of processes on Windows systems for specific command-line arguments that indicate the use of X509Enrollment for potentially malicious purposes. Focus on detecting the presence of either 'X509Enrollment.CBinaryConverter' or the identifier '884e2002-217d-11da-b2a4-000e7bbb2b09' within the command line arguments. These indicators are associated with actions that may utilize the X509Enrollment interface, a component that can be leveraged in various certificate-related operations, potentially including the generation or manipulation of certificates in a manner not intended by system administrators or security policies. It is important to note that while detecting these command-line arguments can point towards malicious activities, there might be legitimate administrative scripts that use this interface for valid reasons. Therefore, any detection should be investigated to distinguish between benign and malicious use, keeping in mind that the detection level is classified as medium due to the possibility of legitimate use cases. The focus on the Windows process creation log source enhances the ability to catch such activities early in their operation."
    }
  },
  {
    "instruction": "Please help me detect the following: use of Set-ExecutionPolicy to set insecure policies",
    "context": "",
    "output": "Sure!\nIn order to detect the use of Set-ExecutionPolicy to set insecure policies, you should: Monitor Windows PowerShell script activity for commands that include setting the execution policy to less restrictive modes such as 'Unrestricted', 'Bypass', or 'RemoteSigned'. This monitoring requires that Script Block Logging is enabled on the system. Specifically, check for the use of the 'Set-ExecutionPolicy' cmdlet in conjunction with any of these insecure policy options. However, be aware of legitimate administrative scripts that might use these commands for valid reasons; these should be considered as potential false positives. The focus is on preventing an attacker from lowering PowerShell execution policy settings to execute malicious scripts without restrictions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Set-ExecutionPolicy to set insecure policies",
      "answer": "In order to detect the use of Set-ExecutionPolicy to set insecure policies, you should: Monitor Windows PowerShell script activity for commands that include setting the execution policy to less restrictive modes such as 'Unrestricted', 'Bypass', or 'RemoteSigned'. This monitoring requires that Script Block Logging is enabled on the system. Specifically, check for the use of the 'Set-ExecutionPolicy' cmdlet in conjunction with any of these insecure policy options. However, be aware of legitimate administrative scripts that might use these commands for valid reasons; these should be considered as potential false positives. The focus is on preventing an attacker from lowering PowerShell execution policy settings to execute malicious scripts without restrictions."
    }
  },
  {
    "instruction": "How can I detect: execution of Sysinternals tools via an AppX package. Attackers could install the Sysinternals Suite to get access to tools such as psexec and procdump to avoid detection based on System paths",
    "context": "",
    "output": "In order to detect the execution of Sysinternals tools via an AppX package, where attackers could install the Sysinternals Suite to get access to tools such as psexec and procdump to avoid detection based on System paths, you should: monitor the Windows AppModel-Runtime service for certain events. Specifically, look for Event ID 201, which indicates package execution, and check if any of these image names are involved: 'procdump.exe', 'psloglist.exe', 'psexec.exe', 'livekd.exe', or 'ADExplorer.exe'. This enables the identification of potential malicious use of Sysinternals tools, which might be installed by attackers to facilitate their activities without being caught by relying on system path-based detections. Note that there might be legitimate uses of these applications from the Windows Store, which are considered as false positives. This detection process is of medium importance due to its potential for identifying unconventional methods attackers use to employ powerful system administration tools for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Sysinternals tools via an AppX package. Attackers could install the Sysinternals Suite to get access to tools such as psexec and procdump to avoid detection based on System paths",
      "answer": "In order to detect the execution of Sysinternals tools via an AppX package, where attackers could install the Sysinternals Suite to get access to tools such as psexec and procdump to avoid detection based on System paths, you should: monitor the Windows AppModel-Runtime service for certain events. Specifically, look for Event ID 201, which indicates package execution, and check if any of these image names are involved: 'procdump.exe', 'psloglist.exe', 'psexec.exe', 'livekd.exe', or 'ADExplorer.exe'. This enables the identification of potential malicious use of Sysinternals tools, which might be installed by attackers to facilitate their activities without being caught by relying on system path-based detections. Note that there might be legitimate uses of these applications from the Windows Store, which are considered as false positives. This detection process is of medium importance due to its potential for identifying unconventional methods attackers use to employ powerful system administration tools for malicious purposes."
    }
  },
  {
    "instruction": "Explain how should I detect the following: calls to base64 encoded WMI class such as \"Win32_Shadowcopy\", \"Win32_ScheduledJob\", etc.",
    "context": "",
    "output": "In order to detect calls to base64 encoded WMI class such as \"Win32_Shadowcopy\", \"Win32_ScheduledJob\", etc., you should monitor process creation events within Windows environments. Focus specifically on instances where either `powershell.exe` or `pwsh.exe` executables are launched, or files named `PowerShell.EXE` or `pwsh.dll` are invoked. These are common tools used in a variety of administrative tasks but can also be leveraged maliciously.\n\nPay close attention to command-line inputs that contain base64 encoded strings. These strings, when decoded, may refer to specific Windows Management Instrumentation (WMI) classes such as `Win32_Shadowcopy` for creating shadow copies, `Win32_ScheduledJob` for scheduling tasks, `Win32_Process` for process management, `Win32_UserAccount` for user account manipulation, and `Win32_LoggedOnUser` for obtaining information about users currently logged on. \n\nThe presence of these encoded strings, especially when combined with PowerShell or pwsh usage, could indicate an attempt to leverage WMI classes in a manner that\u2019s typical of attackers aiming to maintain persistence, escalate privileges, manage processes, or gather sensitive information without directly calling attention to their activities through standard clear text commands. \n\nGiven the complexity and the potential for benign use of similar commands, any detection of this nature should be considered high priority and investigated to rule out false positives. This approach focuses on a nuanced understanding of potential cybersecurity threats, engaging with both the tools used and the manner of their use.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "calls to base64 encoded WMI class such as \"Win32_Shadowcopy\", \"Win32_ScheduledJob\", etc.",
      "answer": "In order to detect calls to base64 encoded WMI class such as \"Win32_Shadowcopy\", \"Win32_ScheduledJob\", etc., you should monitor process creation events within Windows environments. Focus specifically on instances where either `powershell.exe` or `pwsh.exe` executables are launched, or files named `PowerShell.EXE` or `pwsh.dll` are invoked. These are common tools used in a variety of administrative tasks but can also be leveraged maliciously.\n\nPay close attention to command-line inputs that contain base64 encoded strings. These strings, when decoded, may refer to specific Windows Management Instrumentation (WMI) classes such as `Win32_Shadowcopy` for creating shadow copies, `Win32_ScheduledJob` for scheduling tasks, `Win32_Process` for process management, `Win32_UserAccount` for user account manipulation, and `Win32_LoggedOnUser` for obtaining information about users currently logged on. \n\nThe presence of these encoded strings, especially when combined with PowerShell or pwsh usage, could indicate an attempt to leverage WMI classes in a manner that\u2019s typical of attackers aiming to maintain persistence, escalate privileges, manage processes, or gather sensitive information without directly calling attention to their activities through standard clear text commands. \n\nGiven the complexity and the potential for benign use of similar commands, any detection of this nature should be considered high priority and investigated to rule out false positives. This approach focuses on a nuanced understanding of potential cybersecurity threats, engaging with both the tools used and the manner of their use."
    }
  },
  {
    "instruction": "Explain how should I detect the following: user bypasses Defender by renaming a tool to dump64.exe and placing it in a Visual Studio folder",
    "context": "",
    "output": "In order to detect when a user bypasses Defender by renaming a tool to dump64.exe and placing it in a Visual Studio folder, you should monitor Windows process creation logs for any instances where a process called dump64.exe is initiated. Specifically, look out for cases where the process image path ends with '\\dump64.exe', indicating that the executable has potentially been renamed and placed in a likely suspect folder to evade detection. This action becomes particularly suspicious if the command line used to initiate the process includes flags such as '-ma' or 'accepteula', which are associated with behaviors of dumping utilities like procdump, that are used for extracting process memory contents, often for malicious purposes.\n\nHowever, it's also important to apply a level of discernment by filtering out instances where dump64.exe is running from a directory path that includes '\\Installer\\Feedback\\', as this might be a legitimate usage scenario not associated with this specific attack technique.\n\nWith this detection strategy, it's possible to catch malicious activities where attackers are attempting to leverage renamed tools to bypass security measures, specifically by monitoring for the execution patterns and command arguments typical to memory dumping tools but are now masked under a different, perhaps seemingly benign, process name like dump64.exe. This rule, therefore, aids in identifying potential security bypass techniques which involve renaming and executing tools in specific directories that might not be monitored as closely by Defender, with a high level of attention due to the considerable chance of malicious intent when such criteria are met.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user bypasses Defender by renaming a tool to dump64.exe and placing it in a Visual Studio folder",
      "answer": "In order to detect when a user bypasses Defender by renaming a tool to dump64.exe and placing it in a Visual Studio folder, you should monitor Windows process creation logs for any instances where a process called dump64.exe is initiated. Specifically, look out for cases where the process image path ends with '\\dump64.exe', indicating that the executable has potentially been renamed and placed in a likely suspect folder to evade detection. This action becomes particularly suspicious if the command line used to initiate the process includes flags such as '-ma' or 'accepteula', which are associated with behaviors of dumping utilities like procdump, that are used for extracting process memory contents, often for malicious purposes.\n\nHowever, it's also important to apply a level of discernment by filtering out instances where dump64.exe is running from a directory path that includes '\\Installer\\Feedback\\', as this might be a legitimate usage scenario not associated with this specific attack technique.\n\nWith this detection strategy, it's possible to catch malicious activities where attackers are attempting to leverage renamed tools to bypass security measures, specifically by monitoring for the execution patterns and command arguments typical to memory dumping tools but are now masked under a different, perhaps seemingly benign, process name like dump64.exe. This rule, therefore, aids in identifying potential security bypass techniques which involve renaming and executing tools in specific directories that might not be monitored as closely by Defender, with a high level of attention due to the considerable chance of malicious intent when such criteria are met."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious process run from unusual locations",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious processes running from unusual locations, you should monitor process creation events on Windows systems. Specifically, look for processes that are initiated from paths that are not typically used for legitimate software, such as the recycle bin (`:\\RECYCLER\\`), the system volume information directory (`:\\SystemVolumeInformation\\`), or various Windows directories that are not common launch points for applications (like `C:\\Windows\\Tasks\\`, `C:\\Windows\\debug\\`, `C:\\Windows\\fonts\\`, `C:\\Windows\\help\\`, `C:\\Windows\\drivers\\`, `C:\\Windows\\addins\\`, `C:\\Windows\\cursors\\`, and `C:\\Windows\\system32\\tasks\\`). Keep in mind that while monitoring these directories, some legitimate scripts and administrative tools might be flagged as suspicious depending on the specifics of the environment you are monitoring. The risk level associated with these detections is considered medium, indicating that while not definitive, such process creations are certainly worthy of further investigation to rule out malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious process run from unusual locations",
      "answer": "In order to detect suspicious processes running from unusual locations, you should monitor process creation events on Windows systems. Specifically, look for processes that are initiated from paths that are not typically used for legitimate software, such as the recycle bin (`:\\RECYCLER\\`), the system volume information directory (`:\\SystemVolumeInformation\\`), or various Windows directories that are not common launch points for applications (like `C:\\Windows\\Tasks\\`, `C:\\Windows\\debug\\`, `C:\\Windows\\fonts\\`, `C:\\Windows\\help\\`, `C:\\Windows\\drivers\\`, `C:\\Windows\\addins\\`, `C:\\Windows\\cursors\\`, and `C:\\Windows\\system32\\tasks\\`). Keep in mind that while monitoring these directories, some legitimate scripts and administrative tools might be flagged as suspicious depending on the specifics of the environment you are monitoring. The risk level associated with these detections is considered medium, indicating that while not definitive, such process creations are certainly worthy of further investigation to rule out malicious activity."
    }
  },
  {
    "instruction": "How can I detect: attempts to disable AMSI in the command line. It is possible to bypass AMSI by disabling it before loading the main payload.",
    "context": "",
    "output": "In order to detect attempts to disable AMSI in the command line, which is possible through bypassing AMSI before loading the main payload, you should focus on monitoring process creation events within Windows environments. Look specifically for the execution of PowerShell (`powershell.exe`), the newer PowerShell Core (`pwsh.exe`), or the PowerShell Integrated Scripting Environment (`powershell_ise.exe`). Within the command lines initiating these applications, search for the simultaneous presence of the phrases `[Ref].Assembly.GetType`, `SetValue($null,$true)`, and `NonPublic,Static`. The combination of these command line elements indicates an attempt to manipulate the Anti-Malware Scan Interface (AMSI) in a way that could disable it, allowing malicious code to be loaded without detection. This behavior should be treated with a high level of suspicion due to its potential for malicious use, though be aware that there may be unknown legitimate scenarios that could trigger similar detections.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to disable AMSI in the command line. It is possible to bypass AMSI by disabling it before loading the main payload.",
      "answer": "In order to detect attempts to disable AMSI in the command line, which is possible through bypassing AMSI before loading the main payload, you should focus on monitoring process creation events within Windows environments. Look specifically for the execution of PowerShell (`powershell.exe`), the newer PowerShell Core (`pwsh.exe`), or the PowerShell Integrated Scripting Environment (`powershell_ise.exe`). Within the command lines initiating these applications, search for the simultaneous presence of the phrases `[Ref].Assembly.GetType`, `SetValue($null,$true)`, and `NonPublic,Static`. The combination of these command line elements indicates an attempt to manipulate the Anti-Malware Scan Interface (AMSI) in a way that could disable it, allowing malicious code to be loaded without detection. This behavior should be treated with a high level of suspicion due to its potential for malicious use, though be aware that there may be unknown legitimate scenarios that could trigger similar detections."
    }
  },
  {
    "instruction": "Can you explain how to detect: installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders.\nBoth services are used in the tool Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU (https://github.com/hfiref0x/KDU)\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders, which are associated with the tool Ghost-In-The-Logs and uses KDU, monitored actions should include scanning for `SetValue` events within the Windows Registry, specifically targeting the `ImagePath` attributes of the `HKLM\\System\\CurrentControlSet\\Services\\NalDrv` and `HKLM\\System\\CurrentControlSet\\Services\\PROCEXP152` service keys. These events indicate an attempt to install or modify the path of a service, which can be a tactic used by attackers to execute malicious software.\n\nTo accurately identify malicious activity and reduce false positives, it's important to exclude any events where the `Image` path ends with known system utilities like `procexp64.exe`, `procexp.exe`, `procmon64.exe`, `procmon.exe`, `handle.exe`, or `handle64.exe`. Additionally, the presence of `Details` containing the path `\\WINDOWS\\system32\\Drivers\\PROCEXP152.SYS` should be excluded as this might indicate legitimate activity involving these tools. It's crucial to adapt the exclusion list to match the environment by adding full paths of legitimate utility usage to avoid misinterpretation.\n\nHowever, it's important to acknowledge that while this detection mechanism can identify certain malicious activities, it's not foolproof. Attackers can easily bypass this form of detection by renaming the services, indicating a medium level of confidence in this detection strategy. Therefore, reliance solely on this method is not recommended without cross-checking with additional detection mechanisms or behavioral analysis to confirm malicious intent.\n\nThis approach focuses on identifying specific tactics and techniques associated with initial access and execution, as these services being installed to non-standard directories can be indicative of an attacker's attempt to gain persistence or execute malicious payloads outside of typical system scrutiny.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders.\nBoth services are used in the tool Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU (https://github.com/hfiref0x/KDU)\n",
      "answer": "In order to detect the installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders, which are associated with the tool Ghost-In-The-Logs and uses KDU, monitored actions should include scanning for `SetValue` events within the Windows Registry, specifically targeting the `ImagePath` attributes of the `HKLM\\System\\CurrentControlSet\\Services\\NalDrv` and `HKLM\\System\\CurrentControlSet\\Services\\PROCEXP152` service keys. These events indicate an attempt to install or modify the path of a service, which can be a tactic used by attackers to execute malicious software.\n\nTo accurately identify malicious activity and reduce false positives, it's important to exclude any events where the `Image` path ends with known system utilities like `procexp64.exe`, `procexp.exe`, `procmon64.exe`, `procmon.exe`, `handle.exe`, or `handle64.exe`. Additionally, the presence of `Details` containing the path `\\WINDOWS\\system32\\Drivers\\PROCEXP152.SYS` should be excluded as this might indicate legitimate activity involving these tools. It's crucial to adapt the exclusion list to match the environment by adding full paths of legitimate utility usage to avoid misinterpretation.\n\nHowever, it's important to acknowledge that while this detection mechanism can identify certain malicious activities, it's not foolproof. Attackers can easily bypass this form of detection by renaming the services, indicating a medium level of confidence in this detection strategy. Therefore, reliance solely on this method is not recommended without cross-checking with additional detection mechanisms or behavioral analysis to confirm malicious intent.\n\nThis approach focuses on identifying specific tactics and techniques associated with initial access and execution, as these services being installed to non-standard directories can be indicative of an attacker's attempt to gain persistence or execute malicious payloads outside of typical system scrutiny."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Download or Copy file with Extrac32",
    "context": "",
    "output": "In order to Download or Copy file with Extrac32, you should monitor process creation logs on Windows systems for the execution of the command-line tool `extrac32.exe`. Detection focuses on identifying whether the command line contains `extrac32.exe`, if the image path ends with `\\extrac32.exe`, or if the original file name is flagged as `extrac32.exe`. Additionally, it's important to watch for command lines that include references to `.cab` files, which are cabinet files that might be extracted or manipulated by `extrac32.exe`. Look out for specific options in the command line such as `/C`, `/Y`, and patterns suggesting remote paths like ` \\\\\\\\`, as these might indicate malicious activity. Keep in mind the possibility of false positives, although they are currently undefined, and approach the analysis with a medium level of caution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Download or Copy file with Extrac32",
      "answer": "In order to Download or Copy file with Extrac32, you should monitor process creation logs on Windows systems for the execution of the command-line tool `extrac32.exe`. Detection focuses on identifying whether the command line contains `extrac32.exe`, if the image path ends with `\\extrac32.exe`, or if the original file name is flagged as `extrac32.exe`. Additionally, it's important to watch for command lines that include references to `.cab` files, which are cabinet files that might be extracted or manipulated by `extrac32.exe`. Look out for specific options in the command line such as `/C`, `/Y`, and patterns suggesting remote paths like ` \\\\\\\\`, as these might indicate malicious activity. Keep in mind the possibility of false positives, although they are currently undefined, and approach the analysis with a medium level of caution."
    }
  },
  {
    "instruction": "How can I detect: Powershell Remove-Item  with -Path to delete a file or a folder with \"-Recurse\"",
    "context": "",
    "output": "In order to detect potential malicious activity involving PowerShell's Remove-Item cmdlet used with the -Path parameter to delete a file or folder recursively, you should monitor Windows PowerShell script executions. Specifically, look for script blocks that include both the \"Remove-Item\" command and the \"-Path\" argument. However, to reduce irrelevant alerts, exclude any script block that interacts with the Windows Registry paths \"HKCU:\\\" and \"HKLM:\\\". This approach aims to identify scripts that might be used for harmful purposes such as deleting critical files or folders but will disregard those accessing the registry, thereby reducing false positive alerts like legitimate administrative scripts. The focus is on identifying events that could indicate misuse of PowerShell for deletion operations, which might be indicative of malicious activities such as covering tracks or disrupting services. The detection predominantly relies on having Script Block Logging enabled, a feature in Windows that records executed PowerShell script content, enabling thorough analysis of script actions. It's worth noting that this detection strategy is considered to have a low level of false positives, although legitimate uses of PowerShell scripts that perform similar actions might occasionally be flagged.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Powershell Remove-Item  with -Path to delete a file or a folder with \"-Recurse\"",
      "answer": "In order to detect potential malicious activity involving PowerShell's Remove-Item cmdlet used with the -Path parameter to delete a file or folder recursively, you should monitor Windows PowerShell script executions. Specifically, look for script blocks that include both the \"Remove-Item\" command and the \"-Path\" argument. However, to reduce irrelevant alerts, exclude any script block that interacts with the Windows Registry paths \"HKCU:\\\" and \"HKLM:\\\". This approach aims to identify scripts that might be used for harmful purposes such as deleting critical files or folders but will disregard those accessing the registry, thereby reducing false positive alerts like legitimate administrative scripts. The focus is on identifying events that could indicate misuse of PowerShell for deletion operations, which might be indicative of malicious activities such as covering tracks or disrupting services. The detection predominantly relies on having Script Block Logging enabled, a feature in Windows that records executed PowerShell script content, enabling thorough analysis of script actions. It's worth noting that this detection strategy is considered to have a low level of false positives, although legitimate uses of PowerShell scripts that perform similar actions might occasionally be flagged."
    }
  },
  {
    "instruction": "Please help me detect the following: password change for the computer's domain account or host principal via \"ksetup.exe\"",
    "context": "",
    "output": "Sure!\nIn order to detect password change for the computer's domain account or host principal via \"ksetup.exe\", you should: monitor for process creation events on Windows systems where the process image name ends with '\\ksetup.exe' or the original file name is identified as 'ksetup.exe'. Additionally, look for instances where the command line contains ' /setcomputerpassword ', as this indicates an attempt to change the computer's domain account or host principal password using \"ksetup.exe\". Be aware of the possibility of unknown false positives, and consider this rule to have a medium level of importance in your security monitoring efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "password change for the computer's domain account or host principal via \"ksetup.exe\"",
      "answer": "In order to detect password change for the computer's domain account or host principal via \"ksetup.exe\", you should: monitor for process creation events on Windows systems where the process image name ends with '\\ksetup.exe' or the original file name is identified as 'ksetup.exe'. Additionally, look for instances where the command line contains ' /setcomputerpassword ', as this indicates an attempt to change the computer's domain account or host principal password using \"ksetup.exe\". Be aware of the possibility of unknown false positives, and consider this rule to have a medium level of importance in your security monitoring efforts."
    }
  },
  {
    "instruction": "How can I detect: usage of the Gpg4win to decrypt files located in suspicious locations from CLI",
    "context": "",
    "output": "In order to detect usage of the Gpg4win to decrypt files located in suspicious locations from CLI, you should: Focus on the creation of new processes on Windows operating systems, specifically keeping an eye out for any instances of the 'gpg2.exe' executable, which is a component of the GNU Privacy Guard (GnuPG), developed by g10 Code GmbH. It's critical to monitor any command line arguments that include '-passphrase', which indicates the input of a passphrase for decryption directly through the command line interface - a method that could suggest an automated or scripted decryption process, possibly indicating malicious behavior. \n\nAdditionally, pay close attention to the command line paths involving directory locations such as '\\AppData\\Roaming\\', 'C:\\Perflogs\\', 'C:\\Windows\\Temp\\', and 'C:\\temp'. Usage of these paths can be indicative of attempts to decrypt files stored in locations that are commonly used for temporary storage or hiding malicious data away from typical user directories. \n\nIt's important, however, to consider the context of these detections, as legitimate usage of Gpg4win for file encryption and decryption could also trigger these conditions. Thus, any alert based on these criteria should be investigated to discern between benign use and potential security threats. The detection sensitivity is set to a medium level to balance between the likelihood of detecting actual malicious activity and minimizing false positives originating from regular, non-malicious use of GnuPG for encryption and decryption tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the Gpg4win to decrypt files located in suspicious locations from CLI",
      "answer": "In order to detect usage of the Gpg4win to decrypt files located in suspicious locations from CLI, you should: Focus on the creation of new processes on Windows operating systems, specifically keeping an eye out for any instances of the 'gpg2.exe' executable, which is a component of the GNU Privacy Guard (GnuPG), developed by g10 Code GmbH. It's critical to monitor any command line arguments that include '-passphrase', which indicates the input of a passphrase for decryption directly through the command line interface - a method that could suggest an automated or scripted decryption process, possibly indicating malicious behavior. \n\nAdditionally, pay close attention to the command line paths involving directory locations such as '\\AppData\\Roaming\\', 'C:\\Perflogs\\', 'C:\\Windows\\Temp\\', and 'C:\\temp'. Usage of these paths can be indicative of attempts to decrypt files stored in locations that are commonly used for temporary storage or hiding malicious data away from typical user directories. \n\nIt's important, however, to consider the context of these detections, as legitimate usage of Gpg4win for file encryption and decryption could also trigger these conditions. Thus, any alert based on these criteria should be investigated to discern between benign use and potential security threats. The detection sensitivity is set to a medium level to balance between the likelihood of detecting actual malicious activity and minimizing false positives originating from regular, non-malicious use of GnuPG for encryption and decryption tasks."
    }
  },
  {
    "instruction": "How to detect: usage of the Sharp Chisel via the commandline arguments",
    "context": "",
    "output": "In order to detect usage of the Sharp Chisel via the commandline arguments, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\SharpChisel.exe' or where the product name is identified as 'SharpChisel'. Such an event is indicative of Sharp Chisel's execution. Given the context, this activity is highly suspicious and is unlikely to generate false positives, underlining its significance in identifying potential malicious behavior. The detection of this activity is crucial as it can point towards an attacker using Sharp Chisel for nefarious purposes, which is flagged at a high severity level due to its potential impact.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the Sharp Chisel via the commandline arguments",
      "answer": "In order to detect usage of the Sharp Chisel via the commandline arguments, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\SharpChisel.exe' or where the product name is identified as 'SharpChisel'. Such an event is indicative of Sharp Chisel's execution. Given the context, this activity is highly suspicious and is unlikely to generate false positives, underlining its significance in identifying potential malicious behavior. The detection of this activity is crucial as it can point towards an attacker using Sharp Chisel for nefarious purposes, which is flagged at a high severity level due to its potential impact."
    }
  },
  {
    "instruction": "How to detect: execution of the hacktool SafetyKatz via PE information and default Image name",
    "context": "",
    "output": "In order to detect the execution of the hacktool SafetyKatz via PE information and default Image name, you should: Focus on monitoring process creation logs within Windows environments for any instances where the image name ends with '\\SafetyKatz.exe', the original file name is specified as 'SafetyKatz.exe', or the description is exactly 'SafetyKatz'. These indicators are critical for identifying potential malicious activities associated with SafetyKatz, a well-known tool used in cyber attacks for extracting sensitive information. The detection of such activities is crucial, with false positives being unlikely, indicating a high confidence in these specific attributes as indicators of compromise. By focusing on these specific characteristics within the process creation logs, efforts can be concentrated on a vital aspect of monitoring for malicious activity, aligning with tactics and techniques that include but are not limited to credential access.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the hacktool SafetyKatz via PE information and default Image name",
      "answer": "In order to detect the execution of the hacktool SafetyKatz via PE information and default Image name, you should: Focus on monitoring process creation logs within Windows environments for any instances where the image name ends with '\\SafetyKatz.exe', the original file name is specified as 'SafetyKatz.exe', or the description is exactly 'SafetyKatz'. These indicators are critical for identifying potential malicious activities associated with SafetyKatz, a well-known tool used in cyber attacks for extracting sensitive information. The detection of such activities is crucial, with false positives being unlikely, indicating a high confidence in these specific attributes as indicators of compromise. By focusing on these specific characteristics within the process creation logs, efforts can be concentrated on a vital aspect of monitoring for malicious activity, aligning with tactics and techniques that include but are not limited to credential access."
    }
  },
  {
    "instruction": "How can I detect: potential OGNL Injection exploitation, which may lead to RCE.\nOGNL is an expression language that is supported in many JVM based systems.\nOGNL Injection is the reason for some high profile RCE's such as Apache Struts (CVE-2017-5638) and Confluence (CVE-2022-26134)\n",
    "context": "",
    "output": "In order to detect potential OGNL Injection exploitation, which may lead to Remote Code Execution (RCE), you should monitor application error logs within Java Virtual Machine (JVM) based systems. Specifically, focus on logs categorized as application errors with a logging level of ERROR or above. Look for occurrences of specific keywords in the logs, such as 'org.apache.commons.ognl.OgnlException' and 'ExpressionSyntaxException'. These keywords are indicative of potential OGNL Injection attempts, which is a type of attack described in high-profile Remote Code Execution vulnerabilities like Apache Struts (CVE-2017-5638) and Confluence (CVE-2022-26134).\n\nBe aware that not all instances detected using these criteria may represent genuine attacks. False positives can occur, often due to application bugs. Therefore, while detections at this level are considered high severity, careful analysis is required to distinguish between actual threats and benign errors related to application issues. This monitoring strategy leverages the capabilities found in many JVM-based systems for detecting elaborate attacks through the injection of malicious OGNL expressions, aiming to prevent possible exploitation and ensuring the system's integrity remains intact.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential OGNL Injection exploitation, which may lead to RCE.\nOGNL is an expression language that is supported in many JVM based systems.\nOGNL Injection is the reason for some high profile RCE's such as Apache Struts (CVE-2017-5638) and Confluence (CVE-2022-26134)\n",
      "answer": "In order to detect potential OGNL Injection exploitation, which may lead to Remote Code Execution (RCE), you should monitor application error logs within Java Virtual Machine (JVM) based systems. Specifically, focus on logs categorized as application errors with a logging level of ERROR or above. Look for occurrences of specific keywords in the logs, such as 'org.apache.commons.ognl.OgnlException' and 'ExpressionSyntaxException'. These keywords are indicative of potential OGNL Injection attempts, which is a type of attack described in high-profile Remote Code Execution vulnerabilities like Apache Struts (CVE-2017-5638) and Confluence (CVE-2022-26134).\n\nBe aware that not all instances detected using these criteria may represent genuine attacks. False positives can occur, often due to application bugs. Therefore, while detections at this level are considered high severity, careful analysis is required to distinguish between actual threats and benign errors related to application issues. This monitoring strategy leverages the capabilities found in many JVM-based systems for detecting elaborate attacks through the injection of malicious OGNL expressions, aiming to prevent possible exploitation and ensuring the system's integrity remains intact."
    }
  },
  {
    "instruction": "Explain how should I detect the following: highly relevant Antivirus alert that reports an exploitation framework",
    "context": "",
    "output": "In order to detect a highly relevant Antivirus alert that reports an exploitation framework, you should: Monitor antivirus logs for specific signature names that are indicative of an exploitation framework being used. These signatures include, but are not limited to, 'MeteTool', 'MPreter', 'Meterpreter', 'Metasploit', 'PowerSploit', 'CobaltStrike', 'BruteR', 'Brutel', 'Swrort', 'Rozena', 'Backdoor.Cobalt', 'CobaltStr', 'COBEACON', 'Cometer', 'Razy', 'IISExchgSpawnCMD', 'Exploit.Script.CVE', 'Seatbelt', 'Sbelt', and 'Sliver'. Detection of these signatures in the antivirus logs is critical as they are associated with well-known tools and frameworks that attackers use to exploit vulnerabilities in target systems. These frameworks include capabilities for establishing backdoors, executing code remotely, privilege escalation, and moving laterally across the network.\n\nIn addition, when such signatures are identified, it's vital to capture specific fields such as the name of the file associated with the detection and the user under which the suspicious activity was identified. This information is crucial for the investigation and response processes.\n\nGiven that these signatures specifically relate to sophisticated exploitation tactics, false positives are considered unlikely. The identification of these signatures should be treated as a critical alert, necessitating immediate investigation and response to mitigate potential threats. The detection of these signatures aligns with tactics and techniques that are part of recognized frameworks for understanding cyberattacks, emphasizing their importance in a comprehensive cybersecurity strategy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "highly relevant Antivirus alert that reports an exploitation framework",
      "answer": "In order to detect a highly relevant Antivirus alert that reports an exploitation framework, you should: Monitor antivirus logs for specific signature names that are indicative of an exploitation framework being used. These signatures include, but are not limited to, 'MeteTool', 'MPreter', 'Meterpreter', 'Metasploit', 'PowerSploit', 'CobaltStrike', 'BruteR', 'Brutel', 'Swrort', 'Rozena', 'Backdoor.Cobalt', 'CobaltStr', 'COBEACON', 'Cometer', 'Razy', 'IISExchgSpawnCMD', 'Exploit.Script.CVE', 'Seatbelt', 'Sbelt', and 'Sliver'. Detection of these signatures in the antivirus logs is critical as they are associated with well-known tools and frameworks that attackers use to exploit vulnerabilities in target systems. These frameworks include capabilities for establishing backdoors, executing code remotely, privilege escalation, and moving laterally across the network.\n\nIn addition, when such signatures are identified, it's vital to capture specific fields such as the name of the file associated with the detection and the user under which the suspicious activity was identified. This information is crucial for the investigation and response processes.\n\nGiven that these signatures specifically relate to sophisticated exploitation tactics, false positives are considered unlikely. The identification of these signatures should be treated as a critical alert, necessitating immediate investigation and response to mitigate potential threats. The detection of these signatures aligns with tactics and techniques that are part of recognized frameworks for understanding cyberattacks, emphasizing their importance in a comprehensive cybersecurity strategy."
    }
  },
  {
    "instruction": "Explain how should I detect the following: remote execution via scheduled task creation or update on the destination host",
    "context": "",
    "output": "In order to detect remote execution via scheduled task creation or update on the destination host, you should monitor Windows security logs for specific event IDs that indicate a successful account logon event (Event ID 4624) with Logon Type 3 (network logon), as well as the creation or update of scheduled tasks (Event IDs 4698 and 4702). It\u2019s crucial to filter out any events that originate from the loopback address (::1 or 127.0.0.1) to reduce noise and avoid false positives from local system activities. Additionally, any logon events without a source network address should also be filtered out to focus the detection on remote activities.\n\nThis detection technique operates on a 30-day timeframe, looking for correlation between the remote logon events and subsequent scheduled task creation or modification from the same host. Specifically, if a logon through the network (indicated by Logon Type 3) is followed by a creation or update of a scheduled task within this period\u2014and these actions cannot be attributed to local system activities\u2014you might be observing an attack where adversaries use remote execution methods to establish persistence or execute malicious tasks on the destination host.\n\nTags indicating the relevant MITRE ATT&CK tactics and techniques would include Execution, Persistence, and Scheduled Task/Job for such detection logic. These tags help in classifying the detection strategy according to a widely recognized framework for understanding and discussing cybersecurity threats.\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote execution via scheduled task creation or update on the destination host",
      "answer": "In order to detect remote execution via scheduled task creation or update on the destination host, you should monitor Windows security logs for specific event IDs that indicate a successful account logon event (Event ID 4624) with Logon Type 3 (network logon), as well as the creation or update of scheduled tasks (Event IDs 4698 and 4702). It\u2019s crucial to filter out any events that originate from the loopback address (::1 or 127.0.0.1) to reduce noise and avoid false positives from local system activities. Additionally, any logon events without a source network address should also be filtered out to focus the detection on remote activities.\n\nThis detection technique operates on a 30-day timeframe, looking for correlation between the remote logon events and subsequent scheduled task creation or modification from the same host. Specifically, if a logon through the network (indicated by Logon Type 3) is followed by a creation or update of a scheduled task within this period\u2014and these actions cannot be attributed to local system activities\u2014you might be observing an attack where adversaries use remote execution methods to establish persistence or execute malicious tasks on the destination host.\n\nTags indicating the relevant MITRE ATT&CK tactics and techniques would include Execution, Persistence, and Scheduled Task/Job for such detection logic. These tags help in classifying the detection strategy according to a widely recognized framework for understanding and discussing cybersecurity threats.\n"
    }
  },
  {
    "instruction": "How to detect: execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.",
    "context": "",
    "output": "In order to detect execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32), which attackers abuse to install and run malicious DLLs, you should: focus on monitoring process creation events within Windows environments. Specifically, watch for occurrences of the process \"odbcconf.exe\" either by its image name or original file name. Additionally, scrutinize instances where the command line includes both \"REGSVR\" and references to \".dll\" files. This combination of conditions typically signals an attempt to register a new DLL maliciously. Be aware that legitimate usage of \"odbcconf\" to register DLLs may also trigger this detection, so it's essential to investigate the context, such as the DLL's path and content, to accurately assess the nature of the activity. This approach involves a medium level of alertness due to the possibility of false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.",
      "answer": "In order to detect execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32), which attackers abuse to install and run malicious DLLs, you should: focus on monitoring process creation events within Windows environments. Specifically, watch for occurrences of the process \"odbcconf.exe\" either by its image name or original file name. Additionally, scrutinize instances where the command line includes both \"REGSVR\" and references to \".dll\" files. This combination of conditions typically signals an attempt to register a new DLL maliciously. Be aware that legitimate usage of \"odbcconf\" to register DLLs may also trigger this detection, so it's essential to investigate the context, such as the DLL's path and content, to accurately assess the nature of the activity. This approach involves a medium level of alertness due to the possibility of false positives."
    }
  },
  {
    "instruction": "How can I detect: additions to the Emond Launch Daemon that adversaries may use to gain persistence and elevate privileges.",
    "context": "",
    "output": "In order to detect additions to the Emond Launch Daemon that adversaries may use to gain persistence and elevate privileges, you should: focus on monitoring file events within macOS systems. Specifically, keep an eye on any changes to the \u2018/etc/emond.d/rules/\u2019 directory, including files that have a \u2018.plist\u2019 extension, which are typically related to system configurations and daemon settings. Additionally, watch for any alterations or additions to the \u2018/private/var/db/emondClients/\u2019 directory. These specific locations are critical because modifications or new files within them could indicate that an adversary is attempting to establish persistence or elevate privileges on the system. Be aware that legitimate administration activities may also trigger these alerts, thus they are considered as potential false positives. The alert level for this activity is classified as medium, indicating a notable concern that warrants investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "additions to the Emond Launch Daemon that adversaries may use to gain persistence and elevate privileges.",
      "answer": "In order to detect additions to the Emond Launch Daemon that adversaries may use to gain persistence and elevate privileges, you should: focus on monitoring file events within macOS systems. Specifically, keep an eye on any changes to the \u2018/etc/emond.d/rules/\u2019 directory, including files that have a \u2018.plist\u2019 extension, which are typically related to system configurations and daemon settings. Additionally, watch for any alterations or additions to the \u2018/private/var/db/emondClients/\u2019 directory. These specific locations are critical because modifications or new files within them could indicate that an adversary is attempting to establish persistence or elevate privileges on the system. Be aware that legitimate administration activities may also trigger these alerts, thus they are considered as potential false positives. The alert level for this activity is classified as medium, indicating a notable concern that warrants investigation."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location.",
    "context": "",
    "output": "In order to detect potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location, you should: Look for instances where \"SystemResetPlatform.exe\" loads a DLL named \"RjvPlatform.dll\" in the Windows environment, specifically within the image loading category. It is vital to ensure that the \"SystemResetPlatform.exe\" process is not operating from its legitimate path, which is typically \"C:\\Windows\\System32\\SystemResetPlatform\\\". The detection focuses on identifying unusual or suspicious behavior that deviates from the norm, such as the loading of \"RjvPlatform.dll\" from paths other than the designated legitimate one. This is indicative of an attempt to exploit the legitimate \"SystemResetPlatform.exe\" process for malicious purposes, commonly seen in techniques involving DLL sideloading. The effectiveness of this detection is deemed high, with false positives being unlikely, signifying a strong indicator of malicious activity when such criteria are met.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location.",
      "answer": "In order to detect potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location, you should: Look for instances where \"SystemResetPlatform.exe\" loads a DLL named \"RjvPlatform.dll\" in the Windows environment, specifically within the image loading category. It is vital to ensure that the \"SystemResetPlatform.exe\" process is not operating from its legitimate path, which is typically \"C:\\Windows\\System32\\SystemResetPlatform\\\". The detection focuses on identifying unusual or suspicious behavior that deviates from the norm, such as the loading of \"RjvPlatform.dll\" from paths other than the designated legitimate one. This is indicative of an attempt to exploit the legitimate \"SystemResetPlatform.exe\" process for malicious purposes, commonly seen in techniques involving DLL sideloading. The effectiveness of this detection is deemed high, with false positives being unlikely, signifying a strong indicator of malicious activity when such criteria are met."
    }
  },
  {
    "instruction": "How can I detect: patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322",
    "context": "",
    "output": "In order to detect patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322, you should: Monitor Windows process creation logs for specific command-line activities that indicate an exploitation attempt. Specifically, look for the execution of the `whoami` command, which is commonly used by attackers to check the privileges of the compromised account. Additionally, pay attention to commands that access paths related to `./Client/Common/` or `.\\Client\\Common\\`, and the specific use of a batch file located at `C:\\Windows\\Temp\\Serv-U.bat`. These patterns of command line activity are critical indicators of an ongoing exploitation attempt of the Serv-U vulnerability by the identified threat group. False positives are considered unlikely for this detection, underscoring the critical nature of these indicators in identifying potential breaches.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322",
      "answer": "In order to detect patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322, you should: Monitor Windows process creation logs for specific command-line activities that indicate an exploitation attempt. Specifically, look for the execution of the `whoami` command, which is commonly used by attackers to check the privileges of the compromised account. Additionally, pay attention to commands that access paths related to `./Client/Common/` or `.\\Client\\Common\\`, and the specific use of a batch file located at `C:\\Windows\\Temp\\Serv-U.bat`. These patterns of command line activity are critical indicators of an ongoing exploitation attempt of the Serv-U vulnerability by the identified threat group. False positives are considered unlikely for this detection, underscoring the critical nature of these indicators in identifying potential breaches."
    }
  },
  {
    "instruction": "How can I detect: suspicious parameters of fsutil (deleting USN journal, configuring it with small size, etc).\nMight be used by ransomwares during the attack (seen by NotPetya and others).\n",
    "context": "",
    "output": "In order to detect suspicious parameters of fsutil (deleting USN journal, configuring it with small size, etc) that might be used by ransomwares during the attack (seen by NotPetya and others), you should monitor process creation logs on Windows systems for instances where the fsutil utility is executed. Specifically, look for events where the image names end with '\\fsutil.exe' or have an original filename of 'fsutil.exe'. Additionally, pay attention to command line inputs that contain 'deletejournal' or 'createjournal'. These inputs are indicative of modifying the USN journal, a behavior observed in ransomware attacks to either remove tracking of file changes or to adjust the journal's configuration, potentially making its size very small and less useful for forensic analysis. Be aware that this behavior might also be linked with legitimate administrative activities or scripts, so consider these as potential sources of false positives. The significance of such actions is high, hence they warrant thorough investigation when detected.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious parameters of fsutil (deleting USN journal, configuring it with small size, etc).\nMight be used by ransomwares during the attack (seen by NotPetya and others).\n",
      "answer": "In order to detect suspicious parameters of fsutil (deleting USN journal, configuring it with small size, etc) that might be used by ransomwares during the attack (seen by NotPetya and others), you should monitor process creation logs on Windows systems for instances where the fsutil utility is executed. Specifically, look for events where the image names end with '\\fsutil.exe' or have an original filename of 'fsutil.exe'. Additionally, pay attention to command line inputs that contain 'deletejournal' or 'createjournal'. These inputs are indicative of modifying the USN journal, a behavior observed in ransomware attacks to either remove tracking of file changes or to adjust the journal's configuration, potentially making its size very small and less useful for forensic analysis. Be aware that this behavior might also be linked with legitimate administrative activities or scripts, so consider these as potential sources of false positives. The significance of such actions is high, hence they warrant thorough investigation when detected."
    }
  },
  {
    "instruction": "Please help me detect the following: attempts to exploit an apache spark server via CVE-2014-6287 from a commandline perspective",
    "context": "",
    "output": "Sure!\nIn order to detect attempts to exploit an apache spark server via CVE-2014-6287 from a commandline perspective, you should: Monitor Linux systems, specifically focusing on the creation of new processes. Keep an eye out for processes that have been initiated by the Bash shell, identifiable by their parent process ending with '\\bash'. Among these, pay special attention to command lines that contain either 'id -Gn `' or \"id -Gn '\", which could indicate malicious activity associated with this particular vulnerability. False positives are deemed unlikely, which suggests that if such activity is detected, it should be treated with a high level of concern. This monitoring is crucial for identifying potential exploitation attempts of the CVE-2014-6287 vulnerability from the command line.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to exploit an apache spark server via CVE-2014-6287 from a commandline perspective",
      "answer": "In order to detect attempts to exploit an apache spark server via CVE-2014-6287 from a commandline perspective, you should: Monitor Linux systems, specifically focusing on the creation of new processes. Keep an eye out for processes that have been initiated by the Bash shell, identifiable by their parent process ending with '\\bash'. Among these, pay special attention to command lines that contain either 'id -Gn `' or \"id -Gn '\", which could indicate malicious activity associated with this particular vulnerability. False positives are deemed unlikely, which suggests that if such activity is detected, it should be treated with a high level of concern. This monitoring is crucial for identifying potential exploitation attempts of the CVE-2014-6287 vulnerability from the command line."
    }
  },
  {
    "instruction": "How can I detect: specific process characteristics of Snatch ransomware word document droppers",
    "context": "",
    "output": "In order to detect specific process characteristics of Snatch ransomware word document droppers, you should: monitor Windows process creation logs for any instances where the command line involves either shutting down the computer immediately and rebooting it in safe mode using the command 'shutdown /r /f /t 00', or stopping a service named 'SuperBackupMan'. It\u2019s important to capture the computer name, the user initiating the process, and the process image for further investigation. Usually, it's rare for legitimate scripts to perform these actions, thus any detection should be considered with high suspicion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific process characteristics of Snatch ransomware word document droppers",
      "answer": "In order to detect specific process characteristics of Snatch ransomware word document droppers, you should: monitor Windows process creation logs for any instances where the command line involves either shutting down the computer immediately and rebooting it in safe mode using the command 'shutdown /r /f /t 00', or stopping a service named 'SuperBackupMan'. It\u2019s important to capture the computer name, the user initiating the process, and the process image for further investigation. Usually, it's rare for legitimate scripts to perform these actions, thus any detection should be considered with high suspicion."
    }
  },
  {
    "instruction": "How to detect: execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a supsicious path in the commandline.\nThe \"mofcomp\" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.\nAttackers abuse this utility to install malicious MOF scripts\n",
    "context": "",
    "output": "In order to detect execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the command line, you should monitor process creation logs within the Windows operating system. Look for instances where the \"mofcomp.exe\" utility is executed. This can be identified either by the image name ending with '\\mofcomp.exe' or the original filename being exactly 'mofcomp.exe'. Be especially vigilant if this utility is launched by parent processes known to be used by attackers for command execution, such as 'cmd.exe', 'powershell.exe', 'pwsh.exe', 'wsl.exe', 'wscript.exe', or 'cscript.exe'. Additionally, pay attention to command lines that include suspicious paths like '\\AppData\\Local\\Temp', '\\Users\\Public\\', '\\WINDOWS\\Temp\\', '%temp%', '%tmp%', and '%appdata%'. \n\nHowever, it is essential to exclude legitimate use cases where 'mofcomp' is run as a child of 'WmiPrvSE.exe' with command line paths pointing to 'C:\\Windows\\TEMP\\' and ending in '.mof', as well as instances where parent information is unavailable but the command line criteria match, to minimize false positives.\n\nBy following these guidelines, organizations can more effectively spot malicious attempts to abuse 'mofcomp' for installing harmful MOF scripts, a technique often used in malware deployment and persistence mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a supsicious path in the commandline.\nThe \"mofcomp\" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.\nAttackers abuse this utility to install malicious MOF scripts\n",
      "answer": "In order to detect execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the command line, you should monitor process creation logs within the Windows operating system. Look for instances where the \"mofcomp.exe\" utility is executed. This can be identified either by the image name ending with '\\mofcomp.exe' or the original filename being exactly 'mofcomp.exe'. Be especially vigilant if this utility is launched by parent processes known to be used by attackers for command execution, such as 'cmd.exe', 'powershell.exe', 'pwsh.exe', 'wsl.exe', 'wscript.exe', or 'cscript.exe'. Additionally, pay attention to command lines that include suspicious paths like '\\AppData\\Local\\Temp', '\\Users\\Public\\', '\\WINDOWS\\Temp\\', '%temp%', '%tmp%', and '%appdata%'. \n\nHowever, it is essential to exclude legitimate use cases where 'mofcomp' is run as a child of 'WmiPrvSE.exe' with command line paths pointing to 'C:\\Windows\\TEMP\\' and ending in '.mof', as well as instances where parent information is unavailable but the command line criteria match, to minimize false positives.\n\nBy following these guidelines, organizations can more effectively spot malicious attempts to abuse 'mofcomp' for installing harmful MOF scripts, a technique often used in malware deployment and persistence mechanisms."
    }
  },
  {
    "instruction": "How to detect: enumeration of other remote systems.",
    "context": "",
    "output": "In order to detect the enumeration of other remote systems, you should monitor process creation logs on macOS systems for specific patterns that suggest network exploration or scanning activities. Look for instances where the process name ends with '/arp' and the command line includes '-a', indicating the use of the Address Resolution Protocol (ARP) to find the MAC address associated with IP addresses on the local network. Additionally, watch for processes ending with '/ping' coupled with command line arguments that target common private IP address ranges, such as 10.x.x.x, 192.168.x.x, and various segments of the 172.16.x.x to 172.31.x.x range, as well as the localhost address (127.x.x.x) and the link-local addresses (169.254.x.x). These patterns are characteristic of attempts to discover active machines on a network by sending them ICMP echo requests. Being aware of these activities is crucial because, while they can be part of legitimate administration tasks, they may also indicate reconnaissance efforts by an attacker aiming to map out network resources as a preliminary step before carrying out further malicious actions. Therefore, any alerts generated from these detection rules should be treated as informational and investigated to ascertain whether they are benign in nature or indicative of a cybersecurity threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "enumeration of other remote systems.",
      "answer": "In order to detect the enumeration of other remote systems, you should monitor process creation logs on macOS systems for specific patterns that suggest network exploration or scanning activities. Look for instances where the process name ends with '/arp' and the command line includes '-a', indicating the use of the Address Resolution Protocol (ARP) to find the MAC address associated with IP addresses on the local network. Additionally, watch for processes ending with '/ping' coupled with command line arguments that target common private IP address ranges, such as 10.x.x.x, 192.168.x.x, and various segments of the 172.16.x.x to 172.31.x.x range, as well as the localhost address (127.x.x.x) and the link-local addresses (169.254.x.x). These patterns are characteristic of attempts to discover active machines on a network by sending them ICMP echo requests. Being aware of these activities is crucial because, while they can be part of legitimate administration tasks, they may also indicate reconnaissance efforts by an attacker aiming to map out network resources as a preliminary step before carrying out further malicious actions. Therefore, any alerts generated from these detection rules should be treated as informational and investigated to ascertain whether they are benign in nature or indicative of a cybersecurity threat."
    }
  },
  {
    "instruction": "Can you explain how to detect: 3CXDesktopApp updater downloading a known compromised version of the 3CXDesktopApp software",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the 3CXDesktopApp updater downloading a known compromised version of the 3CXDesktopApp software, you should: Monitor process creation logs in Windows for the execution of an application named 'update.exe' within the '\\3CXDesktopApp\\app\\' directory. Specifically, be attentive to command line executions that include all of the following parameters: '--update', 'http', and '/electron/update/win32/18.12'. Such a pattern indicates a high probability of the system attempting to download or install a compromised version of the 3CXDesktopApp software. It's crucial to note that detections related to this activity should be treated with a high level of concern due to the lack of well-known false positives associated with this detection criteria.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "3CXDesktopApp updater downloading a known compromised version of the 3CXDesktopApp software",
      "answer": "In order to detect the 3CXDesktopApp updater downloading a known compromised version of the 3CXDesktopApp software, you should: Monitor process creation logs in Windows for the execution of an application named 'update.exe' within the '\\3CXDesktopApp\\app\\' directory. Specifically, be attentive to command line executions that include all of the following parameters: '--update', 'http', and '/electron/update/win32/18.12'. Such a pattern indicates a high probability of the system attempting to download or install a compromised version of the 3CXDesktopApp software. It's crucial to note that detections related to this activity should be treated with a high level of concern due to the lack of well-known false positives associated with this detection criteria."
    }
  },
  {
    "instruction": "Please help me detect the following: signs of potential use of the WSMAN provider from uncommon processes locally and remote execution.",
    "context": "",
    "output": "Sure!\nIn order to detect signs of potential use of the WSMAN provider from uncommon processes locally and remote execution, you should monitor for specific image load activities in Windows environments. Look for events where certain DLL files associated with WSMAN (Windows Remote Management) are loaded, such as 'WsmSvc.dll', 'WsmAuto.dll', and 'Microsoft.WSMan.Management.ni.dll' among others. Additionally, watch for the loading of 'svchost.exe' in association with the 'WsmWmiPl.dll' file, signifying response from the server side.\n\nIt's important to exclude from your detection certain benign processes that might also load these or similar libraries but are known to be safe. Such processes include 'powershell.exe', various system utilities like 'sdiagnhost.exe' and 'services.exe', command lines invoking 'svchost.exe' for standard services, the .NET optimization service 'mscorsvw.exe', and others related to specific use cases or system activities like server management tools, temporary files, Citrix applications, or instances of PowerShell ISE.\n\nBe cautious though, as some legitimate command lines may contain 'svchost.exe' without further parameters, which should not alone trigger alerts without the specific DLLs being loaded as mentioned above.\n\nBy filtering out these general and specific images and command lines, you can effectively reduce false positives, focusing only on unusual and potentially malicious WSMAN usage patterns. The detection level for this monitoring is set to medium, acknowledging that while not all findings may represent malicious activity, they warrant investigation to rule out unauthorized or harmful remote management actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "signs of potential use of the WSMAN provider from uncommon processes locally and remote execution.",
      "answer": "In order to detect signs of potential use of the WSMAN provider from uncommon processes locally and remote execution, you should monitor for specific image load activities in Windows environments. Look for events where certain DLL files associated with WSMAN (Windows Remote Management) are loaded, such as 'WsmSvc.dll', 'WsmAuto.dll', and 'Microsoft.WSMan.Management.ni.dll' among others. Additionally, watch for the loading of 'svchost.exe' in association with the 'WsmWmiPl.dll' file, signifying response from the server side.\n\nIt's important to exclude from your detection certain benign processes that might also load these or similar libraries but are known to be safe. Such processes include 'powershell.exe', various system utilities like 'sdiagnhost.exe' and 'services.exe', command lines invoking 'svchost.exe' for standard services, the .NET optimization service 'mscorsvw.exe', and others related to specific use cases or system activities like server management tools, temporary files, Citrix applications, or instances of PowerShell ISE.\n\nBe cautious though, as some legitimate command lines may contain 'svchost.exe' without further parameters, which should not alone trigger alerts without the specific DLLs being loaded as mentioned above.\n\nBy filtering out these general and specific images and command lines, you can effectively reduce false positives, focusing only on unusual and potentially malicious WSMAN usage patterns. The detection level for this monitoring is set to medium, acknowledging that while not all findings may represent malicious activity, they warrant investigation to rule out unauthorized or harmful remote management actions."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of a named pipe as used by CobaltStrike",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation of a named pipe as used by CobaltStrike, you should: Focus on monitoring the creation of Windows named pipes which could indicate malicious activity. Ensure your monitoring tools, especially those analyzing logs from Windows systems, are configured to capture Named Pipe Events, specifically looking for Event IDs 17 and 18 in Sysmon logs. This requires verifying if your Sysmon configuration actively logs these events, and adjustments might be necessary using popular configurations found on GitHub. \n\nDuring detection, pay close attention to the pipe names. If a pipe name contains both '\\MSSE-' and '-server', starts with '\\postex_', '\\status_', '\\msagent_', '\\mojo_', '\\interprocess_', '\\samr_', '\\netlogon_', '\\srvsvc_', '\\lsarpc_', '\\wkssvc_', it could indicate a compromised system. These specific patterns are chosen because they are commonly utilized by Cobalt Strike and other malware to establish communication channels on the infected host.\n\nRemember that while this strategy is critical for identifying potential threats, there might be cases where legitimate software uses similar named pipes, leading to unknown false positives. Thus, it\u2019s crucial to analyze detections within the broader context of behavior on the system to accurately identify malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a named pipe as used by CobaltStrike",
      "answer": "In order to detect the creation of a named pipe as used by CobaltStrike, you should: Focus on monitoring the creation of Windows named pipes which could indicate malicious activity. Ensure your monitoring tools, especially those analyzing logs from Windows systems, are configured to capture Named Pipe Events, specifically looking for Event IDs 17 and 18 in Sysmon logs. This requires verifying if your Sysmon configuration actively logs these events, and adjustments might be necessary using popular configurations found on GitHub. \n\nDuring detection, pay close attention to the pipe names. If a pipe name contains both '\\MSSE-' and '-server', starts with '\\postex_', '\\status_', '\\msagent_', '\\mojo_', '\\interprocess_', '\\samr_', '\\netlogon_', '\\srvsvc_', '\\lsarpc_', '\\wkssvc_', it could indicate a compromised system. These specific patterns are chosen because they are commonly utilized by Cobalt Strike and other malware to establish communication channels on the infected host.\n\nRemember that while this strategy is critical for identifying potential threats, there might be cases where legitimate software uses similar named pipes, leading to unknown false positives. Thus, it\u2019s crucial to analyze detections within the broader context of behavior on the system to accurately identify malicious activity."
    }
  },
  {
    "instruction": "How to detect: suspicious processes based on name and location that access the browser credential stores which can be the sign of credential stealing",
    "context": "",
    "output": "In order to detect suspicious processes based on name and location that access the browser credential stores which can be the sign of credential stealing, you should monitor file access logs, particularly focusing on the Microsoft-Windows-Kernel-File Event Tracing for Windows (ETW) provider on Windows systems. Pay special attention to the activity involving specific files known to contain browser credentials. For Internet Explorer, watch for access to '\\Appdata\\Local\\Microsoft\\Windows\\WebCache\\WebCacheV01.dat'. For Firefox, be alert for interactions with '\\cookies.sqlite', 'release\\key3.db', 'release\\key4.db', and 'release\\logins.json'. In the case of Chromium-based browsers like Google Chrome, look for access patterns involving '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies', '\\Appdata\\Local\\Chrome\\User Data\\Default\\Login Data', and '\\AppData\\Local\\Google\\Chrome\\User Data\\Local State'.\n\nExclude activities initiated by the system processes, idle parent processes, and well-known directories such as 'C:\\Program Files\\', 'C:\\Program Files (x86)\\', 'C:\\WINDOWS\\system32\\', and 'C:\\WINDOWS\\SysWOW64\\'. Additionally, apply filters to exclude common false positives like antivirus or anti-malware software processes, especially those starting with 'C:\\ProgramData\\Microsoft\\Windows Defender\\' and including 'MpCopyAccelerator.exe' or 'MsMpEng.exe'. Also, consider excluding processes like 'thor64.exe', 'thor.exe', and any child processes of 'C:\\Windows\\System32\\msiexec.exe' to minimize noise from legitimate software and maintenance tools.\n\nThis approach helps in identifying potentially malicious activities aimed at stealing credentials from browsers by narrowing down the focus to unusual file access patterns while filtering out expected behavior from system and known good software processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious processes based on name and location that access the browser credential stores which can be the sign of credential stealing",
      "answer": "In order to detect suspicious processes based on name and location that access the browser credential stores which can be the sign of credential stealing, you should monitor file access logs, particularly focusing on the Microsoft-Windows-Kernel-File Event Tracing for Windows (ETW) provider on Windows systems. Pay special attention to the activity involving specific files known to contain browser credentials. For Internet Explorer, watch for access to '\\Appdata\\Local\\Microsoft\\Windows\\WebCache\\WebCacheV01.dat'. For Firefox, be alert for interactions with '\\cookies.sqlite', 'release\\key3.db', 'release\\key4.db', and 'release\\logins.json'. In the case of Chromium-based browsers like Google Chrome, look for access patterns involving '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies', '\\Appdata\\Local\\Chrome\\User Data\\Default\\Login Data', and '\\AppData\\Local\\Google\\Chrome\\User Data\\Local State'.\n\nExclude activities initiated by the system processes, idle parent processes, and well-known directories such as 'C:\\Program Files\\', 'C:\\Program Files (x86)\\', 'C:\\WINDOWS\\system32\\', and 'C:\\WINDOWS\\SysWOW64\\'. Additionally, apply filters to exclude common false positives like antivirus or anti-malware software processes, especially those starting with 'C:\\ProgramData\\Microsoft\\Windows Defender\\' and including 'MpCopyAccelerator.exe' or 'MsMpEng.exe'. Also, consider excluding processes like 'thor64.exe', 'thor.exe', and any child processes of 'C:\\Windows\\System32\\msiexec.exe' to minimize noise from legitimate software and maintenance tools.\n\nThis approach helps in identifying potentially malicious activities aimed at stealing credentials from browsers by narrowing down the focus to unusual file access patterns while filtering out expected behavior from system and known good software processes."
    }
  },
  {
    "instruction": "Please help me detect the following: This method detects mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups)",
    "context": "",
    "output": "Sure!\nIn order to detect mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups), you should: Monitor Windows event logs for specific keywords that are indicative of Mimikatz use. These keywords include 'dpapi::masterkey', 'eo.oe.kiwi', 'event::clear', 'event::drop', 'gentilkiwi.com', 'kerberos::golden', 'kerberos::ptc', 'kerberos::ptt', 'kerberos::tgt', 'Kiwi Legit Printer', 'lsadump::', 'mimidrv.sys', '\\mimilib.dll', 'misc::printnightmare', 'misc::shadowcopies', 'misc::skeleton', 'privilege::backup', 'privilege::debug', 'privilege::driver', and 'sekurlsa::'. It is vital to exclude false positives that could trigger these alerts, such as actions by system administrators, antivirus signature updates, or files innocently named after Mimikatz. These criteria mainly concern monitoring Sysmon's FileStream events, specifically avoiding EventID 15 due to its potential for false positives. The focus on these specific keywords and exclusions is because they are tied with various tactics and techniques used in attacks, like credential dumping, obtaining sensitive information, and privilege escalation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This method detects mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups)",
      "answer": "In order to detect mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups), you should: Monitor Windows event logs for specific keywords that are indicative of Mimikatz use. These keywords include 'dpapi::masterkey', 'eo.oe.kiwi', 'event::clear', 'event::drop', 'gentilkiwi.com', 'kerberos::golden', 'kerberos::ptc', 'kerberos::ptt', 'kerberos::tgt', 'Kiwi Legit Printer', 'lsadump::', 'mimidrv.sys', '\\mimilib.dll', 'misc::printnightmare', 'misc::shadowcopies', 'misc::skeleton', 'privilege::backup', 'privilege::debug', 'privilege::driver', and 'sekurlsa::'. It is vital to exclude false positives that could trigger these alerts, such as actions by system administrators, antivirus signature updates, or files innocently named after Mimikatz. These criteria mainly concern monitoring Sysmon's FileStream events, specifically avoiding EventID 15 due to its potential for false positives. The focus on these specific keywords and exclusions is because they are tied with various tactics and techniques used in attacks, like credential dumping, obtaining sensitive information, and privilege escalation."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of Net.exe, whether suspicious or benign.",
    "context": "",
    "output": "In order to detect execution of Net.exe, whether suspicious or benign, you should monitor process creation events on Windows systems. Specifically, pay attention to any process creation events where the image path ends with '\\net.exe' or '\\net1.exe', or when the original filename is explicitly 'net.exe' or 'net1.exe'. Additionally, be vigilant for command lines containing keywords such as 'group', 'localgroup', 'user', 'view', 'share', 'accounts', 'stop ', or 'start'. These indicators are important because they represent common utilities or commands associated with network configuration and user management, which could be abused by attackers for reconnaissance, lateral movement, or maintaining access. Each event should capture vital information such as the computer name, the user initiating the process, the full command line used, and the command line of the parent process. It's important to note that while this detection strategy can identify potential misuse of net.exe, false positives are possible. As such, tuning and further investigation may be necessary, particularly using statistical analysis by computer and command line, to accurately identify malicious activity without overwhelming the security team with false alarms. The detection aligns with tactics and techniques such as Execution, Persistence, Privilege Escalation, and Discovery, providing a broad coverage of possible malicious intents behind the execution of Net.exe.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Net.exe, whether suspicious or benign.",
      "answer": "In order to detect execution of Net.exe, whether suspicious or benign, you should monitor process creation events on Windows systems. Specifically, pay attention to any process creation events where the image path ends with '\\net.exe' or '\\net1.exe', or when the original filename is explicitly 'net.exe' or 'net1.exe'. Additionally, be vigilant for command lines containing keywords such as 'group', 'localgroup', 'user', 'view', 'share', 'accounts', 'stop ', or 'start'. These indicators are important because they represent common utilities or commands associated with network configuration and user management, which could be abused by attackers for reconnaissance, lateral movement, or maintaining access. Each event should capture vital information such as the computer name, the user initiating the process, the full command line used, and the command line of the parent process. It's important to note that while this detection strategy can identify potential misuse of net.exe, false positives are possible. As such, tuning and further investigation may be necessary, particularly using statistical analysis by computer and command line, to accurately identify malicious activity without overwhelming the security team with false alarms. The detection aligns with tactics and techniques such as Execution, Persistence, Privilege Escalation, and Discovery, providing a broad coverage of possible malicious intents behind the execution of Net.exe."
    }
  },
  {
    "instruction": "How can I detect: execution of UACMe, a tool used for UAC bypasses, via default PE metadata",
    "context": "",
    "output": "In order to detect the execution of UACMe, a tool used for UAC bypasses, via default PE metadata, you should: \n\nFocus on monitoring the creation of processes on Windows systems, as this could indicate the execution of potentially malicious software. Look for the following indicators to accurately identify the potential use of the UACMe tool:\n\n1. Examine the process execution logs for any executables originating from a product named 'UACMe', or from companies such as 'REvol Corp', 'APT 92', 'UG North', 'Hazardous Environments', or 'CD Project Rekt'. These can be a direct sign of UACMe tool usage.\n\n2. Search for descriptions related to 'UACMe main module' or 'Pentesting utility' within the executable\u2019s metadata. Presence of these descriptions in process creation logs may suggest an attempt to bypass User Account Control (UAC).\n\n3. Monitor for specific filenames associated with UACMe, such as 'Akagi.exe' and 'Akagi64.exe'. These filenames are critical markers for detecting UACMe's execution.\n\n4. In environments where Sysmon is deployed, pay attention to processes with specific import hash values (IMPHASH). The list of IMPHASH values - like '767637C23BB42CD5D7397CF58B0BE688', '14C4E4C72BA075E9069EE67F39188AD8', and several others provided - are directly associated with known UACMe hashes. Identifying processes with these hash values can significantly increase the accuracy of UACMe detection.\n\n5. For environments that do not use Sysmon, still, consider focusing on the same IMPHASH values for any possible way they might be tracked. These hash values are essential identifiers for recognizing UACMe's footprint in the system.\n\nTo improve detection accuracy, be aware that any single indicator might not conclusively prove malicious activity; therefore, correlating multiple detection points is recommended. Additionally, while tracking these indicators, maintain awareness of potential false positives, as they are unknown due to the diversity of legitimate software that might accidentally match some of the described criteria. The level of threat associated with these detections is considered high, indicating that any matches should prompt immediate investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of UACMe, a tool used for UAC bypasses, via default PE metadata",
      "answer": "In order to detect the execution of UACMe, a tool used for UAC bypasses, via default PE metadata, you should: \n\nFocus on monitoring the creation of processes on Windows systems, as this could indicate the execution of potentially malicious software. Look for the following indicators to accurately identify the potential use of the UACMe tool:\n\n1. Examine the process execution logs for any executables originating from a product named 'UACMe', or from companies such as 'REvol Corp', 'APT 92', 'UG North', 'Hazardous Environments', or 'CD Project Rekt'. These can be a direct sign of UACMe tool usage.\n\n2. Search for descriptions related to 'UACMe main module' or 'Pentesting utility' within the executable\u2019s metadata. Presence of these descriptions in process creation logs may suggest an attempt to bypass User Account Control (UAC).\n\n3. Monitor for specific filenames associated with UACMe, such as 'Akagi.exe' and 'Akagi64.exe'. These filenames are critical markers for detecting UACMe's execution.\n\n4. In environments where Sysmon is deployed, pay attention to processes with specific import hash values (IMPHASH). The list of IMPHASH values - like '767637C23BB42CD5D7397CF58B0BE688', '14C4E4C72BA075E9069EE67F39188AD8', and several others provided - are directly associated with known UACMe hashes. Identifying processes with these hash values can significantly increase the accuracy of UACMe detection.\n\n5. For environments that do not use Sysmon, still, consider focusing on the same IMPHASH values for any possible way they might be tracked. These hash values are essential identifiers for recognizing UACMe's footprint in the system.\n\nTo improve detection accuracy, be aware that any single indicator might not conclusively prove malicious activity; therefore, correlating multiple detection points is recommended. Additionally, while tracking these indicators, maintain awareness of potential false positives, as they are unknown due to the diversity of legitimate software that might accidentally match some of the described criteria. The level of threat associated with these detections is considered high, indicating that any matches should prompt immediate investigation."
    }
  },
  {
    "instruction": "Please help me detect the following: Windows Installer service (msiexec.exe) trying to install MSI packages with SYSTEM privilege",
    "context": "",
    "output": "Sure!\nIn order to detect Windows Installer service (msiexec.exe) trying to install MSI packages with SYSTEM privilege, you should monitor Windows process creation logs for certain conditions indicating a potentially unauthorized or malicious MSI installation attempt. Specifically, observe for processes initiated by users containing 'AUTHORI' or 'AUTORI' in their names, reflecting variations in language settings that may indicate the use of privileged account names. Look for processes where the image path includes '\\Windows\\Installer\\' and ends with 'tmp', or where the image path specifically ends with '\\msiexec.exe' running at 'System' integrity level, signaling the execution of the Windows Installer service in a manner that might suggest elevation of privilege.\n\nExclude detections where the parent image initiating the process is 'C:\\Windows\\System32\\services.exe', as this may indicate a legitimate system activity. Also, disregard instances where the command line ends with '\\system32\\msiexec.exe /V', or the parent command line ends similarly, as this might denote a repair option being used, which is generally considered safe. Additionally, process creations originating from directories associated with known antivirus products like Sophos, Avira, Avast, and Google Update processes should also be excluded to minimize false positives.\n\nBe mindful of legitimate system administrator activities or antimalware software operations, as these might produce similar logs but are considered benign. Moreover, any process creations stemming from the \"C:\\Program Files\\WindowsApps\\\" directory should be treated cautiously as they might be false alarms.\n\nBy applying these criteria, activities that raise security concerns can be isolated, helping to protect the system from unauthorized access or modification.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Windows Installer service (msiexec.exe) trying to install MSI packages with SYSTEM privilege",
      "answer": "In order to detect Windows Installer service (msiexec.exe) trying to install MSI packages with SYSTEM privilege, you should monitor Windows process creation logs for certain conditions indicating a potentially unauthorized or malicious MSI installation attempt. Specifically, observe for processes initiated by users containing 'AUTHORI' or 'AUTORI' in their names, reflecting variations in language settings that may indicate the use of privileged account names. Look for processes where the image path includes '\\Windows\\Installer\\' and ends with 'tmp', or where the image path specifically ends with '\\msiexec.exe' running at 'System' integrity level, signaling the execution of the Windows Installer service in a manner that might suggest elevation of privilege.\n\nExclude detections where the parent image initiating the process is 'C:\\Windows\\System32\\services.exe', as this may indicate a legitimate system activity. Also, disregard instances where the command line ends with '\\system32\\msiexec.exe /V', or the parent command line ends similarly, as this might denote a repair option being used, which is generally considered safe. Additionally, process creations originating from directories associated with known antivirus products like Sophos, Avira, Avast, and Google Update processes should also be excluded to minimize false positives.\n\nBe mindful of legitimate system administrator activities or antimalware software operations, as these might produce similar logs but are considered benign. Moreover, any process creations stemming from the \"C:\\Program Files\\WindowsApps\\\" directory should be treated cautiously as they might be false alarms.\n\nBy applying these criteria, activities that raise security concerns can be isolated, helping to protect the system from unauthorized access or modification."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious processes including shells spawnd from WinRM host process",
    "context": "",
    "output": "In order to detect suspicious processes including shells spawned from WinRM host process, you should: Identify the creation of processes on Windows systems with a focus on instances where certain command-line tools or shells (such as cmd.exe, sh.exe, bash.exe, powershell.exe, pwsh.exe, wsl.exe, schtasks.exe, certutil.exe, whoami.exe, or bitsadmin.exe) are initiated from a parent process named wsmprovhost.exe. This activity is significant as it might indicate an attacker leveraging Windows Remote Management (WinRM) to execute commands or scripts remotely, which can be a part of various attack tactics like execution, privilege escalation, or lateral movement. It is crucial, however, to consider that not all matches will indicate malicious activity; legitimate administrative use of WinRM which includes similar process creation patterns could be erroneously detected, thus, being mindful of potential legitimate uses of WinRM in the environment is essential. The rule carries a high level of importance due to the severity of the underlying behavior it aims to detect.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious processes including shells spawnd from WinRM host process",
      "answer": "In order to detect suspicious processes including shells spawned from WinRM host process, you should: Identify the creation of processes on Windows systems with a focus on instances where certain command-line tools or shells (such as cmd.exe, sh.exe, bash.exe, powershell.exe, pwsh.exe, wsl.exe, schtasks.exe, certutil.exe, whoami.exe, or bitsadmin.exe) are initiated from a parent process named wsmprovhost.exe. This activity is significant as it might indicate an attacker leveraging Windows Remote Management (WinRM) to execute commands or scripts remotely, which can be a part of various attack tactics like execution, privilege escalation, or lateral movement. It is crucial, however, to consider that not all matches will indicate malicious activity; legitimate administrative use of WinRM which includes similar process creation patterns could be erroneously detected, thus, being mindful of potential legitimate uses of WinRM in the environment is essential. The rule carries a high level of importance due to the severity of the underlying behavior it aims to detect."
    }
  },
  {
    "instruction": "How can I detect: logon events that specify new credentials",
    "context": "",
    "output": "In order to detect logon events that specify new credentials, you should monitor for specific events in the Windows Security logs. Look for events with EventID 4624, which represent successful logon events. Specifically, focus on those logon events that are of LogonType 9, indicating a new logon session has been created with different credentials than the account that initiated the action. This activity could potentially signal unauthorized access or malicious intent, as it might be used to execute commands or actions while masquerading as a different user. It's important to note, however, that this behavior could also be attributed to legitimate remote administration activities. As such, any detection at this level should be considered with caution and investigated further to rule out or confirm malicious intent. The tagged tactics and techniques primarily relate to Credential Access and Lateral Movement, given the nature of the detection focusing on the misuse or unusual use of login credentials.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "logon events that specify new credentials",
      "answer": "In order to detect logon events that specify new credentials, you should monitor for specific events in the Windows Security logs. Look for events with EventID 4624, which represent successful logon events. Specifically, focus on those logon events that are of LogonType 9, indicating a new logon session has been created with different credentials than the account that initiated the action. This activity could potentially signal unauthorized access or malicious intent, as it might be used to execute commands or actions while masquerading as a different user. It's important to note, however, that this behavior could also be attributed to legitimate remote administration activities. As such, any detection at this level should be considered with caution and investigated further to rule out or confirm malicious intent. The tagged tactics and techniques primarily relate to Credential Access and Lateral Movement, given the nature of the detection focusing on the misuse or unusual use of login credentials."
    }
  },
  {
    "instruction": "How to detect: exploitation of the WebLogic server vulnerability described in CVE-2021-2109",
    "context": "",
    "output": "In order to detect the exploitation of the WebLogic server vulnerability described in CVE-2021-2109, you should: Monitor webserver logs for GET requests that contain specific indicators within the query string. Look for the presence of 'com.bea.console.handles.JndiBindingHandle', 'ldap://', and 'AdminServer' all together in the URI query. These elements are suggestive of an attempt to exploit the mentioned vulnerability. It is essential to capture the client's IP address and DNS name (if available) as part of the investigation process. While implementing this detection strategy, be aware that there might be unknown situations that could lead to false positives, yet due to the critical level of this rule, such alerts should be investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of the WebLogic server vulnerability described in CVE-2021-2109",
      "answer": "In order to detect the exploitation of the WebLogic server vulnerability described in CVE-2021-2109, you should: Monitor webserver logs for GET requests that contain specific indicators within the query string. Look for the presence of 'com.bea.console.handles.JndiBindingHandle', 'ldap://', and 'AdminServer' all together in the URI query. These elements are suggestive of an attempt to exploit the mentioned vulnerability. It is essential to capture the client's IP address and DNS name (if available) as part of the investigation process. While implementing this detection strategy, be aware that there might be unknown situations that could lead to false positives, yet due to the critical level of this rule, such alerts should be investigated promptly."
    }
  },
  {
    "instruction": "How to detect: Mesh Agent service installation. Mesh Agent is used to remotely manage computers",
    "context": "",
    "output": "In order to detect a Mesh Agent service installation, which is used to remotely manage computers, you should: Focus on monitoring Windows System service logs. Specifically, look for events generated by the Service Control Manager with an Event ID of 7045. This Event ID signifies service installations, among which the Mesh Agent, a tool for remote management, might be of particular interest. Detection is based on two primary indicators: the presence of 'MeshAgent.exe' in the ImagePath of the newly installed service and the inclusion of 'Mesh Agent' in the ServiceName. Both conditions must be met to consider the event potentially malicious. It is important to note, however, that there may be legitimate uses of the Mesh Agent tool, and such instances should be considered as potential false positives. The level of concern for this activity is classified as medium, reflecting the need for further investigation upon detection. The tags associated with this detection are 'Persistence', 'Privilege Escalation', and 'Execution' as it relates to the MITRE ATT&CK tactics, highlighting the possible malicious use of the Mesh Agent in gaining persistent access, elevating privileges, or executing commands remotely on a victim's machine.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Mesh Agent service installation. Mesh Agent is used to remotely manage computers",
      "answer": "In order to detect a Mesh Agent service installation, which is used to remotely manage computers, you should: Focus on monitoring Windows System service logs. Specifically, look for events generated by the Service Control Manager with an Event ID of 7045. This Event ID signifies service installations, among which the Mesh Agent, a tool for remote management, might be of particular interest. Detection is based on two primary indicators: the presence of 'MeshAgent.exe' in the ImagePath of the newly installed service and the inclusion of 'Mesh Agent' in the ServiceName. Both conditions must be met to consider the event potentially malicious. It is important to note, however, that there may be legitimate uses of the Mesh Agent tool, and such instances should be considered as potential false positives. The level of concern for this activity is classified as medium, reflecting the need for further investigation upon detection. The tags associated with this detection are 'Persistence', 'Privilege Escalation', and 'Execution' as it relates to the MITRE ATT&CK tactics, highlighting the possible malicious use of the Mesh Agent in gaining persistent access, elevating privileges, or executing commands remotely on a victim's machine."
    }
  },
  {
    "instruction": "Can you explain how to detect: The attacker might use LOLBAS nltest.exe for discovery of domain controllers, domain trusts, parent domain and the current user permissions.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect an attacker using LOLBAS nltest.exe for the discovery of domain controllers, domain trusts, parent domain, and the current user permissions, you should monitor Windows security service logs for specific activities. Focus on identifying events with Event ID 4689, which indicates a process has exited, especially concerning the process nltest.exe. This utility, when part of a command execution that successfully completes (indicated by Status '0x0'), could be employed by an adversary to gather sensitive information about the network's architecture and access rights. Pay particular attention to the logs capturing the 'SubjectUserName' and 'SubjectDomainName' fields, as these will provide context about who initiated the process. Be aware that while high alert levels are justified due to the potential for malicious intent, there could be false positives such as red team activities or rare legitimate uses by administrators. Through this focused monitoring, malicious activities related to domain discovery can be effectively flagged and investigated.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The attacker might use LOLBAS nltest.exe for discovery of domain controllers, domain trusts, parent domain and the current user permissions.",
      "answer": "In order to detect an attacker using LOLBAS nltest.exe for the discovery of domain controllers, domain trusts, parent domain, and the current user permissions, you should monitor Windows security service logs for specific activities. Focus on identifying events with Event ID 4689, which indicates a process has exited, especially concerning the process nltest.exe. This utility, when part of a command execution that successfully completes (indicated by Status '0x0'), could be employed by an adversary to gather sensitive information about the network's architecture and access rights. Pay particular attention to the logs capturing the 'SubjectUserName' and 'SubjectDomainName' fields, as these will provide context about who initiated the process. Be aware that while high alert levels are justified due to the potential for malicious intent, there could be false positives such as red team activities or rare legitimate uses by administrators. Through this focused monitoring, malicious activities related to domain discovery can be effectively flagged and investigated."
    }
  },
  {
    "instruction": "Explain how should I detect the following: non-sysinternals tools setting the \"accepteula\" key which normally is set on sysinternals tool execution",
    "context": "",
    "output": "In order to detect non-sysinternals tools setting the \"accepteula\" key which normally is set on sysinternals tool execution, you should: Monitor Windows Registry modification events specifically targeting the registry key changes where the EventType is SetValue. Look out for modifications to TargetObjects that contain or have suffixes related to a set of specific tools - namely PsExec, ProcDump, Handle, LiveKd, Process Explorer, PsLoglist, PsPasswd, and Active Directory Explorer. These modifications become particularly suspicious when the TargetObject ends with '\\EulaAccepted'. Additionally, take into account instances where the main image name ends with specific executables associated with the listed tools, both in their standard and 64-bit versions. However, consider the scenario where the reported Image name might be null due to race conditions with some logging tools and exclude these from raising false alarms. This monitoring mechanism is aimed to identify attempts to use different software to mimic or bypass the normal behavior of Sysinternals tools, which typically set a registry key named \"accepteula\" as part of their execution process. This strategy heavily relies on registry set events and excludes known Sysinternals executable names to reduce the likelihood of false positives, which are considered unlikely given the specific nature of the detection criteria. This detailed observation helps in identifying malicious activities that try to exploit or simulate trusted Sysinternals tools by altering registry keys, a tactic often employed in sophisticated attacks aiming to stay under the radar.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "non-sysinternals tools setting the \"accepteula\" key which normally is set on sysinternals tool execution",
      "answer": "In order to detect non-sysinternals tools setting the \"accepteula\" key which normally is set on sysinternals tool execution, you should: Monitor Windows Registry modification events specifically targeting the registry key changes where the EventType is SetValue. Look out for modifications to TargetObjects that contain or have suffixes related to a set of specific tools - namely PsExec, ProcDump, Handle, LiveKd, Process Explorer, PsLoglist, PsPasswd, and Active Directory Explorer. These modifications become particularly suspicious when the TargetObject ends with '\\EulaAccepted'. Additionally, take into account instances where the main image name ends with specific executables associated with the listed tools, both in their standard and 64-bit versions. However, consider the scenario where the reported Image name might be null due to race conditions with some logging tools and exclude these from raising false alarms. This monitoring mechanism is aimed to identify attempts to use different software to mimic or bypass the normal behavior of Sysinternals tools, which typically set a registry key named \"accepteula\" as part of their execution process. This strategy heavily relies on registry set events and excludes known Sysinternals executable names to reduce the likelihood of false positives, which are considered unlikely given the specific nature of the detection criteria. This detailed observation helps in identifying malicious activities that try to exploit or simulate trusted Sysinternals tools by altering registry keys, a tactic often employed in sophisticated attacks aiming to stay under the radar."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of a renamed AutoIt2.exe or AutoIt3.exe.\nAutoIt is a scripting language and automation tool for Windows systems. While primarily used for legitimate automation tasks, it can be misused in cyber attacks.\nAttackers can leverage AutoIt to create and distribute malware, including keyloggers, spyware, and botnets. A renamed AutoIt executable is particularly suspicious.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of a renamed AutoIt2.exe or AutoIt3.exe, you should: focus on Windows process creation logs to identify suspicious activity. Look for processes that have been started with command line parameters indicative of AutoIt scripts, such as '/AutoIt3ExecuteScript' and '/ErrorStdOut'. Additionally, pay attention to processes with specific import hash (imphash) values that denote AutoIt v2, even though not all binaries are covered by these hashes. Specifically, watch out for the imphash values 'fdc554b3a8683918d731685855683ddf' and 'cd30a61b60b3d60cecdb034c8c83c290'. Also, be alert for processes originally named 'AutoIt3.exe' or 'AutoIt2.exe', signifying potential misuse of the AutoIt automation tool. It's crucial to exclude legitimate uses of AutoIt by filtering out known safe instances that include 'AutoIt' in their image path. This approach aims to minimize false positives while providing robust detection capabilities against attackers leveraging AutoIt for malicious purposes such as keyloggers, spyware, and botnets.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a renamed AutoIt2.exe or AutoIt3.exe.\nAutoIt is a scripting language and automation tool for Windows systems. While primarily used for legitimate automation tasks, it can be misused in cyber attacks.\nAttackers can leverage AutoIt to create and distribute malware, including keyloggers, spyware, and botnets. A renamed AutoIt executable is particularly suspicious.\n",
      "answer": "In order to detect the execution of a renamed AutoIt2.exe or AutoIt3.exe, you should: focus on Windows process creation logs to identify suspicious activity. Look for processes that have been started with command line parameters indicative of AutoIt scripts, such as '/AutoIt3ExecuteScript' and '/ErrorStdOut'. Additionally, pay attention to processes with specific import hash (imphash) values that denote AutoIt v2, even though not all binaries are covered by these hashes. Specifically, watch out for the imphash values 'fdc554b3a8683918d731685855683ddf' and 'cd30a61b60b3d60cecdb034c8c83c290'. Also, be alert for processes originally named 'AutoIt3.exe' or 'AutoIt2.exe', signifying potential misuse of the AutoIt automation tool. It's crucial to exclude legitimate uses of AutoIt by filtering out known safe instances that include 'AutoIt' in their image path. This approach aims to minimize false positives while providing robust detection capabilities against attackers leveraging AutoIt for malicious purposes such as keyloggers, spyware, and botnets."
    }
  },
  {
    "instruction": "Please help me detect the following: bulk downloading of User Data associated with AWS EC2 instances. Instance User Data may include installation scripts and hard-coded secrets for deployment.",
    "context": "",
    "output": "Sure!\nIn order to detect bulk downloading of User Data associated with AWS EC2 instances. Instance User Data may include installation scripts and hard-coded secrets for deployment, you should: Monitor the AWS CloudTrail logs for activities targeting the EC2 service, particularly focusing on event sources that come from EC2 (ec2.amazonaws.com) and involve the retrieval of instance attributes, especially the 'userData'. Specifically, watch for the 'DescribeInstanceAttribute' event. If occurrences of this event exceed 10 within a 30-minute window, it should be considered suspicious, as it may indicate an attempt to harvest User Data from multiple instances. This kind of activity could potentially expose sensitive information included in the User Data, such as deployment scripts or hard-coded secrets. Be aware that while monitoring for these activities, certain legitimate asset management software, like device42, may also access this information regularly, which could lead to false-positive alerts. Hence, it would be prudent to account for known asset management tools when configuring the detection logic. The severity level for this type of activity is considered medium, demonstrating a balance between the commonplace nature of data access events and the significant security risk associated with unauthorized bulk data retrieval.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "bulk downloading of User Data associated with AWS EC2 instances. Instance User Data may include installation scripts and hard-coded secrets for deployment.",
      "answer": "In order to detect bulk downloading of User Data associated with AWS EC2 instances. Instance User Data may include installation scripts and hard-coded secrets for deployment, you should: Monitor the AWS CloudTrail logs for activities targeting the EC2 service, particularly focusing on event sources that come from EC2 (ec2.amazonaws.com) and involve the retrieval of instance attributes, especially the 'userData'. Specifically, watch for the 'DescribeInstanceAttribute' event. If occurrences of this event exceed 10 within a 30-minute window, it should be considered suspicious, as it may indicate an attempt to harvest User Data from multiple instances. This kind of activity could potentially expose sensitive information included in the User Data, such as deployment scripts or hard-coded secrets. Be aware that while monitoring for these activities, certain legitimate asset management software, like device42, may also access this information regularly, which could lead to false-positive alerts. Hence, it would be prudent to account for known asset management tools when configuring the detection logic. The severity level for this type of activity is considered medium, demonstrating a balance between the commonplace nature of data access events and the significant security risk associated with unauthorized bulk data retrieval."
    }
  },
  {
    "instruction": "How can I detect: changes to the AppInstaller (winget) admin settings. Such as enabling local manifest installations or disabling installer hash checks",
    "context": "",
    "output": "In order to detect changes to the AppInstaller (winget) admin settings, such as enabling local manifest installations or disabling installer hash checks, you should monitor Windows registry settings. Specifically, look for events where the type is \"SetValue\" indicating a modification has been made. This event should originate from an executable path ending with '\\winget.exe', ensuring the modification is related to the AppInstaller. Additionally, ensure the target object of this modification begins with '\\REGISTRY\\A\\' and ends with '\\LocalState\\admin_settings', pinpointing the specific part of the registry where admin settings for the AppInstaller are stored. Be aware that these detections might include false positives because the event doesn't specify the type of change made; thus, legitimate modifications to these settings could also trigger alerts. The importance of monitoring these modifications is categorized as low level, indicating they should be tracked but are not typically critical security issues on their own. However, vigilance in detecting these changes is crucial as they relate to the modification of admin settings that could potentially enable actions like local manifest installations or disable installer hash checks, presenting security risks if altered maliciously.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the AppInstaller (winget) admin settings. Such as enabling local manifest installations or disabling installer hash checks",
      "answer": "In order to detect changes to the AppInstaller (winget) admin settings, such as enabling local manifest installations or disabling installer hash checks, you should monitor Windows registry settings. Specifically, look for events where the type is \"SetValue\" indicating a modification has been made. This event should originate from an executable path ending with '\\winget.exe', ensuring the modification is related to the AppInstaller. Additionally, ensure the target object of this modification begins with '\\REGISTRY\\A\\' and ends with '\\LocalState\\admin_settings', pinpointing the specific part of the registry where admin settings for the AppInstaller are stored. Be aware that these detections might include false positives because the event doesn't specify the type of change made; thus, legitimate modifications to these settings could also trigger alerts. The importance of monitoring these modifications is categorized as low level, indicating they should be tracked but are not typically critical security issues on their own. However, vigilance in detecting these changes is crucial as they relate to the modification of admin settings that could potentially enable actions like local manifest installations or disable installer hash checks, presenting security risks if altered maliciously."
    }
  },
  {
    "instruction": "Please help me detect the following: regsvr32 execution to download and install DLLs located remotely where the address is an IP address.",
    "context": "",
    "output": "Sure!\nIn order to detect regsvr32 execution to download and install DLLs located remotely where the address is an IP address, you should monitor for process creations on Windows systems, especially focused on the execution of regsvr32.exe. This involves checking if the process image name ends with '\\regsvr32.exe' or the original file is named 'REGSVR32.EXE'. Additionally, pay attention to command-line executions that attempt to invoke regsvr32 with the '/i:' or '-i:' options followed by 'http://' or 'https://' URLs that start directly with digits (indicating direct IP address usage rather than domain names) from '1' to '9'. This detection strategy is critical since attackers might use regsvr32, a legitimate Windows utility, to download remote DLLs for malicious purposes, leveraging the fact that IP addresses starting with numbers could be used to bypass less sophisticated security measures. Be mindful of potential false positives which could arise from legitimate applications named similarly or using IP addresses in their normal operations, such as \"7-Zip\". This approach corresponds to a high alert level due to the serious implications of allowing unauthorized DLL downloads and executions via regsvr32.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "regsvr32 execution to download and install DLLs located remotely where the address is an IP address.",
      "answer": "In order to detect regsvr32 execution to download and install DLLs located remotely where the address is an IP address, you should monitor for process creations on Windows systems, especially focused on the execution of regsvr32.exe. This involves checking if the process image name ends with '\\regsvr32.exe' or the original file is named 'REGSVR32.EXE'. Additionally, pay attention to command-line executions that attempt to invoke regsvr32 with the '/i:' or '-i:' options followed by 'http://' or 'https://' URLs that start directly with digits (indicating direct IP address usage rather than domain names) from '1' to '9'. This detection strategy is critical since attackers might use regsvr32, a legitimate Windows utility, to download remote DLLs for malicious purposes, leveraging the fact that IP addresses starting with numbers could be used to bypass less sophisticated security measures. Be mindful of potential false positives which could arise from legitimate applications named similarly or using IP addresses in their normal operations, such as \"7-Zip\". This approach corresponds to a high alert level due to the serious implications of allowing unauthorized DLL downloads and executions via regsvr32."
    }
  },
  {
    "instruction": "How to detect: Identifies when secrets are modified or deleted in Azure.",
    "context": "",
    "output": "In order to identify when secrets are modified or deleted in Azure, you should monitor Azure activity logs for specific operations on Key Vault secrets. The operations that need to be watched include writing new secrets, deleting existing secrets, backing up, purging, updating, recovering, restoring, and setting secrets within the Azure Key Vault. Each of these operations, such as MICROSOFT.KEYVAULT/VAULTS/SECRETS/WRITE, DELETE, BACKUP/ACTION, PURGE/ACTION, UPDATE/ACTION, RECOVER/ACTION, RESTORE/ACTION, and SETSECRET/ACTION, are crucial indicators of potential unauthorized access or manipulation of sensitive secrets stored in Azure Key Vault.\n\nDetecting these activities involves paying close attention to the operation names within the activity logs. It is also important to note that there may be legitimate reasons for these operations, such as actions performed by system administrators. To reduce the number of false positives, it is advised to verify the user identity, user agent, and hostname associated with these operations to ensure they are authorized to make changes in your environment. Secret modifications or deletions by unfamiliar users warrant further investigation. Known behaviors that lead to false alerts should be documented and possibly exempted to refine detection accuracy.\n\nThis approach is aligned with recognizing potential security incidents related to Credential Access and Defense Evasion, where attackers might attempt to access, delete, or manipulate secrets in the Azure Key Vault to further their access or hide their tracks. Monitoring these operations provides a level of oversight necessary to identify and respond to unauthorized or malicious activities targeting secured secrets.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies when secrets are modified or deleted in Azure.",
      "answer": "In order to identify when secrets are modified or deleted in Azure, you should monitor Azure activity logs for specific operations on Key Vault secrets. The operations that need to be watched include writing new secrets, deleting existing secrets, backing up, purging, updating, recovering, restoring, and setting secrets within the Azure Key Vault. Each of these operations, such as MICROSOFT.KEYVAULT/VAULTS/SECRETS/WRITE, DELETE, BACKUP/ACTION, PURGE/ACTION, UPDATE/ACTION, RECOVER/ACTION, RESTORE/ACTION, and SETSECRET/ACTION, are crucial indicators of potential unauthorized access or manipulation of sensitive secrets stored in Azure Key Vault.\n\nDetecting these activities involves paying close attention to the operation names within the activity logs. It is also important to note that there may be legitimate reasons for these operations, such as actions performed by system administrators. To reduce the number of false positives, it is advised to verify the user identity, user agent, and hostname associated with these operations to ensure they are authorized to make changes in your environment. Secret modifications or deletions by unfamiliar users warrant further investigation. Known behaviors that lead to false alerts should be documented and possibly exempted to refine detection accuracy.\n\nThis approach is aligned with recognizing potential security incidents related to Credential Access and Defense Evasion, where attackers might attempt to access, delete, or manipulate secrets in the Azure Key Vault to further their access or hide their tracks. Monitoring these operations provides a level of oversight necessary to identify and respond to unauthorized or malicious activities targeting secured secrets."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of PowerShell via creation of named pipe starting with PSHost",
    "context": "",
    "output": "In order to detect execution of PowerShell via creation of named pipe starting with PSHost, you should: Focus on monitoring the creation of named pipes in Windows environments, specifically looking for any instances where the pipe name begins with '\\PSHost'. This detection requires you to have logging for Named Pipe Events enabled in your Sysmon configuration, particularly looking out for Event ID 17 and Event ID 18. It's recommended to use or verify against popular Sysmon configurations available online, such as those by SwiftOnSecurity, Neo23x0, or Olaf Hartong. These configurations need to be in place as they are instrumental in capturing the required event data. Testing the detection can be achieved through the use of specific PowerShell scripts designed to simulate named pipe creation that follows the patterns attackers might use. It's important to note that while this method aims to identify malicious activity related to PowerShell execution, the possibility of encountering unknown false positives exists - meaning that not all detections might represent genuine threats. The focus is on providing informational level insights into potential suspicious activities involving PowerShell and named pipes, aiding in the broader strategy of mitigating tactics that involve the execution and automation based on PowerShell scripts, particularly those initiated by adversaries through named pipes that adhere to a naming convention starting with 'PSHost'.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of PowerShell via creation of named pipe starting with PSHost",
      "answer": "In order to detect execution of PowerShell via creation of named pipe starting with PSHost, you should: Focus on monitoring the creation of named pipes in Windows environments, specifically looking for any instances where the pipe name begins with '\\PSHost'. This detection requires you to have logging for Named Pipe Events enabled in your Sysmon configuration, particularly looking out for Event ID 17 and Event ID 18. It's recommended to use or verify against popular Sysmon configurations available online, such as those by SwiftOnSecurity, Neo23x0, or Olaf Hartong. These configurations need to be in place as they are instrumental in capturing the required event data. Testing the detection can be achieved through the use of specific PowerShell scripts designed to simulate named pipe creation that follows the patterns attackers might use. It's important to note that while this method aims to identify malicious activity related to PowerShell execution, the possibility of encountering unknown false positives exists - meaning that not all detections might represent genuine threats. The focus is on providing informational level insights into potential suspicious activities involving PowerShell and named pipes, aiding in the broader strategy of mitigating tactics that involve the execution and automation based on PowerShell scripts, particularly those initiated by adversaries through named pipes that adhere to a naming convention starting with 'PSHost'."
    }
  },
  {
    "instruction": "How to detect: attackers attempting to disable Windows Defender using Powershell",
    "context": "",
    "output": "In order to detect attackers attempting to disable Windows Defender using Powershell, you should monitor the creation of processes on Windows systems for specific activities indicative of attempts to tamper with Windows Defender. Look for invocations of the PowerShell executable ('powershell.exe' or the newer 'pwsh.exe') or references to their original file names ('PowerShell.EXE' or 'pwsh.dll'). Additionally, monitor for PowerShell command lines that attempt to disable behavior or runtime monitoring in an effort to evade detection.\n\nSimultaneously, keep an eye out for usage of the 'sc.exe' command-line utility, specifically commands that attempt to stop, delete, or disable the Windows Defender service (referred to as 'WinDefend'). These commands can be identified through the presence of certain keywords in the command line, such as 'stop WinDefend', 'delete WinDefend', or commands configuring 'WinDefend' to start in a 'disabled' state.\n\nThis strategy aims at identifying potentially malicious activities by watching for specific attempts to interfere with Windows Defender. Given the critical role of Windows Defender in system security, such actions are usually indicative of bad faith, except for some rare false positives. Noteworthy exceptions might occur with certain development tools which may disable Windows Defender to improve performance; however, this practice is not recommended for security reasons.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attackers attempting to disable Windows Defender using Powershell",
      "answer": "In order to detect attackers attempting to disable Windows Defender using Powershell, you should monitor the creation of processes on Windows systems for specific activities indicative of attempts to tamper with Windows Defender. Look for invocations of the PowerShell executable ('powershell.exe' or the newer 'pwsh.exe') or references to their original file names ('PowerShell.EXE' or 'pwsh.dll'). Additionally, monitor for PowerShell command lines that attempt to disable behavior or runtime monitoring in an effort to evade detection.\n\nSimultaneously, keep an eye out for usage of the 'sc.exe' command-line utility, specifically commands that attempt to stop, delete, or disable the Windows Defender service (referred to as 'WinDefend'). These commands can be identified through the presence of certain keywords in the command line, such as 'stop WinDefend', 'delete WinDefend', or commands configuring 'WinDefend' to start in a 'disabled' state.\n\nThis strategy aims at identifying potentially malicious activities by watching for specific attempts to interfere with Windows Defender. Given the critical role of Windows Defender in system security, such actions are usually indicative of bad faith, except for some rare false positives. Noteworthy exceptions might occur with certain development tools which may disable Windows Defender to improve performance; however, this practice is not recommended for security reasons."
    }
  },
  {
    "instruction": "Please help me detect the following: Monitor and alert for users added to device admin roles.",
    "context": "",
    "output": "Sure!\nIn order to monitor and alert for users added to device admin roles, you should focus on analyzing audit logs from Azure services. Specifically, look for logs where the category is set to \"RoleManagement\" and the operation name includes both \"Add\" and \"member to role\". This indicates that an operation was carried out to add a member to a role, which could potentially elevate the user's privileges if the role pertains to device administration. Additionally, pay special attention to operations targeting the resources with identifiers \"7698a772-787b-4ac8-901f-60d6b08affd2\" or \"62e90394-69f5-4237-9190-012177145e10\", as these may be particularly sensitive or critical roles within the Azure environment. Be aware that there could be operations that are flagged as false positives, where the activity might not signify an actual threat or unauthorized access, but rather a legitimate administrative action. The severity level associated with these kinds of detections is considered high, underscoring the importance of monitoring and alerting for such activities due to their potential impact on security posture. This falls within the realm of detecting potential privilege escalation tactics, which are critical to identify early to mitigate possible unauthorized access or malicious actions within your Azure environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Monitor and alert for users added to device admin roles.",
      "answer": "In order to monitor and alert for users added to device admin roles, you should focus on analyzing audit logs from Azure services. Specifically, look for logs where the category is set to \"RoleManagement\" and the operation name includes both \"Add\" and \"member to role\". This indicates that an operation was carried out to add a member to a role, which could potentially elevate the user's privileges if the role pertains to device administration. Additionally, pay special attention to operations targeting the resources with identifiers \"7698a772-787b-4ac8-901f-60d6b08affd2\" or \"62e90394-69f5-4237-9190-012177145e10\", as these may be particularly sensitive or critical roles within the Azure environment. Be aware that there could be operations that are flagged as false positives, where the activity might not signify an actual threat or unauthorized access, but rather a legitimate administrative action. The severity level associated with these kinds of detections is considered high, underscoring the importance of monitoring and alerting for such activities due to their potential impact on security posture. This falls within the realm of detecting potential privilege escalation tactics, which are critical to identify early to mitigate possible unauthorized access or malicious actions within your Azure environment."
    }
  },
  {
    "instruction": "Please help me detect the following: rare scheduled tasks creations that only appear a few times per time frame and could reveal password dumpers, backdoor installs or other types of malicious code",
    "context": "",
    "output": "Sure!\nIn order to detect rare scheduled tasks creations that only appear a few times per timeframe and could reveal password dumpers, backdoor installs or other types of malicious code, you should monitor Windows Security logs for event ID 4698, which signifies the creation of a scheduled task. This monitoring needs to be conducted over a period of 7 days. To accurately capture and analyze these events, ensure that the Advanced Audit Policy setting titled 'Object Access > Audit Other Object Access Events' is configured appropriately, as it is not included in the baseline recommendations by Microsoft. Additionally, it's beneficial to extract the Command field from the embedded XML within the event data for more detailed analysis.\n\nWhen you identify fewer than 5 instances of scheduled task creations (identified by their unique task name) within a 7-day window, it could indicate an attack. Note that while this methodology is aimed at uncovering malicious activities such as the installation of backdoors or execution of password dumpers, it's important to consider potential false positives. Legitimate software installations and updates can also create scheduled tasks, albeit infrequently.\n\nThis detection approach is based on Windows security event logs and is particularly focused on the tactics and techniques of execution, persistence, and privilege escalation. The suspicion level for these findings should be considered low due to the possibility of legitimate activities triggering similar patterns, but it remains a crucial aspect of a comprehensive cybersecurity strategy to identify malicious activities early.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "rare scheduled tasks creations that only appear a few times per time frame and could reveal password dumpers, backdoor installs or other types of malicious code",
      "answer": "In order to detect rare scheduled tasks creations that only appear a few times per timeframe and could reveal password dumpers, backdoor installs or other types of malicious code, you should monitor Windows Security logs for event ID 4698, which signifies the creation of a scheduled task. This monitoring needs to be conducted over a period of 7 days. To accurately capture and analyze these events, ensure that the Advanced Audit Policy setting titled 'Object Access > Audit Other Object Access Events' is configured appropriately, as it is not included in the baseline recommendations by Microsoft. Additionally, it's beneficial to extract the Command field from the embedded XML within the event data for more detailed analysis.\n\nWhen you identify fewer than 5 instances of scheduled task creations (identified by their unique task name) within a 7-day window, it could indicate an attack. Note that while this methodology is aimed at uncovering malicious activities such as the installation of backdoors or execution of password dumpers, it's important to consider potential false positives. Legitimate software installations and updates can also create scheduled tasks, albeit infrequently.\n\nThis detection approach is based on Windows security event logs and is particularly focused on the tactics and techniques of execution, persistence, and privilege escalation. The suspicion level for these findings should be considered low due to the possibility of legitimate activities triggering similar patterns, but it remains a crucial aspect of a comprehensive cybersecurity strategy to identify malicious activities early."
    }
  },
  {
    "instruction": "How to detect: scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket.",
    "context": "",
    "output": "In order to detect scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket, you should: Look for events generated by the OpenSSH service on Windows systems specifically monitoring the logs that come from the service named openssh. Focus particularly on events with an EventID of 4, which signify in this context that the OpenSSH server (sshd) has initiated and is now listening for incoming connections. This is identified by log entries where the payload field begins with the text 'Server listening on '. It's crucial to be aware that there can be legitimate reasons for these events, such as administrator activity setting up the service. These detections are flagged with a medium alert level, indicating a noteworthy but not definitively malicious activity on its own. Recognizing these activities involves understanding their relationship with potential attack methods, specifically those that relate to enabling unauthorized access or command and control capabilities through the SSH protocol.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket.",
      "answer": "In order to detect scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket, you should: Look for events generated by the OpenSSH service on Windows systems specifically monitoring the logs that come from the service named openssh. Focus particularly on events with an EventID of 4, which signify in this context that the OpenSSH server (sshd) has initiated and is now listening for incoming connections. This is identified by log entries where the payload field begins with the text 'Server listening on '. It's crucial to be aware that there can be legitimate reasons for these events, such as administrator activity setting up the service. These detections are flagged with a medium alert level, indicating a noteworthy but not definitively malicious activity on its own. Recognizing these activities involves understanding their relationship with potential attack methods, specifically those that relate to enabling unauthorized access or command and control capabilities through the SSH protocol."
    }
  },
  {
    "instruction": "How can I detect: execution of perl using the \"-e\"/\"-E\" flags. This is could be used as a way to launch a reverse shell or execute live perl code.",
    "context": "",
    "output": "In order to detect execution of perl using the \"-e\"/\"-E\" flags, which could be used as a way to launch a reverse shell or execute live perl code, you should: monitor for the creation of processes on Windows systems, specifically looking for the execution of perl. This involves checking for processes where the image name ends with '\\perl.exe' or the original file name is identified exactly as 'perl.exe', which also covers variations like 'perlX.XX.exe'. Additionally, it's important to scrutinize the command line arguments for any instances containing ' -e', as this flag is commonly used to execute code directly from the command line. If both conditions regarding the image name and command line arguments are met, it likely indicates a potential security threat. Despite this, be aware that there are scenarios where this detection might lead to false positives, though those instances are not clearly defined. The severity level of this rule is considered medium, emphasizing the need for prompt investigation into alerts generated by these conditions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of perl using the \"-e\"/\"-E\" flags. This is could be used as a way to launch a reverse shell or execute live perl code.",
      "answer": "In order to detect execution of perl using the \"-e\"/\"-E\" flags, which could be used as a way to launch a reverse shell or execute live perl code, you should: monitor for the creation of processes on Windows systems, specifically looking for the execution of perl. This involves checking for processes where the image name ends with '\\perl.exe' or the original file name is identified exactly as 'perl.exe', which also covers variations like 'perlX.XX.exe'. Additionally, it's important to scrutinize the command line arguments for any instances containing ' -e', as this flag is commonly used to execute code directly from the command line. If both conditions regarding the image name and command line arguments are met, it likely indicates a potential security threat. Despite this, be aware that there are scenarios where this detection might lead to false positives, though those instances are not clearly defined. The severity level of this rule is considered medium, emphasizing the need for prompt investigation into alerts generated by these conditions."
    }
  },
  {
    "instruction": "How to detect: rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module",
    "context": "",
    "output": "In order to detect rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module, you should: Monitor Windows systems for the creation of processes where the command line involves 'rundll32.exe' or 'rundll32' without any accompanying parameters. This monitoring should be done on systems that are capable of logging process creation events. Specifically, focus on capturing details such as the computer name, the username initiating the process, the exact command line used, and both the image path of the created process and the parent process's image path. Be aware that there might be instances where legitimate use of 'rundll32' without parameters is flagged by this detection approach; these are considered false positives. The significance of carefully monitoring for this activity is high due to its association with a known exploit technique.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module",
      "answer": "In order to detect rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module, you should: Monitor Windows systems for the creation of processes where the command line involves 'rundll32.exe' or 'rundll32' without any accompanying parameters. This monitoring should be done on systems that are capable of logging process creation events. Specifically, focus on capturing details such as the computer name, the username initiating the process, the exact command line used, and both the image path of the created process and the parent process's image path. Be aware that there might be instances where legitimate use of 'rundll32' without parameters is flagged by this detection approach; these are considered false positives. The significance of carefully monitoring for this activity is high due to its association with a known exploit technique."
    }
  },
  {
    "instruction": "Can you explain how to detect: known sensitive file extensions accessed on a network share",
    "context": "",
    "output": "Certainly!\n\nIn order to detect known sensitive file extensions accessed on a network share, you should monitor Windows security event logs for event ID 5145, which indicates a network share object was accessed. Focus on instances where the accessed file's name ends with extensions specific to sensitive or critical data typically targeted in cyber attacks. These extensions include Outlook data files ('.pst', '.ost'), message files ('.msg'), Nickel storage files ('.nst'), Offline Address Books ('.oab'), Exchange database files ('.edb'), Lotus Notes database files ('.nsf'), backup files ('.bak'), dump files ('.dmp'), Kerberos ticket files ('.kirbi'), Remote Desktop configuration files ('.rdp'), and group policy settings ('\\groups.xml').\n\nTo accurately detect malicious activities, logs should be scrutinized for the aforementioned file extensions being accessed. Important details such as the name of the computer (ComputerName), the domain name of the subject (SubjectDomainName), the username of the subject (SubjectUserName), and the relative target name of the accessed file (RelativeTargetName) should be extracted and analyzed for any suspicious activities.\n\nHowever, it's crucial to be aware of potential legitimate scenarios that might trigger false positives, such as help desk operators performing backups or re-imaging of end-user machines, or users who legitimately work with or exchange these types of message files. These actions, though legitimate, can exhibit similar patterns in logs and thus, require careful differentiation from malicious activity. A moderate level of scrutiny is recommended when analyzing these events to balance between security vigilance and operational efficiency.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "known sensitive file extensions accessed on a network share",
      "answer": "In order to detect known sensitive file extensions accessed on a network share, you should monitor Windows security event logs for event ID 5145, which indicates a network share object was accessed. Focus on instances where the accessed file's name ends with extensions specific to sensitive or critical data typically targeted in cyber attacks. These extensions include Outlook data files ('.pst', '.ost'), message files ('.msg'), Nickel storage files ('.nst'), Offline Address Books ('.oab'), Exchange database files ('.edb'), Lotus Notes database files ('.nsf'), backup files ('.bak'), dump files ('.dmp'), Kerberos ticket files ('.kirbi'), Remote Desktop configuration files ('.rdp'), and group policy settings ('\\groups.xml').\n\nTo accurately detect malicious activities, logs should be scrutinized for the aforementioned file extensions being accessed. Important details such as the name of the computer (ComputerName), the domain name of the subject (SubjectDomainName), the username of the subject (SubjectUserName), and the relative target name of the accessed file (RelativeTargetName) should be extracted and analyzed for any suspicious activities.\n\nHowever, it's crucial to be aware of potential legitimate scenarios that might trigger false positives, such as help desk operators performing backups or re-imaging of end-user machines, or users who legitimately work with or exchange these types of message files. These actions, though legitimate, can exhibit similar patterns in logs and thus, require careful differentiation from malicious activity. A moderate level of scrutiny is recommended when analyzing these events to balance between security vigilance and operational efficiency."
    }
  },
  {
    "instruction": "How can I detect: processes setting a new DLL in DllName in under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nAdversaries may abuse time providers to execute DLLs when the system boots.\nThe Windows Time service (W32Time) enables time synchronization across and within domains.\n",
    "context": "",
    "output": "In order to detect processes setting a new DLL in DllName under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider, as adversaries may abuse time providers to execute DLLs when the system boots, you should: Focus on monitoring registry set actions within Windows systems, specifically looking at events where the type is SetValue. This involves scrutinizing any changes made to the \u2018DllName\u2019 fields that start with 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders' and end with 'DllName'. It is crucial to exclude any events that specifically alter the Details to \u2018C:\\Windows\\SYSTEM32\\w32time.DLL\u2019 as this is considered a legitimate action and not part of this targeted detection process. No known false positives have been identified, indicating the high specificity of the conditions outlined, which underscores the importance of this monitoring in securing against adversaries exploiting the Windows Time service for malicious DLL execution as part of their initial access strategy or persistence mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "processes setting a new DLL in DllName in under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nAdversaries may abuse time providers to execute DLLs when the system boots.\nThe Windows Time service (W32Time) enables time synchronization across and within domains.\n",
      "answer": "In order to detect processes setting a new DLL in DllName under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider, as adversaries may abuse time providers to execute DLLs when the system boots, you should: Focus on monitoring registry set actions within Windows systems, specifically looking at events where the type is SetValue. This involves scrutinizing any changes made to the \u2018DllName\u2019 fields that start with 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders' and end with 'DllName'. It is crucial to exclude any events that specifically alter the Details to \u2018C:\\Windows\\SYSTEM32\\w32time.DLL\u2019 as this is considered a legitimate action and not part of this targeted detection process. No known false positives have been identified, indicating the high specificity of the conditions outlined, which underscores the importance of this monitoring in securing against adversaries exploiting the Windows Time service for malicious DLL execution as part of their initial access strategy or persistence mechanisms."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of files with specific name patterns seen used in various tools that export the NTDS.DIT for exfiltration.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect creation of files with specific name patterns seen used in various tools that export the NTDS.DIT for exfiltration, you should monitor Windows file events for the creation of files ending with '\\All.cab' or '.ntds.cleartext'. These filename patterns are known to be associated with tools designed to export the NTDS.DIT, which is a database storing Active Directory data including user credentials. Such file creations should be flagged as they may indicate an attacker's attempt to exfiltrate sensitive information from the system. Given the significance of this data and the methods employed, any detection of such activity should be considered high risk and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of files with specific name patterns seen used in various tools that export the NTDS.DIT for exfiltration.",
      "answer": "In order to detect creation of files with specific name patterns seen used in various tools that export the NTDS.DIT for exfiltration, you should monitor Windows file events for the creation of files ending with '\\All.cab' or '.ntds.cleartext'. These filename patterns are known to be associated with tools designed to export the NTDS.DIT, which is a database storing Active Directory data including user credentials. Such file creations should be flagged as they may indicate an attacker's attempt to exfiltrate sensitive information from the system. Given the significance of this data and the methods employed, any detection of such activity should be considered high risk and investigated promptly."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of LiveKD based on PE metadata or image name",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of LiveKD based on PE metadata or image name, you should: Monitor for the initiation of processes in Windows environments, particularly focusing on process creation events. This monitoring specifically targets the execution of tools named 'livekd.exe' or 'livekd64.exe'. These tools can be identified either through the end portion of their image paths or by the 'OriginalFileName' attribute in their metadata. It is important to consider that while tracking these executions, instances where these tools are used for administration or debugging purposes may arise. These activities, though flagged, should be examined to confirm if they are legitimate uses or if they signify malicious activities. The risk level associated with identifying such executions is considered medium, indicating a balance between the potential severity of an attack and the likelihood of false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of LiveKD based on PE metadata or image name",
      "answer": "In order to detect execution of LiveKD based on PE metadata or image name, you should: Monitor for the initiation of processes in Windows environments, particularly focusing on process creation events. This monitoring specifically targets the execution of tools named 'livekd.exe' or 'livekd64.exe'. These tools can be identified either through the end portion of their image paths or by the 'OriginalFileName' attribute in their metadata. It is important to consider that while tracking these executions, instances where these tools are used for administration or debugging purposes may arise. These activities, though flagged, should be examined to confirm if they are legitimate uses or if they signify malicious activities. The risk level associated with identifying such executions is considered medium, indicating a balance between the potential severity of an attack and the likelihood of false positives."
    }
  },
  {
    "instruction": "Can you explain how to detect: when an a role privilege is deleted in Google Workspace.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when a role privilege is deleted in Google Workspace, you should focus on monitoring administrative activities within Google Workspace's admin service. Specifically, pay attention to logs generated by the admin.googleapis.com service, looking for events named REMOVE_PRIVILEGE. This approach zeroes in on instances where a role's privilege is removed, which could indicate unauthorized changes or potential security concerns. It is important to note that the reliability of this method is considered to be at a medium level due to the possibility of unknown false positives. Essentially, by scrutinizing such specific administrative actions within Google Workspace, you can identify and respond to unauthorized privilege deletions, thereby enhancing the security posture of the environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an a role privilege is deleted in Google Workspace.",
      "answer": "In order to detect when a role privilege is deleted in Google Workspace, you should focus on monitoring administrative activities within Google Workspace's admin service. Specifically, pay attention to logs generated by the admin.googleapis.com service, looking for events named REMOVE_PRIVILEGE. This approach zeroes in on instances where a role's privilege is removed, which could indicate unauthorized changes or potential security concerns. It is important to note that the reliability of this method is considered to be at a medium level due to the possibility of unknown false positives. Essentially, by scrutinizing such specific administrative actions within Google Workspace, you can identify and respond to unauthorized privilege deletions, thereby enhancing the security posture of the environment."
    }
  },
  {
    "instruction": "Please help me detect the following: Obfuscated Powershell via RUNDLL LAUNCHER",
    "context": "",
    "output": "Sure!\nIn order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should:\nMonitor Windows process creation logs for instances where the command line contains specific sequences indicative of an obfuscation tactic. It involves looking for the invocation of 'rundll32.exe' along with 'shell32.dll', 'shellexec_rundll', and 'powershell'. When these elements are detected together in the command line arguments, it serves as an indicator of an attempt to obfuscate PowerShell scripts via a rundll32 launcher. This detection mechanism hinges on PowerShell being launched in a way that is less straightforward to interpret, possibly to evade detection tools or for stealthier execution of potentially malicious scripts. It's vital to note that some legitimate applications may use similar command lines, leading to potential false positives, hence the importance of contextual evaluation of each incident flagged under this criterion. This detection falls under a medium alert level due to its association with techniques employed for stealthy executions and obfuscation, commonly linked with tactics such as execution and defense evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via RUNDLL LAUNCHER",
      "answer": "In order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should:\nMonitor Windows process creation logs for instances where the command line contains specific sequences indicative of an obfuscation tactic. It involves looking for the invocation of 'rundll32.exe' along with 'shell32.dll', 'shellexec_rundll', and 'powershell'. When these elements are detected together in the command line arguments, it serves as an indicator of an attempt to obfuscate PowerShell scripts via a rundll32 launcher. This detection mechanism hinges on PowerShell being launched in a way that is less straightforward to interpret, possibly to evade detection tools or for stealthier execution of potentially malicious scripts. It's vital to note that some legitimate applications may use similar command lines, leading to potential false positives, hence the importance of contextual evaluation of each incident flagged under this criterion. This detection falls under a medium alert level due to its association with techniques employed for stealthy executions and obfuscation, commonly linked with tactics such as execution and defense evasion."
    }
  },
  {
    "instruction": "How can I detect: PowerShell execution to set the ACL of a file or a folder",
    "context": "",
    "output": "In order to detect PowerShell execution to set the ACL of a file or a folder, you should: focus on monitoring process creation events on Windows systems. Specifically, identify instances where either the PowerShell executable (powershell.exe) or the PowerShell DLL (pwsh.dll) is invoked. Look for command lines that include the invocation of the 'Set-Acl' cmdlet, which is used to modify the Access Control List (ACL) of a file or a folder. Ensure that the command line also contains both '-AclObject' and '-Path' parameters, as these are essential for specifying the ACL to modify and the target file or folder path. Treat any activity fitting these criteria as potentially malicious, given its high level of sensitivity, but remain aware of possible unknown benign cases that might trigger similar conditions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell execution to set the ACL of a file or a folder",
      "answer": "In order to detect PowerShell execution to set the ACL of a file or a folder, you should: focus on monitoring process creation events on Windows systems. Specifically, identify instances where either the PowerShell executable (powershell.exe) or the PowerShell DLL (pwsh.dll) is invoked. Look for command lines that include the invocation of the 'Set-Acl' cmdlet, which is used to modify the Access Control List (ACL) of a file or a folder. Ensure that the command line also contains both '-AclObject' and '-Path' parameters, as these are essential for specifying the ACL to modify and the target file or folder path. Treat any activity fitting these criteria as potentially malicious, given its high level of sensitivity, but remain aware of possible unknown benign cases that might trigger similar conditions."
    }
  },
  {
    "instruction": "Can you explain how to detect: Monitor and alert for sign-ins where the device was non-compliant.",
    "context": "",
    "output": "Certainly!\n\nIn order to monitor and alert for sign-ins where the device was non-compliant, you should focus on analyzing sign-in logs from Azure services. Specifically, pay attention to the DeviceDetail.isCompliant attribute within these logs. If this attribute is marked as 'false', it indicates that the device used for the sign-in was not compliant with the defined policies. This condition should trigger an alert due to its significance. The logs' source is Azure's signinlogs, and despite any potential false positives, which might be unknown, the importance of monitoring this activity is considered high. This monitoring process is essential for identifying potential security risks related to the use of non-compliant devices attempting to access resources, reflecting tactics and techniques associated with Initial Access and Device Compliance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Monitor and alert for sign-ins where the device was non-compliant.",
      "answer": "In order to monitor and alert for sign-ins where the device was non-compliant, you should focus on analyzing sign-in logs from Azure services. Specifically, pay attention to the DeviceDetail.isCompliant attribute within these logs. If this attribute is marked as 'false', it indicates that the device used for the sign-in was not compliant with the defined policies. This condition should trigger an alert due to its significance. The logs' source is Azure's signinlogs, and despite any potential false positives, which might be unknown, the importance of monitoring this activity is considered high. This monitoring process is essential for identifying potential security risks related to the use of non-compliant devices attempting to access resources, reflecting tactics and techniques associated with Initial Access and Device Compliance."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of SecurityXploded Tools",
    "context": "",
    "output": "Sure!\nIn order to Detects the execution of SecurityXploded Tools, you should: Monitor process creation logs within Windows environments for signs of potentially malicious activity specifically related to SecurityXploded tools. Focus on identifying any process that is generated from an executable file with the company name set to \"SecurityXploded\" or where the image (executable file name) or original file name ends with \"PasswordDump.exe\". The detection of such criteria is critical and suggests the execution of tools that could be utilized for malicious purposes, such as extracting passwords from the system. The likelihood of these indicators representing false positives is considered to be low, indicating a high confidence level in the detection method.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of SecurityXploded Tools",
      "answer": "In order to Detects the execution of SecurityXploded Tools, you should: Monitor process creation logs within Windows environments for signs of potentially malicious activity specifically related to SecurityXploded tools. Focus on identifying any process that is generated from an executable file with the company name set to \"SecurityXploded\" or where the image (executable file name) or original file name ends with \"PasswordDump.exe\". The detection of such criteria is critical and suggests the execution of tools that could be utilized for malicious purposes, such as extracting passwords from the system. The likelihood of these indicators representing false positives is considered to be low, indicating a high confidence level in the detection method."
    }
  },
  {
    "instruction": "Please help me detect the following: WMI backdoor in Exchange Transport Agents via WMI event filters",
    "context": "",
    "output": "Sure!\nIn order to detect a WMI backdoor in Exchange Transport Agents via WMI event filters, you should: focus on monitoring the creation of processes within Windows environments, specifically observing any instances where `EdgeTransport.exe` acts as a parent image. This is crucial because `EdgeTransport.exe` is associated with Microsoft Exchange and its usage here may indicate malicious activity aimed at exploiting the Exchange Transport Agents. However, to avoid false positives and refine the detection, exclude any process creation events that are directly related to `C:\\Windows\\System32\\conhost.exe` or start with `C:\\Program Files\\Microsoft\\Exchange Server\\` and end with `\\Bin\\OleConverter.exe`. This narrowing down is essential as these paths may commonly be involved in standard operations and could otherwise lead to incorrect flagging of benign activities as threats. The exclusion criteria help in focusing on genuinely suspicious activities that deviate from these common patterns, thus aiming for a more precise identification of potential WMI backdoor implementations. This detection is categorized at a critical level due to the severe implications of a successful attack utilizing such backdoors in Exchange Transport Agents.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "WMI backdoor in Exchange Transport Agents via WMI event filters",
      "answer": "In order to detect a WMI backdoor in Exchange Transport Agents via WMI event filters, you should: focus on monitoring the creation of processes within Windows environments, specifically observing any instances where `EdgeTransport.exe` acts as a parent image. This is crucial because `EdgeTransport.exe` is associated with Microsoft Exchange and its usage here may indicate malicious activity aimed at exploiting the Exchange Transport Agents. However, to avoid false positives and refine the detection, exclude any process creation events that are directly related to `C:\\Windows\\System32\\conhost.exe` or start with `C:\\Program Files\\Microsoft\\Exchange Server\\` and end with `\\Bin\\OleConverter.exe`. This narrowing down is essential as these paths may commonly be involved in standard operations and could otherwise lead to incorrect flagging of benign activities as threats. The exclusion criteria help in focusing on genuinely suspicious activities that deviate from these common patterns, thus aiming for a more precise identification of potential WMI backdoor implementations. This detection is categorized at a critical level due to the severe implications of a successful attack utilizing such backdoors in Exchange Transport Agents."
    }
  },
  {
    "instruction": "How to detect: Attackers can use explorer.exe for evading defense mechanisms",
    "context": "",
    "output": "In order to attack using explorer.exe for evading defense mechanisms, you should: Monitor Windows process creation logs for instances where the process explorer.exe is launched and its parent process is cmd.exe with a command line that includes \"explorer.exe\". This activity could indicate an attempt to use explorer.exe in a way that evades defense mechanisms. However, be aware that there might be legitimate instances of explorer.exe being run from cmd.exe, so this detection has a low level of confidence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Attackers can use explorer.exe for evading defense mechanisms",
      "answer": "In order to attack using explorer.exe for evading defense mechanisms, you should: Monitor Windows process creation logs for instances where the process explorer.exe is launched and its parent process is cmd.exe with a command line that includes \"explorer.exe\". This activity could indicate an attempt to use explorer.exe in a way that evades defense mechanisms. However, be aware that there might be legitimate instances of explorer.exe being run from cmd.exe, so this detection has a low level of confidence."
    }
  },
  {
    "instruction": "Please help me detect the following: various execution patterns of the CrackMapExec pentesting framework",
    "context": "",
    "output": "Sure!\nIn order to detect various execution patterns of the CrackMapExec pentesting framework, you should: Monitor process creation logs on Windows systems for specific command line patterns indicating potential use of the framework. These patterns include command line instructions ending with redirections such as 'cmd.exe /Q /c' followed by an attempt to redirect output to a remote shared folder, which could be an indication of executing remote commands or running fileless scripts via SMB/WMI. Additionally, attention should be paid to command lines that contain powershell.exe executions, especially with flags implying obfuscation or encoding, which suggests an attempt to bypass PowerShell execution policies. These activities are associated with tactics and techniques like Execution, PowerShell, and Command and Scripting Interpreter. You should specifically look out for command lines that attempt to execute PowerShell in a way that bypasses the default security features, or that directs output to remote locations or temporary files, indicative of stealthy or fileless operations. Conclusively, any match against these patterns should be scrutinized, although bearing in mind that there could be unknown false positives. Fields of interest in this scenario include ComputerName, User, and CommandLine.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "various execution patterns of the CrackMapExec pentesting framework",
      "answer": "In order to detect various execution patterns of the CrackMapExec pentesting framework, you should: Monitor process creation logs on Windows systems for specific command line patterns indicating potential use of the framework. These patterns include command line instructions ending with redirections such as 'cmd.exe /Q /c' followed by an attempt to redirect output to a remote shared folder, which could be an indication of executing remote commands or running fileless scripts via SMB/WMI. Additionally, attention should be paid to command lines that contain powershell.exe executions, especially with flags implying obfuscation or encoding, which suggests an attempt to bypass PowerShell execution policies. These activities are associated with tactics and techniques like Execution, PowerShell, and Command and Scripting Interpreter. You should specifically look out for command lines that attempt to execute PowerShell in a way that bypasses the default security features, or that directs output to remote locations or temporary files, indicative of stealthy or fileless operations. Conclusively, any match against these patterns should be scrutinized, although bearing in mind that there could be unknown false positives. Fields of interest in this scenario include ComputerName, User, and CommandLine."
    }
  },
  {
    "instruction": "How can I detect: The PowerShell implementation of DNSCat2 calls nslookup to craft queries. Counting nslookup processes spawned by PowerShell will show hundreds or thousands of instances if PS DNSCat2 is active locally.",
    "context": "",
    "output": "In order to detect the PowerShell implementation of DNSCat2 that calls nslookup to craft queries, monitoring and analyzing process creation logs in Windows systems is crucial. Focus on identifying instances where PowerShell or pwsh has spawned the nslookup.exe process. Specifically, look for scenarios where the parent process is either powershell.exe or pwsh.exe, indicating that a PowerShell script is executing these commands. Furthermore, the command line should end with nslookup.exe, confirming that this utility is being used. An important indicator of PS DNSCat2 activity is the volume of nslookup processes initiated by PowerShell; seeing more than 100 such instances is a strong signal of this specific behavior.\n\nDuring analysis, ensure to collect and review fields such as the image executed (Image), the command line input (CommandLine), and the parent image initiating the process (ParentImage). This will aid in understanding the context of each instance and distinguish it from benign activity. Note that it's possible to encounter false positives, primarily if other legitimate PowerShell scripts are designed to call nslookup.exe extensively.\n\nThe techniques involved in this detection are tied to recognizing the use of system utilities potentially abused in a post-compromise stage and scripting activities, aligning with tactics such as execution and command and control. Always consider the frequency of these events and their unique characteristics to differentiate between suspicious activities and normal, administrative tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The PowerShell implementation of DNSCat2 calls nslookup to craft queries. Counting nslookup processes spawned by PowerShell will show hundreds or thousands of instances if PS DNSCat2 is active locally.",
      "answer": "In order to detect the PowerShell implementation of DNSCat2 that calls nslookup to craft queries, monitoring and analyzing process creation logs in Windows systems is crucial. Focus on identifying instances where PowerShell or pwsh has spawned the nslookup.exe process. Specifically, look for scenarios where the parent process is either powershell.exe or pwsh.exe, indicating that a PowerShell script is executing these commands. Furthermore, the command line should end with nslookup.exe, confirming that this utility is being used. An important indicator of PS DNSCat2 activity is the volume of nslookup processes initiated by PowerShell; seeing more than 100 such instances is a strong signal of this specific behavior.\n\nDuring analysis, ensure to collect and review fields such as the image executed (Image), the command line input (CommandLine), and the parent image initiating the process (ParentImage). This will aid in understanding the context of each instance and distinguish it from benign activity. Note that it's possible to encounter false positives, primarily if other legitimate PowerShell scripts are designed to call nslookup.exe extensively.\n\nThe techniques involved in this detection are tied to recognizing the use of system utilities potentially abused in a post-compromise stage and scripting activities, aligning with tactics such as execution and command and control. Always consider the frequency of these events and their unique characteristics to differentiate between suspicious activities and normal, administrative tasks."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of ruby using the \"-e\" flag. This is could be used as a way to launch a reverse shell or execute live ruby code.",
    "context": "",
    "output": "Sure!\nIn order to detect execution of ruby using the \"-e\" flag, which could be used as a way to launch a reverse shell or execute live ruby code, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the process image name ends with '\\ruby.exe' or the original file name is explicitly 'ruby.exe'. Additionally, pay attention to the command line used to initiate the process; if it contains the ' -e' flag, it indicates the potential execution of arbitrary Ruby code or the initiation of a reverse shell. The detection of these conditions should prompt further investigation. It's important to note that some legitimate uses of Ruby might trigger this condition, although they are currently unspecified, so it is classified with a medium level of confidence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of ruby using the \"-e\" flag. This is could be used as a way to launch a reverse shell or execute live ruby code.",
      "answer": "In order to detect execution of ruby using the \"-e\" flag, which could be used as a way to launch a reverse shell or execute live ruby code, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the process image name ends with '\\ruby.exe' or the original file name is explicitly 'ruby.exe'. Additionally, pay attention to the command line used to initiate the process; if it contains the ' -e' flag, it indicates the potential execution of arbitrary Ruby code or the initiation of a reverse shell. The detection of these conditions should prompt further investigation. It's important to note that some legitimate uses of Ruby might trigger this condition, although they are currently unspecified, so it is classified with a medium level of confidence."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of PktMon, a tool that captures network packets.",
    "context": "",
    "output": "Sure!\nIn order to detect execution of PktMon, a tool that captures network packets, you should: Monitor for the creation of processes on Windows that involve the execution of 'pktmon.exe'. Specifically, check if any process executed ends with the file name '\\pktmon.exe' or if the OriginalFileName attribute is exactly 'PktMon.exe'. Be mindful, however, that there may be legitimate uses of this tool, thus it's classified with a medium level of alert. This detection focuses on identifying potential surveillance or network packet capture activities which might be an indication of malicious behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of PktMon, a tool that captures network packets.",
      "answer": "In order to detect execution of PktMon, a tool that captures network packets, you should: Monitor for the creation of processes on Windows that involve the execution of 'pktmon.exe'. Specifically, check if any process executed ends with the file name '\\pktmon.exe' or if the OriginalFileName attribute is exactly 'PktMon.exe'. Be mindful, however, that there may be legitimate uses of this tool, thus it's classified with a medium level of alert. This detection focuses on identifying potential surveillance or network packet capture activities which might be an indication of malicious behavior."
    }
  },
  {
    "instruction": "How to detect: possible remote connections to Silenttrinity c2",
    "context": "",
    "output": "In order to detect a possible remote connections to Silenttrinity c2, you should: Focus on analyzing network connection logs specifically from Windows-based systems. Look for events where an application, identified by ending with the path '\\msbuild.exe', initiates a network connection. This particular application is significant as it is commonly leveraged in such remote connection attempts. However, not all network activities flagged via this application are of concern; therefore, refine your detection by excluding network connections that are made to the standard web ports 80 and 443. These exclusions are crucial as communications over these ports could be benign and are commonly used for legitimate web traffic, thus reducing the possibility of false positives. Despite potential unknown false positives, the identification of such network activities should be treated with a high level of scrutiny due to the associated risk of Silenttrinity c2 connections.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible remote connections to Silenttrinity c2",
      "answer": "In order to detect a possible remote connections to Silenttrinity c2, you should: Focus on analyzing network connection logs specifically from Windows-based systems. Look for events where an application, identified by ending with the path '\\msbuild.exe', initiates a network connection. This particular application is significant as it is commonly leveraged in such remote connection attempts. However, not all network activities flagged via this application are of concern; therefore, refine your detection by excluding network connections that are made to the standard web ports 80 and 443. These exclusions are crucial as communications over these ports could be benign and are commonly used for legitimate web traffic, thus reducing the possibility of false positives. Despite potential unknown false positives, the identification of such network activities should be treated with a high level of scrutiny due to the associated risk of Silenttrinity c2 connections."
    }
  },
  {
    "instruction": "How can I detect: execution of of Dxcap.exe",
    "context": "",
    "output": "In order to detect the execution of Dxcap.exe, you should focus on monitoring process creation events within Windows environments. Specifically, watch for instances where a process is initiated that either ends with the filename '\\DXCap.exe' or explicitly has 'DXCap.exe' as its original filename. Additionally, pay attention to command-line inputs containing ' -c ', since the executable can be run without directly referring to the \".exe\" file extension. This detection approach aims to identify potentially malicious activity related to the execution of DXCap.exe. However, be aware that there may be legitimate uses of DXCap.exe by authorized users, which should be considered when identifying false positives. This strategy aligns with recognizing tactics and techniques such as Execution and Command And Scripting Interpreter, which are crucial for maintaining a secure Windows environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of of Dxcap.exe",
      "answer": "In order to detect the execution of Dxcap.exe, you should focus on monitoring process creation events within Windows environments. Specifically, watch for instances where a process is initiated that either ends with the filename '\\DXCap.exe' or explicitly has 'DXCap.exe' as its original filename. Additionally, pay attention to command-line inputs containing ' -c ', since the executable can be run without directly referring to the \".exe\" file extension. This detection approach aims to identify potentially malicious activity related to the execution of DXCap.exe. However, be aware that there may be legitimate uses of DXCap.exe by authorized users, which should be considered when identifying false positives. This strategy aligns with recognizing tactics and techniques such as Execution and Command And Scripting Interpreter, which are crucial for maintaining a secure Windows environment."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious child processes of a Windows shell and scripting processes such as wscript, rundll32, powershell, mshta...etc.",
    "context": "",
    "output": "In order to detect suspicious child processes of a Windows shell and scripting processes such as wscript, rundll32, powershell, mshta, etc., you should:\n\nFocus on monitoring process creation events within Windows environments. Specifically, investigate the processes where the parent process image path ends with typical scripting or command execution binaries, namely `mshta.exe`, `powershell.exe`, `pwsh.exe`, `rundll32.exe`, `cscript.exe`, `wscript.exe`, `wmiprvse.exe`, or `regsvr32.exe`. These parent processes executing certain child processes, specifically those with an image path ending in `schtasks.exe` (Task Scheduler), `nslookup.exe` (DNS lookups), `certutil.exe` (Certificate management tool), `bitsadmin.exe` (Background Intelligent Transfer Service administration tool), or `mshta.exe` (Microsoft HTML Application Host) are particularly noteworthy. \n\nExclude any process creation events that occur within the `\\ccmcache\\` directory to reduce false positives related to Configuration Manager cache operations. Additionally, command lines containing specific references to Amazon WorkSpacesConfiguration Scripts or the Tenable/Nessus vulnerability assessment scanner (`\\nessus_`) should be excluded to avoid misidentifying legitimate administrative or diagnostic activities as malicious.\n\nFurther refining of detection accuracy involves excluding instances where `mshta.exe` is both the parent and child process under very specific scenarios identified by command lines indicative of Microsoft System Center Configuration Manager (SCCM) installation activities. These scenarios have command lines containing certain paths and GUIDs that are unique to SCCM operations.\n\nFor effective detection and investigation, logs should capture various fields, including the command line arguments of both parent and child processes, the current directory of execution, and the image paths of both the initiating and target processes. \n\nTaking these measures helps in identifying potentially malicious activities where scripting or shell processes might be leveraged to execute unauthorized or harmful operations. It's also important to consider common false positives which include administrative scripts and activities related to Microsoft SCCM. This strategy is geared towards maintaining a high level of alert accuracy and minimizing unnecessary alarm fatigue.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious child processes of a Windows shell and scripting processes such as wscript, rundll32, powershell, mshta...etc.",
      "answer": "In order to detect suspicious child processes of a Windows shell and scripting processes such as wscript, rundll32, powershell, mshta, etc., you should:\n\nFocus on monitoring process creation events within Windows environments. Specifically, investigate the processes where the parent process image path ends with typical scripting or command execution binaries, namely `mshta.exe`, `powershell.exe`, `pwsh.exe`, `rundll32.exe`, `cscript.exe`, `wscript.exe`, `wmiprvse.exe`, or `regsvr32.exe`. These parent processes executing certain child processes, specifically those with an image path ending in `schtasks.exe` (Task Scheduler), `nslookup.exe` (DNS lookups), `certutil.exe` (Certificate management tool), `bitsadmin.exe` (Background Intelligent Transfer Service administration tool), or `mshta.exe` (Microsoft HTML Application Host) are particularly noteworthy. \n\nExclude any process creation events that occur within the `\\ccmcache\\` directory to reduce false positives related to Configuration Manager cache operations. Additionally, command lines containing specific references to Amazon WorkSpacesConfiguration Scripts or the Tenable/Nessus vulnerability assessment scanner (`\\nessus_`) should be excluded to avoid misidentifying legitimate administrative or diagnostic activities as malicious.\n\nFurther refining of detection accuracy involves excluding instances where `mshta.exe` is both the parent and child process under very specific scenarios identified by command lines indicative of Microsoft System Center Configuration Manager (SCCM) installation activities. These scenarios have command lines containing certain paths and GUIDs that are unique to SCCM operations.\n\nFor effective detection and investigation, logs should capture various fields, including the command line arguments of both parent and child processes, the current directory of execution, and the image paths of both the initiating and target processes. \n\nTaking these measures helps in identifying potentially malicious activities where scripting or shell processes might be leveraged to execute unauthorized or harmful operations. It's also important to consider common false positives which include administrative scripts and activities related to Microsoft SCCM. This strategy is geared towards maintaining a high level of alert accuracy and minimizing unnecessary alarm fatigue."
    }
  },
  {
    "instruction": "How to detect: suspicious Windows Error Reporting manager (wermgr.exe) process patterns - suspicious parents / children, execution folders, command lines etc.",
    "context": "",
    "output": "In order to detect suspicious Windows Error Reporting manager (wermgr.exe) process patterns - suspicious parents / children, execution folders, command lines etc., you should:\n\nMonitor the creation of processes on Windows systems, specifically focusing on instances where wermgr.exe (the Windows Error Reporting manager) is involved. If wermgr.exe is observed as a parent process for various system and administrative utilities such as nslookup.exe, ipconfig.exe, net.exe, net1.exe, whoami.exe, netstat.exe, systeminfo.exe, cmd.exe, and powershell.exe, it should be considered suspicious. This is because wermgr.exe typically does not initiate these types of processes under normal operations. Additionally, if wermgr.exe is executed from locations other than the standard Windows directories like C:\\Windows\\System32\\, C:\\Windows\\SysWOW64\\, or C:\\Windows\\WinSxS\\, it might indicate an attempt to disguise malicious activities or evasion techniques. This approach aids in identifying potentially malicious activities that could be indicative of command and control, lateral movement, privilege escalation, or reconnaissance attempts within a compromised environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious Windows Error Reporting manager (wermgr.exe) process patterns - suspicious parents / children, execution folders, command lines etc.",
      "answer": "In order to detect suspicious Windows Error Reporting manager (wermgr.exe) process patterns - suspicious parents / children, execution folders, command lines etc., you should:\n\nMonitor the creation of processes on Windows systems, specifically focusing on instances where wermgr.exe (the Windows Error Reporting manager) is involved. If wermgr.exe is observed as a parent process for various system and administrative utilities such as nslookup.exe, ipconfig.exe, net.exe, net1.exe, whoami.exe, netstat.exe, systeminfo.exe, cmd.exe, and powershell.exe, it should be considered suspicious. This is because wermgr.exe typically does not initiate these types of processes under normal operations. Additionally, if wermgr.exe is executed from locations other than the standard Windows directories like C:\\Windows\\System32\\, C:\\Windows\\SysWOW64\\, or C:\\Windows\\WinSxS\\, it might indicate an attempt to disguise malicious activities or evasion techniques. This approach aids in identifying potentially malicious activities that could be indicative of command and control, lateral movement, privilege escalation, or reconnaissance attempts within a compromised environment."
    }
  },
  {
    "instruction": "How to detect: renamed SysInternals tool execution with a binary named ps.exe as used by Dragonfly APT group and documented in TA17-293A report",
    "context": "",
    "output": "In order to detect renamed SysInternals tool execution with a binary named ps.exe as used by Dragonfly APT group and documented in TA17-293A report, you should: focus on monitoring process creation events within Windows environments. Look specifically for instances where the command line includes both the 'ps.exe -accepteula' and '-s cmd /c netstat' parameters. This combination indicates an attempt to utilize a possibly renamed SysInternals tool, aligning with techniques used by the Dragonfly APT group. The presence of these specific command line parameters suggests a higher likelihood of malicious activity, though be aware that legitimate activities might sometimes mirror this behavior under certain conditions, such as when SysInternals tools have been intentionally renamed for benign purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "renamed SysInternals tool execution with a binary named ps.exe as used by Dragonfly APT group and documented in TA17-293A report",
      "answer": "In order to detect renamed SysInternals tool execution with a binary named ps.exe as used by Dragonfly APT group and documented in TA17-293A report, you should: focus on monitoring process creation events within Windows environments. Look specifically for instances where the command line includes both the 'ps.exe -accepteula' and '-s cmd /c netstat' parameters. This combination indicates an attempt to utilize a possibly renamed SysInternals tool, aligning with techniques used by the Dragonfly APT group. The presence of these specific command line parameters suggests a higher likelihood of malicious activity, though be aware that legitimate activities might sometimes mirror this behavior under certain conditions, such as when SysInternals tools have been intentionally renamed for benign purposes."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential commandline obfuscation using known escape characters",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential commandline obfuscation using known escape characters, you should: monitor process creation logs on Windows systems for commands that attempt to obscure the presence of \"http\" in their command line by using known escape characters. Specifically, look for instances where \"http\" is disguised with caret (^) symbols between each letter, as in \"h^t^t^p\", or double quotes (\") around each letter, as in \"h\"t\"t\"p\". Such techniques may indicate an effort to evade detection mechanisms by obfuscating URLs or commands. Be aware that there might be unknown scenarios that could trigger false positives, however, these should be investigated with a medium level of urgency to ensure they're not actual threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential commandline obfuscation using known escape characters",
      "answer": "In order to detect potential commandline obfuscation using known escape characters, you should: monitor process creation logs on Windows systems for commands that attempt to obscure the presence of \"http\" in their command line by using known escape characters. Specifically, look for instances where \"http\" is disguised with caret (^) symbols between each letter, as in \"h^t^t^p\", or double quotes (\") around each letter, as in \"h\"t\"t\"p\". Such techniques may indicate an effort to evade detection mechanisms by obfuscating URLs or commands. Be aware that there might be unknown scenarios that could trigger false positives, however, these should be investigated with a medium level of urgency to ensure they're not actual threats."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database.",
    "context": "",
    "output": "In order to detect the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database, you should: Look for processes that have been created on Windows systems which either have an Image name ending with '\\ADExplorer.exe' or an OriginalFileName value of 'AdExp'. Additionally, check if the CommandLine argument contains the substring 'snapshot'. This detection aims at identifying instances where ADExplorer, a tool made by Sysinternals, is utilized in ways that potentially could be part of unauthorized or malicious activities, specifically focusing on capturing snapshots of the Active Directory database. The targeted log source for this detection is process creation events on Windows systems. It's important to note that the confidence level of this rule is marked as medium, and situations not fitting the described pattern could arise, leading to unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database.",
      "answer": "In order to detect the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database, you should: Look for processes that have been created on Windows systems which either have an Image name ending with '\\ADExplorer.exe' or an OriginalFileName value of 'AdExp'. Additionally, check if the CommandLine argument contains the substring 'snapshot'. This detection aims at identifying instances where ADExplorer, a tool made by Sysinternals, is utilized in ways that potentially could be part of unauthorized or malicious activities, specifically focusing on capturing snapshots of the Active Directory database. The targeted log source for this detection is process creation events on Windows systems. It's important to note that the confidence level of this rule is marked as medium, and situations not fitting the described pattern could arise, leading to unknown false positives."
    }
  },
  {
    "instruction": "How can I detect: Monitor and alert for device registration or join events where MFA was not performed.",
    "context": "",
    "output": "In order to monitor and alert for device registration or join events where MFA was not performed, you should: analyze sign-in logs from Azure, specifically focusing on events that involve the Device Registration Service. Look for events where the conditional access status indicates a successful operation. However, it's critical to filter out events where multi-factor authentication (MFA) was a requirement, as the aim is to identify successful device registrations or joins that bypassed MFA. This process involves examining the 'ResourceDisplayName' to pinpoint interactions with the Device Registration Service and evaluating the 'conditionalAccessStatus' to ensure it reflects a 'success'. Simultaneously, separate out records that don't include 'multiFactorAuthentication' within the 'AuthenticationRequirement'. This approach helps in identifying scenarios where devices might be added to the network without the added security layer of MFA, despite a successful registration process. Be mindful that there may be occurrences that are unknown or do not fit expected patterns (listed as false positives). The significance of monitoring such activities is rated at a medium level, indicating a substantial security interest without assuming an immediate high threat. The tactics associated with this monitoring activity include Initial Access, and the technique involves Valid Accounts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Monitor and alert for device registration or join events where MFA was not performed.",
      "answer": "In order to monitor and alert for device registration or join events where MFA was not performed, you should: analyze sign-in logs from Azure, specifically focusing on events that involve the Device Registration Service. Look for events where the conditional access status indicates a successful operation. However, it's critical to filter out events where multi-factor authentication (MFA) was a requirement, as the aim is to identify successful device registrations or joins that bypassed MFA. This process involves examining the 'ResourceDisplayName' to pinpoint interactions with the Device Registration Service and evaluating the 'conditionalAccessStatus' to ensure it reflects a 'success'. Simultaneously, separate out records that don't include 'multiFactorAuthentication' within the 'AuthenticationRequirement'. This approach helps in identifying scenarios where devices might be added to the network without the added security layer of MFA, despite a successful registration process. Be mindful that there may be occurrences that are unknown or do not fit expected patterns (listed as false positives). The significance of monitoring such activities is rated at a medium level, indicating a substantial security interest without assuming an immediate high threat. The tactics associated with this monitoring activity include Initial Access, and the technique involves Valid Accounts."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious command lines used in Covenant luanchers",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious command lines used in Covenant launchers, you should: focus on monitoring the process creation logs within Windows environments. Specifically, look for command lines that display specific indicators of compromise which are commonly associated with these types of attacks. The detection criteria involve finding command lines that contain all of the following: '-Sta', '-Nop', '-Window', and 'Hidden'. Additionally, the presence of either '-Command' or '-EncodedCommand' in the command line also serves as a significant indicator. Alternatively, command lines that contain any of the following strings should also raise suspicion: 'sv o (New-Object IO.MemorySteam);sv d ', 'mshta file.hta', 'GruntHTTP', or '-EncodedCommand cwB2ACAAbwAgA'. The necessity to meet any one of these conditions (either all aspects of the first set or any from the second set) is crucial for triggering an alert. These signatures are distinctly linked with tactics and techniques such as execution, defense evasion, and the use of command and control channels specific to Covenant launcher activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious command lines used in Covenant luanchers",
      "answer": "In order to detect suspicious command lines used in Covenant launchers, you should: focus on monitoring the process creation logs within Windows environments. Specifically, look for command lines that display specific indicators of compromise which are commonly associated with these types of attacks. The detection criteria involve finding command lines that contain all of the following: '-Sta', '-Nop', '-Window', and 'Hidden'. Additionally, the presence of either '-Command' or '-EncodedCommand' in the command line also serves as a significant indicator. Alternatively, command lines that contain any of the following strings should also raise suspicion: 'sv o (New-Object IO.MemorySteam);sv d ', 'mshta file.hta', 'GruntHTTP', or '-EncodedCommand cwB2ACAAbwAgA'. The necessity to meet any one of these conditions (either all aspects of the first set or any from the second set) is crucial for triggering an alert. These signatures are distinctly linked with tactics and techniques such as execution, defense evasion, and the use of command and control channels specific to Covenant launcher activities."
    }
  },
  {
    "instruction": "How can I detect: potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location",
    "context": "",
    "output": "In order to detect potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location, you should monitor Windows image load events for instances where the \"gup.exe\" process loads the \"libcurl.dll\". It is important to note that the legitimate process \"Notepad++\\updater\\GUP.exe\" loading \"libcurl.dll\" should not be considered suspicious and thus is excluded from this detection criterion. This detection focuses on identifying abnormal or potentially malicious activity involving the sideloading technique where \"gup.exe\" is found outside of its usual update process environment, specifically targeting DLL files with the name \"libcurl.dll\". Consequently, this activity is observed under suspicion of being an attack technique but does come with a caution regarding unknown false positives, indicating that not all detections might represent actual threats. The severity level of this rule is marked as medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location",
      "answer": "In order to detect potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location, you should monitor Windows image load events for instances where the \"gup.exe\" process loads the \"libcurl.dll\". It is important to note that the legitimate process \"Notepad++\\updater\\GUP.exe\" loading \"libcurl.dll\" should not be considered suspicious and thus is excluded from this detection criterion. This detection focuses on identifying abnormal or potentially malicious activity involving the sideloading technique where \"gup.exe\" is found outside of its usual update process environment, specifically targeting DLL files with the name \"libcurl.dll\". Consequently, this activity is observed under suspicion of being an attack technique but does come with a caution regarding unknown false positives, indicating that not all detections might represent actual threats. The severity level of this rule is marked as medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: user signs ins outside of normal business hours.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect user sign-ins outside of normal business hours, you should focus on monitoring Azure sign-in logs. Pay attention to successful sign-in attempts that are registered from locations where your organization operates, but occur outside of the typical working hours specified for your organization. This can be defined by adjusting the parameters to include only the countries you operate out of, referred to here as 'LegitCountries', and setting a specific timeframe that represents your closing hours, labeled as 'ClosingTime'.\n\nBe aware of potential false positives, which may include scenarios where a user is genuinely working beyond their typical hours. These detections are categorized with a low level of severity, indicating that while they should be reviewed, they are less likely to represent critical security incidents. These activities are tagged and associated with MITRE ATT&CK tactics and techniques focusing on initial access and defense evasion, as they might indicate an attempt to bypass normal security measures during off-hours.\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user signs ins outside of normal business hours.",
      "answer": "In order to detect user sign-ins outside of normal business hours, you should focus on monitoring Azure sign-in logs. Pay attention to successful sign-in attempts that are registered from locations where your organization operates, but occur outside of the typical working hours specified for your organization. This can be defined by adjusting the parameters to include only the countries you operate out of, referred to here as 'LegitCountries', and setting a specific timeframe that represents your closing hours, labeled as 'ClosingTime'.\n\nBe aware of potential false positives, which may include scenarios where a user is genuinely working beyond their typical hours. These detections are categorized with a low level of severity, indicating that while they should be reviewed, they are less likely to represent critical security incidents. These activities are tagged and associated with MITRE ATT&CK tactics and techniques focusing on initial access and defense evasion, as they might indicate an attempt to bypass normal security measures during off-hours.\n"
    }
  },
  {
    "instruction": "Please help me detect the following: access to $ADMIN share",
    "context": "",
    "output": "Sure!\nIn order to detect access to $ADMIN share, you should look for specific events within Windows Security logs. Focus on events where the advanced audit policy regarding \"Object Access > Audit File Share\" is configured to log both success and failure instances. Specifically, keep an eye out for events with an ID of 5140, which indicates an attempt to access a file share. Moreover, it's essential to filter these events to include those accessing the \"Admin$\" share, a well-known default share used for administrative purposes in Windows systems.\n\nHowever, during this monitoring process, it's also important to apply certain filters to reduce false positives. One such filter involves ignoring events initiated by computer account names (which end in a '$' symbol). These are typically automated processes or services running on the network and are less likely to be related to unauthorized access attempts.\n\nIt's worth noting that while monitoring for this activity is critical, it's also expected to encounter legitimate administrative activities that match these criteria. Due to the nature of administrative tasks that might involve accessing the $ADMIN share, these events are categorized with a low level of alert. Therefore, any detection should be carefully analyzed to distinguish between malicious activities and necessary administrative operations.\n\nThis approach primarily aligns with the MITRE ATT&CK tactics and techniques related to Credential Access and Lateral Movement by monitoring attempts to access critical administrative shares on a network, which could indicate an attempt to escalate privileges or move laterally within the network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "access to $ADMIN share",
      "answer": "In order to detect access to $ADMIN share, you should look for specific events within Windows Security logs. Focus on events where the advanced audit policy regarding \"Object Access > Audit File Share\" is configured to log both success and failure instances. Specifically, keep an eye out for events with an ID of 5140, which indicates an attempt to access a file share. Moreover, it's essential to filter these events to include those accessing the \"Admin$\" share, a well-known default share used for administrative purposes in Windows systems.\n\nHowever, during this monitoring process, it's also important to apply certain filters to reduce false positives. One such filter involves ignoring events initiated by computer account names (which end in a '$' symbol). These are typically automated processes or services running on the network and are less likely to be related to unauthorized access attempts.\n\nIt's worth noting that while monitoring for this activity is critical, it's also expected to encounter legitimate administrative activities that match these criteria. Due to the nature of administrative tasks that might involve accessing the $ADMIN share, these events are categorized with a low level of alert. Therefore, any detection should be carefully analyzed to distinguish between malicious activities and necessary administrative operations.\n\nThis approach primarily aligns with the MITRE ATT&CK tactics and techniques related to Credential Access and Lateral Movement by monitoring attempts to access critical administrative shares on a network, which could indicate an attempt to escalate privileges or move laterally within the network."
    }
  },
  {
    "instruction": "Can you explain how to detect: Rule to detect the Hybrid Connection Manager service running on an endpoint.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the Hybrid Connection Manager service running on an endpoint, you should monitor the Windows Microsoft Service Bus Client logs for specific event IDs and keywords that indicate unauthorized or suspicious activity. Look for logs with event IDs 40300, 40301, and 40302. These event IDs are critical in identifying potential misuse or unauthorized configuration changes in the Hybrid Connection Manager service. Additionally, pay attention to entries containing specific keywords such as 'HybridConnection', 'sb://', 'servicebus.windows.net', and 'HybridConnectionManage'. These keywords are associated with the configuration and management of Hybrid Connections, which could indicate an attempt to manipulate connection settings or unauthorized access to the service. \n\nIt is important to consider the context in which these logs appear. The presence of these event IDs and keywords does not necessarily imply malicious activity. Legitimate use of Hybrid Connection Manager via Azure function apps could generate similar logs. Therefore, any detection should be contextualized, and further investigation is warranted to determine if the activity is indeed unauthorized or malicious. The significance of monitoring these logs lies in the ability to quickly identify and respond to unauthorized access or configuration changes, which are critical for maintaining the security and integrity of the service. These monitoring practices are aligned with several cyber-security frameworks and protocols designed to protect against unauthorized access and potential data breaches.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Rule to detect the Hybrid Connection Manager service running on an endpoint.",
      "answer": "In order to detect the Hybrid Connection Manager service running on an endpoint, you should monitor the Windows Microsoft Service Bus Client logs for specific event IDs and keywords that indicate unauthorized or suspicious activity. Look for logs with event IDs 40300, 40301, and 40302. These event IDs are critical in identifying potential misuse or unauthorized configuration changes in the Hybrid Connection Manager service. Additionally, pay attention to entries containing specific keywords such as 'HybridConnection', 'sb://', 'servicebus.windows.net', and 'HybridConnectionManage'. These keywords are associated with the configuration and management of Hybrid Connections, which could indicate an attempt to manipulate connection settings or unauthorized access to the service. \n\nIt is important to consider the context in which these logs appear. The presence of these event IDs and keywords does not necessarily imply malicious activity. Legitimate use of Hybrid Connection Manager via Azure function apps could generate similar logs. Therefore, any detection should be contextualized, and further investigation is warranted to determine if the activity is indeed unauthorized or malicious. The significance of monitoring these logs lies in the ability to quickly identify and respond to unauthorized access or configuration changes, which are critical for maintaining the security and integrity of the service. These monitoring practices are aligned with several cyber-security frameworks and protocols designed to protect against unauthorized access and potential data breaches."
    }
  },
  {
    "instruction": "Please help me detect the following: presence of the keywords \"Wscript\", \"Shell\" and \"Run\" in the command, which could indicate a suspicious activity",
    "context": "",
    "output": "Sure!\nIn order to detect the presence of the keywords \"Wscript\", \"Shell\", and \"Run\" in the command, which could indicate a suspicious activity, you should: focus on monitoring process creation events within Windows systems. Look specifically for command line executions containing all the keywords \"Wscript.\", \".Shell\", and \".Run\". These combinations of terms could suggest that a script is being utilized to execute potentially malicious commands via the Windows Script Host. Be aware that there can be legitimate uses of such scripts by third-party applications or by system administrators for automation and other purposes. Therefore, encountering these keywords doesn't immediately imply malicious intent. It's advisable to investigate further and refine your monitoring filters based on the context of their occurrence and your environment's typical usage patterns. This approach strikes a balance between alerting on suspicious activity and minimizing false positives, thereby helping maintain focus on genuine security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "presence of the keywords \"Wscript\", \"Shell\" and \"Run\" in the command, which could indicate a suspicious activity",
      "answer": "In order to detect the presence of the keywords \"Wscript\", \"Shell\", and \"Run\" in the command, which could indicate a suspicious activity, you should: focus on monitoring process creation events within Windows systems. Look specifically for command line executions containing all the keywords \"Wscript.\", \".Shell\", and \".Run\". These combinations of terms could suggest that a script is being utilized to execute potentially malicious commands via the Windows Script Host. Be aware that there can be legitimate uses of such scripts by third-party applications or by system administrators for automation and other purposes. Therefore, encountering these keywords doesn't immediately imply malicious intent. It's advisable to investigate further and refine your monitoring filters based on the context of their occurrence and your environment's typical usage patterns. This approach strikes a balance between alerting on suspicious activity and minimizing false positives, thereby helping maintain focus on genuine security threats."
    }
  },
  {
    "instruction": "How can I detect: when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence.\nThe disk cleanup manager is part of the operating system. It displays the dialog box [\u2026]\nThe user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.\nAlthough Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.\nInstead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.\nAny developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.\n",
    "context": "",
    "output": "In order to detect when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence, you should monitor the Windows registry for creation of new keys under the specific path `\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\`. These events are indicative of modifications that could potentially extend the disk cleanup handler's capabilities, which while intended for legitimate extension by developers, can be exploited by attackers for malicious purposes. \n\nThe focus is on the `CreateKey` event type which signifies that a new registry key is being created. However, not every creation should be treated as suspicious. Windows has a predefined set of keys associated with its disk cleanup handlers such as temporary files, recycle bin, internet cache files, and many others that are default and expected. The detection should exclude these predefined keys to minimize false positives.\n\nThe exclusion list covers a wide range of default disk cleanup handler keys including but not limited to Temporary Files, Recycle Bin, Internet Cache Files, Windows Error Reporting Files, and various log and cache folders. By excluding these, the detection focuses on unusual additions that deviate from the normal baseline, which could indicate an attacker's attempt to gain persistence.\n\nIt's worth noting that while monitoring for this behavior, there may be legitimate instances where new entries are added by Windows itself or authorized software updates. These should be considered when assessing alerts to reduce false positive rates.\n\nThis detection strategy aligns with the understanding that while the disk cleanup manager in Windows is designed for flexibility, it can be exploited for persistence by unauthorized modifications to the registry. By carefully excluding legitimate cases and focusing on the creation of new, unexpected keys under the disk cleanup handler registry path, security teams can effectively identify potential threats. The associated MITRE ATT&CK tactics and techniques for this activity include Persistence, specifically through the manipulation of registry keys used by the disk cleanup handler.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence.\nThe disk cleanup manager is part of the operating system. It displays the dialog box [\u2026]\nThe user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.\nAlthough Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.\nInstead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.\nAny developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.\n",
      "answer": "In order to detect when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence, you should monitor the Windows registry for creation of new keys under the specific path `\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\`. These events are indicative of modifications that could potentially extend the disk cleanup handler's capabilities, which while intended for legitimate extension by developers, can be exploited by attackers for malicious purposes. \n\nThe focus is on the `CreateKey` event type which signifies that a new registry key is being created. However, not every creation should be treated as suspicious. Windows has a predefined set of keys associated with its disk cleanup handlers such as temporary files, recycle bin, internet cache files, and many others that are default and expected. The detection should exclude these predefined keys to minimize false positives.\n\nThe exclusion list covers a wide range of default disk cleanup handler keys including but not limited to Temporary Files, Recycle Bin, Internet Cache Files, Windows Error Reporting Files, and various log and cache folders. By excluding these, the detection focuses on unusual additions that deviate from the normal baseline, which could indicate an attacker's attempt to gain persistence.\n\nIt's worth noting that while monitoring for this behavior, there may be legitimate instances where new entries are added by Windows itself or authorized software updates. These should be considered when assessing alerts to reduce false positive rates.\n\nThis detection strategy aligns with the understanding that while the disk cleanup manager in Windows is designed for flexibility, it can be exploited for persistence by unauthorized modifications to the registry. By carefully excluding legitimate cases and focusing on the creation of new, unexpected keys under the disk cleanup handler registry path, security teams can effectively identify potential threats. The associated MITRE ATT&CK tactics and techniques for this activity include Persistence, specifically through the manipulation of registry keys used by the disk cleanup handler."
    }
  },
  {
    "instruction": "Explain how should I detect the following: user enables DNS-over-HTTPS.\nThis can be used to hide internet activity or be used to hide the process of exfiltrating data.\nWith this enabled organization will lose visibility into data such as query type, response and originating IP that are used to determine bad actors.\n",
    "context": "",
    "output": "In order to detect when a user enables DNS-over-HTTPS, which can be used to hide internet activity or be used to hide the process of exfiltrating data, resulting in the loss of visibility into data such as query type, response, and originating IP that are used to determine bad actors, you should: Focus on monitoring registry settings related to DNS-over-HTTPS configuration for popular browsers like Microsoft Edge, Google Chrome, and Firefox on Windows systems. Specifically, look for registry events where the following actions occur:\n\n1. For Microsoft Edge, observe any registry event where a \"SetValue\" action is applied to the registry key path ending with '\\SOFTWARE\\Policies\\Microsoft\\Edge\\BuiltInDnsClientEnabled' and the details are set to DWORD (0x00000001), indicating DNS-over-HTTPS is enabled.\n\n2. For Google Chrome, detect registry events where the \"SetValue\" action targets a path ending in '\\SOFTWARE\\Google\\Chrome\\DnsOverHttpsMode' and the details are changed to 'secure', signifying the activation of DNS-over-HTTPS.\n\n3. In the case of Firefox, monitor for registry modifications where \"SetValue\" applies to a target object ending with '\\SOFTWARE\\Policies\\Mozilla\\Firefox\\DNSOverHTTPS\\Enabled' and the details are modified to DWORD (0x00000001), showcasing the enabling of DNS-over-HTTPS.\n\nThis monitoring approach spans across specific registry set activities within Windows environments, focusing on alterations that signify the enabling of DNS-over-HTTPS in these commonly used browsers. The detection options are designed to catch changes directly linked to the activation of DNS-over-HTTPS. False positives are considered unlikely due to the specific nature of these registry modifications. The detection is tagged with relevant MITRE ATT&CK tactics and techniques associated with obstructing visibility into network activities, which might indicate an attempt to obscure internet usage patterns or data exfiltration activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user enables DNS-over-HTTPS.\nThis can be used to hide internet activity or be used to hide the process of exfiltrating data.\nWith this enabled organization will lose visibility into data such as query type, response and originating IP that are used to determine bad actors.\n",
      "answer": "In order to detect when a user enables DNS-over-HTTPS, which can be used to hide internet activity or be used to hide the process of exfiltrating data, resulting in the loss of visibility into data such as query type, response, and originating IP that are used to determine bad actors, you should: Focus on monitoring registry settings related to DNS-over-HTTPS configuration for popular browsers like Microsoft Edge, Google Chrome, and Firefox on Windows systems. Specifically, look for registry events where the following actions occur:\n\n1. For Microsoft Edge, observe any registry event where a \"SetValue\" action is applied to the registry key path ending with '\\SOFTWARE\\Policies\\Microsoft\\Edge\\BuiltInDnsClientEnabled' and the details are set to DWORD (0x00000001), indicating DNS-over-HTTPS is enabled.\n\n2. For Google Chrome, detect registry events where the \"SetValue\" action targets a path ending in '\\SOFTWARE\\Google\\Chrome\\DnsOverHttpsMode' and the details are changed to 'secure', signifying the activation of DNS-over-HTTPS.\n\n3. In the case of Firefox, monitor for registry modifications where \"SetValue\" applies to a target object ending with '\\SOFTWARE\\Policies\\Mozilla\\Firefox\\DNSOverHTTPS\\Enabled' and the details are modified to DWORD (0x00000001), showcasing the enabling of DNS-over-HTTPS.\n\nThis monitoring approach spans across specific registry set activities within Windows environments, focusing on alterations that signify the enabling of DNS-over-HTTPS in these commonly used browsers. The detection options are designed to catch changes directly linked to the activation of DNS-over-HTTPS. False positives are considered unlikely due to the specific nature of these registry modifications. The detection is tagged with relevant MITRE ATT&CK tactics and techniques associated with obstructing visibility into network activities, which might indicate an attempt to obscure internet usage patterns or data exfiltration activities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Obfuscated use of Clip.exe to execute PowerShell",
    "context": "",
    "output": "In order to detect obfuscated use of Clip.exe to execute PowerShell, you should focus on monitoring the PowerShell module activity within the Windows environment. Specifically, look for events where the command line execution patterns match the use of 'cmd' followed by either '/c' or '/r' parameters, and closely thereafter, involves 'clip.exe' or 'clip' command. The detection becomes particularly specific with the inclusion of patterns that combine 'clip' with PowerShell commands that seem to manipulate the clipboard content in a sophisticated manner, indicated by the complex regex pattern provided. These patterns also include the use of '&&' operator, suggesting an attempt to chain commands in a manner that's not typical for regular system or user operations. \n\nMonitoring should be performed with high sensitivity due to the high level of potential impact, but it\u2019s important to note that as of now, the potential for unknown false positives exists, indicating that not all matched patterns could lead to genuine threats. However, given the obfuscated nature of the execution method, any hits on these patterns should be considered with a degree of caution. \n\nThis activity aligns with techniques known in cybersecurity frameworks which describe tactics such as Execution, Defense Evasion, and Command and Control, showing the attacker's efforts to execute commands covertly, evade detection mechanisms, and maintain control over the compromised system through unusual use of system utilities like Clip.exe in conjunction with PowerShell scripting.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated use of Clip.exe to execute PowerShell",
      "answer": "In order to detect obfuscated use of Clip.exe to execute PowerShell, you should focus on monitoring the PowerShell module activity within the Windows environment. Specifically, look for events where the command line execution patterns match the use of 'cmd' followed by either '/c' or '/r' parameters, and closely thereafter, involves 'clip.exe' or 'clip' command. The detection becomes particularly specific with the inclusion of patterns that combine 'clip' with PowerShell commands that seem to manipulate the clipboard content in a sophisticated manner, indicated by the complex regex pattern provided. These patterns also include the use of '&&' operator, suggesting an attempt to chain commands in a manner that's not typical for regular system or user operations. \n\nMonitoring should be performed with high sensitivity due to the high level of potential impact, but it\u2019s important to note that as of now, the potential for unknown false positives exists, indicating that not all matched patterns could lead to genuine threats. However, given the obfuscated nature of the execution method, any hits on these patterns should be considered with a degree of caution. \n\nThis activity aligns with techniques known in cybersecurity frameworks which describe tactics such as Execution, Defense Evasion, and Command and Control, showing the attacker's efforts to execute commands covertly, evade detection mechanisms, and maintain control over the compromised system through unusual use of system utilities like Clip.exe in conjunction with PowerShell scripting."
    }
  },
  {
    "instruction": "Can you explain how to detect: registry changes to Office macro settings. The TrustRecords contain information on executed macro-enabled documents. (see references)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect registry changes to Office macro settings. The TrustRecords contain information on executed macro-enabled documents, you should: Focus on monitoring Windows Registry Set operations that involve changes to Office macro settings. Key areas of interest include the registry keys ending with '\\Security\\Trusted Documents\\TrustRecords', '\\Security\\AccessVBOM', and '\\Security\\VBAWarnings'. These specific paths are significant because they hold configurations related to how Office applications handle macros, which are frequently exploited by attackers to execute malicious code. When an EventType of 'Setvalue' is observed modifying these registry keys, it might indicate an attempt to alter security settings to either enable macros without proper warnings or trust documents that should not be trusted. It's important to note that while modifications to these keys can be indicative of suspicious activity, there are legitimate scenarios where they might be altered, such as when enabling valid macros for internal documents. Therefore, while this activity is flagged at a high level due to its potential security implications, the presence of valid business reasons for such changes is considered as possible false positives in this detection strategy. The tags associated with this monitoring strategy include Tactics and Techniques such as Persistence, Privilege Escalation, and Execution through the use of Microsoft Office macros.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registry changes to Office macro settings. The TrustRecords contain information on executed macro-enabled documents. (see references)",
      "answer": "In order to detect registry changes to Office macro settings. The TrustRecords contain information on executed macro-enabled documents, you should: Focus on monitoring Windows Registry Set operations that involve changes to Office macro settings. Key areas of interest include the registry keys ending with '\\Security\\Trusted Documents\\TrustRecords', '\\Security\\AccessVBOM', and '\\Security\\VBAWarnings'. These specific paths are significant because they hold configurations related to how Office applications handle macros, which are frequently exploited by attackers to execute malicious code. When an EventType of 'Setvalue' is observed modifying these registry keys, it might indicate an attempt to alter security settings to either enable macros without proper warnings or trust documents that should not be trusted. It's important to note that while modifications to these keys can be indicative of suspicious activity, there are legitimate scenarios where they might be altered, such as when enabling valid macros for internal documents. Therefore, while this activity is flagged at a high level due to its potential security implications, the presence of valid business reasons for such changes is considered as possible false positives in this detection strategy. The tags associated with this monitoring strategy include Tactics and Techniques such as Persistence, Privilege Escalation, and Execution through the use of Microsoft Office macros."
    }
  },
  {
    "instruction": "How can I detect: downloads from PwnDrp web servers developed for red team testing and most likely also used for criminal activity",
    "context": "",
    "output": "In order to detect downloads from PwnDrp web servers developed for red team testing and most likely also used for criminal activity, you should: focus on monitoring proxy logs for any traffic containing the specific string '/pwndrop/' in the URI. This indicates a client accessing resources associated with PwnDrp web servers, which are often utilized for cybersecurity testing but may also be employed for malicious purposes. To effectively implement this detection, focus on analyzing the client IP address, the request URI (c-uri), and the client user agent (c-useragent) within the proxy logs. It's important to note, however, that there might be instances where valid detection could yield false positives, although such occurrences are not specifically known. Given the critical nature of detecting potential criminal activity or unauthorized red team testing, the level of attention to such communications should be elevated.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "downloads from PwnDrp web servers developed for red team testing and most likely also used for criminal activity",
      "answer": "In order to detect downloads from PwnDrp web servers developed for red team testing and most likely also used for criminal activity, you should: focus on monitoring proxy logs for any traffic containing the specific string '/pwndrop/' in the URI. This indicates a client accessing resources associated with PwnDrp web servers, which are often utilized for cybersecurity testing but may also be employed for malicious purposes. To effectively implement this detection, focus on analyzing the client IP address, the request URI (c-uri), and the client user agent (c-useragent) within the proxy logs. It's important to note, however, that there might be instances where valid detection could yield false positives, although such occurrences are not specifically known. Given the critical nature of detecting potential criminal activity or unauthorized red team testing, the level of attention to such communications should be elevated."
    }
  },
  {
    "instruction": "How to detect: modification of autostart extensibility point (ASEP) in registry.",
    "context": "",
    "output": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should: Monitor Windows registry for set value operations specifically within `\\Software\\Classes`, which is a common area for applications to add extensions or modifications that could affect the way files, folders, and actions are handled. Look for modifications in specific registry paths such as `\\Folder\\ShellEx\\ExtShellFolderViews`, `\\Folder\\ShellEx\\DragDropHandlers`, and similar paths that might be targeted by adversaries to establish persistence or modify the system's behavior for malicious purposes. These paths include areas related to file execution commands, context menu handlers, and drag and drop handlers among others. It is also important to filter out and ignore activities generated by known legitimate sources, such as Microsoft Office installations or certain system processes like 'drvinst.exe' and 'svchost.exe', which may legitimately interact with these registry areas for non-malicious reasons. Pay attention to the security identifiers, object names, and before and after values of the registry keys to understand the context of the changes. However, remain aware that legitimate software and administrative actions often modify these settings for non-malicious reasons, which could lead to false positives. The assessment should be of medium level, with proactive monitoring for the specific registry modifications, excluding the defined benign sources to pinpoint suspicious activity effectively. This approach aims at identifying tactics and techniques employed by adversaries to gain persistence and interfere with system or file behaviors maliciously.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should: Monitor Windows registry for set value operations specifically within `\\Software\\Classes`, which is a common area for applications to add extensions or modifications that could affect the way files, folders, and actions are handled. Look for modifications in specific registry paths such as `\\Folder\\ShellEx\\ExtShellFolderViews`, `\\Folder\\ShellEx\\DragDropHandlers`, and similar paths that might be targeted by adversaries to establish persistence or modify the system's behavior for malicious purposes. These paths include areas related to file execution commands, context menu handlers, and drag and drop handlers among others. It is also important to filter out and ignore activities generated by known legitimate sources, such as Microsoft Office installations or certain system processes like 'drvinst.exe' and 'svchost.exe', which may legitimately interact with these registry areas for non-malicious reasons. Pay attention to the security identifiers, object names, and before and after values of the registry keys to understand the context of the changes. However, remain aware that legitimate software and administrative actions often modify these settings for non-malicious reasons, which could lead to false positives. The assessment should be of medium level, with proactive monitoring for the specific registry modifications, excluding the defined benign sources to pinpoint suspicious activity effectively. This approach aims at identifying tactics and techniques employed by adversaries to gain persistence and interfere with system or file behaviors maliciously."
    }
  },
  {
    "instruction": "Please help me detect the following: pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)",
    "context": "",
    "output": "Sure!\nIn order to detect the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22), you should: Monitor process creation events on Windows systems for any instances where a process is initiated by 'consent.exe' and subsequently spawns 'werfault.exe'. It's crucial to ensure that these observed processes operate at either a 'High' or 'System' integrity level, indicative of elevated privileges. This pattern of activity is generally associated with attempts to circumvent User Account Control (UAC), specifically leveraging a known bypass technique referred to as UACMe method number 22. Any detections of such activities should be treated with a high level of suspicion due to their potential malicious nature and lack of known legitimate use cases.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)",
      "answer": "In order to detect the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22), you should: Monitor process creation events on Windows systems for any instances where a process is initiated by 'consent.exe' and subsequently spawns 'werfault.exe'. It's crucial to ensure that these observed processes operate at either a 'High' or 'System' integrity level, indicative of elevated privileges. This pattern of activity is generally associated with attempts to circumvent User Account Control (UAC), specifically leveraging a known bypass technique referred to as UACMe method number 22. Any detections of such activities should be treated with a high level of suspicion due to their potential malicious nature and lack of known legitimate use cases."
    }
  },
  {
    "instruction": "How to detect: Dnscat exfiltration tool execution",
    "context": "",
    "output": "In order to detect the execution of Dnscat exfiltration tool, you should: focus on monitoring Windows PowerShell script activity, specifically looking for the execution of scripts that contain the command 'Start-Dnscat2'. This requires that Script Block Logging is enabled to capture detailed information about PowerShell script executions. Given the nature of Dnscat2 as a DNS exfiltration tool, any detection of such activity should be considered critical, although it's important to note that there may be rare instances of legitimate use. The primary focus should be on identifying unauthorized or malicious attempts to use Dnscat2 for data exfiltration.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Dnscat exfiltration tool execution",
      "answer": "In order to detect the execution of Dnscat exfiltration tool, you should: focus on monitoring Windows PowerShell script activity, specifically looking for the execution of scripts that contain the command 'Start-Dnscat2'. This requires that Script Block Logging is enabled to capture detailed information about PowerShell script executions. Given the nature of Dnscat2 as a DNS exfiltration tool, any detection of such activity should be considered critical, although it's important to note that there may be rare instances of legitimate use. The primary focus should be on identifying unauthorized or malicious attempts to use Dnscat2 for data exfiltration."
    }
  },
  {
    "instruction": "Please help me detect the following: program that invoked suspicious DNS queries known from Cobalt Strike beacons",
    "context": "",
    "output": "Sure!\nIn order to detect a program that invoked suspicious DNS queries known from Cobalt Strike beacons, you should focus on monitoring DNS query logs from Windows systems. Specifically, you're looking for DNS queries that either start with 'aaa.stage.' or 'post.1', or contain '.stage.123456.' within the query name. Detection is based on identifying any one of these query patterns in the logs, signaling potential Cobalt Strike beacon activity. It's crucial to be attentive to these patterns as they are significant indicators of compromise, possibly related to tactics and techniques such as Command and Control. The critical fields that should be analyzed in this context are the Image and CommandLine fields, which can provide additional context about the source of the DNS queries. However, be aware of potential unknown false positives that might arise in detection. This monitoring approach is labeled as critical due to its significance in identifying malicious activity related to Cobalt Strike, a common tool used in cyber attacks for establishing command and control channels.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "program that invoked suspicious DNS queries known from Cobalt Strike beacons",
      "answer": "In order to detect a program that invoked suspicious DNS queries known from Cobalt Strike beacons, you should focus on monitoring DNS query logs from Windows systems. Specifically, you're looking for DNS queries that either start with 'aaa.stage.' or 'post.1', or contain '.stage.123456.' within the query name. Detection is based on identifying any one of these query patterns in the logs, signaling potential Cobalt Strike beacon activity. It's crucial to be attentive to these patterns as they are significant indicators of compromise, possibly related to tactics and techniques such as Command and Control. The critical fields that should be analyzed in this context are the Image and CommandLine fields, which can provide additional context about the source of the DNS queries. However, be aware of potential unknown false positives that might arise in detection. This monitoring approach is labeled as critical due to its significance in identifying malicious activity related to Cobalt Strike, a common tool used in cyber attacks for establishing command and control channels."
    }
  },
  {
    "instruction": "How to detect: Use of reg to get MachineGuid information",
    "context": "",
    "output": "In order to use reg to get MachineGuid information, you should: Monitor process creation logs in Windows environments for occurrences where the 'reg.exe' executable is used, specifically looking for command lines that include the target of 'SOFTWARE\\Microsoft\\Cryptography', contain the parameter '/v ', and seek the 'MachineGuid'. This is indicative of attempts to query cryptographic machine-specific information which can be a part of reconnaissance activities. The detection focus is thus on identifying this particular behavior through the observed command line parameters and the use of 'reg.exe'. Notably, instances that meet these criteria should be investigated, though it's important to be aware that there may be legitimate cases that could trigger this detection, as currently, the potential for false positives is identified as unknown and the level of concern is considered low.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Use of reg to get MachineGuid information",
      "answer": "In order to use reg to get MachineGuid information, you should: Monitor process creation logs in Windows environments for occurrences where the 'reg.exe' executable is used, specifically looking for command lines that include the target of 'SOFTWARE\\Microsoft\\Cryptography', contain the parameter '/v ', and seek the 'MachineGuid'. This is indicative of attempts to query cryptographic machine-specific information which can be a part of reconnaissance activities. The detection focus is thus on identifying this particular behavior through the observed command line parameters and the use of 'reg.exe'. Notably, instances that meet these criteria should be investigated, though it's important to be aware that there may be legitimate cases that could trigger this detection, as currently, the potential for false positives is identified as unknown and the level of concern is considered low."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of Metasploit SMB PsExec (exploit/windows/smb/psexec) and Impacket psexec.py by triggering on specific service installation",
    "context": "",
    "output": "In order to detect usage of Metasploit SMB PsExec (exploit/windows/smb/psexec) and Impacket psexec.py by triggering on specific service installation, you should: focus on monitoring Windows Security logs, specifically looking for the event ID 4697, which signifies a service installation. This event logging is critical and requires that the 'System Security Extension' audit subcategory be enabled. \n\nTo accurately identify the malicious activity, you need to filter for service installation events where the service file name matches a specific regular expression pattern indicating it's located in the system root directory with an eight-character executable name (matching the pattern '^%systemroot%\\\\[a-zA-Z]{8}\\.exe$'). Additionally, the service name should comply with one of the following patterns: exactly four characters, exactly eight characters, or exactly sixteen characters in length, indicated by regular expressions '(^[a-zA-Z]{4}$)|(^[a-zA-Z]{8}$)|(^[a-zA-Z]{16}$)'.\n\nMoreover, you should only consider services configured to start on-demand (ServiceStartType: 3) and those that have a service type of '0x10', which typically denotes a user-mode driver but can be indicative of this attack if other conditions are met.\n\nIt's crucial to apply a filter to exclude any legitimate service installations, particularly ignoring the service named 'PSEXESVC', as it's a known false positive in this detection scenario. This exception acknowledges that while 'PSEXESVC' is a common service name used by PsExec, it might also be legitimately used, thus its exclusion to reduce false positives.\n\nThe monitoring process should capture and log essential information such as the Computer Name, Subject Domain Name, Subject User Name, Service Name, and Service File Name for each event that meets the specified conditions. \n\nLastly, be aware of the possibility of false positives, which may arise from legitimate services that coincidentally match the detection patterns defined\u2014especially those with an eight-character binary and a service name of 4, 8, or 16 characters.\n\nThis meticulous approach aligns with MITRE ATT&CK tactics and techniques for identifying unauthorized command and script activities, service execution, and lateral movement techniques used in attacks like those employing Metasploit SMB PsExec and Impacket's psexec.py.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of Metasploit SMB PsExec (exploit/windows/smb/psexec) and Impacket psexec.py by triggering on specific service installation",
      "answer": "In order to detect usage of Metasploit SMB PsExec (exploit/windows/smb/psexec) and Impacket psexec.py by triggering on specific service installation, you should: focus on monitoring Windows Security logs, specifically looking for the event ID 4697, which signifies a service installation. This event logging is critical and requires that the 'System Security Extension' audit subcategory be enabled. \n\nTo accurately identify the malicious activity, you need to filter for service installation events where the service file name matches a specific regular expression pattern indicating it's located in the system root directory with an eight-character executable name (matching the pattern '^%systemroot%\\\\[a-zA-Z]{8}\\.exe$'). Additionally, the service name should comply with one of the following patterns: exactly four characters, exactly eight characters, or exactly sixteen characters in length, indicated by regular expressions '(^[a-zA-Z]{4}$)|(^[a-zA-Z]{8}$)|(^[a-zA-Z]{16}$)'.\n\nMoreover, you should only consider services configured to start on-demand (ServiceStartType: 3) and those that have a service type of '0x10', which typically denotes a user-mode driver but can be indicative of this attack if other conditions are met.\n\nIt's crucial to apply a filter to exclude any legitimate service installations, particularly ignoring the service named 'PSEXESVC', as it's a known false positive in this detection scenario. This exception acknowledges that while 'PSEXESVC' is a common service name used by PsExec, it might also be legitimately used, thus its exclusion to reduce false positives.\n\nThe monitoring process should capture and log essential information such as the Computer Name, Subject Domain Name, Subject User Name, Service Name, and Service File Name for each event that meets the specified conditions. \n\nLastly, be aware of the possibility of false positives, which may arise from legitimate services that coincidentally match the detection patterns defined\u2014especially those with an eight-character binary and a service name of 4, 8, or 16 characters.\n\nThis meticulous approach aligns with MITRE ATT&CK tactics and techniques for identifying unauthorized command and script activities, service execution, and lateral movement techniques used in attacks like those employing Metasploit SMB PsExec and Impacket's psexec.py."
    }
  },
  {
    "instruction": "Explain how should I detect the following: nltest commands that can be used for information discovery",
    "context": "",
    "output": "In order to detect nltest commands that can be used for information discovery, you should: Monitor process creation logs on Windows systems for indications of nltest.exe or a file with the original name nltestrk.exe being executed. Specifically, pay attention to command lines that include certain flags indicative of reconnaissance or information discovery activities. These flags include combinations like '/server' and '/query' together, or any of the following: '/dclist:', '/parentdomain', '/domain_trusts', '/all_trusts', '/trusted_domains', and '/user'. Such activities should raise a red flag, especially when originating from unexpected sources or showing unusual patterns, despite the fact that there could be legitimate administrative uses. In these instances, further investigation into the user and the host from which the commands are being run is warranted. The severity of these findings is considered high due to the potential for these commands to reveal sensitive information about the network that could aid an attacker in further actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "nltest commands that can be used for information discovery",
      "answer": "In order to detect nltest commands that can be used for information discovery, you should: Monitor process creation logs on Windows systems for indications of nltest.exe or a file with the original name nltestrk.exe being executed. Specifically, pay attention to command lines that include certain flags indicative of reconnaissance or information discovery activities. These flags include combinations like '/server' and '/query' together, or any of the following: '/dclist:', '/parentdomain', '/domain_trusts', '/all_trusts', '/trusted_domains', and '/user'. Such activities should raise a red flag, especially when originating from unexpected sources or showing unusual patterns, despite the fact that there could be legitimate administrative uses. In these instances, further investigation into the user and the host from which the commands are being run is warranted. The severity of these findings is considered high due to the potential for these commands to reveal sensitive information about the network that could aid an attacker in further actions."
    }
  },
  {
    "instruction": "How can I detect: process injection of a LittleCorporal generated Maldoc.",
    "context": "",
    "output": "In order to detect the process injection of a LittleCorporal generated Maldoc, you should: Monitor process access logs on Windows systems for instances where the source image ends with '\\winword.exe', indicating that the Microsoft Word process is executing. Additionally, check if the call trace of these processes includes both a path containing ':\\Windows\\Microsoft.NET\\Framework64\\v2.' and the term 'UNKNOWN'. This combination of behaviors suggests an attempt to inject malicious code into a legitimate process, potentially indicative of a LittleCorporal generated malicious document being executed. Remain vigilant for these signs as they signal a high threat level, though be aware that detections can sometimes be false positives if they fit this pattern but are not malicious.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process injection of a LittleCorporal generated Maldoc.",
      "answer": "In order to detect the process injection of a LittleCorporal generated Maldoc, you should: Monitor process access logs on Windows systems for instances where the source image ends with '\\winword.exe', indicating that the Microsoft Word process is executing. Additionally, check if the call trace of these processes includes both a path containing ':\\Windows\\Microsoft.NET\\Framework64\\v2.' and the term 'UNKNOWN'. This combination of behaviors suggests an attempt to inject malicious code into a legitimate process, potentially indicative of a LittleCorporal generated malicious document being executed. Remain vigilant for these signs as they signal a high threat level, though be aware that detections can sometimes be false positives if they fit this pattern but are not malicious."
    }
  },
  {
    "instruction": "How can I detect: unusually long PowerShell command lines with a length of 1000 characters or more",
    "context": "",
    "output": "In order to detect unusually long PowerShell command lines with a length of 1000 characters or more, you should monitor the process creation logs on Windows systems. Specifically, focus on identifying instances where PowerShell is being executed. This can be accomplished by looking for processes that end with '\\powershell.exe' or '\\pwsh.exe', as well as checking for files named 'PowerShell.EXE' or 'pwsh.dll'. Additionally, processes that have a description of 'Windows PowerShell' or are a product of 'PowerShell Core 6' should also be considered relevant.\n\nFurthermore, it's important to scrutinize the command line length for these PowerShell processes. Any command line that exceeds 999 characters should be flagged. This approach helps in identifying actions where PowerShell is used with extensive command-line arguments or scripts, which can be indicative of malicious activity.\n\nKeep in mind, however, that there may be legitimate reasons for long PowerShell command lines, so the detection of such a scenario is considered to have a low level of confidence and might produce unknown false positives. Thus, any detection should be further investigated to ascertain its nature. This method focuses on identifying potential security breaches through the abuse of PowerShell, which is often used by attackers to execute malicious commands or scripts due to its powerful capabilities and deep integration with Windows.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "unusually long PowerShell command lines with a length of 1000 characters or more",
      "answer": "In order to detect unusually long PowerShell command lines with a length of 1000 characters or more, you should monitor the process creation logs on Windows systems. Specifically, focus on identifying instances where PowerShell is being executed. This can be accomplished by looking for processes that end with '\\powershell.exe' or '\\pwsh.exe', as well as checking for files named 'PowerShell.EXE' or 'pwsh.dll'. Additionally, processes that have a description of 'Windows PowerShell' or are a product of 'PowerShell Core 6' should also be considered relevant.\n\nFurthermore, it's important to scrutinize the command line length for these PowerShell processes. Any command line that exceeds 999 characters should be flagged. This approach helps in identifying actions where PowerShell is used with extensive command-line arguments or scripts, which can be indicative of malicious activity.\n\nKeep in mind, however, that there may be legitimate reasons for long PowerShell command lines, so the detection of such a scenario is considered to have a low level of confidence and might produce unknown false positives. Thus, any detection should be further investigated to ascertain its nature. This method focuses on identifying potential security breaches through the abuse of PowerShell, which is often used by attackers to execute malicious commands or scripts due to its powerful capabilities and deep integration with Windows."
    }
  },
  {
    "instruction": "Please help me detect the following: typical pattern of a CobaltStrike BOF which inject into other processes",
    "context": "",
    "output": "Sure!\nIn order to detect a typical pattern of a CobaltStrike Beacon Object File (BOF) which injects into other processes, you should monitor Windows process access logs for specific anomalies. Specifically, watch for instances where the call trace includes sequences that start with 'C:\\Windows\\SYSTEM32\\ntdll.dll', followed by a hexadecimal offset, or 'C:\\Windows\\System32\\KERNELBASE.dll', also followed by a hexadecimal offset, and ending with an 'UNKNOWN' sequence that contains a 16-character alphanumeric string. Additionally, scrutinize the 'GrantedAccess' fields for values '0x1028' or '0x1fffff', which represent particular access permissions of interest. This pattern is indicative of suspicious process injection activities commonly associated with CobaltStrike BOF executions, which can be part of privilege escalation, defense evasion, or credential access tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "typical pattern of a CobaltStrike BOF which inject into other processes",
      "answer": "In order to detect a typical pattern of a CobaltStrike Beacon Object File (BOF) which injects into other processes, you should monitor Windows process access logs for specific anomalies. Specifically, watch for instances where the call trace includes sequences that start with 'C:\\Windows\\SYSTEM32\\ntdll.dll', followed by a hexadecimal offset, or 'C:\\Windows\\System32\\KERNELBASE.dll', also followed by a hexadecimal offset, and ending with an 'UNKNOWN' sequence that contains a 16-character alphanumeric string. Additionally, scrutinize the 'GrantedAccess' fields for values '0x1028' or '0x1fffff', which represent particular access permissions of interest. This pattern is indicative of suspicious process injection activities commonly associated with CobaltStrike BOF executions, which can be part of privilege escalation, defense evasion, or credential access tactics."
    }
  },
  {
    "instruction": "Please help me detect the following: download of suspicious file type from a well-known file and paste sharing domain",
    "context": "",
    "output": "Sure!\nIn order to detect the download of suspicious file type from a well-known file and paste sharing domain, you should monitor Windows event logs for file creation events that have hashes generated for their streams (`create_stream_hash` category). Specifically, focus on the contents of these files for specific domains known to host and share files, which include 'transfer.sh', 'raw.githubusercontent.com', 'gist.githubusercontent.com', 'pastebin.com', 'cdn.discordapp.com/attachments/', 'mediafire.com', 'mega.nz', 'ddns.net', '.paste.ee', '.hastebin.com', '.ghostbin.co/', 'ufile.io', 'storage.googleapis.com', 'anonfiles.com', 'send.exploit.in', 'privatlab.net', 'privatlab.com', 'sendspace.com', 'pastetext.net', 'pastebin.pl', and 'paste.ee'. Additionally, check if the file extensions of the created files are modified with ':Zone' identifier which is indicative of attempts to bypass security measures, specifically looking for '.ps1:Zone', '.bat:Zone', and '.cmd:Zone'. The attention to both the content sources and the unusual modification in file extensions helps in identifying potentially malicious downloads from known file sharing services and domains often used for distributing malware or tools for cyberattacks. Log fields such as 'TargetFilename' and 'Image' are crucial for this detection, helping to specify and locate the files of interest. Despite the robustness of this approach, there may be unknown scenarios leading to false positives, emphasizing the importance of context and further investigation upon detection. The associated risk level for these detections is deemed medium, reflecting the need for awareness and monitoring for such activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "download of suspicious file type from a well-known file and paste sharing domain",
      "answer": "In order to detect the download of suspicious file type from a well-known file and paste sharing domain, you should monitor Windows event logs for file creation events that have hashes generated for their streams (`create_stream_hash` category). Specifically, focus on the contents of these files for specific domains known to host and share files, which include 'transfer.sh', 'raw.githubusercontent.com', 'gist.githubusercontent.com', 'pastebin.com', 'cdn.discordapp.com/attachments/', 'mediafire.com', 'mega.nz', 'ddns.net', '.paste.ee', '.hastebin.com', '.ghostbin.co/', 'ufile.io', 'storage.googleapis.com', 'anonfiles.com', 'send.exploit.in', 'privatlab.net', 'privatlab.com', 'sendspace.com', 'pastetext.net', 'pastebin.pl', and 'paste.ee'. Additionally, check if the file extensions of the created files are modified with ':Zone' identifier which is indicative of attempts to bypass security measures, specifically looking for '.ps1:Zone', '.bat:Zone', and '.cmd:Zone'. The attention to both the content sources and the unusual modification in file extensions helps in identifying potentially malicious downloads from known file sharing services and domains often used for distributing malware or tools for cyberattacks. Log fields such as 'TargetFilename' and 'Image' are crucial for this detection, helping to specify and locate the files of interest. Despite the robustness of this approach, there may be unknown scenarios leading to false positives, emphasizing the importance of context and further investigation upon detection. The associated risk level for these detections is deemed medium, reflecting the need for awareness and monitoring for such activities."
    }
  },
  {
    "instruction": "How can I detect: embeding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information.",
    "context": "",
    "output": "In order to detect embedding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for the use of the 'steghide' binary, specifically focusing on the auditd logs. Be on the lookout for the execution of 'steghide' with the arguments 'embed', '-cf', and '-ef'. These arguments indicate an attempt to embed hidden information within files. The 'execve' type in the logs is crucial, as it signifies an execution request for the steghide command. The '-cf' option specifies the cover file that will contain the hidden data, while '-ef' denotes the embedded file that carries the data to be hidden. It's important to understand that, despite the low level of initial suspicion attributed to these actions (as they could theoretically be used in benign scenarios), their detection plays a critical role in uncovering efforts by adversaries to transfer or conceal sensitive information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "embeding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information.",
      "answer": "In order to detect embedding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for the use of the 'steghide' binary, specifically focusing on the auditd logs. Be on the lookout for the execution of 'steghide' with the arguments 'embed', '-cf', and '-ef'. These arguments indicate an attempt to embed hidden information within files. The 'execve' type in the logs is crucial, as it signifies an execution request for the steghide command. The '-cf' option specifies the cover file that will contain the hidden data, while '-ef' denotes the embedded file that carries the data to be hidden. It's important to understand that, despite the low level of initial suspicion attributed to these actions (as they could theoretically be used in benign scenarios), their detection plays a critical role in uncovering efforts by adversaries to transfer or conceal sensitive information."
    }
  }
]