[
  {
    "instruction": "How can I detect: Aversaries may use to interact with a remote network share using Server Message Block (SMB).\nThis technique is used by post-exploitation frameworks.\n",
    "context": "",
    "output": "In order to detect adversaries attempting to interact with a remote network share using the Server Message Block (SMB), which is a technique commonly employed by post-exploitation frameworks, you should monitor for file events on Windows systems that involve attempts to access targets with filenames containing both the local loopback IP address '\\\\\\\\127.0.0' and the administrative share identifier '\\ADMIN$\\'. The significance of observing these two strings in conjunction during a file event suggests an attempt to exploit SMB for unauthorized access on the local machine, simulating interaction with remote shares. Since false positives are unknown, this detection should be considered with a medium level of importance and investigated accordingly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Aversaries may use to interact with a remote network share using Server Message Block (SMB).\nThis technique is used by post-exploitation frameworks.\n",
      "answer": "In order to detect adversaries attempting to interact with a remote network share using the Server Message Block (SMB), which is a technique commonly employed by post-exploitation frameworks, you should monitor for file events on Windows systems that involve attempts to access targets with filenames containing both the local loopback IP address '\\\\\\\\127.0.0' and the administrative share identifier '\\ADMIN$\\'. The significance of observing these two strings in conjunction during a file event suggests an attempt to exploit SMB for unauthorized access on the local machine, simulating interaction with remote shares. Since false positives are unknown, this detection should be considered with a medium level of importance and investigated accordingly."
    }
  },
  {
    "instruction": "How to detect: deletion of the Exchange PowerShell cmdlet History logs which may indicate an attempt to destroy forensic evidence",
    "context": "",
    "output": "In order to detect the deletion of the Exchange PowerShell cmdlet History logs which may indicate an attempt to destroy forensic evidence, you should focus on monitoring file deletion logs on Windows systems. Specifically, lookout for events where the target file names start with '\\Logging\\CmdletInfra\\LocalPowerShell\\Cmdlet\\' and contain '_Cmdlet_' in their path. This pattern signifies the manipulation or deletion of files related to Exchange PowerShell cmdlet history logs. Be mindful that there might be instances, such as during log rotation processes, where similar file deletions could trigger false positives. The critical nature of these deletions categorizes this detection rule at a high level of importance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deletion of the Exchange PowerShell cmdlet History logs which may indicate an attempt to destroy forensic evidence",
      "answer": "In order to detect the deletion of the Exchange PowerShell cmdlet History logs which may indicate an attempt to destroy forensic evidence, you should focus on monitoring file deletion logs on Windows systems. Specifically, lookout for events where the target file names start with '\\Logging\\CmdletInfra\\LocalPowerShell\\Cmdlet\\' and contain '_Cmdlet_' in their path. This pattern signifies the manipulation or deletion of files related to Exchange PowerShell cmdlet history logs. Be mindful that there might be instances, such as during log rotation processes, where similar file deletions could trigger false positives. The critical nature of these deletions categorizes this detection rule at a high level of importance."
    }
  },
  {
    "instruction": "How to detect: usage of the \"Write-EventLog\" cmdlet with 'RawData' flag. The cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve them later for later use",
    "context": "",
    "output": "In order to detect the usage of the \"Write-EventLog\" cmdlet with 'RawData' flag, which can be leveraged to write malicious payloads to the EventLog and then retrieve them later for use, you should: focus on monitoring Windows PowerShell script activities. This specifically entails ensuring that Script Block Logging is enabled, which is crucial for logging detailed execution information about PowerShell scripts, including the content of the scripts themselves. The detection strategy hinges on identifying the use of the \"Write-EventLog\" cmdlet in conjunction with the '-RawData' parameter within PowerShell scripts. These parameters together are indicative of an attempt to log data potentially for malicious purposes. It's essential to be aware of false positives, as legitimate applications may utilize this cmdlet for non-malicious purposes. Therefore, each alert generated under these criteria should be thoroughly investigated to ascertain whether the activity is benign or malevolent. The security severity associated with this kind of activity is considered medium, reflecting the need for prompt but measured response actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Write-EventLog\" cmdlet with 'RawData' flag. The cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve them later for later use",
      "answer": "In order to detect the usage of the \"Write-EventLog\" cmdlet with 'RawData' flag, which can be leveraged to write malicious payloads to the EventLog and then retrieve them later for use, you should: focus on monitoring Windows PowerShell script activities. This specifically entails ensuring that Script Block Logging is enabled, which is crucial for logging detailed execution information about PowerShell scripts, including the content of the scripts themselves. The detection strategy hinges on identifying the use of the \"Write-EventLog\" cmdlet in conjunction with the '-RawData' parameter within PowerShell scripts. These parameters together are indicative of an attempt to log data potentially for malicious purposes. It's essential to be aware of false positives, as legitimate applications may utilize this cmdlet for non-malicious purposes. Therefore, each alert generated under these criteria should be thoroughly investigated to ascertain whether the activity is benign or malevolent. The security severity associated with this kind of activity is considered medium, reflecting the need for prompt but measured response actions."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of a new PowerShell module in the first folder of the module directory structure \"\\WindowsPowerShell\\Modules\\malware\\malware.psm1\". This is somewhat an uncommon practice as legitimate modules often includes a version folder.",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of a new PowerShell module in the first folder of the module directory structure \"\\WindowsPowerShell\\Modules\\malware\\malware.psm1\", which is somewhat an uncommon practice as legitimate modules often includes a version folder, you should: monitor file events on Windows systems focusing on the creation of files within the \\WindowsPowerShell\\Modules directory. Specifically, look for files ending with extensions \".ps\" or \".dll\" within that directory but omit PowerShell 7's default modules from consideration. The detection of files directly created in the root of the Modules directory, without being nested in a version-specific folder, can be indicative of suspicious activity, since legitimate PowerShell modules typically reside in versioned subdirectories. Keep in mind that the false positive rate may vary across different environments, and additional filtering criteria may be necessary to refine the detection mechanism for production use. The sensitivity level for this detection is set to medium due to the potential for both malicious and benign activities leading to similar artifacts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new PowerShell module in the first folder of the module directory structure \"\\WindowsPowerShell\\Modules\\malware\\malware.psm1\". This is somewhat an uncommon practice as legitimate modules often includes a version folder.",
      "answer": "In order to detect the creation of a new PowerShell module in the first folder of the module directory structure \"\\WindowsPowerShell\\Modules\\malware\\malware.psm1\", which is somewhat an uncommon practice as legitimate modules often includes a version folder, you should: monitor file events on Windows systems focusing on the creation of files within the \\WindowsPowerShell\\Modules directory. Specifically, look for files ending with extensions \".ps\" or \".dll\" within that directory but omit PowerShell 7's default modules from consideration. The detection of files directly created in the root of the Modules directory, without being nested in a version-specific folder, can be indicative of suspicious activity, since legitimate PowerShell modules typically reside in versioned subdirectories. Keep in mind that the false positive rate may vary across different environments, and additional filtering criteria may be necessary to refine the detection mechanism for production use. The sensitivity level for this detection is set to medium due to the potential for both malicious and benign activities leading to similar artifacts."
    }
  },
  {
    "instruction": "How can I detect: exploitation attempt of the vulnerability described in CVE-2021-4034.",
    "context": "",
    "output": "In order to detect exploitation attempt of the vulnerability described in CVE-2021-4034, you should: monitor Linux systems using auditd for specific patterns of activity that are indicative of an attack. Look for audit logs where the process title (proctitle) is registered as '(null)' in close proximity to syscall events generated by the command `pkexec` executed from `/usr/bin/pkexec`. This pattern of activity is highly indicative of an exploitation attempt against the mentioned vulnerability, noting that legitimate use of `pkexec` with a null proctitle is highly unusual and thus should be regarded with suspicion. Although there is a possibility of false positives being recorded, they are considered unknown, and the risk level of this activity is classified as high due to the severity of the vulnerability being exploited. This detection focuses on observing for abnormal execution behavior associated with privilege escalation attempts typically employed by attackers exploiting this vulnerability.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempt of the vulnerability described in CVE-2021-4034.",
      "answer": "In order to detect exploitation attempt of the vulnerability described in CVE-2021-4034, you should: monitor Linux systems using auditd for specific patterns of activity that are indicative of an attack. Look for audit logs where the process title (proctitle) is registered as '(null)' in close proximity to syscall events generated by the command `pkexec` executed from `/usr/bin/pkexec`. This pattern of activity is highly indicative of an exploitation attempt against the mentioned vulnerability, noting that legitimate use of `pkexec` with a null proctitle is highly unusual and thus should be regarded with suspicion. Although there is a possibility of false positives being recorded, they are considered unknown, and the risk level of this activity is classified as high due to the severity of the vulnerability being exploited. This detection focuses on observing for abnormal execution behavior associated with privilege escalation attempts typically employed by attackers exploiting this vulnerability."
    }
  },
  {
    "instruction": "How can I detect: execution of of Dxcap.exe",
    "context": "",
    "output": "In order to detect the execution of Dxcap.exe, you should focus on monitoring process creation events within Windows environments. Specifically, watch for instances where a process is initiated that either ends with the filename '\\DXCap.exe' or explicitly has 'DXCap.exe' as its original filename. Additionally, pay attention to command-line inputs containing ' -c ', since the executable can be run without directly referring to the \".exe\" file extension. This detection approach aims to identify potentially malicious activity related to the execution of DXCap.exe. However, be aware that there may be legitimate uses of DXCap.exe by authorized users, which should be considered when identifying false positives. This strategy aligns with recognizing tactics and techniques such as Execution and Command And Scripting Interpreter, which are crucial for maintaining a secure Windows environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of of Dxcap.exe",
      "answer": "In order to detect the execution of Dxcap.exe, you should focus on monitoring process creation events within Windows environments. Specifically, watch for instances where a process is initiated that either ends with the filename '\\DXCap.exe' or explicitly has 'DXCap.exe' as its original filename. Additionally, pay attention to command-line inputs containing ' -c ', since the executable can be run without directly referring to the \".exe\" file extension. This detection approach aims to identify potentially malicious activity related to the execution of DXCap.exe. However, be aware that there may be legitimate uses of DXCap.exe by authorized users, which should be considered when identifying false positives. This strategy aligns with recognizing tactics and techniques such as Execution and Command And Scripting Interpreter, which are crucial for maintaining a secure Windows environment."
    }
  },
  {
    "instruction": "How can I detect: loading of \"RjvPlatform.dll\" by the \"SystemResetPlatform.exe\" binary which can be abused as a method of DLL side loading since the \"$SysReset\" directory isn't created by default.",
    "context": "",
    "output": "In order to detect loading of \"RjvPlatform.dll\" by the \"SystemResetPlatform.exe\" binary which can be abused as a method of DLL side loading since the \"$SysReset\" directory isn't created by default, you should: focus on monitoring image load events on Windows systems, specifically looking for instances where \"SystemResetPlatform.exe\" located at \"C:\\Windows\\System32\\SystemResetPlatform\\SystemResetPlatform.exe\" loads \"RjvPlatform.dll\" from \"C:\\$SysReset\\Framework\\Stack\". This particular activity is notable because the \"$SysReset\" directory is not typically created by the operating system, implying that the loading of \"RjvPlatform.dll\" in this manner could be indicative of a DLL side-loading attempt, a technique often used by malicious actors to execute arbitrary code. It is important to be aware that there might be scenarios where this detection could trigger on legitimate activities that are not yet known, hence, potential false positives are classified as \"unknown\". The seriousness of this detection is considered to be of medium level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loading of \"RjvPlatform.dll\" by the \"SystemResetPlatform.exe\" binary which can be abused as a method of DLL side loading since the \"$SysReset\" directory isn't created by default.",
      "answer": "In order to detect loading of \"RjvPlatform.dll\" by the \"SystemResetPlatform.exe\" binary which can be abused as a method of DLL side loading since the \"$SysReset\" directory isn't created by default, you should: focus on monitoring image load events on Windows systems, specifically looking for instances where \"SystemResetPlatform.exe\" located at \"C:\\Windows\\System32\\SystemResetPlatform\\SystemResetPlatform.exe\" loads \"RjvPlatform.dll\" from \"C:\\$SysReset\\Framework\\Stack\". This particular activity is notable because the \"$SysReset\" directory is not typically created by the operating system, implying that the loading of \"RjvPlatform.dll\" in this manner could be indicative of a DLL side-loading attempt, a technique often used by malicious actors to execute arbitrary code. It is important to be aware that there might be scenarios where this detection could trigger on legitimate activities that are not yet known, hence, potential false positives are classified as \"unknown\". The seriousness of this detection is considered to be of medium level."
    }
  },
  {
    "instruction": "Please help me detect the following: exploitation of the TerraMaster TOS vulnerability described in CVE-2020-28188",
    "context": "",
    "output": "Sure!\nIn order to detect the exploitation of the TerraMaster TOS vulnerability described in CVE-2020-28188, you should: Focus on monitoring web server logs for specific indicators of compromise. The key aspect to look for is HTTP GET requests made to the '/include/makecvs.php' page which also include '?Event=' in the query string. Additionally, the presence of certain keywords in the query parameters, such as 'curl', 'wget', '.py', '.sh', 'chmod', and '_GET', strengthens the suspicion of an attack. These indicators suggest an adversary is attempting to exploit the vulnerability to execute arbitrary commands or scripts on the webserver. The logs from the webserver should be thoroughly examined for entries that combine these signs. Capture the client IP (c-ip) and DNS (c-dns) information as it could be crucial for the investigation. Note that the confidence level in this detection rule is high, even though there might be unknown cases leading to false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of the TerraMaster TOS vulnerability described in CVE-2020-28188",
      "answer": "In order to detect the exploitation of the TerraMaster TOS vulnerability described in CVE-2020-28188, you should: Focus on monitoring web server logs for specific indicators of compromise. The key aspect to look for is HTTP GET requests made to the '/include/makecvs.php' page which also include '?Event=' in the query string. Additionally, the presence of certain keywords in the query parameters, such as 'curl', 'wget', '.py', '.sh', 'chmod', and '_GET', strengthens the suspicion of an attack. These indicators suggest an adversary is attempting to exploit the vulnerability to execute arbitrary commands or scripts on the webserver. The logs from the webserver should be thoroughly examined for entries that combine these signs. Capture the client IP (c-ip) and DNS (c-dns) information as it could be crucial for the investigation. Note that the confidence level in this detection rule is high, even though there might be unknown cases leading to false positives."
    }
  },
  {
    "instruction": "How can I detect: activity as \"net user administrator /domain\" and \"net group domain admins /domain\"",
    "context": "",
    "output": "In order to detect activity as \"net user administrator /domain\" and \"net group domain admins /domain\", you should observe security event logs on Windows domain controllers for elevated volumes of event ID 4661. This event ID becomes particularly noteworthy when the access mask is set to '0x2d', and the object types involved are either 'SAM_USER' or 'SAM_GROUP'. Moreover, the object names in question will start with 'S-1-5-21-' and end with either '-500' (indicating an Administrator account) or '-512' (indicating a Domain Admins group). The high frequency of such events might indicate unauthorized attempts to access sensitive account information or modify group memberships within the domain. Be aware that legitimate administrator activities can also trigger these alerts, thus they are considered potential false positives. The severity of this alert is classified as high, emphasizing the critical nature of the detected activities in the context of security monitoring.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "activity as \"net user administrator /domain\" and \"net group domain admins /domain\"",
      "answer": "In order to detect activity as \"net user administrator /domain\" and \"net group domain admins /domain\", you should observe security event logs on Windows domain controllers for elevated volumes of event ID 4661. This event ID becomes particularly noteworthy when the access mask is set to '0x2d', and the object types involved are either 'SAM_USER' or 'SAM_GROUP'. Moreover, the object names in question will start with 'S-1-5-21-' and end with either '-500' (indicating an Administrator account) or '-512' (indicating a Domain Admins group). The high frequency of such events might indicate unauthorized attempts to access sensitive account information or modify group memberships within the domain. Be aware that legitimate administrator activities can also trigger these alerts, thus they are considered potential false positives. The severity of this alert is classified as high, emphasizing the critical nature of the detected activities in the context of security monitoring."
    }
  },
  {
    "instruction": "Please help me detect the following: use of the spoolss named pipe over SMB. This can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled.",
    "context": "",
    "output": "Sure!\nIn order to detect the use of the spoolss named pipe over SMB, which can be used to trigger the authentication via NTLM of any machine that has the spool service enabled, you should: Focus on analyzing SMB file event logs from Zeek monitoring, specifically targeting events where the file path ends with 'IPC$' and the name is identified as 'spoolss'. It's important to note that while this behavior might indicate an attack, there could be false positives. One common scenario where legitimate activities might be flagged involves Domain Controllers that also function as printer servers, which is not an uncommon configuration, though it's generally advised against. This detection strategy is considered to have a medium level of severity and is particularly tied to identifying potential exploitation attempts to authenticate using NTLM, which is a critical aspect of monitoring for suspicious activities that could compromise network security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of the spoolss named pipe over SMB. This can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled.",
      "answer": "In order to detect the use of the spoolss named pipe over SMB, which can be used to trigger the authentication via NTLM of any machine that has the spool service enabled, you should: Focus on analyzing SMB file event logs from Zeek monitoring, specifically targeting events where the file path ends with 'IPC$' and the name is identified as 'spoolss'. It's important to note that while this behavior might indicate an attack, there could be false positives. One common scenario where legitimate activities might be flagged involves Domain Controllers that also function as printer servers, which is not an uncommon configuration, though it's generally advised against. This detection strategy is considered to have a medium level of severity and is particularly tied to identifying potential exploitation attempts to authenticate using NTLM, which is a critical aspect of monitoring for suspicious activities that could compromise network security."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of the \"cloudflared\" tool to connect back to a tunnel. This was seen used by threat actors to maintain persistence and remote access to compromised networks.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of the \"cloudflared\" tool to connect back to a tunnel, which was seen used by threat actors to maintain persistence and remote access to compromised networks, you should: Focus on monitoring process creation events in Windows systems. Look for the execution of commands that both contain the keywords 'tunnel' and 'run', which might indicate the use of \"cloudflared\" to establish a tunnel. Additionally, be vigilant for commands containing parameters like '--config', '--credentials-contents', '--credentials-file', or '--token'. These parameters can be used to configure the \"cloudflared\" connection or authenticate it, further indicating potential malicious use of the tool. However, it's essential to consider that there could be legitimate usage of Cloudflared, so not all detections should be treated as malicious without further investigation. The detection should focus on identifying potentially unauthorized or suspicious activities that align with the tactics and techniques associated with maintaining persistence and gaining remote access in a compromised network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the \"cloudflared\" tool to connect back to a tunnel. This was seen used by threat actors to maintain persistence and remote access to compromised networks.",
      "answer": "In order to detect execution of the \"cloudflared\" tool to connect back to a tunnel, which was seen used by threat actors to maintain persistence and remote access to compromised networks, you should: Focus on monitoring process creation events in Windows systems. Look for the execution of commands that both contain the keywords 'tunnel' and 'run', which might indicate the use of \"cloudflared\" to establish a tunnel. Additionally, be vigilant for commands containing parameters like '--config', '--credentials-contents', '--credentials-file', or '--token'. These parameters can be used to configure the \"cloudflared\" connection or authenticate it, further indicating potential malicious use of the tool. However, it's essential to consider that there could be legitimate usage of Cloudflared, so not all detections should be treated as malicious without further investigation. The detection should focus on identifying potentially unauthorized or suspicious activities that align with the tactics and techniques associated with maintaining persistence and gaining remote access in a compromised network."
    }
  },
  {
    "instruction": "How can I detect: remote RPC calls to read information about scheduled tasks via SASec",
    "context": "",
    "output": "In order to detect remote RPC calls to read information about scheduled tasks via SASec, you should monitor logs from the RPC Firewall, specifically focusing on application category logs. Ensure the RPC Firewall is installed and applies to all processes with the configuration \"audit:true action:block uuid:378e52b0-c0a9-11cf-822d-00aa0051e40f\". Look for log entries in the RPCFW Event Log that have an EventID of 3, which signals an operation related to this specific UUID interface - identified to be associated with actions like reading information about scheduled tasks via SASec. It is important to exclude operations with an OpNum of 0 or 1 from this detection as they are filtered out to reduce false positives. This method of detection leans on understanding complex interactions and filtering for precise activities, elevating the importance of meticulous log analysis in identifying suspicious remote procedure calls that could indicate malicious intent or breach attempts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls to read information about scheduled tasks via SASec",
      "answer": "In order to detect remote RPC calls to read information about scheduled tasks via SASec, you should monitor logs from the RPC Firewall, specifically focusing on application category logs. Ensure the RPC Firewall is installed and applies to all processes with the configuration \"audit:true action:block uuid:378e52b0-c0a9-11cf-822d-00aa0051e40f\". Look for log entries in the RPCFW Event Log that have an EventID of 3, which signals an operation related to this specific UUID interface - identified to be associated with actions like reading information about scheduled tasks via SASec. It is important to exclude operations with an OpNum of 0 or 1 from this detection as they are filtered out to reduce false positives. This method of detection leans on understanding complex interactions and filtering for precise activities, elevating the importance of meticulous log analysis in identifying suspicious remote procedure calls that could indicate malicious intent or breach attempts."
    }
  },
  {
    "instruction": "Can you explain how to detect: Use IMEWDBLD.exe (built-in to windows) to download a file",
    "context": "",
    "output": "Certainly!\n\nIn order to use IMEWDBLD.exe (built-in to windows) to download a file, you should focus on monitoring network connection logs on Windows systems. Specifically, look out for connections that have been initiated where the process image name ends with '\\IMEWDBLD.exe'. This might indicate an attempt to use this legitimate Windows executable for malicious purposes, such as downloading a file that could be harmful or part of an attack chain.\n\nPay attention to instances of this behavior, as it is marked with a high level of severity, implying that it's a significant security risk. However, be aware that there can be legitimate uses of this executable in scripts, so you should consider this when evaluating alerts to reduce false positives. The detection focuses on unconventional use of IMEWDBLD.exe, aligning with tactics such as Execution and Command and Control within security frameworks like MITRE ATT&CK, where adversaries may use native system tools to facilitate their attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Use IMEWDBLD.exe (built-in to windows) to download a file",
      "answer": "In order to use IMEWDBLD.exe (built-in to windows) to download a file, you should focus on monitoring network connection logs on Windows systems. Specifically, look out for connections that have been initiated where the process image name ends with '\\IMEWDBLD.exe'. This might indicate an attempt to use this legitimate Windows executable for malicious purposes, such as downloading a file that could be harmful or part of an attack chain.\n\nPay attention to instances of this behavior, as it is marked with a high level of severity, implying that it's a significant security risk. However, be aware that there can be legitimate uses of this executable in scripts, so you should consider this when evaluating alerts to reduce false positives. The detection focuses on unconventional use of IMEWDBLD.exe, aligning with tactics such as Execution and Command and Control within security frameworks like MITRE ATT&CK, where adversaries may use native system tools to facilitate their attacks."
    }
  },
  {
    "instruction": "How can I detect: well-known credential dumping tools execution via specific named pipes",
    "context": "",
    "output": "In order to detect well-known credential dumping tools execution via specific named pipes, you should monitor Windows named pipe creation events. Specifically, look for the creation of named pipes that contain the strings '\\lsadump', '\\cachedump', or '\\wceservicepipe'. These particular named pipe names are commonly associated with credential dumping activities, which are tactics employed to retrieve authentication credentials from Windows systems. Monitoring for these events requires configuring logging for Named Pipe Events in Sysmon, specifically Event ID 17 (Pipe Created) and Event ID 18 (Pipe Connected). It's essential to ensure that your Sysmon configuration is set to log these types of events, which is a configuration that can be found in popular Sysmon configurations available online. However, organizations should verify that their current configuration supports this level of monitoring.\n\nThe detection of such activities is critical as it directly relates to the tactics and techniques of Credential Access through Credential Dumping. Be aware that there could be legitimate uses of tools that interact with named pipes in this manner, such as administrators using tools for password recovery. These instances are considered false positives in the context of this monitoring strategy. Given the critical level of this rule, it's important to investigate and differentiate between malicious activities and legitimate administrative actions to avoid unnecessary alarm.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "well-known credential dumping tools execution via specific named pipes",
      "answer": "In order to detect well-known credential dumping tools execution via specific named pipes, you should monitor Windows named pipe creation events. Specifically, look for the creation of named pipes that contain the strings '\\lsadump', '\\cachedump', or '\\wceservicepipe'. These particular named pipe names are commonly associated with credential dumping activities, which are tactics employed to retrieve authentication credentials from Windows systems. Monitoring for these events requires configuring logging for Named Pipe Events in Sysmon, specifically Event ID 17 (Pipe Created) and Event ID 18 (Pipe Connected). It's essential to ensure that your Sysmon configuration is set to log these types of events, which is a configuration that can be found in popular Sysmon configurations available online. However, organizations should verify that their current configuration supports this level of monitoring.\n\nThe detection of such activities is critical as it directly relates to the tactics and techniques of Credential Access through Credential Dumping. Be aware that there could be legitimate uses of tools that interact with named pipes in this manner, such as administrators using tools for password recovery. These instances are considered false positives in the context of this monitoring strategy. Given the critical level of this rule, it's important to investigate and differentiate between malicious activities and legitimate administrative actions to avoid unnecessary alarm."
    }
  },
  {
    "instruction": "Please help me detect the following: Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR.\nThe COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR).\nThese profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.\n(Citation: Microsoft Profiling Mar 2017)\n(Citation: Microsoft COR_PROFILER Feb 2013)\n",
    "context": "",
    "output": "Sure!\nIn order to detect adversaries leveraging the COR_PROFILER environment variable to hijack the execution flow of programs loading the .NET CLR, you should: Monitor Windows PowerShell script logs for references to three specific environment variables: `$env:COR_ENABLE_PROFILING`, `$env:COR_PROFILER`, and `$env:COR_PROFILER_PATH`. The presence of these environment variables in PowerShell script blocks may indicate an attempt to tamper with .NET CLR processes by specifying an external profiling DLL. This technique allows attackers to monitor and potentially manipulate the execution of managed code within the CLR, a method often exploited for malicious purposes. Script Block Logging within Windows must be enabled to capture these PowerShell command executions. Be aware that legitimate administrative scripts may also use these environment variables, leading to potential false positives. This detection operates at a medium threat level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR.\nThe COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR).\nThese profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.\n(Citation: Microsoft Profiling Mar 2017)\n(Citation: Microsoft COR_PROFILER Feb 2013)\n",
      "answer": "In order to detect adversaries leveraging the COR_PROFILER environment variable to hijack the execution flow of programs loading the .NET CLR, you should: Monitor Windows PowerShell script logs for references to three specific environment variables: `$env:COR_ENABLE_PROFILING`, `$env:COR_PROFILER`, and `$env:COR_PROFILER_PATH`. The presence of these environment variables in PowerShell script blocks may indicate an attempt to tamper with .NET CLR processes by specifying an external profiling DLL. This technique allows attackers to monitor and potentially manipulate the execution of managed code within the CLR, a method often exploited for malicious purposes. Script Block Logging within Windows must be enabled to capture these PowerShell command executions. Be aware that legitimate administrative scripts may also use these environment variables, leading to potential false positives. This detection operates at a medium threat level."
    }
  },
  {
    "instruction": "Can you explain how to detect: Obfuscated use of stdin to execute PowerShell",
    "context": "",
    "output": "Certainly!\n\nIn order to detect obfuscated use of stdin to execute PowerShell, you should monitor security logs on Windows systems. Specifically, focus on events with ID 4697, which records service installations. This scrutiny becomes effective only when the 'System Security Extension' audit subcategory is enabled, as it allows the logging of these events. Look for services being installed where the service file name incorporates 'cmd' or 'powershell' along with either the presence of 'noexit' or the explicit command invocation patterns ' /c ' and ' /r '. This combination is indicative of an attempt to obfuscate the execution of PowerShell via standard input mechanisms, a tactic often employed to avoid detection by simple command line monitoring tools.\n\nPay attention to services that contain both 'cmd' and 'powershell' in their installation path or command line because this is a common method employed by adversaries to execute PowerShell scripts in a way that might not be immediately apparent to casual observation or basic detection mechanisms. Additionally, the use of 'noexit', ' /c ', or ' /r ' further suggests an attempt to control the PowerShell interpreter's behavior, typically to ensure that scripts execute in a particular context or to hide their execution.\n\nDue to the sophisticated nature of these detection methods, any hits on these criteria should be treated with a high level of suspicion. However, maintain awareness of potential unknown false positives, which could arise from legitimate administrative activities or unique software installation practices within your environment. Tags associated with this detection tactic include techniques and tactics around the execution of scripts, obfuscation, and potentially undesired or unauthorized service installation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should monitor security logs on Windows systems. Specifically, focus on events with ID 4697, which records service installations. This scrutiny becomes effective only when the 'System Security Extension' audit subcategory is enabled, as it allows the logging of these events. Look for services being installed where the service file name incorporates 'cmd' or 'powershell' along with either the presence of 'noexit' or the explicit command invocation patterns ' /c ' and ' /r '. This combination is indicative of an attempt to obfuscate the execution of PowerShell via standard input mechanisms, a tactic often employed to avoid detection by simple command line monitoring tools.\n\nPay attention to services that contain both 'cmd' and 'powershell' in their installation path or command line because this is a common method employed by adversaries to execute PowerShell scripts in a way that might not be immediately apparent to casual observation or basic detection mechanisms. Additionally, the use of 'noexit', ' /c ', or ' /r ' further suggests an attempt to control the PowerShell interpreter's behavior, typically to ensure that scripts execute in a particular context or to hide their execution.\n\nDue to the sophisticated nature of these detection methods, any hits on these criteria should be treated with a high level of suspicion. However, maintain awareness of potential unknown false positives, which could arise from legitimate administrative activities or unique software installation practices within your environment. Tags associated with this detection tactic include techniques and tactics around the execution of scripts, obfuscation, and potentially undesired or unauthorized service installation."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of grep to identify information about the operating system architecture. Often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\"\n",
    "context": "",
    "output": "In order to detect the use of grep to identify information about the operating system architecture, often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\", you should: Monitor process creation logs on Linux systems for any instance where the 'grep' command ends its execution path, indicating it's being used. Additionally, pay attention to cases where the command line arguments end with architecture information keywords such as 'aarch64', 'arm', 'i386', 'i686', 'mips', or 'x86_64'. These indicators can suggest an attempt to pinpoint the architecture of the operating system, which may be a precursor or component of a larger reconnaissance strategy. It is important to capture all conditions where both the specific use of 'grep' and these architecture-related command line arguments occur together. However, be aware that this rule might produce unknown false positives, meaning it should be considered as having a low alert level until further verification of malicious intent can be established.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of grep to identify information about the operating system architecture. Often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\"\n",
      "answer": "In order to detect the use of grep to identify information about the operating system architecture, often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\", you should: Monitor process creation logs on Linux systems for any instance where the 'grep' command ends its execution path, indicating it's being used. Additionally, pay attention to cases where the command line arguments end with architecture information keywords such as 'aarch64', 'arm', 'i386', 'i686', 'mips', or 'x86_64'. These indicators can suggest an attempt to pinpoint the architecture of the operating system, which may be a precursor or component of a larger reconnaissance strategy. It is important to capture all conditions where both the specific use of 'grep' and these architecture-related command line arguments occur together. However, be aware that this rule might produce unknown false positives, meaning it should be considered as having a low alert level until further verification of malicious intent can be established."
    }
  },
  {
    "instruction": "How to detect: failed logins with multiple accounts from a single process on the system.",
    "context": "",
    "output": "In order to detect failed logins with multiple accounts from a single process on the system, you should monitor for specific security events within the Windows operating environment. Focus on tracking Event ID 4625, which corresponds to failed login attempts, specifically those that utilize a Logon Type of 2, indicating interactive logins. This monitoring should occur over a 24-hour period to gather comprehensive data.\n\nIt is critical to exclude any events where the ProcessName is not specified (indicated by a '-'), as these do not provide the necessary information for analysis. The core of the detection strategy hinges on identifying scenarios where more than 10 failed login attempts have been made using different user accounts but originating from the same process.\n\nBe mindful that certain environments, such as terminal servers, jump servers, Citrix server farms, or workstations where user accounts are frequently switched, might naturally exhibit this behavior and therefore could be sources of false positives.\n\nThis approach is aligned with identifying potential brute force attacks or other unauthorized access attempts, focusing on techniques that fall under the reconnaissance and credential access tactics. By scrutinizing event logs for these specific failed login characteristics, it's possible to pinpoint unusual activity that could indicate a security threat or attack attempt on the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "failed logins with multiple accounts from a single process on the system.",
      "answer": "In order to detect failed logins with multiple accounts from a single process on the system, you should monitor for specific security events within the Windows operating environment. Focus on tracking Event ID 4625, which corresponds to failed login attempts, specifically those that utilize a Logon Type of 2, indicating interactive logins. This monitoring should occur over a 24-hour period to gather comprehensive data.\n\nIt is critical to exclude any events where the ProcessName is not specified (indicated by a '-'), as these do not provide the necessary information for analysis. The core of the detection strategy hinges on identifying scenarios where more than 10 failed login attempts have been made using different user accounts but originating from the same process.\n\nBe mindful that certain environments, such as terminal servers, jump servers, Citrix server farms, or workstations where user accounts are frequently switched, might naturally exhibit this behavior and therefore could be sources of false positives.\n\nThis approach is aligned with identifying potential brute force attacks or other unauthorized access attempts, focusing on techniques that fall under the reconnaissance and credential access tactics. By scrutinizing event logs for these specific failed login characteristics, it's possible to pinpoint unusual activity that could indicate a security threat or attack attempt on the system."
    }
  },
  {
    "instruction": "How to detect: loading of \"Amsi.dll\" by a living of the land process. This could be an indication of a \"PowerShell without PowerShell\" attack",
    "context": "",
    "output": "In order to detect loading of \"Amsi.dll\" by a living off the land process, which could be an indication of a \"PowerShell without PowerShell\" attack, you should monitor for the loading of the AMSI (Anti-Malware Scan Interface) DLL ('amsi.dll') by specific Windows processes that are typically used by adversaries to execute commands without directly invoking PowerShell. These processes include 'ExtExport.exe', 'odbcconf.exe', 'regsvr32.exe', and 'rundll32.exe'. Such activity should be closely monitored within the Windows environment, particularly in the context of image load events. Doing so is crucial because adversaries often leverage living off the land binaries (LOLBins) like these to bypass detection mechanisms and execute malicious commands. It's important to note, however, that due to the legitimate use of these processes and DLLs in various scenarios, some benign activities might be misidentified as malicious, though these occurrences are currently undefined ('Unknown' false positives). The detection of such an event is considered high severity, indicating the critical nature of this behavior in the context of an attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loading of \"Amsi.dll\" by a living of the land process. This could be an indication of a \"PowerShell without PowerShell\" attack",
      "answer": "In order to detect loading of \"Amsi.dll\" by a living off the land process, which could be an indication of a \"PowerShell without PowerShell\" attack, you should monitor for the loading of the AMSI (Anti-Malware Scan Interface) DLL ('amsi.dll') by specific Windows processes that are typically used by adversaries to execute commands without directly invoking PowerShell. These processes include 'ExtExport.exe', 'odbcconf.exe', 'regsvr32.exe', and 'rundll32.exe'. Such activity should be closely monitored within the Windows environment, particularly in the context of image load events. Doing so is crucial because adversaries often leverage living off the land binaries (LOLBins) like these to bypass detection mechanisms and execute malicious commands. It's important to note, however, that due to the legitimate use of these processes and DLLs in various scenarios, some benign activities might be misidentified as malicious, though these occurrences are currently undefined ('Unknown' false positives). The detection of such an event is considered high severity, indicating the critical nature of this behavior in the context of an attack."
    }
  },
  {
    "instruction": "How to detect: SNAKE malware kernel driver file indicator",
    "context": "",
    "output": "In order to detect SNAKE malware kernel driver file indicator, you should: Monitor for any instance where a file event occurs on Windows systems, specifically targeting events where the file 'C:\\Windows\\System32\\Com\\Comadmin.dat' is involved. Such an event could indicate an attempt by the SNAKE malware to operate or signal its presence on the system. The detection of activity involving this file is considered critical due to the unlikely chance of false positives, suggesting that any hits on this rule should be treated with high urgency and investigated immediately. This detection strategy is vital in identifying and mitigating threats associated with malware operations and kernel driver manipulations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "SNAKE malware kernel driver file indicator",
      "answer": "In order to detect SNAKE malware kernel driver file indicator, you should: Monitor for any instance where a file event occurs on Windows systems, specifically targeting events where the file 'C:\\Windows\\System32\\Com\\Comadmin.dat' is involved. Such an event could indicate an attempt by the SNAKE malware to operate or signal its presence on the system. The detection of activity involving this file is considered critical due to the unlikely chance of false positives, suggesting that any hits on this rule should be treated with high urgency and investigated immediately. This detection strategy is vital in identifying and mitigating threats associated with malware operations and kernel driver manipulations."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of the builtin \"rmdir\" command in order to delete directories.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n",
    "context": "",
    "output": "In order to detect execution of the builtin \"rmdir\" command in order to delete directories and thus, identify adversaries' attempts to remove traces of their intrusion activities, including malware, tools, or other non-native files to minimize their footprint, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, keep an eye out for the activation of 'cmd.exe' or instances where its original file name 'Cmd.Exe' is involved. Additionally, watch closely for command lines containing the 'rmdir' command, especially those that also include the flags '/s' and '/q'. These flags, when used together, indicate a forceful and silent removal of directories and all of their contents, which could suggest an attempt to erase evidence of an intrusion or malicious activity. This detection strategy, while set at a low alert level due to the potential of false positives\u2014since the actions could sometimes be part of legitimate system or network maintenance\u2014remains a critical piece in identifying and responding to potential attempts by attackers to clean up after themselves and hide their tracks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the builtin \"rmdir\" command in order to delete directories.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n",
      "answer": "In order to detect execution of the builtin \"rmdir\" command in order to delete directories and thus, identify adversaries' attempts to remove traces of their intrusion activities, including malware, tools, or other non-native files to minimize their footprint, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, keep an eye out for the activation of 'cmd.exe' or instances where its original file name 'Cmd.Exe' is involved. Additionally, watch closely for command lines containing the 'rmdir' command, especially those that also include the flags '/s' and '/q'. These flags, when used together, indicate a forceful and silent removal of directories and all of their contents, which could suggest an attempt to erase evidence of an intrusion or malicious activity. This detection strategy, while set at a low alert level due to the potential of false positives\u2014since the actions could sometimes be part of legitimate system or network maintenance\u2014remains a critical piece in identifying and responding to potential attempts by attackers to clean up after themselves and hide their tracks."
    }
  },
  {
    "instruction": "How can I detect: suspicious launch of the PSEXESVC service on this system and a sub process run as LOCAL_SYSTEM (-s), which means that someone remotely started a command on this system running it with highest privileges and not only the privileges of the login user account (e.g. the administrator account)",
    "context": "",
    "output": "In order to detect suspicious launch of the PSEXESVC service on this system and a sub process run as LOCAL_SYSTEM (-s), which means that someone remotely started a command on this system running it with the highest privileges and not only the privileges of the login user account (e.g., the administrator account), you should: Monitor Windows process creation logs for instances where the PSEXESVC.exe file is the parent image. Pay special attention if the process is initiated by user accounts that contain \"AUTHORI\" or \"AUTORI\" in their names, as this is often indicative of the command being executed under the context of an authority or administrator account, potentially in a different language setting. Be aware that there may be legitimate uses of this service for debugging purposes, particularly with Microsoft Intune, and such instances should be considered when evaluating potential false positives. This is a critical measure for identifying signs of remote command execution attempts that leverage high privileges on the target system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious launch of the PSEXESVC service on this system and a sub process run as LOCAL_SYSTEM (-s), which means that someone remotely started a command on this system running it with highest privileges and not only the privileges of the login user account (e.g. the administrator account)",
      "answer": "In order to detect suspicious launch of the PSEXESVC service on this system and a sub process run as LOCAL_SYSTEM (-s), which means that someone remotely started a command on this system running it with the highest privileges and not only the privileges of the login user account (e.g., the administrator account), you should: Monitor Windows process creation logs for instances where the PSEXESVC.exe file is the parent image. Pay special attention if the process is initiated by user accounts that contain \"AUTHORI\" or \"AUTORI\" in their names, as this is often indicative of the command being executed under the context of an authority or administrator account, potentially in a different language setting. Be aware that there may be legitimate uses of this service for debugging purposes, particularly with Microsoft Intune, and such instances should be considered when evaluating potential false positives. This is a critical measure for identifying signs of remote command execution attempts that leverage high privileges on the target system."
    }
  },
  {
    "instruction": "How to detect: certain command line flag combination used by mpiexec.exe LOLBIN from HPC pack that can be used to execute any other binary",
    "context": "",
    "output": "In order to detect a certain command line flag combination used by mpiexec.exe LOLBIN from HPC Pack that can be used to execute any other binary, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to instances where the mpiexec.exe file is being executed, which can be identified either through the file's name ending with '\\mpiexec.exe', its Image Hash (Imphash) being 'd8b52ef6aaa3a81501bdfff9dbb96217', or any hashes containing the specific Imphash value 'd8b52ef6aaa3a81501bdfff9dbb96217'. Additionally, it's critical to watch for the execution of mpiexec.exe with specific command line flags (' /n 1 ' or ' -n 1 '), as these flags are indicative of an attempt to misuse the LOLBIN for potentially malicious purposes. Given the high-risk nature of these indicators, all detected conditions should be met before generating an alert to avoid false positives, although unknown false positives have been acknowledged.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "certain command line flag combination used by mpiexec.exe LOLBIN from HPC pack that can be used to execute any other binary",
      "answer": "In order to detect a certain command line flag combination used by mpiexec.exe LOLBIN from HPC Pack that can be used to execute any other binary, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to instances where the mpiexec.exe file is being executed, which can be identified either through the file's name ending with '\\mpiexec.exe', its Image Hash (Imphash) being 'd8b52ef6aaa3a81501bdfff9dbb96217', or any hashes containing the specific Imphash value 'd8b52ef6aaa3a81501bdfff9dbb96217'. Additionally, it's critical to watch for the execution of mpiexec.exe with specific command line flags (' /n 1 ' or ' -n 1 '), as these flags are indicative of an attempt to misuse the LOLBIN for potentially malicious purposes. Given the high-risk nature of these indicators, all detected conditions should be met before generating an alert to avoid false positives, although unknown false positives have been acknowledged."
    }
  },
  {
    "instruction": "Please help me detect the following: when the email sending feature is enabled for an AWS account and the email address verification request is dispatched in quick succession",
    "context": "",
    "output": "Sure!\nIn order to detect when the email sending feature is enabled for an AWS account and the email address verification request is dispatched in quick succession, you should monitor AWS CloudTrail logs for specific activities related to the Simple Email Service (SES). Look out for two distinct events occurring within a short timeframe of 5 minutes. The first event of interest is the \"UpdateAccountSendingEnabled\" action, indicating that the email sending capability on the AWS account has been modified. The second key event to watch for is \"VerifyEmailIdentity\", which signifies that a request to verify an email address has been made. These events should both originate from the 'ses.amazonaws.com' service. Identifying both of these actions occurring close together is crucial for spotting potential unauthorized or suspicious activity aimed at exploiting email sending features. Be aware that legitimate configuration activities related to SES might also trigger these detections, hence they're considered as potential false positives. This monitoring approach falls under medium-level priority due to the nature of actions being tracked, focusing on potential abuse of email functionalities which could be related to broader tactics and techniques such as Phishing and Initial Access.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when the email sending feature is enabled for an AWS account and the email address verification request is dispatched in quick succession",
      "answer": "In order to detect when the email sending feature is enabled for an AWS account and the email address verification request is dispatched in quick succession, you should monitor AWS CloudTrail logs for specific activities related to the Simple Email Service (SES). Look out for two distinct events occurring within a short timeframe of 5 minutes. The first event of interest is the \"UpdateAccountSendingEnabled\" action, indicating that the email sending capability on the AWS account has been modified. The second key event to watch for is \"VerifyEmailIdentity\", which signifies that a request to verify an email address has been made. These events should both originate from the 'ses.amazonaws.com' service. Identifying both of these actions occurring close together is crucial for spotting potential unauthorized or suspicious activity aimed at exploiting email sending features. Be aware that legitimate configuration activities related to SES might also trigger these detections, hence they're considered as potential false positives. This monitoring approach falls under medium-level priority due to the nature of actions being tracked, focusing on potential abuse of email functionalities which could be related to broader tactics and techniques such as Phishing and Initial Access."
    }
  },
  {
    "instruction": "Explain how should I detect the following: dropping of dll files in system32 that may be used to retrieve user credentials from LSASS",
    "context": "",
    "output": "In order to detect the dropping of dll files in system32 that may be used to retrieve user credentials from LSASS, you should: Focus on monitoring process creation events in Windows environments. Particularly, you need to keep an eye out for command line activities that exhibit specific patterns indicative of such malicious intent. The patterns to watch include the presence of 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa', 'scecli\\0*', and 'reg add' all together in the command line. This indicates an attempt to manipulate registry keys associated with the Local Security Authority Subsystem Service (LSASS), potentially for deploying or modifying Dynamic Link Libraries (DLLs) in a manner that primes them for credential theft. It's crucial to note, however, that as of the guidance provided, there are unknown scenarios that might lead to false positives. Thus, any detection at a medium level of confidence should prompt further investigation rather than immediate remediation action.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "dropping of dll files in system32 that may be used to retrieve user credentials from LSASS",
      "answer": "In order to detect the dropping of dll files in system32 that may be used to retrieve user credentials from LSASS, you should: Focus on monitoring process creation events in Windows environments. Particularly, you need to keep an eye out for command line activities that exhibit specific patterns indicative of such malicious intent. The patterns to watch include the presence of 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa', 'scecli\\0*', and 'reg add' all together in the command line. This indicates an attempt to manipulate registry keys associated with the Local Security Authority Subsystem Service (LSASS), potentially for deploying or modifying Dynamic Link Libraries (DLLs) in a manner that primes them for credential theft. It's crucial to note, however, that as of the guidance provided, there are unknown scenarios that might lead to false positives. Thus, any detection at a medium level of confidence should prompt further investigation rather than immediate remediation action."
    }
  },
  {
    "instruction": "Can you explain how to detect: Rule to detect the configuration of Run Once registry key. Configured payload can be run by runonce.exe /AlternateShellStartup",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the configuration of Run Once registry key, where the configured payload can be run by runonce.exe /AlternateShellStartup, you should monitor Windows registry events with a focus on changes to registry keys. Specifically, observe any modification to keys starting with 'HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components' and ending with '\\StubPath'. These modifications are indicative that an application or script has been set up to execute once via the 'Run Once' mechanism in the Windows registry.\n\nFor accurate detection, differentiate between potentially malicious activities and normal behavior by evaluating the details of the modifications. Exclude entries that involve known legitimate paths and parameters for Google Chrome or Microsoft Edge browser installations. These paths are typically:\n- For Chrome: \"C:\\Program Files\\Google\\Chrome\\Application\\\" followed by parameters related to the installer 'chrmstp.exe' including flags for configuration, verbose logging, and system-level installation. In some cases, an additional flag indicating the channel (e.g., \"--channel=stable\") might be present and should be considered a normal activity indicator.\n- For Edge: Start with either \"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\\" or \"C:\\Program Files\\Microsoft\\Edge\\Application\\\", followed by parameters leading to 'setup.exe' with flags for configuring user settings, verbose logging, installing at the system level, specifying it is for Microsoft Edge, and indicating a stable channel.\n\nKeep in mind that false positives may occur due to legitimate modifications of the registry keys by authorized software installations or updates. Therefore, any detection should be analyzed in the context of additional information and system behavior to ascertain malicious intent. This monitoring strategy is aligned with understanding tactics and techniques associated with application shimming and persistence methods described in the MITRE ATT&CK framework, without explicitly triggering false alarms on legitimate software operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Rule to detect the configuration of Run Once registry key. Configured payload can be run by runonce.exe /AlternateShellStartup",
      "answer": "In order to detect the configuration of Run Once registry key, where the configured payload can be run by runonce.exe /AlternateShellStartup, you should monitor Windows registry events with a focus on changes to registry keys. Specifically, observe any modification to keys starting with 'HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components' and ending with '\\StubPath'. These modifications are indicative that an application or script has been set up to execute once via the 'Run Once' mechanism in the Windows registry.\n\nFor accurate detection, differentiate between potentially malicious activities and normal behavior by evaluating the details of the modifications. Exclude entries that involve known legitimate paths and parameters for Google Chrome or Microsoft Edge browser installations. These paths are typically:\n- For Chrome: \"C:\\Program Files\\Google\\Chrome\\Application\\\" followed by parameters related to the installer 'chrmstp.exe' including flags for configuration, verbose logging, and system-level installation. In some cases, an additional flag indicating the channel (e.g., \"--channel=stable\") might be present and should be considered a normal activity indicator.\n- For Edge: Start with either \"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\\" or \"C:\\Program Files\\Microsoft\\Edge\\Application\\\", followed by parameters leading to 'setup.exe' with flags for configuring user settings, verbose logging, installing at the system level, specifying it is for Microsoft Edge, and indicating a stable channel.\n\nKeep in mind that false positives may occur due to legitimate modifications of the registry keys by authorized software installations or updates. Therefore, any detection should be analyzed in the context of additional information and system behavior to ascertain malicious intent. This monitoring strategy is aligned with understanding tactics and techniques associated with application shimming and persistence methods described in the MITRE ATT&CK framework, without explicitly triggering false alarms on legitimate software operations."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task, you should monitor for specific event IDs and file paths that indicate the creation of a task which triggers the execution of programs not typically associated with scheduled tasks. \n\nFocusing on the Windows Task Scheduler service, especially looking for Event ID 129, which signifies the creation of a task process, is crucial. The detection is more effective if the Task Scheduler's operational logs are enabled, as they are disabled by default. \n\nPay particular attention to tasks that are initiating programs such as Calculator, Command Scripting Utility (CScript), Microsoft HTML Application Host (mshta), Microsoft Paint, Notepad, Microsoft Register Server (regsvr32), and Windows Script Host (wscript). These applications are generally not expected to be launched via scheduled tasks in most secure environments, their usage in such a manner can signify malicious intent, like an attacker seeking to execute code or scripts surreptitiously.\n\nHowever, it's important to note that some legitimate tasks might use these programs. Therefore, an analysis that considers the context in which these applications are used, and possibly excluding known and trusted tasks that use them, is crucial to reduce false positives and focus on genuinely suspicious activity. This nuanced approach is necessary to differentiate between benign and malicious task creations effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task",
      "answer": "In order to detect the execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task, you should monitor for specific event IDs and file paths that indicate the creation of a task which triggers the execution of programs not typically associated with scheduled tasks. \n\nFocusing on the Windows Task Scheduler service, especially looking for Event ID 129, which signifies the creation of a task process, is crucial. The detection is more effective if the Task Scheduler's operational logs are enabled, as they are disabled by default. \n\nPay particular attention to tasks that are initiating programs such as Calculator, Command Scripting Utility (CScript), Microsoft HTML Application Host (mshta), Microsoft Paint, Notepad, Microsoft Register Server (regsvr32), and Windows Script Host (wscript). These applications are generally not expected to be launched via scheduled tasks in most secure environments, their usage in such a manner can signify malicious intent, like an attacker seeking to execute code or scripts surreptitiously.\n\nHowever, it's important to note that some legitimate tasks might use these programs. Therefore, an analysis that considers the context in which these applications are used, and possibly excluding known and trusted tasks that use them, is crucial to reduce false positives and focus on genuinely suspicious activity. This nuanced approach is necessary to differentiate between benign and malicious task creations effectively."
    }
  },
  {
    "instruction": "Please help me detect the following: linux package removal using builtin tools such as \"yum\", \"apt\", \"apt-get\" or \"dpkg\".",
    "context": "",
    "output": "Sure!\nIn order to detect Linux package removal using built-in tools such as \"yum\", \"apt\", \"apt-get\", or \"dpkg\", you should monitor Linux systems for process creation events where the process image ends with '/yum', '/apt', '/apt-get', or '/dpkg'. The command line of the process should include keywords indicating package removal such as 'erase' or 'remove' for yum, 'remove' or 'purge' for apt and apt-get, '--remove' or ' -r ' for dpkg, and ' -e ' for rpm. It's important to note that there could be legitimate reasons for package removal, such as administrative tasks or scripts performing debugging and troubleshooting, which are considered to be potential false positives. The detection level for this activity is considered low due to the potential for legitimate use cases mirroring this behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "linux package removal using builtin tools such as \"yum\", \"apt\", \"apt-get\" or \"dpkg\".",
      "answer": "In order to detect Linux package removal using built-in tools such as \"yum\", \"apt\", \"apt-get\", or \"dpkg\", you should monitor Linux systems for process creation events where the process image ends with '/yum', '/apt', '/apt-get', or '/dpkg'. The command line of the process should include keywords indicating package removal such as 'erase' or 'remove' for yum, 'remove' or 'purge' for apt and apt-get, '--remove' or ' -r ' for dpkg, and ' -e ' for rpm. It's important to note that there could be legitimate reasons for package removal, such as administrative tasks or scripts performing debugging and troubleshooting, which are considered to be potential false positives. The detection level for this activity is considered low due to the potential for legitimate use cases mirroring this behavior."
    }
  },
  {
    "instruction": "How to detect: use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.\nInvolved domains are bin.equinox.io for download and *.ngrok.io for connections.\n",
    "context": "",
    "output": "In order to detect the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available, you should: focus on monitoring process creation logs on Windows systems. Look for command lines that contain specific patterns indicating port forwarding activities over common ports such as 139 (SMB), 445 (Microsoft-DS SMB file sharing), 3389 (RDP), 5985 (WinRM HTTP), and 5986 (WinRM HTTPS). Additionally, detect instances where command lines include arguments that start Ngrok with all configurations from a YAML file, which is a strong indication of configuring a tunnel. Monitoring for the execution of 'ngrok.exe' is crucial, especially when command lines involve initiating TCP or HTTP tunnels or when an authtoken is specified, as this often relates to setting up secure connections using Ngrok. Also, watch out for command lines executing any executable followed by 'authtoken' or starting Ngrok with '--all' switch, which might indicate an attempt to launch tunnels automatically. However, be aware of legitimate uses of these command line switches by other tools or when Ngrok is used for authorized development purposes such as debugging with HTTP 3978. The alert level for these detections should be considered high due to the potential for abuse in facilitating remote access to local services, which could be indicative of initial access or persistence mechanisms by threat actors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.\nInvolved domains are bin.equinox.io for download and *.ngrok.io for connections.\n",
      "answer": "In order to detect the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available, you should: focus on monitoring process creation logs on Windows systems. Look for command lines that contain specific patterns indicating port forwarding activities over common ports such as 139 (SMB), 445 (Microsoft-DS SMB file sharing), 3389 (RDP), 5985 (WinRM HTTP), and 5986 (WinRM HTTPS). Additionally, detect instances where command lines include arguments that start Ngrok with all configurations from a YAML file, which is a strong indication of configuring a tunnel. Monitoring for the execution of 'ngrok.exe' is crucial, especially when command lines involve initiating TCP or HTTP tunnels or when an authtoken is specified, as this often relates to setting up secure connections using Ngrok. Also, watch out for command lines executing any executable followed by 'authtoken' or starting Ngrok with '--all' switch, which might indicate an attempt to launch tunnels automatically. However, be aware of legitimate uses of these command line switches by other tools or when Ngrok is used for authorized development purposes such as debugging with HTTP 3978. The alert level for these detections should be considered high due to the potential for abuse in facilitating remote access to local services, which could be indicative of initial access or persistence mechanisms by threat actors."
    }
  },
  {
    "instruction": "Can you explain how to detect: Adversaries may disable security tools to avoid possible detection of their tools and activities by removing Windows Defender Definition Files",
    "context": "",
    "output": "Certainly!\n\nIn order to disable security tools to avoid possible detection of their tools and activities by removing Windows Defender Definition Files, you should: detect the creation of processes on Windows systems where the process image ends with '\\MpCmdRun.exe' or has the original filename 'MpCmdRun.exe'. Additionally, monitor for command lines containing both '-RemoveDefinitions' and '-All', indicating an attempt to remove all Windows Defender definition files. This activity should be logged with the computer name, user, command line, and parent command line information to help in the investigation. Be aware that as of now, there aren't well-known legitimate reasons for this action, but care should be taken to verify the context to avoid false positives. The threat level for this behavior is high due to its potential use in bypassing security measures.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may disable security tools to avoid possible detection of their tools and activities by removing Windows Defender Definition Files",
      "answer": "In order to disable security tools to avoid possible detection of their tools and activities by removing Windows Defender Definition Files, you should: detect the creation of processes on Windows systems where the process image ends with '\\MpCmdRun.exe' or has the original filename 'MpCmdRun.exe'. Additionally, monitor for command lines containing both '-RemoveDefinitions' and '-All', indicating an attempt to remove all Windows Defender definition files. This activity should be logged with the computer name, user, command line, and parent command line information to help in the investigation. Be aware that as of now, there aren't well-known legitimate reasons for this action, but care should be taken to verify the context to avoid false positives. The threat level for this behavior is high due to its potential use in bypassing security measures."
    }
  },
  {
    "instruction": "Can you explain how to detect: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment.\nThis may include things such as firewall rules and anti-viru\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect adversaries attempting to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment, including identifying firewall rules and anti-virus tools, you should: Monitor PowerShell script activity for commands and queries indicative of such reconnaissance efforts. Specifically, look out for PowerShell commands that utilize the 'get-process' function combined with '.Description' and '-like' to potentially enumerate processes and services related to security tools. Also, pay attention to any PowerShell script blocks that contain strings suggesting a search for security software names, such as \"*virus*\", \"*carbonblack*\", \"*defender*\", and \"*cylance*\". This detection requires that Script Block Logging be enabled in Windows environments to capture the execution of PowerShell scripts. Be mindful that this rule may generate alerts that need verification due to the potential for legitimate administrative activities triggering similar conditions. This approach is aligned with monitoring tactics and techniques related to the discovery and understanding of the defensive posture of a system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment.\nThis may include things such as firewall rules and anti-viru\n",
      "answer": "In order to detect adversaries attempting to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment, including identifying firewall rules and anti-virus tools, you should: Monitor PowerShell script activity for commands and queries indicative of such reconnaissance efforts. Specifically, look out for PowerShell commands that utilize the 'get-process' function combined with '.Description' and '-like' to potentially enumerate processes and services related to security tools. Also, pay attention to any PowerShell script blocks that contain strings suggesting a search for security software names, such as \"*virus*\", \"*carbonblack*\", \"*defender*\", and \"*cylance*\". This detection requires that Script Block Logging be enabled in Windows environments to capture the execution of PowerShell scripts. Be mindful that this rule may generate alerts that need verification due to the potential for legitimate administrative activities triggering similar conditions. This approach is aligned with monitoring tactics and techniques related to the discovery and understanding of the defensive posture of a system."
    }
  },
  {
    "instruction": "How to detect: Before deploying any new asset, change all default passwords to have values consistent with administrative level accounts.\nSigma detects default credentials usage. Sigma for Qualys vulnerability scanner. Scan type - Vulnerability Management.\n",
    "context": "",
    "output": "In order to Before deploying any new asset, change all default passwords to have values consistent with administrative level accounts, you should: Monitor logs from the Qualys product, particularly focusing on vulnerability management scans. Key attention should be given to scan results indicating the presence of vulnerabilities identified by their specific IDs, which include 10693, 11507, 11633, 11804, 11821, 11847, and extend through to 87098 and 87106 among others. These vulnerability IDs are flags for potential issues related to default credentials usage, signifying instances where assets might be vulnerable due to unchanged or weak default credentials. It is critical to address these vulnerabilities promptly to ensure that newly deployed assets are secure and not easily compromised by attackers exploiting default passwords, which could lead to unauthorized access. Detection of these specific vulnerabilities should be treated with a medium level of concern, and any positives, while sometimes could lead to false alarms, generally indicate a need for re-evaluation of the security parameters around password policies and asset configurations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Before deploying any new asset, change all default passwords to have values consistent with administrative level accounts.\nSigma detects default credentials usage. Sigma for Qualys vulnerability scanner. Scan type - Vulnerability Management.\n",
      "answer": "In order to Before deploying any new asset, change all default passwords to have values consistent with administrative level accounts, you should: Monitor logs from the Qualys product, particularly focusing on vulnerability management scans. Key attention should be given to scan results indicating the presence of vulnerabilities identified by their specific IDs, which include 10693, 11507, 11633, 11804, 11821, 11847, and extend through to 87098 and 87106 among others. These vulnerability IDs are flags for potential issues related to default credentials usage, signifying instances where assets might be vulnerable due to unchanged or weak default credentials. It is critical to address these vulnerabilities promptly to ensure that newly deployed assets are secure and not easily compromised by attackers exploiting default passwords, which could lead to unauthorized access. Detection of these specific vulnerabilities should be treated with a medium level of concern, and any positives, while sometimes could lead to false alarms, generally indicate a need for re-evaluation of the security parameters around password policies and asset configurations."
    }
  },
  {
    "instruction": "How can I detect: use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming)",
    "context": "",
    "output": "In order to detect the use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming), you should: monitor for the creation of processes on Windows systems where the original file name is 'sdelete.exe'. However, it's important to note that detections should exclude any cases where the image path ends with '\\sdelete.exe' or '\\sdelete64.exe' to avoid flagging legitimate usage of these tools. Key information to be logged includes the Computer Name, User, Command Line, and Parent Command Line. Be aware that legitimate system administrator activities might sometimes involve using such tools, which could be considered a false positive in the context of this detection. This process aims to recognize unauthorized modifications or potential misuse of Sdelete, a tool known for securely deleting files, indicating a high level of concern if detected under these conditions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming)",
      "answer": "In order to detect the use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming), you should: monitor for the creation of processes on Windows systems where the original file name is 'sdelete.exe'. However, it's important to note that detections should exclude any cases where the image path ends with '\\sdelete.exe' or '\\sdelete64.exe' to avoid flagging legitimate usage of these tools. Key information to be logged includes the Computer Name, User, Command Line, and Parent Command Line. Be aware that legitimate system administrator activities might sometimes involve using such tools, which could be considered a false positive in the context of this detection. This process aims to recognize unauthorized modifications or potential misuse of Sdelete, a tool known for securely deleting files, indicating a high level of concern if detected under these conditions."
    }
  },
  {
    "instruction": "How to detect: mount of ISO images on an endpoint",
    "context": "",
    "output": "In order to detect the mount of ISO images on an endpoint, you should monitor Windows Security audit logs specifically for events related to the access of removable storage. Focus on capturing events identified by EventID 4663, indicating an object's access attempt. These logs should come from the Security ObjectServer and involve FileType objects. Particularly, pay attention to access attempts involving objects whose names start with '\\Device\\CdRom', as this indicates the interaction with CD-ROM devices, typically used to read ISO images.\n\nHowever, not all access events to CD-ROM devices should be considered suspicious. For instance, accessing the '\\Device\\CdRom0\\setup.exe' path is excluded from detection criteria because it's commonly accessed during legitimate software installations via ISO files. Therefore, while monitoring for the described activities, filter out events involving this specific path to reduce false positives such as those triggered by software installation ISO files.\n\nThis monitoring process is essential for identifying unauthorized or unexpected mount of ISO images, which could be indicative of an attack attempt or unauthorized data retrieval. It's assessed at a medium level of importance due to its potential to catch malicious activities early. Keep an eye out for events meeting these criteria, as they are aligned with the detection of misuse of removable media which relates to several ATT&CK tactics and techniques including Initial Access, Execution, and Persistence, among others.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "mount of ISO images on an endpoint",
      "answer": "In order to detect the mount of ISO images on an endpoint, you should monitor Windows Security audit logs specifically for events related to the access of removable storage. Focus on capturing events identified by EventID 4663, indicating an object's access attempt. These logs should come from the Security ObjectServer and involve FileType objects. Particularly, pay attention to access attempts involving objects whose names start with '\\Device\\CdRom', as this indicates the interaction with CD-ROM devices, typically used to read ISO images.\n\nHowever, not all access events to CD-ROM devices should be considered suspicious. For instance, accessing the '\\Device\\CdRom0\\setup.exe' path is excluded from detection criteria because it's commonly accessed during legitimate software installations via ISO files. Therefore, while monitoring for the described activities, filter out events involving this specific path to reduce false positives such as those triggered by software installation ISO files.\n\nThis monitoring process is essential for identifying unauthorized or unexpected mount of ISO images, which could be indicative of an attack attempt or unauthorized data retrieval. It's assessed at a medium level of importance due to its potential to catch malicious activities early. Keep an eye out for events meeting these criteria, as they are aligned with the detection of misuse of removable media which relates to several ATT&CK tactics and techniques including Initial Access, Execution, and Persistence, among others."
    }
  },
  {
    "instruction": "Explain how should I detect the following: the execution of the extended storage procedure backdoor named Maggie in the context of Microsoft SQL server",
    "context": "",
    "output": "In order to detect the execution of the extended storage procedure backdoor named Maggie in the context of Microsoft SQL server, you should: Monitor application logs from Windows systems, specifically focusing on logs from the Microsoft SQL Server (identified by the product code MSSQLSERVER). Look for event ID 8128, which indicates the execution of stored procedures. Within these logs, pay special attention to any instances where the message content includes the string 'maggie'. This is a strong indicator of the Maggie backdoor being executed. It's important to note that while this activity is highly indicative of malicious behavior, there are circumstances under which legitimate stored procedures could be named 'maggie', leading to potential false positives. The severity of this detection is considered high due to the implications of a backdoor being present on a Microsoft SQL Server.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "the execution of the extended storage procedure backdoor named Maggie in the context of Microsoft SQL server",
      "answer": "In order to detect the execution of the extended storage procedure backdoor named Maggie in the context of Microsoft SQL server, you should: Monitor application logs from Windows systems, specifically focusing on logs from the Microsoft SQL Server (identified by the product code MSSQLSERVER). Look for event ID 8128, which indicates the execution of stored procedures. Within these logs, pay special attention to any instances where the message content includes the string 'maggie'. This is a strong indicator of the Maggie backdoor being executed. It's important to note that while this activity is highly indicative of malicious behavior, there are circumstances under which legitimate stored procedures could be named 'maggie', leading to potential false positives. The severity of this detection is considered high due to the implications of a backdoor being present on a Microsoft SQL Server."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when an attacker adds a new \"Debugger\" value to the \"AeDebug\" key in order to achieve persistence which will get invoked when an application crashes",
    "context": "",
    "output": "In order to detect when an attacker adds a new \"Debugger\" value to the \"AeDebug\" key in order to achieve persistence which will get invoked when an application crashes, you should monitor Windows registry settings for certain activities. Focus on registry setting activities categorized under registry_set with a product scope of Windows. Specifically, look for events where the EventType is SetValue, indicating a change is made to a registry value. The critical path to pay attention to includes changes to registry keys containing '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug\\Debugger'. This path is crucial because the AeDebug key is involved in debugging applications, and attackers often exploit it to achieve persistence by setting a new debugger value.\n\nFurthermore, refine your detection by concentrating on modifications where the target object, likely a DLL indicated by 'Details', ends with '.dll'. This specificity helps to narrow down to alterations that are more likely to be malicious debugger registrations rather than legitimate debugging setups. \n\nHowever, it is also essential to exclude from detection any changes that detail setting the debugger to '\"C:\\WINDOWS\\system32\\vsjitdebugger.exe\" -p %ld -e %ld -j 0x%p'. This particular setup can be a common and legitimate use of the debugger configuration, especially on developer machines, and should not be considered a security threat without further context.\n\nBe aware that there could be false positives, particularly in environments where custom debugger settings are legitimately used, like on developers' machines. Applying this detection logic involves balancing sensitivity to catch malicious actions while minimizing the impact of legitimate use cases being flagged as suspicious.\n\nThis monitoring is aligned with identifying tactics and techniques related to persistence mechanisms by attackers, specifically focusing on those who attempt to manipulate system debugging features to maintain their foothold within a system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker adds a new \"Debugger\" value to the \"AeDebug\" key in order to achieve persistence which will get invoked when an application crashes",
      "answer": "In order to detect when an attacker adds a new \"Debugger\" value to the \"AeDebug\" key in order to achieve persistence which will get invoked when an application crashes, you should monitor Windows registry settings for certain activities. Focus on registry setting activities categorized under registry_set with a product scope of Windows. Specifically, look for events where the EventType is SetValue, indicating a change is made to a registry value. The critical path to pay attention to includes changes to registry keys containing '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug\\Debugger'. This path is crucial because the AeDebug key is involved in debugging applications, and attackers often exploit it to achieve persistence by setting a new debugger value.\n\nFurthermore, refine your detection by concentrating on modifications where the target object, likely a DLL indicated by 'Details', ends with '.dll'. This specificity helps to narrow down to alterations that are more likely to be malicious debugger registrations rather than legitimate debugging setups. \n\nHowever, it is also essential to exclude from detection any changes that detail setting the debugger to '\"C:\\WINDOWS\\system32\\vsjitdebugger.exe\" -p %ld -e %ld -j 0x%p'. This particular setup can be a common and legitimate use of the debugger configuration, especially on developer machines, and should not be considered a security threat without further context.\n\nBe aware that there could be false positives, particularly in environments where custom debugger settings are legitimately used, like on developers' machines. Applying this detection logic involves balancing sensitivity to catch malicious actions while minimizing the impact of legitimate use cases being flagged as suspicious.\n\nThis monitoring is aligned with identifying tactics and techniques related to persistence mechanisms by attackers, specifically focusing on those who attempt to manipulate system debugging features to maintain their foothold within a system."
    }
  },
  {
    "instruction": "How can I detect: Execution of plink to perform data exfiltration and tunneling",
    "context": "",
    "output": "In order to execute plink to perform data exfiltration and tunneling, you should focus on detecting the process creation events on Windows systems that indicate the use of plink.exe, a command-line interface tool for secure shell (SSH) tunneling. Specifically, monitor for instances where plink.exe is executed with command lines that include attempts to connect to the local address 127.0.0.1 on port 3389, which is commonly used for Remote Desktop Protocol (RDP) connections, or directly specifying \":3389\" indicating an attempt to establish or interact with an RDP session through tunneling. Additionally, be vigilant for plink.exe processes launched with command lines specifying SSH tunneling through commonly used ports 443 (HTTPS) and 22 (SSH) with the '-P' flag, as these could also signify attempts at secure data exfiltration or tunneling. It is crucial to note that while not all uses of plink.exe are malicious \u2013 such as when it\u2019s used for administrative activity \u2013 the specified patterns are highly indicative of unauthorized or malicious activity and warrant a high level of scrutiny.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Execution of plink to perform data exfiltration and tunneling",
      "answer": "In order to execute plink to perform data exfiltration and tunneling, you should focus on detecting the process creation events on Windows systems that indicate the use of plink.exe, a command-line interface tool for secure shell (SSH) tunneling. Specifically, monitor for instances where plink.exe is executed with command lines that include attempts to connect to the local address 127.0.0.1 on port 3389, which is commonly used for Remote Desktop Protocol (RDP) connections, or directly specifying \":3389\" indicating an attempt to establish or interact with an RDP session through tunneling. Additionally, be vigilant for plink.exe processes launched with command lines specifying SSH tunneling through commonly used ports 443 (HTTPS) and 22 (SSH) with the '-P' flag, as these could also signify attempts at secure data exfiltration or tunneling. It is crucial to note that while not all uses of plink.exe are malicious \u2013 such as when it\u2019s used for administrative activity \u2013 the specified patterns are highly indicative of unauthorized or malicious activity and warrant a high level of scrutiny."
    }
  },
  {
    "instruction": "Explain how should I detect the following: rare service installs that only appear a few times per time frame and could reveal password dumpers, backdoor installs or other types of malicious services",
    "context": "",
    "output": "In order to detect rare service installs that only appear a few times per timeframe and could reveal password dumpers, backdoor installs, or other types of malicious services, you should:\nMonitor Windows System event logs, particularly focusing on events generated by the Service Control Manager (Provider_Name: 'Service Control Manager') with an Event ID of 7045. This Event ID is indicative of service installations on a Windows system. Analyze the occurrences of these events over a period of 7 days (timeframe: 7d) and identify services that have been installed fewer than 5 times within this timeframe (condition: selection | count() by ServiceName < 5). Such rare installations could potentially be an indicator of malicious activity, including but not limited to the deployment of password dumpers or backdoors. Be aware that some legitimate activities, such as software installations or updates, might also trigger these events (false positives: Software installation, Software updates). The level of confidence in this detection technique is categorized as low, indicating that while it can be a helpful indicator of suspicious activity, it should be used in conjunction with other assessment tools or techniques for a more definitive analysis.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "rare service installs that only appear a few times per time frame and could reveal password dumpers, backdoor installs or other types of malicious services",
      "answer": "In order to detect rare service installs that only appear a few times per timeframe and could reveal password dumpers, backdoor installs, or other types of malicious services, you should:\nMonitor Windows System event logs, particularly focusing on events generated by the Service Control Manager (Provider_Name: 'Service Control Manager') with an Event ID of 7045. This Event ID is indicative of service installations on a Windows system. Analyze the occurrences of these events over a period of 7 days (timeframe: 7d) and identify services that have been installed fewer than 5 times within this timeframe (condition: selection | count() by ServiceName < 5). Such rare installations could potentially be an indicator of malicious activity, including but not limited to the deployment of password dumpers or backdoors. Be aware that some legitimate activities, such as software installations or updates, might also trigger these events (false positives: Software installation, Software updates). The level of confidence in this detection technique is categorized as low, indicating that while it can be a helpful indicator of suspicious activity, it should be used in conjunction with other assessment tools or techniques for a more definitive analysis."
    }
  },
  {
    "instruction": "How to detect: Detection of child processes spawned with SYSTEM privileges by parents with non-SYSTEM privileges and Medium integrity level",
    "context": "",
    "output": "In order to detect child processes spawned with SYSTEM privileges by parents with non-SYSTEM privileges and Medium integrity level, you should: Monitor process creation events on Windows systems, particularly focusing on instances where a new process is initiated with SYSTEM level privileges (`IntegrityLevel: System`) by a parent process that operates under Medium integrity level (`ParentIntegrityLevel: Medium`) and is executed by the \"NT AUTHORITY\\SYSTEM\" user. This scenario is indicative of potential elevation of privilege attempts or malicious activity where an attacker might be trying to execute code with higher privileges than initially granted. It is essential to observe these events as they unfold within the context of Windows environments, specifically those that are enriched with Sysmon for detailed monitoring. Be aware that this kind of detection may bring up false positives, the nature of which could be unknown due to the varied legitimate uses of such privilege escalations under normal circumstances. However, such activities are classified at a high level of severity due to their potential impact and the tactics they represent, including privilege escalation and potentially others depending on the context of the attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detection of child processes spawned with SYSTEM privileges by parents with non-SYSTEM privileges and Medium integrity level",
      "answer": "In order to detect child processes spawned with SYSTEM privileges by parents with non-SYSTEM privileges and Medium integrity level, you should: Monitor process creation events on Windows systems, particularly focusing on instances where a new process is initiated with SYSTEM level privileges (`IntegrityLevel: System`) by a parent process that operates under Medium integrity level (`ParentIntegrityLevel: Medium`) and is executed by the \"NT AUTHORITY\\SYSTEM\" user. This scenario is indicative of potential elevation of privilege attempts or malicious activity where an attacker might be trying to execute code with higher privileges than initially granted. It is essential to observe these events as they unfold within the context of Windows environments, specifically those that are enriched with Sysmon for detailed monitoring. Be aware that this kind of detection may bring up false positives, the nature of which could be unknown due to the varied legitimate uses of such privilege escalations under normal circumstances. However, such activities are classified at a high level of severity due to their potential impact and the tactics they represent, including privilege escalation and potentially others depending on the context of the attack."
    }
  },
  {
    "instruction": "Can you explain how to detect: Local accounts, System Owner/User discovery using operating systems utilities",
    "context": "",
    "output": "Certainly!\n\nIn order to detect activities associated with local accounts, system owner/user discovery using operating systems utilities, you should monitor for the execution of specific Windows utilities and command patterns indicative of enumeration or information gathering efforts. This includes the launching of utilities like 'whoami.exe', 'quser.exe', 'qwinsta.exe', 'wmic.exe' specifically with command lines aimed at retrieving user account information, 'cmdkey.exe' with commands for listing stored user credentials, and 'cmd.exe' with commands that attempt to list directories under the \\Users\\ path but exclude commands aimed at removing directories to avoid false positives. Additionally, execution of 'net.exe' or 'net1.exe' with commands including 'user' but excluding switches that indicate legitimate account management purposes such as '/add', '/domain', '/delete' etc., should also be watched. This approach focuses on identifying actions that suggest an attempt to discover local user accounts or system owners, which are essential steps in many attack scenarios where attackers aim to escalate privileges or move laterally within a network. It is important to keep in mind that there may be legitimate reasons for these utilities to be run by administrators or users, which can lead to potential false positives, thus the alert level is considered low until further investigation confirms malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Local accounts, System Owner/User discovery using operating systems utilities",
      "answer": "In order to detect activities associated with local accounts, system owner/user discovery using operating systems utilities, you should monitor for the execution of specific Windows utilities and command patterns indicative of enumeration or information gathering efforts. This includes the launching of utilities like 'whoami.exe', 'quser.exe', 'qwinsta.exe', 'wmic.exe' specifically with command lines aimed at retrieving user account information, 'cmdkey.exe' with commands for listing stored user credentials, and 'cmd.exe' with commands that attempt to list directories under the \\Users\\ path but exclude commands aimed at removing directories to avoid false positives. Additionally, execution of 'net.exe' or 'net1.exe' with commands including 'user' but excluding switches that indicate legitimate account management purposes such as '/add', '/domain', '/delete' etc., should also be watched. This approach focuses on identifying actions that suggest an attempt to discover local user accounts or system owners, which are essential steps in many attack scenarios where attackers aim to escalate privileges or move laterally within a network. It is important to keep in mind that there may be legitimate reasons for these utilities to be run by administrators or users, which can lead to potential false positives, thus the alert level is considered low until further investigation confirms malicious intent."
    }
  },
  {
    "instruction": "Can you explain how to detect: UAC bypass method using Windows event viewer",
    "context": "",
    "output": "Certainly!\n\nIn order to detect UAC bypass method using Windows event viewer, you should: monitor Windows Registry modifications where the target object starts with 'HKCU\\' and ends with '\\mscfile\\shell\\open\\command'. This activity is logged under the registry_set category, indicating changes to registry values potentially designed to execute commands without triggering User Account Control (UAC) prompts, exploiting the event viewer. Due to the nature of these modifications, any detected alterations fitting this pattern should be considered suspicious, with a high level of confidence in its association with a UAC bypass attempt. However, be aware that due to the specificity of these conditions, false positives are considered unknown and should be investigated accordingly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "UAC bypass method using Windows event viewer",
      "answer": "In order to detect UAC bypass method using Windows event viewer, you should: monitor Windows Registry modifications where the target object starts with 'HKCU\\' and ends with '\\mscfile\\shell\\open\\command'. This activity is logged under the registry_set category, indicating changes to registry values potentially designed to execute commands without triggering User Account Control (UAC) prompts, exploiting the event viewer. Due to the nature of these modifications, any detected alterations fitting this pattern should be considered suspicious, with a high level of confidence in its association with a UAC bypass attempt. However, be aware that due to the specificity of these conditions, false positives are considered unknown and should be investigated accordingly."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Certify a tool for Active Directory certificate abuse based on PE metadata characteristics and common command line arguments.",
    "context": "",
    "output": "In order to detect Certify, a tool for Active Directory certificate abuse based on PE metadata characteristics and common command line arguments, you should: Monitor processes on Windows systems for the execution of an application named 'Certify.exe'. This can be identified through characteristics such as the image name ending with '\\Certify.exe', having 'Certify.exe' as the OriginalFileName, or containing the word 'Certify' within its description. Additionally, watch out for certain command line arguments indicative of potential abuse, which include executing the application with options such as '.exe cas ', '.exe find ', '.exe pkiobjects ', '.exe request ', and '.exe download '. Be especially vigilant for command lines containing specific options that could denote exploitation attempts, such as ' /vulnerable', ' /template:', ' /altname:', ' /domain:', ' /path:', and ' /ca:'. It's important to assess these indicators collectively as executing 'Certify.exe' with any of these command line options or arguments could signal malicious activity related to Active Directory certificate manipulation. Note that while detection is crucial, the possibility of unknown false positives exists, indicating that detections may sometimes not relate to malicious activity, thus requiring further investigation. The critical nature of this alert level underscores the importance of timely and accurate detection in protecting against potential certificate abuse scenarios.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Certify a tool for Active Directory certificate abuse based on PE metadata characteristics and common command line arguments.",
      "answer": "In order to detect Certify, a tool for Active Directory certificate abuse based on PE metadata characteristics and common command line arguments, you should: Monitor processes on Windows systems for the execution of an application named 'Certify.exe'. This can be identified through characteristics such as the image name ending with '\\Certify.exe', having 'Certify.exe' as the OriginalFileName, or containing the word 'Certify' within its description. Additionally, watch out for certain command line arguments indicative of potential abuse, which include executing the application with options such as '.exe cas ', '.exe find ', '.exe pkiobjects ', '.exe request ', and '.exe download '. Be especially vigilant for command lines containing specific options that could denote exploitation attempts, such as ' /vulnerable', ' /template:', ' /altname:', ' /domain:', ' /path:', and ' /ca:'. It's important to assess these indicators collectively as executing 'Certify.exe' with any of these command line options or arguments could signal malicious activity related to Active Directory certificate manipulation. Note that while detection is crucial, the possibility of unknown false positives exists, indicating that detections may sometimes not relate to malicious activity, thus requiring further investigation. The critical nature of this alert level underscores the importance of timely and accurate detection in protecting against potential certificate abuse scenarios."
    }
  },
  {
    "instruction": "How to detect: Windows command line executable started from MMC",
    "context": "",
    "output": "In order to detect a Windows command line executable started from MMC, you should monitor process creation events on Windows operating systems. Specifically, you should look for instances where a command line utility such as Cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Script Host (wscript.exe or cscript.exe), shell scripts (sh.exe or bash.exe), registry command line tools (reg.exe or regsvr32.exe), or any process containing 'BITSADMIN' in its name is launched as a child process of the Microsoft Management Console (mmc.exe). Keep an eye on the command line parameters and image paths of these processes for any suspicious activity. Given the potential severity associated with this behavior, such events should be treated with a high level of concern. This approach helps in identifying misuse of administrative tools and command line utilities, which can be indicative of various types of attacks including those involving privilege escalation, lateral movement, and persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Windows command line executable started from MMC",
      "answer": "In order to detect a Windows command line executable started from MMC, you should monitor process creation events on Windows operating systems. Specifically, you should look for instances where a command line utility such as Cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Script Host (wscript.exe or cscript.exe), shell scripts (sh.exe or bash.exe), registry command line tools (reg.exe or regsvr32.exe), or any process containing 'BITSADMIN' in its name is launched as a child process of the Microsoft Management Console (mmc.exe). Keep an eye on the command line parameters and image paths of these processes for any suspicious activity. Given the potential severity associated with this behavior, such events should be treated with a high level of concern. This approach helps in identifying misuse of administrative tools and command line utilities, which can be indicative of various types of attacks including those involving privilege escalation, lateral movement, and persistence."
    }
  },
  {
    "instruction": "How to detect: creation of a new service using powershell.",
    "context": "",
    "output": "In order to detect the creation of a new service using powershell, you should: Focus on the creation of processes on Windows systems. Specifically, monitor the use of PowerShell commands that involve the creation of new services. Look for instances where the command line contains both 'New-Service' and '-BinaryPathName' as these indicate the creation of a new service with a specified binary path, which is a common technique used by attackers to persist on a system or execute malicious processes. Be aware that there are legitimate scenarios where administrators or software installations may use this command for valid reasons, therefore, this activity should be considered low level unless other suspicious activities are observed. This method correlates with tactics and techniques such as Persistence and Privilege Escalation by making unauthorized changes to the system\u2019s services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new service using powershell.",
      "answer": "In order to detect the creation of a new service using powershell, you should: Focus on the creation of processes on Windows systems. Specifically, monitor the use of PowerShell commands that involve the creation of new services. Look for instances where the command line contains both 'New-Service' and '-BinaryPathName' as these indicate the creation of a new service with a specified binary path, which is a common technique used by attackers to persist on a system or execute malicious processes. Be aware that there are legitimate scenarios where administrators or software installations may use this command for valid reasons, therefore, this activity should be considered low level unless other suspicious activities are observed. This method correlates with tactics and techniques such as Persistence and Privilege Escalation by making unauthorized changes to the system\u2019s services."
    }
  },
  {
    "instruction": "How to detect: cases in which an ISO files is opend within an archiver like 7Zip or Winrar, which is a sign of phishing as threat actors put small ISO files in archives as email attachments to bypass certain filters and protective measures (mark of web)",
    "context": "",
    "output": "In order to detect cases in which an ISO files is opened within an archiver like 7Zip or Winrar, which is a sign of phishing as threat actors put small ISO files in archives as email attachments to bypass certain filters and protective measures (mark of web), you should: Monitor the creation of processes on Windows systems, specifically looking for instances where applications known for archiving files (such as Winrar.exe, 7zFM.exe, or peazip.exe) launch applications associated with burning or handling ISO images (including isoburn.exe, PowerISO.exe, or ImgBurn.exe). This behavior could indicate an attempt to mount or interact with an ISO file directly from within an archive file, a technique used by attackers to deliver malware through phishing emails while avoiding detection. Be aware that there could be legitimate scenarios where users open ISO or IMG files contained within archives without any malicious intent. Therefore, high caution should be exercised when evaluating alerts to minimize potential false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "cases in which an ISO files is opend within an archiver like 7Zip or Winrar, which is a sign of phishing as threat actors put small ISO files in archives as email attachments to bypass certain filters and protective measures (mark of web)",
      "answer": "In order to detect cases in which an ISO files is opened within an archiver like 7Zip or Winrar, which is a sign of phishing as threat actors put small ISO files in archives as email attachments to bypass certain filters and protective measures (mark of web), you should: Monitor the creation of processes on Windows systems, specifically looking for instances where applications known for archiving files (such as Winrar.exe, 7zFM.exe, or peazip.exe) launch applications associated with burning or handling ISO images (including isoburn.exe, PowerISO.exe, or ImgBurn.exe). This behavior could indicate an attempt to mount or interact with an ISO file directly from within an archive file, a technique used by attackers to deliver malware through phishing emails while avoiding detection. Be aware that there could be legitimate scenarios where users open ISO or IMG files contained within archives without any malicious intent. Therefore, high caution should be exercised when evaluating alerts to minimize potential false positives."
    }
  },
  {
    "instruction": "How to detect: inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location",
    "context": "",
    "output": "In order to Detect inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location, you should: Focus on monitoring the creation of processes on Windows systems, specifically looking for instances where the 'cmd.exe' command-line interpreter is invoked, identified either by the process image ending with '\\cmd.exe' or having an 'OriginalFileName' attribute of 'Cmd.Exe'. Additionally, scrutinize command-line inputs for patterns that include the redirection symbol '>' followed by paths to commonly abused directories such as '\\Users\\Public\\', '%APPDATA%\\', '%TEMP%\\', '%TMP%\\', '%USERPROFILE%\\', 'C:\\Temp\\', 'C:\\Users\\Public\\', and 'C:\\Windows\\Temp\\'. Also, pay attention to commands that contain a space or quotation mark before the redirection symbol '>', suggesting an attempt to redirect output. Specifically, commands that redirect to a user's local AppData folder, indicated by the presence of 'C:\\Users\\' combined with '\\AppData\\Local\\', should be investigated. However, be aware that legitimate administrative tasks or third-party scripts might occasionally use similar patterns for benign purposes, potentially leading to false positives. This analysis is critical for pinpointing malicious activities where attackers attempt to discreetly execute or log commands in sensitive or commonly overlooked file locations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location",
      "answer": "In order to Detect inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location, you should: Focus on monitoring the creation of processes on Windows systems, specifically looking for instances where the 'cmd.exe' command-line interpreter is invoked, identified either by the process image ending with '\\cmd.exe' or having an 'OriginalFileName' attribute of 'Cmd.Exe'. Additionally, scrutinize command-line inputs for patterns that include the redirection symbol '>' followed by paths to commonly abused directories such as '\\Users\\Public\\', '%APPDATA%\\', '%TEMP%\\', '%TMP%\\', '%USERPROFILE%\\', 'C:\\Temp\\', 'C:\\Users\\Public\\', and 'C:\\Windows\\Temp\\'. Also, pay attention to commands that contain a space or quotation mark before the redirection symbol '>', suggesting an attempt to redirect output. Specifically, commands that redirect to a user's local AppData folder, indicated by the presence of 'C:\\Users\\' combined with '\\AppData\\Local\\', should be investigated. However, be aware that legitimate administrative tasks or third-party scripts might occasionally use similar patterns for benign purposes, potentially leading to false positives. This analysis is critical for pinpointing malicious activities where attackers attempt to discreetly execute or log commands in sensitive or commonly overlooked file locations."
    }
  },
  {
    "instruction": "How to detect: suspicious ways to download files or content using PowerShell",
    "context": "",
    "output": "In order to detect suspicious ways to download files or content using PowerShell, you should: Monitor the process creation logs on Windows systems for any occurrences where the command line contains specific strings indicative of file or content download attempts via PowerShell. These strings include '.DownloadString(', '.DownloadFile(', 'Invoke-WebRequest ', and 'iwr '. Notably, this monitoring is set at a medium level of alert due to the potential for false positives, which could arise from legitimate scripts or tools that download files. This approach is designed to spot techniques that may be utilized by attackers to retrieve malicious payloads or scripts onto a targeted system covertly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious ways to download files or content using PowerShell",
      "answer": "In order to detect suspicious ways to download files or content using PowerShell, you should: Monitor the process creation logs on Windows systems for any occurrences where the command line contains specific strings indicative of file or content download attempts via PowerShell. These strings include '.DownloadString(', '.DownloadFile(', 'Invoke-WebRequest ', and 'iwr '. Notably, this monitoring is set at a medium level of alert due to the potential for false positives, which could arise from legitimate scripts or tools that download files. This approach is designed to spot techniques that may be utilized by attackers to retrieve malicious payloads or scripts onto a targeted system covertly."
    }
  },
  {
    "instruction": "Can you explain how to detect: risky authencaition from a non AD registered device without MFA being required.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect risky authentication from a non AD registered device without MFA being required, you should: Monitor Azure sign-in logs for successful authentication attempts that only utilized single factor authentication from devices not registered with Active Directory and are marked as 'atRisk'. This involves focusing on sign-in attempts where 'Status' is marked as 'Success', 'AuthenticationRequirement' indicates 'singleFactorAuthentication', 'DeviceDetail.trusttype' is not specified (indicating a lack of device registration or trust), and 'RiskState' is flagged as 'atRisk', pointing towards a potentially compromised or risky authentication attempt. Noteworthy, this process does not predict all possible false positives, which remain unknown, and the significance level of these detection criteria is considered high.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "risky authencaition from a non AD registered device without MFA being required.",
      "answer": "In order to detect risky authentication from a non AD registered device without MFA being required, you should: Monitor Azure sign-in logs for successful authentication attempts that only utilized single factor authentication from devices not registered with Active Directory and are marked as 'atRisk'. This involves focusing on sign-in attempts where 'Status' is marked as 'Success', 'AuthenticationRequirement' indicates 'singleFactorAuthentication', 'DeviceDetail.trusttype' is not specified (indicating a lack of device registration or trust), and 'RiskState' is flagged as 'atRisk', pointing towards a potentially compromised or risky authentication attempt. Noteworthy, this process does not predict all possible false positives, which remain unknown, and the significance level of these detection criteria is considered high."
    }
  },
  {
    "instruction": "Please help me detect the following: unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges",
    "context": "",
    "output": "Sure!\nIn order to detect unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM privileges, you should monitor the creation of Windows processes for specific command-line arguments that indicate an elevation attempt to the LOCAL_SYSTEM account. These arguments include variations of '-s' and '/s' flags in combination with 'cmd', 'powershell', 'pwsh', or any similar command line interpreter software, often paired with '-i' or '/i' to start an interactive session. It's crucial to note that these flags can be used interchangeably (e.g., '-' can be replaced with '/') and the order of the arguments might not always be the same. Furthermore, variations specific to PowerShell version 7 (pwsh) and version 5 (powershell) are also considered. To avoid false alerts, the rule excludes known instances where command-line arguments include 'paexec', 'PsExec', or 'accepteula', as they are common tools that use similar flags but may not indicate malicious activity. These command-line arguments are typically associated with legitimate administrative tools, and exclusions are made for instances that may resemble typical tool usage or instances where software companies include such tools with their products under different names. This detection process is set to a high level of alert due to the potential impact of an attacker gaining SYSTEM privileges.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges",
      "answer": "In order to detect unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM privileges, you should monitor the creation of Windows processes for specific command-line arguments that indicate an elevation attempt to the LOCAL_SYSTEM account. These arguments include variations of '-s' and '/s' flags in combination with 'cmd', 'powershell', 'pwsh', or any similar command line interpreter software, often paired with '-i' or '/i' to start an interactive session. It's crucial to note that these flags can be used interchangeably (e.g., '-' can be replaced with '/') and the order of the arguments might not always be the same. Furthermore, variations specific to PowerShell version 7 (pwsh) and version 5 (powershell) are also considered. To avoid false alerts, the rule excludes known instances where command-line arguments include 'paexec', 'PsExec', or 'accepteula', as they are common tools that use similar flags but may not indicate malicious activity. These command-line arguments are typically associated with legitimate administrative tools, and exclusions are made for instances that may resemble typical tool usage or instances where software companies include such tools with their products under different names. This detection process is set to a high level of alert due to the potential impact of an attacker gaining SYSTEM privileges."
    }
  },
  {
    "instruction": "How to detect: remote RPC calls useb by SharpHound to map remote connections and local group membership.",
    "context": "",
    "output": "In order to detect remote RPC calls used by SharpHound to map remote connections and local group membership, you should: \n\nMonitor application-level logs specifically from RPC Firewall for entries that match certain criteria indicating a potential SharpHound reconnaissance activity. These logs are essential for identifying when an unauthorized remote procedure call (RPC) attempts to map network connections or query local group memberships, actions commonly associated with adversarial reconnaissance efforts.\n\nFocus on filtering the log entries to find those with an `EventLog` value of `RPCFW` and an `EventID` of 3. These fields indicate that a relevant event was captured by the RPC Firewall, which is designed to monitor and regulate RPC traffic in an effort to safeguard against unauthorized or malicious calls.\n\nAdditionally, pay close attention to any events where the `InterfaceUuid` matches `4b324fc8-1670-01d3-1278-5a47bf6ee188` and the `OpNum` is 12. This specific combination of interface UUID and operation number can pinpoint activities associated with the SharpHound tool, a component of the BloodHound attack framework. SharpHound is known for its ability to effectively map out an organization's internal connections and user group memberships through RPC and other techniques.\n\nBe aware that there might be instances where legitimate RPC traffic triggers an alert. Therefore, it is crucial to consider unknown sources of false positives, indicating that not every detected event may represent a genuine threat. Nevertheless, given the high risk level associated with these indicators, they warrant close scrutiny and possibly immediate action.\n\nThis focused monitoring approach is vital for identifying and mitigating techniques associated with reconnaissance, as recognized by the MITRE ATT&CK framework under tactics and techniques related to discovery and lateral movement. By capturing specific RPC call patterns, you can effectively spot signs of an adversary conducting network reconnaissance or attempting to move laterally within your environment, potentially using information gathered by SharpHound.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls useb by SharpHound to map remote connections and local group membership.",
      "answer": "In order to detect remote RPC calls used by SharpHound to map remote connections and local group membership, you should: \n\nMonitor application-level logs specifically from RPC Firewall for entries that match certain criteria indicating a potential SharpHound reconnaissance activity. These logs are essential for identifying when an unauthorized remote procedure call (RPC) attempts to map network connections or query local group memberships, actions commonly associated with adversarial reconnaissance efforts.\n\nFocus on filtering the log entries to find those with an `EventLog` value of `RPCFW` and an `EventID` of 3. These fields indicate that a relevant event was captured by the RPC Firewall, which is designed to monitor and regulate RPC traffic in an effort to safeguard against unauthorized or malicious calls.\n\nAdditionally, pay close attention to any events where the `InterfaceUuid` matches `4b324fc8-1670-01d3-1278-5a47bf6ee188` and the `OpNum` is 12. This specific combination of interface UUID and operation number can pinpoint activities associated with the SharpHound tool, a component of the BloodHound attack framework. SharpHound is known for its ability to effectively map out an organization's internal connections and user group memberships through RPC and other techniques.\n\nBe aware that there might be instances where legitimate RPC traffic triggers an alert. Therefore, it is crucial to consider unknown sources of false positives, indicating that not every detected event may represent a genuine threat. Nevertheless, given the high risk level associated with these indicators, they warrant close scrutiny and possibly immediate action.\n\nThis focused monitoring approach is vital for identifying and mitigating techniques associated with reconnaissance, as recognized by the MITRE ATT&CK framework under tactics and techniques related to discovery and lateral movement. By capturing specific RPC call patterns, you can effectively spot signs of an adversary conducting network reconnaissance or attempting to move laterally within your environment, potentially using information gathered by SharpHound."
    }
  },
  {
    "instruction": "How to detect: Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials.\nThese can be files created by users to store their own credentials, shared credential stores for a group of individuals,\nconfiguration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n",
    "context": "",
    "output": "In order to detect adversaries searching local file systems and remote file shares for files containing insecurely stored credentials, you should focus on monitoring Windows PowerShell scripts. Specifically, ensure that Script Block Logging is enabled to capture the execution of PowerShell scripts. You are looking for script blocks that contain the use of the 'ls' command in combination with the '-R' flag for recursive directory listing, and the use of 'select-string' in conjunction with '-Pattern'. This combination of commands and flags is indicative of behavior where an adversary is attempting to search through files and directories, potentially looking for those containing insecurely stored credentials. These activities fall under tactics and techniques associated with credential access. Monitoring for such patterns in PowerShell script execution can help identify malicious activities related to the searching of sensitive files for credentials. It is important to note that while this detection logic is critical in identifying possible credential harvesting activities, there might be false positives due to legitimate administrative tasks that use similar command combinations, albeit for non-malicious purposes. The detection severity level for these activities is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials.\nThese can be files created by users to store their own credentials, shared credential stores for a group of individuals,\nconfiguration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n",
      "answer": "In order to detect adversaries searching local file systems and remote file shares for files containing insecurely stored credentials, you should focus on monitoring Windows PowerShell scripts. Specifically, ensure that Script Block Logging is enabled to capture the execution of PowerShell scripts. You are looking for script blocks that contain the use of the 'ls' command in combination with the '-R' flag for recursive directory listing, and the use of 'select-string' in conjunction with '-Pattern'. This combination of commands and flags is indicative of behavior where an adversary is attempting to search through files and directories, potentially looking for those containing insecurely stored credentials. These activities fall under tactics and techniques associated with credential access. Monitoring for such patterns in PowerShell script execution can help identify malicious activities related to the searching of sensitive files for credentials. It is important to note that while this detection logic is critical in identifying possible credential harvesting activities, there might be false positives due to legitimate administrative tasks that use similar command combinations, albeit for non-malicious purposes. The detection severity level for these activities is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in.\nWinlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete.\n",
    "context": "",
    "output": "Sure!\nIn order to identify potential instances where adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in, you should monitor Windows registry settings related to Winlogon. Specifically, it is crucial to observe any changes made to the registry entries under the path '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\logon'. Changes of interest involve the setting of new values that point to DLL files, signified by entries ending with '.dll'. The event type to look out for in this context is 'SetValue'. This activity might be indicative of an adversary attempting to execute malicious code during the login process. Winlogon.exe plays a crucial role in handling logon/logoff procedures and the secure attention sequence, making it a sensitive component susceptible to such tampering. Monitoring and analyzing alterations to the registry in the specified manner can aid in the early detection of potential threats. It is important to note, however, that there may be legitimate uses of this registry modification feature, which could lead to occasional unknown false positives. The detected activity should be considered high importance due to its potential impact on system security and the execution of unauthorized code during user logon sessions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in.\nWinlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete.\n",
      "answer": "In order to identify potential instances where adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in, you should monitor Windows registry settings related to Winlogon. Specifically, it is crucial to observe any changes made to the registry entries under the path '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\logon'. Changes of interest involve the setting of new values that point to DLL files, signified by entries ending with '.dll'. The event type to look out for in this context is 'SetValue'. This activity might be indicative of an adversary attempting to execute malicious code during the login process. Winlogon.exe plays a crucial role in handling logon/logoff procedures and the secure attention sequence, making it a sensitive component susceptible to such tampering. Monitoring and analyzing alterations to the registry in the specified manner can aid in the early detection of potential threats. It is important to note, however, that there may be legitimate uses of this registry modification feature, which could lead to occasional unknown false positives. The detected activity should be considered high importance due to its potential impact on system security and the execution of unauthorized code during user logon sessions."
    }
  },
  {
    "instruction": "Please help me detect the following: potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information.",
    "context": "",
    "output": "Sure!\nIn order to detect potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information, you should focus on monitoring Windows process creation logs for specific patterns of activity. Detect these patterns by identifying instances where the 'sqlcmd.exe' process is executed, especially when the command line involves keywords related to 'VeeamBackup' and 'From ' indicating a targeted query against Veeam backup databases. Additionally, look for command lines that contain references to 'BackupRepositories', 'Backups', 'Credentials', 'HostCreds', 'SmbFileShares', 'Ssh_creds', and 'VSphereInfo'. These elements signal attempts to access sensitive backup configuration details, credentials, and information across various repositories and platforms. It's essential to apply this detection mechanism across all related instances to catch any dubious activities aiming at extracting critical backup data. Pay attention to false positives which might arise, as the described activities could, under unknown circumstances, represent legitimate administrative behavior. This alert is of medium importance, indicating a need to analyze detected events to ensure they do not signify an ongoing or attempted compromise involving backup system information theft.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information.",
      "answer": "In order to detect potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information, you should focus on monitoring Windows process creation logs for specific patterns of activity. Detect these patterns by identifying instances where the 'sqlcmd.exe' process is executed, especially when the command line involves keywords related to 'VeeamBackup' and 'From ' indicating a targeted query against Veeam backup databases. Additionally, look for command lines that contain references to 'BackupRepositories', 'Backups', 'Credentials', 'HostCreds', 'SmbFileShares', 'Ssh_creds', and 'VSphereInfo'. These elements signal attempts to access sensitive backup configuration details, credentials, and information across various repositories and platforms. It's essential to apply this detection mechanism across all related instances to catch any dubious activities aiming at extracting critical backup data. Pay attention to false positives which might arise, as the described activities could, under unknown circumstances, represent legitimate administrative behavior. This alert is of medium importance, indicating a need to analyze detected events to ensure they do not signify an ongoing or attempted compromise involving backup system information theft."
    }
  },
  {
    "instruction": "Can you explain how to detect: Search for dropping of files to Windows/Program Files fodlers by non-priviledged processes",
    "context": "",
    "output": "Certainly!\n\nIn order to search for dropping of files to Windows/Program Files folders by non-privileged processes, you should focus on monitoring file events within the Windows operating system. Keep an eye out for files that are being created or modified. Specifically, watch for activities where the integrity level is set to 'Medium,' indicating actions initiated by non-privileged processes. Be vigilant for files that are placed in critical system directories such as '\\Program Files\\' and '\\Program Files (x86)', as well as the Windows system directory itself, prefixed with '\\Windows\\'. However, it is important not to flag activities where these files are being put in directories that contain 'temp' in their paths, as this may not be indicative of malicious behavior. This detection logic operates on the assumption that uncommon or unauthorized modifications in these sensitive directories should be scrutinized, considering the rarity of legitimate software performing such actions without elevated privileges. Remember, this strategy is centered around identifying potentially unauthorized file operations that could indicate an attempt to deploy malware or perform other unauthorized actions within critical system areas, while also taking care to reduce the number of false positives by excluding temporary file operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Search for dropping of files to Windows/Program Files fodlers by non-priviledged processes",
      "answer": "In order to search for dropping of files to Windows/Program Files folders by non-privileged processes, you should focus on monitoring file events within the Windows operating system. Keep an eye out for files that are being created or modified. Specifically, watch for activities where the integrity level is set to 'Medium,' indicating actions initiated by non-privileged processes. Be vigilant for files that are placed in critical system directories such as '\\Program Files\\' and '\\Program Files (x86)', as well as the Windows system directory itself, prefixed with '\\Windows\\'. However, it is important not to flag activities where these files are being put in directories that contain 'temp' in their paths, as this may not be indicative of malicious behavior. This detection logic operates on the assumption that uncommon or unauthorized modifications in these sensitive directories should be scrutinized, considering the rarity of legitimate software performing such actions without elevated privileges. Remember, this strategy is centered around identifying potentially unauthorized file operations that could indicate an attempt to deploy malware or perform other unauthorized actions within critical system areas, while also taking care to reduce the number of false positives by excluding temporary file operations."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of PowerShell to identify the current logged user.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of PowerShell to identify the current logged user, you should: Focus on monitoring PowerShell script activities in the Windows environment where Script Block Logging is enabled. Look for scripts containing specific snippets like '[System.Environment]::UserName', '$env:UserName', or '[System.Security.Principal.WindowsIdentity]::GetCurrent()' as these are indicators of attempts to retrieve the current user's name. It's important to note, however, that there could be legitimate PowerShell scripts that perform similar actions, so the detection has a low level of confidence. The main goal is to identify potential reconnaissance efforts where adversaries might be trying to gather information about user accounts on the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of PowerShell to identify the current logged user.",
      "answer": "In order to detect the use of PowerShell to identify the current logged user, you should: Focus on monitoring PowerShell script activities in the Windows environment where Script Block Logging is enabled. Look for scripts containing specific snippets like '[System.Environment]::UserName', '$env:UserName', or '[System.Security.Principal.WindowsIdentity]::GetCurrent()' as these are indicators of attempts to retrieve the current user's name. It's important to note, however, that there could be legitimate PowerShell scripts that perform similar actions, so the detection has a low level of confidence. The main goal is to identify potential reconnaissance efforts where adversaries might be trying to gather information about user accounts on the system."
    }
  },
  {
    "instruction": "Can you explain how to detect: TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia",
    "context": "",
    "output": "Certainly!\n\nIn order to detect TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia, you should monitor for the creation of processes in Windows operating systems that include the command line containing the specific string 'abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc'. Such a unique string in the command line may indicate malicious activities associated with the TropicTrooper threat actor. This monitoring is considered of high importance due to the potential impact and the targeted nature of the TropicTrooper's operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia",
      "answer": "In order to detect TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia, you should monitor for the creation of processes in Windows operating systems that include the command line containing the specific string 'abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc'. Such a unique string in the command line may indicate malicious activities associated with the TropicTrooper threat actor. This monitoring is considered of high importance due to the potential impact and the targeted nature of the TropicTrooper's operations."
    }
  },
  {
    "instruction": "Explain how should I detect the following: non-sysinternals tools setting the \"accepteula\" key which normally is set on sysinternals tool execution",
    "context": "",
    "output": "In order to detect non-sysinternals tools setting the \"accepteula\" key which normally is set on sysinternals tool execution, you should: Monitor Windows Registry modification events specifically targeting the registry key changes where the EventType is SetValue. Look out for modifications to TargetObjects that contain or have suffixes related to a set of specific tools - namely PsExec, ProcDump, Handle, LiveKd, Process Explorer, PsLoglist, PsPasswd, and Active Directory Explorer. These modifications become particularly suspicious when the TargetObject ends with '\\EulaAccepted'. Additionally, take into account instances where the main image name ends with specific executables associated with the listed tools, both in their standard and 64-bit versions. However, consider the scenario where the reported Image name might be null due to race conditions with some logging tools and exclude these from raising false alarms. This monitoring mechanism is aimed to identify attempts to use different software to mimic or bypass the normal behavior of Sysinternals tools, which typically set a registry key named \"accepteula\" as part of their execution process. This strategy heavily relies on registry set events and excludes known Sysinternals executable names to reduce the likelihood of false positives, which are considered unlikely given the specific nature of the detection criteria. This detailed observation helps in identifying malicious activities that try to exploit or simulate trusted Sysinternals tools by altering registry keys, a tactic often employed in sophisticated attacks aiming to stay under the radar.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "non-sysinternals tools setting the \"accepteula\" key which normally is set on sysinternals tool execution",
      "answer": "In order to detect non-sysinternals tools setting the \"accepteula\" key which normally is set on sysinternals tool execution, you should: Monitor Windows Registry modification events specifically targeting the registry key changes where the EventType is SetValue. Look out for modifications to TargetObjects that contain or have suffixes related to a set of specific tools - namely PsExec, ProcDump, Handle, LiveKd, Process Explorer, PsLoglist, PsPasswd, and Active Directory Explorer. These modifications become particularly suspicious when the TargetObject ends with '\\EulaAccepted'. Additionally, take into account instances where the main image name ends with specific executables associated with the listed tools, both in their standard and 64-bit versions. However, consider the scenario where the reported Image name might be null due to race conditions with some logging tools and exclude these from raising false alarms. This monitoring mechanism is aimed to identify attempts to use different software to mimic or bypass the normal behavior of Sysinternals tools, which typically set a registry key named \"accepteula\" as part of their execution process. This strategy heavily relies on registry set events and excludes known Sysinternals executable names to reduce the likelihood of false positives, which are considered unlikely given the specific nature of the detection criteria. This detailed observation helps in identifying malicious activities that try to exploit or simulate trusted Sysinternals tools by altering registry keys, a tactic often employed in sophisticated attacks aiming to stay under the radar."
    }
  },
  {
    "instruction": "Please help me detect the following: Obfuscated use of stdin to execute PowerShell",
    "context": "",
    "output": "Sure!\nIn order to detect obfuscated use of stdin to execute PowerShell, you should monitor for specific driver load events within Windows environments. Look for incidences where command prompt (cmd) is used to launch PowerShell in a manner that is obfuscated. Specifically, you want to identify if the ImagePath of the loaded driver contains patterns where `cmd` is used with either `/c` or `/r` options followed closely (up to five characters apart) by `powershell`, and then includes either `${input}`, `{$input}`, or `noexit` arguments within the command, all encapsulated within double quotes. These characteristics are indicative of attempts to obfuscate command lines to execute PowerShell scripts, potentially for malicious purposes. It is important to note that due to the sophisticated nature of the obfuscation techniques used, there may be unknown false positives, and the severity level of this detection has been classified as high.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should monitor for specific driver load events within Windows environments. Look for incidences where command prompt (cmd) is used to launch PowerShell in a manner that is obfuscated. Specifically, you want to identify if the ImagePath of the loaded driver contains patterns where `cmd` is used with either `/c` or `/r` options followed closely (up to five characters apart) by `powershell`, and then includes either `${input}`, `{$input}`, or `noexit` arguments within the command, all encapsulated within double quotes. These characteristics are indicative of attempts to obfuscate command lines to execute PowerShell scripts, potentially for malicious purposes. It is important to note that due to the sophisticated nature of the obfuscation techniques used, there may be unknown false positives, and the severity level of this detection has been classified as high."
    }
  },
  {
    "instruction": "Can you explain how to detect: pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36), you should: Focus on monitoring file event logs within Windows environments, specifically watching for events where a file operation targets filenames that begin with 'C:\\Users\\' and end with '\\AppData\\Local\\Temp\\api-ms-win-core-kernel32-legacy-l1.DLL'. This pattern of file manipulation is indicative of an attempt to bypass User Account Control (UAC) by exploiting NTFS reparse points and leveraging DLL hijacking techniques involving 'wusa.exe', known as UACMe 36. The detection of such activity should be treated with a high level of suspicion, although the potential for false positives is acknowledged as unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)",
      "answer": "In order to detect the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36), you should: Focus on monitoring file event logs within Windows environments, specifically watching for events where a file operation targets filenames that begin with 'C:\\Users\\' and end with '\\AppData\\Local\\Temp\\api-ms-win-core-kernel32-legacy-l1.DLL'. This pattern of file manipulation is indicative of an attempt to bypass User Account Control (UAC) by exploiting NTFS reparse points and leveraging DLL hijacking techniques involving 'wusa.exe', known as UACMe 36. The detection of such activity should be treated with a high level of suspicion, although the potential for false positives is acknowledged as unknown."
    }
  },
  {
    "instruction": "How to detect: creation of a local hidden user account which should not happen for event ID 4720.",
    "context": "",
    "output": "In order to detect the creation of a local hidden user account which should not happen for event ID 4720, you should: Monitor Windows security event logs specifically for event ID 4720, which signals the creation of a user account. Focus on instances where the TargetUserName ends with a '$' character because this is often used to denote hidden user accounts or machine accounts which are not typically manually created. This activity is highly suspicious and typically not expected under normal operational circumstances. It's important to be aware that there might be instances where such activity could be legitimate, but they are rare, hence the high level of alert for this detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a local hidden user account which should not happen for event ID 4720.",
      "answer": "In order to detect the creation of a local hidden user account which should not happen for event ID 4720, you should: Monitor Windows security event logs specifically for event ID 4720, which signals the creation of a user account. Focus on instances where the TargetUserName ends with a '$' character because this is often used to denote hidden user accounts or machine accounts which are not typically manually created. This activity is highly suspicious and typically not expected under normal operational circumstances. It's important to be aware that there might be instances where such activity could be legitimate, but they are rare, hence the high level of alert for this detection."
    }
  },
  {
    "instruction": "How can I detect: use of CleanWipe a tool usually used to delete Symantec antivirus.",
    "context": "",
    "output": "In order to detect the use of CleanWipe, a tool usually used to delete Symantec antivirus, you should: Monitor Windows process creation logs for the execution of specific executables that are commonly associated with this tool. Specifically, look for processes ending in '\\SepRemovalToolNative_x64.exe', '\\CATClean.exe' with the command line containing '--uninstall', '\\NetInstaller.exe' with '-r' in the command line, and '\\WFPUnins.exe' with both '/uninstall' and '/enterprise' in the command line arguments. Any instance of these being executed could indicate an attempt to remove Symantec's antivirus products, potentially as a precursor to an attack. It's important to consider that while these indicators can be a sign of malicious activity, they might also occur during legitimate administrative actions and should be investigated to determine the context. The detection of this activity is considered high priority due to the potential security implications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of CleanWipe a tool usually used to delete Symantec antivirus.",
      "answer": "In order to detect the use of CleanWipe, a tool usually used to delete Symantec antivirus, you should: Monitor Windows process creation logs for the execution of specific executables that are commonly associated with this tool. Specifically, look for processes ending in '\\SepRemovalToolNative_x64.exe', '\\CATClean.exe' with the command line containing '--uninstall', '\\NetInstaller.exe' with '-r' in the command line, and '\\WFPUnins.exe' with both '/uninstall' and '/enterprise' in the command line arguments. Any instance of these being executed could indicate an attempt to remove Symantec's antivirus products, potentially as a precursor to an attack. It's important to consider that while these indicators can be a sign of malicious activity, they might also occur during legitimate administrative actions and should be investigated to determine the context. The detection of this activity is considered high priority due to the potential security implications."
    }
  },
  {
    "instruction": "Can you explain how to detect: Domain user and group enumeration via network reconnaissance.\nSeen in APT 29 and other common tactics and actors. set of RPC (remote procedure calls) used to enumerate a domain controller.\nThe rule was created based off the datasets and hackathon from https://github.com/OTRF/detection-hackathon-apt29\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect domain user and group enumeration via network reconnaissance, seen in APT 29 and other common tactics and actors, you should monitor the Zeek logs, specifically focusing on the DCE/RPC service. This service, when leveraged by adversaries, can reveal significant information about the internal structuring and user accounts of a domain through various methods.\n\nLook for security principal names being translated into their SID form or vice versa, which could indicate an attempt to map out users and their permissions. This can be done through operations such as LsarLookupNames3 and LsarLookupSids3, respectively. Additionally, watch for methods like SamrGetGroupsForUser, SamrLookupIdsInDomain, SamrLookupNamesInDomain, SamrQuerySecurityObject, and SamrQueryInformationGroup being called. These methods are crucial for adversaries as they provide listings of groups a user is a member of, translate sets of RIDs into account names or vice versa, query the access control on various objects, and obtain attributes from a group object, all of which could be used to gain further foothold into the network.\n\nIt is critical to gather these logs within a short timeframe, ideally 30 seconds, and aggregate the counts of these operations by source IP. If a single source IP is seen making more than four distinct types of these operations within this timeframe, it could indicate suspicious activity worth investigating further.\n\nBe mindful of potential false positives, such as devices that perform authentication tasks, like VPNs or firewalls that may look up IPs to username for legitimate purposes. Additionally, consider the specific scripts and administrative tools used within your environment, as they might legitimately use these methods for non-malicious purposes.\n\nThis approach aligns with practices to counter activities by advanced persistent threats such as APT 29, by focusing on the detection of a set of remote procedure calls (RPC) used to enumerate a domain controller, reflecting tactics and techniques associated with reconnaissance and initial access phases of an attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Domain user and group enumeration via network reconnaissance.\nSeen in APT 29 and other common tactics and actors. set of RPC (remote procedure calls) used to enumerate a domain controller.\nThe rule was created based off the datasets and hackathon from https://github.com/OTRF/detection-hackathon-apt29\n",
      "answer": "In order to detect domain user and group enumeration via network reconnaissance, seen in APT 29 and other common tactics and actors, you should monitor the Zeek logs, specifically focusing on the DCE/RPC service. This service, when leveraged by adversaries, can reveal significant information about the internal structuring and user accounts of a domain through various methods.\n\nLook for security principal names being translated into their SID form or vice versa, which could indicate an attempt to map out users and their permissions. This can be done through operations such as LsarLookupNames3 and LsarLookupSids3, respectively. Additionally, watch for methods like SamrGetGroupsForUser, SamrLookupIdsInDomain, SamrLookupNamesInDomain, SamrQuerySecurityObject, and SamrQueryInformationGroup being called. These methods are crucial for adversaries as they provide listings of groups a user is a member of, translate sets of RIDs into account names or vice versa, query the access control on various objects, and obtain attributes from a group object, all of which could be used to gain further foothold into the network.\n\nIt is critical to gather these logs within a short timeframe, ideally 30 seconds, and aggregate the counts of these operations by source IP. If a single source IP is seen making more than four distinct types of these operations within this timeframe, it could indicate suspicious activity worth investigating further.\n\nBe mindful of potential false positives, such as devices that perform authentication tasks, like VPNs or firewalls that may look up IPs to username for legitimate purposes. Additionally, consider the specific scripts and administrative tools used within your environment, as they might legitimately use these methods for non-malicious purposes.\n\nThis approach aligns with practices to counter activities by advanced persistent threats such as APT 29, by focusing on the detection of a set of remote procedure calls (RPC) used to enumerate a domain controller, reflecting tactics and techniques associated with reconnaissance and initial access phases of an attack."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of \"reg.exe\" to disable security services such as Windows Defender.",
    "context": "",
    "output": "Sure!\nIn order to detect execution of \"reg.exe\" to disable security services such as Windows Defender, you should look for process creation events on Windows systems where the command line contains specific patterns. These patterns indicate the use of the \"reg add\" command, which is often used to modify registry entries. Specifically, pay close attention to command lines that contain both \"reg\" and \"add\", as this suggests an attempt to add a new entry to the Windows registry.\n\nFurthermore, enhance your detection capabilities by focusing on command lines that include \"d 4\" and \"v Start\" together, which might indicate an attempt to disable services. The presence of specific service names within the command line, such as 'AppIDSvc', 'MsMpSvc', 'NisSrv', 'SecurityHealthService', 'Sense', 'UsoSvc', 'WdBoot', 'WdFilter', 'WdNisDrv', 'WdNisSvc', 'WinDefend', 'wscsvc', 'wuauserv', further strengthens the suspicion that the action is aimed at disabling critical Windows Defender and other security-related services. \n\nThe detection rule is designed with a high certainty level, meaning false positives are unlikely. Monitoring for such command-line patterns is crucial for early identification and response to attempts to undermine the security of Windows systems by disabling protective services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"reg.exe\" to disable security services such as Windows Defender.",
      "answer": "In order to detect execution of \"reg.exe\" to disable security services such as Windows Defender, you should look for process creation events on Windows systems where the command line contains specific patterns. These patterns indicate the use of the \"reg add\" command, which is often used to modify registry entries. Specifically, pay close attention to command lines that contain both \"reg\" and \"add\", as this suggests an attempt to add a new entry to the Windows registry.\n\nFurthermore, enhance your detection capabilities by focusing on command lines that include \"d 4\" and \"v Start\" together, which might indicate an attempt to disable services. The presence of specific service names within the command line, such as 'AppIDSvc', 'MsMpSvc', 'NisSrv', 'SecurityHealthService', 'Sense', 'UsoSvc', 'WdBoot', 'WdFilter', 'WdNisDrv', 'WdNisSvc', 'WinDefend', 'wscsvc', 'wuauserv', further strengthens the suspicion that the action is aimed at disabling critical Windows Defender and other security-related services. \n\nThe detection rule is designed with a high certainty level, meaning false positives are unlikely. Monitoring for such command-line patterns is crucial for early identification and response to attempts to undermine the security of Windows systems by disabling protective services."
    }
  },
  {
    "instruction": "How to detect: modification of autostart extensibility point (ASEP) in registry.",
    "context": "",
    "output": "In order to detect modification of autostart extensibility point (ASEP) in the registry, you should monitor for registry sets within Windows environments focusing on events where the `SetValue` type signifies a modification in registry keys. Specifically, lookout for changes made to the `SYSTEM\\CurrentControlSet\\Control` path or any alterations to critical system functionalities and security settings such as Terminal Server settings like `RDP-Tcp\\InitialProgram` and `StartupPrograms`, `SecurityProviders`, settings that affect safe boot operations like `AlternateShell`, configurations related to `Print` providers and monitors, adjustments in the network provider's order, and modifications in the Local Security Authority (LSA) pertaining to `Notification Packages` and `Authentication Packages`, as well as changes to the Boot Verification Program's image path.\n\nAdditionally, it's crucial to filter out events associated with known legitimate operations that could cause false positives. For instance, ignore modifications done by `C:\\Windows\\System32\\spoolsv.exe` specifically targeting `CutePDF Writer Monitor` linked to the `cpwmon64_v40.dll` or `CutePDF Writer`, adjustments through `C:\\Windows\\System32\\spoolsv.exe` focused on `Microsoft.Office.OneNote_` printer monitors by users with a name that contains 'AUTHORI' or 'AUTORI' indicative of different language settings, alterations related to network provider's order done by `C:\\Windows\\System32\\poqexec.exe`, and changes to printer monitors for `VNCpm.dll` via `C:\\Windows\\System32\\spoolsv.exe`.\n\nThis detailed monitoring and filtering ensure accurate detection while reducing noise from false positives such as the legitimate software installation or administrator's legitimate setup of autorun keys. This approach leverages knowledge about registry autostart extensibility points (ASEP) to fortify detection mechanisms against unauthorized modifications aiming to achieve persistence, execute malicious payloads at startup, or compromise system security settings. Pay attention to security events associated with modifying these registry keys, ensuring comprehensive coverage of potential attack vectors while excluding known legitimate behavior patterns to maintain operational efficiency and security integrity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in the registry, you should monitor for registry sets within Windows environments focusing on events where the `SetValue` type signifies a modification in registry keys. Specifically, lookout for changes made to the `SYSTEM\\CurrentControlSet\\Control` path or any alterations to critical system functionalities and security settings such as Terminal Server settings like `RDP-Tcp\\InitialProgram` and `StartupPrograms`, `SecurityProviders`, settings that affect safe boot operations like `AlternateShell`, configurations related to `Print` providers and monitors, adjustments in the network provider's order, and modifications in the Local Security Authority (LSA) pertaining to `Notification Packages` and `Authentication Packages`, as well as changes to the Boot Verification Program's image path.\n\nAdditionally, it's crucial to filter out events associated with known legitimate operations that could cause false positives. For instance, ignore modifications done by `C:\\Windows\\System32\\spoolsv.exe` specifically targeting `CutePDF Writer Monitor` linked to the `cpwmon64_v40.dll` or `CutePDF Writer`, adjustments through `C:\\Windows\\System32\\spoolsv.exe` focused on `Microsoft.Office.OneNote_` printer monitors by users with a name that contains 'AUTHORI' or 'AUTORI' indicative of different language settings, alterations related to network provider's order done by `C:\\Windows\\System32\\poqexec.exe`, and changes to printer monitors for `VNCpm.dll` via `C:\\Windows\\System32\\spoolsv.exe`.\n\nThis detailed monitoring and filtering ensure accurate detection while reducing noise from false positives such as the legitimate software installation or administrator's legitimate setup of autorun keys. This approach leverages knowledge about registry autostart extensibility points (ASEP) to fortify detection mechanisms against unauthorized modifications aiming to achieve persistence, execute malicious payloads at startup, or compromise system security settings. Pay attention to security events associated with modifying these registry keys, ensuring comprehensive coverage of potential attack vectors while excluding known legitimate behavior patterns to maintain operational efficiency and security integrity."
    }
  },
  {
    "instruction": "How to detect: MMC20.Application Lateral Movement; specifically looks for the spawning of the parent MMC.exe with a command line of \"-Embedding\" as a child of svchost.exe",
    "context": "",
    "output": "In order to detect MMC20.Application Lateral Movement; specifically looks for the spawning of the parent MMC.exe with a command line of \"-Embedding\" as a child of svchost.exe, you should: monitor process creation events on Windows systems, specifically focusing on instances where the MMC.exe process is initiated with the command-line parameter \"-Embedding\" and is spawned as a child process of svchost.exe. The identification of such patterns is considered high-priority due to their unlikely association with legitimate system or user activities, indicating potential lateral movement techniques utilized by attackers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "MMC20.Application Lateral Movement; specifically looks for the spawning of the parent MMC.exe with a command line of \"-Embedding\" as a child of svchost.exe",
      "answer": "In order to detect MMC20.Application Lateral Movement; specifically looks for the spawning of the parent MMC.exe with a command line of \"-Embedding\" as a child of svchost.exe, you should: monitor process creation events on Windows systems, specifically focusing on instances where the MMC.exe process is initiated with the command-line parameter \"-Embedding\" and is spawned as a child process of svchost.exe. The identification of such patterns is considered high-priority due to their unlikely association with legitimate system or user activities, indicating potential lateral movement techniques utilized by attackers."
    }
  },
  {
    "instruction": "How to detect: detects the usage of path traversal in conhost.exe indicating possible command/argument confusion/hijacking",
    "context": "",
    "output": "In order to detect the usage of path traversal in conhost.exe indicating possible command/argument confusion/hijacking, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the command line of a parent process includes 'conhost' and the child process's command line contains the pattern '/../../'. This pattern is indicative of an attempt to use path traversal techniques, which might be part of an attack aiming at command or argument confusion/hijacking. Such monitoring is critical as it represents a high threat level, although it's unlikely to encounter false positives in this context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "detects the usage of path traversal in conhost.exe indicating possible command/argument confusion/hijacking",
      "answer": "In order to detect the usage of path traversal in conhost.exe indicating possible command/argument confusion/hijacking, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the command line of a parent process includes 'conhost' and the child process's command line contains the pattern '/../../'. This pattern is indicative of an attempt to use path traversal techniques, which might be part of an attack aiming at command or argument confusion/hijacking. Such monitoring is critical as it represents a high threat level, although it's unlikely to encounter false positives in this context."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of \"getcap\" binary. This is often used during recon activity to determine potential binaries that can be abused as GTFOBins or other.",
    "context": "",
    "output": "Sure!\nIn order to detect usage of \"getcap\" binary, which is often used during recon activity to determine potential binaries that can be abused as GTFOBins or others, you should: monitor process creation events on Linux systems for the execution of the \"getcap\" binary, particularly focusing on command lines that include either \" /r \" or \" -r \". This involves checking the end of the image path for '/getcap' to accurately identify the use of this specific binary. Understanding that there might be unknown cases that could be falsely identified as suspicious, this detection strategy is set with a low level of confidence. Nonetheless, it remains a crucial step in identifying reconnaissance activities where attackers might be searching for exploitable binaries to leverage in their attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"getcap\" binary. This is often used during recon activity to determine potential binaries that can be abused as GTFOBins or other.",
      "answer": "In order to detect usage of \"getcap\" binary, which is often used during recon activity to determine potential binaries that can be abused as GTFOBins or others, you should: monitor process creation events on Linux systems for the execution of the \"getcap\" binary, particularly focusing on command lines that include either \" /r \" or \" -r \". This involves checking the end of the image path for '/getcap' to accurately identify the use of this specific binary. Understanding that there might be unknown cases that could be falsely identified as suspicious, this detection strategy is set with a low level of confidence. Nonetheless, it remains a crucial step in identifying reconnaissance activities where attackers might be searching for exploitable binaries to leverage in their attacks."
    }
  },
  {
    "instruction": "How to detect: potential DLL sideloading of \"7za.dll\"",
    "context": "",
    "output": "In order to detect potential DLL sideloading of \"7za.dll\", you should: Monitor Windows image load events for instances where the '7za.dll' is loaded, excluding occasions where this DLL is loaded from legitimate paths, namely 'C:\\Program Files (x86)\\' and 'C:\\Program Files\\'. This approach targets identifying suspicious activities where '7za.dll', which is known for providing 7z compression functionalities, might be loaded from unconventional locations, suggesting an attempt to exploit the legitimate process via DLL sideloading techniques. Be aware that legitimate third-party applications located in \"AppData\" might also use this DLL for legitimate purposes, thus could lead to false positives. It is recommended to apply additional filters to distinguish between malicious activities and legitimate usage of '7za.dll'.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"7za.dll\"",
      "answer": "In order to detect potential DLL sideloading of \"7za.dll\", you should: Monitor Windows image load events for instances where the '7za.dll' is loaded, excluding occasions where this DLL is loaded from legitimate paths, namely 'C:\\Program Files (x86)\\' and 'C:\\Program Files\\'. This approach targets identifying suspicious activities where '7za.dll', which is known for providing 7z compression functionalities, might be loaded from unconventional locations, suggesting an attempt to exploit the legitimate process via DLL sideloading techniques. Be aware that legitimate third-party applications located in \"AppData\" might also use this DLL for legitimate purposes, thus could lead to false positives. It is recommended to apply additional filters to distinguish between malicious activities and legitimate usage of '7za.dll'."
    }
  },
  {
    "instruction": "Explain how should I detect the following: a suspicious crash of the Microsoft Malware Protection Engine",
    "context": "",
    "output": "In order to detect a suspicious crash of the Microsoft Malware Protection Engine, you should monitor application logs on Windows systems for events generated by the Windows Error Reporting service. Specifically, look for events with a Provider Name of 'Windows Error Reporting' and an EventID of 1001. Crucially, within the data field of these events, ensure that both 'MsMpEng.exe' and 'mpengine.dll' are mentioned. These artifacts are key components of the Microsoft Malware Protection Engine, and their presence in a crash report may indicate a potentially malicious interference or a severe error within the system's protective measures.\n\nHowever, it's significant to acknowledge that not all crashes involving these components are of a malicious origin. For instance, a crash could occur simply because the \"C:\\\" partition on the system is full, which would be a non-malicious, yet critical system issue to resolve. Given the high severity level of this monitoring strategy, it aims to highlight events that could compromise the integrity and reliability of Microsoft's Malware Protection mechanisms, thereby aiding in the swift identification and mitigation of potential threats to the system's security posture.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "a suspicious crash of the Microsoft Malware Protection Engine",
      "answer": "In order to detect a suspicious crash of the Microsoft Malware Protection Engine, you should monitor application logs on Windows systems for events generated by the Windows Error Reporting service. Specifically, look for events with a Provider Name of 'Windows Error Reporting' and an EventID of 1001. Crucially, within the data field of these events, ensure that both 'MsMpEng.exe' and 'mpengine.dll' are mentioned. These artifacts are key components of the Microsoft Malware Protection Engine, and their presence in a crash report may indicate a potentially malicious interference or a severe error within the system's protective measures.\n\nHowever, it's significant to acknowledge that not all crashes involving these components are of a malicious origin. For instance, a crash could occur simply because the \"C:\\\" partition on the system is full, which would be a non-malicious, yet critical system issue to resolve. Given the high severity level of this monitoring strategy, it aims to highlight events that could compromise the integrity and reliability of Microsoft's Malware Protection mechanisms, thereby aiding in the swift identification and mitigation of potential threats to the system's security posture."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious script executions from temporary folder",
    "context": "",
    "output": "In order to detect suspicious script executions from temporary folders, you should: monitor the creation of processes on Windows systems, specifically looking for executions of PowerShell (`powershell.exe` or `pwsh.exe`), HTML Application Host (`mshta.exe`), Windows Script Host (`wscript.exe` or `cscript.exe`). It's crucial to pay attention to commands that involve directories commonly used for temporary files, such as `\\Windows\\Temp`, `\\Temporary Internet`, `\\AppData\\Local\\Temp`, `\\AppData\\Roaming\\Temp`, and any paths containing environment variables like `%TEMP%`, `%TMP%`, or `%LocalAppData%\\Temp`. However, to avoid false positives, ignore command lines that include redirections (` >`), use of `Out-File`, serialization to JSON (`ConvertTo-Json`), actions to hide the window (`-WindowStyle hidden -Verb runAs`, which is often seen in legitimate scenarios like VSCode's behavior under certain conditions), or paths indicating operations possibly related to AWS EC2 (`\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Temp\\Amazon\\EC2-Windows\\`). Remember, this approach aims to eliminate usual administrative scripts from being flagged incorrectly. Keep an eye out for these activities at a high level of alert due to their potential to signify malicious behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious script executions from temporary folder",
      "answer": "In order to detect suspicious script executions from temporary folders, you should: monitor the creation of processes on Windows systems, specifically looking for executions of PowerShell (`powershell.exe` or `pwsh.exe`), HTML Application Host (`mshta.exe`), Windows Script Host (`wscript.exe` or `cscript.exe`). It's crucial to pay attention to commands that involve directories commonly used for temporary files, such as `\\Windows\\Temp`, `\\Temporary Internet`, `\\AppData\\Local\\Temp`, `\\AppData\\Roaming\\Temp`, and any paths containing environment variables like `%TEMP%`, `%TMP%`, or `%LocalAppData%\\Temp`. However, to avoid false positives, ignore command lines that include redirections (` >`), use of `Out-File`, serialization to JSON (`ConvertTo-Json`), actions to hide the window (`-WindowStyle hidden -Verb runAs`, which is often seen in legitimate scenarios like VSCode's behavior under certain conditions), or paths indicating operations possibly related to AWS EC2 (`\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Temp\\Amazon\\EC2-Windows\\`). Remember, this approach aims to eliminate usual administrative scripts from being flagged incorrectly. Keep an eye out for these activities at a high level of alert due to their potential to signify malicious behavior."
    }
  },
  {
    "instruction": "How can I detect: potential tampering with Windows Defender settings such as adding exclusion using wmic",
    "context": "",
    "output": "In order to detect potential tampering with Windows Defender settings such as adding exclusion using wmic, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the WMIC (Windows Management Instrumentation Command-line) utility, either referenced by its original filename 'wmic.exe' or any executable path ending with '\\WMIC.exe', is involved. Further scrutiny is required when the command line parameters include actions that modify the Windows Defender settings, notably accessing or altering configurations within the '/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender' directory. Any such activity should be flagged as suspicious with a high level of concern due to the rarity of legitimate use cases that involve direct manipulation of Windows Defender settings via WMIC, indicating a probable attempt at undermining the system's defense mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential tampering with Windows Defender settings such as adding exclusion using wmic",
      "answer": "In order to detect potential tampering with Windows Defender settings such as adding exclusion using wmic, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the WMIC (Windows Management Instrumentation Command-line) utility, either referenced by its original filename 'wmic.exe' or any executable path ending with '\\WMIC.exe', is involved. Further scrutiny is required when the command line parameters include actions that modify the Windows Defender settings, notably accessing or altering configurations within the '/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender' directory. Any such activity should be flagged as suspicious with a high level of concern due to the rarity of legitimate use cases that involve direct manipulation of Windows Defender settings via WMIC, indicating a probable attempt at undermining the system's defense mechanisms."
    }
  },
  {
    "instruction": "How to detect: svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389",
    "context": "",
    "output": "In order to detect svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389, you should monitor network connections specifically on Windows systems. Look out for processes where the executable name ends with '\\svchost.exe' that have initiated a connection. Moreover, these connections should be specifically using SourcePort 3389, which is typically used for Remote Desktop Protocol (RDP) services. Additionally, pay attention to connections where the destination IP address starts with '127.' or is '::1', as these represent loopback addresses used to communicate within the host. This type of behavior could signal that the svchost process, which is a legitimate Windows service host, is being used to host RDP services in a potentially unauthorized or malicious manner, especially when communicating over the loopback address. Note that while detections based on these criteria are considered to hold a high level of importance, there might be unknown cases causing false positives. Therefore, thorough investigation is recommended upon detection to determine the context and legitimacy of such actions. This monitoring strategy leans on tactics and techniques associated with malicious use of valid accounts, remote services, and potentially persistence mechanisms without directly referencing the MITRE ATT&CK taxonomy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389",
      "answer": "In order to detect svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389, you should monitor network connections specifically on Windows systems. Look out for processes where the executable name ends with '\\svchost.exe' that have initiated a connection. Moreover, these connections should be specifically using SourcePort 3389, which is typically used for Remote Desktop Protocol (RDP) services. Additionally, pay attention to connections where the destination IP address starts with '127.' or is '::1', as these represent loopback addresses used to communicate within the host. This type of behavior could signal that the svchost process, which is a legitimate Windows service host, is being used to host RDP services in a potentially unauthorized or malicious manner, especially when communicating over the loopback address. Note that while detections based on these criteria are considered to hold a high level of importance, there might be unknown cases causing false positives. Therefore, thorough investigation is recommended upon detection to determine the context and legitimacy of such actions. This monitoring strategy leans on tactics and techniques associated with malicious use of valid accounts, remote services, and potentially persistence mechanisms without directly referencing the MITRE ATT&CK taxonomy."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect use of X509Enrollment",
    "context": "",
    "output": "Certainly!\n\nIn order to detect use of X509Enrollment, you should focus on monitoring PowerShell script activities within Windows environments, specifically looking for interactions that involve script block logging. It's essential that script block logging is enabled to catch these activities. The detection mechanism zeroes in on scripts containing either the string 'X509Enrollment.CBinaryConverter' or the GUID '884e2002-217d-11da-b2a4-000e7bbb2b09'. These identifiers suggest an attempt to manipulate certificates or use the X509Enrollment process in a way that could be malicious. However, it's important to consider that some activities flagged by this approach might indeed be legitimate administrative actions involving certificate handling, thus categorizing them as potential false positives. Such detections are deemed to have a medium level of severity and should be investigated to distinguish between genuine administrative tasks and malicious exploits related to the tactics and techniques of Credential Access and Defense Evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect use of X509Enrollment",
      "answer": "In order to detect use of X509Enrollment, you should focus on monitoring PowerShell script activities within Windows environments, specifically looking for interactions that involve script block logging. It's essential that script block logging is enabled to catch these activities. The detection mechanism zeroes in on scripts containing either the string 'X509Enrollment.CBinaryConverter' or the GUID '884e2002-217d-11da-b2a4-000e7bbb2b09'. These identifiers suggest an attempt to manipulate certificates or use the X509Enrollment process in a way that could be malicious. However, it's important to consider that some activities flagged by this approach might indeed be legitimate administrative actions involving certificate handling, thus categorizing them as potential false positives. Such detections are deemed to have a medium level of severity and should be investigated to distinguish between genuine administrative tasks and malicious exploits related to the tactics and techniques of Credential Access and Defense Evasion."
    }
  },
  {
    "instruction": "Can you explain how to detect: specific process characteristics of Maze ransomware word document droppers",
    "context": "",
    "output": "Certainly!\n\nIn order to detect specific process characteristics of Maze ransomware word document droppers, you should monitor for activities including the creation of processes in the Windows environment where such activities closely resemble the operational patterns of Maze ransomware. Specifically, focus on three main patterns of behavior:\n\n1. Look for instances where 'WINWORD.exe' (Microsoft Word) launches a process with a '.tmp' (temporary) file extension. This might indicate the initial dropper phase, where the ransomware is attempting to execute its malicious payload through a seemingly innocuous Word document.\n\n2. Be alert for the execution of 'wmic.exe' launched from a temporary directory, accompanied by a command line ending with 'shadowcopy delete'. This behavior suggests an attempt to inhibit system recovery by deleting shadow copies, a common tactic employed by ransomware to increase the difficulty of recovering encrypted files without paying the ransom.\n\n3. Also, monitor for command-line instructions that not only end with 'shadowcopy delete' but also contain references to a traversal pattern leading to '\\..\\..\\system32'. This specific pattern might indicate a more sophisticated attempt at manipulating or bypassing system utilities to further the malware's agenda.\n\nFor each detected event fitting these descriptions, collect information on the affected computer's name, the user account under which the process is running, and the exact path of the executable involved. It's important to note that these behaviors are considered highly indicative of malware activity, specifically actions consistent with Maze ransomware operation, and false positives are unlikely. Given the critical nature of these indicators, immediate investigation and response is recommended upon detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific process characteristics of Maze ransomware word document droppers",
      "answer": "In order to detect specific process characteristics of Maze ransomware word document droppers, you should monitor for activities including the creation of processes in the Windows environment where such activities closely resemble the operational patterns of Maze ransomware. Specifically, focus on three main patterns of behavior:\n\n1. Look for instances where 'WINWORD.exe' (Microsoft Word) launches a process with a '.tmp' (temporary) file extension. This might indicate the initial dropper phase, where the ransomware is attempting to execute its malicious payload through a seemingly innocuous Word document.\n\n2. Be alert for the execution of 'wmic.exe' launched from a temporary directory, accompanied by a command line ending with 'shadowcopy delete'. This behavior suggests an attempt to inhibit system recovery by deleting shadow copies, a common tactic employed by ransomware to increase the difficulty of recovering encrypted files without paying the ransom.\n\n3. Also, monitor for command-line instructions that not only end with 'shadowcopy delete' but also contain references to a traversal pattern leading to '\\..\\..\\system32'. This specific pattern might indicate a more sophisticated attempt at manipulating or bypassing system utilities to further the malware's agenda.\n\nFor each detected event fitting these descriptions, collect information on the affected computer's name, the user account under which the process is running, and the exact path of the executable involved. It's important to note that these behaviors are considered highly indicative of malware activity, specifically actions consistent with Maze ransomware operation, and false positives are unlikely. Given the critical nature of these indicators, immediate investigation and response is recommended upon detection."
    }
  },
  {
    "instruction": "How can I detect: potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location",
    "context": "",
    "output": "In order to detect potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location, you should monitor Windows image load events for instances where the \"gup.exe\" process loads the \"libcurl.dll\". It is important to note that the legitimate process \"Notepad++\\updater\\GUP.exe\" loading \"libcurl.dll\" should not be considered suspicious and thus is excluded from this detection criterion. This detection focuses on identifying abnormal or potentially malicious activity involving the sideloading technique where \"gup.exe\" is found outside of its usual update process environment, specifically targeting DLL files with the name \"libcurl.dll\". Consequently, this activity is observed under suspicion of being an attack technique but does come with a caution regarding unknown false positives, indicating that not all detections might represent actual threats. The severity level of this rule is marked as medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location",
      "answer": "In order to detect potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location, you should monitor Windows image load events for instances where the \"gup.exe\" process loads the \"libcurl.dll\". It is important to note that the legitimate process \"Notepad++\\updater\\GUP.exe\" loading \"libcurl.dll\" should not be considered suspicious and thus is excluded from this detection criterion. This detection focuses on identifying abnormal or potentially malicious activity involving the sideloading technique where \"gup.exe\" is found outside of its usual update process environment, specifically targeting DLL files with the name \"libcurl.dll\". Consequently, this activity is observed under suspicion of being an attack technique but does come with a caution regarding unknown false positives, indicating that not all detections might represent actual threats. The severity level of this rule is marked as medium."
    }
  },
  {
    "instruction": "How can I detect: use of the lesser known remote execution tool named CsExec a PsExec alternative",
    "context": "",
    "output": "In order to detect the use of the lesser known remote execution tool named CsExec a PsExec alternative, you should: Focus on monitoring process creation logs within the Windows environment. Specifically, look for instances where the process image name ends with '\\csexec.exe'. Additionally, pay attention to the process executable's description to identify any occurrences that include 'csexec'. This monitoring approach is critical for identifying potentially malicious activity associated with remote execution tools similar to PsExec, but less commonly used, such as CsExec. Given that such tools can be utilized for legitimate administrative purposes as well as malicious actions, it's important to consider that some detections might not always pinpoint harmful activity (hence, the occasional unknown false positives). The significance of detecting such tools comes from their association with various cyber attack tactics and techniques, notably those involving execution and lateral movement. By focusing on these specific attributes in the process creation logs, effective detection mechanisms can be established to alert high-level threats possibly indicated by the use of CsExec for remote execution purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of the lesser known remote execution tool named CsExec a PsExec alternative",
      "answer": "In order to detect the use of the lesser known remote execution tool named CsExec a PsExec alternative, you should: Focus on monitoring process creation logs within the Windows environment. Specifically, look for instances where the process image name ends with '\\csexec.exe'. Additionally, pay attention to the process executable's description to identify any occurrences that include 'csexec'. This monitoring approach is critical for identifying potentially malicious activity associated with remote execution tools similar to PsExec, but less commonly used, such as CsExec. Given that such tools can be utilized for legitimate administrative purposes as well as malicious actions, it's important to consider that some detections might not always pinpoint harmful activity (hence, the occasional unknown false positives). The significance of detecting such tools comes from their association with various cyber attack tactics and techniques, notably those involving execution and lateral movement. By focusing on these specific attributes in the process creation logs, effective detection mechanisms can be established to alert high-level threats possibly indicated by the use of CsExec for remote execution purposes."
    }
  },
  {
    "instruction": "Please help me detect the following: AS-REP roasting is an attack that is often-overlooked. It is not very common as you have to explicitly set accounts that do not require pre-authentication.",
    "context": "",
    "output": "Sure!\nIn order to detect AS-REP roasting, an attack that is often-overlooked because it involves explicitly setting accounts to not require pre-authentication, you should: Monitor Windows PowerShell scripts for specific operations that may indicate an attempt to exploit this vulnerability. Specifically, ensure that Script Block Logging is enabled to capture detailed logging of PowerShell script executions. Look for scripts that include the combination of 'Get-ADUser', '-Filter', 'useraccountcontrol', '-band', and '4194304'. This pattern suggests an attempt to identify user accounts configured to not require Kerberos pre-authentication (indicated by the userAccountControl attribute flag 'DONT_REQ_PREAUTH' or the numerical value 4194304), a key indicator of AS-REP roasting attempts. Be aware that there may be legitimate scripts that perform similar queries, so evaluate detections in context to reduce false positives. The detection is considered to have a medium level of confidence due to the balance between identifying malicious activity and avoiding false positive detections from legitimate script use.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "AS-REP roasting is an attack that is often-overlooked. It is not very common as you have to explicitly set accounts that do not require pre-authentication.",
      "answer": "In order to detect AS-REP roasting, an attack that is often-overlooked because it involves explicitly setting accounts to not require pre-authentication, you should: Monitor Windows PowerShell scripts for specific operations that may indicate an attempt to exploit this vulnerability. Specifically, ensure that Script Block Logging is enabled to capture detailed logging of PowerShell script executions. Look for scripts that include the combination of 'Get-ADUser', '-Filter', 'useraccountcontrol', '-band', and '4194304'. This pattern suggests an attempt to identify user accounts configured to not require Kerberos pre-authentication (indicated by the userAccountControl attribute flag 'DONT_REQ_PREAUTH' or the numerical value 4194304), a key indicator of AS-REP roasting attempts. Be aware that there may be legitimate scripts that perform similar queries, so evaluate detections in context to reduce false positives. The detection is considered to have a medium level of confidence due to the balance between identifying malicious activity and avoiding false positive detections from legitimate script use."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of at/atd which are utilities that are used to schedule tasks.\nThey are often abused by adversaries to maintain persistence or to perform task scheduling for initial or recurring execution of malicious code\n",
    "context": "",
    "output": "In order to detect the use of at/atd which are utilities that are used to schedule tasks. They are often abused by adversaries to maintain persistence or to perform task scheduling for initial or recurring execution of malicious code, you should: Monitor Linux systems for the creation of processes that end with '/at' or '/atd'. These process creations should be flagged for further investigation since they could indicate the scheduling of tasks, which might be legitimate or could be used by an adversary to execute malicious code either immediately or at a scheduled time in the future. Given that these utilities can also be used for legitimate administrative activities, it's important to consider this fact to reduce false positives. The detection level for this activity is set as low, implying that while it's of concern, it doesn't always directly indicate malicious activity without further context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of at/atd which are utilities that are used to schedule tasks.\nThey are often abused by adversaries to maintain persistence or to perform task scheduling for initial or recurring execution of malicious code\n",
      "answer": "In order to detect the use of at/atd which are utilities that are used to schedule tasks. They are often abused by adversaries to maintain persistence or to perform task scheduling for initial or recurring execution of malicious code, you should: Monitor Linux systems for the creation of processes that end with '/at' or '/atd'. These process creations should be flagged for further investigation since they could indicate the scheduling of tasks, which might be legitimate or could be used by an adversary to execute malicious code either immediately or at a scheduled time in the future. Given that these utilities can also be used for legitimate administrative activities, it's important to consider this fact to reduce false positives. The detection level for this activity is set as low, implying that while it's of concern, it doesn't always directly indicate malicious activity without further context."
    }
  },
  {
    "instruction": "Explain how should I detect the following: LSASS process access by pypykatz for credential dumping.",
    "context": "",
    "output": "In order to detect LSASS process access by pypykatz for credential dumping, you should: Monitor process access logs on Windows systems for instances where there is an attempt to access the Local Security Authority Subsystem Service (LSASS) executable. Specifically, look for access attempts to the 'lsass.exe' file. Verify that the access attempts include call traces to 'C:\\Windows\\SYSTEM32\\ntdll.dll+', 'C:\\Windows\\System32\\KERNELBASE.dll+', 'libffi-7.dll', '_ctypes.pyd+', and any 'python3*.dll+' indicating the use of Python, particularly versions 3.6 or newer as required by pypykatz. Additionally, ensure these access attempts request extensive privileges ('0x1FFFFF'), which is indicative of malicious intent such as credential dumping. This activity is classified as critical due to the sensitive nature of the information potentially being compromised.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "LSASS process access by pypykatz for credential dumping.",
      "answer": "In order to detect LSASS process access by pypykatz for credential dumping, you should: Monitor process access logs on Windows systems for instances where there is an attempt to access the Local Security Authority Subsystem Service (LSASS) executable. Specifically, look for access attempts to the 'lsass.exe' file. Verify that the access attempts include call traces to 'C:\\Windows\\SYSTEM32\\ntdll.dll+', 'C:\\Windows\\System32\\KERNELBASE.dll+', 'libffi-7.dll', '_ctypes.pyd+', and any 'python3*.dll+' indicating the use of Python, particularly versions 3.6 or newer as required by pypykatz. Additionally, ensure these access attempts request extensive privileges ('0x1FFFFF'), which is indicative of malicious intent such as credential dumping. This activity is classified as critical due to the sensitive nature of the information potentially being compromised."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of \"odbcconf\" with the \"INSTALLDRIVER\" action where the driver doesn't contain a \".dll\" extension. This is often used as a defense evasion method.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of \"odbcconf\" with the \"INSTALLDRIVER\" action where the driver doesn't contain a \".dll\" extension, often used as a defense evasion method, you should: Focus on monitoring process creation events within Windows environments. Specifically, be vigilant for any instance where the process image name ends with '\\odbcconf.exe' or the original file name is identified as 'odbcconf.exe'. Additionally, scrutinize the command line arguments for the presence of 'INSTALLDRIVER ' to pinpoint the execution attempts of the \"odbcconf\" configuration utility with the intention to install drivers. It's crucial to filter out cases where the command line includes '.dll' extensions to distinguish between legitimate and suspicious activities. This approach is designed to capture attempts to evade defenses by not using the typical \".dll\" file extension for driver installations, which is tagged under evasion techniques. False positives are considered unlikely with this high-level detection strategy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"odbcconf\" with the \"INSTALLDRIVER\" action where the driver doesn't contain a \".dll\" extension. This is often used as a defense evasion method.",
      "answer": "In order to detect execution of \"odbcconf\" with the \"INSTALLDRIVER\" action where the driver doesn't contain a \".dll\" extension, often used as a defense evasion method, you should: Focus on monitoring process creation events within Windows environments. Specifically, be vigilant for any instance where the process image name ends with '\\odbcconf.exe' or the original file name is identified as 'odbcconf.exe'. Additionally, scrutinize the command line arguments for the presence of 'INSTALLDRIVER ' to pinpoint the execution attempts of the \"odbcconf\" configuration utility with the intention to install drivers. It's crucial to filter out cases where the command line includes '.dll' extensions to distinguish between legitimate and suspicious activities. This approach is designed to capture attempts to evade defenses by not using the typical \".dll\" file extension for driver installations, which is tagged under evasion techniques. False positives are considered unlikely with this high-level detection strategy."
    }
  },
  {
    "instruction": "Can you explain how to detect: import of the specified file to the registry with regedit.exe.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the import of the specified file to the registry with regedit.exe, you should: Monitor for instances where the process creation involves `regedit.exe`, indicating the Windows Registry Editor is being utilized. Key details to watch include the image name ending with `\\regedit.exe` or having an original filename of `REGEDIT.EXE`. Additionally, command line arguments should be carefully inspected. The presence of ` /i `, ` /s `, or a `.reg` file in the command line suggests an import operation to the registry is being attempted. However, it is critical to exclude command lines containing ` /e `, ` /a `, ` /c `, ` -e `, ` -a `, or ` -c ` as these flags indicate different operations that could lead to false positives. Furthermore, command lines that resemble a colon followed by any character except a space or backslash should be ignored to reduce the chance of conflating this activity with rules aimed at detecting Alternate Data Streams (ADS). Important fields to keep an eye on during this analysis include the parent image from which the command was run, and the specific command line used. Take note that legitimate registry key imports and certain applications like Evernote might generate similar activity, thus could be considered false positives. The detection level for this kind of activity is medium, suggesting it's not uncommon and warrants attention but may not always signify malicious intent on its own.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "import of the specified file to the registry with regedit.exe.",
      "answer": "In order to detect the import of the specified file to the registry with regedit.exe, you should: Monitor for instances where the process creation involves `regedit.exe`, indicating the Windows Registry Editor is being utilized. Key details to watch include the image name ending with `\\regedit.exe` or having an original filename of `REGEDIT.EXE`. Additionally, command line arguments should be carefully inspected. The presence of ` /i `, ` /s `, or a `.reg` file in the command line suggests an import operation to the registry is being attempted. However, it is critical to exclude command lines containing ` /e `, ` /a `, ` /c `, ` -e `, ` -a `, or ` -c ` as these flags indicate different operations that could lead to false positives. Furthermore, command lines that resemble a colon followed by any character except a space or backslash should be ignored to reduce the chance of conflating this activity with rules aimed at detecting Alternate Data Streams (ADS). Important fields to keep an eye on during this analysis include the parent image from which the command was run, and the specific command line used. Take note that legitimate registry key imports and certain applications like Evernote might generate similar activity, thus could be considered false positives. The detection level for this kind of activity is medium, suggesting it's not uncommon and warrants attention but may not always signify malicious intent on its own."
    }
  },
  {
    "instruction": "Can you explain how to detect: Sysmon registry detection of a local hidden user account.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation or manipulation of a local hidden user account via Sysmon registry events, you should monitor Windows registry event logs for actions targeting registry keys related to user accounts, specifically those that occur within the path `\\SAM\\SAM\\Domains\\Account\\Users\\Names\\`. Focus on entries where the target object either contains this path or ends with a `$` symbol, indicating hidden or system accounts. Additionally, give special attention to events generated by the image `lsass.exe` as this binary is often associated with local security authority processes and could be indicative of malicious activity aimed at manipulating user accounts. Despite the potential for unknown false positives, this activity is deemed to have a high level of concern due to its implications for system security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Sysmon registry detection of a local hidden user account.",
      "answer": "In order to detect the creation or manipulation of a local hidden user account via Sysmon registry events, you should monitor Windows registry event logs for actions targeting registry keys related to user accounts, specifically those that occur within the path `\\SAM\\SAM\\Domains\\Account\\Users\\Names\\`. Focus on entries where the target object either contains this path or ends with a `$` symbol, indicating hidden or system accounts. Additionally, give special attention to events generated by the image `lsass.exe` as this binary is often associated with local security authority processes and could be indicative of malicious activity aimed at manipulating user accounts. Despite the potential for unknown false positives, this activity is deemed to have a high level of concern due to its implications for system security."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect the usage of \"DirLister.exe\" a utility for quickly listing folder or drive contents. It was seen used by BlackCat ransomware to create a list of accessible directories and files.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the usage of \"DirLister.exe\", a utility for quickly listing folder or drive contents. It was seen used by BlackCat ransomware to create a list of accessible directories and files, you should: Monitor process creation logs on Windows systems for any instances of a process being created with the original file name \"DirLister.exe\" or any process where the image path ends with \"\\dirlister.exe\". Such activities can indicate the utility is being used, possibly for malicious purposes such as part of the initial reconnaissance phase by BlackCat ransomware to identify accessible directories and files for encryption. It's important to note that there might be legitimate uses of this utility by users, which could lead to false positives. This detection strategy is tagged with tactics and techniques related to ransomware operation and initial access preparation, specifically the gathering of information about files and directories on a target system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect the usage of \"DirLister.exe\" a utility for quickly listing folder or drive contents. It was seen used by BlackCat ransomware to create a list of accessible directories and files.",
      "answer": "In order to detect the usage of \"DirLister.exe\", a utility for quickly listing folder or drive contents. It was seen used by BlackCat ransomware to create a list of accessible directories and files, you should: Monitor process creation logs on Windows systems for any instances of a process being created with the original file name \"DirLister.exe\" or any process where the image path ends with \"\\dirlister.exe\". Such activities can indicate the utility is being used, possibly for malicious purposes such as part of the initial reconnaissance phase by BlackCat ransomware to identify accessible directories and files for encryption. It's important to note that there might be legitimate uses of this utility by users, which could lead to false positives. This detection strategy is tagged with tactics and techniques related to ransomware operation and initial access preparation, specifically the gathering of information about files and directories on a target system."
    }
  },
  {
    "instruction": "Please help me detect the following: Detecting attempts to extract passwords with grep",
    "context": "",
    "output": "Sure!\nIn order to detect attempts to extract passwords with grep, you should monitor for specific events captured by the audit daemon (`auditd`) on Linux systems. Focus on the `EXECVE` event type, which indicates the execution of commands. Look for instances where the `grep` command is used alongside the keyword `password`. This combination suggests an attempt to search through files or command outputs for password information, which is a common tactic employed by attackers trying to find sensitive information. It is important to note that any detection related to this activity is considered to have a high level of importance due to the potential for exposing sensitive information. However, be aware that there may be legitimate uses of `grep` with the term `password` that are not malicious, but these cases are unknown and should be investigated thoroughly. The activity to watch closely involves the use of Linux's audit system for monitoring command executions that could be attempting to illicitly extract password information, aligning with tactics and techniques that involve the collection of credentials without proper authorization.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detecting attempts to extract passwords with grep",
      "answer": "In order to detect attempts to extract passwords with grep, you should monitor for specific events captured by the audit daemon (`auditd`) on Linux systems. Focus on the `EXECVE` event type, which indicates the execution of commands. Look for instances where the `grep` command is used alongside the keyword `password`. This combination suggests an attempt to search through files or command outputs for password information, which is a common tactic employed by attackers trying to find sensitive information. It is important to note that any detection related to this activity is considered to have a high level of importance due to the potential for exposing sensitive information. However, be aware that there may be legitimate uses of `grep` with the term `password` that are not malicious, but these cases are unknown and should be investigated thoroughly. The activity to watch closely involves the use of Linux's audit system for monitoring command executions that could be attempting to illicitly extract password information, aligning with tactics and techniques that involve the collection of credentials without proper authorization."
    }
  },
  {
    "instruction": "How to detect: rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module",
    "context": "",
    "output": "In order to detect rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module, you should: Monitor Windows systems for the creation of processes where the command line involves 'rundll32.exe' or 'rundll32' without any accompanying parameters. This monitoring should be done on systems that are capable of logging process creation events. Specifically, focus on capturing details such as the computer name, the username initiating the process, the exact command line used, and both the image path of the created process and the parent process's image path. Be aware that there might be instances where legitimate use of 'rundll32' without parameters is flagged by this detection approach; these are considered false positives. The significance of carefully monitoring for this activity is high due to its association with a known exploit technique.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module",
      "answer": "In order to detect rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module, you should: Monitor Windows systems for the creation of processes where the command line involves 'rundll32.exe' or 'rundll32' without any accompanying parameters. This monitoring should be done on systems that are capable of logging process creation events. Specifically, focus on capturing details such as the computer name, the username initiating the process, the exact command line used, and both the image path of the created process and the parent process's image path. Be aware that there might be instances where legitimate use of 'rundll32' without parameters is flagged by this detection approach; these are considered false positives. The significance of carefully monitoring for this activity is high due to its association with a known exploit technique."
    }
  },
  {
    "instruction": "Please help me detect the following: Obfuscated Powershell via VAR++ LAUNCHER",
    "context": "",
    "output": "Sure!\nIn order to detect obfuscated PowerShell via VAR++ LAUNCHER, you should focus on monitoring Windows System logs, specifically looking for events generated by the Service Control Manager with an EventID of 7045. This EventID indicates a service was installed on the system, which can be a normal occurrence. However, the critical aspect to scrutinize is the 'ImagePath' attribute within these events, as attackers often manipulate this to execute malicious PowerShell scripts using obfuscation techniques to evade detection.\n\nLook for 'ImagePath' values that contain a combination of certain patterns and characters, indicating a high likelihood of obfuscated PowerShell commands. Specifically, you should search for occurrences that have:\n\n- The presence of '&&set' followed by 'cmd' and '/c' indicating the execution of a command following the setting of environment variables.\n- The '-f' format operator, which in these contexts is likely used for string manipulation or to format commands in a way that masks their intentions.\n- The use of manipulated braces '{ }', specifically containing numeric placeholders like '{0}', '{1}', '{2}', '{3}', '{4}', '{5}', indicating an attempt to reorder or format strings in a way that might not be immediately apparent, contributing to the obfuscation.\n\nIt's these patterns of string manipulation and command formatting that hint at the obfuscation tactics used to disguise the intended actions of PowerShell scripts, making them less conspicuous to standard detection mechanisms.\n\nIt is important, however, to approach detections with caution as there might be unknown false positives. Given that these detection methods are based on behavior that could potentially be replicated in non-malicious contexts, any alerts should warrant a further investigation rather than immediate action. The level of concern for detections matching these patterns is high, underscoring the necessity for immediate investigation upon detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via VAR++ LAUNCHER",
      "answer": "In order to detect obfuscated PowerShell via VAR++ LAUNCHER, you should focus on monitoring Windows System logs, specifically looking for events generated by the Service Control Manager with an EventID of 7045. This EventID indicates a service was installed on the system, which can be a normal occurrence. However, the critical aspect to scrutinize is the 'ImagePath' attribute within these events, as attackers often manipulate this to execute malicious PowerShell scripts using obfuscation techniques to evade detection.\n\nLook for 'ImagePath' values that contain a combination of certain patterns and characters, indicating a high likelihood of obfuscated PowerShell commands. Specifically, you should search for occurrences that have:\n\n- The presence of '&&set' followed by 'cmd' and '/c' indicating the execution of a command following the setting of environment variables.\n- The '-f' format operator, which in these contexts is likely used for string manipulation or to format commands in a way that masks their intentions.\n- The use of manipulated braces '{ }', specifically containing numeric placeholders like '{0}', '{1}', '{2}', '{3}', '{4}', '{5}', indicating an attempt to reorder or format strings in a way that might not be immediately apparent, contributing to the obfuscation.\n\nIt's these patterns of string manipulation and command formatting that hint at the obfuscation tactics used to disguise the intended actions of PowerShell scripts, making them less conspicuous to standard detection mechanisms.\n\nIt is important, however, to approach detections with caution as there might be unknown false positives. Given that these detection methods are based on behavior that could potentially be replicated in non-malicious contexts, any alerts should warrant a further investigation rather than immediate action. The level of concern for detections matching these patterns is high, underscoring the necessity for immediate investigation upon detection."
    }
  },
  {
    "instruction": "How to detect: execution of a PowerShell code through the sqltoolsps.exe utility, which is included in the standard set of utilities supplied with the Microsoft SQL Server Management studio.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n",
    "context": "",
    "output": "In order to detect the execution of PowerShell code through the sqltoolsps.exe utility, which is included in the standard set of utilities supplied with the Microsoft SQL Server Management studio and is used to bypass protection mechanisms by not logging script blocks, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, you need to identify any instance where the sqltoolsps.exe file is executed directly or is initiated by another process, which is also sqltoolsps.exe. However, it is important to exclude any events where the parent process of sqltoolsps.exe is smss.exe, as this is considered a legitimate action and thus not indicative of the described attack method. This approach is designed to isolate suspicious activities that could indicate an attempt to execute PowerShell commands stealthily through sqltoolsps.exe, bypassing traditional logging and detection mechanisms. Keep in mind that direct PowerShell command execution through SQLToolsPS.exe is uncommon, so events matching these criteria might require further investigation to rule out false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a PowerShell code through the sqltoolsps.exe utility, which is included in the standard set of utilities supplied with the Microsoft SQL Server Management studio.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n",
      "answer": "In order to detect the execution of PowerShell code through the sqltoolsps.exe utility, which is included in the standard set of utilities supplied with the Microsoft SQL Server Management studio and is used to bypass protection mechanisms by not logging script blocks, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, you need to identify any instance where the sqltoolsps.exe file is executed directly or is initiated by another process, which is also sqltoolsps.exe. However, it is important to exclude any events where the parent process of sqltoolsps.exe is smss.exe, as this is considered a legitimate action and thus not indicative of the described attack method. This approach is designed to isolate suspicious activities that could indicate an attempt to execute PowerShell commands stealthily through sqltoolsps.exe, bypassing traditional logging and detection mechanisms. Keep in mind that direct PowerShell command execution through SQLToolsPS.exe is uncommon, so events matching these criteria might require further investigation to rule out false positives."
    }
  },
  {
    "instruction": "How can I detect: access to a domain user from a non-machine account",
    "context": "",
    "output": "In order to detect access to a domain user from a non-machine account, you should focus on monitoring security logs from Windows systems. Specifically, look for event ID 4662, which signals an attempt to access an object. The object type of interest is identified by its globally unique identifier (GUID) 'bf967aba-0de6-11d0-a285-00aa003049e2', which corresponds to user objects in Windows. This means the detection targets situations where someone is accessing properties of a user object within the domain.\n\nHowever, it's important to exclude events generated by machine accounts and specific system accounts used by Microsoft services (like those starting with 'MSOL_'), as these are normally involved in legitimate operations and could otherwise generate false positives. Machine accounts can be identified and excluded if the subject's username ends with a '$', a customary naming convention for such accounts.\n\nBe aware that legitimate administrative activities, such as configuring new users, might trigger this detection, which could lead to potential false positives.\n\nBy focusing on these criteria, the aim is to pinpoint access attempts to domain user objects that are not initiated by recognized system processes or machine accounts, indicating a possible unauthorized access or reconnaissance activity by an attacker trying to explore or compromise domain user accounts. This approach plays a crucial role in safeguarding against tactics and techniques related to unauthorized access, lateral movement, and domain discovery.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "access to a domain user from a non-machine account",
      "answer": "In order to detect access to a domain user from a non-machine account, you should focus on monitoring security logs from Windows systems. Specifically, look for event ID 4662, which signals an attempt to access an object. The object type of interest is identified by its globally unique identifier (GUID) 'bf967aba-0de6-11d0-a285-00aa003049e2', which corresponds to user objects in Windows. This means the detection targets situations where someone is accessing properties of a user object within the domain.\n\nHowever, it's important to exclude events generated by machine accounts and specific system accounts used by Microsoft services (like those starting with 'MSOL_'), as these are normally involved in legitimate operations and could otherwise generate false positives. Machine accounts can be identified and excluded if the subject's username ends with a '$', a customary naming convention for such accounts.\n\nBe aware that legitimate administrative activities, such as configuring new users, might trigger this detection, which could lead to potential false positives.\n\nBy focusing on these criteria, the aim is to pinpoint access attempts to domain user objects that are not initiated by recognized system processes or machine accounts, indicating a possible unauthorized access or reconnaissance activity by an attacker trying to explore or compromise domain user accounts. This approach plays a crucial role in safeguarding against tactics and techniques related to unauthorized access, lateral movement, and domain discovery."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential suspicious run-only executions compiled using OSACompile",
    "context": "",
    "output": "In order to detect potential suspicious run-only executions compiled using OSACompile, you should monitor process creation logs on macOS systems for instances where the command line contains 'osacompile', along with the flags ' -x ' and ' -e '. This specific combination of command and flags indicates an attempt to compile scripts in a manner that could be utilized for obfuscation or malicious purposes, suggesting a run-only execution which is harder to analyze and reverse-engineer. Pay close attention to the CommandLine field in the logs to catch such activities. Be aware that due to the nature of the detection, there might be instances where legitimate use triggers an alert, although such false positives are not specifically known. The severity level for this activity is considered high, underscoring the importance of monitoring for these specific command line parameters.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential suspicious run-only executions compiled using OSACompile",
      "answer": "In order to detect potential suspicious run-only executions compiled using OSACompile, you should monitor process creation logs on macOS systems for instances where the command line contains 'osacompile', along with the flags ' -x ' and ' -e '. This specific combination of command and flags indicates an attempt to compile scripts in a manner that could be utilized for obfuscation or malicious purposes, suggesting a run-only execution which is harder to analyze and reverse-engineer. Pay close attention to the CommandLine field in the logs to catch such activities. Be aware that due to the nature of the detection, there might be instances where legitimate use triggers an alert, although such false positives are not specifically known. The severity level for this activity is considered high, underscoring the importance of monitoring for these specific command line parameters."
    }
  },
  {
    "instruction": "Please help me detect the following: using WorkFolders.exe to execute an arbitrary control.exe",
    "context": "",
    "output": "Sure!\nIn order to detect using WorkFolders.exe to execute an arbitrary control.exe, you should: Look for instances where a process creation event occurs on Windows systems, specifically focusing on the execution of 'control.exe' that originates from 'WorkFolders.exe'. However, it's important to exclude any occurrences where 'control.exe' is being executed from its standard location at 'C:\\Windows\\System32\\control.exe' to reduce false positives. Although instances where this pattern is observed might sometimes relate to legitimate usage of the Windows Work Folders feature, such activity is considered suspicious and merits a high alert level due to its potential misuse for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "using WorkFolders.exe to execute an arbitrary control.exe",
      "answer": "In order to detect using WorkFolders.exe to execute an arbitrary control.exe, you should: Look for instances where a process creation event occurs on Windows systems, specifically focusing on the execution of 'control.exe' that originates from 'WorkFolders.exe'. However, it's important to exclude any occurrences where 'control.exe' is being executed from its standard location at 'C:\\Windows\\System32\\control.exe' to reduce false positives. Although instances where this pattern is observed might sometimes relate to legitimate usage of the Windows Work Folders feature, such activity is considered suspicious and merits a high alert level due to its potential misuse for malicious purposes."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect priv users or groups recon based on 4661 eventid and known privileged users or groups SIDs",
    "context": "",
    "output": "Sure!\nIn order to detect privilege users or groups reconnaissance based on event ID 4661 and known privileged users or groups SIDs, you should: \n\nMonitor Windows Security logs specifically for event ID 4661, which is crucial in identifying access attempts to Security Accounts Manager (SAM) objects. This event ID is fired when there's an attempt to access SAM objects, like user and group information, on your Domain Controllers. The SAM database contains sensitive security information about user accounts and security groups, making it a prime target for attackers looking to elevate privileges or perform reconnaissance within a network.\n\nFocus on cases where the ObjectType involved in the event are 'SAM_USER' or 'SAM_GROUP'. These object types indicate that the operation was specifically targeted towards user or group objects within the SAM, which could point towards an adversary's attempt to gather information or modify these entities for malicious purposes.\n\nAdditionally, pay attention to access attempts involving object names that end with specific identifiers such as '-512', '-502', '-500', '-505', '-519', '-520', '-544', '-551', '-555', or contain the string 'admin'. These identifiers and strings are associated with highly privileged accounts and groups within a Windows environment, such as domain administrators, built-in administrator accounts, and other critical system and service accounts. Access attempts to objects bearing these names should be scrutinized as they may indicate targeted reconnaissance or attack activity aimed at high-value targets.\n\nImplement filters to exclude events triggered by objects with subject user names ending with a '$', as these are typically associated with computer accounts rather than human users, which might reduce the number of false positives associated with routine or automated system activities.\n\nBy focusing on these detection strategies, high-risk activities such as unauthorized reconnaissance or privilege escalation attempts can be identified, allowing for quick response and mitigation. Keep in mind, observing these activities at a high frequency or in a suspicious context should be treated with heightened scrutiny, as legitimate administrative activities might occasionally align with these indicators. Regular review and adjustment of monitoring criteria based on the operational context and observed attack patterns are essential for maintaining effective detection capabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect priv users or groups recon based on 4661 eventid and known privileged users or groups SIDs",
      "answer": "In order to detect privilege users or groups reconnaissance based on event ID 4661 and known privileged users or groups SIDs, you should: \n\nMonitor Windows Security logs specifically for event ID 4661, which is crucial in identifying access attempts to Security Accounts Manager (SAM) objects. This event ID is fired when there's an attempt to access SAM objects, like user and group information, on your Domain Controllers. The SAM database contains sensitive security information about user accounts and security groups, making it a prime target for attackers looking to elevate privileges or perform reconnaissance within a network.\n\nFocus on cases where the ObjectType involved in the event are 'SAM_USER' or 'SAM_GROUP'. These object types indicate that the operation was specifically targeted towards user or group objects within the SAM, which could point towards an adversary's attempt to gather information or modify these entities for malicious purposes.\n\nAdditionally, pay attention to access attempts involving object names that end with specific identifiers such as '-512', '-502', '-500', '-505', '-519', '-520', '-544', '-551', '-555', or contain the string 'admin'. These identifiers and strings are associated with highly privileged accounts and groups within a Windows environment, such as domain administrators, built-in administrator accounts, and other critical system and service accounts. Access attempts to objects bearing these names should be scrutinized as they may indicate targeted reconnaissance or attack activity aimed at high-value targets.\n\nImplement filters to exclude events triggered by objects with subject user names ending with a '$', as these are typically associated with computer accounts rather than human users, which might reduce the number of false positives associated with routine or automated system activities.\n\nBy focusing on these detection strategies, high-risk activities such as unauthorized reconnaissance or privilege escalation attempts can be identified, allowing for quick response and mitigation. Keep in mind, observing these activities at a high frequency or in a suspicious context should be treated with heightened scrutiny, as legitimate administrative activities might occasionally align with these indicators. Regular review and adjustment of monitoring criteria based on the operational context and observed attack patterns are essential for maintaining effective detection capabilities."
    }
  },
  {
    "instruction": "Please help me detect the following: scheduled task creations that have suspicious action command and folder combinations",
    "context": "",
    "output": "Sure!\nIn order to detect scheduled task creations that have suspicious action command and folder combinations, you should look for events where the Windows process creation log indicates the usage of the Task Scheduler tool (`schtasks.exe`), specifically focusing on instances where tasks are being created (`/create` command line argument). Further scrutiny is necessary if the command line includes calls to command processors or scripting interfaces such as PowerShell (`powershell`, `pwsh`) or Command Prompt (`cmd /c`, `cmd /k`, `cmd /r`, `cmd.exe /c`, `cmd.exe /k`, `cmd.exe /r`). Additionally, pay special attention when the commands reference critical system folders like `C:\\ProgramData\\` or use the environmental variable `%ProgramData%`. The detection of these elements combined points toward a high possibility of a malicious scheduled task being established, especially when found together in the process creation logs under the Windows operating system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scheduled task creations that have suspicious action command and folder combinations",
      "answer": "In order to detect scheduled task creations that have suspicious action command and folder combinations, you should look for events where the Windows process creation log indicates the usage of the Task Scheduler tool (`schtasks.exe`), specifically focusing on instances where tasks are being created (`/create` command line argument). Further scrutiny is necessary if the command line includes calls to command processors or scripting interfaces such as PowerShell (`powershell`, `pwsh`) or Command Prompt (`cmd /c`, `cmd /k`, `cmd /r`, `cmd.exe /c`, `cmd.exe /k`, `cmd.exe /r`). Additionally, pay special attention when the commands reference critical system folders like `C:\\ProgramData\\` or use the environmental variable `%ProgramData%`. The detection of these elements combined points toward a high possibility of a malicious scheduled task being established, especially when found together in the process creation logs under the Windows operating system."
    }
  },
  {
    "instruction": "Explain how should I detect the following: remote RPC calls to create or execute a scheduled task via SASec",
    "context": "",
    "output": "In order to detect remote RPC calls to create or execute a scheduled task via SASec, you should: Monitor the application logs specifically from RPC firewalls. It is essential to have the RPC Firewall installed and configured to audit and block processes matching the UUID \"378e52b0-c0a9-11cf-822d-00aa0051e40f\". Pay particular attention to logs tagged as \"RPCFW\" within the Event Log. Look for events with the ID of 3, which signifies an interaction with the targeted interface UUID. Specifically, watch for operation numbers 0 and 1, as these are indicative of the creation or execution of a scheduled task through remote procedure calls. Be aware that while the detection level is set to high, there may be unknown false positives, indicating the potential for legitimate activities being flagged. Understanding and monitoring for these specific attributes will aid in identifying suspicious activities associated with scheduling tasks remotely, which could be a sign of malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls to create or execute a scheduled task via SASec",
      "answer": "In order to detect remote RPC calls to create or execute a scheduled task via SASec, you should: Monitor the application logs specifically from RPC firewalls. It is essential to have the RPC Firewall installed and configured to audit and block processes matching the UUID \"378e52b0-c0a9-11cf-822d-00aa0051e40f\". Pay particular attention to logs tagged as \"RPCFW\" within the Event Log. Look for events with the ID of 3, which signifies an interaction with the targeted interface UUID. Specifically, watch for operation numbers 0 and 1, as these are indicative of the creation or execution of a scheduled task through remote procedure calls. Be aware that while the detection level is set to high, there may be unknown false positives, indicating the potential for legitimate activities being flagged. Understanding and monitoring for these specific attributes will aid in identifying suspicious activities associated with scheduling tasks remotely, which could be a sign of malicious intent."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of Setres.exe to set the screen resolution and then potentially launch a file named \"choice\" (with any executable extension such as \".cmd\" or \".exe\") from the current execution path",
    "context": "",
    "output": "In order to detect the use of Setres.exe to set the screen resolution and then potentially launch a file named \"choice\" (with any executable extension such as \".cmd\" or \".exe\") from the current execution path, you should: Look for instances within the Windows operating environment where processes are created in such a manner that Setres.exe acts as a parent process, and subsequently, a process named \"choice\" (irrespective of its file extension) is initiated. This detection focuses on monitoring process creation logs to identify the sequence where Setres.exe is utilized, possibly to alter screen resolution settings as a precursor activity, followed by the execution of a \"choice\" executable, which could be indicative of unauthorized or malicious operations. Be mindful that there may be legitimate scenarios where Setres is used; therefore, not all detections should be considered malicious without additional context. The severity level of this rule is deemed medium, suggesting that while potentially indicative of suspicious activity, it may not always represent a critical security threat without further evidence of malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Setres.exe to set the screen resolution and then potentially launch a file named \"choice\" (with any executable extension such as \".cmd\" or \".exe\") from the current execution path",
      "answer": "In order to detect the use of Setres.exe to set the screen resolution and then potentially launch a file named \"choice\" (with any executable extension such as \".cmd\" or \".exe\") from the current execution path, you should: Look for instances within the Windows operating environment where processes are created in such a manner that Setres.exe acts as a parent process, and subsequently, a process named \"choice\" (irrespective of its file extension) is initiated. This detection focuses on monitoring process creation logs to identify the sequence where Setres.exe is utilized, possibly to alter screen resolution settings as a precursor activity, followed by the execution of a \"choice\" executable, which could be indicative of unauthorized or malicious operations. Be mindful that there may be legitimate scenarios where Setres is used; therefore, not all detections should be considered malicious without additional context. The severity level of this rule is deemed medium, suggesting that while potentially indicative of suspicious activity, it may not always represent a critical security threat without further evidence of malicious intent."
    }
  },
  {
    "instruction": "Please help me detect the following: deletion of local audit logs",
    "context": "",
    "output": "Sure!\nIn order to detect the deletion of local audit logs, you should: focus on monitoring macOS process creation logs for instances where command line utilities typically used for file deletion, such as '/rm', '/unlink', and '/shred', are executed. Pay special attention to commands that target directories associated with logging, specifically '/var/log' and paths that include both '/Users/' and '/Library/Logs/'. The presence of these commands, especially when coupled, is indicative of a user attempting to erase local audit logs, which can be a sign of malicious activity aimed at covering tracks or undermining system auditing capabilities. Be mindful that legitimate administration activities might also trigger these detections, so additional context and investigation are recommended to differentiate between harmful actions and benign administrative tasks. The security level for this kind of activity is considered to be medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deletion of local audit logs",
      "answer": "In order to detect the deletion of local audit logs, you should: focus on monitoring macOS process creation logs for instances where command line utilities typically used for file deletion, such as '/rm', '/unlink', and '/shred', are executed. Pay special attention to commands that target directories associated with logging, specifically '/var/log' and paths that include both '/Users/' and '/Library/Logs/'. The presence of these commands, especially when coupled, is indicative of a user attempting to erase local audit logs, which can be a sign of malicious activity aimed at covering tracks or undermining system auditing capabilities. Be mindful that legitimate administration activities might also trigger these detections, so additional context and investigation are recommended to differentiate between harmful actions and benign administrative tasks. The security level for this kind of activity is considered to be medium."
    }
  },
  {
    "instruction": "Please help me detect the following: renaming of file while deletion with SDelete tool.",
    "context": "",
    "output": "Sure!\nIn order to detect renaming of file while deletion with SDelete tool, you should: Monitor Windows security logs for events with IDs 4656, 4663, and 4658 that involve the access or manipulation of files ending with '.AAA' or '.ZZZ'. These specific event IDs are indicative of attempts to handle files - opening them, operating upon them, or closing them after usage, which could be suggestive of a file being renamed in the process of deletion, particularly a technique that might be utilized by the SDelete tool. This observation is crucial for identifying potentially malicious activities that are attempting to obscure or remove traces of files, a tactic often employed to evade detection or hinder forensic analysis. Be aware that there might be legitimate uses of SDelete that can generate similar log events; hence, not all detections necessarily represent malicious activity and should be investigated accordingly. The detection operates at a medium level of urgency, indicating a balanced approach to both sensitivity and specificity in identifying potential security incidents.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "renaming of file while deletion with SDelete tool.",
      "answer": "In order to detect renaming of file while deletion with SDelete tool, you should: Monitor Windows security logs for events with IDs 4656, 4663, and 4658 that involve the access or manipulation of files ending with '.AAA' or '.ZZZ'. These specific event IDs are indicative of attempts to handle files - opening them, operating upon them, or closing them after usage, which could be suggestive of a file being renamed in the process of deletion, particularly a technique that might be utilized by the SDelete tool. This observation is crucial for identifying potentially malicious activities that are attempting to obscure or remove traces of files, a tactic often employed to evade detection or hinder forensic analysis. Be aware that there might be legitimate uses of SDelete that can generate similar log events; hence, not all detections necessarily represent malicious activity and should be investigated accordingly. The detection operates at a medium level of urgency, indicating a balanced approach to both sensitivity and specificity in identifying potential security incidents."
    }
  },
  {
    "instruction": "How to detect: programs on a Windows system that should not write scripts to disk",
    "context": "",
    "output": "In order to detect programs on a Windows system that should not write scripts to disk, you should monitor file events within the operating system for specific behaviors. Focus on tracking when particular Windows executables and programs, sometimes associated with normal operations or known as Living off the Land Binaries (LOLBins), attempt to create or modify script files, such as PowerShell (.ps1), batch (.bat), Visual Basic (.vbs), Shell Command File (.scf), Windows Script File (.wsf), or Windows Script Host (.wsh) files. These executables include Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which under normal circumstances should not be used to drop executables. Additionally, pay attention to LOLBins like certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, mshta.exe, which are known to be misused to download or execute malicious code. Also, be wary of legitimate processes like AcroRd32.exe (Adobe Reader), RdrCEF.exe (Adobe Reader's cloud services), hh.exe (HTML Help executable), and finger.exe, as these should not typically be involved in script creation on disk. Such an activity can indicate malicious behavior, including the execution of unauthorized or harmful scripts, potentially part of an attack chain. The aim is to identify these unusual activities to prevent attacks that exploit legitimate functionalities for nefarious purposes, emphasizing the importance of vigilance in monitoring file creation events tied to these specific applications and scripts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "programs on a Windows system that should not write scripts to disk",
      "answer": "In order to detect programs on a Windows system that should not write scripts to disk, you should monitor file events within the operating system for specific behaviors. Focus on tracking when particular Windows executables and programs, sometimes associated with normal operations or known as Living off the Land Binaries (LOLBins), attempt to create or modify script files, such as PowerShell (.ps1), batch (.bat), Visual Basic (.vbs), Shell Command File (.scf), Windows Script File (.wsf), or Windows Script Host (.wsh) files. These executables include Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which under normal circumstances should not be used to drop executables. Additionally, pay attention to LOLBins like certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, mshta.exe, which are known to be misused to download or execute malicious code. Also, be wary of legitimate processes like AcroRd32.exe (Adobe Reader), RdrCEF.exe (Adobe Reader's cloud services), hh.exe (HTML Help executable), and finger.exe, as these should not typically be involved in script creation on disk. Such an activity can indicate malicious behavior, including the execution of unauthorized or harmful scripts, potentially part of an attack chain. The aim is to identify these unusual activities to prevent attacks that exploit legitimate functionalities for nefarious purposes, emphasizing the importance of vigilance in monitoring file creation events tied to these specific applications and scripts."
    }
  },
  {
    "instruction": "How to detect: There is an auto-elevated task called SilentCleanup located in %windir%\\system32\\cleanmgr.exe This can be abused to elevate any file with Administrator privileges without prompting UAC",
    "context": "",
    "output": "In order to detect attempts to exploit the auto-elevated task called SilentCleanup to elevate any file with Administrator privileges without prompting User Account Control (UAC), you should monitor Windows Registry modifications related to the environment variable settings. Specifically, pay attention to registry events where the target object ends with '\\Environment\\windir', indicating an operation related to the Windows directory environment variable. Such modifications should also contain the presence of '&REM' in the details of the registry operation, which could suggest an attempt to manipulate command sequences in a manner that's typically unusual for regular system or application functionalities. Further, ensure that these detections are scoped to events where the registry value is being set (EventType: SetValue), as this is indicative of an attempt to change environment variables or paths.\n\nIt is important to maintain a high level of scrutiny for these activities due to their association with elevation of privilege tactics without the need for user interaction, specifically targeting the SilentCleanup task for malicious elevation. While false positives are unknown, the context and behavior should be analyzed carefully to differentiate between legitimate system operations and potential abuse scenarios.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "There is an auto-elevated task called SilentCleanup located in %windir%\\system32\\cleanmgr.exe This can be abused to elevate any file with Administrator privileges without prompting UAC",
      "answer": "In order to detect attempts to exploit the auto-elevated task called SilentCleanup to elevate any file with Administrator privileges without prompting User Account Control (UAC), you should monitor Windows Registry modifications related to the environment variable settings. Specifically, pay attention to registry events where the target object ends with '\\Environment\\windir', indicating an operation related to the Windows directory environment variable. Such modifications should also contain the presence of '&REM' in the details of the registry operation, which could suggest an attempt to manipulate command sequences in a manner that's typically unusual for regular system or application functionalities. Further, ensure that these detections are scoped to events where the registry value is being set (EventType: SetValue), as this is indicative of an attempt to change environment variables or paths.\n\nIt is important to maintain a high level of scrutiny for these activities due to their association with elevation of privilege tactics without the need for user interaction, specifically targeting the SilentCleanup task for malicious elevation. While false positives are unknown, the context and behavior should be analyzed carefully to differentiate between legitimate system operations and potential abuse scenarios."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creating PFX files. This could be an indicator of an adversary exporting a local certificate to a PFX file.",
    "context": "",
    "output": "In order to detect a general indication of an adversary exporting a local certificate to a PFX file, you should monitor Windows file event logs for the creation of '.pfx' files, which are typically used for storing certificates. Specifically, you should look for any instances where the target filename ends with '.pfx', excluding instances where the target filename contains both '\\Templates\\Windows\\Windows_TemporaryKey.pfx' and '\\CMake\\', as these are considered common legitimate uses of PFX files, particularly by system administrators managing certificates. This approach is set at a medium alert level due to potential false positives, but it's crucial for identifying potential malicious activity related to the misuse of certificate exportation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creating PFX files. This could be an indicator of an adversary exporting a local certificate to a PFX file.",
      "answer": "In order to detect a general indication of an adversary exporting a local certificate to a PFX file, you should monitor Windows file event logs for the creation of '.pfx' files, which are typically used for storing certificates. Specifically, you should look for any instances where the target filename ends with '.pfx', excluding instances where the target filename contains both '\\Templates\\Windows\\Windows_TemporaryKey.pfx' and '\\CMake\\', as these are considered common legitimate uses of PFX files, particularly by system administrators managing certificates. This approach is set at a medium alert level due to potential false positives, but it's crucial for identifying potential malicious activity related to the misuse of certificate exportation."
    }
  },
  {
    "instruction": "Please help me detect the following: an executable in the users directory started from one of the Microsoft Office suite applications (Word, Excel, PowerPoint, Publisher, Visio)",
    "context": "",
    "output": "Sure!\nIn order to detect an executable in the users directory started from one of the Microsoft Office suite applications (Word, Excel, PowerPoint, Publisher, Visio), you should: Monitor the process creation events within Windows environments for instances where parent processes are identifiably part of the Microsoft Office suite, specifically Word, Excel, PowerPoint, Publisher, Visio, Access, or the Equation Editor. These parent processes are recognizable through their executable names ending with typical Office executables like WINWORD.EXE, EXCEL.EXE, POWERPNT.EXE, MSPUB.EXE, VISIO.EXE, MSACCESS.EXE, and EQNEDT32.EXE. You should ensure that the started (child) process is located within the C:\\users\\ directory and ends with '.exe', indicating an executable file. However, processes named Teams.exe should be excluded to minimize false positives. This specific attention should apply to processes where both conditions of being initiated by an Office application and ending with '.exe' in the users folder are met and do not involve specific exclusions such as Teams.exe. This will help in detecting potentially malicious activities where Office applications could be exploited to initiate unauthorized or malicious executables. Ensure to log the command line and parent command line data for further analysis, noting that there may be unknown scenarios leading to false positives, signifying a high importance level on such detections.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an executable in the users directory started from one of the Microsoft Office suite applications (Word, Excel, PowerPoint, Publisher, Visio)",
      "answer": "In order to detect an executable in the users directory started from one of the Microsoft Office suite applications (Word, Excel, PowerPoint, Publisher, Visio), you should: Monitor the process creation events within Windows environments for instances where parent processes are identifiably part of the Microsoft Office suite, specifically Word, Excel, PowerPoint, Publisher, Visio, Access, or the Equation Editor. These parent processes are recognizable through their executable names ending with typical Office executables like WINWORD.EXE, EXCEL.EXE, POWERPNT.EXE, MSPUB.EXE, VISIO.EXE, MSACCESS.EXE, and EQNEDT32.EXE. You should ensure that the started (child) process is located within the C:\\users\\ directory and ends with '.exe', indicating an executable file. However, processes named Teams.exe should be excluded to minimize false positives. This specific attention should apply to processes where both conditions of being initiated by an Office application and ending with '.exe' in the users folder are met and do not involve specific exclusions such as Teams.exe. This will help in detecting potentially malicious activities where Office applications could be exploited to initiate unauthorized or malicious executables. Ensure to log the command line and parent command line data for further analysis, noting that there may be unknown scenarios leading to false positives, signifying a high importance level on such detections."
    }
  },
  {
    "instruction": "How can I detect: SSTI attempts sent via GET requests in access logs",
    "context": "",
    "output": "In order to detect SSTI attempts sent via GET requests in access logs, you should monitor the access logs of web servers for specific patterns within GET requests that indicate an attempt to exploit Server-Side Template Injection (SSTI) vulnerabilities. These patterns consist of various encodings and method calls that are commonly used in SSTI attacks, including but not limited to '{{', '%7B%7B' (URL encoded '{{'), '${', '=$%7B', '<%=', '=%3C%25=', '@(', 'freemarker.template.utility.Execute', '.getClass().forName('javax.script.ScriptEngineManager')', and 'T(org.apache.commons.io.IOUtils)'. It is important to also include a filtering condition to exclude any GET requests that result in a 404 status code, as these might not be relevant for detecting successful SSTI exploitation attempts. However, be mindful of potential false positives, such as legitimate user searches within the website's search box that might inadvertently match these patterns, or the noise generated from internal vulnerability scanning tools. To mitigate these false positives, it might be beneficial to incorporate additional filters, like checking user agent strings and considering more HTTP response codes. Monitoring for these specific patterns is crucial, as it helps identify attackers attempting to leverage SSTI vulnerabilities, which is a high-severity concern owing to the potential for executing arbitrary code on the server, hence the high level of importance attached to detecting these attempts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "SSTI attempts sent via GET requests in access logs",
      "answer": "In order to detect SSTI attempts sent via GET requests in access logs, you should monitor the access logs of web servers for specific patterns within GET requests that indicate an attempt to exploit Server-Side Template Injection (SSTI) vulnerabilities. These patterns consist of various encodings and method calls that are commonly used in SSTI attacks, including but not limited to '{{', '%7B%7B' (URL encoded '{{'), '${', '=$%7B', '<%=', '=%3C%25=', '@(', 'freemarker.template.utility.Execute', '.getClass().forName('javax.script.ScriptEngineManager')', and 'T(org.apache.commons.io.IOUtils)'. It is important to also include a filtering condition to exclude any GET requests that result in a 404 status code, as these might not be relevant for detecting successful SSTI exploitation attempts. However, be mindful of potential false positives, such as legitimate user searches within the website's search box that might inadvertently match these patterns, or the noise generated from internal vulnerability scanning tools. To mitigate these false positives, it might be beneficial to incorporate additional filters, like checking user agent strings and considering more HTTP response codes. Monitoring for these specific patterns is crucial, as it helps identify attackers attempting to leverage SSTI vulnerabilities, which is a high-severity concern owing to the potential for executing arbitrary code on the server, hence the high level of importance attached to detecting these attempts."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect attacker collecting audio via SoundRecorder application.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect an attacker collecting audio via the SoundRecorder application, you should monitor for instances where the SoundRecorder.exe process is initiated with command-line arguments that include '/FILE'. This activity is indicative of the program being used, possibly for malicious purposes, to record and save audio files. Your detection efforts should focus on Windows systems, specifically looking into process creation logs for such activities. Be mindful, however, that there could be legitimate uses of this application by users trying to capture audio for non-malicious reasons. This scenario is tagged under tactics and techniques such as Collection and Capture Audio. The level of concern for these detections is considered medium, due to the potential for false positives related to legitimate use of the SoundRecorder by users.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect attacker collecting audio via SoundRecorder application.",
      "answer": "In order to detect an attacker collecting audio via the SoundRecorder application, you should monitor for instances where the SoundRecorder.exe process is initiated with command-line arguments that include '/FILE'. This activity is indicative of the program being used, possibly for malicious purposes, to record and save audio files. Your detection efforts should focus on Windows systems, specifically looking into process creation logs for such activities. Be mindful, however, that there could be legitimate uses of this application by users trying to capture audio for non-malicious reasons. This scenario is tagged under tactics and techniques such as Collection and Capture Audio. The level of concern for these detections is considered medium, due to the potential for false positives related to legitimate use of the SoundRecorder by users."
    }
  },
  {
    "instruction": "How to detect: suspicious Ruby on Rails exceptions that could indicate exploitation attempts",
    "context": "",
    "output": "In order to detect suspicious Ruby on Rails exceptions that could indicate exploitation attempts, you should: Monitor Ruby on Rails applications for specific exception messages that are commonly associated with malicious activities or misconfigurations. Specifically, look for logs containing any of the following exception keywords: ActionController::InvalidAuthenticityToken, ActionController::InvalidCrossOriginRequest, ActionController::MethodNotAllowed, ActionController::BadRequest, and ActionController::ParameterMissing. These exceptions could hint at various attack vectors, including but not limited to CSRF (Cross-Site Request Forgery) attacks, CORS (Cross-Origin Resource Sharing) policy violations, improper HTTP method usage, bad requests due to malformed syntax, and requests with missing parameters that could potentially disrupt application processing. It's important to consider that not all instances of these exceptions are indicative of malicious behavior; they could also stem from application bugs. Therefore, while these detections are set at a medium level of seriousness, each alert should be investigated to distinguish between actual exploitation attempts and benign errors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious Ruby on Rails exceptions that could indicate exploitation attempts",
      "answer": "In order to detect suspicious Ruby on Rails exceptions that could indicate exploitation attempts, you should: Monitor Ruby on Rails applications for specific exception messages that are commonly associated with malicious activities or misconfigurations. Specifically, look for logs containing any of the following exception keywords: ActionController::InvalidAuthenticityToken, ActionController::InvalidCrossOriginRequest, ActionController::MethodNotAllowed, ActionController::BadRequest, and ActionController::ParameterMissing. These exceptions could hint at various attack vectors, including but not limited to CSRF (Cross-Site Request Forgery) attacks, CORS (Cross-Origin Resource Sharing) policy violations, improper HTTP method usage, bad requests due to malformed syntax, and requests with missing parameters that could potentially disrupt application processing. It's important to consider that not all instances of these exceptions are indicative of malicious behavior; they could also stem from application bugs. Therefore, while these detections are set at a medium level of seriousness, each alert should be investigated to distinguish between actual exploitation attempts and benign errors."
    }
  },
  {
    "instruction": "Please help me detect the following: file indicators as seen used by UNC4841 during their Barracuda ESG zero day exploitation.",
    "context": "",
    "output": "Sure!\nIn order to detect file indicators as seen used by UNC4841 during their Barracuda ESG zero day exploitation, you should: monitor Linux systems for the creation or modification of specific files that have been associated with the attack. These files include scripts, executables, and other potentially malicious files that end with names like '/11111.tar', '/aacore.sh', '/appcheck.sh', among others, some of which are meant to run periodically via cron jobs (e.g., '/etc/cron.daily/core_check.sh', '/etc/cron.hourly/aacore.sh'). The detection focuses on the event logs related to file activities, particularly looking out for these known filenames. Considering these file activities are directly linked to the exploitation method used by UNC4841 and the low likelihood of false positives, the detection level is set high. This vigilance helps in identifying the tactics and techniques associated with the exploitation, aiding in timely response and mitigation efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "file indicators as seen used by UNC4841 during their Barracuda ESG zero day exploitation.",
      "answer": "In order to detect file indicators as seen used by UNC4841 during their Barracuda ESG zero day exploitation, you should: monitor Linux systems for the creation or modification of specific files that have been associated with the attack. These files include scripts, executables, and other potentially malicious files that end with names like '/11111.tar', '/aacore.sh', '/appcheck.sh', among others, some of which are meant to run periodically via cron jobs (e.g., '/etc/cron.daily/core_check.sh', '/etc/cron.hourly/aacore.sh'). The detection focuses on the event logs related to file activities, particularly looking out for these known filenames. Considering these file activities are directly linked to the exploitation method used by UNC4841 and the low likelihood of false positives, the detection level is set high. This vigilance helps in identifying the tactics and techniques associated with the exploitation, aiding in timely response and mitigation efforts."
    }
  },
  {
    "instruction": "How can I detect: potential LethalHTA technique where the \"mshta.exe\" is spwaned by an \"svchost.exe\" process",
    "context": "",
    "output": "In order to detect potential LethalHTA technique where the \"mshta.exe\" is spawned by an \"svchost.exe\" process, you should: Monitor for the creation of processes on Windows systems where the process \"mshta.exe\" is initiated by a parent process named \"svchost.exe\". This behavior is suspicious because \"mshta.exe\" is a legitimate Windows utility used to execute Microsoft HTML Applications (HTAs), and it's not common for it to be launched by \"svchost.exe\", a system process that hosts Windows services. Identifying such patterns is critical for the early detection of potential malicious activities associated with the LethalHTA technique, which can be used for executing scripts or loading malware. This observation should be treated with a high level of suspicion due to the unusual parent-child process relationship, even though there might be rare legitimate cases leading to false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential LethalHTA technique where the \"mshta.exe\" is spwaned by an \"svchost.exe\" process",
      "answer": "In order to detect potential LethalHTA technique where the \"mshta.exe\" is spawned by an \"svchost.exe\" process, you should: Monitor for the creation of processes on Windows systems where the process \"mshta.exe\" is initiated by a parent process named \"svchost.exe\". This behavior is suspicious because \"mshta.exe\" is a legitimate Windows utility used to execute Microsoft HTML Applications (HTAs), and it's not common for it to be launched by \"svchost.exe\", a system process that hosts Windows services. Identifying such patterns is critical for the early detection of potential malicious activities associated with the LethalHTA technique, which can be used for executing scripts or loading malware. This observation should be treated with a high level of suspicion due to the unusual parent-child process relationship, even though there might be rare legitimate cases leading to false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: wmiexec/dcomexec/atexec/smbexec from Impacket framework",
    "context": "",
    "output": "Sure!\nIn order to detect wmiexec/dcomexec/atexec/smbexec from Impacket framework, you should: monitor the creation of processes on Windows systems, paying special attention to specific parent-child process relationships and command line patterns that are indicative of these attack techniques. Look for instances where the parent process is 'wmiprvse.exe' signaling a potential use of wmiexec, 'mmc.exe' for possible dcomexec using MMC object, 'explorer.exe' for dcomexec with ShellBrowserWindow object, and 'services.exe' for smbexec scenario. These executables executing commands that include 'cmd.exe' combined with the parameters '/Q' and '/c', and specifically making network connections to the localhost address '\\\\\\\\127.0.0.1\\\\' followed by redirection '&1', are strong indicators of the described attack techniques being employed. \n\nAdditionally, watch for command line executions stemming from 'svchost.exe -k netsvcs' and 'taskeng.exe' as these may indicate the use of atexec on different versions of Windows (Windows 10 and Windows 7 respectively). These commands will also involve 'cmd.exe', use '/C' for command execution, attempt to write to 'Windows\\Temp\\' directory, and include '&1' in their command structure.\n\nMonitoring and analyzing these specific parent-child process relationships and command line arguments across the system with vigilance can strongly aid in the identification of suspicious activities that align with wmiexec, dcomexec, atexec, and smbexec attacks as part of the Impacket framework usage. This proactive surveillance is crucial, given the high threat level of such activities, albeit with a mindfulness towards the potential for false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "wmiexec/dcomexec/atexec/smbexec from Impacket framework",
      "answer": "In order to detect wmiexec/dcomexec/atexec/smbexec from Impacket framework, you should: monitor the creation of processes on Windows systems, paying special attention to specific parent-child process relationships and command line patterns that are indicative of these attack techniques. Look for instances where the parent process is 'wmiprvse.exe' signaling a potential use of wmiexec, 'mmc.exe' for possible dcomexec using MMC object, 'explorer.exe' for dcomexec with ShellBrowserWindow object, and 'services.exe' for smbexec scenario. These executables executing commands that include 'cmd.exe' combined with the parameters '/Q' and '/c', and specifically making network connections to the localhost address '\\\\\\\\127.0.0.1\\\\' followed by redirection '&1', are strong indicators of the described attack techniques being employed. \n\nAdditionally, watch for command line executions stemming from 'svchost.exe -k netsvcs' and 'taskeng.exe' as these may indicate the use of atexec on different versions of Windows (Windows 10 and Windows 7 respectively). These commands will also involve 'cmd.exe', use '/C' for command execution, attempt to write to 'Windows\\Temp\\' directory, and include '&1' in their command structure.\n\nMonitoring and analyzing these specific parent-child process relationships and command line arguments across the system with vigilance can strongly aid in the identification of suspicious activities that align with wmiexec, dcomexec, atexec, and smbexec attacks as part of the Impacket framework usage. This proactive surveillance is crucial, given the high threat level of such activities, albeit with a mindfulness towards the potential for false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: ADDInternals Cmdlet execution. A tool for administering Azure AD and Office 365. Which can be abused by threat actors to attack Azure AD or Office 365.",
    "context": "",
    "output": "In order to detect ADDInternals Cmdlet execution. A tool for administering Azure AD and Office 365, which can be abused by threat actors to attack Azure AD or Office 365, you should: \n\nMonitor for process creation logs in Windows that indicate the execution of PowerShell ('powershell.exe' or 'pwsh.exe') or loading of 'pwsh.dll'. Keep an eye out for processes that have 'PowerShell.Exe' or 'pwsh.dll' in their original filename. Additionally, scrutinize the command line arguments of these PowerShell executions for specific cmdlet usages that are part of ADDInternals, which is a toolkit for managing Azure AD and Office 365.\n\nLook specifically for command line invocations containing any of the following cmdlets, as these are indicative of attempts to use the ADDInternals toolkit: 'Add-AADInt', 'ConvertTo-AADInt', 'Disable-AADInt', 'Enable-AADInt', 'Export-AADInt', 'Get-AADInt', 'Grant-AADInt', 'Install-AADInt', 'Invoke-AADInt', 'Join-AADInt', 'New-AADInt', 'Open-AADInt', 'Read-AADInt', 'Register-AADInt', 'Remove-AADInt', 'Restore-AADInt', 'Search-AADInt', 'Send-AADInt', 'Set-AADInt', 'Start-AADInt', and 'Update-AADInt'. Each of these cmdlets serves different functions within the toolset, from adding and converting objects within Azure AD to enabling, disabling, and managing those objects.\n\nWhile legitimate administrative activities may sometimes involve these cmdlets, any detection should be considered with high caution due to the potential for misuse in attacks targeting Azure AD or Office 365 environments.\n\nThis approach focuses on identifying specific indicators of compromise by monitoring the tools and command lines used in potential attack scenarios against Azure AD and Office 365, critical components of many enterprise architectures.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "ADDInternals Cmdlet execution. A tool for administering Azure AD and Office 365. Which can be abused by threat actors to attack Azure AD or Office 365.",
      "answer": "In order to detect ADDInternals Cmdlet execution. A tool for administering Azure AD and Office 365, which can be abused by threat actors to attack Azure AD or Office 365, you should: \n\nMonitor for process creation logs in Windows that indicate the execution of PowerShell ('powershell.exe' or 'pwsh.exe') or loading of 'pwsh.dll'. Keep an eye out for processes that have 'PowerShell.Exe' or 'pwsh.dll' in their original filename. Additionally, scrutinize the command line arguments of these PowerShell executions for specific cmdlet usages that are part of ADDInternals, which is a toolkit for managing Azure AD and Office 365.\n\nLook specifically for command line invocations containing any of the following cmdlets, as these are indicative of attempts to use the ADDInternals toolkit: 'Add-AADInt', 'ConvertTo-AADInt', 'Disable-AADInt', 'Enable-AADInt', 'Export-AADInt', 'Get-AADInt', 'Grant-AADInt', 'Install-AADInt', 'Invoke-AADInt', 'Join-AADInt', 'New-AADInt', 'Open-AADInt', 'Read-AADInt', 'Register-AADInt', 'Remove-AADInt', 'Restore-AADInt', 'Search-AADInt', 'Send-AADInt', 'Set-AADInt', 'Start-AADInt', and 'Update-AADInt'. Each of these cmdlets serves different functions within the toolset, from adding and converting objects within Azure AD to enabling, disabling, and managing those objects.\n\nWhile legitimate administrative activities may sometimes involve these cmdlets, any detection should be considered with high caution due to the potential for misuse in attacks targeting Azure AD or Office 365 environments.\n\nThis approach focuses on identifying specific indicators of compromise by monitoring the tools and command lines used in potential attack scenarios against Azure AD and Office 365, critical components of many enterprise architectures."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.\nThe data may also be sent to an alternate network location from the main command and control server.\n",
    "context": "",
    "output": "In order to detect adversaries who may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel and may also send the data to an alternate network location from the main command and control server, you should monitor Windows PowerShell Script Block Logging for specific script activities. Focus on scripts that contain the use of 'Send-MailMessage', which indicates an attempt to send data out, possibly as a form of data exfiltration. However, you will need to exclude any findings where 'CmdletsToExport' appears within the script block text, as this may represent legitimate script usage. Through this methodology, scripts that could potentially be used in data theft by sending information through unsecured email methods can be singled out, bearing in mind to carefully consider legitimate scripts that might similarly use sending email functionalities. The level of threat for this type of detection is considered medium, suggesting that while not foolproof, it's a valuable component of a layered defense approach.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.\nThe data may also be sent to an alternate network location from the main command and control server.\n",
      "answer": "In order to detect adversaries who may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel and may also send the data to an alternate network location from the main command and control server, you should monitor Windows PowerShell Script Block Logging for specific script activities. Focus on scripts that contain the use of 'Send-MailMessage', which indicates an attempt to send data out, possibly as a form of data exfiltration. However, you will need to exclude any findings where 'CmdletsToExport' appears within the script block text, as this may represent legitimate script usage. Through this methodology, scripts that could potentially be used in data theft by sending information through unsecured email methods can be singled out, bearing in mind to carefully consider legitimate scripts that might similarly use sending email functionalities. The level of threat for this type of detection is considered medium, suggesting that while not foolproof, it's a valuable component of a layered defense approach."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of special strings/null bits in order to potentially bypass AMSI functionalities",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of special strings/null bits in order to potentially bypass AMSI functionalities, you should: focus on monitoring the process creation logs within Windows systems. Look for occurrences where the command line contains specific patterns, such as \"if(0){{{0}}}' -f $(0 -as [char]) +\", which indicates an attempt to execute commands or scripts that might include null bits or special strings designed to evade detection by the Anti-Malware Scan Interface (AMSI). Additionally, the presence of \"#<NULL>\" in the command line should be flagged as it suggests an explicit attempt to insert a null character, potentially as part of an attack strategy to bypass AMSI functionalities. It's important to treat these findings with caution as there may be unknown false positives. This analysis operates at a medium threat level and targets the identification of techniques aimed at undermining AMSI's ability to detect malware or malicious activity through obfuscation or evasion strategies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of special strings/null bits in order to potentially bypass AMSI functionalities",
      "answer": "In order to detect usage of special strings/null bits in order to potentially bypass AMSI functionalities, you should: focus on monitoring the process creation logs within Windows systems. Look for occurrences where the command line contains specific patterns, such as \"if(0){{{0}}}' -f $(0 -as [char]) +\", which indicates an attempt to execute commands or scripts that might include null bits or special strings designed to evade detection by the Anti-Malware Scan Interface (AMSI). Additionally, the presence of \"#<NULL>\" in the command line should be flagged as it suggests an explicit attempt to insert a null character, potentially as part of an attack strategy to bypass AMSI functionalities. It's important to treat these findings with caution as there may be unknown false positives. This analysis operates at a medium threat level and targets the identification of techniques aimed at undermining AMSI's ability to detect malware or malicious activity through obfuscation or evasion strategies."
    }
  },
  {
    "instruction": "Please help me detect the following: use of the Windows Update Client binary (wuauclt.exe) to proxy execute code.",
    "context": "",
    "output": "Sure!\nIn order to detect the use of the Windows Update Client binary (wuauclt.exe) to proxy execute code, you should: monitor the creation of processes on Windows systems, particularly focusing on cases where the process name ends with '\\wuauclt.exe' or has the original filename 'wuauclt.exe'. Additionally, pay close attention to the command line used to initiate these processes, especially if they contain the terms 'UpdateDeploymentProvider', '.dll', and 'RunHandlerComServer' all together, indicating the potential malicious use of wuauclt.exe for code execution. However, it's critical to exclude any command line that explicitly includes ' /UpdateDeploymentProvider UpdateDeploymentProvider.dll ' or ' wuaueng.dll ', as these are not considered part of the suspicious behavior. This method will help in identifying suspicious activities related to the misuse of the Windows Update Client binary for malicious purposes, with a high level of confidence in detecting potential threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of the Windows Update Client binary (wuauclt.exe) to proxy execute code.",
      "answer": "In order to detect the use of the Windows Update Client binary (wuauclt.exe) to proxy execute code, you should: monitor the creation of processes on Windows systems, particularly focusing on cases where the process name ends with '\\wuauclt.exe' or has the original filename 'wuauclt.exe'. Additionally, pay close attention to the command line used to initiate these processes, especially if they contain the terms 'UpdateDeploymentProvider', '.dll', and 'RunHandlerComServer' all together, indicating the potential malicious use of wuauclt.exe for code execution. However, it's critical to exclude any command line that explicitly includes ' /UpdateDeploymentProvider UpdateDeploymentProvider.dll ' or ' wuaueng.dll ', as these are not considered part of the suspicious behavior. This method will help in identifying suspicious activities related to the misuse of the Windows Update Client binary for malicious purposes, with a high level of confidence in detecting potential threats."
    }
  },
  {
    "instruction": "How can I detect: creation of WMI event subscription persistence method",
    "context": "",
    "output": "In order to detect creation of WMI event subscription persistence method, you should: Focus on monitoring Windows WMI event logs for specific event IDs that indicate the creation, modification, or deletion of WMI event subscriptions. The event IDs to look out for include 19, 20, and 21. These actions may signify an attempt to establish persistence on a system using WMI events, which can be a tactic employed by adversaries to maintain access to systems over long periods undetected. When observing these event IDs, it is essential to differentiate between legitimate use and potentially malicious activity by excluding known, vetted WMI event subscription uses within your network environment. This approach is pivotal in identifying unauthorized attempts to establish persistence, aligned with medium-severity level detection efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of WMI event subscription persistence method",
      "answer": "In order to detect creation of WMI event subscription persistence method, you should: Focus on monitoring Windows WMI event logs for specific event IDs that indicate the creation, modification, or deletion of WMI event subscriptions. The event IDs to look out for include 19, 20, and 21. These actions may signify an attempt to establish persistence on a system using WMI events, which can be a tactic employed by adversaries to maintain access to systems over long periods undetected. When observing these event IDs, it is essential to differentiate between legitimate use and potentially malicious activity by excluding known, vetted WMI event subscription uses within your network environment. This approach is pivotal in identifying unauthorized attempts to establish persistence, aligned with medium-severity level detection efforts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: This method triggers on rare Kerberos Failure Codes caused by manipulations of Kerberos messages",
    "context": "",
    "output": "In order to detect manipulations of Kerberos messages that trigger rare Kerberos Failure Codes, you should monitor for specific event IDs associated with Kerberos authentication attempts within Windows Security logs. These event IDs include 675 (TGT Request), 4768 (TGS Request), 4769 (Service Ticket Request), and 4771 (Kerberos Pre-authentication failed). Any occurrences of these events coupled with specific failure codes, such as '0x9' (Principal in request not found), '0xA', '0xB', '0xF' (Incorrect password or corrupted ticket), '0x10', and other codes up to '0x44' which indicate various issues ranging from malformed requests to protocol and policy violations, should be flagged. Pay attention to false positives which might arise from faulty legacy applications. This analysis is critical in identifying potential security breaches or attempts to compromise the integrity of the Kerberos authentication process.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This method triggers on rare Kerberos Failure Codes caused by manipulations of Kerberos messages",
      "answer": "In order to detect manipulations of Kerberos messages that trigger rare Kerberos Failure Codes, you should monitor for specific event IDs associated with Kerberos authentication attempts within Windows Security logs. These event IDs include 675 (TGT Request), 4768 (TGS Request), 4769 (Service Ticket Request), and 4771 (Kerberos Pre-authentication failed). Any occurrences of these events coupled with specific failure codes, such as '0x9' (Principal in request not found), '0xA', '0xB', '0xF' (Incorrect password or corrupted ticket), '0x10', and other codes up to '0x44' which indicate various issues ranging from malformed requests to protocol and policy violations, should be flagged. Pay attention to false positives which might arise from faulty legacy applications. This analysis is critical in identifying potential security breaches or attempts to compromise the integrity of the Kerberos authentication process."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the \"type\" command to download/upload data from WebDAV server",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the usage of the \"type\" command to download/upload data from a WebDAV server, you should monitor process creation logs on Windows systems. Specifically, look for instances where the command line includes usage of the \"type\" command in conjunction with redirection operators to or from a network location, indicative of data being uploaded or downloaded. An upload event is detected when the command line contains both 'type ' followed by a redirection (' > ') pointing to a network location (signified by two backslashes at the beginning '\\\\'). Conversely, a download event is identified when 'type ' is used to read data from a network location (again, prefixed with '\\\\') and then redirecting it (' > ') to a local destination. Since built-in CMD commands, like 'type', do not by themselves trigger process creation, the detection relies on these commands being executed with a \"/c\" command that triggers a new process. However, be aware that there could be instances that trigger false positives, which are currently unknown. The detection of this activity is assessed at a medium severity level, as it relates to techniques observed in the execution and command and control stages of an attack, specifically utilizing file transfer capabilities to exfiltrate or infiltrate data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"type\" command to download/upload data from WebDAV server",
      "answer": "In order to detect the usage of the \"type\" command to download/upload data from a WebDAV server, you should monitor process creation logs on Windows systems. Specifically, look for instances where the command line includes usage of the \"type\" command in conjunction with redirection operators to or from a network location, indicative of data being uploaded or downloaded. An upload event is detected when the command line contains both 'type ' followed by a redirection (' > ') pointing to a network location (signified by two backslashes at the beginning '\\\\'). Conversely, a download event is identified when 'type ' is used to read data from a network location (again, prefixed with '\\\\') and then redirecting it (' > ') to a local destination. Since built-in CMD commands, like 'type', do not by themselves trigger process creation, the detection relies on these commands being executed with a \"/c\" command that triggers a new process. However, be aware that there could be instances that trigger false positives, which are currently unknown. The detection of this activity is assessed at a medium severity level, as it relates to techniques observed in the execution and command and control stages of an attack, specifically utilizing file transfer capabilities to exfiltrate or infiltrate data."
    }
  },
  {
    "instruction": "How to detect: usage of 'Stop-Service' or 'Remove-Service' powershell cmdlet to disable AV services.\nAdversaries may disable security tools to avoid possible detection of their tools and activities by stopping antivirus service\n",
    "context": "",
    "output": "In order to detect usage of 'Stop-Service' or 'Remove-Service' powershell cmdlet to disable AV services, you should: monitor Windows process creation logs for command line executions that include usage of 'Stop-Service' or 'Remove-Service', especially when these commands are aimed at stopping or removing services associated with antivirus products like McAfee DLP Agent Service, Trend Micro Deep Security Manager, TMBMServer, Sophos, and Symantec. This monitoring process is crucial as adversaries may disable security tools to avoid possible detection of their tools and activities by stopping antivirus services. Relevant fields to be logged should include the computer name, user, the command line used, and the parent command line if applicable. While detecting these activities, it's important to note that there might be unknown cases that could lead to false positives, emphasizing the need for careful analysis. The detection level for these activities is considered high due to the potential impact on system security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of 'Stop-Service' or 'Remove-Service' powershell cmdlet to disable AV services.\nAdversaries may disable security tools to avoid possible detection of their tools and activities by stopping antivirus service\n",
      "answer": "In order to detect usage of 'Stop-Service' or 'Remove-Service' powershell cmdlet to disable AV services, you should: monitor Windows process creation logs for command line executions that include usage of 'Stop-Service' or 'Remove-Service', especially when these commands are aimed at stopping or removing services associated with antivirus products like McAfee DLP Agent Service, Trend Micro Deep Security Manager, TMBMServer, Sophos, and Symantec. This monitoring process is crucial as adversaries may disable security tools to avoid possible detection of their tools and activities by stopping antivirus services. Relevant fields to be logged should include the computer name, user, the command line used, and the parent command line if applicable. While detecting these activities, it's important to note that there might be unknown cases that could lead to false positives, emphasizing the need for careful analysis. The detection level for these activities is considered high due to the potential impact on system security."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Generic rule for SQL exceptions in Python according to PEP 249",
    "context": "",
    "output": "In order to detect generic SQL exceptions in Python applications as outlined in PEP 249, you should monitor application logs specifically from Python products. Look for the presence of specific keywords in these logs that indicate an SQL exception. The keywords to watch for include: 'DataError', 'IntegrityError', 'ProgrammingError', and 'OperationalError'. These keywords are indicative of various types of SQL errors that could signal either benign issues like application bugs or potentially malicious activities, such as SQL injection attempts.\n\nIt's important to note that the detection of these keywords in Python application logs is not conclusive evidence of an attack. False positives can occur, and one common source of these is bugs within the application itself. The risk level associated with detecting these keywords is considered medium, suggesting that while not all detections will be of malicious intent, they warrant further investigation to rule out or confirm suspicious activities. \n\nIn essence, by focusing on Python application logs and being alert to the specified keywords, you can identify SQL exceptions that may be indicative of attempted attacks following PEP 249 guidelines, while being mindful of the possibility of false positives due to application errors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Generic rule for SQL exceptions in Python according to PEP 249",
      "answer": "In order to detect generic SQL exceptions in Python applications as outlined in PEP 249, you should monitor application logs specifically from Python products. Look for the presence of specific keywords in these logs that indicate an SQL exception. The keywords to watch for include: 'DataError', 'IntegrityError', 'ProgrammingError', and 'OperationalError'. These keywords are indicative of various types of SQL errors that could signal either benign issues like application bugs or potentially malicious activities, such as SQL injection attempts.\n\nIt's important to note that the detection of these keywords in Python application logs is not conclusive evidence of an attack. False positives can occur, and one common source of these is bugs within the application itself. The risk level associated with detecting these keywords is considered medium, suggesting that while not all detections will be of malicious intent, they warrant further investigation to rule out or confirm suspicious activities. \n\nIn essence, by focusing on Python application logs and being alert to the specified keywords, you can identify SQL exceptions that may be indicative of attempted attacks following PEP 249 guidelines, while being mindful of the possibility of false positives due to application errors."
    }
  },
  {
    "instruction": "How can I detect: During exploitation of this vulnerability, two logs (Provider_Name:Microsoft-Windows-User Profiles Service) with EventID 1511 and 1515 (maybe lot of false positives with this event) are created. Moreover, it appears the directory \\Users\\TEMP is created may be created during the exploitation. Viewed on 2008 Server",
    "context": "",
    "output": "In order to detect exploitation of a vulnerability that generates two specific logs and potentially creates a temporary user directory during its exploitation process, you should monitor for specific events within Windows application logs. Detect attempts to exploit this vulnerability by focusing on Event ID 1511, which indicates that Windows cannot find the local profile and is logging the user on with a temporary profile. This event is logged by the Microsoft-Windows-User Profiles Service provider. It's important to note that these indicators can sometimes result in false positives, such as when user profiles become corrupted. More information on such false positives can be found in discussions about corrupted user profiles on Microsoft's TechNet. While monitoring these events is crucial, one must be cautious and verify that the detection is not merely a result of a benign issue like a corrupted user profile. This detection strategy is particularly aimed at environments running Windows Server 2008 or similar setups where the said logs and temporary directory creation behavior has been observed during exploitation attempts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "During exploitation of this vulnerability, two logs (Provider_Name:Microsoft-Windows-User Profiles Service) with EventID 1511 and 1515 (maybe lot of false positives with this event) are created. Moreover, it appears the directory \\Users\\TEMP is created may be created during the exploitation. Viewed on 2008 Server",
      "answer": "In order to detect exploitation of a vulnerability that generates two specific logs and potentially creates a temporary user directory during its exploitation process, you should monitor for specific events within Windows application logs. Detect attempts to exploit this vulnerability by focusing on Event ID 1511, which indicates that Windows cannot find the local profile and is logging the user on with a temporary profile. This event is logged by the Microsoft-Windows-User Profiles Service provider. It's important to note that these indicators can sometimes result in false positives, such as when user profiles become corrupted. More information on such false positives can be found in discussions about corrupted user profiles on Microsoft's TechNet. While monitoring these events is crucial, one must be cautious and verify that the detection is not merely a result of a benign issue like a corrupted user profile. This detection strategy is particularly aimed at environments running Windows Server 2008 or similar setups where the said logs and temporary directory creation behavior has been observed during exploitation attempts."
    }
  },
  {
    "instruction": "How can I detect: access to a protected_storage service over the network. Potential abuse of DPAPI to extract domain backup keys from Domain Controllers",
    "context": "",
    "output": "In order to detect access to a protected_storage service over the network, potentially indicating abuse of DPAPI to extract domain backup keys from Domain Controllers, you should: monitor Windows Security logs for event ID 5145, which signifies a network share object was accessed. Specifically, focus on instances where the ShareName includes 'IPC' and the RelativeTargetName matches 'protected_storage'. This activity signifies that an actor might be attempting to interact with the protected storage service over the network, potentially to misuse the Data Protection API (DPAPI) and extract valuable domain backup keys from a Domain Controller. This is considered a high-level threat, although it's important to be aware that not all occurrences might represent malicious activity \u2013 hence, some alerts might turn out to be false positives. Nevertheless, such attempts align with techniques related to credential access and could point towards an advanced actor's footprint in your network environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "access to a protected_storage service over the network. Potential abuse of DPAPI to extract domain backup keys from Domain Controllers",
      "answer": "In order to detect access to a protected_storage service over the network, potentially indicating abuse of DPAPI to extract domain backup keys from Domain Controllers, you should: monitor Windows Security logs for event ID 5145, which signifies a network share object was accessed. Specifically, focus on instances where the ShareName includes 'IPC' and the RelativeTargetName matches 'protected_storage'. This activity signifies that an actor might be attempting to interact with the protected storage service over the network, potentially to misuse the Data Protection API (DPAPI) and extract valuable domain backup keys from a Domain Controller. This is considered a high-level threat, although it's important to be aware that not all occurrences might represent malicious activity \u2013 hence, some alerts might turn out to be false positives. Nevertheless, such attempts align with techniques related to credential access and could point towards an advanced actor's footprint in your network environment."
    }
  },
  {
    "instruction": "Please help me detect the following: Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels.\nEnsure that an encryption is used for all sensitive information in transit. Ensure that an encrypted channels is used for all administrative account access.\n",
    "context": "",
    "output": "Sure!\nIn order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that encrypted channels are used for all administrative account access, you should monitor network traffic through firewall logs for communication over common ports associated with unencrypted services. Specifically, look for traffic destined to ports 8080, 21, 80, 23, 50000, 1521, 27017, 3306, 1433, 11211, 15672, 5900, 5901, 5902, 5903, 5904. These ports often correspond to services that might not use encryption by default, such as web servers (HTTP), FTP, Telnet, various databases, and other application-specific protocols. \n\nEffective detection should include verifying that actions related to this traffic are set to either forward, accept, or are marked with a numerical value like '2', which can denote an allowable action in certain firewall configurations. Furthermore, consider if the firewall marks the connection as not blocked (either not explicitly setting an action or by marking the connection as allowed). \n\nIt is crucial to be aware that some legitimate traffic to these ports may not represent a breach of sensitive information transmission policies, resulting in potential false positives. Thus, while monitoring for these conditions signifies potential policy violations, each alert should be scrutinized to confirm the nature of the transmitted data and the encryption status of the channel. Similarly, it is essential to ensure administrative account access and sensitive information travel exclusively through encrypted channels to prevent unauthorized access and data interception, reinforcing the organization's cybersecurity posture against espionage and data theft.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels.\nEnsure that an encryption is used for all sensitive information in transit. Ensure that an encrypted channels is used for all administrative account access.\n",
      "answer": "In order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that encrypted channels are used for all administrative account access, you should monitor network traffic through firewall logs for communication over common ports associated with unencrypted services. Specifically, look for traffic destined to ports 8080, 21, 80, 23, 50000, 1521, 27017, 3306, 1433, 11211, 15672, 5900, 5901, 5902, 5903, 5904. These ports often correspond to services that might not use encryption by default, such as web servers (HTTP), FTP, Telnet, various databases, and other application-specific protocols. \n\nEffective detection should include verifying that actions related to this traffic are set to either forward, accept, or are marked with a numerical value like '2', which can denote an allowable action in certain firewall configurations. Furthermore, consider if the firewall marks the connection as not blocked (either not explicitly setting an action or by marking the connection as allowed). \n\nIt is crucial to be aware that some legitimate traffic to these ports may not represent a breach of sensitive information transmission policies, resulting in potential false positives. Thus, while monitoring for these conditions signifies potential policy violations, each alert should be scrutinized to confirm the nature of the transmitted data and the encryption status of the channel. Similarly, it is essential to ensure administrative account access and sensitive information travel exclusively through encrypted channels to prevent unauthorized access and data interception, reinforcing the organization's cybersecurity posture against espionage and data theft."
    }
  },
  {
    "instruction": "Can you explain how to detect: keyboard preload installation with a suspicious keyboard layout, e.g. Chinese, Iranian or Vietnamese layout load in user session on systems maintained by US staff only",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the keyboard preload installation with a suspicious keyboard layout, e.g. Chinese, Iranian or Vietnamese layout load in user session on systems maintained by US staff only, you should monitor Windows registry changes specifically under the category of registry settings related to keyboard layout changes. Focus on the logging source that tracks changes in the registry, with particular attention to the \\Keyboard Layout\\Preload and \\Keyboard Layout\\Substitutes subkeys. You need a Sysmon configuration capable of monitoring these subkeys to successfully identify any suspicious activity.\n\nDetection should trigger on events where the registry value is set (EventType: SetValue) within the specified subkeys. Specifically, look for alterations that indicate the installation of Persian (Iranian) or Vietnamese keyboard layouts, represented by the details containing '00000429', '00050429', and '0000042a'. Such modifications can be indicative of malicious intent, especially in environments exclusively using United States keyboard layouts.\n\nBe aware of potential false positives which might arise from legitimate administrative actions or from users who genuinely use the specified keyboard layouts. The level of concern associated with such registry modifications is considered medium due to the valid scenarios where such changes might occur legitimately.\n\nThis detection strategy aligns with tracking unauthorized system changes and potential indicators of compromise that are associated with tactics and techniques of adversary behavior focusing on persistence and defense evasion strategies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "keyboard preload installation with a suspicious keyboard layout, e.g. Chinese, Iranian or Vietnamese layout load in user session on systems maintained by US staff only",
      "answer": "In order to detect the keyboard preload installation with a suspicious keyboard layout, e.g. Chinese, Iranian or Vietnamese layout load in user session on systems maintained by US staff only, you should monitor Windows registry changes specifically under the category of registry settings related to keyboard layout changes. Focus on the logging source that tracks changes in the registry, with particular attention to the \\Keyboard Layout\\Preload and \\Keyboard Layout\\Substitutes subkeys. You need a Sysmon configuration capable of monitoring these subkeys to successfully identify any suspicious activity.\n\nDetection should trigger on events where the registry value is set (EventType: SetValue) within the specified subkeys. Specifically, look for alterations that indicate the installation of Persian (Iranian) or Vietnamese keyboard layouts, represented by the details containing '00000429', '00050429', and '0000042a'. Such modifications can be indicative of malicious intent, especially in environments exclusively using United States keyboard layouts.\n\nBe aware of potential false positives which might arise from legitimate administrative actions or from users who genuinely use the specified keyboard layouts. The level of concern associated with such registry modifications is considered medium due to the valid scenarios where such changes might occur legitimately.\n\nThis detection strategy aligns with tracking unauthorized system changes and potential indicators of compromise that are associated with tactics and techniques of adversary behavior focusing on persistence and defense evasion strategies."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of \"git\" in order to clone a remote repository that contain suspicious keywords which might be suspicious",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of \"git\" in order to clone a remote repository that contains suspicious keywords which might be suspicious, you should: Monitor process creation events on Linux systems for any use of the \"git\" command, particularly those that involve cloning a repository. Pay special attention to command line arguments that contain the 'clone' keyword to identify repository cloning activities. Further scrutinize these git cloning operations for the presence of certain keywords in the command line that could indicate malicious intent. These keywords include 'exploit', 'Vulns', 'vulnerability', 'RCE' (Remote Code Execution), 'RemoteCodeExecution', 'Invoke-', 'CVE-' indicating specific known vulnerabilities, 'poc-' (proof of concept), 'ProofOfConcept', and names of known vulnerabilities such as 'proxyshell', 'log4shell', 'eternalblue', 'eternal-blue', and any that start with 'MS17-'. Events matching these criteria should be flagged for further investigation despite the possibility of false positives, treating the severity of these findings at a medium level. This approach helps in identifying suspicious activities related to the exploitation or investigation of vulnerabilities through the misuse of the git command on Linux systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"git\" in order to clone a remote repository that contain suspicious keywords which might be suspicious",
      "answer": "In order to detect execution of \"git\" in order to clone a remote repository that contains suspicious keywords which might be suspicious, you should: Monitor process creation events on Linux systems for any use of the \"git\" command, particularly those that involve cloning a repository. Pay special attention to command line arguments that contain the 'clone' keyword to identify repository cloning activities. Further scrutinize these git cloning operations for the presence of certain keywords in the command line that could indicate malicious intent. These keywords include 'exploit', 'Vulns', 'vulnerability', 'RCE' (Remote Code Execution), 'RemoteCodeExecution', 'Invoke-', 'CVE-' indicating specific known vulnerabilities, 'poc-' (proof of concept), 'ProofOfConcept', and names of known vulnerabilities such as 'proxyshell', 'log4shell', 'eternalblue', 'eternal-blue', and any that start with 'MS17-'. Events matching these criteria should be flagged for further investigation despite the possibility of false positives, treating the severity of these findings at a medium level. This approach helps in identifying suspicious activities related to the exploitation or investigation of vulnerabilities through the misuse of the git command on Linux systems."
    }
  },
  {
    "instruction": "How to detect: redirection of an alternate data stream (ADS) of / within a Windows command line session",
    "context": "",
    "output": "In order to detect the redirection of an alternate data stream (ADS) of / within a Windows command line session, you should: Focus on monitoring the creation of processes within the Windows operating system. Specifically, pay attention to instances where the command line interpreter (cmd.exe) is initiated. The key indicators to watch for involve command lines that include both a redirection operator ('>') and a colon (':'), which are characteristic of interacting with alternate data streams. However, it's important to exclude cases where the command line contains a space followed by a colon and a backslash (' :\\'), as these are not indicative of the specific activity we are concerned with. This approach aims to identify potential attempts to exploit or interact with alternate data streams in a manner that could be malicious, falling under medium risk level without known false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "redirection of an alternate data stream (ADS) of / within a Windows command line session",
      "answer": "In order to detect the redirection of an alternate data stream (ADS) of / within a Windows command line session, you should: Focus on monitoring the creation of processes within the Windows operating system. Specifically, pay attention to instances where the command line interpreter (cmd.exe) is initiated. The key indicators to watch for involve command lines that include both a redirection operator ('>') and a colon (':'), which are characteristic of interacting with alternate data streams. However, it's important to exclude cases where the command line contains a space followed by a colon and a backslash (' :\\'), as these are not indicative of the specific activity we are concerned with. This approach aims to identify potential attempts to exploit or interact with alternate data streams in a manner that could be malicious, falling under medium risk level without known false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious failed logins with different user accounts from a single source system",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious failed logins with different user accounts from a single source system, you should monitor Windows security logs for specific event patterns that indicate such activity. Focus on security events with the Event ID 4776, which relates to the validation of credentials against the domain controller. These events become particularly suspicious when more than three different user account login failures originate from the same workstation within a 24-hour period. This pattern suggests an attempt to gain unauthorized access by trying numerous username combinations, which is a common tactic used in brute force or password spray attacks.\n\nBe aware that certain environments, such as terminal servers, jump servers, and other multi-user systems including Citrix server farms, as well as workstations used by multiple users in quick succession, are prone to generating false positives for this detection strategy. These systems naturally have higher rates of failed login attempts due to their operational use case, where many users access a single system.\n\nConsidering these factors, deploying this detection method with a comprehension of its potential for false positives is crucial. Adjustments and exceptions might need to be made for systems that are identified as common sources of legitimate failed login attempts to fine-tune the accuracy of identifying suspicious activity. This approach aims to strike a balance between identifying malicious attempts to access systems without overwhelming security teams with false alarms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious failed logins with different user accounts from a single source system",
      "answer": "In order to detect suspicious failed logins with different user accounts from a single source system, you should monitor Windows security logs for specific event patterns that indicate such activity. Focus on security events with the Event ID 4776, which relates to the validation of credentials against the domain controller. These events become particularly suspicious when more than three different user account login failures originate from the same workstation within a 24-hour period. This pattern suggests an attempt to gain unauthorized access by trying numerous username combinations, which is a common tactic used in brute force or password spray attacks.\n\nBe aware that certain environments, such as terminal servers, jump servers, and other multi-user systems including Citrix server farms, as well as workstations used by multiple users in quick succession, are prone to generating false positives for this detection strategy. These systems naturally have higher rates of failed login attempts due to their operational use case, where many users access a single system.\n\nConsidering these factors, deploying this detection method with a comprehension of its potential for false positives is crucial. Adjustments and exceptions might need to be made for systems that are identified as common sources of legitimate failed login attempts to fine-tune the accuracy of identifying suspicious activity. This approach aims to strike a balance between identifying malicious attempts to access systems without overwhelming security teams with false alarms."
    }
  },
  {
    "instruction": "How to detect: Compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file.",
    "context": "",
    "output": "In order to compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file, you should: monitor process creation logs in Windows for instances where the command line execution includes both the use of 'diantz.exe' and the '.cab' file extension together. Furthermore, it's crucial to watch for command lines matching a regular expression pattern that indicates the use of a colon followed by any character except a backslash, which is a typical method for specifying Alternate Data Streams (ADS) in Windows file systems. Be advised that there's a substantial chance of encountering false positives with this detection strategy, and the risk level associated with this activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file.",
      "answer": "In order to compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file, you should: monitor process creation logs in Windows for instances where the command line execution includes both the use of 'diantz.exe' and the '.cab' file extension together. Furthermore, it's crucial to watch for command lines matching a regular expression pattern that indicates the use of a colon followed by any character except a backslash, which is a typical method for specifying Alternate Data Streams (ADS) in Windows file systems. Be advised that there's a substantial chance of encountering false positives with this detection strategy, and the risk level associated with this activity is considered medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: Hurricane Panda Activity",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Hurricane Panda Activity, you should monitor the creation of new processes on Windows systems for executing commands that involve adding a user to the local administrators group or running a file named 'Win64.exe'. Specifically, look for command lines that include all of the following keywords: 'localgroup', 'admin', and '/add'; or command lines that contain the string '\\Win64.exe'. This approach is aimed at identifying potential unauthorized attempts to gain elevated privileges or execute malicious software, both of which are tactics commonly employed by the Hurricane Panda threat group. Be aware that detections based on these criteria could lead to some false positives, although the potential impact of this threat warrants a high level of alertness.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Hurricane Panda Activity",
      "answer": "In order to detect Hurricane Panda Activity, you should monitor the creation of new processes on Windows systems for executing commands that involve adding a user to the local administrators group or running a file named 'Win64.exe'. Specifically, look for command lines that include all of the following keywords: 'localgroup', 'admin', and '/add'; or command lines that contain the string '\\Win64.exe'. This approach is aimed at identifying potential unauthorized attempts to gain elevated privileges or execute malicious software, both of which are tactics commonly employed by the Hurricane Panda threat group. Be aware that detections based on these criteria could lead to some false positives, although the potential impact of this threat warrants a high level of alertness."
    }
  },
  {
    "instruction": "Please help me detect the following: VB DLL's loaded by an office application. Which could indicate the presence of VBA Macros.",
    "context": "",
    "output": "Sure!\nIn order to detect VB DLLs loaded by an office application which could indicate the presence of VBA Macros, you should monitor for specific events related to the loading of image files in Windows environments. This involves watching for instances where Microsoft Office applications such as Excel, Publisher, OneNote, Outlook, PowerPoint, and Word are loading particular DLL files associated with Visual Basic for Applications (VBA), including VBE7.DLL, VBEUI.DLL, and VBE7INTL.DLL. Detection of such activities is critical as it might suggest that VBA Macros, potentially malicious, are being executed, an avenue often exploited by attackers for various malicious purposes. It is important, however, to consider the context in which these DLLs are loaded, as legitimate macro usage can also trigger these detection mechanisms. Therefore, adjustments may be necessary to minimize false positives, ensuring that legitimate business processes are not impeded while maintaining a high level of vigilance against potential threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "VB DLL's loaded by an office application. Which could indicate the presence of VBA Macros.",
      "answer": "In order to detect VB DLLs loaded by an office application which could indicate the presence of VBA Macros, you should monitor for specific events related to the loading of image files in Windows environments. This involves watching for instances where Microsoft Office applications such as Excel, Publisher, OneNote, Outlook, PowerPoint, and Word are loading particular DLL files associated with Visual Basic for Applications (VBA), including VBE7.DLL, VBEUI.DLL, and VBE7INTL.DLL. Detection of such activities is critical as it might suggest that VBA Macros, potentially malicious, are being executed, an avenue often exploited by attackers for various malicious purposes. It is important, however, to consider the context in which these DLLs are loaded, as legitimate macro usage can also trigger these detection mechanisms. Therefore, adjustments may be necessary to minimize false positives, ensuring that legitimate business processes are not impeded while maintaining a high level of vigilance against potential threats."
    }
  },
  {
    "instruction": "How can I detect: highly relevant Antivirus alert that reports a password dumper",
    "context": "",
    "output": "In order to detect a highly relevant Antivirus alert that reports a password dumper, you should monitor antivirus logs for alerts that report the usage of password dumper tools. Specifically, look for signatures that start with 'PWS' or contain specific keywords indicative of well-known password dumping utilities such as 'DumpCreds', 'Mimikatz', 'PWCrack', 'HTool/WCE', 'PSWTool', 'PWDump', 'SecurityTool', 'PShlSpy', 'Rubeus', 'Kekeo', 'LsassDump', 'Outflank', 'DumpLsass', 'SharpDump', 'PWSX', or 'PWS.'. These signatures are associated with tools and techniques designed to extract or manipulate passwords from systems or software, indicating a potential security threat.\n\nTo effectively detect such activities, focus on any alert generated by the antivirus under the specified conditions. The information most relevant to understanding the extent and specifics of the detection includes the file name involved in the detection and the user account under which the activity was initiated.\n\nDue to the critical nature of password dumpers in enabling further unauthorized access and lateral movement within a network, alerts fitting these criteria are considered critically important. However, false positives are unlikely, suggesting that any detection should be taken seriously and investigated promptly.\n\nBy focusing on these specific signature patterns and tool indicators, organizations can identify attempts to compromise credentials, aiding in the quick response to mitigate potential damage or unauthorized access.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "highly relevant Antivirus alert that reports a password dumper",
      "answer": "In order to detect a highly relevant Antivirus alert that reports a password dumper, you should monitor antivirus logs for alerts that report the usage of password dumper tools. Specifically, look for signatures that start with 'PWS' or contain specific keywords indicative of well-known password dumping utilities such as 'DumpCreds', 'Mimikatz', 'PWCrack', 'HTool/WCE', 'PSWTool', 'PWDump', 'SecurityTool', 'PShlSpy', 'Rubeus', 'Kekeo', 'LsassDump', 'Outflank', 'DumpLsass', 'SharpDump', 'PWSX', or 'PWS.'. These signatures are associated with tools and techniques designed to extract or manipulate passwords from systems or software, indicating a potential security threat.\n\nTo effectively detect such activities, focus on any alert generated by the antivirus under the specified conditions. The information most relevant to understanding the extent and specifics of the detection includes the file name involved in the detection and the user account under which the activity was initiated.\n\nDue to the critical nature of password dumpers in enabling further unauthorized access and lateral movement within a network, alerts fitting these criteria are considered critically important. However, false positives are unlikely, suggesting that any detection should be taken seriously and investigated promptly.\n\nBy focusing on these specific signature patterns and tool indicators, organizations can identify attempts to compromise credentials, aiding in the quick response to mitigate potential damage or unauthorized access."
    }
  },
  {
    "instruction": "Can you explain how to detect: SQL Injection attempts via GET requests in access logs",
    "context": "",
    "output": "Certainly!\n\nIn order to detect SQL Injection attempts via GET requests in access logs, you should monitor web server logs for specific patterns indicative of such attacks. Focus on logs from web servers as the primary source of data. Look for GET requests that contain certain keywords or phrases often used in SQL injection attacks. These include:\n\n- Explicit 'SELECT' statements, which might appear URL-encoded as '=select ', '=select%20', '=select(', and variations thereof.\n- 'UNION SELECT' statements, including 'UNION%20SELECT', 'UNION ALL SELECT', and 'UNION%20ALL%20SELECT', which attackers use to combine results from multiple SELECT queries.\n- Attempts to concatenate strings within queries, indicated by 'CONCAT(0x'.\n- Usage of 'ORDER BY' clauses, either in plain text ('order by ') or URL-encoded ('order%20by%20').\n- Probing for 'information_schema.tables', which is a metadata table containing the names and other details of all tables in a database.\n- The presence of 'group_concat(', 'table_schema', 'select%28sleep%2810%29', which can be indicators of attempts to extract data or induce time delays in response.\n- The version of the database server being queried ('@@version').\n- Attempts to exploit logical weaknesses, such as \"'1'='1\" or its URL-encoded version, and variations of 'or 1=1#' to bypass authentication or authorization checks.\n- Queries attempting to select all records, via 'select * ' or 'select%20*%20'.\n\nExclude log entries with a 404 status code (`sc-status: 404`) as these requests did not result in a page or resource being found, and may reduce the number of false positives.\n\nPay attention to the origin of the requests by logging fields such as 'client_ip', 'vhost' (virtual host), 'url', and 'response'. These details will be crucial for investigating and mitigating any detected attacks.\n\nBe aware that there could be false positives from legitimate actions, such as Java scripts and CSS file requests, legitimate user searches in website search boxes, and internal vulnerability scanning activities. To reduce false positives, consider refining the detection mechanism by excluding patterns typical for benign requests or by adding more filters like specific user agent strings and additional response codes.\n\nOverall, monitoring for these patterns at a high level of vigilance is critical for identifying potential SQL Injection attacks conducted through GET requests in web server access logs.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "SQL Injection attempts via GET requests in access logs",
      "answer": "In order to detect SQL Injection attempts via GET requests in access logs, you should monitor web server logs for specific patterns indicative of such attacks. Focus on logs from web servers as the primary source of data. Look for GET requests that contain certain keywords or phrases often used in SQL injection attacks. These include:\n\n- Explicit 'SELECT' statements, which might appear URL-encoded as '=select ', '=select%20', '=select(', and variations thereof.\n- 'UNION SELECT' statements, including 'UNION%20SELECT', 'UNION ALL SELECT', and 'UNION%20ALL%20SELECT', which attackers use to combine results from multiple SELECT queries.\n- Attempts to concatenate strings within queries, indicated by 'CONCAT(0x'.\n- Usage of 'ORDER BY' clauses, either in plain text ('order by ') or URL-encoded ('order%20by%20').\n- Probing for 'information_schema.tables', which is a metadata table containing the names and other details of all tables in a database.\n- The presence of 'group_concat(', 'table_schema', 'select%28sleep%2810%29', which can be indicators of attempts to extract data or induce time delays in response.\n- The version of the database server being queried ('@@version').\n- Attempts to exploit logical weaknesses, such as \"'1'='1\" or its URL-encoded version, and variations of 'or 1=1#' to bypass authentication or authorization checks.\n- Queries attempting to select all records, via 'select * ' or 'select%20*%20'.\n\nExclude log entries with a 404 status code (`sc-status: 404`) as these requests did not result in a page or resource being found, and may reduce the number of false positives.\n\nPay attention to the origin of the requests by logging fields such as 'client_ip', 'vhost' (virtual host), 'url', and 'response'. These details will be crucial for investigating and mitigating any detected attacks.\n\nBe aware that there could be false positives from legitimate actions, such as Java scripts and CSS file requests, legitimate user searches in website search boxes, and internal vulnerability scanning activities. To reduce false positives, consider refining the detection mechanism by excluding patterns typical for benign requests or by adding more filters like specific user agent strings and additional response codes.\n\nOverall, monitoring for these patterns at a high level of vigilance is critical for identifying potential SQL Injection attacks conducted through GET requests in web server access logs."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detection use of the command \"split\" to split files into parts and possible transfer.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of the command \"split\" to split files into parts and possible transfer, you should monitor audit logs generated by auditd on Linux systems. Specifically, look for logs where the type is marked as 'SYSCALL' and the command used is 'split'. This activity is characterized by its potential use in segmentation of files, likely in preparation for exfiltration. It's important to note, however, that this behavior could sometimes be part of legitimate administrative tasks, so the risk level associated with this detection is considered low. This monitoring and detection strategy is pertinent to understanding tactics and techniques related to Initial Access and Exfiltration, as splitting files could be a preparatory step for transferring sensitive information out of the network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detection use of the command \"split\" to split files into parts and possible transfer.",
      "answer": "In order to detect the use of the command \"split\" to split files into parts and possible transfer, you should monitor audit logs generated by auditd on Linux systems. Specifically, look for logs where the type is marked as 'SYSCALL' and the command used is 'split'. This activity is characterized by its potential use in segmentation of files, likely in preparation for exfiltration. It's important to note, however, that this behavior could sometimes be part of legitimate administrative tasks, so the risk level associated with this detection is considered low. This monitoring and detection strategy is pertinent to understanding tactics and techniques related to Initial Access and Exfiltration, as splitting files could be a preparatory step for transferring sensitive information out of the network."
    }
  },
  {
    "instruction": "How to detect: any GAC DLL being loaded by an Office Product",
    "context": "",
    "output": "In order to detect any GAC DLL being loaded by an Office Product, you should: Focus on monitoring the image load events in Windows environments. Specifically, keep an eye out for instances when executable files associated with Microsoft Office applications (such as Excel, Publisher, OneNote, Outlook, PowerPoint, and Word) are involved in loading dynamic-link libraries (DLLs) from the Global Assembly Cache (GAC) directory typically located at 'C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL'. This behavior can be indicative of malicious activity, as attackers may leverage this method to load potentially harmful code via Office applications, exploiting them as vectors for attack. Be aware of false positives which may arise from legitimate macro usage within these applications; adjustments to filtering criteria may be necessary to accommodate normal operations within your environment. This activity is regarded with a high level of concern due to its potential implications for security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "any GAC DLL being loaded by an Office Product",
      "answer": "In order to detect any GAC DLL being loaded by an Office Product, you should: Focus on monitoring the image load events in Windows environments. Specifically, keep an eye out for instances when executable files associated with Microsoft Office applications (such as Excel, Publisher, OneNote, Outlook, PowerPoint, and Word) are involved in loading dynamic-link libraries (DLLs) from the Global Assembly Cache (GAC) directory typically located at 'C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL'. This behavior can be indicative of malicious activity, as attackers may leverage this method to load potentially harmful code via Office applications, exploiting them as vectors for attack. Be aware of false positives which may arise from legitimate macro usage within these applications; adjustments to filtering criteria may be necessary to accommodate normal operations within your environment. This activity is regarded with a high level of concern due to its potential implications for security."
    }
  },
  {
    "instruction": "Explain how should I detect the following: remote PowerShell sessions",
    "context": "",
    "output": "In order to detect remote PowerShell sessions, you should: Monitor the classic PowerShell startup logs in Windows systems. Specifically, look for event records where the hostname is identified as 'ServerRemoteHost' and the host application involves 'wsmprovhost.exe'. This points to potential remote PowerShell activities. It's worth noting that there may be legitimate uses of remote PowerShell sessions, which could lead to false positives. Therefore, the severity level for this kind of activity is considered high, indicating the criticality of monitoring and investigating such occurrences for potential security implications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote PowerShell sessions",
      "answer": "In order to detect remote PowerShell sessions, you should: Monitor the classic PowerShell startup logs in Windows systems. Specifically, look for event records where the hostname is identified as 'ServerRemoteHost' and the host application involves 'wsmprovhost.exe'. This points to potential remote PowerShell activities. It's worth noting that there may be legitimate uses of remote PowerShell sessions, which could lead to false positives. Therefore, the severity level for this kind of activity is considered high, indicating the criticality of monitoring and investigating such occurrences for potential security implications."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the \"Add-AppxPackage\" or it's alias \"Add-AppPackage\" to install unsigned AppX packages",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of the \"Add-AppxPackage\" or its alias \"Add-AppPackage\" to install unsigned AppX packages, you should: Monitor Windows PowerShell script logs to identify any instances where scripts include the commands 'Add-AppPackage ' or 'Add-AppxPackage ', especially when these commands are combined with the flag ' -AllowUnsigned'. This monitoring is predicated on having Script Block Logging enabled to capture PowerShell script activities. It is important to be cautious as there may be legitimate reasons for installing unsigned packages, such as during testing phases. The risk level associated with this activity is deemed medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Add-AppxPackage\" or it's alias \"Add-AppPackage\" to install unsigned AppX packages",
      "answer": "In order to detect usage of the \"Add-AppxPackage\" or its alias \"Add-AppPackage\" to install unsigned AppX packages, you should: Monitor Windows PowerShell script logs to identify any instances where scripts include the commands 'Add-AppPackage ' or 'Add-AppxPackage ', especially when these commands are combined with the flag ' -AllowUnsigned'. This monitoring is predicated on having Script Block Logging enabled to capture PowerShell script activities. It is important to be cautious as there may be legitimate reasons for installing unsigned packages, such as during testing phases. The risk level associated with this activity is deemed medium."
    }
  },
  {
    "instruction": "Please help me detect the following: potential C2 communication related to Small Sieve malware",
    "context": "",
    "output": "Sure!\nIn order to detect potential C2 communication related to Small Sieve malware, you should monitor network traffic that passes through a proxy server for specific GET requests to the Telegram API. Specifically, look for requests to 'api.telegram.org' with the HTTP method 'GET'. These requests must contain both the 'chat_id=2090761833' and 'text=com/' in the URI. The presence of these exact parameters in a GET request could indicate an attempt to communicate with a command and control (C2) server associated with the Small Sieve malware. Given the context and specific parameters being used, such detection hints at a critical level of alert due to the unlikely nature of false positives. This method is instrumental in identifying possible command and control activities leveraged by adversaries, tagging the tactics and techniques to awareness and prevention strategies focused on mitigating such malicious communications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential C2 communication related to Small Sieve malware",
      "answer": "In order to detect potential C2 communication related to Small Sieve malware, you should monitor network traffic that passes through a proxy server for specific GET requests to the Telegram API. Specifically, look for requests to 'api.telegram.org' with the HTTP method 'GET'. These requests must contain both the 'chat_id=2090761833' and 'text=com/' in the URI. The presence of these exact parameters in a GET request could indicate an attempt to communicate with a command and control (C2) server associated with the Small Sieve malware. Given the context and specific parameters being used, such detection hints at a critical level of alert due to the unlikely nature of false positives. This method is instrumental in identifying possible command and control activities leveraged by adversaries, tagging the tactics and techniques to awareness and prevention strategies focused on mitigating such malicious communications."
    }
  },
  {
    "instruction": "Please help me detect the following: Virtual Network is modified or deleted in Azure.",
    "context": "",
    "output": "Sure!\nIn order to identify when a Virtual Network is modified or deleted in Azure, you should focus on monitoring activity logs in the Azure environment for specific operations. Look for logs where the operation name starts with either \"MICROSOFT.NETWORK/VIRTUALNETWORKGATEWAYS/\" or \"MICROSOFT.NETWORK/VIRTUALNETWORKS/\" and ends with either \"/WRITE\" or \"/DELETE\". These operations indicate modifications or deletions to Virtual Networks or Virtual Network Gateways.\n\nBe aware that modifications or deletions of virtual networks can occasionally be legitimate actions performed by system administrators. Therefore, it's important to verify the identity of the user, the user agent, and the hostname involved in these operations to ensure they are authorized for such changes within your environment. Operations performed by unfamiliar users or from unexpected sources should be investigated further. \n\nIf you recognize certain behaviors or activities as normal for your environment, leading to false positive alerts, you should consider exempting these from monitoring to reduce noise and focus on potential unauthorized or malicious actions.\n\nThis detection process is critical for maintaining the security and integrity of your virtual network infrastructure within Azure, aligning with understanding and mitigating tactics related to unauthorized access or modification of network resources.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Virtual Network is modified or deleted in Azure.",
      "answer": "In order to identify when a Virtual Network is modified or deleted in Azure, you should focus on monitoring activity logs in the Azure environment for specific operations. Look for logs where the operation name starts with either \"MICROSOFT.NETWORK/VIRTUALNETWORKGATEWAYS/\" or \"MICROSOFT.NETWORK/VIRTUALNETWORKS/\" and ends with either \"/WRITE\" or \"/DELETE\". These operations indicate modifications or deletions to Virtual Networks or Virtual Network Gateways.\n\nBe aware that modifications or deletions of virtual networks can occasionally be legitimate actions performed by system administrators. Therefore, it's important to verify the identity of the user, the user agent, and the hostname involved in these operations to ensure they are authorized for such changes within your environment. Operations performed by unfamiliar users or from unexpected sources should be investigated further. \n\nIf you recognize certain behaviors or activities as normal for your environment, leading to false positive alerts, you should consider exempting these from monitoring to reduce noise and focus on potential unauthorized or malicious actions.\n\nThis detection process is critical for maintaining the security and integrity of your virtual network infrastructure within Azure, aligning with understanding and mitigating tactics related to unauthorized access or modification of network resources."
    }
  },
  {
    "instruction": "How can I detect: non-interactive PowerShell activity by looking at the \"powershell\" process with a non-user GUI process such as \"explorer.exe\" as a parent.",
    "context": "",
    "output": "In order to detect non-interactive PowerShell activity by looking at the \"powershell\" process with a non-user GUI process such as \"explorer.exe\" as a parent, you should monitor for the creation of PowerShell processes (both 'powershell.exe' and 'pwsh.exe', as well as processes originating from 'PowerShell.EXE' and 'pwsh.dll' files) on Windows systems. It\u2019s crucial to identify and exclude instances where these PowerShell processes are legitimately spawned by common user interface processes like 'C:\\Windows\\explorer.exe', 'C:\\Windows\\System32\\CompatTelRunner.exe', or 'C:\\Windows\\SysWOW64\\explorer.exe', as these are often benign and linked to user-driven activity. Additionally, exclude PowerShell processes initiated during Windows updates or upgrades (usually from 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe') and those triggered by Visual Studio Code when a Shell is opened within the workspace, as indicated by a parent process path starting with 'C:\\Users\\' and ending with '\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe', especially if the parent command line contains ' --ms-enable-electron-run-as-node '. This approach helps in reducing false positives which are likely given the frequent administrative use of PowerShell in scripts. Focus on anomalies outside these parameters to catch potentially malicious non-interactive uses of PowerShell that could indicate an attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "non-interactive PowerShell activity by looking at the \"powershell\" process with a non-user GUI process such as \"explorer.exe\" as a parent.",
      "answer": "In order to detect non-interactive PowerShell activity by looking at the \"powershell\" process with a non-user GUI process such as \"explorer.exe\" as a parent, you should monitor for the creation of PowerShell processes (both 'powershell.exe' and 'pwsh.exe', as well as processes originating from 'PowerShell.EXE' and 'pwsh.dll' files) on Windows systems. It\u2019s crucial to identify and exclude instances where these PowerShell processes are legitimately spawned by common user interface processes like 'C:\\Windows\\explorer.exe', 'C:\\Windows\\System32\\CompatTelRunner.exe', or 'C:\\Windows\\SysWOW64\\explorer.exe', as these are often benign and linked to user-driven activity. Additionally, exclude PowerShell processes initiated during Windows updates or upgrades (usually from 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe') and those triggered by Visual Studio Code when a Shell is opened within the workspace, as indicated by a parent process path starting with 'C:\\Users\\' and ending with '\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe', especially if the parent command line contains ' --ms-enable-electron-run-as-node '. This approach helps in reducing false positives which are likely given the frequent administrative use of PowerShell in scripts. Focus on anomalies outside these parameters to catch potentially malicious non-interactive uses of PowerShell that could indicate an attack."
    }
  },
  {
    "instruction": "How to detect: usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver.\nWith this privilege, the user can dynamically load and unload device drivers or other code in to kernel mode.\nThis user right does not apply to Plug and Play device drivers.\nIf you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers.\nThis will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\n",
    "context": "",
    "output": "In order to \"Detects the usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver. With this privilege, the user can dynamically load and unload device drivers or other code into kernel mode. This user right does not apply to Plug and Play device drivers. If you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers. This will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\", you should:\n\nMonitor security logs from Windows systems for specific events indicating that the 'SeLoadDriverPrivilege' is being utilized. Specifically, look out for EventID 4673, which signifies an attempt to use this privilege. This privilege is crucial for operations like dynamically loading or unloading device drivers into kernel mode, an action which does not pertain to Plug and Play device drivers and should be scrutinized especially if not performed by privileged users or admins. \n\nIt is essential to filter these detection logs carefully. Exclude events associated with known and trusted processes, such as common Windows executables like Dism.exe, rundll32.exe, fltMC.exe, and several others including process executable paths related to the System32 directory, HelpPane, and the Windows explorer among the list. Moreover, any process names ending with tools commonly used for system monitoring or web browsers like Chrome, and applications like Microsoft Teams should be considered with caution as these might lead to false positives due to legitimate usage. Additionally, any process that starts with the path 'C:\\Program Files\\WindowsApps\\Microsoft' also warrants exclusion from the suspicious activity to minimize the detection of benign activities as malicious.\n\nHowever, despite these exclusions, it's pivotal to establish a comprehensive understanding of what is classified as normal within your environment. This could involve creating a baseline of legitimate tools that load drivers, including but not limited to, system internals, hardware monitoring tools like CPU-Z, antivirus software, and others. Special attention should be made to exclude users who have legitimate reasons to load drivers\u2014this aids in refining the detection process to ensure only potentially malicious activities are flagged.\n\nBy adopting such an approach, entities can effectively monitor and detect unauthorized or suspicious uses of the 'SeLoadDriverPrivilege', flagging attempts to load malicious kernel drivers while reducing false positives by considering legitimate software and authorized user activities. Establishing and maintaining a whitelist is crucial to differentiate between harmful and benign use of this privilege, thus enhancing the security posture against threats attempting to exploit kernel mode operations for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver.\nWith this privilege, the user can dynamically load and unload device drivers or other code in to kernel mode.\nThis user right does not apply to Plug and Play device drivers.\nIf you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers.\nThis will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\n",
      "answer": "In order to \"Detects the usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver. With this privilege, the user can dynamically load and unload device drivers or other code into kernel mode. This user right does not apply to Plug and Play device drivers. If you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers. This will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\", you should:\n\nMonitor security logs from Windows systems for specific events indicating that the 'SeLoadDriverPrivilege' is being utilized. Specifically, look out for EventID 4673, which signifies an attempt to use this privilege. This privilege is crucial for operations like dynamically loading or unloading device drivers into kernel mode, an action which does not pertain to Plug and Play device drivers and should be scrutinized especially if not performed by privileged users or admins. \n\nIt is essential to filter these detection logs carefully. Exclude events associated with known and trusted processes, such as common Windows executables like Dism.exe, rundll32.exe, fltMC.exe, and several others including process executable paths related to the System32 directory, HelpPane, and the Windows explorer among the list. Moreover, any process names ending with tools commonly used for system monitoring or web browsers like Chrome, and applications like Microsoft Teams should be considered with caution as these might lead to false positives due to legitimate usage. Additionally, any process that starts with the path 'C:\\Program Files\\WindowsApps\\Microsoft' also warrants exclusion from the suspicious activity to minimize the detection of benign activities as malicious.\n\nHowever, despite these exclusions, it's pivotal to establish a comprehensive understanding of what is classified as normal within your environment. This could involve creating a baseline of legitimate tools that load drivers, including but not limited to, system internals, hardware monitoring tools like CPU-Z, antivirus software, and others. Special attention should be made to exclude users who have legitimate reasons to load drivers\u2014this aids in refining the detection process to ensure only potentially malicious activities are flagged.\n\nBy adopting such an approach, entities can effectively monitor and detect unauthorized or suspicious uses of the 'SeLoadDriverPrivilege', flagging attempts to load malicious kernel drivers while reducing false positives by considering legitimate software and authorized user activities. Establishing and maintaining a whitelist is crucial to differentiate between harmful and benign use of this privilege, thus enhancing the security posture against threats attempting to exploit kernel mode operations for malicious purposes."
    }
  },
  {
    "instruction": "How can I detect: potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials",
    "context": "",
    "output": "In order to detect potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials, you should: Monitor registry settings adjustments within Windows environments, specifically focusing on events where the registry key in question is related to the UseLogonCredential setting within the WDigest path. Look for actions categorized as SetValue events indicating a change in the registry. The critical aspect to watch out for is the modification of the TargetObject ending with 'WDigest\\UseLogonCredential' where the details of the modification involve setting the DWORD value to (0x00000001), which effectively enables the storage of login credentials in clear-text. Given that such modifications could serve as a vector for compromising credentials, monitoring these registry changes is crucial. The primary log source for these observations is registry_set activities related to the Windows operating system. It is essential to remain vigilant for any actions fitting this description, albeit there may be rare instances where these modifications are not indicative of malicious intent, leading to potential false positives. Nonetheless, due to the high impact of enabling clear-text credential storage, such modifications are treated with a high level of suspicion. This detection process is aligned with understanding and preempting tactics and techniques that exploit credential access vulnerabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials",
      "answer": "In order to detect potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials, you should: Monitor registry settings adjustments within Windows environments, specifically focusing on events where the registry key in question is related to the UseLogonCredential setting within the WDigest path. Look for actions categorized as SetValue events indicating a change in the registry. The critical aspect to watch out for is the modification of the TargetObject ending with 'WDigest\\UseLogonCredential' where the details of the modification involve setting the DWORD value to (0x00000001), which effectively enables the storage of login credentials in clear-text. Given that such modifications could serve as a vector for compromising credentials, monitoring these registry changes is crucial. The primary log source for these observations is registry_set activities related to the Windows operating system. It is essential to remain vigilant for any actions fitting this description, albeit there may be rare instances where these modifications are not indicative of malicious intent, leading to potential false positives. Nonetheless, due to the high impact of enabling clear-text credential storage, such modifications are treated with a high level of suspicion. This detection process is aligned with understanding and preempting tactics and techniques that exploit credential access vulnerabilities."
    }
  },
  {
    "instruction": "Can you explain how to detect: when an adversary is trying to hide it's action from Sysmon logging based on error messages",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when an adversary is trying to hide its action from Sysmon logging based on error messages, you should monitor Windows Sysmon error logs for specific descriptions of errors. Specifically, look for error messages indicating that there was a failure to open service configuration or a failure to connect to the driver to update the configuration. Be alert for descriptions containing phrases like \"Failed to open service configuration with error\" or \"Failed to connect to the driver to update configuration.\" \n\nHowever, it's important to exclude false positive signs that might appear harmless or part of legitimate administrative activities. Specifically, ignore any error messages that solely indicate that \"Failed to open service configuration with error\" followed by \"Last error: The media is write protected.\" Also, ignore messages if they contain very specific error codes like error 19 or error 93 since these might be used in regular operations and not indicative of malicious activity on their own.\n\nThis approach focuses on identifying activities that may indicate an adversary's attempt to tamper with or disable Sysmon configurations to evade detection. The detection focuses on broad and specific error messages related to service configuration failures, applying filters to exclude known benign error patterns. This process is critical for maintaining the integrity of your monitoring solutions and ensuring that malicious activities are accurately identified without being drowned out by false positives. The associated tactics and techniques for this type of activity include Persistence, Defense Evasion, and Execution, emphasizing the importance of this detection in identifying sophisticated threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an adversary is trying to hide it's action from Sysmon logging based on error messages",
      "answer": "In order to detect when an adversary is trying to hide its action from Sysmon logging based on error messages, you should monitor Windows Sysmon error logs for specific descriptions of errors. Specifically, look for error messages indicating that there was a failure to open service configuration or a failure to connect to the driver to update the configuration. Be alert for descriptions containing phrases like \"Failed to open service configuration with error\" or \"Failed to connect to the driver to update configuration.\" \n\nHowever, it's important to exclude false positive signs that might appear harmless or part of legitimate administrative activities. Specifically, ignore any error messages that solely indicate that \"Failed to open service configuration with error\" followed by \"Last error: The media is write protected.\" Also, ignore messages if they contain very specific error codes like error 19 or error 93 since these might be used in regular operations and not indicative of malicious activity on their own.\n\nThis approach focuses on identifying activities that may indicate an adversary's attempt to tamper with or disable Sysmon configurations to evade detection. The detection focuses on broad and specific error messages related to service configuration failures, applying filters to exclude known benign error patterns. This process is critical for maintaining the integrity of your monitoring solutions and ensuring that malicious activities are accurately identified without being drowned out by false positives. The associated tactics and techniques for this type of activity include Persistence, Defense Evasion, and Execution, emphasizing the importance of this detection in identifying sophisticated threats."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of ftp.exe script execution with the \"-s\" flag and any child processes ran by ftp.exe",
    "context": "",
    "output": "In order to detect execution of ftp.exe script execution with the \"-s\" flag and any child processes ran by ftp.exe, you should monitor the creation of processes on Windows systems specifically for occurrences where the ftp.exe utility is invoked. Look for any process where the parent process ends with '\\ftp.exe', indicating that a child process is being spawned from ftp.exe. Additionally, keep an eye out for any execution of the ftp.exe utility itself, either by direct invocation or through its original file name. It is particularly noteworthy if the command line includes the '-s:' flag as this flag is used to specify a script to be executed by the ftp.exe application, which could potentially be leveraged in an attack. Watch out for these indicators and capture relevant information such as the command line and the parent image path of the process. While monitoring for such behaviors, bear in mind that there might be legitimate uses of these techniques, although they are not commonly encountered in regular operations. The severity level for these detections is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of ftp.exe script execution with the \"-s\" flag and any child processes ran by ftp.exe",
      "answer": "In order to detect execution of ftp.exe script execution with the \"-s\" flag and any child processes ran by ftp.exe, you should monitor the creation of processes on Windows systems specifically for occurrences where the ftp.exe utility is invoked. Look for any process where the parent process ends with '\\ftp.exe', indicating that a child process is being spawned from ftp.exe. Additionally, keep an eye out for any execution of the ftp.exe utility itself, either by direct invocation or through its original file name. It is particularly noteworthy if the command line includes the '-s:' flag as this flag is used to specify a script to be executed by the ftp.exe application, which could potentially be leveraged in an attack. Watch out for these indicators and capture relevant information such as the command line and the parent image path of the process. While monitoring for such behaviors, bear in mind that there might be legitimate uses of these techniques, although they are not commonly encountered in regular operations. The severity level for these detections is considered medium."
    }
  },
  {
    "instruction": "How can I detect: service path modification via the \"sc\" binary to a suspicious command or path",
    "context": "",
    "output": "In order to detect service path modification via the \"sc\" binary to a suspicious command or path, you should: Monitor Windows process creation logs for instances where the process image ends with '\\sc.exe'. This indicates the use of the Service Control (\u201csc\u201d) command-line utility to modify service configurations. Specifically, focus on command line activities that include both 'config' and 'binPath', which are commands used to modify the service binary path. Additionally, scrutinize any usage of highly sensitive or scripting commands such as 'powershell', 'cmd', 'mshta', 'wscript', 'cscript', 'rundll32', 'svchost', 'dllhost', as well as different forms of 'cmd.exe' executions ('cmd.exe /c', '/k', '/r') and their shorter versions ('cmd /c', '/k', '/r'). It is equally important to pay attention to processes being invoked from or involving suspicious paths like 'C:\\Users\\Public', any '\\Downloads\\' or '\\Desktop\\' folders, the Windows Start Menu startup folder, and various temporary directories ('C:\\Windows\\TEMP\\', '\\AppData\\Local\\Temp'). Any detections matching these criteria should be carefully investigated, as they signify a high likelihood of an attacker modifying service paths to execute malicious or unauthorized commands. Recorded command line parameters and their parent processes should be included in the monitoring for a fuller context of the suspicious activity. This method is robust with very few to unlikely false positives and hence, when such patterns are observed, they bear a high level of scrutiny.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "service path modification via the \"sc\" binary to a suspicious command or path",
      "answer": "In order to detect service path modification via the \"sc\" binary to a suspicious command or path, you should: Monitor Windows process creation logs for instances where the process image ends with '\\sc.exe'. This indicates the use of the Service Control (\u201csc\u201d) command-line utility to modify service configurations. Specifically, focus on command line activities that include both 'config' and 'binPath', which are commands used to modify the service binary path. Additionally, scrutinize any usage of highly sensitive or scripting commands such as 'powershell', 'cmd', 'mshta', 'wscript', 'cscript', 'rundll32', 'svchost', 'dllhost', as well as different forms of 'cmd.exe' executions ('cmd.exe /c', '/k', '/r') and their shorter versions ('cmd /c', '/k', '/r'). It is equally important to pay attention to processes being invoked from or involving suspicious paths like 'C:\\Users\\Public', any '\\Downloads\\' or '\\Desktop\\' folders, the Windows Start Menu startup folder, and various temporary directories ('C:\\Windows\\TEMP\\', '\\AppData\\Local\\Temp'). Any detections matching these criteria should be carefully investigated, as they signify a high likelihood of an attacker modifying service paths to execute malicious or unauthorized commands. Recorded command line parameters and their parent processes should be included in the monitoring for a fuller context of the suspicious activity. This method is robust with very few to unlikely false positives and hence, when such patterns are observed, they bear a high level of scrutiny."
    }
  },
  {
    "instruction": "How can I detect: potential DLL sideloading of \"goopdate.dll\", a DLL used by googleupdate.exe",
    "context": "",
    "output": "In order to detect potential DLL sideloading of \"goopdate.dll\", a DLL used by googleupdate.exe, you should monitor for the loading of the \"goopdate.dll\" file in the Windows environment, specifically tracking when this DLL is loaded from images. Be vigilant for occurrences where \"goopdate.dll\" ends with the mentioned DLL name, indicating a possible attempt to exploit the update process or mimic legitimate functions for malicious purposes. \n\nHowever, it's crucial to differentiate legitimate cases from malicious activity. Many legitimate third-party Chromium-based applications also use \"goopdate.dll\", especially those located in common program directories like \"C:\\Program Files (x86)\\\" and \"C:\\Program Files\\\". These instances should typically be excluded to minimize false positives. \n\nAdditionally, specific care should be taken to filter out potential false positive conditions involving temporary files related to Dropbox installations, which might temporarily contain \"goopdate.dll\" during their update or installation process, especially within the \"AppData\\Local\\Temp\\GUM\" directory with a \".tmp\\Dropbox\" path segment. \n\nMonitoring systems should be configured to exclude these legitimate cases while remaining alert for indicators of \"goopdate.dll\" being loaded in a manner consistent with DLL sideloading attempts. This involves not only tracking the appearance of \"goopdate.dll\" but also ensuring that it is not occurring from the filtered set of known good paths and conditions mentioned. \n\nBe aware that false positives are expected, particularly with installations of Google Chrome or other Chromium-based browsers that might be running from user locations like AppData or custom locations. It's advised to fine-tune the monitoring processes with additional filters as needed to accurately differentiate between legitimate use and potentially malicious activities striving to exploit the functionality of \"goopdate.dll\" for compromising the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"goopdate.dll\", a DLL used by googleupdate.exe",
      "answer": "In order to detect potential DLL sideloading of \"goopdate.dll\", a DLL used by googleupdate.exe, you should monitor for the loading of the \"goopdate.dll\" file in the Windows environment, specifically tracking when this DLL is loaded from images. Be vigilant for occurrences where \"goopdate.dll\" ends with the mentioned DLL name, indicating a possible attempt to exploit the update process or mimic legitimate functions for malicious purposes. \n\nHowever, it's crucial to differentiate legitimate cases from malicious activity. Many legitimate third-party Chromium-based applications also use \"goopdate.dll\", especially those located in common program directories like \"C:\\Program Files (x86)\\\" and \"C:\\Program Files\\\". These instances should typically be excluded to minimize false positives. \n\nAdditionally, specific care should be taken to filter out potential false positive conditions involving temporary files related to Dropbox installations, which might temporarily contain \"goopdate.dll\" during their update or installation process, especially within the \"AppData\\Local\\Temp\\GUM\" directory with a \".tmp\\Dropbox\" path segment. \n\nMonitoring systems should be configured to exclude these legitimate cases while remaining alert for indicators of \"goopdate.dll\" being loaded in a manner consistent with DLL sideloading attempts. This involves not only tracking the appearance of \"goopdate.dll\" but also ensuring that it is not occurring from the filtered set of known good paths and conditions mentioned. \n\nBe aware that false positives are expected, particularly with installations of Google Chrome or other Chromium-based browsers that might be running from user locations like AppData or custom locations. It's advised to fine-tune the monitoring processes with additional filters as needed to accurately differentiate between legitimate use and potentially malicious activities striving to exploit the functionality of \"goopdate.dll\" for compromising the system."
    }
  },
  {
    "instruction": "How to detect: source system failing to authenticate against a remote host with multiple users.",
    "context": "",
    "output": "In order to detect a source system failing to authenticate against a remote host with multiple users, you should focus on monitoring Windows security event logs, specifically targeting event ID 4625, which signifies a failed login attempt. Pay attention to situations where the logon type is 3, indicating a network logon failure. However, it is essential to exclude any events where the IP address is not recorded, as these do not help in identifying the source of the failed authentication attempts.\n\nFor accurate detection, you should aggregate failed login attempts over a 24-hour period and identify any IP address associated with more than 10 failed login attempts targeting different user accounts. This could indicate an unauthorized entity trying to gain access by brute force or guessing passwords of multiple users from a single source system.\n\nBe aware that there are legitimate use cases, such as terminal servers, jump servers, Citrix server farms, or workstations where users change frequently, which might exhibit similar behavior but are not malicious. These should be considered potential false positives and should be carefully reviewed to avoid misinterpretation of the data.\n\nUnderstanding the associated tactics and techniques, such as Credential Access and Brute Force, might also help in contextualizing and responding to these events more effectively. This approach of focusing on specific log entries, filtering out known benign scenarios, and applying a threshold for anomaly detection can significantly enhance your organization's ability to identify potentially malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "source system failing to authenticate against a remote host with multiple users.",
      "answer": "In order to detect a source system failing to authenticate against a remote host with multiple users, you should focus on monitoring Windows security event logs, specifically targeting event ID 4625, which signifies a failed login attempt. Pay attention to situations where the logon type is 3, indicating a network logon failure. However, it is essential to exclude any events where the IP address is not recorded, as these do not help in identifying the source of the failed authentication attempts.\n\nFor accurate detection, you should aggregate failed login attempts over a 24-hour period and identify any IP address associated with more than 10 failed login attempts targeting different user accounts. This could indicate an unauthorized entity trying to gain access by brute force or guessing passwords of multiple users from a single source system.\n\nBe aware that there are legitimate use cases, such as terminal servers, jump servers, Citrix server farms, or workstations where users change frequently, which might exhibit similar behavior but are not malicious. These should be considered potential false positives and should be carefully reviewed to avoid misinterpretation of the data.\n\nUnderstanding the associated tactics and techniques, such as Credential Access and Brute Force, might also help in contextualizing and responding to these events more effectively. This approach of focusing on specific log entries, filtering out known benign scenarios, and applying a threshold for anomaly detection can significantly enhance your organization's ability to identify potentially malicious activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: when the macOS Script Editor utility spawns an unusual child process.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when the macOS Script Editor utility spawns an unusual child process, you should: monitor for instances where the Script Editor application initiates the execution of certain child processes that are not typically associated with its standard operation. Specifically, focus on detecting the creation of processes that end with common scripting and utility binaries such as '/curl', '/bash', '/sh', '/zsh', '/dash', '/fish', '/osascript', '/mktemp', '/chmod', '/php', '/nohup', '/openssl', '/plutil', '/PlistBuddy', '/xattr', '/sqlite', '/funzip', '/popen' or contain 'python' or 'perl'. These processes can indicate execution, persistence, defense evasion, and initial access methods often utilized by attackers to perform malicious activities on a macOS system. This approach is aimed at identifying techniques associated with the execution of scripts and commands, securing initial access through spearphishing links or attachments, and evading defenses, which are categorized under tactics like execution, persistence, defense evasion, and initial access in the MITRE ATT&CK framework.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when the macOS Script Editor utility spawns an unusual child process.",
      "answer": "In order to detect when the macOS Script Editor utility spawns an unusual child process, you should: monitor for instances where the Script Editor application initiates the execution of certain child processes that are not typically associated with its standard operation. Specifically, focus on detecting the creation of processes that end with common scripting and utility binaries such as '/curl', '/bash', '/sh', '/zsh', '/dash', '/fish', '/osascript', '/mktemp', '/chmod', '/php', '/nohup', '/openssl', '/plutil', '/PlistBuddy', '/xattr', '/sqlite', '/funzip', '/popen' or contain 'python' or 'perl'. These processes can indicate execution, persistence, defense evasion, and initial access methods often utilized by attackers to perform malicious activities on a macOS system. This approach is aimed at identifying techniques associated with the execution of scripts and commands, securing initial access through spearphishing links or attachments, and evading defenses, which are categorized under tactics like execution, persistence, defense evasion, and initial access in the MITRE ATT&CK framework."
    }
  },
  {
    "instruction": "Please help me detect the following: Mimikatz DC sync security events",
    "context": "",
    "output": "Sure!\nIn order to detect Mimikatz DC sync security events, you should monitor for specific activities within the Windows Security event logs. Here's a detailed guide on what to look for:\n\nStart with focusing on events with the ID 4662, which are indicative of attempts to access certain permissions or carry out operations relating to directory services. These entries become especially concerning when they include references to permissions like 'Replicating Directory Changes All' or unique identifiers such as '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '9923a32a-3607-11d2-b9be-0000f87a36b2', and '89e95b76-444d-4c62-991a-0facbeda640c'. Additionally, an AccessMask value of '0x100' points towards attempts to query or replicate directory changes, which is a common tactic used in Mimikatz DC sync attacks to harvest credentials and sensitive information.\n\nHowever, not every instance of these event codes and properties necessarily indicates a malicious activity. You must apply certain filters to reduce false positives:\n- Exclude any events generated under the 'Window Manager' domain name, as these are typically benign system activities.\n- Ignore activities initiated by usernames starting with 'NT AUT' or 'MSOL_', as these often represent automated tasks or services.\n- Activities from usernames ending with '$' should also be discounted since these usually signify machine or service accounts performing legitimate operations.\n\nWhile these filters help refine detection, be aware of potential false positives. Legitimate domain controller synchronization activities not covered by the filters or the usage of local domain admin accounts for Azure AD Connect might sometimes trigger an alert.\n\nThe severity level for these detections is high, indicating that each alert warrants a prompt investigation to determine its nature and whether further action is needed to protect against potential credential theft or unauthorized access to sensitive data.\n\nThis detection strategy aligns with MITRE ATT&CK tactics related to Credential Access and specifically the technique of Domain Controller replication, highlighting the importance of these logs for identifying sophisticated attack methods aimed at compromising entire domains.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Mimikatz DC sync security events",
      "answer": "In order to detect Mimikatz DC sync security events, you should monitor for specific activities within the Windows Security event logs. Here's a detailed guide on what to look for:\n\nStart with focusing on events with the ID 4662, which are indicative of attempts to access certain permissions or carry out operations relating to directory services. These entries become especially concerning when they include references to permissions like 'Replicating Directory Changes All' or unique identifiers such as '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '9923a32a-3607-11d2-b9be-0000f87a36b2', and '89e95b76-444d-4c62-991a-0facbeda640c'. Additionally, an AccessMask value of '0x100' points towards attempts to query or replicate directory changes, which is a common tactic used in Mimikatz DC sync attacks to harvest credentials and sensitive information.\n\nHowever, not every instance of these event codes and properties necessarily indicates a malicious activity. You must apply certain filters to reduce false positives:\n- Exclude any events generated under the 'Window Manager' domain name, as these are typically benign system activities.\n- Ignore activities initiated by usernames starting with 'NT AUT' or 'MSOL_', as these often represent automated tasks or services.\n- Activities from usernames ending with '$' should also be discounted since these usually signify machine or service accounts performing legitimate operations.\n\nWhile these filters help refine detection, be aware of potential false positives. Legitimate domain controller synchronization activities not covered by the filters or the usage of local domain admin accounts for Azure AD Connect might sometimes trigger an alert.\n\nThe severity level for these detections is high, indicating that each alert warrants a prompt investigation to determine its nature and whether further action is needed to protect against potential credential theft or unauthorized access to sensitive data.\n\nThis detection strategy aligns with MITRE ATT&CK tactics related to Credential Access and specifically the technique of Domain Controller replication, highlighting the importance of these logs for identifying sophisticated attack methods aimed at compromising entire domains."
    }
  },
  {
    "instruction": "Please help me detect the following: Ryuk Ransomware command lines",
    "context": "",
    "output": "Sure!\nIn order to detect Ryuk Ransomware command lines, you should: Focus on monitoring process creation events within Windows environments. Look specifically for processes that end with '\\net.exe' or '\\net1.exe' and contain the command line argument 'stop'. Additionally, be alert for any command line executions that contain the strings 'samss', 'audioendpointbuilder', or 'unistoresvc_'. Pay attention to all these conditions simultaneously as they are indicative of the methods employed by Ryuk Ransomware. Given the critical nature of such detections, false positives are considered unlikely. This approach assists in identifying potential instances of the Ryuk Ransomware actively disrupting or manipulating system processes and services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Ryuk Ransomware command lines",
      "answer": "In order to detect Ryuk Ransomware command lines, you should: Focus on monitoring process creation events within Windows environments. Look specifically for processes that end with '\\net.exe' or '\\net1.exe' and contain the command line argument 'stop'. Additionally, be alert for any command line executions that contain the strings 'samss', 'audioendpointbuilder', or 'unistoresvc_'. Pay attention to all these conditions simultaneously as they are indicative of the methods employed by Ryuk Ransomware. Given the critical nature of such detections, false positives are considered unlikely. This approach assists in identifying potential instances of the Ryuk Ransomware actively disrupting or manipulating system processes and services."
    }
  },
  {
    "instruction": "Explain how should I detect the following: export of a crital Registry key to a file.",
    "context": "",
    "output": "In order to detect the export of a critical Registry key to a file, you should: Monitor Windows process creation logs for instances of the Registry Editor (`regedit.exe`) executing with command-line arguments that indicate exporting actions. Specifically, lookout for the `regedit.exe` process with command-line parameters that include `/E` or `-E` which are used to export registry keys to a file. Additionally, pay attention to parameters that contain references to critical registry hives such as `hklm` or `hkey_local_machine`, and further, parameters that target critical registry paths ending with `\\system`, `\\sam`, or `\\security`. Collect information about the parent process of `regedit.exe` and the exact command line used for closer examination. It's important to note that there may be legitimate reasons for exporting parts of the Registry, such as for backups or forensic investigations, which you will need to differentiate from malicious activity. The severity of such actions is considered high because unauthorized access to or exporting of critical registry hives can be indicative of an attempt to steal sensitive system information or manipulate system configurations maliciously.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "export of a crital Registry key to a file.",
      "answer": "In order to detect the export of a critical Registry key to a file, you should: Monitor Windows process creation logs for instances of the Registry Editor (`regedit.exe`) executing with command-line arguments that indicate exporting actions. Specifically, lookout for the `regedit.exe` process with command-line parameters that include `/E` or `-E` which are used to export registry keys to a file. Additionally, pay attention to parameters that contain references to critical registry hives such as `hklm` or `hkey_local_machine`, and further, parameters that target critical registry paths ending with `\\system`, `\\sam`, or `\\security`. Collect information about the parent process of `regedit.exe` and the exact command line used for closer examination. It's important to note that there may be legitimate reasons for exporting parts of the Registry, such as for backups or forensic investigations, which you will need to differentiate from malicious activity. The severity of such actions is considered high because unauthorized access to or exporting of critical registry hives can be indicative of an attempt to steal sensitive system information or manipulate system configurations maliciously."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of a schtask that executes a file from C:\\Users\\<USER>\\AppData\\Local",
    "context": "",
    "output": "In order to detect the creation of a scheduled task that executes a file from C:\\Users\\<USER>\\AppData\\Local, you should monitor for the creation of processes in Windows environments, specifically focusing on the creation of tasks using \"schtasks.exe\". This involves looking for command-line patterns that indicate a new task creation with \"/Create\", specify a user with \"/RU\", and detail the task to execute with \"/TR\" that points to a file within the \"C:\\Users\\<USER>\\AppData\\Local\" directory. Additionally, the command line may include indications of running the task under the \"NT AUTHORITY\\SYSTEM\" or as \"SYSTEM\", highlighting that the task is intended to run with high privileges.\n\nIt's important to filter out legitimate system behavior to reduce false positives, such as scheduled tasks created by \"TeamViewer_\" temporarily located in \"\\AppData\\Local\\Temp\\\", especially those named with \"/TN TVInstallRestore\" in their command-line, as these are identified as benign uses that could otherwise be confused with malicious activity.\n\nThis analysis helps in identifying potentially malicious scheduled tasks that could be utilized for persistence or executing unwanted software, relating to techniques that involve Execution and Persistence in securing Windows environments against unauthorized task scheduling.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a schtask that executes a file from C:\\Users\\<USER>\\AppData\\Local",
      "answer": "In order to detect the creation of a scheduled task that executes a file from C:\\Users\\<USER>\\AppData\\Local, you should monitor for the creation of processes in Windows environments, specifically focusing on the creation of tasks using \"schtasks.exe\". This involves looking for command-line patterns that indicate a new task creation with \"/Create\", specify a user with \"/RU\", and detail the task to execute with \"/TR\" that points to a file within the \"C:\\Users\\<USER>\\AppData\\Local\" directory. Additionally, the command line may include indications of running the task under the \"NT AUTHORITY\\SYSTEM\" or as \"SYSTEM\", highlighting that the task is intended to run with high privileges.\n\nIt's important to filter out legitimate system behavior to reduce false positives, such as scheduled tasks created by \"TeamViewer_\" temporarily located in \"\\AppData\\Local\\Temp\\\", especially those named with \"/TN TVInstallRestore\" in their command-line, as these are identified as benign uses that could otherwise be confused with malicious activity.\n\nThis analysis helps in identifying potentially malicious scheduled tasks that could be utilized for persistence or executing unwanted software, relating to techniques that involve Execution and Persistence in securing Windows environments against unauthorized task scheduling."
    }
  },
  {
    "instruction": "How can I detect: suspicious script execution in temporary folders or folders accessible by environment variables",
    "context": "",
    "output": "In order to detect a suspicious script execution in temporary folders or folders accessible by environment variables, you should focus on monitoring the creation of processes on Windows systems. Specifically, watch for the execution of `cscript.exe`, `mshta.exe`, or `wscript.exe` scripts, which are commonly utilized by attackers for executing malicious code through scripts. Be vigilant for command line flags that attempt to bypass execution policies (`-ep bypass`, ` -ExecutionPolicy bypass`) or run scripts in a hidden window (`-w hidden`), as well as attempts to execute JavaScript or VBScript (`/e:javascript`, `/e:Jscript`, `/e:vbscript`). Additionally, scrutinize any script execution occurring within certain directories that are commonly abused by threat actors, including temporary folders like `\\AppData\\Local\\Temp`, `\\Windows\\Temp`, or folders normally accessible through environment variables such as `:\\Perflogs\\`, `:\\Users\\Public\\`. Special attention should be given to scripts run from user directories in combination with specific subfolders like `\\Favorites\\`, `\\Favourites\\`, or `\\Contacts\\`, which could signify an attempt to leverage user profiles for malicious purposes. This vigilance aids in identifying tactics and techniques related to execution and persistence, among others, which are pivotal for safeguarding against possible threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious script execution in temporary folders or folders accessible by environment variables",
      "answer": "In order to detect a suspicious script execution in temporary folders or folders accessible by environment variables, you should focus on monitoring the creation of processes on Windows systems. Specifically, watch for the execution of `cscript.exe`, `mshta.exe`, or `wscript.exe` scripts, which are commonly utilized by attackers for executing malicious code through scripts. Be vigilant for command line flags that attempt to bypass execution policies (`-ep bypass`, ` -ExecutionPolicy bypass`) or run scripts in a hidden window (`-w hidden`), as well as attempts to execute JavaScript or VBScript (`/e:javascript`, `/e:Jscript`, `/e:vbscript`). Additionally, scrutinize any script execution occurring within certain directories that are commonly abused by threat actors, including temporary folders like `\\AppData\\Local\\Temp`, `\\Windows\\Temp`, or folders normally accessible through environment variables such as `:\\Perflogs\\`, `:\\Users\\Public\\`. Special attention should be given to scripts run from user directories in combination with specific subfolders like `\\Favorites\\`, `\\Favourites\\`, or `\\Contacts\\`, which could signify an attempt to leverage user profiles for malicious purposes. This vigilance aids in identifying tactics and techniques related to execution and persistence, among others, which are pivotal for safeguarding against possible threats."
    }
  },
  {
    "instruction": "How to detect: execution of \"sc.exe\" to query information about registered services on the system",
    "context": "",
    "output": "In order to detect execution of \"sc.exe\" to query information about registered services on the system, you should: Monitor process creation logs on Windows systems for instances where the process image ends with '\\sc.exe' or the original file name ends with 'sc.exe', and the command line contains ' query'. This indicates an attempt to obtain information about services registered in the system, which can be a normal administrative task but also may signal malicious activity. False positives may include legitimate administrative use to gather information about a service's state or PID, as well as the legitimate Keybase process \"kbfsdokan.exe\" querying the dokan1 service with the command line \"sc query dokan1\". This detection is considered to have a low level of confidence due to the potential for legitimate use of the commands involved.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"sc.exe\" to query information about registered services on the system",
      "answer": "In order to detect execution of \"sc.exe\" to query information about registered services on the system, you should: Monitor process creation logs on Windows systems for instances where the process image ends with '\\sc.exe' or the original file name ends with 'sc.exe', and the command line contains ' query'. This indicates an attempt to obtain information about services registered in the system, which can be a normal administrative task but also may signal malicious activity. False positives may include legitimate administrative use to gather information about a service's state or PID, as well as the legitimate Keybase process \"kbfsdokan.exe\" querying the dokan1 service with the command line \"sc query dokan1\". This detection is considered to have a low level of confidence due to the potential for legitimate use of the commands involved."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of doas.conf file in linux host platform.",
    "context": "",
    "output": "In order to detect the creation of doas.conf file in linux host platform, you should monitor file events on Linux operating systems, specifically looking for any instances where the '/etc/doas.conf' file is targeted. This is important as changes or creation of this particular configuration file could indicate unauthorized attempts to modify system permissions or elevate privileges. The detection focuses on identifying actions where the filename ends with '/etc/doas.conf', which is a critical configuration file. Given the nature of this file, it\u2019s unlikely there will be many false positives, and the severity of such detection is considered medium. This monitoring is crucial for identifying potential security breaches related to privilege escalation and system compromise.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of doas.conf file in linux host platform.",
      "answer": "In order to detect the creation of doas.conf file in linux host platform, you should monitor file events on Linux operating systems, specifically looking for any instances where the '/etc/doas.conf' file is targeted. This is important as changes or creation of this particular configuration file could indicate unauthorized attempts to modify system permissions or elevate privileges. The detection focuses on identifying actions where the filename ends with '/etc/doas.conf', which is a critical configuration file. Given the nature of this file, it\u2019s unlikely there will be many false positives, and the severity of such detection is considered medium. This monitoring is crucial for identifying potential security breaches related to privilege escalation and system compromise."
    }
  },
  {
    "instruction": "How to detect: use of Pingback backdoor that creates ICMP tunnel for C2 as described in the trustwave report",
    "context": "",
    "output": "In order to detect the use of Pingback backdoor that creates ICMP tunnel for Command and Control (C2) as described in the trustwave report, you should monitor Windows process creation logs for instances where a process is spawned from a parent process named `updata.exe`. Specifically, look for commands that contain all of the following terms: 'config', 'msdtc', 'start', and 'auto'. The presence of these terms in the command line arguments of a process initiated by `updata.exe` signals a potential compromise, highlighting the setup or configuration of a system service to ensure persistence or automatic start of a malicious application designed for command and control activities through ICMP tunneling. The likelihood of such events being false positives is considered low, and the severity level of this detection is high, indicating its critical importance in cybersecurity monitoring strategies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Pingback backdoor that creates ICMP tunnel for C2 as described in the trustwave report",
      "answer": "In order to detect the use of Pingback backdoor that creates ICMP tunnel for Command and Control (C2) as described in the trustwave report, you should monitor Windows process creation logs for instances where a process is spawned from a parent process named `updata.exe`. Specifically, look for commands that contain all of the following terms: 'config', 'msdtc', 'start', and 'auto'. The presence of these terms in the command line arguments of a process initiated by `updata.exe` signals a potential compromise, highlighting the setup or configuration of a system service to ensure persistence or automatic start of a malicious application designed for command and control activities through ICMP tunneling. The likelihood of such events being false positives is considered low, and the severity level of this detection is high, indicating its critical importance in cybersecurity monitoring strategies."
    }
  },
  {
    "instruction": "How can I detect: base64 encoded powershell cmdlet invocation of known suspicious cmdlets",
    "context": "",
    "output": "In order to detect base64 encoded PowerShell cmdlet invocation of known suspicious cmdlets, you should monitor Windows process creation logs for command line activity that contains specific base64 encoded strings. These strings correspond to the invocation of potentially malicious cmdlets, such as BloodHound, Mimikatz, and WMIExec. The detection focuses on identifying these encoded commands, which attackers often use to gather information, perform credential dumping, or execute commands remotely. It's important to pay attention to the CommandLine field in the logs, as this is where the encoded command will be found. Due to the high level of suspicion associated with these commands and their encoding method, occurrences are unlikely to be false positives and should be treated with a high level of concern.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "base64 encoded powershell cmdlet invocation of known suspicious cmdlets",
      "answer": "In order to detect base64 encoded PowerShell cmdlet invocation of known suspicious cmdlets, you should monitor Windows process creation logs for command line activity that contains specific base64 encoded strings. These strings correspond to the invocation of potentially malicious cmdlets, such as BloodHound, Mimikatz, and WMIExec. The detection focuses on identifying these encoded commands, which attackers often use to gather information, perform credential dumping, or execute commands remotely. It's important to pay attention to the CommandLine field in the logs, as this is where the encoded command will be found. Due to the high level of suspicion associated with these commands and their encoding method, occurrences are unlikely to be false positives and should be treated with a high level of concern."
    }
  },
  {
    "instruction": "Explain how should I detect the following: possible collection of data from the clipboard via execution of the osascript binary",
    "context": "",
    "output": "In order to detect possible collection of data from the clipboard via execution of the osascript binary, you should: Monitor the creation of processes on macOS systems, paying special attention to instances where the command line contains 'osascript' alongside ' -e ' and 'clipboard'. This indicates the osascript binary is being used, possibly to manipulate or access the clipboard contents. Given the context, such activity is regarded with high suspicion, and under normal circumstances, false positives are considered unlikely. It\u2019s crucial to capture and review the full command line arguments in these events to understand the full scope of the action being performed. This detection strategy is crucial for identifying potential unauthorized access to sensitive data stored temporarily in the clipboard by attackers leveraging macOS system functionalities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible collection of data from the clipboard via execution of the osascript binary",
      "answer": "In order to detect possible collection of data from the clipboard via execution of the osascript binary, you should: Monitor the creation of processes on macOS systems, paying special attention to instances where the command line contains 'osascript' alongside ' -e ' and 'clipboard'. This indicates the osascript binary is being used, possibly to manipulate or access the clipboard contents. Given the context, such activity is regarded with high suspicion, and under normal circumstances, false positives are considered unlikely. It\u2019s crucial to capture and review the full command line arguments in these events to understand the full scope of the action being performed. This detection strategy is crucial for identifying potential unauthorized access to sensitive data stored temporarily in the clipboard by attackers leveraging macOS system functionalities."
    }
  },
  {
    "instruction": "How to detect: an exploitation attempt of SystemNightmare in order to obtain a shell as LOCAL_SYSTEM",
    "context": "",
    "output": "In order to detect an exploitation attempt of SystemNightmare in order to obtain a shell as LOCAL_SYSTEM, you should: Monitor process creation logs in Windows for any command line invocation that includes the terms 'printnightmare.gentilkiwi.com', ' /user:gentilguest ', or 'Kiwi Legit Printer'. These specific strings indicate an attempt to exploit the SystemNightmare vulnerability, which can potentially allow an attacker to gain LOCAL_SYSTEM privileges. Due to the critical nature of this activity, any detection associated with these command line arguments should be investigated promptly to mitigate the risk of an attacker exploiting this vulnerability to obtain elevated privileges.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an exploitation attempt of SystemNightmare in order to obtain a shell as LOCAL_SYSTEM",
      "answer": "In order to detect an exploitation attempt of SystemNightmare in order to obtain a shell as LOCAL_SYSTEM, you should: Monitor process creation logs in Windows for any command line invocation that includes the terms 'printnightmare.gentilkiwi.com', ' /user:gentilguest ', or 'Kiwi Legit Printer'. These specific strings indicate an attempt to exploit the SystemNightmare vulnerability, which can potentially allow an attacker to gain LOCAL_SYSTEM privileges. Due to the critical nature of this activity, any detection associated with these command line arguments should be investigated promptly to mitigate the risk of an attacker exploiting this vulnerability to obtain elevated privileges."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious child processes of electron apps (teams, discord, slack...).\nThis could be a potential sign of \".asar\" file tampering (See reference section for more information)\n",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious child processes of electron apps (teams, discord, slack...), which could be a potential sign of \".asar\" file tampering, you should: focus on monitoring process creation logs within Windows environments. Look specifically for instances where command-line tools such as 'cmd.exe', 'powershell.exe', 'pwsh.exe', 'cscript.exe', 'wscript.exe', or 'mshta.exe' are launched as child processes by popular Electron-based applications like Teams, Slack, or Discord. It is essential to exclude cases where 'Discord.exe' launches 'nvidia-smi.exe' via the command line from this monitoring to reduce false positives. By capturing and analyzing the command lines used during these creations, you can identify unusual or malicious activity connected to tactics and techniques like execution, persistence, privilege escalation, defense evasion, and potentially unwanted software involved. Pay particular attention to the details provided in the command line fields and parent command line fields for deeper investigation. Keep in mind that the understanding of false positive rates will improve over time, potentially adjusting the response level required for these detections.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious child processes of electron apps (teams, discord, slack...).\nThis could be a potential sign of \".asar\" file tampering (See reference section for more information)\n",
      "answer": "In order to detect suspicious child processes of electron apps (teams, discord, slack...), which could be a potential sign of \".asar\" file tampering, you should: focus on monitoring process creation logs within Windows environments. Look specifically for instances where command-line tools such as 'cmd.exe', 'powershell.exe', 'pwsh.exe', 'cscript.exe', 'wscript.exe', or 'mshta.exe' are launched as child processes by popular Electron-based applications like Teams, Slack, or Discord. It is essential to exclude cases where 'Discord.exe' launches 'nvidia-smi.exe' via the command line from this monitoring to reduce false positives. By capturing and analyzing the command lines used during these creations, you can identify unusual or malicious activity connected to tactics and techniques like execution, persistence, privilege escalation, defense evasion, and potentially unwanted software involved. Pay particular attention to the details provided in the command line fields and parent command line fields for deeper investigation. Keep in mind that the understanding of false positive rates will improve over time, potentially adjusting the response level required for these detections."
    }
  },
  {
    "instruction": "How can I detect: code integrity failures such as missing page hashes or corrupted drivers due unauthorized modification. This could be a sign of tampered binaries.",
    "context": "",
    "output": "In order to detect code integrity failures such as missing page hashes or corrupted drivers due to unauthorized modification, which could be a sign of tampered binaries, you should: monitor Windows security logs for the occurrence of Event IDs 5038 and 6281. These Event IDs are indicative of issues with code integrity, suggesting that system files or drivers may have been modified or corrupted, potentially as part of malicious activity. It's important to note that these events could sometimes be triggered by disk device errors, which are considered low-level false positives in the context of this detection strategy. By staying vigilant against these specific event codes, it's possible to identify and investigate instances of suspected unauthorized file modifications, aiding in the protection of the system against tampering and related security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "code integrity failures such as missing page hashes or corrupted drivers due unauthorized modification. This could be a sign of tampered binaries.",
      "answer": "In order to detect code integrity failures such as missing page hashes or corrupted drivers due to unauthorized modification, which could be a sign of tampered binaries, you should: monitor Windows security logs for the occurrence of Event IDs 5038 and 6281. These Event IDs are indicative of issues with code integrity, suggesting that system files or drivers may have been modified or corrupted, potentially as part of malicious activity. It's important to note that these events could sometimes be triggered by disk device errors, which are considered low-level false positives in the context of this detection strategy. By staying vigilant against these specific event codes, it's possible to identify and investigate instances of suspected unauthorized file modifications, aiding in the protection of the system against tampering and related security threats."
    }
  },
  {
    "instruction": "Explain how should I detect the following: AWS root account usage",
    "context": "",
    "output": "In order to detect AWS root account usage, you should: monitor CloudTrail logs in the AWS environment to identify activities performed by the root user account. Focus on filtering logs based on the user identity type, specifically looking for actions initiated by the \"Root\" user. However, it is important to exclude events classified as \"AwsServiceEvent\" to reduce false positives. This approach helps in identifying unauthorized or potentially harmful operations carried out using the root account, which is critical for maintaining security within an AWS environment. Be aware that there are legitimate tasks that require root account credentials, detailed in AWS documentation, which should be considered while analyzing the detection results. This activity is associated with monitoring for misuse of AWS root account privileges.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "AWS root account usage",
      "answer": "In order to detect AWS root account usage, you should: monitor CloudTrail logs in the AWS environment to identify activities performed by the root user account. Focus on filtering logs based on the user identity type, specifically looking for actions initiated by the \"Root\" user. However, it is important to exclude events classified as \"AwsServiceEvent\" to reduce false positives. This approach helps in identifying unauthorized or potentially harmful operations carried out using the root account, which is critical for maintaining security within an AWS environment. Be aware that there are legitimate tasks that require root account credentials, detailed in AWS documentation, which should be considered while analyzing the detection results. This activity is associated with monitoring for misuse of AWS root account privileges."
    }
  },
  {
    "instruction": "How can I detect: suspicious parameters of fsutil (deleting USN journal, configuring it with small size, etc).\nMight be used by ransomwares during the attack (seen by NotPetya and others).\n",
    "context": "",
    "output": "In order to detect suspicious parameters of fsutil (deleting USN journal, configuring it with small size, etc) that might be used by ransomwares during the attack (seen by NotPetya and others), you should monitor process creation logs on Windows systems for instances where the fsutil utility is executed. Specifically, look for events where the image names end with '\\fsutil.exe' or have an original filename of 'fsutil.exe'. Additionally, pay attention to command line inputs that contain 'deletejournal' or 'createjournal'. These inputs are indicative of modifying the USN journal, a behavior observed in ransomware attacks to either remove tracking of file changes or to adjust the journal's configuration, potentially making its size very small and less useful for forensic analysis. Be aware that this behavior might also be linked with legitimate administrative activities or scripts, so consider these as potential sources of false positives. The significance of such actions is high, hence they warrant thorough investigation when detected.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious parameters of fsutil (deleting USN journal, configuring it with small size, etc).\nMight be used by ransomwares during the attack (seen by NotPetya and others).\n",
      "answer": "In order to detect suspicious parameters of fsutil (deleting USN journal, configuring it with small size, etc) that might be used by ransomwares during the attack (seen by NotPetya and others), you should monitor process creation logs on Windows systems for instances where the fsutil utility is executed. Specifically, look for events where the image names end with '\\fsutil.exe' or have an original filename of 'fsutil.exe'. Additionally, pay attention to command line inputs that contain 'deletejournal' or 'createjournal'. These inputs are indicative of modifying the USN journal, a behavior observed in ransomware attacks to either remove tracking of file changes or to adjust the journal's configuration, potentially making its size very small and less useful for forensic analysis. Be aware that this behavior might also be linked with legitimate administrative activities or scripts, so consider these as potential sources of false positives. The significance of such actions is high, hence they warrant thorough investigation when detected."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of \"whoami.exe\" by privileged accounts that are often abused by threat actors",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of \"whoami.exe\" by privileged accounts that are often abused by threat actors, you should: monitor process creation events on Windows systems for the execution of \"whoami.exe\", either by directly identifying the original filename 'whoami.exe' or by detecting execution paths that end with '\\whoami.exe'. Furthermore, pay close attention to the user context under which \"whoami.exe\" is executed, particularly looking out for users that contain strings 'AUTHORI', 'AUTORI', or are named 'TrustedInstaller'. Both conditions involving the specific image name and user context must be met to raise suspicion. However, be mindful of potential unknown benign activities that might trigger this detection. The monitoring for these specific conditions is crucial due to the elevated risk level associated with the abuse of such privileged accounts by attackers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"whoami.exe\" by privileged accounts that are often abused by threat actors",
      "answer": "In order to detect the execution of \"whoami.exe\" by privileged accounts that are often abused by threat actors, you should: monitor process creation events on Windows systems for the execution of \"whoami.exe\", either by directly identifying the original filename 'whoami.exe' or by detecting execution paths that end with '\\whoami.exe'. Furthermore, pay close attention to the user context under which \"whoami.exe\" is executed, particularly looking out for users that contain strings 'AUTHORI', 'AUTORI', or are named 'TrustedInstaller'. Both conditions involving the specific image name and user context must be met to raise suspicion. However, be mindful of potential unknown benign activities that might trigger this detection. The monitoring for these specific conditions is crucial due to the elevated risk level associated with the abuse of such privileged accounts by attackers."
    }
  },
  {
    "instruction": "How can I detect: Crassus, a Windows privilege escalation discovery tool, based on PE metadata characteristics.",
    "context": "",
    "output": "In order to detect Crassus, a Windows privilege escalation discovery tool, based on PE metadata characteristics, you should: Monitor for process creation events on Windows systems that exhibit any of the following characteristics indicative of the Crassus privilege escalation tool: An executable file ending with '\\Crassus.exe', the original filename being 'Crassus.exe', or the process description containing the term 'Crassus'. It is unlikely that there will be legitimate processes that meet these conditions, hence any detection of such activity should be considered with high suspicion and investigated promptly. This detection methodology is focused on identifying potential misuse of system vulnerabilities for escalating privileges using the specified tool, by scrutinizing the metadata of process executables and their descriptions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Crassus, a Windows privilege escalation discovery tool, based on PE metadata characteristics.",
      "answer": "In order to detect Crassus, a Windows privilege escalation discovery tool, based on PE metadata characteristics, you should: Monitor for process creation events on Windows systems that exhibit any of the following characteristics indicative of the Crassus privilege escalation tool: An executable file ending with '\\Crassus.exe', the original filename being 'Crassus.exe', or the process description containing the term 'Crassus'. It is unlikely that there will be legitimate processes that meet these conditions, hence any detection of such activity should be considered with high suspicion and investigated promptly. This detection methodology is focused on identifying potential misuse of system vulnerabilities for escalating privileges using the specified tool, by scrutinizing the metadata of process executables and their descriptions."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect indirect command execution via Program Compatibility Assistant (pcalua.exe or forfiles.exe).",
    "context": "",
    "output": "Certainly!\n\nIn order to detect indirect command execution via Program Compatibility Assistant (pcalua.exe or forfiles.exe), you should monitor the creation of processes on Windows systems, particularly looking for instances where pcalua.exe or forfiles.exe act as parent processes. These executables, when used in a specific manner, can indicate an attempt to execute commands indirectly, potentially bypassing security mechanisms or hiding malicious activity. Important information to track includes the name of the computer where the activity occurred, the user account involved, the full command line of the parent and child processes. However, be aware that not every instance of these behaviors is malicious. There can be legitimate uses, and focusing on outliers rather than common occurrences can help reduce false positives. This method falls into low-risk detection strategies, indicating that while it's not foolproof, it's a valuable part of a comprehensive monitoring effort.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect indirect command execution via Program Compatibility Assistant (pcalua.exe or forfiles.exe).",
      "answer": "In order to detect indirect command execution via Program Compatibility Assistant (pcalua.exe or forfiles.exe), you should monitor the creation of processes on Windows systems, particularly looking for instances where pcalua.exe or forfiles.exe act as parent processes. These executables, when used in a specific manner, can indicate an attempt to execute commands indirectly, potentially bypassing security mechanisms or hiding malicious activity. Important information to track includes the name of the computer where the activity occurred, the user account involved, the full command line of the parent and child processes. However, be aware that not every instance of these behaviors is malicious. There can be legitimate uses, and focusing on outliers rather than common occurrences can help reduce false positives. This method falls into low-risk detection strategies, indicating that while it's not foolproof, it's a valuable part of a comprehensive monitoring effort."
    }
  },
  {
    "instruction": "How to detect: Mesh Agent service installation. Mesh Agent is used to remotely manage computers",
    "context": "",
    "output": "In order to detect a Mesh Agent service installation, which is used to remotely manage computers, you should: Focus on monitoring Windows System service logs. Specifically, look for events generated by the Service Control Manager with an Event ID of 7045. This Event ID signifies service installations, among which the Mesh Agent, a tool for remote management, might be of particular interest. Detection is based on two primary indicators: the presence of 'MeshAgent.exe' in the ImagePath of the newly installed service and the inclusion of 'Mesh Agent' in the ServiceName. Both conditions must be met to consider the event potentially malicious. It is important to note, however, that there may be legitimate uses of the Mesh Agent tool, and such instances should be considered as potential false positives. The level of concern for this activity is classified as medium, reflecting the need for further investigation upon detection. The tags associated with this detection are 'Persistence', 'Privilege Escalation', and 'Execution' as it relates to the MITRE ATT&CK tactics, highlighting the possible malicious use of the Mesh Agent in gaining persistent access, elevating privileges, or executing commands remotely on a victim's machine.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Mesh Agent service installation. Mesh Agent is used to remotely manage computers",
      "answer": "In order to detect a Mesh Agent service installation, which is used to remotely manage computers, you should: Focus on monitoring Windows System service logs. Specifically, look for events generated by the Service Control Manager with an Event ID of 7045. This Event ID signifies service installations, among which the Mesh Agent, a tool for remote management, might be of particular interest. Detection is based on two primary indicators: the presence of 'MeshAgent.exe' in the ImagePath of the newly installed service and the inclusion of 'Mesh Agent' in the ServiceName. Both conditions must be met to consider the event potentially malicious. It is important to note, however, that there may be legitimate uses of the Mesh Agent tool, and such instances should be considered as potential false positives. The level of concern for this activity is classified as medium, reflecting the need for further investigation upon detection. The tags associated with this detection are 'Persistence', 'Privilege Escalation', and 'Execution' as it relates to the MITRE ATT&CK tactics, highlighting the possible malicious use of the Mesh Agent in gaining persistent access, elevating privileges, or executing commands remotely on a victim's machine."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious VSFTPD error messages that indicate a fatal or suspicious error that could be caused by exploiting attempts",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious VSFTPD error messages that indicate a fatal or suspicious error that could be caused by exploiting attempts, you should focus on monitoring VSFTPD log entries for specific error messages that could suggest malicious activity. This involves carefully observing the VSFTPD service, which runs on Linux systems, for unusual or suspect error messages. Such messages may include, but are not limited to, indications of too many sessions being refused for a specific address, denials based on tcp_wrappers, misuse of HTTP methods denoted by \"Bad HTTP verb\", conflicts between active port and passive mode settings, issues related to file transfers and directory openings, and various anomalies in process and system call handling. \n\nSome specific error messages to be vigilant about are: problems setting a file's modification time, errors in sandbox event handling, syscall issues including out-of-bounds or not permitted calls, excessively long input lines, and potential bugs in memory management or process control, such as \"bug: pid active in ptrace_sandbox_free\". \n\nMonitoring for these messages involves looking out for potentially exploitative behaviors that attackers might use in an attempt to compromise or disrupt the VSFTPD service. Given the variety of errors, this monitoring is crucial for identifying not just general operational issues but specifically crafted attack vectors meant to exploit vulnerabilities in the service. \n\nRemember, while these logs are insightful for identifying suspicious activities, there could be legitimate scenarios triggering these errors, so any detection mechanism should balance sensitivity with the potential for false positives, though unknown scenarios are considered for this analysis level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious VSFTPD error messages that indicate a fatal or suspicious error that could be caused by exploiting attempts",
      "answer": "In order to detect suspicious VSFTPD error messages that indicate a fatal or suspicious error that could be caused by exploiting attempts, you should focus on monitoring VSFTPD log entries for specific error messages that could suggest malicious activity. This involves carefully observing the VSFTPD service, which runs on Linux systems, for unusual or suspect error messages. Such messages may include, but are not limited to, indications of too many sessions being refused for a specific address, denials based on tcp_wrappers, misuse of HTTP methods denoted by \"Bad HTTP verb\", conflicts between active port and passive mode settings, issues related to file transfers and directory openings, and various anomalies in process and system call handling. \n\nSome specific error messages to be vigilant about are: problems setting a file's modification time, errors in sandbox event handling, syscall issues including out-of-bounds or not permitted calls, excessively long input lines, and potential bugs in memory management or process control, such as \"bug: pid active in ptrace_sandbox_free\". \n\nMonitoring for these messages involves looking out for potentially exploitative behaviors that attackers might use in an attempt to compromise or disrupt the VSFTPD service. Given the variety of errors, this monitoring is crucial for identifying not just general operational issues but specifically crafted attack vectors meant to exploit vulnerabilities in the service. \n\nRemember, while these logs are insightful for identifying suspicious activities, there could be legitimate scenarios triggering these errors, so any detection mechanism should balance sensitivity with the potential for false positives, though unknown scenarios are considered for this analysis level."
    }
  },
  {
    "instruction": "Can you explain how to detect: attempts to collect image data stored in the clipboard from users with the usage of xclip tool.\nXclip has to be installed.\nHighly recommended using rule on servers, due to high usage of clipboard utilities on user workstations.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect attempts to collect image data stored in the clipboard from users with the usage of xclip tool, you should focus on monitoring the Linux Audit Daemon (auditd) logs for execution events (EXECVE) related to the xclip tool. When xclip is used specifically for interacting with clipboard content, it will show command line arguments indicating this action. Watch for the xclip command followed by arguments that specify the selection target as clipboard ('-selection' or '-sel'), further clarify the target as clipboard or clip ('clipboard' or 'clip'), and define the type of content to be image data (arguments starting with 'image/' after '-t'). Additionally, the use of '-o' indicates that the content is being output, which in this context, suggests the image data from the clipboard is being collected.\n\nIt is important to note that there might be legitimate uses of the xclip tool to manipulate clipboard data, including image content. Therefore, this activity should initially be considered low-level suspicion, requiring further investigation to distinguish malicious use from benign activity.\n\nThis detection is especially valuable on servers where clipboard utilities are typically used less frequently, and the appearance of such commands can be more indicative of suspicious activity. Given the nature of the attack, focusing on auditd logs from Linux systems where the xclip tool is known to be installed will improve detection fidelity while reducing the likelihood of encountering false positives due to common clipboard management tasks on user workstations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to collect image data stored in the clipboard from users with the usage of xclip tool.\nXclip has to be installed.\nHighly recommended using rule on servers, due to high usage of clipboard utilities on user workstations.\n",
      "answer": "In order to detect attempts to collect image data stored in the clipboard from users with the usage of xclip tool, you should focus on monitoring the Linux Audit Daemon (auditd) logs for execution events (EXECVE) related to the xclip tool. When xclip is used specifically for interacting with clipboard content, it will show command line arguments indicating this action. Watch for the xclip command followed by arguments that specify the selection target as clipboard ('-selection' or '-sel'), further clarify the target as clipboard or clip ('clipboard' or 'clip'), and define the type of content to be image data (arguments starting with 'image/' after '-t'). Additionally, the use of '-o' indicates that the content is being output, which in this context, suggests the image data from the clipboard is being collected.\n\nIt is important to note that there might be legitimate uses of the xclip tool to manipulate clipboard data, including image content. Therefore, this activity should initially be considered low-level suspicion, requiring further investigation to distinguish malicious use from benign activity.\n\nThis detection is especially valuable on servers where clipboard utilities are typically used less frequently, and the appearance of such commands can be more indicative of suspicious activity. Given the nature of the attack, focusing on auditd logs from Linux systems where the xclip tool is known to be installed will improve detection fidelity while reducing the likelihood of encountering false positives due to common clipboard management tasks on user workstations."
    }
  },
  {
    "instruction": "Please help me detect the following: A General detection for the Get-Clipboard commands in PowerShell logs. This could be an adversary capturing clipboard contents.",
    "context": "",
    "output": "Sure!\nIn order to detect an adversary capturing clipboard contents using Get-Clipboard commands in PowerShell logs, you should: Monitor Windows PowerShell modules for instances where the command 'Get-Clipboard' is executed. This activity is of medium severity and attempts to identify scenarios wherein attackers may be trying to access data copied to the clipboard, which could include sensitive information. It is essential to note that while specific false positives are not identified, occurrences that do not follow the typical pattern of an attack may arise, and each case should be evaluated on its own merits. This detection strategy falls under the practices designed to observe and mitigate tactics associated with credential access or information gathering techniques by malicious entities.\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "A General detection for the Get-Clipboard commands in PowerShell logs. This could be an adversary capturing clipboard contents.",
      "answer": "In order to detect an adversary capturing clipboard contents using Get-Clipboard commands in PowerShell logs, you should: Monitor Windows PowerShell modules for instances where the command 'Get-Clipboard' is executed. This activity is of medium severity and attempts to identify scenarios wherein attackers may be trying to access data copied to the clipboard, which could include sensitive information. It is essential to note that while specific false positives are not identified, occurrences that do not follow the typical pattern of an attack may arise, and each case should be evaluated on its own merits. This detection strategy falls under the practices designed to observe and mitigate tactics associated with credential access or information gathering techniques by malicious entities.\n"
    }
  },
  {
    "instruction": "How to detect: NetSupport Manager service installation on the target system.",
    "context": "",
    "output": "In order to detect NetSupport Manager service installation on the target system, you should focus on monitoring Windows System logs for specific events that signal the installation of this service. Look for logs generated by the 'Service Control Manager' indicating the creation of a new service with an event ID of 7045. Specifically, pay attention to services with the image path containing '\\NetSupport Manager\\client32.exe' and/or services named 'Client32'. This activity is noteworthy as it involves the installation of the NetSupport Manager, which could potentially be used maliciously, although it is important to note that there could be legitimate uses of this tool as well. In terms of cyber security, this behavior aligns with tactics and techniques of execution and persistence, indicating an attempt to establish control over the target system. Assessing the context in which the service was installed is crucial for determining whether it constitutes a security threat or is part of legitimate activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "NetSupport Manager service installation on the target system.",
      "answer": "In order to detect NetSupport Manager service installation on the target system, you should focus on monitoring Windows System logs for specific events that signal the installation of this service. Look for logs generated by the 'Service Control Manager' indicating the creation of a new service with an event ID of 7045. Specifically, pay attention to services with the image path containing '\\NetSupport Manager\\client32.exe' and/or services named 'Client32'. This activity is noteworthy as it involves the installation of the NetSupport Manager, which could potentially be used maliciously, although it is important to note that there could be legitimate uses of this tool as well. In terms of cyber security, this behavior aligns with tactics and techniques of execution and persistence, indicating an attempt to establish control over the target system. Assessing the context in which the service was installed is crucial for determining whether it constitutes a security threat or is part of legitimate activity."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious DACL modifications to allow access to a service from a suspicious trustee. This can be used to override access restrictions set by previous ACLs.",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious DACL modifications to allow access to a service from a suspicious trustee, which can be used to override access restrictions set by previous ACLs, you should: Monitor process creation logs in Windows for the execution of \"sc.exe\". Specifically, look for instances where \"sc.exe\" appears at the end of the image path and its original file name is \"sc.exe\", indicating the service controller is being utilized. Additionally, scan for command lines that contain both \"sdset\" and \"A;\", signifying an attempt to modify Security Descriptors (DACLs) to permit access. Pay special attention to command lines that indicate modifications involving various trustees, such as interactively logged-on user (';IU'), service logon user (';SU'), built-in administrators (';BA'), local system (';SY'), and everyone (';WD'). This comprehensive approach is critical as it helps identify attempts to change DACLs to illicitly grant permissions to services, representing a high-level security risk.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious DACL modifications to allow access to a service from a suspicious trustee. This can be used to override access restrictions set by previous ACLs.",
      "answer": "In order to detect suspicious DACL modifications to allow access to a service from a suspicious trustee, which can be used to override access restrictions set by previous ACLs, you should: Monitor process creation logs in Windows for the execution of \"sc.exe\". Specifically, look for instances where \"sc.exe\" appears at the end of the image path and its original file name is \"sc.exe\", indicating the service controller is being utilized. Additionally, scan for command lines that contain both \"sdset\" and \"A;\", signifying an attempt to modify Security Descriptors (DACLs) to permit access. Pay special attention to command lines that indicate modifications involving various trustees, such as interactively logged-on user (';IU'), service logon user (';SU'), built-in administrators (';BA'), local system (';SY'), and everyone (';WD'). This comprehensive approach is critical as it helps identify attempts to change DACLs to illicitly grant permissions to services, representing a high-level security risk."
    }
  },
  {
    "instruction": "Please help me detect the following: Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs",
    "context": "",
    "output": "Sure!\nIn order to execute arbitrary PowerShell code using SyncAppvPublishingServer.vbs, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the command line contains references to '\\SyncAppvPublishingServer.vbs' combined with the use of a semi-colon, indicating the possible execution of additional arbitrary code. This activity can be indicative of attempts to execute unauthorized PowerShell commands, potentially for malicious purposes. It is essential to keep track of the computer name, user, command line, and parent command line used in these situations to aid in identifying and mitigating such threats. Be aware that while this method of detection is useful, there may be instances where it does not apply (unknown false positives), so it's important to verify the context of detections to avoid misinterpretation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs",
      "answer": "In order to execute arbitrary PowerShell code using SyncAppvPublishingServer.vbs, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the command line contains references to '\\SyncAppvPublishingServer.vbs' combined with the use of a semi-colon, indicating the possible execution of additional arbitrary code. This activity can be indicative of attempts to execute unauthorized PowerShell commands, potentially for malicious purposes. It is essential to keep track of the computer name, user, command line, and parent command line used in these situations to aid in identifying and mitigating such threats. Be aware that while this method of detection is useful, there may be instances where it does not apply (unknown false positives), so it's important to verify the context of detections to avoid misinterpretation."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of files that look like exports of the local SAM (Security Account Manager)",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of files that look like exports of the local SAM (Security Account Manager), you should: Monitor Windows file events for any creation or modification activities where filenames end with specific patterns such as '\\Temp\\sam', '\\sam.sav', '\\Intel\\sam', '\\sam.hive', '\\Perflogs\\sam', '\\ProgramData\\sam', '\\Users\\Public\\sam', '\\AppData\\Local\\sam', '\\AppData\\Roaming\\sam', and '_ShadowSteal.zip', which is associated with the ShadowSteal malware. Also, watch for filenames that contain patterns like '\\hive_sam_', indicating the use of tools like hivenightmare, as well as variations including '\\sam.save', '\\sam.export', '\\~reg_sam.save', '\\sam_backup', '\\sam.bck', and '\\sam.backup'. These indicators suggest an attempt to export or backup the Security Account Manager (SAM) file, which contains sensitive system and user account information. Note that there might be rare instances where similar file activity is part of legitimate administrative activities, however, under a high alert level, these should be scrutinized closely.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of files that look like exports of the local SAM (Security Account Manager)",
      "answer": "In order to detect the creation of files that look like exports of the local SAM (Security Account Manager), you should: Monitor Windows file events for any creation or modification activities where filenames end with specific patterns such as '\\Temp\\sam', '\\sam.sav', '\\Intel\\sam', '\\sam.hive', '\\Perflogs\\sam', '\\ProgramData\\sam', '\\Users\\Public\\sam', '\\AppData\\Local\\sam', '\\AppData\\Roaming\\sam', and '_ShadowSteal.zip', which is associated with the ShadowSteal malware. Also, watch for filenames that contain patterns like '\\hive_sam_', indicating the use of tools like hivenightmare, as well as variations including '\\sam.save', '\\sam.export', '\\~reg_sam.save', '\\sam_backup', '\\sam.bck', and '\\sam.backup'. These indicators suggest an attempt to export or backup the Security Account Manager (SAM) file, which contains sensitive system and user account information. Note that there might be rare instances where similar file activity is part of legitimate administrative activities, however, under a high alert level, these should be scrutinized closely."
    }
  },
  {
    "instruction": "Explain how should I detect the following: service installation that uses a suspicious double ampersand used in the image path value",
    "context": "",
    "output": "In order to detect a service installation that uses a suspicious double ampersand used in the image path value, you should: Focus on monitoring Windows system logs, particularly those generated by the Service Control Manager. Look for the event with an ID of 7045, which is indicative of a new service being installed on the system. Specifically, scrutinize the ImagePath field of such events for occurrences of a double ampersand ('&&'), as this can be a hallmark of malicious tampering intended to obfuscate harmful actions or execute multiple commands. It's important to note that this behavior is flagged as highly suspicious, although there may be rare instances where it does not necessarily signify malicious activity, leading to unknown false positives. This method falls under techniques related to the execution phase of an attack, more specifically, those that might be trying to persist on the system or establish a foothold through services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "service installation that uses a suspicious double ampersand used in the image path value",
      "answer": "In order to detect a service installation that uses a suspicious double ampersand used in the image path value, you should: Focus on monitoring Windows system logs, particularly those generated by the Service Control Manager. Look for the event with an ID of 7045, which is indicative of a new service being installed on the system. Specifically, scrutinize the ImagePath field of such events for occurrences of a double ampersand ('&&'), as this can be a hallmark of malicious tampering intended to obfuscate harmful actions or execute multiple commands. It's important to note that this behavior is flagged as highly suspicious, although there may be rare instances where it does not necessarily signify malicious activity, leading to unknown false positives. This method falls under techniques related to the execution phase of an attack, more specifically, those that might be trying to persist on the system or establish a foothold through services."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of Sysinternals PsService which can be abused for service reconnaissance and tampering",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of Sysinternals PsService which can be abused for service reconnaissance and tampering, you should monitor process creation logs on Windows systems. Specifically, look for events where the process being created has the OriginalFileName attribute set to 'psservice.exe' or where the Image attribute of the process ends with '\\PsService.exe' or '\\PsService64.exe'. This will help in identifying instances where the PsService utility is being executed, which, while potentially legitimate, can also indicate malicious activity aimed at querying, modifying, or otherwise interacting with system services in a manner that could compromise security or facilitate further attacks. It's important to note that there could be false positives, particularly in scenarios where an administrator is legitimately using PsService for maintenance or administration purposes. Therefore, while this detection is set at a medium level of confidence, any alerts should be investigated to differentiate between benign and malicious use of PsService.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of Sysinternals PsService which can be abused for service reconnaissance and tampering",
      "answer": "In order to detect usage of Sysinternals PsService which can be abused for service reconnaissance and tampering, you should monitor process creation logs on Windows systems. Specifically, look for events where the process being created has the OriginalFileName attribute set to 'psservice.exe' or where the Image attribute of the process ends with '\\PsService.exe' or '\\PsService64.exe'. This will help in identifying instances where the PsService utility is being executed, which, while potentially legitimate, can also indicate malicious activity aimed at querying, modifying, or otherwise interacting with system services in a manner that could compromise security or facilitate further attacks. It's important to note that there could be false positives, particularly in scenarios where an administrator is legitimately using PsService for maintenance or administration purposes. Therefore, while this detection is set at a medium level of confidence, any alerts should be investigated to differentiate between benign and malicious use of PsService."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through Windows Registry where the SAM database is stored",
    "context": "",
    "output": "In order to detect when adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through Windows Registry where the SAM database is stored, you should: Focus on monitoring process creation logs on Windows systems. Look for commands that contain the term 'save' in conjunction with actions that access key Windows Registry paths related to the SAM database, specifically: HKLM\\sam, HKLM\\system, and HKLM\\security. When both of these conditions are met \u2014 a command references saving and access to critical SAM database locations \u2014 it is indicative of a high-level threat. Such activities are unusual and not commonly part of benign operations, pointing towards a potential compromise aimed at extracting sensitive credential materials from the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through Windows Registry where the SAM database is stored",
      "answer": "In order to detect when adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through Windows Registry where the SAM database is stored, you should: Focus on monitoring process creation logs on Windows systems. Look for commands that contain the term 'save' in conjunction with actions that access key Windows Registry paths related to the SAM database, specifically: HKLM\\sam, HKLM\\system, and HKLM\\security. When both of these conditions are met \u2014 a command references saving and access to critical SAM database locations \u2014 it is indicative of a high-level threat. Such activities are unusual and not commonly part of benign operations, pointing towards a potential compromise aimed at extracting sensitive credential materials from the system."
    }
  },
  {
    "instruction": "How to detect: S3 Browser utility performing reconnaissance looking for existing IAM Users without a LoginProfile defined then (when found) creating a LoginProfile.",
    "context": "",
    "output": "In order to detect S3 Browser utility performing reconnaissance looking for existing IAM Users without a LoginProfile defined then (when found) creating a LoginProfile, you should monitor AWS CloudTrail logs specifically for interaction with the IAM service. Focus on activities where the event source is 'iam.amazonaws.com', and the event names include 'GetLoginProfile' and 'CreateLoginProfile'. These activities indicate that a user is querying for IAM LoginProfiles and potentially creating them, which can be a part of reconnaissance or an attack setup phase. Additionally, pay special attention to actions initiated with a user agent that contains the string 'S3 Browser', as this signifies the use of the S3 Browser utility, which is not commonly used for such administrative tasks. Recognizing these patterns can be indicative of an attacker attempting to identify IAM Users without LoginProfiles for exploitation purposes or creating LoginProfiles for lateral movement or persistence. While monitoring, be mindful of potential valid usages of S3 Browser for IAM LoginProfile listing and/or creation, which are considered false positives. The associated MITRE ATT&CK tactics and techniques for this activity include Reconnaissance and Resource Development.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "S3 Browser utility performing reconnaissance looking for existing IAM Users without a LoginProfile defined then (when found) creating a LoginProfile.",
      "answer": "In order to detect S3 Browser utility performing reconnaissance looking for existing IAM Users without a LoginProfile defined then (when found) creating a LoginProfile, you should monitor AWS CloudTrail logs specifically for interaction with the IAM service. Focus on activities where the event source is 'iam.amazonaws.com', and the event names include 'GetLoginProfile' and 'CreateLoginProfile'. These activities indicate that a user is querying for IAM LoginProfiles and potentially creating them, which can be a part of reconnaissance or an attack setup phase. Additionally, pay special attention to actions initiated with a user agent that contains the string 'S3 Browser', as this signifies the use of the S3 Browser utility, which is not commonly used for such administrative tasks. Recognizing these patterns can be indicative of an attacker attempting to identify IAM Users without LoginProfiles for exploitation purposes or creating LoginProfiles for lateral movement or persistence. While monitoring, be mindful of potential valid usages of S3 Browser for IAM LoginProfile listing and/or creation, which are considered false positives. The associated MITRE ATT&CK tactics and techniques for this activity include Reconnaissance and Resource Development."
    }
  },
  {
    "instruction": "How to detect: Obfuscated Powershell via COMPRESS OBFUSCATION",
    "context": "",
    "output": "In order to detect Obfuscated Powershell via COMPRESS OBFUSCATION, you should: Monitor Windows security audit logs, specifically looking for event ID 4697 which signifies a service was installed on the system. This detection is significant because when attackers use obfuscated PowerShell scripts, they often employ compression techniques to evade detection. These scripts, when decompressed, execute malicious activities. The audit logs must be configured correctly to track the 'System Security Extension' subcategory to capture event ID 4697.\n\nFor a more precise identification, focus on the 'ServiceFileName' field within these logs. This field should be inspected for the presence of specific strings that indicate the use of compression and encoding methods within PowerShell scripts. Specifically, look for PowerShell scripts that include 'new-object', 'text.encoding]::ascii', and 'readtoend' all together, which suggests the script is reading encoded data. Additionally, the appearance of either 'system.io.compression.deflatestream' or 'system.io.streamreader' within the 'ServiceFileName' field signifies the possible use of stream readers or compression methods in the script, which are common in obfuscation to disguise the code's true purpose.\n\nBe aware that while this method aims to detect malicious use of obfuscated PowerShell via compression techniques, false positives may occur, indicating that detections under this criteria are not always malicious. Nevertheless, given a medium-level threat rating, each detection should be investigated to ascertain whether it is a benign or malicious use of obfuscated PowerShell scripts. This approach aligns with identifying tactics and techniques that involve the execution of obfuscated code to conceal malicious PowerShell activities, a hallmark of sophisticated cyber attacks seeking to bypass security measures and execute unauthorized commands.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via COMPRESS OBFUSCATION",
      "answer": "In order to detect Obfuscated Powershell via COMPRESS OBFUSCATION, you should: Monitor Windows security audit logs, specifically looking for event ID 4697 which signifies a service was installed on the system. This detection is significant because when attackers use obfuscated PowerShell scripts, they often employ compression techniques to evade detection. These scripts, when decompressed, execute malicious activities. The audit logs must be configured correctly to track the 'System Security Extension' subcategory to capture event ID 4697.\n\nFor a more precise identification, focus on the 'ServiceFileName' field within these logs. This field should be inspected for the presence of specific strings that indicate the use of compression and encoding methods within PowerShell scripts. Specifically, look for PowerShell scripts that include 'new-object', 'text.encoding]::ascii', and 'readtoend' all together, which suggests the script is reading encoded data. Additionally, the appearance of either 'system.io.compression.deflatestream' or 'system.io.streamreader' within the 'ServiceFileName' field signifies the possible use of stream readers or compression methods in the script, which are common in obfuscation to disguise the code's true purpose.\n\nBe aware that while this method aims to detect malicious use of obfuscated PowerShell via compression techniques, false positives may occur, indicating that detections under this criteria are not always malicious. Nevertheless, given a medium-level threat rating, each detection should be investigated to ascertain whether it is a benign or malicious use of obfuscated PowerShell scripts. This approach aligns with identifying tactics and techniques that involve the execution of obfuscated code to conceal malicious PowerShell activities, a hallmark of sophisticated cyber attacks seeking to bypass security measures and execute unauthorized commands."
    }
  },
  {
    "instruction": "Explain how should I detect the following: remote task creation via at.exe or API interacting with ATSVC namedpipe",
    "context": "",
    "output": "In order to detect remote task creation via at.exe or API interacting with ATSVC namedpipe, you should focus on monitoring Windows Security log entries that signify attempts to interact with the ATSVC named pipe in a manner that allows for the writing of data. Specifically, be vigilant for log entries with an Event ID of 5145, which indicates a network file share event related to the advanced audit policy setting \"Object Access > Audit Detailed File Share.\" This setting should be configured to log both successful and failed attempts. \n\nThe critical factors to watch for include access attempts to the IPC$ share (denoted by the ShareName '\\\\*\\IPC$') aimed at the RelativeTargetName 'atsvc', and involve write data permissions (Accesses contains 'WriteData'). These conditions point towards an operation attempting to create tasks remotely, either by using the at.exe command-line utility or similar APIs that interact with the ATSVC (Alerter Service Task Scheduler) named pipe, which can be indicative of malicious behavior. \n\nBe aware that while this monitoring is essential for enhancing security posture against potential remote task creation attacks, certain benign activities might occasionally trigger these alerts; thus, the possibility of unknown false positives exists, which underscores the importance of contextual analysis of alerts. The risk level associated with these detection parameters is considered medium, reflecting the need to balance vigilance with the acknowledgment that not all detections will be malicious. This approach aligns with the MITRE ATT&CK tactics of Execution and Persistence, specifically focusing on techniques that involve execution of tasks or commands remotely on a compromised system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote task creation via at.exe or API interacting with ATSVC namedpipe",
      "answer": "In order to detect remote task creation via at.exe or API interacting with ATSVC namedpipe, you should focus on monitoring Windows Security log entries that signify attempts to interact with the ATSVC named pipe in a manner that allows for the writing of data. Specifically, be vigilant for log entries with an Event ID of 5145, which indicates a network file share event related to the advanced audit policy setting \"Object Access > Audit Detailed File Share.\" This setting should be configured to log both successful and failed attempts. \n\nThe critical factors to watch for include access attempts to the IPC$ share (denoted by the ShareName '\\\\*\\IPC$') aimed at the RelativeTargetName 'atsvc', and involve write data permissions (Accesses contains 'WriteData'). These conditions point towards an operation attempting to create tasks remotely, either by using the at.exe command-line utility or similar APIs that interact with the ATSVC (Alerter Service Task Scheduler) named pipe, which can be indicative of malicious behavior. \n\nBe aware that while this monitoring is essential for enhancing security posture against potential remote task creation attacks, certain benign activities might occasionally trigger these alerts; thus, the possibility of unknown false positives exists, which underscores the importance of contextual analysis of alerts. The risk level associated with these detection parameters is considered medium, reflecting the need to balance vigilance with the acknowledgment that not all detections will be malicious. This approach aligns with the MITRE ATT&CK tactics of Execution and Persistence, specifically focusing on techniques that involve execution of tasks or commands remotely on a compromised system."
    }
  },
  {
    "instruction": "Can you explain how to detect: Identifies when an admission controller is executed in GCP Kubernetes.\nA Kubernetes Admission controller intercepts, and possibly modifies, requests to the Kubernetes API server.\nThe behavior of this admission controller is determined by an admission webhook (MutatingAdmissionWebhook or ValidatingAdmissionWebhook) that the user deploys in the cluster.\nAn adversary can use such webhooks as the MutatingAdmissionWebhook for obtaining persistence in the cluster.\nFor example, attackers can intercept and modify the pod creation operations in the cluster and add their malicious container to every created pod. An adversary can use the webhook ValidatingAdmissionWebhook, which could be used to obtain access credentials.\nAn adversary could use the webhook to intercept the requests to the API server, record secrets, and other sensitive information.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to identify when an admission controller is executed in GCP Kubernetes, you should: Monitor GCP audit logs for specific method names that start with 'admissionregistration.k8s.io.v', contain either '.mutatingwebhookconfigurations.' or '.validatingwebhookconfigurations.', and end with 'create', 'patch', or 'replace'. These method names are associated with Kubernetes Admission Controllers, which play a crucial role in the Kubernetes API request processing pipeline. Admission controllers can intercept, modify, or deny requests to the Kubernetes API, thus controlling the behavior of the cluster. By monitoring for the creation, modification, or replacement of mutating or validating webhook configurations, it's possible to detect potential malicious activity aimed at gaining persistence within the cluster or intercepting sensitive information. This detection focuses on operations within the Google Cloud Platform's Kubernetes service, specifically actions that could indicate an adversary's attempt to deploy a mutating admission webhook for malicious pod alteration or a validating admission webhook to capture access credentials and other sensitive data. Note that legitimate administrative activity may also trigger these detections, so it's important to validate and exempt known good behavior to reduce false positives. The level of concern for such detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies when an admission controller is executed in GCP Kubernetes.\nA Kubernetes Admission controller intercepts, and possibly modifies, requests to the Kubernetes API server.\nThe behavior of this admission controller is determined by an admission webhook (MutatingAdmissionWebhook or ValidatingAdmissionWebhook) that the user deploys in the cluster.\nAn adversary can use such webhooks as the MutatingAdmissionWebhook for obtaining persistence in the cluster.\nFor example, attackers can intercept and modify the pod creation operations in the cluster and add their malicious container to every created pod. An adversary can use the webhook ValidatingAdmissionWebhook, which could be used to obtain access credentials.\nAn adversary could use the webhook to intercept the requests to the API server, record secrets, and other sensitive information.\n",
      "answer": "In order to identify when an admission controller is executed in GCP Kubernetes, you should: Monitor GCP audit logs for specific method names that start with 'admissionregistration.k8s.io.v', contain either '.mutatingwebhookconfigurations.' or '.validatingwebhookconfigurations.', and end with 'create', 'patch', or 'replace'. These method names are associated with Kubernetes Admission Controllers, which play a crucial role in the Kubernetes API request processing pipeline. Admission controllers can intercept, modify, or deny requests to the Kubernetes API, thus controlling the behavior of the cluster. By monitoring for the creation, modification, or replacement of mutating or validating webhook configurations, it's possible to detect potential malicious activity aimed at gaining persistence within the cluster or intercepting sensitive information. This detection focuses on operations within the Google Cloud Platform's Kubernetes service, specifically actions that could indicate an adversary's attempt to deploy a mutating admission webhook for malicious pod alteration or a validating admission webhook to capture access credentials and other sensitive data. Note that legitimate administrative activity may also trigger these detections, so it's important to validate and exempt known good behavior to reduce false positives. The level of concern for such detection is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: an exploitation attempt in which the UAC consent dialogue is used to invoke an Internet Explorer process running as LOCAL_SYSTEM",
    "context": "",
    "output": "Sure!\nIn order to detect an exploitation attempt in which the UAC consent dialogue is used to invoke an Internet Explorer process running as LOCAL_SYSTEM, you should: Monitor the creation of processes on Windows systems, specifically focusing on any instance where the Internet Explorer (iexplore.exe) is launched by the UAC consent dialogue process (consent.exe). The indication to look for includes cases where the Internet Explorer process is initiated with command lines that contain 'http' (suggesting web navigation or internet usage). Additionally, it's critical to examine the integrity level or user context of these processes, looking particularly for processes running at the 'System' integrity level or processes initiated by users with names containing 'AUTHORI' or 'AUTORI', which could cover various language settings indicating administrative or authorized users. This detection is of critical importance due to the potential misuse of legitimate system functionalities to achieve unauthorized access or execute malicious actions with elevated privileges.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an exploitation attempt in which the UAC consent dialogue is used to invoke an Internet Explorer process running as LOCAL_SYSTEM",
      "answer": "In order to detect an exploitation attempt in which the UAC consent dialogue is used to invoke an Internet Explorer process running as LOCAL_SYSTEM, you should: Monitor the creation of processes on Windows systems, specifically focusing on any instance where the Internet Explorer (iexplore.exe) is launched by the UAC consent dialogue process (consent.exe). The indication to look for includes cases where the Internet Explorer process is initiated with command lines that contain 'http' (suggesting web navigation or internet usage). Additionally, it's critical to examine the integrity level or user context of these processes, looking particularly for processes running at the 'System' integrity level or processes initiated by users with names containing 'AUTHORI' or 'AUTORI', which could cover various language settings indicating administrative or authorized users. This detection is of critical importance due to the potential misuse of legitimate system functionalities to achieve unauthorized access or execute malicious actions with elevated privileges."
    }
  },
  {
    "instruction": "How can I detect: Identifies potential full network packet capture in gcp. This feature can potentially be abused to read sensitive data from unencrypted internal traffic.",
    "context": "",
    "output": "In order to identify potential full network packet capture in GCP, which can potentially be abused to read sensitive data from unencrypted internal traffic, you should monitor GCP audit logs specifically for the Google Cloud Platform (GCP) audit service. Focus on tracking the usage of certain methods concerning packet mirroring, as this functionality can be indicative of attempts to capture network traffic. The methods of interest are:\n\n- Retrieving a PacketMirroring configuration (`Compute.PacketMirrorings.Get`)\n- Deleting a PacketMirroring configuration (`Compute.PacketMirrorings.Delete`)\n- Inserting a new PacketMirroring configuration (`Compute.PacketMirrorings.Insert`)\n- Patching an existing PacketMirroring configuration (`Compute.PacketMirrorings.Patch`)\n- Listing all PacketMirroring configurations in a project (`Compute.PacketMirrorings.List`)\n- Aggregating a list of all PacketMirroring configurations across projects (`Compute.PacketMirrorings.aggregatedList`)\n\nIt's important to consider the context of these actions, as system or network administrators may legitimately use these methods for full network packet capture for troubleshooting or monitoring purposes. Therefore, verify if the detected activity aligns with known and expected behavior within your GCP environment. Implement an exemption process in your monitoring strategy for known legitimate uses to reduce the risk of false positives. This careful monitoring approach stands as a proactive measure to mitigate the risk of sensitive information being compromised through the abuse of packet mirroring features within the GCP infrastructure. The threat level associated with this behavior is deemed medium, emphasizing the need for diligent supervision while also acknowledging potential legitimate uses of these features.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies potential full network packet capture in gcp. This feature can potentially be abused to read sensitive data from unencrypted internal traffic.",
      "answer": "In order to identify potential full network packet capture in GCP, which can potentially be abused to read sensitive data from unencrypted internal traffic, you should monitor GCP audit logs specifically for the Google Cloud Platform (GCP) audit service. Focus on tracking the usage of certain methods concerning packet mirroring, as this functionality can be indicative of attempts to capture network traffic. The methods of interest are:\n\n- Retrieving a PacketMirroring configuration (`Compute.PacketMirrorings.Get`)\n- Deleting a PacketMirroring configuration (`Compute.PacketMirrorings.Delete`)\n- Inserting a new PacketMirroring configuration (`Compute.PacketMirrorings.Insert`)\n- Patching an existing PacketMirroring configuration (`Compute.PacketMirrorings.Patch`)\n- Listing all PacketMirroring configurations in a project (`Compute.PacketMirrorings.List`)\n- Aggregating a list of all PacketMirroring configurations across projects (`Compute.PacketMirrorings.aggregatedList`)\n\nIt's important to consider the context of these actions, as system or network administrators may legitimately use these methods for full network packet capture for troubleshooting or monitoring purposes. Therefore, verify if the detected activity aligns with known and expected behavior within your GCP environment. Implement an exemption process in your monitoring strategy for known legitimate uses to reduce the risk of false positives. This careful monitoring approach stands as a proactive measure to mitigate the risk of sensitive information being compromised through the abuse of packet mirroring features within the GCP infrastructure. The threat level associated with this behavior is deemed medium, emphasizing the need for diligent supervision while also acknowledging potential legitimate uses of these features."
    }
  },
  {
    "instruction": "How to detect: usage of 7zip utilities (7z.exe, 7za.exe and 7zr.exe) to extract password protected zip files.",
    "context": "",
    "output": "In order to detect usage of 7zip utilities (7z.exe, 7za.exe and 7zr.exe) to extract password protected zip files, you should: Focus on monitoring the process creation log source in Windows environments. Look for events where the description contains '7-Zip', or where the image path ends with '\\7z.exe', '\\7zr.exe', or '\\7za.exe', indicating the use of 7zip utilities. Additionally, pay attention to the OriginalFileName field for instances of '7z.exe' or '7za.exe' to accurately identify the execution of these utilities. To specifically catch the extraction of password-protected files, examine the CommandLine for the simultaneous presence of '-p' (indicating the use of a password), 'x' (denoting extract command), and '-o' (specifying the output directory). This combination of conditions ensures that the focus is on activities related to the extraction of files from password-protected archives using 7zip. Be mindful that legitimate use of these commands for extracting password-protected files is common in some environments, which could lead to false positives. The detection level is considered medium, highlighting the potential security risk without overstating the likelihood of malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of 7zip utilities (7z.exe, 7za.exe and 7zr.exe) to extract password protected zip files.",
      "answer": "In order to detect usage of 7zip utilities (7z.exe, 7za.exe and 7zr.exe) to extract password protected zip files, you should: Focus on monitoring the process creation log source in Windows environments. Look for events where the description contains '7-Zip', or where the image path ends with '\\7z.exe', '\\7zr.exe', or '\\7za.exe', indicating the use of 7zip utilities. Additionally, pay attention to the OriginalFileName field for instances of '7z.exe' or '7za.exe' to accurately identify the execution of these utilities. To specifically catch the extraction of password-protected files, examine the CommandLine for the simultaneous presence of '-p' (indicating the use of a password), 'x' (denoting extract command), and '-o' (specifying the output directory). This combination of conditions ensures that the focus is on activities related to the extraction of files from password-protected archives using 7zip. Be mindful that legitimate use of these commands for extracting password-protected files is common in some environments, which could lead to false positives. The detection level is considered medium, highlighting the potential security risk without overstating the likelihood of malicious intent."
    }
  },
  {
    "instruction": "How can I detect: file with a suspicious extension is created in the startup folder",
    "context": "",
    "output": "In order to detect when a file with a suspicious extension is created in the startup folder, you should: Monitor Windows file events for any files being created or modified in the \"\\Windows\\Start Menu\\Programs\\Startup\\\" directory that have extensions commonly associated with malicious scripts and executables. Specifically, lookout for files ending in extensions such as '.vbs' (VBScript files), '.vbe' (VBScript Encoded Script files), '.bat' (Batch files), '.ps1' (PowerShell scripts), '.hta' (HTML Application files), '.dll' (Dynamic Link Library files), '.jar' (Java Archive files), '.msi' (Microsoft Installer packages), '.scr' (Screen saver files), and '.cmd' (Command Script files). These file types can potentially be used by attackers to achieve persistence by running malicious code automatically on system startup. It's noted that there might be rare legitimate uses for some of these file types in the startup folder, but such occurrences are exceptional and warrant high caution due to the high risk associated with them.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "file with a suspicious extension is created in the startup folder",
      "answer": "In order to detect when a file with a suspicious extension is created in the startup folder, you should: Monitor Windows file events for any files being created or modified in the \"\\Windows\\Start Menu\\Programs\\Startup\\\" directory that have extensions commonly associated with malicious scripts and executables. Specifically, lookout for files ending in extensions such as '.vbs' (VBScript files), '.vbe' (VBScript Encoded Script files), '.bat' (Batch files), '.ps1' (PowerShell scripts), '.hta' (HTML Application files), '.dll' (Dynamic Link Library files), '.jar' (Java Archive files), '.msi' (Microsoft Installer packages), '.scr' (Screen saver files), and '.cmd' (Command Script files). These file types can potentially be used by attackers to achieve persistence by running malicious code automatically on system startup. It's noted that there might be rare legitimate uses for some of these file types in the startup folder, but such occurrences are exceptional and warrant high caution due to the high risk associated with them."
    }
  },
  {
    "instruction": "Explain how should I detect the following: executions of scripts located in potentially suspicious locations such as \"/tmp\" via a shell such as \"bash\", \"sh\", etc.",
    "context": "",
    "output": "In order to detect executions of scripts located in potentially suspicious locations such as \"/tmp\" via a shell such as \"bash\", \"sh\", etc., you should monitor Linux systems for the creation of process events that involve the use of various common shells including bash, csh, dash, fish, ksh, sh, and zsh. Specifically, focus on commands that include the '-c' flag, which denotes that the command is being read from the next string in the environment, thus indicating a direct command execution rather than the start of an interactive shell session. Additionally, it's crucial to look for commands that involve scripts located in locations considered to be potentially suspicious, like '/tmp/'. These criteria aim to highlight instances where scripts, which could be malicious, are being run from locations that are typically used by attackers to store and execute malware or scripts due to their writable nature for most users. This technique is a common tactic used in various types of attacks to execute malicious scripts without leaving much trace. It's important to investigate these instances to rule out false positives, as legitimate tasks might occasionally perform similar actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "executions of scripts located in potentially suspicious locations such as \"/tmp\" via a shell such as \"bash\", \"sh\", etc.",
      "answer": "In order to detect executions of scripts located in potentially suspicious locations such as \"/tmp\" via a shell such as \"bash\", \"sh\", etc., you should monitor Linux systems for the creation of process events that involve the use of various common shells including bash, csh, dash, fish, ksh, sh, and zsh. Specifically, focus on commands that include the '-c' flag, which denotes that the command is being read from the next string in the environment, thus indicating a direct command execution rather than the start of an interactive shell session. Additionally, it's crucial to look for commands that involve scripts located in locations considered to be potentially suspicious, like '/tmp/'. These criteria aim to highlight instances where scripts, which could be malicious, are being run from locations that are typically used by attackers to store and execute malware or scripts due to their writable nature for most users. This technique is a common tactic used in various types of attacks to execute malicious scripts without leaving much trace. It's important to investigate these instances to rule out false positives, as legitimate tasks might occasionally perform similar actions."
    }
  },
  {
    "instruction": "Explain how should I detect the following: uncommon \"conhost\" child processes. This could be a sign of \"conhost\" usage as a LOLBIN or potential process injection activity.",
    "context": "",
    "output": "In order to detect uncommon \"conhost\" child processes, which could be a sign of \"conhost\" usage as a LOLBIN or potential process injection activity, you should monitor for process creation events within the Windows operating environment. Specifically, focus on processes that have been spawned by 'conhost.exe' as their parent image. This is an indicator of suspicious activity since 'conhost.exe' commonly does not spawn child processes under normal circumstances.\n\nBe aware of false positives that might arise from specific system or third-party software behaviors. These include known benign processes from the SystemTraceProvider-Process provider that might falsely appear malicious due to their association with 'conhost.exe'. Additionally, process creation events related to Git operations, such as using 'git.exe' with commands like 'show --textconv' or 'cat-file -s', might be mistakenly flagged when they originate from or involve 'conhost.exe'. Therefore, these should be considered when evaluating potential threats.\n\nFurthermore, pay close attention to the command lines used in these process creation events. Specifically, scrutinize processes with command lines indicating a parent process of 'conhost.exe' attempting to execute Git commands, as well as any use of 'conhost.exe' with unusual flags that might suggest an attempt to force certain behaviors or compatibility modes.\n\nBy applying these detection strategies, while also excluding known legitimate usage patterns of 'conhost.exe' related to specific provider names, Git operations, and certain command line patterns, you can more effectively identify potentially malicious activity involving 'conhost.exe'. This approach helps in reducing the noise from false positives and focusing on events that are more likely indicative of an attack involving LOLBINs or process injection techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "uncommon \"conhost\" child processes. This could be a sign of \"conhost\" usage as a LOLBIN or potential process injection activity.",
      "answer": "In order to detect uncommon \"conhost\" child processes, which could be a sign of \"conhost\" usage as a LOLBIN or potential process injection activity, you should monitor for process creation events within the Windows operating environment. Specifically, focus on processes that have been spawned by 'conhost.exe' as their parent image. This is an indicator of suspicious activity since 'conhost.exe' commonly does not spawn child processes under normal circumstances.\n\nBe aware of false positives that might arise from specific system or third-party software behaviors. These include known benign processes from the SystemTraceProvider-Process provider that might falsely appear malicious due to their association with 'conhost.exe'. Additionally, process creation events related to Git operations, such as using 'git.exe' with commands like 'show --textconv' or 'cat-file -s', might be mistakenly flagged when they originate from or involve 'conhost.exe'. Therefore, these should be considered when evaluating potential threats.\n\nFurthermore, pay close attention to the command lines used in these process creation events. Specifically, scrutinize processes with command lines indicating a parent process of 'conhost.exe' attempting to execute Git commands, as well as any use of 'conhost.exe' with unusual flags that might suggest an attempt to force certain behaviors or compatibility modes.\n\nBy applying these detection strategies, while also excluding known legitimate usage patterns of 'conhost.exe' related to specific provider names, Git operations, and certain command line patterns, you can more effectively identify potentially malicious activity involving 'conhost.exe'. This approach helps in reducing the noise from false positives and focusing on events that are more likely indicative of an attack involving LOLBINs or process injection techniques."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files, you should: Look for instances where process creation events are generated within a Windows operating environment for specific browser executables, namely 'brave.exe', 'chrome.exe', 'msedge.exe', 'opera.exe', or 'vivaldi.exe'. These browser processes should be flagged when their command line arguments include both the '--headless' option, indicating they are running without a user interface, and the 'dump-dom' command, which suggests an automatic document object model (DOM) dump. Additionally, the presence of 'http' in the command line hints that the operation involves network communication. This activity is often not typical for day-to-day operations and, thus, has a high level of suspicion associated with it.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files",
      "answer": "In order to detect execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files, you should: Look for instances where process creation events are generated within a Windows operating environment for specific browser executables, namely 'brave.exe', 'chrome.exe', 'msedge.exe', 'opera.exe', or 'vivaldi.exe'. These browser processes should be flagged when their command line arguments include both the '--headless' option, indicating they are running without a user interface, and the 'dump-dom' command, which suggests an automatic document object model (DOM) dump. Additionally, the presence of 'http' in the command line hints that the operation involves network communication. This activity is often not typical for day-to-day operations and, thus, has a high level of suspicion associated with it."
    }
  },
  {
    "instruction": "How can I detect: PowerShell scripts that try to access the default Windows MailApp MailBox. This indicates manipulation of or access to the stored emails of a user. E.g. this could be used by an attacker to exfiltrate or delete the content of the emails.",
    "context": "",
    "output": "In order to detect PowerShell scripts that try to access the default Windows MailApp MailBox, indicating manipulation of or access to the stored emails of a user, such as potentially allowing an attacker to exfiltrate or delete the content of the emails, you should monitor Windows PowerShell script activities. Focus on identifying scripts engaging with the directory path that includes '\\Comms\\Unistore\\data', which is associated with the location where Windows MailApp stores emails. This surveillance should be implemented under the ps_script category for Windows, ensuring the monitoring aligns with the needed detection of unauthorized access or manipulation attempts directed at a user's stored email content. The identification process should rely on recognizing specific script text patterns that contain the mentioned directory path. While detections at this level are rated with a medium level of confidence, it is essential to consider that there might be scenarios where legitimate activities could cause similar detections, though such cases are usually labeled as unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell scripts that try to access the default Windows MailApp MailBox. This indicates manipulation of or access to the stored emails of a user. E.g. this could be used by an attacker to exfiltrate or delete the content of the emails.",
      "answer": "In order to detect PowerShell scripts that try to access the default Windows MailApp MailBox, indicating manipulation of or access to the stored emails of a user, such as potentially allowing an attacker to exfiltrate or delete the content of the emails, you should monitor Windows PowerShell script activities. Focus on identifying scripts engaging with the directory path that includes '\\Comms\\Unistore\\data', which is associated with the location where Windows MailApp stores emails. This surveillance should be implemented under the ps_script category for Windows, ensuring the monitoring aligns with the needed detection of unauthorized access or manipulation attempts directed at a user's stored email content. The identification process should rely on recognizing specific script text patterns that contain the mentioned directory path. While detections at this level are rated with a medium level of confidence, it is essential to consider that there might be scenarios where legitimate activities could cause similar detections, though such cases are usually labeled as unknown false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence. Which will get invoked when an application crashes",
    "context": "",
    "output": "Sure!\nIn order to detect the addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence, which will get invoked when an application crashes, you should: Monitor Windows registry settings specifically under the category for registry changes, targeting the Windows product. Focus on detecting events where a value is being set (EventType: SetValue) specifically to the registry path ending with '\\Microsoft\\.NETFramework\\DbgManagedDebugger'. It is critical to exclude events where the details match a legitimate debugger setup, specifically the use of \"C:\\Windows\\system32\\vsjitdebugger.exe\" with various process and environment parameters. This exclusion helps in reducing false positives that are common in environments where developers might legitimately set up a debugger. Be aware that changing registry values, particularly in the context described, can be a technique used to maintain persistence by ensuring a debugger gets called upon application crashes, providing a covert way to execute malicious payloads. This monitoring should be considered of medium importance and should be attentive to the potential legitimate use of the debugger setup, particularly on developers\u2019 machines, to avoid unnecessary alarms. The tactics and techniques associated with this behavior include persistence, as it aims to ensure continuous malicious presence on the affected system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence. Which will get invoked when an application crashes",
      "answer": "In order to detect the addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence, which will get invoked when an application crashes, you should: Monitor Windows registry settings specifically under the category for registry changes, targeting the Windows product. Focus on detecting events where a value is being set (EventType: SetValue) specifically to the registry path ending with '\\Microsoft\\.NETFramework\\DbgManagedDebugger'. It is critical to exclude events where the details match a legitimate debugger setup, specifically the use of \"C:\\Windows\\system32\\vsjitdebugger.exe\" with various process and environment parameters. This exclusion helps in reducing false positives that are common in environments where developers might legitimately set up a debugger. Be aware that changing registry values, particularly in the context described, can be a technique used to maintain persistence by ensuring a debugger gets called upon application crashes, providing a covert way to execute malicious payloads. This monitoring should be considered of medium importance and should be attentive to the potential legitimate use of the debugger setup, particularly on developers\u2019 machines, to avoid unnecessary alarms. The tactics and techniques associated with this behavior include persistence, as it aims to ensure continuous malicious presence on the affected system."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process.\nThis way we are also able to catch cases in which the attacker has renamed the procdump executable.\n",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process, enabling the detection of cases in which the attacker has renamed the procdump executable, you should: Focus on monitoring the creation of processes within Windows. Specifically, look for instances where the command line includes '-ma' or '/ma', which are parameters possibly used in dumping the lsass process memory, a common target for attackers seeking to extract credentials. Also, be on the lookout for command line instances containing ' ls', a shorthand indicating operations targeting the lsass process. The occurrence of these specific command line flags in process creation events suggests a high likelihood of an attack, aiming to misuse the SysInternals Procdump utility for malicious purposes. Given that legitimate use of these command line options for dumping the lsass process memory is highly unlikely, any detection of such activity should be treated with suspicion. However, be mindful of potential false positives, for instance, from another tool utilizing command line flags that appear similar to those used by ProcDump.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process.\nThis way we are also able to catch cases in which the attacker has renamed the procdump executable.\n",
      "answer": "In order to detect suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process, enabling the detection of cases in which the attacker has renamed the procdump executable, you should: Focus on monitoring the creation of processes within Windows. Specifically, look for instances where the command line includes '-ma' or '/ma', which are parameters possibly used in dumping the lsass process memory, a common target for attackers seeking to extract credentials. Also, be on the lookout for command line instances containing ' ls', a shorthand indicating operations targeting the lsass process. The occurrence of these specific command line flags in process creation events suggests a high likelihood of an attack, aiming to misuse the SysInternals Procdump utility for malicious purposes. Given that legitimate use of these command line options for dumping the lsass process memory is highly unlikely, any detection of such activity should be treated with suspicion. However, be mindful of potential false positives, for instance, from another tool utilizing command line flags that appear similar to those used by ProcDump."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of a remote thread from a Powershell process to another process",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation of a remote thread from a Powershell process to another process, you should focus on monitoring Windows environments, particularly looking at events that indicate the creation of remote threads. Pay special attention to events where the source of the remote thread creation stems from either a Powershell executable (`powershell.exe`) or the newer PowerShell Core executable (`pwsh.exe`). This is critical because legitimate tools like these are often leveraged by attackers for malicious purposes due to their powerful capabilities and widespread availability on Windows systems.\n\nHowever, it's important to apply a specific filter to reduce false positives. Specifically, exclude any events where the parent process creating the thread is `C:\\Windows\\System32\\CompatTelRunner.exe`. This is because `CompatTelRunner.exe` is a legitimate Windows component used in compatibility assessments, which could sometimes perform operations resembling malicious behavior but are indeed benign.\n\nWhile the possibility of unknown false positives exists, given the broad nature of PowerShell\u2019s use in both legitimate and malicious activities, the detection should be considered of medium severity due to the potential for abuse in executing code or scripts that can lead to system compromise, data theft, or other unauthorized activities.\n\nMonitoring for such activities is essential for identifying potential indicators of compromise related to various tactics and techniques, notably those associated with execution and defense evasion. By keeping an eye on these specific event patterns, analysts can more effectively spot signs of malicious PowerShell use, which might indicate a broader attack strategy being employed against the network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a remote thread from a Powershell process to another process",
      "answer": "In order to detect the creation of a remote thread from a Powershell process to another process, you should focus on monitoring Windows environments, particularly looking at events that indicate the creation of remote threads. Pay special attention to events where the source of the remote thread creation stems from either a Powershell executable (`powershell.exe`) or the newer PowerShell Core executable (`pwsh.exe`). This is critical because legitimate tools like these are often leveraged by attackers for malicious purposes due to their powerful capabilities and widespread availability on Windows systems.\n\nHowever, it's important to apply a specific filter to reduce false positives. Specifically, exclude any events where the parent process creating the thread is `C:\\Windows\\System32\\CompatTelRunner.exe`. This is because `CompatTelRunner.exe` is a legitimate Windows component used in compatibility assessments, which could sometimes perform operations resembling malicious behavior but are indeed benign.\n\nWhile the possibility of unknown false positives exists, given the broad nature of PowerShell\u2019s use in both legitimate and malicious activities, the detection should be considered of medium severity due to the potential for abuse in executing code or scripts that can lead to system compromise, data theft, or other unauthorized activities.\n\nMonitoring for such activities is essential for identifying potential indicators of compromise related to various tactics and techniques, notably those associated with execution and defense evasion. By keeping an eye on these specific event patterns, analysts can more effectively spot signs of malicious PowerShell use, which might indicate a broader attack strategy being employed against the network."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of Impacket's psexec.py.",
    "context": "",
    "output": "Sure!\nIn order to detect execution of Impacket's psexec.py, you should monitor Windows security logs for events that match specific criteria indicating that this attack tool is being used. Focus on the \"Object Access > Audit Detailed File Share\" setting within the Windows Advanced Audit Policy Configuration, ensuring it is configured to log both success and failure events. Specifically, look for Event ID 5145, which denotes an attempt to access a file share.\n\nWhen scrutinizing these events, pay particular attention to access attempts involving the IPC$ share, identifiable by the ShareName pattern `\\\\*\\IPC$`. This particular share is a target for attackers because it allows communication between processes over the network, which can be exploited for remote command execution.\n\nMoreover, you should watch for occurrences where the accessed file shares include any of the following relative target names: 'RemCom_stdin', 'RemCom_stdout', or 'RemCom_stderr'. These are indicative of the remote command execution tool RemCom using standard input, output, and error redirection over network shares, a method leveraged by Impacket's psexec.py to execute commands on the target system.\n\nIt is also important to consider that some events might not be related to malicious activity; therefore, any detection should be thoroughly investigated to rule out false positives. Due to the high impact and stealthiness of such attacks, they are classified at a high severity level.\n\nIn essence, monitoring for these specific conditions in your security logs, centered around the IPC$ share and the named files, serves as a crucial method for identifying and responding to potential instances of the psexec.py tool being used to carry out attacks on Windows systems. This approach aligns with understanding and mitigating tactics and techniques used by adversaries for remote command execution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Impacket's psexec.py.",
      "answer": "In order to detect execution of Impacket's psexec.py, you should monitor Windows security logs for events that match specific criteria indicating that this attack tool is being used. Focus on the \"Object Access > Audit Detailed File Share\" setting within the Windows Advanced Audit Policy Configuration, ensuring it is configured to log both success and failure events. Specifically, look for Event ID 5145, which denotes an attempt to access a file share.\n\nWhen scrutinizing these events, pay particular attention to access attempts involving the IPC$ share, identifiable by the ShareName pattern `\\\\*\\IPC$`. This particular share is a target for attackers because it allows communication between processes over the network, which can be exploited for remote command execution.\n\nMoreover, you should watch for occurrences where the accessed file shares include any of the following relative target names: 'RemCom_stdin', 'RemCom_stdout', or 'RemCom_stderr'. These are indicative of the remote command execution tool RemCom using standard input, output, and error redirection over network shares, a method leveraged by Impacket's psexec.py to execute commands on the target system.\n\nIt is also important to consider that some events might not be related to malicious activity; therefore, any detection should be thoroughly investigated to rule out false positives. Due to the high impact and stealthiness of such attacks, they are classified at a high severity level.\n\nIn essence, monitoring for these specific conditions in your security logs, centered around the IPC$ share and the named files, serves as a crucial method for identifying and responding to potential instances of the psexec.py tool being used to carry out attacks on Windows systems. This approach aligns with understanding and mitigating tactics and techniques used by adversaries for remote command execution."
    }
  },
  {
    "instruction": "Explain how should I detect the following: abusing Windows 10 Narrator's Feedback-Hub",
    "context": "",
    "output": "In order to detect abusing Windows 10 Narrator's Feedback-Hub, you should monitor the Windows registry for specific event types and targets associated with this exploit. Specifically, focus on registry event logs within Windows products for deletion events. Owing attention to changes in registry values is crucial, particularly watching for two specific patterns in the TargetObject paths.\n\nThe first pattern to look out for involves events where the `EventType` signifies a `DeleteValue` action and the `TargetObject` path ends with \u2018\\AppXypsaf9f1qserqevf0sws76dx4k9a5206\\Shell\\open\\command\\DelegateExecute\u2019. This path is indicative of alterations potentially being made to exploit the Narrator's Feedback-Hub feature, which attackers might target to gain unauthorized access or execute commands.\n\nThe second detection pattern requires monitoring for modifications where the `TargetObject` path concludes with \u2018\\AppXypsaf9f1qserqevf0sws76dx4k9a5206\\Shell\\open\\command\\(Default)\u2019. Such changes often involve adding a payload in the (Default) registry value, which can be an attempt to manipulate the system\u2019s behaviors in malicious ways.\n\nFor an effective detection strategy, employing a condition that triggers an alert if any one of these patterns is observed is recommended. Given these are specific and targeted modifications, there may be few to no known legitimate reasons (false positives) for these changes, which categorizes the detected activity under a high severity level.\n\nThis monitoring strategy is aligned with recognizing tactics and techniques that exploit specific Windows features for malicious purposes, underscoring the importance of vigilance in registry event logging as a means to safeguard against sophisticated attacks on Windows 10 systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "abusing Windows 10 Narrator's Feedback-Hub",
      "answer": "In order to detect abusing Windows 10 Narrator's Feedback-Hub, you should monitor the Windows registry for specific event types and targets associated with this exploit. Specifically, focus on registry event logs within Windows products for deletion events. Owing attention to changes in registry values is crucial, particularly watching for two specific patterns in the TargetObject paths.\n\nThe first pattern to look out for involves events where the `EventType` signifies a `DeleteValue` action and the `TargetObject` path ends with \u2018\\AppXypsaf9f1qserqevf0sws76dx4k9a5206\\Shell\\open\\command\\DelegateExecute\u2019. This path is indicative of alterations potentially being made to exploit the Narrator's Feedback-Hub feature, which attackers might target to gain unauthorized access or execute commands.\n\nThe second detection pattern requires monitoring for modifications where the `TargetObject` path concludes with \u2018\\AppXypsaf9f1qserqevf0sws76dx4k9a5206\\Shell\\open\\command\\(Default)\u2019. Such changes often involve adding a payload in the (Default) registry value, which can be an attempt to manipulate the system\u2019s behaviors in malicious ways.\n\nFor an effective detection strategy, employing a condition that triggers an alert if any one of these patterns is observed is recommended. Given these are specific and targeted modifications, there may be few to no known legitimate reasons (false positives) for these changes, which categorizes the detected activity under a high severity level.\n\nThis monitoring strategy is aligned with recognizing tactics and techniques that exploit specific Windows features for malicious purposes, underscoring the importance of vigilance in registry event logging as a means to safeguard against sophisticated attacks on Windows 10 systems."
    }
  },
  {
    "instruction": "How can I detect: The Fax service attempts to load ualapi.dll, which is non-existent. An attacker can then (side)load their own malicious DLL using this service.",
    "context": "",
    "output": "In order to detect an attack where the Fax service tries to load a non-existent DLL named ualapi.dll, allowing an attacker to side-load their own malicious DLL using this service, you should monitor Windows image load events.\n\nSpecifically, focus on instances where the process `\\fxssvc.exe`, which is associated with the Windows Fax service, attempts to load a DLL. If the DLL being loaded ends with 'ualapi.dll', it signals a potential malicious activity because 'ualapi.dll' does not exist by default in Windows systems. This anomaly might indicate an attacker's attempt to exploit the Fax service for DLL side-loading.\n\nHowever, to reduce false positives, any loading of DLL files that start with the path 'C:\\Windows\\WinSxS\\' should be excluded from alerts. This path is a legitimate system directory used for storing side-by-side assemblies in Windows and could contain various versions of DLLs needed by the system or legitimate applications.\n\nThis analysis falls under the high importance level due to the potential for malicious actors to exploit the Fax service to achieve persistence, evade defenses, or execute their code with the privileges of the fax service. Monitoring for such behavior is critical in identifying sophisticated adversaries attempting to utilize this technique.\n\nLook for these signs in the logs of Windows image loading events, focusing on filtering out legitimate uses while catching malicious attempts at exploiting the Fax service through DLL side-loading.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The Fax service attempts to load ualapi.dll, which is non-existent. An attacker can then (side)load their own malicious DLL using this service.",
      "answer": "In order to detect an attack where the Fax service tries to load a non-existent DLL named ualapi.dll, allowing an attacker to side-load their own malicious DLL using this service, you should monitor Windows image load events.\n\nSpecifically, focus on instances where the process `\\fxssvc.exe`, which is associated with the Windows Fax service, attempts to load a DLL. If the DLL being loaded ends with 'ualapi.dll', it signals a potential malicious activity because 'ualapi.dll' does not exist by default in Windows systems. This anomaly might indicate an attacker's attempt to exploit the Fax service for DLL side-loading.\n\nHowever, to reduce false positives, any loading of DLL files that start with the path 'C:\\Windows\\WinSxS\\' should be excluded from alerts. This path is a legitimate system directory used for storing side-by-side assemblies in Windows and could contain various versions of DLLs needed by the system or legitimate applications.\n\nThis analysis falls under the high importance level due to the potential for malicious actors to exploit the Fax service to achieve persistence, evade defenses, or execute their code with the privileges of the fax service. Monitoring for such behavior is critical in identifying sophisticated adversaries attempting to utilize this technique.\n\nLook for these signs in the logs of Windows image loading events, focusing on filtering out legitimate uses while catching malicious attempts at exploiting the Fax service through DLL side-loading."
    }
  },
  {
    "instruction": "How can I detect: pattern of UAC Bypass using .NET Code Profiler and mmc.exe DLL hijacking (UACMe 39)",
    "context": "",
    "output": "In order to detect the pattern of UAC Bypass using .NET Code Profiler and mmc.exe DLL hijacking (UACMe 39), you should: focus on monitoring file events within the Windows operating system. Specifically, look for instances where files named 'pe386.dll' are attempted to be created or modified in any user's 'AppData\\Local\\Temp' directory, indicated by the path pattern 'C:\\Users\\[UserName]\\AppData\\Local\\Temp\\pe386.dll'. This activity should raise suspicion as it might indicate an attempt at exploiting the Windows User Account Control (UAC) by unauthorized users or software. Any such detection, given the absence of known benign instances leading to such file operations, is considered highly suspicious and warrants further investigation due to its potential association with security evasion techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using .NET Code Profiler and mmc.exe DLL hijacking (UACMe 39)",
      "answer": "In order to detect the pattern of UAC Bypass using .NET Code Profiler and mmc.exe DLL hijacking (UACMe 39), you should: focus on monitoring file events within the Windows operating system. Specifically, look for instances where files named 'pe386.dll' are attempted to be created or modified in any user's 'AppData\\Local\\Temp' directory, indicated by the path pattern 'C:\\Users\\[UserName]\\AppData\\Local\\Temp\\pe386.dll'. This activity should raise suspicion as it might indicate an attempt at exploiting the Windows User Account Control (UAC) by unauthorized users or software. Any such detection, given the absence of known benign instances leading to such file operations, is considered highly suspicious and warrants further investigation due to its potential association with security evasion techniques."
    }
  },
  {
    "instruction": "How can I detect: PowerShell scripts to set the ACL to a file in the Windows folder",
    "context": "",
    "output": "In order to detect PowerShell scripts designed to set the ACL (Access Control List) to a file in the Windows folder, you should monitor for specific script activities on Windows systems, particularly those involving PowerShell scripts (ps_script). Look for the execution of scripts that include commands to modify ACLs, specifically using the 'Set-Acl' cmdlet coupled with the '-AclObject' parameter, indicating an intention to change permission settings.\n\nFurthermore, pay close attention to scripts that aim to alter permissions on any files or directories within the Windows folder. This can be indicated by the presence of paths pointing to the Windows directory in various formats, such as 'C:\\Windows', 'C:/Windows', and also utilizing environmental variables like '$env:windir' to reference the Windows directory. These attempts are further characterized by the intention to grant 'FullControl' or 'Allow' permissions, which significantly increases the risk by potentially giving attackers unrestricted access to critical system directories.\n\nLastly, ensure that all detection conditions involving cmdlet usage, suspicious paths, and permissions setting are met concurrently to trigger alerts. Be aware that there could be legitimate reasons for such script executions, although they are not commonly expected, thus setting the alert level to high due to the potential severity of tampering with ACLs within the Windows directory.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell scripts to set the ACL to a file in the Windows folder",
      "answer": "In order to detect PowerShell scripts designed to set the ACL (Access Control List) to a file in the Windows folder, you should monitor for specific script activities on Windows systems, particularly those involving PowerShell scripts (ps_script). Look for the execution of scripts that include commands to modify ACLs, specifically using the 'Set-Acl' cmdlet coupled with the '-AclObject' parameter, indicating an intention to change permission settings.\n\nFurthermore, pay close attention to scripts that aim to alter permissions on any files or directories within the Windows folder. This can be indicated by the presence of paths pointing to the Windows directory in various formats, such as 'C:\\Windows', 'C:/Windows', and also utilizing environmental variables like '$env:windir' to reference the Windows directory. These attempts are further characterized by the intention to grant 'FullControl' or 'Allow' permissions, which significantly increases the risk by potentially giving attackers unrestricted access to critical system directories.\n\nLastly, ensure that all detection conditions involving cmdlet usage, suspicious paths, and permissions setting are met concurrently to trigger alerts. Be aware that there could be legitimate reasons for such script executions, although they are not commonly expected, thus setting the alert level to high due to the potential severity of tampering with ACLs within the Windows directory."
    }
  },
  {
    "instruction": "How to detect: Microsoft Cloud App Security reported when a user signs into your sanctioned apps from a risky IP address.",
    "context": "",
    "output": "In order to detect when a Microsoft Cloud App Security reported when a user signs into your sanctioned apps from a risky IP address, you should monitor logs from the threat management service within Microsoft 365. Specifically, look for events sourced from the SecurityComplianceCenter that report successful logon attempts noted as \"Log on from a risky IP address.\" This activity indicates that the system has identified and recorded an instance where a user has successfully signed into one of your organization's approved applications from an IP address that has been flagged as potentially dangerous, possibly implying a security threat or unauthorized access attempt. It's important to note that while this detection mechanism is a valuable part of a broader security strategy, there may be instances where legitimate logins are flagged due to various reasons unknown, making it crucial to assess each alert on a case-by-case basis. The severity of these events is considered to be of a medium level, reflecting the potential risk they pose to the secured environment. This detection is aligned with understanding and mitigating threats, particularly focusing on tactics and techniques such as Initial Access and Valid Accounts, which are essential concepts within the MITRE ATT&CK framework that describe how adversaries may gain access to a system using legitimate credentials from an IP address that poses a reputation risk.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported when a user signs into your sanctioned apps from a risky IP address.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported when a user signs into your sanctioned apps from a risky IP address, you should monitor logs from the threat management service within Microsoft 365. Specifically, look for events sourced from the SecurityComplianceCenter that report successful logon attempts noted as \"Log on from a risky IP address.\" This activity indicates that the system has identified and recorded an instance where a user has successfully signed into one of your organization's approved applications from an IP address that has been flagged as potentially dangerous, possibly implying a security threat or unauthorized access attempt. It's important to note that while this detection mechanism is a valuable part of a broader security strategy, there may be instances where legitimate logins are flagged due to various reasons unknown, making it crucial to assess each alert on a case-by-case basis. The severity of these events is considered to be of a medium level, reflecting the potential risk they pose to the secured environment. This detection is aligned with understanding and mitigating threats, particularly focusing on tactics and techniques such as Initial Access and Valid Accounts, which are essential concepts within the MITRE ATT&CK framework that describe how adversaries may gain access to a system using legitimate credentials from an IP address that poses a reputation risk."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Obfuscated Powershell via Stdin in Scripts",
    "context": "",
    "output": "In order to Detect Obfuscated Powershell via Stdin in Scripts, you should: Focus on monitoring Windows PowerShell scripts. Specifically, this involves tracking script block execution events, which is only possible if Script Block Logging is enabled. The detection criterion centers on identifying when a script block text includes, in any mix of upper or lower case, sequences of operations that are characteristic of obfuscation techniques. This typically involves the use of the 'set' command in conjunction with operations that modify the environment, invoke commands, or handle inputs in a way that suggests an attempt to conceal the script's true purpose. Any presence of such patterns, especially when 'set' commands are chained with environment or invocation modifications, should raise suspicion. These markers serve as indicators of potentially malicious obfuscated PowerShell code being executed through standard input mechanisms, which could be part of a larger, sophisticated attack effort. Given the nature of this detection strategy, any hits should be considered high-level threats, although due diligence should be exercised to verify the context, as false positives, though not specified, are always a possibility in dynamic execution environments. This approach aligns with recognizing tactics and techniques like the execution of obfuscated commands and scripts, which is a common strategy among adversaries to evade detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via Stdin in Scripts",
      "answer": "In order to Detect Obfuscated Powershell via Stdin in Scripts, you should: Focus on monitoring Windows PowerShell scripts. Specifically, this involves tracking script block execution events, which is only possible if Script Block Logging is enabled. The detection criterion centers on identifying when a script block text includes, in any mix of upper or lower case, sequences of operations that are characteristic of obfuscation techniques. This typically involves the use of the 'set' command in conjunction with operations that modify the environment, invoke commands, or handle inputs in a way that suggests an attempt to conceal the script's true purpose. Any presence of such patterns, especially when 'set' commands are chained with environment or invocation modifications, should raise suspicion. These markers serve as indicators of potentially malicious obfuscated PowerShell code being executed through standard input mechanisms, which could be part of a larger, sophisticated attack effort. Given the nature of this detection strategy, any hits should be considered high-level threats, although due diligence should be exercised to verify the context, as false positives, though not specified, are always a possibility in dynamic execution environments. This approach aligns with recognizing tactics and techniques like the execution of obfuscated commands and scripts, which is a common strategy among adversaries to evade detection."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.\nThe Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time\n",
    "context": "",
    "output": "In order to detect adversaries who may establish persistence and/or elevate privileges by executing malicious content triggered by application shims, you should monitor Windows Registry settings specifically within the 'Application Compatibility Framework' areas. Focus on registry key modifications in Windows, especially those that occur under the 'AppCompatFlags' subkeys within the 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion' path. Look for any 'SetValue' actions on targets beginning with 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\\' and 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\\'. Ensure to exclude events that do not contain any details. Careful analysis of such events is crucial as it can help to uncover attempts to misuse application shims for malicious purposes such as persistence or privilege escalation. Due to the nature of these detections, be aware that there might be actions that are incorrectly flagged as malicious (false positives), although these instances are currently unknown. The importance of this observation is at a medium level, considering the potential impact on system security. This approach leverages the Microsoft Windows operating system's features and registry activities to detect potential unauthorized or malicious activities related to application shimming, which is an essential part of monitoring for techniques associated with persistence and privilege elevation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.\nThe Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time\n",
      "answer": "In order to detect adversaries who may establish persistence and/or elevate privileges by executing malicious content triggered by application shims, you should monitor Windows Registry settings specifically within the 'Application Compatibility Framework' areas. Focus on registry key modifications in Windows, especially those that occur under the 'AppCompatFlags' subkeys within the 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion' path. Look for any 'SetValue' actions on targets beginning with 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\\' and 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\\'. Ensure to exclude events that do not contain any details. Careful analysis of such events is crucial as it can help to uncover attempts to misuse application shims for malicious purposes such as persistence or privilege escalation. Due to the nature of these detections, be aware that there might be actions that are incorrectly flagged as malicious (false positives), although these instances are currently unknown. The importance of this observation is at a medium level, considering the potential impact on system security. This approach leverages the Microsoft Windows operating system's features and registry activities to detect potential unauthorized or malicious activities related to application shimming, which is an essential part of monitoring for techniques associated with persistence and privilege elevation."
    }
  },
  {
    "instruction": "Can you explain how to detect: keywords from well-known PowerShell exploitation frameworks",
    "context": "",
    "output": "Certainly!\n\nIn order to detect keywords from well-known PowerShell exploitation frameworks, you should: Monitor PowerShell script activity on Windows systems by enabling Script Block Logging. This approach requires looking for specific keywords in the script text that are commonly associated with exploitation frameworks and tools, such as 'AdjustTokenPrivileges', 'IMAGE_NT_OPTIONAL_HDR64_MAGIC', 'Metasploit', 'Microsoft.Win32.UnsafeNativeMethods', 'Mimikatz', 'MiniDumpWriteDump', 'PAGE_EXECUTE_READ', 'ReadProcessMemory.Invoke', 'SE_PRIVILEGE_ENABLED', 'SECURITY_DELEGATION', 'TOKEN_ADJUST_PRIVILEGES', 'TOKEN_ALL_ACCESS', 'TOKEN_ASSIGN_PRIMARY', 'TOKEN_DUPLICATE', 'TOKEN_ELEVATION', 'TOKEN_IMPERSONATE', 'TOKEN_INFORMATION_CLASS', 'TOKEN_PRIVILEGES', 'TOKEN_QUERY'. These indications could suggest an attempt to exploit PowerShell for malicious activities such as privilege escalation, memory dumping, or security tokens manipulation. Given the wide range of script uses, it might be necessary to adjust the sensitivity of the detection to match the specifics of the environment to minimize false positives. This approach is aligned with medium-level security monitoring practices.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "keywords from well-known PowerShell exploitation frameworks",
      "answer": "In order to detect keywords from well-known PowerShell exploitation frameworks, you should: Monitor PowerShell script activity on Windows systems by enabling Script Block Logging. This approach requires looking for specific keywords in the script text that are commonly associated with exploitation frameworks and tools, such as 'AdjustTokenPrivileges', 'IMAGE_NT_OPTIONAL_HDR64_MAGIC', 'Metasploit', 'Microsoft.Win32.UnsafeNativeMethods', 'Mimikatz', 'MiniDumpWriteDump', 'PAGE_EXECUTE_READ', 'ReadProcessMemory.Invoke', 'SE_PRIVILEGE_ENABLED', 'SECURITY_DELEGATION', 'TOKEN_ADJUST_PRIVILEGES', 'TOKEN_ALL_ACCESS', 'TOKEN_ASSIGN_PRIMARY', 'TOKEN_DUPLICATE', 'TOKEN_ELEVATION', 'TOKEN_IMPERSONATE', 'TOKEN_INFORMATION_CLASS', 'TOKEN_PRIVILEGES', 'TOKEN_QUERY'. These indications could suggest an attempt to exploit PowerShell for malicious activities such as privilege escalation, memory dumping, or security tokens manipulation. Given the wide range of script uses, it might be necessary to adjust the sensitivity of the detection to match the specifics of the environment to minimize false positives. This approach is aligned with medium-level security monitoring practices."
    }
  },
  {
    "instruction": "Please help me detect the following: potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software.",
    "context": "",
    "output": "Sure!\nIn order to detect potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software, you should: Look for events where the 'waveedit.dll' file is loaded, in the context of Windows operating system image load logging. The detection focuses on identifying situations where 'waveedit.dll' is loaded outside of the legitimate Nero WaveEditor directories. Specifically, if the loaded 'waveedit.dll' does not originate from the legitimate Nero software paths - either 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' or 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' and their respective directories - it might indicate an attempt of DLL sideloading. It's highly unlikely that there will be false positives given the specificity of these conditions, meaning if an alert is triggered it suggests a high probability of a malicious activity. Through this method, the focus is on spotting potentially malicious exploitation of trusted processes to execute unauthorized or malicious code, indicative of techniques employed in initial access or persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software.",
      "answer": "In order to detect potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software, you should: Look for events where the 'waveedit.dll' file is loaded, in the context of Windows operating system image load logging. The detection focuses on identifying situations where 'waveedit.dll' is loaded outside of the legitimate Nero WaveEditor directories. Specifically, if the loaded 'waveedit.dll' does not originate from the legitimate Nero software paths - either 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' or 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' and their respective directories - it might indicate an attempt of DLL sideloading. It's highly unlikely that there will be false positives given the specificity of these conditions, meaning if an alert is triggered it suggests a high probability of a malicious activity. Through this method, the focus is on spotting potentially malicious exploitation of trusted processes to execute unauthorized or malicious code, indicative of techniques employed in initial access or persistence."
    }
  },
  {
    "instruction": "Please help me detect the following: potential network sniffing via use of network tools such as \"tshark\", \"windump\".\nNetwork sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n",
    "context": "",
    "output": "Sure!\nIn order to detect potential network sniffing via use of network tools such as \"tshark\", \"windump\", you should: Focus on capturing process creation events in Windows environments. Look for instances where executables ending in '\\tshark.exe' or '\\windump.exe' are launched, particularly those that include the '-i' command line argument, which suggests interfacing with network devices. This activity is often indicative of an adversary's attempt to monitor or capture network traffic, as tools like \"tshark\" and \"windump\" are capable of placing a network interface into promiscuous mode or using span ports for capturing traffic. It's important to consider that such detections might also be triggered by legitimate network troubleshooting efforts by administrators, hence the level of alert is set to medium. Identifying the use of these tools is crucial for thwarting or understanding espionage and credential theft tactics, as the unauthorized acquisition and analysis of network traffic can provide adversaries with sensitive information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential network sniffing via use of network tools such as \"tshark\", \"windump\".\nNetwork sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n",
      "answer": "In order to detect potential network sniffing via use of network tools such as \"tshark\", \"windump\", you should: Focus on capturing process creation events in Windows environments. Look for instances where executables ending in '\\tshark.exe' or '\\windump.exe' are launched, particularly those that include the '-i' command line argument, which suggests interfacing with network devices. This activity is often indicative of an adversary's attempt to monitor or capture network traffic, as tools like \"tshark\" and \"windump\" are capable of placing a network interface into promiscuous mode or using span ports for capturing traffic. It's important to consider that such detections might also be triggered by legitimate network troubleshooting efforts by administrators, hence the level of alert is set to medium. Identifying the use of these tools is crucial for thwarting or understanding espionage and credential theft tactics, as the unauthorized acquisition and analysis of network traffic can provide adversaries with sensitive information."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of \"reg.exe\" commands with the \"delete\" flag on services registry key. Often used by attacker to remove AV software services",
    "context": "",
    "output": "In order to detect execution of \"reg.exe\" commands with the \"delete\" flag on services registry key, often used by attackers to remove antivirus software services, you should monitor process creation logs on Windows systems for the execution of \"reg.exe\". Specifically, look for occurrences where the process image ends with 'reg.exe' or the original file name matches 'reg.exe'. It is critical to pay attention to commands that contain the 'delete' keyword, especially when these commands are modifying keys within the '\\SYSTEM\\CurrentControlSet\\services\\' path in the registry. This path is significant because it is where service configurations are stored, and modifying it could suggest attempts to disable or remove software, particularly security services. This detection mechanism is considered to have a high level of importance due to the unlikely event of false positives, indicating that legitimate usage of such commands in this context is rare.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"reg.exe\" commands with the \"delete\" flag on services registry key. Often used by attacker to remove AV software services",
      "answer": "In order to detect execution of \"reg.exe\" commands with the \"delete\" flag on services registry key, often used by attackers to remove antivirus software services, you should monitor process creation logs on Windows systems for the execution of \"reg.exe\". Specifically, look for occurrences where the process image ends with 'reg.exe' or the original file name matches 'reg.exe'. It is critical to pay attention to commands that contain the 'delete' keyword, especially when these commands are modifying keys within the '\\SYSTEM\\CurrentControlSet\\services\\' path in the registry. This path is significant because it is where service configurations are stored, and modifying it could suggest attempts to disable or remove software, particularly security services. This detection mechanism is considered to have a high level of importance due to the unlikely event of false positives, indicating that legitimate usage of such commands in this context is rare."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential DLL sideloading of \"wwlib.dll\"",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential DLL sideloading of \"wwlib.dll\", you should: Focus on monitoring image load events within Windows environments. Specifically, pay attention to instances where the 'wwlib.dll' file is loaded. Ensure to exclude legitimate loading of 'wwlib.dll' by the Microsoft Office suite, particularly by 'winword.exe' from standard Microsoft Office installation paths (both the regular and the (x86) paths). This approach helps in identifying suspicious activities without being overwhelmed by false positives from regular use of Microsoft Office programs. The purpose is to catch scenarios where malicious software may be attempting to disguise its activities by leveraging a DLL name commonly used by legitimate software, thus potentially signaling an attempt at DLL sideloading.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"wwlib.dll\"",
      "answer": "In order to detect potential DLL sideloading of \"wwlib.dll\", you should: Focus on monitoring image load events within Windows environments. Specifically, pay attention to instances where the 'wwlib.dll' file is loaded. Ensure to exclude legitimate loading of 'wwlib.dll' by the Microsoft Office suite, particularly by 'winword.exe' from standard Microsoft Office installation paths (both the regular and the (x86) paths). This approach helps in identifying suspicious activities without being overwhelmed by false positives from regular use of Microsoft Office programs. The purpose is to catch scenarios where malicious software may be attempting to disguise its activities by leveraging a DLL name commonly used by legitimate software, thus potentially signaling an attempt at DLL sideloading."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Detect use of X509Enrollment",
    "context": "",
    "output": "In order to detect use of X509Enrollment, you should monitor the creation of processes on Windows systems for specific command-line arguments that indicate the use of X509Enrollment for potentially malicious purposes. Focus on detecting the presence of either 'X509Enrollment.CBinaryConverter' or the identifier '884e2002-217d-11da-b2a4-000e7bbb2b09' within the command line arguments. These indicators are associated with actions that may utilize the X509Enrollment interface, a component that can be leveraged in various certificate-related operations, potentially including the generation or manipulation of certificates in a manner not intended by system administrators or security policies. It is important to note that while detecting these command-line arguments can point towards malicious activities, there might be legitimate administrative scripts that use this interface for valid reasons. Therefore, any detection should be investigated to distinguish between benign and malicious use, keeping in mind that the detection level is classified as medium due to the possibility of legitimate use cases. The focus on the Windows process creation log source enhances the ability to catch such activities early in their operation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect use of X509Enrollment",
      "answer": "In order to detect use of X509Enrollment, you should monitor the creation of processes on Windows systems for specific command-line arguments that indicate the use of X509Enrollment for potentially malicious purposes. Focus on detecting the presence of either 'X509Enrollment.CBinaryConverter' or the identifier '884e2002-217d-11da-b2a4-000e7bbb2b09' within the command line arguments. These indicators are associated with actions that may utilize the X509Enrollment interface, a component that can be leveraged in various certificate-related operations, potentially including the generation or manipulation of certificates in a manner not intended by system administrators or security policies. It is important to note that while detecting these command-line arguments can point towards malicious activities, there might be legitimate administrative scripts that use this interface for valid reasons. Therefore, any detection should be investigated to distinguish between benign and malicious use, keeping in mind that the detection level is classified as medium due to the possibility of legitimate use cases. The focus on the Windows process creation log source enhances the ability to catch such activities early in their operation."
    }
  },
  {
    "instruction": "How to detect: \"GoogleUpdate.exe\" spawning a new instance of itself in an uncommon location as seen used by the Goofy Guineapig backdoor",
    "context": "",
    "output": "In order to detect \"GoogleUpdate.exe\" spawning a new instance of itself in an uncommon location as seen used by the Goofy Guineapig backdoor, you should monitor process creation events on Windows systems. Specifically, look for scenarios where a process with the parent image or image name ending with '\\GoogleUpdate.exe' is initiated. However, it's crucial to exclude legitimate GoogleUpdate paths, such as 'C:\\Program Files\\Google\\', 'C:\\Program Files (x86)\\Google\\', or any path under '\\AppData\\Local\\Google\\Update\\' to reduce false positives. This approach helps in identifying instances where the GoogleUpdate executable is used in a suspicious manner, potentially indicative of the Goofy Guineapig backdoor operation. The urgency of this detection is considered high, although there might be unknown scenarios causing false alarms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "\"GoogleUpdate.exe\" spawning a new instance of itself in an uncommon location as seen used by the Goofy Guineapig backdoor",
      "answer": "In order to detect \"GoogleUpdate.exe\" spawning a new instance of itself in an uncommon location as seen used by the Goofy Guineapig backdoor, you should monitor process creation events on Windows systems. Specifically, look for scenarios where a process with the parent image or image name ending with '\\GoogleUpdate.exe' is initiated. However, it's crucial to exclude legitimate GoogleUpdate paths, such as 'C:\\Program Files\\Google\\', 'C:\\Program Files (x86)\\Google\\', or any path under '\\AppData\\Local\\Google\\Update\\' to reduce false positives. This approach helps in identifying instances where the GoogleUpdate executable is used in a suspicious manner, potentially indicative of the Goofy Guineapig backdoor operation. The urgency of this detection is considered high, although there might be unknown scenarios causing false alarms."
    }
  },
  {
    "instruction": "Please help me detect the following: scheduled task creations or modification on a suspicious schedule type",
    "context": "",
    "output": "Sure!\nIn order to detect scheduled task creations or modification on a suspicious schedule type, you should monitor for the creation or alteration of scheduled tasks in Windows environments specifically by tracking process creation logs. Look for the use of `schtasks.exe` either by its process image ending with `\\schtasks.exe` or having an original file name of `schtasks.exe`. Further scrutinize any command-line invocation of `schtasks.exe` that includes scheduling parameters such as `ONLOGON`, `ONSTART`, `ONCE`, or `ONIDLE` to pinpoint tasks set to trigger on logon, system start, one-time executions, or when the system is idle, respectively. However, it's crucial to filter out command lines that include \"NT AUT\", \" SYSTEM\", or \"HIGHEST\" to avoid false positives related to tasks run under common system authority or with highest privileges, as these might be legitimate system processes. This detection method is ranked with a high level of importance due to the potential misuse of scheduled tasks for malicious purposes, such as maintaining persistence or executing malware at specific triggers. Be aware of legitimate scheduled tasks that may fit these criteria and adjust the filtering according to your specific environment to minimize false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scheduled task creations or modification on a suspicious schedule type",
      "answer": "In order to detect scheduled task creations or modification on a suspicious schedule type, you should monitor for the creation or alteration of scheduled tasks in Windows environments specifically by tracking process creation logs. Look for the use of `schtasks.exe` either by its process image ending with `\\schtasks.exe` or having an original file name of `schtasks.exe`. Further scrutinize any command-line invocation of `schtasks.exe` that includes scheduling parameters such as `ONLOGON`, `ONSTART`, `ONCE`, or `ONIDLE` to pinpoint tasks set to trigger on logon, system start, one-time executions, or when the system is idle, respectively. However, it's crucial to filter out command lines that include \"NT AUT\", \" SYSTEM\", or \"HIGHEST\" to avoid false positives related to tasks run under common system authority or with highest privileges, as these might be legitimate system processes. This detection method is ranked with a high level of importance due to the potential misuse of scheduled tasks for malicious purposes, such as maintaining persistence or executing malware at specific triggers. Be aware of legitimate scheduled tasks that may fit these criteria and adjust the filtering according to your specific environment to minimize false positives."
    }
  },
  {
    "instruction": "How to detect: TeamViewer_Desktop.exe is create during install",
    "context": "",
    "output": "In order to detect the creation of \"TeamViewer_Desktop.exe\" during an installation process, you should monitor for file events within the Windows environment. Specifically, look for any event where the target filename ends with '\\TeamViewer_Desktop.exe'. This approach is particularly important as it helps to identify potential misuse or malicious deployments of TeamViewer by tracking its installation footprint. Keep in mind that false positives are currently unknown, suggesting caution and further investigation for any alerts. The alert level for this kind of detection has been set to medium, highlighting its importance in the broader context of monitoring and threat detection activities related to various tactics and techniques, such as Execution, Persistence, or Privilege Escalation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "TeamViewer_Desktop.exe is create during install",
      "answer": "In order to detect the creation of \"TeamViewer_Desktop.exe\" during an installation process, you should monitor for file events within the Windows environment. Specifically, look for any event where the target filename ends with '\\TeamViewer_Desktop.exe'. This approach is particularly important as it helps to identify potential misuse or malicious deployments of TeamViewer by tracking its installation footprint. Keep in mind that false positives are currently unknown, suggesting caution and further investigation for any alerts. The alert level for this kind of detection has been set to medium, highlighting its importance in the broader context of monitoring and threat detection activities related to various tactics and techniques, such as Execution, Persistence, or Privilege Escalation."
    }
  },
  {
    "instruction": "Please help me detect the following: changes to the Registry in which a monitor program gets registered to dump the memory of the lsass.exe process",
    "context": "",
    "output": "Sure!\nIn order to detect changes to the Registry in which a monitor program gets registered to dump the memory of the lsass.exe process, you should: Monitor Windows registry events closely, focusing on any modifications made to the 'Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\lsass.exe' registry key. This specific registry path is critical because alterations here could indicate an attempt to silently exit or manipulate the Local Security Authority Subsystem Service (LSASS) process, which is often targeted by attackers seeking to dump credentials. The detection of such changes is considered critical, with false positives being unlikely, suggesting that any modifications to this registry path should be treated with a high level of scrutiny.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the Registry in which a monitor program gets registered to dump the memory of the lsass.exe process",
      "answer": "In order to detect changes to the Registry in which a monitor program gets registered to dump the memory of the lsass.exe process, you should: Monitor Windows registry events closely, focusing on any modifications made to the 'Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\lsass.exe' registry key. This specific registry path is critical because alterations here could indicate an attempt to silently exit or manipulate the Local Security Authority Subsystem Service (LSASS) process, which is often targeted by attackers seeking to dump credentials. The detection of such changes is considered critical, with false positives being unlikely, suggesting that any modifications to this registry path should be treated with a high level of scrutiny."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information, you should: monitor for process creation events within Windows systems where the process image ends with '\\wmic.exe' or where the OriginalFileName is explicitly 'wmic.exe'. Additionally, pay attention to command-line executions that contain the string 'csproduct'. The detection encompasses any process creation events that satisfy both criteria regarding the image and command line. Be aware that there might be events that trigger false positives, though these instances are not specifically known. This detection operates at a medium severity level, emphasizing its significance in monitoring for potential reconnaissance activities, where attackers might be gathering system hardware information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information",
      "answer": "In order to detect the execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information, you should: monitor for process creation events within Windows systems where the process image ends with '\\wmic.exe' or where the OriginalFileName is explicitly 'wmic.exe'. Additionally, pay attention to command-line executions that contain the string 'csproduct'. The detection encompasses any process creation events that satisfy both criteria regarding the image and command line. Be aware that there might be events that trigger false positives, though these instances are not specifically known. This detection operates at a medium severity level, emphasizing its significance in monitoring for potential reconnaissance activities, where attackers might be gathering system hardware information."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of \"DumpMinitool.exe\" a tool that allows the dump of process memory via the use of the \"MiniDumpWriteDump\"",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of \"DumpMinitool.exe\", a tool that allows the dumping of process memory via the use of the \"MiniDumpWriteDump\", you should: Monitor Windows process creation logs for occurrences where processes are started with names ending in '\\DumpMinitool.exe', '\\DumpMinitool.x86.exe', or '\\DumpMinitool.arm64.exe'. Additionally, watch for instances where the OriginalFileName attribute matches 'DumpMinitool.exe', 'DumpMinitool.x86.exe', or 'DumpMinitool.arm64.exe'. It is also crucial to check if the processes were initiated with command line arguments containing ' Full', ' Mini', or ' WithHeap', as these are indicative of attempts to dump process memory using specific features of the tool. All these criteria need to be met for a definitive detection. Be aware that there might be unknown false positives and this detection has been rated at a medium level of confidence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of \"DumpMinitool.exe\" a tool that allows the dump of process memory via the use of the \"MiniDumpWriteDump\"",
      "answer": "In order to detect the use of \"DumpMinitool.exe\", a tool that allows the dumping of process memory via the use of the \"MiniDumpWriteDump\", you should: Monitor Windows process creation logs for occurrences where processes are started with names ending in '\\DumpMinitool.exe', '\\DumpMinitool.x86.exe', or '\\DumpMinitool.arm64.exe'. Additionally, watch for instances where the OriginalFileName attribute matches 'DumpMinitool.exe', 'DumpMinitool.x86.exe', or 'DumpMinitool.arm64.exe'. It is also crucial to check if the processes were initiated with command line arguments containing ' Full', ' Mini', or ' WithHeap', as these are indicative of attempts to dump process memory using specific features of the tool. All these criteria need to be met for a definitive detection. Be aware that there might be unknown false positives and this detection has been rated at a medium level of confidence."
    }
  },
  {
    "instruction": "How can I detect: registry changes to Office trust records where the path is located in a potentially suspicious location",
    "context": "",
    "output": "In order to detect registry changes to Office trust records where the path is located in a potentially suspicious location, you should monitor Windows registry set actions specifically looking for events where the type of event is Setvalue related to Office Trust Records in the registry. Specifically, focus should be on the '\\Security\\Trusted Documents\\TrustRecords' path. It's crucial to scrutinize changes happening not just within this direct path, but also to be vigilant about modifications occurring in less expected locations where users might not typically execute macro-enabled documents. These locations include various paths such as '/AppData/Local/Microsoft/Windows/INetCache/', '/AppData/Local/Temp/', '/PerfLogs/', 'C:/Users/Public/', and both 'file:///D:/' and 'file:///E:/'. Such changes are uncommon and tend to be indicative of suspicious activities, likely with a high level of confidence hence classified with a high severity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registry changes to Office trust records where the path is located in a potentially suspicious location",
      "answer": "In order to detect registry changes to Office trust records where the path is located in a potentially suspicious location, you should monitor Windows registry set actions specifically looking for events where the type of event is Setvalue related to Office Trust Records in the registry. Specifically, focus should be on the '\\Security\\Trusted Documents\\TrustRecords' path. It's crucial to scrutinize changes happening not just within this direct path, but also to be vigilant about modifications occurring in less expected locations where users might not typically execute macro-enabled documents. These locations include various paths such as '/AppData/Local/Microsoft/Windows/INetCache/', '/AppData/Local/Temp/', '/PerfLogs/', 'C:/Users/Public/', and both 'file:///D:/' and 'file:///E:/'. Such changes are uncommon and tend to be indicative of suspicious activities, likely with a high level of confidence hence classified with a high severity."
    }
  },
  {
    "instruction": "Can you explain how to detect: Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file.",
    "context": "",
    "output": "Certainly!\n\nIn order to execute SCT script using scrobj.dll from a command in entered into a specially prepared INF file, you should: monitor for process creation events on Windows systems where the command line contains both 'InfDefaultInstall.exe ' and a reference to an '.inf' file. This could indicate an attempt to execute malicious scripts via an INF file, exploiting the InfDefaultInstall.exe utility. Relevant information to collect includes the ComputerName, the User initiating the process, the full CommandLine used, as well as the ParentCommandLine to provide context. Be aware of potential unknown benign activities that might also trigger this detection, thus classified at a medium level of confidence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file.",
      "answer": "In order to execute SCT script using scrobj.dll from a command in entered into a specially prepared INF file, you should: monitor for process creation events on Windows systems where the command line contains both 'InfDefaultInstall.exe ' and a reference to an '.inf' file. This could indicate an attempt to execute malicious scripts via an INF file, exploiting the InfDefaultInstall.exe utility. Relevant information to collect includes the ComputerName, the User initiating the process, the full CommandLine used, as well as the ParentCommandLine to provide context. Be aware of potential unknown benign activities that might also trigger this detection, thus classified at a medium level of confidence."
    }
  },
  {
    "instruction": "Explain how should I detect the following: adding and using Exchange PowerShell snap-ins to export mailbox data. As seen used by HAFNIUM and APT27",
    "context": "",
    "output": "In order to detect adding and using Exchange PowerShell snap-ins to export mailbox data, as seen used by HAFNIUM and APT27, you should focus on monitoring process creation events within Windows environments. Specifically, look for instances where PowerShell (powershell.exe or pwsh.exe) or its core files (PowerShell.EXE, pwsh.dll) are initiated. In addition to this, pay close attention to the command-line arguments for signals that \"Add-PSSnapin\" is being used, which is indicative of snap-ins being added for management tasks.\n\nFurther refine your detection by identifying the use of specific modules in the command line, such as 'Microsoft.Exchange.Powershell.Snapin' or 'Microsoft.Exchange.Management.PowerShell.SnapIn'. These particular modules are related to Exchange and can be exploited to perform unauthorized actions like exporting mailbox data.\n\nAlso, exclude any events where the process is initiated by 'C:\\Windows\\System32\\msiexec.exe' with specific command-line patterns, as these might represent legitimate administrative activities that include complex command lines but are not related to the malicious behavior in question.\n\nBy setting up your detection mechanisms to sniff out these specific command-line arguments and parent processes while excluding known benign activities, you enhance your ability to spot unauthorized attempts at using Exchange PowerShell snap-ins for exporting mailbox data, an attack vector leveraged by sophisticated threat actors like HAFNIUM and APT27.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "adding and using Exchange PowerShell snap-ins to export mailbox data. As seen used by HAFNIUM and APT27",
      "answer": "In order to detect adding and using Exchange PowerShell snap-ins to export mailbox data, as seen used by HAFNIUM and APT27, you should focus on monitoring process creation events within Windows environments. Specifically, look for instances where PowerShell (powershell.exe or pwsh.exe) or its core files (PowerShell.EXE, pwsh.dll) are initiated. In addition to this, pay close attention to the command-line arguments for signals that \"Add-PSSnapin\" is being used, which is indicative of snap-ins being added for management tasks.\n\nFurther refine your detection by identifying the use of specific modules in the command line, such as 'Microsoft.Exchange.Powershell.Snapin' or 'Microsoft.Exchange.Management.PowerShell.SnapIn'. These particular modules are related to Exchange and can be exploited to perform unauthorized actions like exporting mailbox data.\n\nAlso, exclude any events where the process is initiated by 'C:\\Windows\\System32\\msiexec.exe' with specific command-line patterns, as these might represent legitimate administrative activities that include complex command lines but are not related to the malicious behavior in question.\n\nBy setting up your detection mechanisms to sniff out these specific command-line arguments and parent processes while excluding known benign activities, you enhance your ability to spot unauthorized attempts at using Exchange PowerShell snap-ins for exporting mailbox data, an attack vector leveraged by sophisticated threat actors like HAFNIUM and APT27."
    }
  },
  {
    "instruction": "Can you explain how to detect: launch of executable by calling the LaunchApplication function from pcwutl.dll library.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the launch of an executable by calling the LaunchApplication function from pcwutl.dll library, you should: Focus on monitoring Windows process creation logs for instances where 'rundll32.exe' is executed, specifically looking for occurrences where the image name ends with '\\rundll32.exe' or the original file name is explicitly 'RUNDLL32.EXE'. Additionally, pay attention to the command line arguments to identify instances containing both 'pcwutl' and 'LaunchApplication'. This detection strategy is necessary as it targets the tactics of execution through the misuse of a trusted Windows utility, referencing the technique of launching executables via specific library functions. Be aware that legitimate use of the Program Compatibility Troubleshooter Helper can generate false positives, and accordingly, this scenario should be considered when evaluating alerts. The risk associated with this behavior is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "launch of executable by calling the LaunchApplication function from pcwutl.dll library.",
      "answer": "In order to detect the launch of an executable by calling the LaunchApplication function from pcwutl.dll library, you should: Focus on monitoring Windows process creation logs for instances where 'rundll32.exe' is executed, specifically looking for occurrences where the image name ends with '\\rundll32.exe' or the original file name is explicitly 'RUNDLL32.EXE'. Additionally, pay attention to the command line arguments to identify instances containing both 'pcwutl' and 'LaunchApplication'. This detection strategy is necessary as it targets the tactics of execution through the misuse of a trusted Windows utility, referencing the technique of launching executables via specific library functions. Be aware that legitimate use of the Program Compatibility Troubleshooter Helper can generate false positives, and accordingly, this scenario should be considered when evaluating alerts. The risk associated with this behavior is considered medium."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious file type dropped by an Exchange component in IIS into a suspicious folder",
    "context": "",
    "output": "In order to detect suspicious file type dropped by an Exchange component in IIS into a suspicious folder, you should: monitor Windows file event logs for occurrences where a file with an extension of either .aspx, .asp, or .ashx is created or modified in directories commonly associated with IIS web applications, particularly within the paths 'FrontEnd\\HttpProxy\\' and '\\inetpub\\wwwroot\\aspnet_client\\'. The primary executable to watch in relation to this activity is 'w3wp.exe', a process associated with IIS web application pools, especially when its command line invocation includes references to 'MSExchange'. This specific activity is flagged with a high level of concern due to its potential association with malicious operations targeting Microsoft Exchange components working within the IIS infrastructure.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious file type dropped by an Exchange component in IIS into a suspicious folder",
      "answer": "In order to detect suspicious file type dropped by an Exchange component in IIS into a suspicious folder, you should: monitor Windows file event logs for occurrences where a file with an extension of either .aspx, .asp, or .ashx is created or modified in directories commonly associated with IIS web applications, particularly within the paths 'FrontEnd\\HttpProxy\\' and '\\inetpub\\wwwroot\\aspnet_client\\'. The primary executable to watch in relation to this activity is 'w3wp.exe', a process associated with IIS web application pools, especially when its command line invocation includes references to 'MSExchange'. This specific activity is flagged with a high level of concern due to its potential association with malicious operations targeting Microsoft Exchange components working within the IIS infrastructure."
    }
  },
  {
    "instruction": "How can I detect: suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675 .",
    "context": "",
    "output": "In order to detect the suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675, you should focus on monitoring antivirus logs specifically for files created or modified in the `C:\\Windows\\System32\\spool\\drivers\\x64\\` directory. This path is critical because it's commonly exploited by attackers aiming to leverage the Print Spooler vulnerabilities to execute malicious code remotely on a Windows system. \n\nIt's crucial to watch for any activity involving the creation or modification of files in this directory without immediately flagging files that have been submitted to Symantec for analysis (identified by mentions such as \"File submitted to Symantec\"), as these might still be under investigation and could result in false positives. Nonetheless, since these false positives are considered unlikely or are pending further analysis by a Protection Service for Platforms (PSP), any hit outside of this context should be taken with utmost seriousness.\n\nFor effective detection, ensure to log and scrutinize the signature of the detected file, its filename, and the computer name which reported the activity. By concentrating on these details, you can identify and respond to potential exploitation of these vulnerabilities more swiftly. Given the critical nature of these vulnerabilities and the method of attack, this detection mechanism is paramount in defending against unauthorized remote code execution that capitalizes on the Windows Print Spooler vulnerabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675 .",
      "answer": "In order to detect the suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675, you should focus on monitoring antivirus logs specifically for files created or modified in the `C:\\Windows\\System32\\spool\\drivers\\x64\\` directory. This path is critical because it's commonly exploited by attackers aiming to leverage the Print Spooler vulnerabilities to execute malicious code remotely on a Windows system. \n\nIt's crucial to watch for any activity involving the creation or modification of files in this directory without immediately flagging files that have been submitted to Symantec for analysis (identified by mentions such as \"File submitted to Symantec\"), as these might still be under investigation and could result in false positives. Nonetheless, since these false positives are considered unlikely or are pending further analysis by a Protection Service for Platforms (PSP), any hit outside of this context should be taken with utmost seriousness.\n\nFor effective detection, ensure to log and scrutinize the signature of the detected file, its filename, and the computer name which reported the activity. By concentrating on these details, you can identify and respond to potential exploitation of these vulnerabilities more swiftly. Given the critical nature of these vulnerabilities and the method of attack, this detection mechanism is paramount in defending against unauthorized remote code execution that capitalizes on the Windows Print Spooler vulnerabilities."
    }
  },
  {
    "instruction": "How to detect: creation of a new user profile with a specific username, seen being used by some variants of the COLDSTEEL RAT.",
    "context": "",
    "output": "In order to detect the creation of a new user profile with a specific username, seen being used by some variants of the COLDSTEEL RAT, you should: focus on Windows registry settings as the primary log source. Monitor any 'SetValue' EventType within Windows Registry, specifically targeting changes made to the registry keys that fall under '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList\\S-1-5-21-' combined with '\\ProfileImagePath'. Look for modifications that include the terms 'ANONYMOUS' or '_DomainUser_' within the details of these registry changes. These specific modifications are indicative of the creation of a new user profile, which can be tied to malicious activities, particularly to tactics and techniques employed by COLDSTEEL RAT variants. It's important to note that while this detection strategy is set at a high level of importance, there may still be occurrences where legitimate activities could trigger a false positive, though such instances are currently unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new user profile with a specific username, seen being used by some variants of the COLDSTEEL RAT.",
      "answer": "In order to detect the creation of a new user profile with a specific username, seen being used by some variants of the COLDSTEEL RAT, you should: focus on Windows registry settings as the primary log source. Monitor any 'SetValue' EventType within Windows Registry, specifically targeting changes made to the registry keys that fall under '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList\\S-1-5-21-' combined with '\\ProfileImagePath'. Look for modifications that include the terms 'ANONYMOUS' or '_DomainUser_' within the details of these registry changes. These specific modifications are indicative of the creation of a new user profile, which can be tied to malicious activities, particularly to tactics and techniques employed by COLDSTEEL RAT variants. It's important to note that while this detection strategy is set at a high level of importance, there may still be occurrences where legitimate activities could trigger a false positive, though such instances are currently unknown."
    }
  },
  {
    "instruction": "Can you explain how to detect: Rundll32 can be use by Cobalt Strike with StartW function to load DLLs from the command line.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect attempts by Cobalt Strike with the StartW function to load DLLs from the command line using Rundll32, you should monitor process creation events on Windows systems for indicators of this specific activity. Key indicators include the execution of 'rundll32.exe' where the image path ends with '\\rundll32.exe', and the original file name is 'RUNDLL32.EXE'. Furthermore, scrutinize the command line arguments to identify strings containing 'rundll32.exe', 'rundll32 ', or the presence of '.dll'. Also, look for command lines ending with ' StartW' or ',StartW' as these are hallmarks of the mentioned attack technique. It is critical to apply this detection logic to all related selection fields to catch the malicious activity accurately. Be cautious, as some activities might mimic these patterns but are legitimate, hence classified as unknown false positives. Given the high severity of this misuse of Rundll32 for nefarious purposes, it is imperative to pay close attention to such indicators to thwart potential security breaches effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Rundll32 can be use by Cobalt Strike with StartW function to load DLLs from the command line.",
      "answer": "In order to detect attempts by Cobalt Strike with the StartW function to load DLLs from the command line using Rundll32, you should monitor process creation events on Windows systems for indicators of this specific activity. Key indicators include the execution of 'rundll32.exe' where the image path ends with '\\rundll32.exe', and the original file name is 'RUNDLL32.EXE'. Furthermore, scrutinize the command line arguments to identify strings containing 'rundll32.exe', 'rundll32 ', or the presence of '.dll'. Also, look for command lines ending with ' StartW' or ',StartW' as these are hallmarks of the mentioned attack technique. It is critical to apply this detection logic to all related selection fields to catch the malicious activity accurately. Be cautious, as some activities might mimic these patterns but are legitimate, hence classified as unknown false positives. Given the high severity of this misuse of Rundll32 for nefarious purposes, it is imperative to pay close attention to such indicators to thwart potential security breaches effectively."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems",
    "context": "",
    "output": "In order to detect adversaries who are attempting to retrieve details about the network configuration and settings of systems they have accessed, or are engaging in information discovery of remote systems, you should monitor for specific activities related to the use of the 'netsh.exe' utility on Windows systems. This involves tracking the creation of processes, specifically focusing on those instances where the process image ends with '\\netsh.exe' or the original file name is identified as 'netsh.exe'. Furthermore, attention should be paid to the command line parameters used with 'netsh.exe', specifically looking for commands that include 'netsh ' in conjunction with 'show ', 'firewall ', and further refined by the presence of 'config ', 'state ', 'rule ', or 'name=all' in the command line. These command line patterns suggest an adversary might be attempting to manipulate or query the firewall settings, which could provide valuable information about network defenses and configurations. However, it is essential to consider that such activities could also be part of legitimate administrative tasks, and therefore, these detections are associated with a low level of alert. This approach aligns with tactics and techniques for discovery and understanding of network configuration as a part of the adversarial toolkit.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems",
      "answer": "In order to detect adversaries who are attempting to retrieve details about the network configuration and settings of systems they have accessed, or are engaging in information discovery of remote systems, you should monitor for specific activities related to the use of the 'netsh.exe' utility on Windows systems. This involves tracking the creation of processes, specifically focusing on those instances where the process image ends with '\\netsh.exe' or the original file name is identified as 'netsh.exe'. Furthermore, attention should be paid to the command line parameters used with 'netsh.exe', specifically looking for commands that include 'netsh ' in conjunction with 'show ', 'firewall ', and further refined by the presence of 'config ', 'state ', 'rule ', or 'name=all' in the command line. These command line patterns suggest an adversary might be attempting to manipulate or query the firewall settings, which could provide valuable information about network defenses and configurations. However, it is essential to consider that such activities could also be part of legitimate administrative tasks, and therefore, these detections are associated with a low level of alert. This approach aligns with tactics and techniques for discovery and understanding of network configuration as a part of the adversarial toolkit."
    }
  },
  {
    "instruction": "Please help me detect the following: potential DLL sideloading of \"SmadHook.dll\", a DLL used by SmadAV antivirus",
    "context": "",
    "output": "Sure!\nIn order to detect potential DLL sideloading of \"SmadHook.dll\", a DLL used by SmadAV antivirus, you should: focus on monitoring image load events within Windows environments. Specifically, look for instances where the DLLs named 'SmadHook32c.dll' or 'SmadHook64c.dll' are loaded. These filenames ending with these specific DLLs could indicate an attempt to sideload a malicious DLL using the legitimate SmadAV antivirus software as a cover.\n\nHowever, it's important to distinguish between legitimate and potentially malicious activity. To reduce false positives, exclude any events where these DLLs are loaded by the official SmadAV executable paths, which include 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect32.exe', 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect64.exe', 'C:\\Program Files\\SMADAV\\SmadavProtect32.exe', and 'C:\\Program Files\\SMADAV\\SmadavProtect64.exe'. Also, exclude any instances where the loaded image starts with the legitimate SmadAV directory paths, either under 'C:\\Program Files (x86)\\SMADAV\\' or 'C:\\Program Files\\SMADAV\\'.\n\nThis is considered a high-level alert due to the rarity of false positives and the serious implications of successful DLL sideloading attacks, allowing attackers to execute malicious code under the guise of a trusted application.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"SmadHook.dll\", a DLL used by SmadAV antivirus",
      "answer": "In order to detect potential DLL sideloading of \"SmadHook.dll\", a DLL used by SmadAV antivirus, you should: focus on monitoring image load events within Windows environments. Specifically, look for instances where the DLLs named 'SmadHook32c.dll' or 'SmadHook64c.dll' are loaded. These filenames ending with these specific DLLs could indicate an attempt to sideload a malicious DLL using the legitimate SmadAV antivirus software as a cover.\n\nHowever, it's important to distinguish between legitimate and potentially malicious activity. To reduce false positives, exclude any events where these DLLs are loaded by the official SmadAV executable paths, which include 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect32.exe', 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect64.exe', 'C:\\Program Files\\SMADAV\\SmadavProtect32.exe', and 'C:\\Program Files\\SMADAV\\SmadavProtect64.exe'. Also, exclude any instances where the loaded image starts with the legitimate SmadAV directory paths, either under 'C:\\Program Files (x86)\\SMADAV\\' or 'C:\\Program Files\\SMADAV\\'.\n\nThis is considered a high-level alert due to the rarity of false positives and the serious implications of successful DLL sideloading attacks, allowing attackers to execute malicious code under the guise of a trusted application."
    }
  },
  {
    "instruction": "How to detect: attempts to record audio with arecord utility",
    "context": "",
    "output": "In order to detect attempts to record audio with arecord utility, you should monitor Linux systems, specifically auditing logs generated by Auditd, for execution events (EXECVE). Look for instances where the arecord utility is executed with specific arguments: the first argument being '-vv' which increases the verbosity of the output, making it more detailed, and the second argument '-fdat' which specifies the format of the recording, in this case, DAT. This combination of arguments is indicative of an attempt to record audio, potentially for surreptitious purposes. Since these logs might contain benign uses of the arecord utility, the level of threat is considered low, but any detection should still be scrutinized. \n\nIn analyzing such activities, it is vital to consider possible false positives, as the use of the arecord command with these arguments might occur in legitimate contexts, and the intention behind these commands might not always be malicious. Nonetheless, monitoring for this behavior is crucial as it aligns with tactics and techniques that could be utilized in reconnaissance or collection efforts by adversaries, though these specific MITRE ATT&CK tags are not directly mentioned in the scenario provided.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to record audio with arecord utility",
      "answer": "In order to detect attempts to record audio with arecord utility, you should monitor Linux systems, specifically auditing logs generated by Auditd, for execution events (EXECVE). Look for instances where the arecord utility is executed with specific arguments: the first argument being '-vv' which increases the verbosity of the output, making it more detailed, and the second argument '-fdat' which specifies the format of the recording, in this case, DAT. This combination of arguments is indicative of an attempt to record audio, potentially for surreptitious purposes. Since these logs might contain benign uses of the arecord utility, the level of threat is considered low, but any detection should still be scrutinized. \n\nIn analyzing such activities, it is vital to consider possible false positives, as the use of the arecord command with these arguments might occur in legitimate contexts, and the intention behind these commands might not always be malicious. Nonetheless, monitoring for this behavior is crucial as it aligns with tactics and techniques that could be utilized in reconnaissance or collection efforts by adversaries, though these specific MITRE ATT&CK tags are not directly mentioned in the scenario provided."
    }
  },
  {
    "instruction": "How can I detect: suspicious execution from an uncommon folder",
    "context": "",
    "output": "In order to detect a suspicious execution from an uncommon folder, you should monitor the creation of processes on Windows systems, focusing on executions that originate from certain directories that are unusual for standard software or system processes to execute from. Specifically, watch for processes starting from directories such as the Recycle Bin, system profiles, logs directories (Intel, RSA), user directories (including All Users, Default, NetworkService, Public), and several Windows internal directories (including addins, debug, Fonts, Help, IME, Media, repair, security, System32\\Tasks, and Tasks). Additionally, any process that starts with 'C:\\Perflogs\\' should be regarded as suspicious.\n\nHowever, to reduce false positives, ignore any detections that originate from the IBM Client Solutions start programs directory within the Public user's directory or from specific Citrix Updater Binaries locations, including the CitrixReceiverUpdater.exe executable.\n\nIn your monitoring, specifically look at the CommandLine and ParentCommandLine fields, if available, to gain further context around the suspicious execution. Given the high severity of detecting processes in these locations, it's crucial to maintain an up-to-date list of false positives, although currently, the potential for unknown false positives exists.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious execution from an uncommon folder",
      "answer": "In order to detect a suspicious execution from an uncommon folder, you should monitor the creation of processes on Windows systems, focusing on executions that originate from certain directories that are unusual for standard software or system processes to execute from. Specifically, watch for processes starting from directories such as the Recycle Bin, system profiles, logs directories (Intel, RSA), user directories (including All Users, Default, NetworkService, Public), and several Windows internal directories (including addins, debug, Fonts, Help, IME, Media, repair, security, System32\\Tasks, and Tasks). Additionally, any process that starts with 'C:\\Perflogs\\' should be regarded as suspicious.\n\nHowever, to reduce false positives, ignore any detections that originate from the IBM Client Solutions start programs directory within the Public user's directory or from specific Citrix Updater Binaries locations, including the CitrixReceiverUpdater.exe executable.\n\nIn your monitoring, specifically look at the CommandLine and ParentCommandLine fields, if available, to gain further context around the suspicious execution. Given the high severity of detecting processes in these locations, it's crucial to maintain an up-to-date list of false positives, although currently, the potential for unknown false positives exists."
    }
  },
  {
    "instruction": "Please help me detect the following: signs of potential use of the WSMAN provider from uncommon processes locally and remote execution.",
    "context": "",
    "output": "Sure!\nIn order to detect signs of potential use of the WSMAN provider from uncommon processes locally and remote execution, you should monitor for specific image load activities in Windows environments. Look for events where certain DLL files associated with WSMAN (Windows Remote Management) are loaded, such as 'WsmSvc.dll', 'WsmAuto.dll', and 'Microsoft.WSMan.Management.ni.dll' among others. Additionally, watch for the loading of 'svchost.exe' in association with the 'WsmWmiPl.dll' file, signifying response from the server side.\n\nIt's important to exclude from your detection certain benign processes that might also load these or similar libraries but are known to be safe. Such processes include 'powershell.exe', various system utilities like 'sdiagnhost.exe' and 'services.exe', command lines invoking 'svchost.exe' for standard services, the .NET optimization service 'mscorsvw.exe', and others related to specific use cases or system activities like server management tools, temporary files, Citrix applications, or instances of PowerShell ISE.\n\nBe cautious though, as some legitimate command lines may contain 'svchost.exe' without further parameters, which should not alone trigger alerts without the specific DLLs being loaded as mentioned above.\n\nBy filtering out these general and specific images and command lines, you can effectively reduce false positives, focusing only on unusual and potentially malicious WSMAN usage patterns. The detection level for this monitoring is set to medium, acknowledging that while not all findings may represent malicious activity, they warrant investigation to rule out unauthorized or harmful remote management actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "signs of potential use of the WSMAN provider from uncommon processes locally and remote execution.",
      "answer": "In order to detect signs of potential use of the WSMAN provider from uncommon processes locally and remote execution, you should monitor for specific image load activities in Windows environments. Look for events where certain DLL files associated with WSMAN (Windows Remote Management) are loaded, such as 'WsmSvc.dll', 'WsmAuto.dll', and 'Microsoft.WSMan.Management.ni.dll' among others. Additionally, watch for the loading of 'svchost.exe' in association with the 'WsmWmiPl.dll' file, signifying response from the server side.\n\nIt's important to exclude from your detection certain benign processes that might also load these or similar libraries but are known to be safe. Such processes include 'powershell.exe', various system utilities like 'sdiagnhost.exe' and 'services.exe', command lines invoking 'svchost.exe' for standard services, the .NET optimization service 'mscorsvw.exe', and others related to specific use cases or system activities like server management tools, temporary files, Citrix applications, or instances of PowerShell ISE.\n\nBe cautious though, as some legitimate command lines may contain 'svchost.exe' without further parameters, which should not alone trigger alerts without the specific DLLs being loaded as mentioned above.\n\nBy filtering out these general and specific images and command lines, you can effectively reduce false positives, focusing only on unusual and potentially malicious WSMAN usage patterns. The detection level for this monitoring is set to medium, acknowledging that while not all findings may represent malicious activity, they warrant investigation to rule out unauthorized or harmful remote management actions."
    }
  },
  {
    "instruction": "Please help me detect the following: Obfuscated Powershell via COMPRESS OBFUSCATION",
    "context": "",
    "output": "Sure!\nIn order to detect obfuscated PowerShell via COMPRESS OBFUSCATION, you should: Monitor Windows driver loads for specific indications of obfuscated PowerShell scripts. Look for scripts that contain both 'new-object' and 'text.encoding]::ascii' within their ImagePath. Additionally, check if 'system.io.compression.deflatestream' or 'system.io.streamreader' are part of the ImagePath. A significant red flag is when the ImagePath ends with 'readtoend', indicating a potential script that decompresses and reads obfuscated code into memory for execution. This detection mechanism is crucial for identifying attempts at defense evasion and execution via obfuscated scripts, associated with the tactics and techniques of defense evasion (T1027) and command and script interpreter (T1059.001). Be aware that there might be unknown scenarios that could trigger false positives, rating this detection with a medium level of confidence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via COMPRESS OBFUSCATION",
      "answer": "In order to detect obfuscated PowerShell via COMPRESS OBFUSCATION, you should: Monitor Windows driver loads for specific indications of obfuscated PowerShell scripts. Look for scripts that contain both 'new-object' and 'text.encoding]::ascii' within their ImagePath. Additionally, check if 'system.io.compression.deflatestream' or 'system.io.streamreader' are part of the ImagePath. A significant red flag is when the ImagePath ends with 'readtoend', indicating a potential script that decompresses and reads obfuscated code into memory for execution. This detection mechanism is crucial for identifying attempts at defense evasion and execution via obfuscated scripts, associated with the tactics and techniques of defense evasion (T1027) and command and script interpreter (T1059.001). Be aware that there might be unknown scenarios that could trigger false positives, rating this detection with a medium level of confidence."
    }
  },
  {
    "instruction": "Please help me detect the following: Obfuscated Powershell via use Rundll32 in Scripts",
    "context": "",
    "output": "Sure!\nIn order to detect obfuscated Powershell via use Rundll32 in Scripts, you should focus on monitoring Windows drivers loading events. Specifically, look for indicators in the ImagePath field that point to suspicious activities. These indicators include combinations and presence of certain strings: the use of '&&' alongside 'rundll32', 'shell32.dll', and 'shellexec_rundll'. Additionally, be alert for the presence of 'value', 'invoke', 'comspec', or 'iex' within the ImagePath. Such occurrences could signal an attempt to execute obfuscated PowerShell scripts via Rundll32, which is a technique attackers might use for defense evasion and execution of malicious code. These activities are associated with the MITRE ATT&CK tactics of Defense Evasion and Execution, with specific techniques being Obfuscated Files or Information (T1027) and Command and Scripting Interpreter: PowerShell (T1059.001). Due to the sophisticated nature of the attack, false positives are possible but currently unknown, and the severity level of this detection rule is considered high.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via use Rundll32 in Scripts",
      "answer": "In order to detect obfuscated Powershell via use Rundll32 in Scripts, you should focus on monitoring Windows drivers loading events. Specifically, look for indicators in the ImagePath field that point to suspicious activities. These indicators include combinations and presence of certain strings: the use of '&&' alongside 'rundll32', 'shell32.dll', and 'shellexec_rundll'. Additionally, be alert for the presence of 'value', 'invoke', 'comspec', or 'iex' within the ImagePath. Such occurrences could signal an attempt to execute obfuscated PowerShell scripts via Rundll32, which is a technique attackers might use for defense evasion and execution of malicious code. These activities are associated with the MITRE ATT&CK tactics of Defense Evasion and Execution, with specific techniques being Obfuscated Files or Information (T1027) and Command and Scripting Interpreter: PowerShell (T1059.001). Due to the sophisticated nature of the attack, false positives are possible but currently unknown, and the severity level of this detection rule is considered high."
    }
  },
  {
    "instruction": "Please help me detect the following: registry changes to Microsoft Office \"VBAWarning\" to a value of \"1\" which enables the execution of all macros, whether signed or unsigned.",
    "context": "",
    "output": "Sure!\nIn order to detect registry changes to Microsoft Office \"VBAWarning\" to a value of \"1\" which enables the execution of all macros, whether signed or unsigned, you should: Focus on monitoring Windows registry modifications, particularly with registry settings category as the log source. The detection should hone in on events where the registry value is being set (EventType: Setvalue) specifically for the registry key that ends with '\\Security\\VBAWarnings'. The crucial detail to watch for is the change of this registry setting to 'DWORD (0x00000001)', indicating that the VBA macro settings are altered to allow all macros to run without restrictions. The tags associated with this security monitoring are Persistence, Privilege Escalation, and Execution, which correspond to techniques that might leverage this registry modification to maintain persistence, elevate privileges, or execute malicious code through Office macros. The severity level of this alert is considered high, acknowledging the potential risk, but instances of false positives are deemed unlikely.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registry changes to Microsoft Office \"VBAWarning\" to a value of \"1\" which enables the execution of all macros, whether signed or unsigned.",
      "answer": "In order to detect registry changes to Microsoft Office \"VBAWarning\" to a value of \"1\" which enables the execution of all macros, whether signed or unsigned, you should: Focus on monitoring Windows registry modifications, particularly with registry settings category as the log source. The detection should hone in on events where the registry value is being set (EventType: Setvalue) specifically for the registry key that ends with '\\Security\\VBAWarnings'. The crucial detail to watch for is the change of this registry setting to 'DWORD (0x00000001)', indicating that the VBA macro settings are altered to allow all macros to run without restrictions. The tags associated with this security monitoring are Persistence, Privilege Escalation, and Execution, which correspond to techniques that might leverage this registry modification to maintain persistence, elevate privileges, or execute malicious code through Office macros. The severity level of this alert is considered high, acknowledging the potential risk, but instances of false positives are deemed unlikely."
    }
  },
  {
    "instruction": "How can I detect: suspicious PowerShell invocation command parameters",
    "context": "",
    "output": "In order to detect suspicious PowerShell invocation command parameters, you should: focus on monitoring PowerShell scripts on Windows systems, ensuring that Script Block Logging is enabled for detailed observation. Look for scripts that contain specific command-line parameters indicating potentially malicious activities. These parameters include forms of encoded commands such as ' -enc ', ' -EncodedCommand ', and ' -ec ', which are often used by attackers to obscure malicious scripts from plain sight. Additionally, watch for indicators that a script is trying to hide its window or execute without interacting with the desktop, through parameters like ' -w hidden ', ' -window hidden ', ' -windowstyle hidden ', ' -w 1 ', ' -noni ', and ' -noninteractive '. These techniques are commonly employed in stealth operations to avoid detection by users or administrators. The presence of any of these command-line arguments should raise a high level of suspicion, although be aware of the rare legitimate cases that may generate false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious PowerShell invocation command parameters",
      "answer": "In order to detect suspicious PowerShell invocation command parameters, you should: focus on monitoring PowerShell scripts on Windows systems, ensuring that Script Block Logging is enabled for detailed observation. Look for scripts that contain specific command-line parameters indicating potentially malicious activities. These parameters include forms of encoded commands such as ' -enc ', ' -EncodedCommand ', and ' -ec ', which are often used by attackers to obscure malicious scripts from plain sight. Additionally, watch for indicators that a script is trying to hide its window or execute without interacting with the desktop, through parameters like ' -w hidden ', ' -window hidden ', ' -windowstyle hidden ', ' -w 1 ', ' -noni ', and ' -noninteractive '. These techniques are commonly employed in stealth operations to avoid detection by users or administrators. The presence of any of these command-line arguments should raise a high level of suspicion, although be aware of the rare legitimate cases that may generate false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: users trying to exploit sudo vulnerability reported in CVE-2019-14287",
    "context": "",
    "output": "In order to detect users trying to exploit the sudo vulnerability reported in CVE-2019-14287, you should focus on monitoring sudo service logs on Linux systems. Specifically, look for instances where the USER field in these logs matches either of two patterns: beginning with a dash followed by any characters ('#-*') or containing the numeric string '#*4294967295'. These patterns are indicative of attempts to exploit the mentioned vulnerability. Due to the critical nature of this vulnerability, any detection of these patterns should be treated with high urgency. False positives are considered unlikely in this context, suggesting that almost any detection based on these criteria is a potential exploitation attempt. This detection strategy is designed to protect against the exploitation of the sudo service, which falls under various attack tactics and techniques but specifically targets privilege escalation vulnerabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "users trying to exploit sudo vulnerability reported in CVE-2019-14287",
      "answer": "In order to detect users trying to exploit the sudo vulnerability reported in CVE-2019-14287, you should focus on monitoring sudo service logs on Linux systems. Specifically, look for instances where the USER field in these logs matches either of two patterns: beginning with a dash followed by any characters ('#-*') or containing the numeric string '#*4294967295'. These patterns are indicative of attempts to exploit the mentioned vulnerability. Due to the critical nature of this vulnerability, any detection of these patterns should be treated with high urgency. False positives are considered unlikely in this context, suggesting that almost any detection based on these criteria is a potential exploitation attempt. This detection strategy is designed to protect against the exploitation of the sudo service, which falls under various attack tactics and techniques but specifically targets privilege escalation vulnerabilities."
    }
  },
  {
    "instruction": "Please help me detect the following: BGP failures which may be indicative of brute force attacks to manipulate routing.",
    "context": "",
    "output": "Sure!\nIn order to detect BGP failures which may be indicative of brute force attacks to manipulate routing, you should: Monitor Huawei BGP (Border Gateway Protocol) logs for specific indicators of potential security threats. Ensure that Huawei BGP logs are enabled and properly ingested into your security monitoring system. Focus on log entries that contain the port number \":179\", which is associated with BGP, as well as the presence of \"BGP_AUTH_FAILED\" messages. These specific indicators can signal unauthorized attempts to access or manipulate the BGP sessions, possibly as a part of a brute force attack aiming to disrupt or redirect internet traffic.\n\nFor this detection strategy, it is important to track and analyze the 'host' and 'PeerId' fields in the logs. These fields can provide insights into which devices or sessions are being targeted or potentially compromised.\n\nConsidering the nature of the indicators, false positive alerts are unlikely, but they may occur due to misconfigurations in the BGP setup. Nonetheless, the severity level for these kinds of alerts is considered low, suggesting that while they should not be ignored, they may not always represent a critical threat by themselves.\n\nBy focusing on the specified log sources, monitoring for these detection conditions, and understanding the context provided by the related MITRE ATT&CK tactics and techniques, organizations can better protect their network infrastructure from certain types of cyber-attacks aiming to compromise BGP sessions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "BGP failures which may be indicative of brute force attacks to manipulate routing.",
      "answer": "In order to detect BGP failures which may be indicative of brute force attacks to manipulate routing, you should: Monitor Huawei BGP (Border Gateway Protocol) logs for specific indicators of potential security threats. Ensure that Huawei BGP logs are enabled and properly ingested into your security monitoring system. Focus on log entries that contain the port number \":179\", which is associated with BGP, as well as the presence of \"BGP_AUTH_FAILED\" messages. These specific indicators can signal unauthorized attempts to access or manipulate the BGP sessions, possibly as a part of a brute force attack aiming to disrupt or redirect internet traffic.\n\nFor this detection strategy, it is important to track and analyze the 'host' and 'PeerId' fields in the logs. These fields can provide insights into which devices or sessions are being targeted or potentially compromised.\n\nConsidering the nature of the indicators, false positive alerts are unlikely, but they may occur due to misconfigurations in the BGP setup. Nonetheless, the severity level for these kinds of alerts is considered low, suggesting that while they should not be ignored, they may not always represent a critical threat by themselves.\n\nBy focusing on the specified log sources, monitoring for these detection conditions, and understanding the context provided by the related MITRE ATT&CK tactics and techniques, organizations can better protect their network infrastructure from certain types of cyber-attacks aiming to compromise BGP sessions."
    }
  },
  {
    "instruction": "Please help me detect the following: use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.",
    "context": "",
    "output": "Sure!\nIn order to detect the use of Advanced IP Scanner, which seems to be a popular tool for ransomware groups, you should: \n\nLook for events related to file activities within Windows systems, specifically focusing on the category that captures file events. Monitor any instances where files are created, modified, or otherwise manipulated within the directory path `\\AppData\\Local\\Temp\\Advanced IP Scanner 2`. This specific path inclusion is pivotal because it's indicative of the Advanced IP Scanner tool's operation, a tool frequently utilized by ransomware groups for reconnaissance or network mapping before launching an attack. However, it's crucial to account for possible legitimate administrative uses of this tool within your environment, marking them as expected exceptions to reduce false positives. This monitoring is deemed to have a medium level of importance in identifying potential security threats related to ransomware activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.",
      "answer": "In order to detect the use of Advanced IP Scanner, which seems to be a popular tool for ransomware groups, you should: \n\nLook for events related to file activities within Windows systems, specifically focusing on the category that captures file events. Monitor any instances where files are created, modified, or otherwise manipulated within the directory path `\\AppData\\Local\\Temp\\Advanced IP Scanner 2`. This specific path inclusion is pivotal because it's indicative of the Advanced IP Scanner tool's operation, a tool frequently utilized by ransomware groups for reconnaissance or network mapping before launching an attack. However, it's crucial to account for possible legitimate administrative uses of this tool within your environment, marking them as expected exceptions to reduce false positives. This monitoring is deemed to have a medium level of importance in identifying potential security threats related to ransomware activity."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Sysmon configuration change, which could be the result of a legitimate reconfiguration or someone trying manipulate the configuration",
    "context": "",
    "output": "In order to detect a Sysmon configuration change, which could be the result of a legitimate reconfiguration or someone trying to manipulate the configuration, you should monitor Windows systems using Sysmon for events with the EventID 16. This indicates a Sysmon configuration change has occurred. While this can be part of regular administrative tasks, it is also a method by which attackers might attempt to alter Sysmon's behavior to evade detection. Note that to reduce false positives, such as legitimate administrative modifications, it could be beneficial to verify changes against the known SHA256 hash of your valid configuration XML file. However, this specific aspect of filtering is a conditional option and not strictly required for the overall detection logic. This approach takes into consideration the operational context where changes to Sysmon configurations, though rare, are critical to scrutinize for potential malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Sysmon configuration change, which could be the result of a legitimate reconfiguration or someone trying manipulate the configuration",
      "answer": "In order to detect a Sysmon configuration change, which could be the result of a legitimate reconfiguration or someone trying to manipulate the configuration, you should monitor Windows systems using Sysmon for events with the EventID 16. This indicates a Sysmon configuration change has occurred. While this can be part of regular administrative tasks, it is also a method by which attackers might attempt to alter Sysmon's behavior to evade detection. Note that to reduce false positives, such as legitimate administrative modifications, it could be beneficial to verify changes against the known SHA256 hash of your valid configuration XML file. However, this specific aspect of filtering is a conditional option and not strictly required for the overall detection logic. This approach takes into consideration the operational context where changes to Sysmon configurations, though rare, are critical to scrutinize for potential malicious activity."
    }
  },
  {
    "instruction": "How can I detect: suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet",
    "context": "",
    "output": "In order to detect a suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet, you should focus on monitoring process creation events within Windows environments. Specifically, look for the execution of commands that attempt to change the lockscreen URL without specifying typical image file extensions like '.jpg', '.jpeg', or '.png'. This activity might indicate an attempt to misuse the functionality for downloading potentially malicious content from the Internet. Additionally, be on the alert for operations that involve deleting registry entries related to 'PersonalizationCSP', as this could be an attempt to remove traces of the lockscreen customization, thus further indicating suspicious behavior. Pay close attention to both the command line and parent command line fields for evidence of such activity. However, be mindful that there could be legitimate uses of these commands depending on the scripts and administrative tools employed within your IT environment, which means there might be instances that these detections are false positives. The importance of these detections is considered high due to the potential misuse of Windows features for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet",
      "answer": "In order to detect a suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet, you should focus on monitoring process creation events within Windows environments. Specifically, look for the execution of commands that attempt to change the lockscreen URL without specifying typical image file extensions like '.jpg', '.jpeg', or '.png'. This activity might indicate an attempt to misuse the functionality for downloading potentially malicious content from the Internet. Additionally, be on the alert for operations that involve deleting registry entries related to 'PersonalizationCSP', as this could be an attempt to remove traces of the lockscreen customization, thus further indicating suspicious behavior. Pay close attention to both the command line and parent command line fields for evidence of such activity. However, be mindful that there could be legitimate uses of these commands depending on the scripts and administrative tools employed within your IT environment, which means there might be instances that these detections are false positives. The importance of these detections is considered high due to the potential misuse of Windows features for malicious purposes."
    }
  },
  {
    "instruction": "How to detect: log entries that appear in exploitation attempts against MS Exchange RCE CVE-2021-42321",
    "context": "",
    "output": "In order to detect log entries that appear in exploitation attempts against MS Exchange RCE CVE-2021-42321, you should focus on analyzing logs from the Microsoft Exchange Management service. Specifically, you should look for log entries with Event IDs 6 and 8, which are indicative of potentially malicious activity. These events become particularly suspicious when they contain specific data patterns such as 'Cmdlet failed. Cmdlet Get-App, ' or 'Task Get-App throwing unhandled exception: System.InvalidCastException:'. These patterns suggest an attempt to exploit the system, likely part of an attack leveraging the CVE-2021-42321 vulnerability in MS Exchange. Monitoring for these signs within the specified log source can alert you to possible Remote Code Execution (RCE) attacks, enabling timely response and mitigation. It's important to note that as false positives are not fully known for these detection criteria, any potential matches found should be thoroughly investigated to confirm their nature. The severity level associated with these detection criteria is high, reflecting the serious impact of successful exploitation attempts leveraging this vulnerability.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "log entries that appear in exploitation attempts against MS Exchange RCE CVE-2021-42321",
      "answer": "In order to detect log entries that appear in exploitation attempts against MS Exchange RCE CVE-2021-42321, you should focus on analyzing logs from the Microsoft Exchange Management service. Specifically, you should look for log entries with Event IDs 6 and 8, which are indicative of potentially malicious activity. These events become particularly suspicious when they contain specific data patterns such as 'Cmdlet failed. Cmdlet Get-App, ' or 'Task Get-App throwing unhandled exception: System.InvalidCastException:'. These patterns suggest an attempt to exploit the system, likely part of an attack leveraging the CVE-2021-42321 vulnerability in MS Exchange. Monitoring for these signs within the specified log source can alert you to possible Remote Code Execution (RCE) attacks, enabling timely response and mitigation. It's important to note that as false positives are not fully known for these detection criteria, any potential matches found should be thoroughly investigated to confirm their nature. The severity level associated with these detection criteria is high, reflecting the serious impact of successful exploitation attempts leveraging this vulnerability."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions)",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions), you should: monitor the creation of processes on Windows systems, particularly focusing on instances where either 'java.exe' or 'javaw.exe' are the parent processes. Specifically, look for cases where the command line used to start the process includes 'SysAidServer'. This is indicative of activities related to the intrusions executed by the MERCURY threat actor and highlights a potential security threat. Be aware that there might be cases where such activities are benign, but they are currently unknown, hence the importance of reviewing such instances closely. The detection of these processes is classified with a medium level of importance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions)",
      "answer": "In order to detect suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions), you should: monitor the creation of processes on Windows systems, particularly focusing on instances where either 'java.exe' or 'javaw.exe' are the parent processes. Specifically, look for cases where the command line used to start the process includes 'SysAidServer'. This is indicative of activities related to the intrusions executed by the MERCURY threat actor and highlights a potential security threat. Be aware that there might be cases where such activities are benign, but they are currently unknown, hence the importance of reviewing such instances closely. The detection of these processes is classified with a medium level of importance."
    }
  },
  {
    "instruction": "Please help me detect the following: use of TruffleSnout.exe an iterative AD discovery toolkit for offensive operators, situational awareness and targeted low noise enumeration.",
    "context": "",
    "output": "Sure!\nIn order to detect the use of TruffleSnout.exe, an iterative AD discovery toolkit for offensive operators, situational awareness, and targeted low noise enumeration, you should: Monitor process creation logs in Windows systems for instances where either the original file name is 'TruffleSnout.exe' or the image path ends with '\\TruffleSnout.exe'. This activity is of high importance due to TruffleSnout.exe's utilization in potentially malicious activities aimed at iterative Active Directory (AD) discovery which is favored by attackers for situational awareness and targeted enumeration with minimal noise. Keep in mind that, as of now, there are no known benign uses for TruffleSnout.exe flagged by this monitoring strategy, but one should remain open to the possibility of false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of TruffleSnout.exe an iterative AD discovery toolkit for offensive operators, situational awareness and targeted low noise enumeration.",
      "answer": "In order to detect the use of TruffleSnout.exe, an iterative AD discovery toolkit for offensive operators, situational awareness, and targeted low noise enumeration, you should: Monitor process creation logs in Windows systems for instances where either the original file name is 'TruffleSnout.exe' or the image path ends with '\\TruffleSnout.exe'. This activity is of high importance due to TruffleSnout.exe's utilization in potentially malicious activities aimed at iterative Active Directory (AD) discovery which is favored by attackers for situational awareness and targeted enumeration with minimal noise. Keep in mind that, as of now, there are no known benign uses for TruffleSnout.exe flagged by this monitoring strategy, but one should remain open to the possibility of false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: user attempts to clear console history. An adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion.",
    "context": "",
    "output": "In order to identify when a user attempts to clear console history, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion, you should: Focus on monitoring PowerShell script behavior within Windows environments, especially where Script Block Logging is enabled. Look for the execution of specific commands that indicate an attempt to clear or delete command history. These include the use of \"Clear-History\" command, which directly clears the command history, and operations involving \"Remove-Item\" or its alias \"rm\", particularly when they target files associated with PowerShell history such as \"ConsoleHost_history.txt\" or the PowerShell readline history save path \"(Get-PSReadlineOption).HistorySavePath\". The detection strategy hinges on catching either the direct clearing of history or the removal of history files, signaling a high-level threat of an adversary trying to hide their tracks within a compromised system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user attempts to clear console history. An adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion.",
      "answer": "In order to identify when a user attempts to clear console history, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion, you should: Focus on monitoring PowerShell script behavior within Windows environments, especially where Script Block Logging is enabled. Look for the execution of specific commands that indicate an attempt to clear or delete command history. These include the use of \"Clear-History\" command, which directly clears the command history, and operations involving \"Remove-Item\" or its alias \"rm\", particularly when they target files associated with PowerShell history such as \"ConsoleHost_history.txt\" or the PowerShell readline history save path \"(Get-PSReadlineOption).HistorySavePath\". The detection strategy hinges on catching either the direct clearing of history or the removal of history files, signaling a high-level threat of an adversary trying to hide their tracks within a compromised system."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of Process Hacker based on binary metadata information (Image, Hash, Imphash, etc). Process Hacker is a tool to view and manipulate processes, kernel options and other low level options. Threat actors regularly abuse it to manipulate system processes.",
    "context": "",
    "output": "In order to detect the execution of Process Hacker based on binary metadata information (Image, Hash, Imphash, etc), where Process Hacker is a tool to view and manipulate processes, kernel options, and other low-level options commonly abused by threat actors to manipulate system processes, you should: Monitor process creation logs on Windows systems for indications of Process Hacker execution. This involves looking for processes with images containing '\\ProcessHacker_' or ending with '\\ProcessHacker.exe'. Additionally, check for any instance where the OriginalFileName is 'ProcessHacker.exe' or 'Process Hacker', the Description is 'Process Hacker', and the Product is indicated as 'Process Hacker'. It's also crucial to scrutinize particular hash values including MD5, SHA1, SHA256, and IMPHASH signatures that are associated with known versions of Process Hacker. If any processes or binaries match these characteristics, they should be flagged for investigation. However, keep in mind that in some environments, Process Hacker may be used by legitimate administrators for system management. Therefore, each detection should be assessed on a case-by-case basis to differentiate between legitimate use and potential misuse by threat actors. The importance of monitoring these attributes is high due to the powerful capabilities of Process Hacker in manipulating system processes, which can be exploited for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Process Hacker based on binary metadata information (Image, Hash, Imphash, etc). Process Hacker is a tool to view and manipulate processes, kernel options and other low level options. Threat actors regularly abuse it to manipulate system processes.",
      "answer": "In order to detect the execution of Process Hacker based on binary metadata information (Image, Hash, Imphash, etc), where Process Hacker is a tool to view and manipulate processes, kernel options, and other low-level options commonly abused by threat actors to manipulate system processes, you should: Monitor process creation logs on Windows systems for indications of Process Hacker execution. This involves looking for processes with images containing '\\ProcessHacker_' or ending with '\\ProcessHacker.exe'. Additionally, check for any instance where the OriginalFileName is 'ProcessHacker.exe' or 'Process Hacker', the Description is 'Process Hacker', and the Product is indicated as 'Process Hacker'. It's also crucial to scrutinize particular hash values including MD5, SHA1, SHA256, and IMPHASH signatures that are associated with known versions of Process Hacker. If any processes or binaries match these characteristics, they should be flagged for investigation. However, keep in mind that in some environments, Process Hacker may be used by legitimate administrators for system management. Therefore, each detection should be assessed on a case-by-case basis to differentiate between legitimate use and potential misuse by threat actors. The importance of monitoring these attributes is high due to the powerful capabilities of Process Hacker in manipulating system processes, which can be exploited for malicious purposes."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor proxy logs for traffic to specific hostnames that exhibit characteristics of malicious communication. This detection strategy involves scrutinizing the hostnames within proxy logs to identify any traffic directed towards a list of suspicious domain names. These domains include 'akamaicontainer.com', 'akamaitechcloudservices.com', 'azuredeploystore.com', 'azureonlinecloud.com', 'azureonlinestorage.com', 'dunamistrd.com', 'glcloudservice.com', 'journalide.org', 'msedgepackageinfo.com', 'msstorageazure.com', 'msstorageboxes.com', 'officeaddons.com', 'officestoragebox.com', 'pbxcloudeservices.com', 'pbxphonenetwork.com', 'pbxsources.com', 'qwepoi123098.com', 'sbmsa.wiki', 'sourceslabs.com', 'visualstudiofactory.com', and 'zacharryblogs.com'. Monitoring for communication with these domains is crucial as they have been identified as indicators of compromise associated with malicious activity related to the 3CX 3CXDesktopApp. Ensuring vigilant monitoring and analysis of proxy logs for these signs can aid in early detection of potential threats, facilitating timely response measures to mitigate any adverse impacts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
      "answer": "In order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor proxy logs for traffic to specific hostnames that exhibit characteristics of malicious communication. This detection strategy involves scrutinizing the hostnames within proxy logs to identify any traffic directed towards a list of suspicious domain names. These domains include 'akamaicontainer.com', 'akamaitechcloudservices.com', 'azuredeploystore.com', 'azureonlinecloud.com', 'azureonlinestorage.com', 'dunamistrd.com', 'glcloudservice.com', 'journalide.org', 'msedgepackageinfo.com', 'msstorageazure.com', 'msstorageboxes.com', 'officeaddons.com', 'officestoragebox.com', 'pbxcloudeservices.com', 'pbxphonenetwork.com', 'pbxsources.com', 'qwepoi123098.com', 'sbmsa.wiki', 'sourceslabs.com', 'visualstudiofactory.com', and 'zacharryblogs.com'. Monitoring for communication with these domains is crucial as they have been identified as indicators of compromise associated with malicious activity related to the 3CX 3CXDesktopApp. Ensuring vigilant monitoring and analysis of proxy logs for these signs can aid in early detection of potential threats, facilitating timely response measures to mitigate any adverse impacts."
    }
  },
  {
    "instruction": "How can I detect: creation of a file named \"WerFault.exe\" in the WinSxS directory by a non-system process, which can be indicative of potential SNAKE malware activity",
    "context": "",
    "output": "In order to detect the creation of a file named \"WerFault.exe\" in the WinSxS directory by a non-system process, which can be indicative of potential SNAKE malware activity, you should: Monitor file events on Windows systems for any instance where a file named \"WerFault.exe\" begins to be created within the \"C:\\Windows\\WinSxS\\\" directory. It is critical to filter out and disregard any occurrences where the initiating process image path starts with \"C:\\Windows\\System32\\\", \"C:\\Windows\\SysWOW64\\\", or \"C:\\Windows\\WinSxS\\\" directories to reduce false positives, as these are standard locations for system processes. This approach highlights a high-level concern for unauthorized modifications or creations in sensitive directories which can be a sign of malicious activity, notably linked with the SNAKE malware operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a file named \"WerFault.exe\" in the WinSxS directory by a non-system process, which can be indicative of potential SNAKE malware activity",
      "answer": "In order to detect the creation of a file named \"WerFault.exe\" in the WinSxS directory by a non-system process, which can be indicative of potential SNAKE malware activity, you should: Monitor file events on Windows systems for any instance where a file named \"WerFault.exe\" begins to be created within the \"C:\\Windows\\WinSxS\\\" directory. It is critical to filter out and disregard any occurrences where the initiating process image path starts with \"C:\\Windows\\System32\\\", \"C:\\Windows\\SysWOW64\\\", or \"C:\\Windows\\WinSxS\\\" directories to reduce false positives, as these are standard locations for system processes. This approach highlights a high-level concern for unauthorized modifications or creations in sensitive directories which can be a sign of malicious activity, notably linked with the SNAKE malware operations."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n",
    "context": "",
    "output": "In order to detect usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool, similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should: Monitor the creation of processes on Windows systems, specifically focusing on instances where the command line includes the invocation of 'Enable-WindowsOptionalFeature' with the parameters '-Online' and '-FeatureName'. This approach is aimed at identifying the enablement of Windows features that could potentially be insecure or unusual within your environment. Specifically, keep an eye out for the activation of features such as 'TelnetServer', 'Internet-Explorer-Optional-amd64', 'TFTP', 'SMB1Protocol', 'Client-ProjFS', and 'Microsoft-Windows-Subsystem-Linux'. These are considered to be of interest since their activation could indicate a misuse of the system's capabilities, possibly for nefarious purposes. Be aware, however, that there could be legitimate reasons for the use of these commands and features within different environments, so it is important to analyze the context of their usage before making a determination. This monitoring approach situates itself at a medium level of alert due to the nature of the actions being monitored and their potential implications on system security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n",
      "answer": "In order to detect usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool, similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should: Monitor the creation of processes on Windows systems, specifically focusing on instances where the command line includes the invocation of 'Enable-WindowsOptionalFeature' with the parameters '-Online' and '-FeatureName'. This approach is aimed at identifying the enablement of Windows features that could potentially be insecure or unusual within your environment. Specifically, keep an eye out for the activation of features such as 'TelnetServer', 'Internet-Explorer-Optional-amd64', 'TFTP', 'SMB1Protocol', 'Client-ProjFS', and 'Microsoft-Windows-Subsystem-Linux'. These are considered to be of interest since their activation could indicate a misuse of the system's capabilities, possibly for nefarious purposes. Be aware, however, that there could be legitimate reasons for the use of these commands and features within different environments, so it is important to analyze the context of their usage before making a determination. This monitoring approach situates itself at a medium level of alert due to the nature of the actions being monitored and their potential implications on system security."
    }
  },
  {
    "instruction": "Can you explain how to detect: Remove SD (Security Descriptor) value in \\Schedule\\TaskCache\\Tree registry hive to hide schedule task. This technique is used by Tarrask malware",
    "context": "",
    "output": "Certainly!\n\nIn order to remove SD (Security Descriptor) value in \\Schedule\\TaskCache\\Tree registry hive to hide schedule task, a technique used by Tarrask malware, you should: Monitor the Windows Registry for deletion events specifically targeting keys. Focus on detecting when the `DeleteKey` event type is identified within the registry deletion logs. It is crucial to watch for alterations to objects that include the `\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\` path in conjunction with 'SD'. These specific actions are indicative of attempts to manipulate scheduled tasks by removing their security descriptors, thus hiding them from routine scrutiny. Be aware that there may be unknown scenarios leading to false positives. This detection process is of a medium priority level and aligns with tactics and techniques related to the modification or manipulation of system processes to conceal unauthorized or malicious tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Remove SD (Security Descriptor) value in \\Schedule\\TaskCache\\Tree registry hive to hide schedule task. This technique is used by Tarrask malware",
      "answer": "In order to remove SD (Security Descriptor) value in \\Schedule\\TaskCache\\Tree registry hive to hide schedule task, a technique used by Tarrask malware, you should: Monitor the Windows Registry for deletion events specifically targeting keys. Focus on detecting when the `DeleteKey` event type is identified within the registry deletion logs. It is crucial to watch for alterations to objects that include the `\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\` path in conjunction with 'SD'. These specific actions are indicative of attempts to manipulate scheduled tasks by removing their security descriptors, thus hiding them from routine scrutiny. Be aware that there may be unknown scenarios leading to false positives. This detection process is of a medium priority level and aligns with tactics and techniques related to the modification or manipulation of system processes to conceal unauthorized or malicious tasks."
    }
  },
  {
    "instruction": "How can I detect: suspicious Spring framework exceptions that could indicate exploitation attempts",
    "context": "",
    "output": "In order to detect suspicious Spring framework exceptions that could indicate exploitation attempts, you should: Monitor application logs from products using the Spring framework for occurrences of specific exceptions. These exceptions include AccessDeniedException, CsrfException, InvalidCsrfTokenException, MissingCsrfTokenException, CookieTheftException, InvalidCookieException, and RequestRejectedException. When any of these exceptions are recorded in the logs, it might suggest an attempt to exploit the system, although one must consider potential false positives that could arise from application bugs. The severity of this monitoring strategy is considered medium, highlighting the importance of staying vigilant against possible exploitation activities targeting the Spring framework.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious Spring framework exceptions that could indicate exploitation attempts",
      "answer": "In order to detect suspicious Spring framework exceptions that could indicate exploitation attempts, you should: Monitor application logs from products using the Spring framework for occurrences of specific exceptions. These exceptions include AccessDeniedException, CsrfException, InvalidCsrfTokenException, MissingCsrfTokenException, CookieTheftException, InvalidCookieException, and RequestRejectedException. When any of these exceptions are recorded in the logs, it might suggest an attempt to exploit the system, although one must consider potential false positives that could arise from application bugs. The severity of this monitoring strategy is considered medium, highlighting the importance of staying vigilant against possible exploitation activities targeting the Spring framework."
    }
  },
  {
    "instruction": "How can I detect: an interactive AT job, which may be used as a form of privilege escalation.",
    "context": "",
    "output": "In order to detect an interactive AT job, which may be used as a form of privilege escalation, you should: Monitor Windows process creation logs for occurrences where the image path ends with '\\at.exe' and the command line includes the term 'interactive'. This detection method is focused on identifying the usage of the AT command in a way that indicates an attempt to execute tasks interactively, potentially for elevating privileges. Since the AT command (at.exe) is considered deprecated as of Windows 8 and later versions, instances where this executable is used in the described manner are unlikely to be legitimate and should be considered with high suspicion. This scenario relates to techniques involved in executing commands with escalated privileges without direct user consent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an interactive AT job, which may be used as a form of privilege escalation.",
      "answer": "In order to detect an interactive AT job, which may be used as a form of privilege escalation, you should: Monitor Windows process creation logs for occurrences where the image path ends with '\\at.exe' and the command line includes the term 'interactive'. This detection method is focused on identifying the usage of the AT command in a way that indicates an attempt to execute tasks interactively, potentially for elevating privileges. Since the AT command (at.exe) is considered deprecated as of Windows 8 and later versions, instances where this executable is used in the described manner are unlikely to be legitimate and should be considered with high suspicion. This scenario relates to techniques involved in executing commands with escalated privileges without direct user consent."
    }
  },
  {
    "instruction": "How to detect: The \"VSIISExeLauncher.exe\" binary part of the Visual Studio/VS Code can be used to execute arbitrary binaries",
    "context": "",
    "output": "In order to detect instances where the \"VSIISExeLauncher.exe\" binary, part of the Visual Studio/VS Code, is used to execute arbitrary binaries, you should monitor Windows process creation logs. Keep an eye out specifically for processes that are either named \"\\VSIISExeLauncher.exe\" at the end of the path or have the original file name \"VSIISExeLauncher.exe\". Additionally, it is important to scrutinize any command line parameters that include sequences such as \" -p \" and \" -a \", as these might indicate attempts at exploiting this executable for unauthorized binary launches. The rule applies across all cases where these conditions match, indicating a medium-level threat, although it's worth noting that there could be instances where these detections are not malicious (although such false positives are unspecified).",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The \"VSIISExeLauncher.exe\" binary part of the Visual Studio/VS Code can be used to execute arbitrary binaries",
      "answer": "In order to detect instances where the \"VSIISExeLauncher.exe\" binary, part of the Visual Studio/VS Code, is used to execute arbitrary binaries, you should monitor Windows process creation logs. Keep an eye out specifically for processes that are either named \"\\VSIISExeLauncher.exe\" at the end of the path or have the original file name \"VSIISExeLauncher.exe\". Additionally, it is important to scrutinize any command line parameters that include sequences such as \" -p \" and \" -a \", as these might indicate attempts at exploiting this executable for unauthorized binary launches. The rule applies across all cases where these conditions match, indicating a medium-level threat, although it's worth noting that there could be instances where these detections are not malicious (although such false positives are unspecified)."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious access to URLs that was noticed in cases in which attackers exploitated the ADSelfService vulnerability CVE-2021-40539",
    "context": "",
    "output": "In order to detect suspicious access to URLs that was noticed in cases in which attackers exploited the ADSelfService vulnerability CVE-2021-40539, you should: Monitor your web server logs for access attempts to specific suspicious URLs. The URLs to be on the lookout for include '/help/admin-guide/Reports/ReportGenerate.jsp', '/ServletApi/../RestApi/LogonCustomization', and '/ServletApi/../RestAPI/Connection'. These URLs have been linked to exploitation attempts of the aforementioned vulnerability. If such access attempts are found in the logs, it indicates a high possibility of an attack, and further investigation should be conducted. Be aware that, due to the specificity of the URLs monitored, the chances for false positives are considered unknown, signifying that while detections may not commonly occur, each should be treated with significant concern and investigated thoroughly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious access to URLs that was noticed in cases in which attackers exploitated the ADSelfService vulnerability CVE-2021-40539",
      "answer": "In order to detect suspicious access to URLs that was noticed in cases in which attackers exploited the ADSelfService vulnerability CVE-2021-40539, you should: Monitor your web server logs for access attempts to specific suspicious URLs. The URLs to be on the lookout for include '/help/admin-guide/Reports/ReportGenerate.jsp', '/ServletApi/../RestApi/LogonCustomization', and '/ServletApi/../RestAPI/Connection'. These URLs have been linked to exploitation attempts of the aforementioned vulnerability. If such access attempts are found in the logs, it indicates a high possibility of an attack, and further investigation should be conducted. Be aware that, due to the specificity of the URLs monitored, the chances for false positives are considered unknown, signifying that while detections may not commonly occur, each should be treated with significant concern and investigated thoroughly."
    }
  },
  {
    "instruction": "How can I detect: suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet",
    "context": "",
    "output": "In order to detect suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet, you should monitor Windows process creation logs for the execution of commands that contain 'Get-LocalGroupMember '. Furthermore, be on the lookout for specific references within those commands to key user groups such as 'domain admins', both correctly spelled and with common typos like ' administrator' without an 's', ' administrateur' again missing an 's', 'enterprise admins', 'Exchange Trusted Subsystem', 'Remote Desktop Users', and the translations of 'Remote Desktop Users' in French as 'Utilisateurs du Bureau \u00e0 distance' and in Spanish as 'Usuarios de escritorio remoto'. It's important to capture both the command lines used and their parent command lines to fully understand the context of these potentially reconnaissance-related activities. However, be aware that legitimate administrative activity might occasionally use these commands, which could lead to false positives. The significance level of this detection is considered medium, indicating it's important but not necessarily indicative of a breach on its own.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet",
      "answer": "In order to detect suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet, you should monitor Windows process creation logs for the execution of commands that contain 'Get-LocalGroupMember '. Furthermore, be on the lookout for specific references within those commands to key user groups such as 'domain admins', both correctly spelled and with common typos like ' administrator' without an 's', ' administrateur' again missing an 's', 'enterprise admins', 'Exchange Trusted Subsystem', 'Remote Desktop Users', and the translations of 'Remote Desktop Users' in French as 'Utilisateurs du Bureau \u00e0 distance' and in Spanish as 'Usuarios de escritorio remoto'. It's important to capture both the command lines used and their parent command lines to fully understand the context of these potentially reconnaissance-related activities. However, be aware that legitimate administrative activity might occasionally use these commands, which could lead to false positives. The significance level of this detection is considered medium, indicating it's important but not necessarily indicative of a breach on its own."
    }
  },
  {
    "instruction": "How to detect: deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group",
    "context": "",
    "output": "In order to detect the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group, you should: Monitor Windows process creation logs for occurrences where the process is `schtasks.exe`, which is indicative of task scheduling operations. Specifically, focus on command lines that include attempts to either delete (`/delete`) or change (`/change`) scheduled tasks, with a mandatory condition that these commands also specifically target the `\\Microsoft\\Windows\\Defrag\\ScheduledDefrag` task by using `/TN` (which specifies the task name). This detection points to the malicious tampering with scheduled defragmentation, a behavior observed in attacks attributed to the Slingshot APT group. Note that while this behavior is suspicious, there can be unknown legitimate reasons (false positives) for these operations, so it's classified with a medium level of severity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group",
      "answer": "In order to detect the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group, you should: Monitor Windows process creation logs for occurrences where the process is `schtasks.exe`, which is indicative of task scheduling operations. Specifically, focus on command lines that include attempts to either delete (`/delete`) or change (`/change`) scheduled tasks, with a mandatory condition that these commands also specifically target the `\\Microsoft\\Windows\\Defrag\\ScheduledDefrag` task by using `/TN` (which specifies the task name). This detection points to the malicious tampering with scheduled defragmentation, a behavior observed in attacks attributed to the Slingshot APT group. Note that while this behavior is suspicious, there can be unknown legitimate reasons (false positives) for these operations, so it's classified with a medium level of severity."
    }
  },
  {
    "instruction": "How can I detect: passwords dumps from Keychain",
    "context": "",
    "output": "In order to detect passwords dumps from Keychain, you should: Monitor the creation of processes on macOS systems focusing on those initiated by the '/usr/bin/security' executable. Watch specifically for command lines that include 'find-certificate' and ' export ', which could indicate an attempt to extract certificates from the system's keychain. Also, be alert for commands containing ' dump-keychain ' and ' login-keychain ', as these are indicative of efforts to dump or access login data stored within macOS Keychain. It's crucial to evaluate these detections carefully, considering that some may stem from legitimate administrative activities. The severity of these activities is deemed medium, given the potential security implications of unauthorized access to stored passwords and certificate data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "passwords dumps from Keychain",
      "answer": "In order to detect passwords dumps from Keychain, you should: Monitor the creation of processes on macOS systems focusing on those initiated by the '/usr/bin/security' executable. Watch specifically for command lines that include 'find-certificate' and ' export ', which could indicate an attempt to extract certificates from the system's keychain. Also, be alert for commands containing ' dump-keychain ' and ' login-keychain ', as these are indicative of efforts to dump or access login data stored within macOS Keychain. It's crucial to evaluate these detections carefully, considering that some may stem from legitimate administrative activities. The severity of these activities is deemed medium, given the potential security implications of unauthorized access to stored passwords and certificate data."
    }
  },
  {
    "instruction": "How to detect: suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)",
    "context": "",
    "output": "In order to detect suspicious PowerShell download patterns that are often used in malicious scripts, stagers, or downloaders (make sure that your backend applies the strings case-insensitive), you should monitor for process creation events on Windows systems. Specifically, look for the use of PowerShell command lines that include patterns indicative of attempts to download and execute remote content. These patterns include various forms of the `Invoke-Expression (IEX)` command combined with `New-Object Net.WebClient` or `System.Net.WebClient` to download strings or files from the internet. Examples of these patterns are command lines containing 'IEX ((New-Object Net.WebClient).DownloadString', 'IEX (New-Object Net.WebClient).DownloadString', 'IEX((New-Object Net.WebClient).DownloadString', 'IEX(New-Object Net.WebClient).DownloadString', ' -command (New-Object System.Net.WebClient).DownloadFile(', or ' -c (New-Object System.Net.WebClient).DownloadFile('. It's important to approach this detection with caution due to the possibility of false positives, such as legitimate software installers that may utilize similar methods to pull packages from remote systems and execute them. The security level for these detections is considered high, underscoring the importance of monitoring for these patterns to identify potential malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)",
      "answer": "In order to detect suspicious PowerShell download patterns that are often used in malicious scripts, stagers, or downloaders (make sure that your backend applies the strings case-insensitive), you should monitor for process creation events on Windows systems. Specifically, look for the use of PowerShell command lines that include patterns indicative of attempts to download and execute remote content. These patterns include various forms of the `Invoke-Expression (IEX)` command combined with `New-Object Net.WebClient` or `System.Net.WebClient` to download strings or files from the internet. Examples of these patterns are command lines containing 'IEX ((New-Object Net.WebClient).DownloadString', 'IEX (New-Object Net.WebClient).DownloadString', 'IEX((New-Object Net.WebClient).DownloadString', 'IEX(New-Object Net.WebClient).DownloadString', ' -command (New-Object System.Net.WebClient).DownloadFile(', or ' -c (New-Object System.Net.WebClient).DownloadFile('. It's important to approach this detection with caution due to the possibility of false positives, such as legitimate software installers that may utilize similar methods to pull packages from remote systems and execute them. The security level for these detections is considered high, underscoring the importance of monitoring for these patterns to identify potential malicious activities."
    }
  },
  {
    "instruction": "How to detect: Potential adversaries stopping ETW providers recording loaded .NET assemblies.",
    "context": "",
    "output": "In order to detect potential adversaries stopping ETW providers from recording loaded .NET assemblies, you should: Monitor the Windows Registry for specific modification events that are indicative of an attempt to disable .NET Framework's Event Tracing for Windows (ETW) feature. This involves tracking any set value operations on registry keys related to the .NET Framework and COMPlus ETW settings. Specifically, watch for modifications to the 'SOFTWARE\\Microsoft\\.NETFramework\\ETWEnabled' and keys ending with '\\COMPlus_ETWEnabled' or '\\COMPlus_ETWFlags'. The critical modifications to look for include the setting of these keys to a value of 0 or 'DWORD (0x00000000)' for disabling ETW, as well as any operations that set 'COMPlus_ETWFlags' and 'COMPlus_ETWEnabled' to a string representation of 0. Such actions are considered highly suspicious and could indicate an adversary's attempt to evade detection by disabling logging of .NET assembly loads, thus intruding into the system while avoiding potential recording by ETW providers. It's important to note that due to the specificity of these modifications, false positives are unknown, indicating the criticality of alerts based on these patterns. Monitoring for these registry changes aids in defending against tactics that aim to inhibit logging mechanisms, which is a crucial aspect of maintaining visibility into system operations and potential malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Potential adversaries stopping ETW providers recording loaded .NET assemblies.",
      "answer": "In order to detect potential adversaries stopping ETW providers from recording loaded .NET assemblies, you should: Monitor the Windows Registry for specific modification events that are indicative of an attempt to disable .NET Framework's Event Tracing for Windows (ETW) feature. This involves tracking any set value operations on registry keys related to the .NET Framework and COMPlus ETW settings. Specifically, watch for modifications to the 'SOFTWARE\\Microsoft\\.NETFramework\\ETWEnabled' and keys ending with '\\COMPlus_ETWEnabled' or '\\COMPlus_ETWFlags'. The critical modifications to look for include the setting of these keys to a value of 0 or 'DWORD (0x00000000)' for disabling ETW, as well as any operations that set 'COMPlus_ETWFlags' and 'COMPlus_ETWEnabled' to a string representation of 0. Such actions are considered highly suspicious and could indicate an adversary's attempt to evade detection by disabling logging of .NET assembly loads, thus intruding into the system while avoiding potential recording by ETW providers. It's important to note that due to the specificity of these modifications, false positives are unknown, indicating the criticality of alerts based on these patterns. Monitoring for these registry changes aids in defending against tactics that aim to inhibit logging mechanisms, which is a crucial aspect of maintaining visibility into system operations and potential malicious activity."
    }
  },
  {
    "instruction": "Can you explain how to detect: PowerShell script file creation with specific name or suffix which was seen being used often by FIN7 PowerShell scripts",
    "context": "",
    "output": "Certainly!\n\nIn order to detect PowerShell script file creation with specific name or suffix which was seen being used often by FIN7 PowerShell scripts, you should: Monitor for the creation of files with names ending in '_64refl.ps1' or exactly named 'host_ip.ps1' within the Windows file system events. This action targets identifying potential malicious activity related to the use of PowerShell scripts commonly employed by the FIN7 group, indicating an advanced persistent threat (APT). The detection of these specific filenames as part of the file events in the Windows environment serves as a high-confidence indicator of compromise, aiding in the early identification and response to potential security incidents linked to known attack methodologies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell script file creation with specific name or suffix which was seen being used often by FIN7 PowerShell scripts",
      "answer": "In order to detect PowerShell script file creation with specific name or suffix which was seen being used often by FIN7 PowerShell scripts, you should: Monitor for the creation of files with names ending in '_64refl.ps1' or exactly named 'host_ip.ps1' within the Windows file system events. This action targets identifying potential malicious activity related to the use of PowerShell scripts commonly employed by the FIN7 group, indicating an advanced persistent threat (APT). The detection of these specific filenames as part of the file events in the Windows environment serves as a high-confidence indicator of compromise, aiding in the early identification and response to potential security incidents linked to known attack methodologies."
    }
  },
  {
    "instruction": "Explain how should I detect the following: program changes the default file association of any extension to an executable.\nWhen a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\n",
    "context": "",
    "output": "In order to detect when a program changes the default file association of any extension to an executable, you should: monitor for the creation of processes on Windows systems, specifically focusing on processes that involve the command line interpreter `cmd.exe`. This can be identified by processes ending with `\\cmd.exe` or having the OriginalFileName of `Cmd.Exe`. Further investigate scenarios where the command line includes the use of the `assoc` command together with the string `exefile`, indicating an attempt to change file associations to executable files. However, it's important to exclude cases where the command line merely contains the string `.exe=exefile`, as this might be a legitimate use case. Such detections are critical, and though encountering them could sometimes be unrelated to malicious activity (though rare and unknown specific false positives), the level of concern should be considered high due to the potential for abuse in directing users to execute malicious software simply by opening seemingly innocuous files.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "program changes the default file association of any extension to an executable.\nWhen a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\n",
      "answer": "In order to detect when a program changes the default file association of any extension to an executable, you should: monitor for the creation of processes on Windows systems, specifically focusing on processes that involve the command line interpreter `cmd.exe`. This can be identified by processes ending with `\\cmd.exe` or having the OriginalFileName of `Cmd.Exe`. Further investigate scenarios where the command line includes the use of the `assoc` command together with the string `exefile`, indicating an attempt to change file associations to executable files. However, it's important to exclude cases where the command line merely contains the string `.exe=exefile`, as this might be a legitimate use case. Such detections are critical, and though encountering them could sometimes be unrelated to malicious activity (though rare and unknown specific false positives), the level of concern should be considered high due to the potential for abuse in directing users to execute malicious software simply by opening seemingly innocuous files."
    }
  },
  {
    "instruction": "How can I detect: use of rclone, a command-line program to manage files on cloud storage, via its default user-agent string",
    "context": "",
    "output": "In order to detect the use of rclone, a command-line program to manage files on cloud storage, via its default user-agent string, you should: monitor your proxy logs for traffic that includes user-agent strings beginning with 'rclone/v'. The detection aims to identify potential unauthorized or malicious use of the rclone tool, which could be involved in data exfiltration activities or unauthorized file access on cloud storage platforms. It's important to log the client IP address ('c-ip') associated with each relevant request to aid in further investigation or remediation efforts. While this detection method is valuable, be aware of possible false positives that may arise from legitimate use of rclone by system administrators or through sanctioned scripts. This activity is characterized by a medium level of concern due to the potential for misuse of the rclone tool in carrying out data theft or manipulation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of rclone, a command-line program to manage files on cloud storage, via its default user-agent string",
      "answer": "In order to detect the use of rclone, a command-line program to manage files on cloud storage, via its default user-agent string, you should: monitor your proxy logs for traffic that includes user-agent strings beginning with 'rclone/v'. The detection aims to identify potential unauthorized or malicious use of the rclone tool, which could be involved in data exfiltration activities or unauthorized file access on cloud storage platforms. It's important to log the client IP address ('c-ip') associated with each relevant request to aid in further investigation or remediation efforts. While this detection method is valuable, be aware of possible false positives that may arise from legitimate use of rclone by system administrators or through sanctioned scripts. This activity is characterized by a medium level of concern due to the potential for misuse of the rclone tool in carrying out data theft or manipulation."
    }
  },
  {
    "instruction": "Please help me detect the following: signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indciates WMI ActiveScriptEventConsumers EventConsumers activity.",
    "context": "",
    "output": "Sure!\nIn order to detect signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indicate WMI ActiveScriptEventConsumers EventConsumers activity, you should monitor Windows image load events for instances where the \"scrcons.exe\" is involved alongside the loading of specific scripting Dynamic Link Libraries (DLLs). These libraries include 'vbscript.dll', 'wbemdisp.dll', 'wshom.ocx', and 'scrrun.dll'. The presence of these activities may signal the malicious use of Windows Management Instrumentation (WMI) for executing scripts, a technique often utilized by attackers for persistence, lateral movement, or information gathering. It is important to note that there may be legitimate uses of these DLLs, and certain devices, such as Dell computers, might trigger these alerts under normal operations, like adjusting screen brightness via the keyboard. The alert level for these findings is classified as medium, indicating a need for investigations to ascertain the nature of these events further.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indciates WMI ActiveScriptEventConsumers EventConsumers activity.",
      "answer": "In order to detect signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indicate WMI ActiveScriptEventConsumers EventConsumers activity, you should monitor Windows image load events for instances where the \"scrcons.exe\" is involved alongside the loading of specific scripting Dynamic Link Libraries (DLLs). These libraries include 'vbscript.dll', 'wbemdisp.dll', 'wshom.ocx', and 'scrrun.dll'. The presence of these activities may signal the malicious use of Windows Management Instrumentation (WMI) for executing scripts, a technique often utilized by attackers for persistence, lateral movement, or information gathering. It is important to note that there may be legitimate uses of these DLLs, and certain devices, such as Dell computers, might trigger these alerts under normal operations, like adjusting screen brightness via the keyboard. The alert level for these findings is classified as medium, indicating a need for investigations to ascertain the nature of these events further."
    }
  },
  {
    "instruction": "How can I detect: suspicious session with two users present",
    "context": "",
    "output": "In order to detect suspicious sessions with two users present, you should focus on monitoring logs from Linux systems, specifically those that pertain to the Guacamole service. The detection mechanism hinges on the identification of logs that explicitly mention \"2 users now present.\" This phrase serves as a key indicator that a session may be compromised or suspicious due to the presence of an unexpected additional user. Since Guacamole is often employed for remote desktop access, any indication of an unexpected second user could suggest a security breach or an unauthorized access attempt.\n\nIt's vital to note that the detection strategy is classified with a high level of importance, suggesting such occurrences are taken seriously and should be investigated promptly. However, due to the broad and somewhat unspecified nature of this detection method, it is acknowledged that there might be unknown false positives. This means that while alerts generated from this detection method require investigation, not all will necessarily correlate with malicious activity. The vigilance in monitoring and analyzing Guacamole service logs for the mentioned phrase will be a critical step in identifying potential breaches attempting to utilize or exploit remote access services in a Linux environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious session with two users present",
      "answer": "In order to detect suspicious sessions with two users present, you should focus on monitoring logs from Linux systems, specifically those that pertain to the Guacamole service. The detection mechanism hinges on the identification of logs that explicitly mention \"2 users now present.\" This phrase serves as a key indicator that a session may be compromised or suspicious due to the presence of an unexpected additional user. Since Guacamole is often employed for remote desktop access, any indication of an unexpected second user could suggest a security breach or an unauthorized access attempt.\n\nIt's vital to note that the detection strategy is classified with a high level of importance, suggesting such occurrences are taken seriously and should be investigated promptly. However, due to the broad and somewhat unspecified nature of this detection method, it is acknowledged that there might be unknown false positives. This means that while alerts generated from this detection method require investigation, not all will necessarily correlate with malicious activity. The vigilance in monitoring and analyzing Guacamole service logs for the mentioned phrase will be a critical step in identifying potential breaches attempting to utilize or exploit remote access services in a Linux environment."
    }
  },
  {
    "instruction": "How can I detect: Trickbot malware process tree pattern in which \"rundll32.exe\" is a parent of \"wermgr.exe\"",
    "context": "",
    "output": "In order to detect Trickbot malware process tree pattern in which \"rundll32.exe\" is a parent of \"wermgr.exe\", you should: monitor for the creation of processes on Windows systems where a process named 'wermgr.exe' is initiated by a parent process named 'rundll32.exe'. Specifically, this detection focuses on instances where 'rundll32.exe' uses the command line including 'DllRegisterServer'. This pattern of process creation is indicative of malicious activity related to Trickbot malware. It is important to pay close attention to these process relationships and command line arguments to successfully identify the presence of Trickbot.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Trickbot malware process tree pattern in which \"rundll32.exe\" is a parent of \"wermgr.exe\"",
      "answer": "In order to detect Trickbot malware process tree pattern in which \"rundll32.exe\" is a parent of \"wermgr.exe\", you should: monitor for the creation of processes on Windows systems where a process named 'wermgr.exe' is initiated by a parent process named 'rundll32.exe'. Specifically, this detection focuses on instances where 'rundll32.exe' uses the command line including 'DllRegisterServer'. This pattern of process creation is indicative of malicious activity related to Trickbot malware. It is important to pay close attention to these process relationships and command line arguments to successfully identify the presence of Trickbot."
    }
  },
  {
    "instruction": "How can I detect: processes loading modules related to PCRE.NET package",
    "context": "",
    "output": "In order to detect processes loading modules related to PCRE.NET package, you should: Monitor Windows image load events for any instances where modules are loaded from a specific path within the AppData\\Local\\Temp directory, notably when the path includes \"\\AppData\\Local\\Temp\\ba9ea7344a4a5f591d6e5dc32a13494b\\\". This activity is noteworthy as it could indicate an attempt to use or abuse PCRE.NET package functionalities in a potentially malicious manner. Given the high level of concern, any detection of such activity should be carefully investigated despite the possibility of unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "processes loading modules related to PCRE.NET package",
      "answer": "In order to detect processes loading modules related to PCRE.NET package, you should: Monitor Windows image load events for any instances where modules are loaded from a specific path within the AppData\\Local\\Temp directory, notably when the path includes \"\\AppData\\Local\\Temp\\ba9ea7344a4a5f591d6e5dc32a13494b\\\". This activity is noteworthy as it could indicate an attempt to use or abuse PCRE.NET package functionalities in a potentially malicious manner. Given the high level of concern, any detection of such activity should be carefully investigated despite the possibility of unknown false positives."
    }
  },
  {
    "instruction": "How to detect: Masquerading occurs when the name or location of an executable, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation.\nSeveral different variations of this technique have been observed.\n",
    "context": "",
    "output": "In order to detect and understand how masquerading occurs when the name or location of an executable, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation, and considering that several different variations of this technique have been observed, you should: Focus on monitoring audit logs from Linux systems, specifically by leveraging the auditd service for detecting execution events. In this context, you are looking for instances where the 'cp' command is executed with the '-i' flag, copying the '/bin/sh' file. This becomes particularly suspicious and worth investigating when the destination of the copy operation ends with '/crond', suggesting an attempt to masquerade a shell as a cron daemon file, potentially to evade detection or maintain persistence on a system. The detection of such an event should be classified with a medium level of concern. It's essential to monitor this kind of behavior as it relates to prevalent adversarial tactics and techniques, such as Defense Evasion, Execution, and Persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Masquerading occurs when the name or location of an executable, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation.\nSeveral different variations of this technique have been observed.\n",
      "answer": "In order to detect and understand how masquerading occurs when the name or location of an executable, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation, and considering that several different variations of this technique have been observed, you should: Focus on monitoring audit logs from Linux systems, specifically by leveraging the auditd service for detecting execution events. In this context, you are looking for instances where the 'cp' command is executed with the '-i' flag, copying the '/bin/sh' file. This becomes particularly suspicious and worth investigating when the destination of the copy operation ends with '/crond', suggesting an attempt to masquerade a shell as a cron daemon file, potentially to evade detection or maintain persistence on a system. The detection of such an event should be classified with a medium level of concern. It's essential to monitor this kind of behavior as it relates to prevalent adversarial tactics and techniques, such as Defense Evasion, Execution, and Persistence."
    }
  },
  {
    "instruction": "Can you explain how to detect: Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect attempts to misuse Remote.exe, which is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files, you should: focus on monitoring process creation activity on Windows systems. Specifically, attention should be directed at instances where processes are initiated and the associated image file name ends with '\\remote.exe' or the original file name is exactly 'remote.exe'. This approach is guided by recognizing the potential exploitation of Remote.exe for unauthorized actions. However, it is crucial to account for legitimate use cases, such as approved installations of the Windows SDK with Debugging Tools for Windows (WinDbg), which are recognized as potential sources of false positives. The sensitivity of detection for this activity is categorized as medium, indicating a balanced approach to identifying potential threats while minimizing unnecessary alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.",
      "answer": "In order to detect attempts to misuse Remote.exe, which is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files, you should: focus on monitoring process creation activity on Windows systems. Specifically, attention should be directed at instances where processes are initiated and the associated image file name ends with '\\remote.exe' or the original file name is exactly 'remote.exe'. This approach is guided by recognizing the potential exploitation of Remote.exe for unauthorized actions. However, it is crucial to account for legitimate use cases, such as approved installations of the Windows SDK with Debugging Tools for Windows (WinDbg), which are recognized as potential sources of false positives. The sensitivity of detection for this activity is categorized as medium, indicating a balanced approach to identifying potential threats while minimizing unnecessary alerts."
    }
  },
  {
    "instruction": "How can I detect: usage of the Gpg4win to decrypt files located in suspicious locations from CLI",
    "context": "",
    "output": "In order to detect usage of the Gpg4win to decrypt files located in suspicious locations from CLI, you should: Focus on the creation of new processes on Windows operating systems, specifically keeping an eye out for any instances of the 'gpg2.exe' executable, which is a component of the GNU Privacy Guard (GnuPG), developed by g10 Code GmbH. It's critical to monitor any command line arguments that include '-passphrase', which indicates the input of a passphrase for decryption directly through the command line interface - a method that could suggest an automated or scripted decryption process, possibly indicating malicious behavior. \n\nAdditionally, pay close attention to the command line paths involving directory locations such as '\\AppData\\Roaming\\', 'C:\\Perflogs\\', 'C:\\Windows\\Temp\\', and 'C:\\temp'. Usage of these paths can be indicative of attempts to decrypt files stored in locations that are commonly used for temporary storage or hiding malicious data away from typical user directories. \n\nIt's important, however, to consider the context of these detections, as legitimate usage of Gpg4win for file encryption and decryption could also trigger these conditions. Thus, any alert based on these criteria should be investigated to discern between benign use and potential security threats. The detection sensitivity is set to a medium level to balance between the likelihood of detecting actual malicious activity and minimizing false positives originating from regular, non-malicious use of GnuPG for encryption and decryption tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the Gpg4win to decrypt files located in suspicious locations from CLI",
      "answer": "In order to detect usage of the Gpg4win to decrypt files located in suspicious locations from CLI, you should: Focus on the creation of new processes on Windows operating systems, specifically keeping an eye out for any instances of the 'gpg2.exe' executable, which is a component of the GNU Privacy Guard (GnuPG), developed by g10 Code GmbH. It's critical to monitor any command line arguments that include '-passphrase', which indicates the input of a passphrase for decryption directly through the command line interface - a method that could suggest an automated or scripted decryption process, possibly indicating malicious behavior. \n\nAdditionally, pay close attention to the command line paths involving directory locations such as '\\AppData\\Roaming\\', 'C:\\Perflogs\\', 'C:\\Windows\\Temp\\', and 'C:\\temp'. Usage of these paths can be indicative of attempts to decrypt files stored in locations that are commonly used for temporary storage or hiding malicious data away from typical user directories. \n\nIt's important, however, to consider the context of these detections, as legitimate usage of Gpg4win for file encryption and decryption could also trigger these conditions. Thus, any alert based on these criteria should be investigated to discern between benign use and potential security threats. The detection sensitivity is set to a medium level to balance between the likelihood of detecting actual malicious activity and minimizing false positives originating from regular, non-malicious use of GnuPG for encryption and decryption tasks."
    }
  },
  {
    "instruction": "Explain how should I detect the following: file creation patterns noticeable during the exploitation of CVE-2021-40444",
    "context": "",
    "output": "In order to detect file creation patterns noticeable during the exploitation of CVE-2021-40444, you should monitor Windows file events for the creation of specific file types associated with this attack by Microsoft Word (winword.exe). Look for instances where files with a '.cab' extension are created in the '\\Windows\\INetCache' directory or when '.inf' files are observed within the '\\AppData\\Local\\Temp\\' path. These can signal malicious actions related to the exploitation. However, it's important to exclude legitimate file creation events, such as when a file named 'Content.inf' is created in the specific, legitimate path 'C:\\Users\\[Username]\\AppData\\Local\\Temp\\'. The focus should be on detecting the unusual creation of '.cab' and '.inf' files following the execution of Word, but not when those creations fall within normal, documented behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "file creation patterns noticeable during the exploitation of CVE-2021-40444",
      "answer": "In order to detect file creation patterns noticeable during the exploitation of CVE-2021-40444, you should monitor Windows file events for the creation of specific file types associated with this attack by Microsoft Word (winword.exe). Look for instances where files with a '.cab' extension are created in the '\\Windows\\INetCache' directory or when '.inf' files are observed within the '\\AppData\\Local\\Temp\\' path. These can signal malicious actions related to the exploitation. However, it's important to exclude legitimate file creation events, such as when a file named 'Content.inf' is created in the specific, legitimate path 'C:\\Users\\[Username]\\AppData\\Local\\Temp\\'. The focus should be on detecting the unusual creation of '.cab' and '.inf' files following the execution of Word, but not when those creations fall within normal, documented behavior."
    }
  },
  {
    "instruction": "How to detect: DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor. Which loads a malicious version of the expected \"version.dll\" dll",
    "context": "",
    "output": "In order to detect DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor, which loads a malicious version of the expected \"version.dll\" dll, you should: Focus on monitoring image load events within Windows environments. Specifically, keep an eye for instances where the \"C:\\Windows\\ADFS\\version.dll\" is loaded. This activity is indicative of an attempt to exploit the system by replacing a legitimate DLL with a malicious version, a common tactic in sophisticated cyber-attacks like those executed by NOBELIUM. Given the critical nature of this detection and its association with high-profile threats, false positives are considered unlikely. This indicates that any hit on this rule should be taken seriously and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor. Which loads a malicious version of the expected \"version.dll\" dll",
      "answer": "In order to detect DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor, which loads a malicious version of the expected \"version.dll\" dll, you should: Focus on monitoring image load events within Windows environments. Specifically, keep an eye for instances where the \"C:\\Windows\\ADFS\\version.dll\" is loaded. This activity is indicative of an attempt to exploit the system by replacing a legitimate DLL with a malicious version, a common tactic in sophisticated cyber-attacks like those executed by NOBELIUM. Given the critical nature of this detection and its association with high-profile threats, false positives are considered unlikely. This indicates that any hit on this rule should be taken seriously and investigated promptly."
    }
  },
  {
    "instruction": "Please help me detect the following: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
    "context": "",
    "output": "Sure!\nIn order to detect an adversary's use of legitimate desktop support and remote access software for establishing an interactive command and control channel to target systems within networks, you should: Monitor for the creation of processes that involve specific characteristics of known remote access software. This includes watching for processes related to the product \"UltraViewer,\" particularly those that are associated with the company \"DucFabulous Co,ltd,\" and specifically for executables named \"UltraViewer_Desktop.exe\". Keeping an eye on these indicators within Windows environments, where such software products are executed, is crucial. It is important, however, to consider that not all instances of this behavior are malicious\u2014as legitimate use of UltraViewer for support purposes may trigger similar activity. Nonetheless, given the medium level of threat associated with this behavior, vigilance is advised. This approach aids in identifying potentially unauthorized remote access attempts that exploit the functionalities of legitimate software, aligning with tactics and techniques adversaries leverage for command and control activities within a network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect an adversary's use of legitimate desktop support and remote access software for establishing an interactive command and control channel to target systems within networks, you should: Monitor for the creation of processes that involve specific characteristics of known remote access software. This includes watching for processes related to the product \"UltraViewer,\" particularly those that are associated with the company \"DucFabulous Co,ltd,\" and specifically for executables named \"UltraViewer_Desktop.exe\". Keeping an eye on these indicators within Windows environments, where such software products are executed, is crucial. It is important, however, to consider that not all instances of this behavior are malicious\u2014as legitimate use of UltraViewer for support purposes may trigger similar activity. Nonetheless, given the medium level of threat associated with this behavior, vigilance is advised. This approach aids in identifying potentially unauthorized remote access attempts that exploit the functionalities of legitimate software, aligning with tactics and techniques adversaries leverage for command and control activities within a network."
    }
  },
  {
    "instruction": "How to detect: attempts to post the file with the usage of wget utility.\nThe adversary can bypass the permission restriction with the misconfigured sudo permission for wget utility which could allow them to read files like /etc/shadow.\n",
    "context": "",
    "output": "In order to detect attempts to post the file with the usage of wget utility, you should: Monitor audit logs on Linux systems for instances of the `wget` utility being used with the command-line option `--post-file=`, indicating an attempt to send a file to a remote server. This activity is captured by the audit daemon (`auditd`) and involves the `EXECVE` call type, signifying the execution of a program. Specifically, look for cases where the `wget` command is followed by `--post-file=` as this could be an attempt by an adversary to exploit misconfigured sudo permissions to read sensitive files like `/etc/shadow` and pass them to remote locations. Be aware that there may be legitimate instances of this activity, such as legitimate file upload operations using `wget`. Therefore, it's important to investigate each case to distinguish between benign and malicious uses. This detection is associated with tactics and techniques such as credential access through file manipulation and permission bypass.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to post the file with the usage of wget utility.\nThe adversary can bypass the permission restriction with the misconfigured sudo permission for wget utility which could allow them to read files like /etc/shadow.\n",
      "answer": "In order to detect attempts to post the file with the usage of wget utility, you should: Monitor audit logs on Linux systems for instances of the `wget` utility being used with the command-line option `--post-file=`, indicating an attempt to send a file to a remote server. This activity is captured by the audit daemon (`auditd`) and involves the `EXECVE` call type, signifying the execution of a program. Specifically, look for cases where the `wget` command is followed by `--post-file=` as this could be an attempt by an adversary to exploit misconfigured sudo permissions to read sensitive files like `/etc/shadow` and pass them to remote locations. Be aware that there may be legitimate instances of this activity, such as legitimate file upload operations using `wget`. Therefore, it's important to investigate each case to distinguish between benign and malicious uses. This detection is associated with tactics and techniques such as credential access through file manipulation and permission bypass."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential DLL sideloading of DLLs that are part of antivirus software suchas McAfee, Symantec...etc",
    "context": "",
    "output": "In order to detect potential DLL sideloading of DLLs that are part of antivirus software such as McAfee, Symantec, etc., you should: Monitor the loading of specific DLL files associated with various antivirus programs on Windows systems. This involves tracking the loading ('image_load') of DLL files that end with identifiers unique to each antivirus tool, such as '\\log.dll' for Bitdefender, '\\qrt.dll' for F-Secure, '\\ashldres.dll', '\\lockdown.dll', and '\\vsodscpl.dll' for McAfee, '\\vftrace.dll' for CyberArk, '\\wsc.dll' for Avast, '\\DLPPREM32.dll' for ESET's DesLock, and '\\tmdbglog.dll' for Trend Micro Titanium. The focus is on detecting abnormal paths from where these DLLs are loaded, which might indicate an attempt to sideload malicious DLLs by mimicking antivirus software DLLs. Exclusions are in place for known legitimate paths of each antivirus product to reduce false positives, such as certain directories where these DLLs are normally found. The practice of DLL sideloading exploits the way Windows searches for DLLs to load into a program, potentially allowing attackers to trick applications into loading malicious DLLs if placed in the search path. Monitoring for such activities with these specific parameters can help in identifying unauthorized manipulation or breach attempts involving critical security infrastructure like antivirus tools. Additionally, known false positives include situations where the same DLL names are used by legitimate applications, so these should be investigated and filtered out accordingly to maintain the integrity of monitoring efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of DLLs that are part of antivirus software suchas McAfee, Symantec...etc",
      "answer": "In order to detect potential DLL sideloading of DLLs that are part of antivirus software such as McAfee, Symantec, etc., you should: Monitor the loading of specific DLL files associated with various antivirus programs on Windows systems. This involves tracking the loading ('image_load') of DLL files that end with identifiers unique to each antivirus tool, such as '\\log.dll' for Bitdefender, '\\qrt.dll' for F-Secure, '\\ashldres.dll', '\\lockdown.dll', and '\\vsodscpl.dll' for McAfee, '\\vftrace.dll' for CyberArk, '\\wsc.dll' for Avast, '\\DLPPREM32.dll' for ESET's DesLock, and '\\tmdbglog.dll' for Trend Micro Titanium. The focus is on detecting abnormal paths from where these DLLs are loaded, which might indicate an attempt to sideload malicious DLLs by mimicking antivirus software DLLs. Exclusions are in place for known legitimate paths of each antivirus product to reduce false positives, such as certain directories where these DLLs are normally found. The practice of DLL sideloading exploits the way Windows searches for DLLs to load into a program, potentially allowing attackers to trick applications into loading malicious DLLs if placed in the search path. Monitoring for such activities with these specific parameters can help in identifying unauthorized manipulation or breach attempts involving critical security infrastructure like antivirus tools. Additionally, known false positives include situations where the same DLL names are used by legitimate applications, so these should be investigated and filtered out accordingly to maintain the integrity of monitoring efforts."
    }
  },
  {
    "instruction": "How to detect: suspicious Windows Error Reporting manager (wermgr.exe) process patterns - suspicious parents / children, execution folders, command lines etc.",
    "context": "",
    "output": "In order to detect suspicious Windows Error Reporting manager (wermgr.exe) process patterns - suspicious parents / children, execution folders, command lines etc., you should:\n\nMonitor the creation of processes on Windows systems, specifically focusing on instances where wermgr.exe (the Windows Error Reporting manager) is involved. If wermgr.exe is observed as a parent process for various system and administrative utilities such as nslookup.exe, ipconfig.exe, net.exe, net1.exe, whoami.exe, netstat.exe, systeminfo.exe, cmd.exe, and powershell.exe, it should be considered suspicious. This is because wermgr.exe typically does not initiate these types of processes under normal operations. Additionally, if wermgr.exe is executed from locations other than the standard Windows directories like C:\\Windows\\System32\\, C:\\Windows\\SysWOW64\\, or C:\\Windows\\WinSxS\\, it might indicate an attempt to disguise malicious activities or evasion techniques. This approach aids in identifying potentially malicious activities that could be indicative of command and control, lateral movement, privilege escalation, or reconnaissance attempts within a compromised environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious Windows Error Reporting manager (wermgr.exe) process patterns - suspicious parents / children, execution folders, command lines etc.",
      "answer": "In order to detect suspicious Windows Error Reporting manager (wermgr.exe) process patterns - suspicious parents / children, execution folders, command lines etc., you should:\n\nMonitor the creation of processes on Windows systems, specifically focusing on instances where wermgr.exe (the Windows Error Reporting manager) is involved. If wermgr.exe is observed as a parent process for various system and administrative utilities such as nslookup.exe, ipconfig.exe, net.exe, net1.exe, whoami.exe, netstat.exe, systeminfo.exe, cmd.exe, and powershell.exe, it should be considered suspicious. This is because wermgr.exe typically does not initiate these types of processes under normal operations. Additionally, if wermgr.exe is executed from locations other than the standard Windows directories like C:\\Windows\\System32\\, C:\\Windows\\SysWOW64\\, or C:\\Windows\\WinSxS\\, it might indicate an attempt to disguise malicious activities or evasion techniques. This approach aids in identifying potentially malicious activities that could be indicative of command and control, lateral movement, privilege escalation, or reconnaissance attempts within a compromised environment."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of a new named pipe using the \"mkfifo\" utility",
    "context": "",
    "output": "In order to detect the creation of a new named pipe using the \"mkfifo\" utility, you should: Monitor process creation logs on Linux systems for any instances where the process image name ends with '/mkfifo'. This specific condition points to the use of the 'mkfifo' utility, which is involved in the creation of named pipes. Such activity can be benign but also may be utilized by adversaries to facilitate inter-process communication in a manner that supports malicious objectives. It is important to note that while this detection strategy is valuable, it might also yield unknown false positives due to the legitimate use of named pipes in various applications. Consequently, the detection level is categorized as low, indicating that while it's worth monitoring for, it doesn't necessarily suggest a high probability of malicious activity on its own.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new named pipe using the \"mkfifo\" utility",
      "answer": "In order to detect the creation of a new named pipe using the \"mkfifo\" utility, you should: Monitor process creation logs on Linux systems for any instances where the process image name ends with '/mkfifo'. This specific condition points to the use of the 'mkfifo' utility, which is involved in the creation of named pipes. Such activity can be benign but also may be utilized by adversaries to facilitate inter-process communication in a manner that supports malicious objectives. It is important to note that while this detection strategy is valuable, it might also yield unknown false positives due to the legitimate use of named pipes in various applications. Consequently, the detection level is categorized as low, indicating that while it's worth monitoring for, it doesn't necessarily suggest a high probability of malicious activity on its own."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n",
    "context": "",
    "output": "In order to detect if adversaries are abusing msiexec.exe to proxy execution of malicious payloads, one should monitor process creation logs within Windows environments. Specifically, it is important to look for instances where `msiexec.exe` is executed, as this binary is a legitimate command-line utility for the Windows Installer, primarily used for handling .msi (Microsoft Installer) packages.\n\nDuring monitoring, the focus should be on the command line arguments associated with `msiexec.exe`. Attention should be given to occurrences where the command line contains either the ` /y` or ` -y` arguments. These particular arguments are significant as they may indicate an attempt to silently carry out actions, which can be a common tactic employed by adversaries to avoid detection.\n\nMoreover, to refine the detection and reduce potential false positives, certain command line patterns that are known to be used in legitimate contexts (especially by Apple-related software such as Bonjour and Apple Software Update components) should be excluded from alerts. For example, command lines explicitly involving paths to `Bonjour\\mdnsNSP.dll`, `Apple Software Update\\ScriptingObjectModel.dll`, `Apple Software Update\\SoftwareUpdateAdmin.dll`, or `Windows\\CCM\\` directories with the same `/Y` or `-Y` arguments should not trigger alerts, as these are recognized legitimate uses of `msiexec.exe`.\n\nHowever, it's crucial to understand that despite these exclusions, there might still be occasions where legitimate scripts trigger alerts, hence the categorization of such detections carries a medium level of confidence. \n\nBy closely observing the execution patterns of `msiexec.exe` with the specified criteria and excluding known legitimate patterns, security professionals can effectively identify potential abuse of this binary for executing malicious payloads. This detection strategy is aligned with understanding adversary behaviors that leverage system utilities for malicious purposes, a methodology underscored by MITRE ATT&CK tactics and techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n",
      "answer": "In order to detect if adversaries are abusing msiexec.exe to proxy execution of malicious payloads, one should monitor process creation logs within Windows environments. Specifically, it is important to look for instances where `msiexec.exe` is executed, as this binary is a legitimate command-line utility for the Windows Installer, primarily used for handling .msi (Microsoft Installer) packages.\n\nDuring monitoring, the focus should be on the command line arguments associated with `msiexec.exe`. Attention should be given to occurrences where the command line contains either the ` /y` or ` -y` arguments. These particular arguments are significant as they may indicate an attempt to silently carry out actions, which can be a common tactic employed by adversaries to avoid detection.\n\nMoreover, to refine the detection and reduce potential false positives, certain command line patterns that are known to be used in legitimate contexts (especially by Apple-related software such as Bonjour and Apple Software Update components) should be excluded from alerts. For example, command lines explicitly involving paths to `Bonjour\\mdnsNSP.dll`, `Apple Software Update\\ScriptingObjectModel.dll`, `Apple Software Update\\SoftwareUpdateAdmin.dll`, or `Windows\\CCM\\` directories with the same `/Y` or `-Y` arguments should not trigger alerts, as these are recognized legitimate uses of `msiexec.exe`.\n\nHowever, it's crucial to understand that despite these exclusions, there might still be occasions where legitimate scripts trigger alerts, hence the categorization of such detections carries a medium level of confidence. \n\nBy closely observing the execution patterns of `msiexec.exe` with the specified criteria and excluding known legitimate patterns, security professionals can effectively identify potential abuse of this binary for executing malicious payloads. This detection strategy is aligned with understanding adversary behaviors that leverage system utilities for malicious purposes, a methodology underscored by MITRE ATT&CK tactics and techniques."
    }
  },
  {
    "instruction": "Please help me detect the following: new BITS transfer job where the LocalName/Saved file is stored in a potentially suspicious location",
    "context": "",
    "output": "Sure!\nIn order to Detects new BITS transfer job where the LocalName/Saved file is stored in a potentially suspicious location, you should: Monitor Windows Background Intelligent Transfer Service (BITS) client logs specifically to catch events with an ID of 16403, which signifies the creation of a new BITS transfer job. Particularly, focus on identifying any job where the saved file (denoted by LocalName) is kept in locations that might be generally considered unconventional or suspicious for regular user or system activities. These locations include the desktop (any path containing '\\Desktop\\'), the public users' directory ('C:\\Users\\Public\\'), and the performance logs directory ('C:\\PerfLogs\\'). While these directories can be used legitimately, their utilization for storing files from BITS transfer jobs could indicate malicious behavior, such as staging areas for malware or tools by attackers. It's noted that detections regarding these specifics might occasionally trigger false positives due to unexpected but legitimate uses, hence the assignment of a high severity level, emphasizing the need for further investigation upon detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "new BITS transfer job where the LocalName/Saved file is stored in a potentially suspicious location",
      "answer": "In order to Detects new BITS transfer job where the LocalName/Saved file is stored in a potentially suspicious location, you should: Monitor Windows Background Intelligent Transfer Service (BITS) client logs specifically to catch events with an ID of 16403, which signifies the creation of a new BITS transfer job. Particularly, focus on identifying any job where the saved file (denoted by LocalName) is kept in locations that might be generally considered unconventional or suspicious for regular user or system activities. These locations include the desktop (any path containing '\\Desktop\\'), the public users' directory ('C:\\Users\\Public\\'), and the performance logs directory ('C:\\PerfLogs\\'). While these directories can be used legitimately, their utilization for storing files from BITS transfer jobs could indicate malicious behavior, such as staging areas for malware or tools by attackers. It's noted that detections regarding these specifics might occasionally trigger false positives due to unexpected but legitimate uses, hence the assignment of a high severity level, emphasizing the need for further investigation upon detection."
    }
  },
  {
    "instruction": "How can I detect: Detect suspicious Kerberos TGT requests.\nOnce an attacer obtains a computer certificate by abusing Active Directory Certificate Services in combination with PetitPotam, the next step would be to leverage the certificate for malicious purposes.\nOne way of doing this is to request a Kerberos Ticket Granting Ticket using a tool like Rubeus.\nThis request will generate a 4768 event with some unusual fields depending on the environment.\nThis analytic will require tuning, we recommend filtering Account_Name to the Domain Controller computer accounts.\n",
    "context": "",
    "output": "In order to detect suspicious Kerberos TGT requests, you should focus on monitoring security logs from Windows systems, specifically looking out for the advanced audit policy setting \"Account Logon > Kerberos Authentication Service\" which must be configured to log Success and Failure events. Pay special attention to event ID 4768, which logs Kerberos authentication ticket requests. An indicator of suspicious activity might include the TargetUserName field ending with a '$' character and the presence of any value in the CertThumbprint field, suggesting a certificate was used in the authentication process, a tactic attackers may employ after obtaining a computer certificate through vulnerabilities like PetitPotam. However, it's important to exclude events that have an IpAddress equal to '::1', as this is the IPv6 loopback address representing local system activity, and events where the CertThumbprint is empty to reduce the likelihood of false positives. \n\nGiven the possibility of false positives, especially in environments where certificates are used for legitimate authentication purposes, additional filtering is recommended based on the Account_Name to focus specifically on Domain Controller computer accounts, which are more likely targets in these attack scenarios. This detailed approach helps in pinpointing attempts to misuse the Active Directory Certificate Services for obtaining a Ticket Granting Ticket (TGT) using tools like Rubeus, falling under suspicious Kerberos TGT request activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect suspicious Kerberos TGT requests.\nOnce an attacer obtains a computer certificate by abusing Active Directory Certificate Services in combination with PetitPotam, the next step would be to leverage the certificate for malicious purposes.\nOne way of doing this is to request a Kerberos Ticket Granting Ticket using a tool like Rubeus.\nThis request will generate a 4768 event with some unusual fields depending on the environment.\nThis analytic will require tuning, we recommend filtering Account_Name to the Domain Controller computer accounts.\n",
      "answer": "In order to detect suspicious Kerberos TGT requests, you should focus on monitoring security logs from Windows systems, specifically looking out for the advanced audit policy setting \"Account Logon > Kerberos Authentication Service\" which must be configured to log Success and Failure events. Pay special attention to event ID 4768, which logs Kerberos authentication ticket requests. An indicator of suspicious activity might include the TargetUserName field ending with a '$' character and the presence of any value in the CertThumbprint field, suggesting a certificate was used in the authentication process, a tactic attackers may employ after obtaining a computer certificate through vulnerabilities like PetitPotam. However, it's important to exclude events that have an IpAddress equal to '::1', as this is the IPv6 loopback address representing local system activity, and events where the CertThumbprint is empty to reduce the likelihood of false positives. \n\nGiven the possibility of false positives, especially in environments where certificates are used for legitimate authentication purposes, additional filtering is recommended based on the Account_Name to focus specifically on Domain Controller computer accounts, which are more likely targets in these attack scenarios. This detailed approach helps in pinpointing attempts to misuse the Active Directory Certificate Services for obtaining a Ticket Granting Ticket (TGT) using tools like Rubeus, falling under suspicious Kerberos TGT request activities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious Unicode characters in the command line, which could be a sign of obfuscation or defense evasion",
    "context": "",
    "output": "In order to detect suspicious Unicode characters in the command line, which could be a sign of obfuscation or defense evasion, you should: monitor Windows process creation logs for instances where command lines contain unusual Unicode characters that attackers may use as obfuscation techniques or to evade defenses. Specifically, look for command lines that include spacing modifier letters such as '\u02e3' (Unicode 0x02E3), '\u02ea' (Unicode 0x02EA), and '\u02e2' (Unicode 0x02E2), which might be used to disguise spaces. Additionally, keep an eye out for alternative forms of forward slashes and hyphens, such as '\u2215' (Unicode 0x22FF) and '\u2044' (Unicode 0x206F) for slashes, and '\u2015' (Unicode 0x2015) and '\u2014' (Unicode 0x2014) for hyphens, as these could be employed to bypass security mechanisms that scan command lines for specific patterns. Detecting these characters requires only matching one of the described patterns (using the condition \"1 of selection*\"), suggesting a high level of concern when such activity is spotted, although the potential for false positives remains undetermined.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious Unicode characters in the command line, which could be a sign of obfuscation or defense evasion",
      "answer": "In order to detect suspicious Unicode characters in the command line, which could be a sign of obfuscation or defense evasion, you should: monitor Windows process creation logs for instances where command lines contain unusual Unicode characters that attackers may use as obfuscation techniques or to evade defenses. Specifically, look for command lines that include spacing modifier letters such as '\u02e3' (Unicode 0x02E3), '\u02ea' (Unicode 0x02EA), and '\u02e2' (Unicode 0x02E2), which might be used to disguise spaces. Additionally, keep an eye out for alternative forms of forward slashes and hyphens, such as '\u2215' (Unicode 0x22FF) and '\u2044' (Unicode 0x206F) for slashes, and '\u2015' (Unicode 0x2015) and '\u2014' (Unicode 0x2014) for hyphens, as these could be employed to bypass security mechanisms that scan command lines for specific patterns. Detecting these characters requires only matching one of the described patterns (using the condition \"1 of selection*\"), suggesting a high level of concern when such activity is spotted, although the potential for false positives remains undetermined."
    }
  },
  {
    "instruction": "How to detect: default PsExec service filename which indicates PsExec service installation and execution",
    "context": "",
    "output": "In order to detect default PsExec service filename which indicates PsExec service installation and execution, you should: monitor file events on Windows systems for occurrences where a filename ends with '\\PSEXESVC.exe'. This is significant as it signifies the installation or execution of the PsExec service, a legitimate tool that can be used by attackers for lateral movement or executing commands. For any detected event, collecting details such as EventID, CommandLine, ParentCommandLine, ServiceName, ServiceFileName, TargetFilename, and PipeName is essential. Although this detection rule carries a low level of potential false positives, it's vital to stay vigilant for any unknown scenarios that might trigger this alert inadvertently.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "default PsExec service filename which indicates PsExec service installation and execution",
      "answer": "In order to detect default PsExec service filename which indicates PsExec service installation and execution, you should: monitor file events on Windows systems for occurrences where a filename ends with '\\PSEXESVC.exe'. This is significant as it signifies the installation or execution of the PsExec service, a legitimate tool that can be used by attackers for lateral movement or executing commands. For any detected event, collecting details such as EventID, CommandLine, ParentCommandLine, ServiceName, ServiceFileName, TargetFilename, and PipeName is essential. Although this detection rule carries a low level of potential false positives, it's vital to stay vigilant for any unknown scenarios that might trigger this alert inadvertently."
    }
  },
  {
    "instruction": "Can you explain how to detect: Execute commands and binaries from the context of \"forfiles\". This is used as a LOLBIN for example to bypass application whitelisting.",
    "context": "",
    "output": "Certainly!\n\nIn order to execute commands and binaries from the context of \"forfiles\", a method employed for example to bypass application whitelisting, you should monitor process creation events on Windows systems for specific characteristics associated with the use of \"forfiles.exe\". Detecting such activity involves identifying instances where \u201cforfiles.exe\u201d is executed, which can be pinpointed by looking for process creation events where the image path ends with \"\\forfiles.exe\" or the original file name is exactly \"forfiles.exe\". Additionally, it is crucial to pay attention to the command line parameters used with \"forfiles.exe\", specifically looking for occurrences of the \"/p\", \"-p\", \"/m\", \"-m\", \"/c\", or \"-c\" flags, as these are indicative of potential malicious use for command execution or script processing. It\u2019s important to note that while these indicators can point towards a malicious attempt at executing commands or binaries in a way that bypasses restrictions, there could be legitimate administrative or scripting activities that utilize \"forfiles.exe\" with these parameters. Thus, these detections should be considered with medium urgency and investigated to differentiate between benign use and malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Execute commands and binaries from the context of \"forfiles\". This is used as a LOLBIN for example to bypass application whitelisting.",
      "answer": "In order to execute commands and binaries from the context of \"forfiles\", a method employed for example to bypass application whitelisting, you should monitor process creation events on Windows systems for specific characteristics associated with the use of \"forfiles.exe\". Detecting such activity involves identifying instances where \u201cforfiles.exe\u201d is executed, which can be pinpointed by looking for process creation events where the image path ends with \"\\forfiles.exe\" or the original file name is exactly \"forfiles.exe\". Additionally, it is crucial to pay attention to the command line parameters used with \"forfiles.exe\", specifically looking for occurrences of the \"/p\", \"-p\", \"/m\", \"-m\", \"/c\", or \"-c\" flags, as these are indicative of potential malicious use for command execution or script processing. It\u2019s important to note that while these indicators can point towards a malicious attempt at executing commands or binaries in a way that bypasses restrictions, there could be legitimate administrative or scripting activities that utilize \"forfiles.exe\" with these parameters. Thus, these detections should be considered with medium urgency and investigated to differentiate between benign use and malicious activities."
    }
  },
  {
    "instruction": "Please help me detect the following: potential exploitation attempt of undocumented Windows Server Pre Auth Remote Code Execution (RCE)",
    "context": "",
    "output": "Sure!\nIn order to detect potential exploitation attempt of undocumented Windows Server Pre Auth Remote Code Execution (RCE), you should: Monitor the creation of processes on Windows systems, focusing particularly on processes that are children of or identical to `svchost.exe`. This involves keeping an eye out for instances where the `svchost.exe` process is both starting another `svchost.exe` and where the command lines for these processes include the argument `-k DHCPServer`. Additionally, it's crucial to pay attention to the user context under which these processes are initiated, specifically looking for variations of the \"Network Service\" account in different language settings, including \"NETWORK SERVICE\", \"NETZWERKDIENST\", \"SERVIZIO DI RETE\", and \"SERVICIO DE RED\". This detailed surveillance is essential for identifying suspicious activity that could indicate an attacker is exploiting a vulnerability to execute remote code on a Windows Server without prior authentication.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential exploitation attempt of undocumented Windows Server Pre Auth Remote Code Execution (RCE)",
      "answer": "In order to detect potential exploitation attempt of undocumented Windows Server Pre Auth Remote Code Execution (RCE), you should: Monitor the creation of processes on Windows systems, focusing particularly on processes that are children of or identical to `svchost.exe`. This involves keeping an eye out for instances where the `svchost.exe` process is both starting another `svchost.exe` and where the command lines for these processes include the argument `-k DHCPServer`. Additionally, it's crucial to pay attention to the user context under which these processes are initiated, specifically looking for variations of the \"Network Service\" account in different language settings, including \"NETWORK SERVICE\", \"NETZWERKDIENST\", \"SERVIZIO DI RETE\", and \"SERVICIO DE RED\". This detailed surveillance is essential for identifying suspicious activity that could indicate an attacker is exploiting a vulnerability to execute remote code on a Windows Server without prior authentication."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation)",
    "context": "",
    "output": "In order to detect suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation), you should: Monitor the process creation logs in Windows for instances where the keytool.exe, a Java utility, is the parent process leading to the creation of various common and administrative shell processes. These include cmd.exe, sh.exe, bash.exe, powershell.exe, pwsh.exe, schtasks.exe, certutil.exe, whoami.exe, bitsadmin.exe, wscript.exe, cscript.exe, scrcons.exe, regsvr32.exe, hh.exe, wmic.exe, mshta.exe, rundll32.exe, forfiles.exe, scriptrunner.exe, mftrace.exe, AppVLP.exe, systeminfo.exe, reg.exe, and query.exe. This activity is considered highly suspicious as it might indicate an attempt to exploit vulnerabilities related to the Java utility keytool, which is not commonly used to spawn such processes directly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation)",
      "answer": "In order to detect suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation), you should: Monitor the process creation logs in Windows for instances where the keytool.exe, a Java utility, is the parent process leading to the creation of various common and administrative shell processes. These include cmd.exe, sh.exe, bash.exe, powershell.exe, pwsh.exe, schtasks.exe, certutil.exe, whoami.exe, bitsadmin.exe, wscript.exe, cscript.exe, scrcons.exe, regsvr32.exe, hh.exe, wmic.exe, mshta.exe, rundll32.exe, forfiles.exe, scriptrunner.exe, mftrace.exe, AppVLP.exe, systeminfo.exe, reg.exe, and query.exe. This activity is considered highly suspicious as it might indicate an attempt to exploit vulnerabilities related to the Java utility keytool, which is not commonly used to spawn such processes directly."
    }
  },
  {
    "instruction": "How can I detect: Microsoft Cloud App Security reported when an activity occurs from a location that wasn't recently or never visited by any user in the organization.",
    "context": "",
    "output": "In order to detect when a Microsoft Cloud App Security reported when an activity occurs from a location that wasn't recently or never visited by any user in the organization, you should monitor activity logs from Microsoft 365's Threat Management service, specifically focusing on the Security Compliance Center. The detection focuses on identifying events labeled as 'Activity from infrequent country' which are marked with a status of success. This activity suggests an operation originating from a geographic location unfamiliar to the user patterns within the organization, which could indicate unauthorized access or an attempt to compromise the system security from a new attack vector. Since this method involves monitoring logging events for unusual location access, it's crucial to consider potential false positives that may arise, although they are currently unknown. This procedure encompasses techniques related to identifying and managing unusual activities which are part of broader cyber defense strategies to protect organizational assets.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported when an activity occurs from a location that wasn't recently or never visited by any user in the organization.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported when an activity occurs from a location that wasn't recently or never visited by any user in the organization, you should monitor activity logs from Microsoft 365's Threat Management service, specifically focusing on the Security Compliance Center. The detection focuses on identifying events labeled as 'Activity from infrequent country' which are marked with a status of success. This activity suggests an operation originating from a geographic location unfamiliar to the user patterns within the organization, which could indicate unauthorized access or an attempt to compromise the system security from a new attack vector. Since this method involves monitoring logging events for unusual location access, it's crucial to consider potential false positives that may arise, although they are currently unknown. This procedure encompasses techniques related to identifying and managing unusual activities which are part of broader cyber defense strategies to protect organizational assets."
    }
  },
  {
    "instruction": "Explain how should I detect the following: presence of an LSASS dump file in the \"CrashDumps\" folder. This could be a sign of LSASS credential dumping. Techniques such as the LSASS Shtinkering have been seen abusing the Windows Error Reporting to dump said process.",
    "context": "",
    "output": "In order to detect the presence of an LSASS dump file in the \"CrashDumps\" folder, which could be a sign of LSASS credential dumping, you should monitor Windows file events specifically in the category of file_event. Look for files in the 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\' path that contain 'lsass.exe.' in their names and end with '.dmp'. Such activities often indicate LSASS credential dumping practices, including techniques like LSASS Shtinkering that exploit Windows Error Reporting for malicious process dumping. Be aware that there could be rare instances where the operating system legitimately dumps the LSASS process due to a crash, which should be considered a potential false positive. Nonetheless, given the high-risk level associated with this detection, it is crucial to pay close attention to such occurrences as they commonly relate to tactics and techniques aiming to exploit credential access.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "presence of an LSASS dump file in the \"CrashDumps\" folder. This could be a sign of LSASS credential dumping. Techniques such as the LSASS Shtinkering have been seen abusing the Windows Error Reporting to dump said process.",
      "answer": "In order to detect the presence of an LSASS dump file in the \"CrashDumps\" folder, which could be a sign of LSASS credential dumping, you should monitor Windows file events specifically in the category of file_event. Look for files in the 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\' path that contain 'lsass.exe.' in their names and end with '.dmp'. Such activities often indicate LSASS credential dumping practices, including techniques like LSASS Shtinkering that exploit Windows Error Reporting for malicious process dumping. Be aware that there could be rare instances where the operating system legitimately dumps the LSASS process due to a crash, which should be considered a potential false positive. Nonetheless, given the high-risk level associated with this detection, it is crucial to pay close attention to such occurrences as they commonly relate to tactics and techniques aiming to exploit credential access."
    }
  },
  {
    "instruction": "Can you explain how to detect: user disables a critical security feature for an organization.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when a user disables a critical security feature for an organization, you should monitor GitHub audit logs, which requires the audit log streaming feature to be enabled. This monitoring targets activities that compromise security configurations, specifically within GitHub organizations or repositories. The key actions indicative of such activities include disabling OAuth app restrictions, disabling the requirement for two-factor authentication, disabling advanced security for a repository, and selecting a member to disable advanced security policy. \n\nFor effective detection, focus on the following data points extracted from the audit logs: the specific action taken, the actor who performed the action, the organization affected, the country code of the actor's location, the transport protocol used, the targeted repository, the public status of the repository, and the timestamp of the action. It is important to distinguish between legitimate administrative activities and malicious actions. Any activity falling outside approved administrative tasks should be considered a high-level security concern. \n\nThis approach is aligned with the MITRE ATT&CK tactics and techniques for Initial Access and Persistence by monitoring and flagging the disabling of critical security measures in GitHub environments.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user disables a critical security feature for an organization.",
      "answer": "In order to detect when a user disables a critical security feature for an organization, you should monitor GitHub audit logs, which requires the audit log streaming feature to be enabled. This monitoring targets activities that compromise security configurations, specifically within GitHub organizations or repositories. The key actions indicative of such activities include disabling OAuth app restrictions, disabling the requirement for two-factor authentication, disabling advanced security for a repository, and selecting a member to disable advanced security policy. \n\nFor effective detection, focus on the following data points extracted from the audit logs: the specific action taken, the actor who performed the action, the organization affected, the country code of the actor's location, the transport protocol used, the targeted repository, the public status of the repository, and the timestamp of the action. It is important to distinguish between legitimate administrative activities and malicious actions. Any activity falling outside approved administrative tasks should be considered a high-level security concern. \n\nThis approach is aligned with the MITRE ATT&CK tactics and techniques for Initial Access and Persistence by monitoring and flagging the disabling of critical security measures in GitHub environments."
    }
  },
  {
    "instruction": "How can I detect: execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files')",
    "context": "",
    "output": "In order to detect execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files'), you should focus on monitoring process creation events on Windows systems. Look for processes that are initiated from executable files named 'rutserv.exe' or 'rfusclient.exe', which are associated with the Remote Utilities software. Additionally, check if the 'Product' attribute in the event logs matches 'Remote Utilities'. It's crucial to differentiate between legitimate and suspicious activities by excluding events where these processes start from the standard installation paths, namely 'C:\\Program Files\\Remote Utilities' and 'C:\\Program Files (x86)\\Remote Utilities'. By applying this monitoring strategy, any process creation event that matches these criteria but does not originate from the expected directories should be considered as a potential indicator of a Remote Utilities RAT being executed from an unusual location, which might suggest a malicious usage. This detection is categorized with a medium level of confidence due to the possibility of unknown false positives, indicating that while the criteria are specific, there may be legitimate scenarios that could inadvertently meet these conditions. This approach is designed to combat tactics and techniques like execution of malware and use of remote access tools by unauthorized entities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files')",
      "answer": "In order to detect execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files'), you should focus on monitoring process creation events on Windows systems. Look for processes that are initiated from executable files named 'rutserv.exe' or 'rfusclient.exe', which are associated with the Remote Utilities software. Additionally, check if the 'Product' attribute in the event logs matches 'Remote Utilities'. It's crucial to differentiate between legitimate and suspicious activities by excluding events where these processes start from the standard installation paths, namely 'C:\\Program Files\\Remote Utilities' and 'C:\\Program Files (x86)\\Remote Utilities'. By applying this monitoring strategy, any process creation event that matches these criteria but does not originate from the expected directories should be considered as a potential indicator of a Remote Utilities RAT being executed from an unusual location, which might suggest a malicious usage. This detection is categorized with a medium level of confidence due to the possibility of unknown false positives, indicating that while the criteria are specific, there may be legitimate scenarios that could inadvertently meet these conditions. This approach is designed to combat tactics and techniques like execution of malware and use of remote access tools by unauthorized entities."
    }
  },
  {
    "instruction": "How to detect: execution of \"logman\" utility in order to disable or delete Windows trace sessions",
    "context": "",
    "output": "In order to detect the execution of \"logman\" utility in order to disable or delete Windows trace sessions, you should: Monitor process creation events in Windows environments for the execution of \"logman.exe\". This detection focuses on instances where \"logman.exe\" is executed, specifically when its command line includes actions to \"stop\" or \"delete\" certain processes or services. Furthermore, it is important to watch for command-line invocations that attempt to manipulate or deactivate Windows trace sessions, especially those related to the Circular Kernel Context Logger, any event logs prefixed with \"EventLog-\", \"SYSMON TRACE\", or the \"SysmonDnsEtwSession\". The rule identifies these activities as potentially malicious due to their nature of disrupting trace and logging mechanisms which are vital for auditing and forensic analysis. It is worth noting that while this rule aims to capture malicious activity, there may be instances where legitimate administrative actions or installer tools perform similar operations. Therefore, such benign activities might trigger alerts and should be considered as possible false positives. The significance of detecting these actions is high, given their potential use in evading detection or hindering security investigations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"logman\" utility in order to disable or delete Windows trace sessions",
      "answer": "In order to detect the execution of \"logman\" utility in order to disable or delete Windows trace sessions, you should: Monitor process creation events in Windows environments for the execution of \"logman.exe\". This detection focuses on instances where \"logman.exe\" is executed, specifically when its command line includes actions to \"stop\" or \"delete\" certain processes or services. Furthermore, it is important to watch for command-line invocations that attempt to manipulate or deactivate Windows trace sessions, especially those related to the Circular Kernel Context Logger, any event logs prefixed with \"EventLog-\", \"SYSMON TRACE\", or the \"SysmonDnsEtwSession\". The rule identifies these activities as potentially malicious due to their nature of disrupting trace and logging mechanisms which are vital for auditing and forensic analysis. It is worth noting that while this rule aims to capture malicious activity, there may be instances where legitimate administrative actions or installer tools perform similar operations. Therefore, such benign activities might trigger alerts and should be considered as possible false positives. The significance of detecting these actions is high, given their potential use in evading detection or hindering security investigations."
    }
  },
  {
    "instruction": "How to detect: sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190)",
    "context": "",
    "output": "In order to detect sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190), you should focus on monitoring Windows process creation events for instances where the parent process \"sdiagnhost.exe\" initiates any of several known potentially malicious child processes. This includes observation for execution of processes such as `powershell.exe`, `pwsh.exe`, `cmd.exe`, `mshta.exe`, `cscript.exe`, `wscript.exe`, `taskkill.exe`, `regsvr32.exe`, `rundll32.exe`, and `calc.exe`. These child processes are frequently used by attackers as living-off-the-land binaries (LOLBins) to perform malicious activities while attempting to evade detection. Monitoring for these specific process relationships is crucial in identifying and mitigating attacks exploiting vulnerabilities like CVE-2022-30190, often characterized by the abuse of the `sdiagnhost.exe` process to execute malicious scripts or commands. Due to the legitimate use of these binaries in various administrative and operational tasks, it is possible to encounter false positives, though the level of threat associated with this detection pattern is high. By focusing on this behavior, potential malicious activity leveraging these techniques can be identified, providing an opportunity for early detection and response.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190)",
      "answer": "In order to detect sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190), you should focus on monitoring Windows process creation events for instances where the parent process \"sdiagnhost.exe\" initiates any of several known potentially malicious child processes. This includes observation for execution of processes such as `powershell.exe`, `pwsh.exe`, `cmd.exe`, `mshta.exe`, `cscript.exe`, `wscript.exe`, `taskkill.exe`, `regsvr32.exe`, `rundll32.exe`, and `calc.exe`. These child processes are frequently used by attackers as living-off-the-land binaries (LOLBins) to perform malicious activities while attempting to evade detection. Monitoring for these specific process relationships is crucial in identifying and mitigating attacks exploiting vulnerabilities like CVE-2022-30190, often characterized by the abuse of the `sdiagnhost.exe` process to execute malicious scripts or commands. Due to the legitimate use of these binaries in various administrative and operational tasks, it is possible to encounter false positives, though the level of threat associated with this detection pattern is high. By focusing on this behavior, potential malicious activity leveraging these techniques can be identified, providing an opportunity for early detection and response."
    }
  },
  {
    "instruction": "How to detect: attempts of decoding a base64 Gzip archive in a PowerShell script. This technique is often used as a method to load malicious content into memory afterward.",
    "context": "",
    "output": "In order to detect attempts of decoding a base64 Gzip archive in a PowerShell script, which is often used as a method to load malicious content into memory afterward, you should: Focus on PowerShell scripts running on Windows systems. Specifically, monitor the scripts for any occurrence where they contain all of the following elements: 'FromBase64String', 'MemoryStream', and the base64 string 'H4sI'. These elements are indicative of actions attempting to decode base64 Gzip archives. It's important to note that enabling Script Block Logging on Windows is required to effectively monitor these scripts for the specified patterns. Be aware, however, that there may be legitimate administrative scripts that also perform similar actions, so these should be considered as potential false positives. The severity of this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts of decoding a base64 Gzip archive in a PowerShell script. This technique is often used as a method to load malicious content into memory afterward.",
      "answer": "In order to detect attempts of decoding a base64 Gzip archive in a PowerShell script, which is often used as a method to load malicious content into memory afterward, you should: Focus on PowerShell scripts running on Windows systems. Specifically, monitor the scripts for any occurrence where they contain all of the following elements: 'FromBase64String', 'MemoryStream', and the base64 string 'H4sI'. These elements are indicative of actions attempting to decode base64 Gzip archives. It's important to note that enabling Script Block Logging on Windows is required to effectively monitor these scripts for the specified patterns. Be aware, however, that there may be legitimate administrative scripts that also perform similar actions, so these should be considered as potential false positives. The severity of this detection is considered medium."
    }
  },
  {
    "instruction": "How can I detect: PowerShell scripts attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow.",
    "context": "",
    "output": "In order to detect PowerShell scripts attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow, you should monitor Windows PowerShell script logs, ensuring that Script Block Logging is enabled. Look for scripts that contain the `Set-MpPreference` command indicating an attempt to modify Microsoft Defender Antivirus settings. Focus specifically on scripts that include statements to disable various features of Defender, such as Real-time Monitoring, Behavior Monitoring, Archive Scanning, and Intrusion Prevention, among others, using flags like `-DisableRealtimeMonitoring`, `-DisableBehaviorMonitoring`, and others with either a `$true` value or `1` to signify their activation. Additionally, pay attention to scripts setting the default action for detected threats to \"Allow\", which may significantly lower the security posture by allowing all threat levels, ranging from low to severe, through settings such as `HighThreatDefaultAction Allow`. Given the nature of these modifications, any detection should be treated with a high level of suspicion, although an understanding that there may be legitimate use cases for temporarily altering these settings for troubleshooting must be maintained. Any detection, therefore, requires immediate investigation to determine its nature and intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell scripts attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow.",
      "answer": "In order to detect PowerShell scripts attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow, you should monitor Windows PowerShell script logs, ensuring that Script Block Logging is enabled. Look for scripts that contain the `Set-MpPreference` command indicating an attempt to modify Microsoft Defender Antivirus settings. Focus specifically on scripts that include statements to disable various features of Defender, such as Real-time Monitoring, Behavior Monitoring, Archive Scanning, and Intrusion Prevention, among others, using flags like `-DisableRealtimeMonitoring`, `-DisableBehaviorMonitoring`, and others with either a `$true` value or `1` to signify their activation. Additionally, pay attention to scripts setting the default action for detected threats to \"Allow\", which may significantly lower the security posture by allowing all threat levels, ranging from low to severe, through settings such as `HighThreatDefaultAction Allow`. Given the nature of these modifications, any detection should be treated with a high level of suspicion, although an understanding that there may be legitimate use cases for temporarily altering these settings for troubleshooting must be maintained. Any detection, therefore, requires immediate investigation to determine its nature and intent."
    }
  },
  {
    "instruction": "How can I detect: usage of the \"Import-Module\" cmdlet in order to add new Cmdlets to the current PowerShell session",
    "context": "",
    "output": "In order to detect usage of the \"Import-Module\" cmdlet in order to add new Cmdlets to the current PowerShell session, you should: focus on monitoring process creation within Windows environments. Specifically, keep an eye out for any instances where PowerShell (either through 'powershell.exe' or 'pwsh.exe') is invoked, as well as cases where the original file names 'PowerShell.EXE' or 'pwsh.dll' are used. Additionally, pay attention to command lines that contain the strings 'Import-Module ' or 'ipmo ', as these are indicative of attempts to import modules into the PowerShell session. It is important to apply this detection across all processes meeting these criteria. However, be aware that in many legitimate scenarios, scripts may import modules inline, meaning that this behavior is not exclusively malicious but should rather be used for hunting purposes with a low alert level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Import-Module\" cmdlet in order to add new Cmdlets to the current PowerShell session",
      "answer": "In order to detect usage of the \"Import-Module\" cmdlet in order to add new Cmdlets to the current PowerShell session, you should: focus on monitoring process creation within Windows environments. Specifically, keep an eye out for any instances where PowerShell (either through 'powershell.exe' or 'pwsh.exe') is invoked, as well as cases where the original file names 'PowerShell.EXE' or 'pwsh.dll' are used. Additionally, pay attention to command lines that contain the strings 'Import-Module ' or 'ipmo ', as these are indicative of attempts to import modules into the PowerShell session. It is important to apply this detection across all processes meeting these criteria. However, be aware that in many legitimate scenarios, scripts may import modules inline, meaning that this behavior is not exclusively malicious but should rather be used for hunting purposes with a low alert level."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the 'Get-Clipboard' cmdlet via CLI",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the usage of the 'Get-Clipboard' cmdlet via CLI, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where command-line executions contain the 'Get-Clipboard' instruction. This detection is crucial as it may indicate attempts to access data stored in the clipboard, which could be part of unauthorized information gathering or data exfiltration activities. The severity of such detections is considered to be of medium level, although the potential for false positives is noted to be unknown, suggesting the need for contextual analysis of each event.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the 'Get-Clipboard' cmdlet via CLI",
      "answer": "In order to detect the usage of the 'Get-Clipboard' cmdlet via CLI, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where command-line executions contain the 'Get-Clipboard' instruction. This detection is crucial as it may indicate attempts to access data stored in the clipboard, which could be part of unauthorized information gathering or data exfiltration activities. The severity of such detections is considered to be of medium level, although the potential for false positives is noted to be unknown, suggesting the need for contextual analysis of each event."
    }
  },
  {
    "instruction": "How to detect: raw disk access using uncommon tools or tools that are located in suspicious locations (heavy filtering is required), which could indicate possible defense evasion attempts",
    "context": "",
    "output": "In order to detect raw disk access using uncommon tools or tools that are located in suspicious locations, which could indicate possible defense evasion attempts, you should monitor for executions from locations not commonly associated with legitimate system processes or common software installations. Windows operating systems have predefined locations for system files, applications, and processes critical for their operation, such as 'C:\\Program Files\\', 'C:\\Windows\\System32\\', and similar directories. Processes executing from these locations are generally considered safe. However, to spot potentially malicious activity, look for executions occurring outside these trusted paths, especially from removable devices like floppy drives, temporary directories such as 'C:\\Windows\\Temp\\', or less monitored user data folders like those under 'C:\\Users\\'.\n\nYou should also pay attention to processes that attempt to disguise themselves as legitimate system update files or processes (e.g., 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' related to Windows upgrade or update), yet located in atypical directories, or leveraging application data paths (e.g., paths containing '\\AppData\\Microsoft\\'). Such tactics might be employed by attackers to evade detection mechanisms by blending in with normal system update operations.\n\nAdditionally, keep an eye out for specific executable names and paths that have been flagged as uncommon points of execution for otherwise legitimate tools, for instance, the GitHub Desktop application executing from an unusual path like 'C:\\Users\\[Username]\\AppData\\Local\\GitHubDesktop\\...' or tools like 'NVMEHostmetadata.exe' and 'SSDUpdate.exe' running from 'C:\\Windows\\Temp\\' which might indicate an attempt to modify system or disk components covertly.\n\nFurthermore, execution of tools like 'thor.exe' from directories like 'C:\\Windows\\Temp\\asgard2-agent\\' and unusual execution paths for Keybase updater ('upd.exe') could signify unauthorized or suspicious activities. \n\nMonitoring for these indicators necessitates a nuanced understand of normal system and user behavior to minimize false positives, as legitimate software installations, updates, or administrative activities may occasionally use similar paths or patterns. However, consistent or repeated detection of such patterns warrants further investigation. Tags such as \"Defense Evasion\" and \"Execution\" from the MITRE ATT&CK framework are pertinent here, as they help categorize the detected activities into broader tactics and techniques used by adversaries to bypass security measures and execute malicious payloads or scripts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "raw disk access using uncommon tools or tools that are located in suspicious locations (heavy filtering is required), which could indicate possible defense evasion attempts",
      "answer": "In order to detect raw disk access using uncommon tools or tools that are located in suspicious locations, which could indicate possible defense evasion attempts, you should monitor for executions from locations not commonly associated with legitimate system processes or common software installations. Windows operating systems have predefined locations for system files, applications, and processes critical for their operation, such as 'C:\\Program Files\\', 'C:\\Windows\\System32\\', and similar directories. Processes executing from these locations are generally considered safe. However, to spot potentially malicious activity, look for executions occurring outside these trusted paths, especially from removable devices like floppy drives, temporary directories such as 'C:\\Windows\\Temp\\', or less monitored user data folders like those under 'C:\\Users\\'.\n\nYou should also pay attention to processes that attempt to disguise themselves as legitimate system update files or processes (e.g., 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' related to Windows upgrade or update), yet located in atypical directories, or leveraging application data paths (e.g., paths containing '\\AppData\\Microsoft\\'). Such tactics might be employed by attackers to evade detection mechanisms by blending in with normal system update operations.\n\nAdditionally, keep an eye out for specific executable names and paths that have been flagged as uncommon points of execution for otherwise legitimate tools, for instance, the GitHub Desktop application executing from an unusual path like 'C:\\Users\\[Username]\\AppData\\Local\\GitHubDesktop\\...' or tools like 'NVMEHostmetadata.exe' and 'SSDUpdate.exe' running from 'C:\\Windows\\Temp\\' which might indicate an attempt to modify system or disk components covertly.\n\nFurthermore, execution of tools like 'thor.exe' from directories like 'C:\\Windows\\Temp\\asgard2-agent\\' and unusual execution paths for Keybase updater ('upd.exe') could signify unauthorized or suspicious activities. \n\nMonitoring for these indicators necessitates a nuanced understand of normal system and user behavior to minimize false positives, as legitimate software installations, updates, or administrative activities may occasionally use similar paths or patterns. However, consistent or repeated detection of such patterns warrants further investigation. Tags such as \"Defense Evasion\" and \"Execution\" from the MITRE ATT&CK framework are pertinent here, as they help categorize the detected activities into broader tactics and techniques used by adversaries to bypass security measures and execute malicious payloads or scripts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: presence of the \"u202+E\" character, which causes a terminal, browser, or operating system to render text in a right-to-left sequence.\nThis is used as an obfuscation and masquerading techniques.\n",
    "context": "",
    "output": "In order to detect the presence of the \"u202+E\" character, which causes a terminal, browser, or operating system to render text in a right-to-left sequence, you should: Focus on monitoring process creation logs within Windows environments. Specifically, look for command lines that contain the Unicode character \"\\u202e\". This character is commonly used in obfuscation and masquerading techniques by adversaries to reverse the order of characters in a file name, thus hiding the true nature of the file. Be aware that legitimate use of this character might occur in command lines containing scripts written in languages like Arabic or Hebrew. These instances are considered false positives and should be handled accordingly. The identification of this character in command lines is categorized under high severity due to its potential use in advanced masquerading techniques that are associated with various adversarial tactics and techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "presence of the \"u202+E\" character, which causes a terminal, browser, or operating system to render text in a right-to-left sequence.\nThis is used as an obfuscation and masquerading techniques.\n",
      "answer": "In order to detect the presence of the \"u202+E\" character, which causes a terminal, browser, or operating system to render text in a right-to-left sequence, you should: Focus on monitoring process creation logs within Windows environments. Specifically, look for command lines that contain the Unicode character \"\\u202e\". This character is commonly used in obfuscation and masquerading techniques by adversaries to reverse the order of characters in a file name, thus hiding the true nature of the file. Be aware that legitimate use of this character might occur in command lines containing scripts written in languages like Arabic or Hebrew. These instances are considered false positives and should be handled accordingly. The identification of this character in command lines is categorized under high severity due to its potential use in advanced masquerading techniques that are associated with various adversarial tactics and techniques."
    }
  },
  {
    "instruction": "Can you explain how to detect: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when an adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc., to establish an interactive command and control channel to target systems within networks, you should: Monitor file events on Windows systems for activities involving files located in the directory path containing '\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\'. This monitoring strategy is applied as these services, despite their legitimate uses, are often repurposed by adversaries to gain unauthorized access to systems. These types of remote access tools are notably flagged by security research, such as Symantec\u2019s report on \"Living off the Land\", as being used more frequently by adversaries compared to other legitimate software, for malicious intent. It is important to consider that there may be legitimate uses of these software tools within a network, and such instances are considered as false positives. The detection strategy is classified at a medium level of importance in the context of cybersecurity defenses.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect when an adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc., to establish an interactive command and control channel to target systems within networks, you should: Monitor file events on Windows systems for activities involving files located in the directory path containing '\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\'. This monitoring strategy is applied as these services, despite their legitimate uses, are often repurposed by adversaries to gain unauthorized access to systems. These types of remote access tools are notably flagged by security research, such as Symantec\u2019s report on \"Living off the Land\", as being used more frequently by adversaries compared to other legitimate software, for malicious intent. It is important to consider that there may be legitimate uses of these software tools within a network, and such instances are considered as false positives. The detection strategy is classified at a medium level of importance in the context of cybersecurity defenses."
    }
  },
  {
    "instruction": "How to detect: unusual processes accessing desktop.ini, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk.",
    "context": "",
    "output": "In order to detect unusual processes accessing desktop.ini, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk, you should: Monitor Windows file events for any access to files ending with '\\desktop.ini'. Specifically, focus on accesses not originating from standard system directories such as 'C:\\Windows\\', 'C:\\Program Files\\', or 'C:\\Program Files (x86)\\', nor from operations related to JetBrains software updates or system upgrades found in paths like '\\AppData\\Local\\JetBrains\\Toolbox\\bin\\7z.exe' or starting with 'C:\\$WINDOWS.~BT\\NewOS\\'. Consider exceptions for activities conducted through Windows SCCM or equivalent management tools and actions that only involve reading list authorities to minimize false positives. This approach is set to a medium alert level due to its relevance in uncovering attempts to misuse folder displays for potentially unsanctioned modifications or obfuscations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "unusual processes accessing desktop.ini, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk.",
      "answer": "In order to detect unusual processes accessing desktop.ini, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk, you should: Monitor Windows file events for any access to files ending with '\\desktop.ini'. Specifically, focus on accesses not originating from standard system directories such as 'C:\\Windows\\', 'C:\\Program Files\\', or 'C:\\Program Files (x86)\\', nor from operations related to JetBrains software updates or system upgrades found in paths like '\\AppData\\Local\\JetBrains\\Toolbox\\bin\\7z.exe' or starting with 'C:\\$WINDOWS.~BT\\NewOS\\'. Consider exceptions for activities conducted through Windows SCCM or equivalent management tools and actions that only involve reading list authorities to minimize false positives. This approach is set to a medium alert level due to its relevance in uncovering attempts to misuse folder displays for potentially unsanctioned modifications or obfuscations."
    }
  },
  {
    "instruction": "Please help me detect the following: Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration",
    "context": "",
    "output": "Sure!\nIn order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should: Monitor Windows process creation logs for the execution of the PowerShell command 'Compress-Archive' accompanied by the parameters '-Path' and '-DestinationPath', specifically when the destination path is set to the Windows temporary folder, denoted as '$env:TEMP\\'. This activity is commonly observed when adversaries utilize built-in system tools to compress data in preparation for exfiltration. They might aggregate sensitive files in a single archive, placing it in a temporary directory, making it easier to stealthily exfiltrate. Be aware that this behavior might lead to some false positives as it\u2019s not entirely unique to malicious activities. Thus, it's classified with a medium level of confidence. Identifying such activities falls under tactics and techniques such as Collection (gathering data of interest to their goal) and Exfiltration (stealing the data), although these specific terms are not used directly in the monitoring logic.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration",
      "answer": "In order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should: Monitor Windows process creation logs for the execution of the PowerShell command 'Compress-Archive' accompanied by the parameters '-Path' and '-DestinationPath', specifically when the destination path is set to the Windows temporary folder, denoted as '$env:TEMP\\'. This activity is commonly observed when adversaries utilize built-in system tools to compress data in preparation for exfiltration. They might aggregate sensitive files in a single archive, placing it in a temporary directory, making it easier to stealthily exfiltrate. Be aware that this behavior might lead to some false positives as it\u2019s not entirely unique to malicious activities. Thus, it's classified with a medium level of confidence. Identifying such activities falls under tactics and techniques such as Collection (gathering data of interest to their goal) and Exfiltration (stealing the data), although these specific terms are not used directly in the monitoring logic."
    }
  },
  {
    "instruction": "How to detect: Detect VBoxDrvInst.exe run with parameters allowing processing INF file.\nThis allows to create values in the registry and install drivers.\nFor example one could use this technique to obtain persistence via modifying one of Run or RunOnce registry keys\n",
    "context": "",
    "output": "In order to detect VBoxDrvInst.exe run with parameters allowing processing INF file, which allows creating values in the registry and installing drivers to obtain persistence via modifying one of the Run or RunOnce registry keys, you should: Monitor Windows process creation logs for instances where the VBoxDrvInst.exe file is executed. Specifically, focus on scenarios where the command line includes both 'driver' and 'executeinf', indicating the process might be used to handle INF files for driver installation or registry modifications for persistence purposes. Record details such as the computer name, user, and command lines used during the execution. Be aware that a legitimate use of VBoxDrvInst.exe by the VirtualBox Guest Additions installation process might generate false positives. This process is associated with techniques for achieving persistence and installing system software.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect VBoxDrvInst.exe run with parameters allowing processing INF file.\nThis allows to create values in the registry and install drivers.\nFor example one could use this technique to obtain persistence via modifying one of Run or RunOnce registry keys\n",
      "answer": "In order to detect VBoxDrvInst.exe run with parameters allowing processing INF file, which allows creating values in the registry and installing drivers to obtain persistence via modifying one of the Run or RunOnce registry keys, you should: Monitor Windows process creation logs for instances where the VBoxDrvInst.exe file is executed. Specifically, focus on scenarios where the command line includes both 'driver' and 'executeinf', indicating the process might be used to handle INF files for driver installation or registry modifications for persistence purposes. Record details such as the computer name, user, and command lines used during the execution. Be aware that a legitimate use of VBoxDrvInst.exe by the VirtualBox Guest Additions installation process might generate false positives. This process is associated with techniques for achieving persistence and installing system software."
    }
  },
  {
    "instruction": "Please help me detect the following: registry keys created in OceanLotus (also known as APT32) attacks",
    "context": "",
    "output": "Sure!\nIn order to detect registry keys created in OceanLotus (also known as APT32) attacks, you should monitor the Windows registry for specific activities that indicate compromise. Focus on registry events where keys are created or modified. Specifically, watch for any changes to the 'HKCU\\SOFTWARE\\Classes\\CLSID\\{E08A0F4B-1F65-4D4D-9A09-BD4625B9C5A1}\\Model' registry object. Additionally, look for any modifications starting with 'HKCU\\SOFTWARE\\App\\' or 'HKLM\\SOFTWARE\\App\\' and containing keys related to 'AppXbf13d4ea2945444d8b13e2121cb6b663\\', 'AppX70162486c7554f7f80f481985d67586d\\', or 'AppX37cc7fdccd644b4f85f4b22d5a3f105a\\', and ending in 'Application' or 'DefaultIcon'. \n\nFurthermore, pay close attention to modifications in the HKCU hive that start with 'HKCU\\' and include modifications to 'Classes\\AppXc52346ec40fb4061ad96be0e6cb7d16a\\', 'Classes\\AppX3bbba44c6cae4d9695755183472171e2\\', or 'Classes\\CLSID\\{E3517E26-8E93-458D-A6DF-8030BC80528B}\\', including the repeat mention of the 'Classes\\CLSID\\{E08A0F4B-1F65-4D4D-9A09-BD4625B9C5A1}\\Model'. Detecting any of these changes is critical for identifying potentially malicious activities related to OceanLotus attacks. Given the severity, such detections should be treated with a high priority, although one should remain aware of possible unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registry keys created in OceanLotus (also known as APT32) attacks",
      "answer": "In order to detect registry keys created in OceanLotus (also known as APT32) attacks, you should monitor the Windows registry for specific activities that indicate compromise. Focus on registry events where keys are created or modified. Specifically, watch for any changes to the 'HKCU\\SOFTWARE\\Classes\\CLSID\\{E08A0F4B-1F65-4D4D-9A09-BD4625B9C5A1}\\Model' registry object. Additionally, look for any modifications starting with 'HKCU\\SOFTWARE\\App\\' or 'HKLM\\SOFTWARE\\App\\' and containing keys related to 'AppXbf13d4ea2945444d8b13e2121cb6b663\\', 'AppX70162486c7554f7f80f481985d67586d\\', or 'AppX37cc7fdccd644b4f85f4b22d5a3f105a\\', and ending in 'Application' or 'DefaultIcon'. \n\nFurthermore, pay close attention to modifications in the HKCU hive that start with 'HKCU\\' and include modifications to 'Classes\\AppXc52346ec40fb4061ad96be0e6cb7d16a\\', 'Classes\\AppX3bbba44c6cae4d9695755183472171e2\\', or 'Classes\\CLSID\\{E3517E26-8E93-458D-A6DF-8030BC80528B}\\', including the repeat mention of the 'Classes\\CLSID\\{E08A0F4B-1F65-4D4D-9A09-BD4625B9C5A1}\\Model'. Detecting any of these changes is critical for identifying potentially malicious activities related to OceanLotus attacks. Given the severity, such detections should be treated with a high priority, although one should remain aware of possible unknown false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel.",
    "context": "",
    "output": "In order to detect when a Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel, you should monitor logs generated by the threat management system for Microsoft 365 services. Specifically, focus on logs coming from the Security Compliance Center. The key event to look out for is labeled as \"Impossible travel activity\" and must have a status indicating success. This detection aims to identify when a user's credentials have been used to attempt sign-ins from geographical locations that are physically impossible to travel between within the time frame of the sign-in attempts. It is important to note that while this is a medium-level security alert, there may be unknown scenarios that could trigger false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel, you should monitor logs generated by the threat management system for Microsoft 365 services. Specifically, focus on logs coming from the Security Compliance Center. The key event to look out for is labeled as \"Impossible travel activity\" and must have a status indicating success. This detection aims to identify when a user's credentials have been used to attempt sign-ins from geographical locations that are physically impossible to travel between within the time frame of the sign-in attempts. It is important to note that while this is a medium-level security alert, there may be unknown scenarios that could trigger false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Detect usage of the \"driverquery\" utility to perform reconnaissance on installed drivers",
    "context": "",
    "output": "In order to detect usage of the \"driverquery\" utility to perform reconnaissance on installed drivers, you should: Monitor process creation logs on Windows systems for instances where the \"driverquery.exe\" tool or its variant \"drvqry.exe\" (as denoted by the original file name) is executed. Specifically, watch for scenarios where these utilities are launched by parent processes commonly used for script execution or command-line activities, such as \"cmd.exe\", \"powershell.exe\", \"pwsh.exe\", \"wscript.exe\", \"cscript.exe\", or \"mshta.exe\". Additionally, scrutinize situations where the parent process's image path includes directories typically associated with suspicious activities, like \"\\AppData\\Local\\\", \"\\Users\\Public\\\", or \"\\Windows\\Temp\\\". All these indicators combined suggest an attempt to stealthily gather information about drivers installed on the system, which could be indicative of reconnaissance activity by an adversary. Be aware, however, that the determination of such activity as malicious may result in unknown false positives, and thus, it demands a high level of alertness.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect usage of the \"driverquery\" utility to perform reconnaissance on installed drivers",
      "answer": "In order to detect usage of the \"driverquery\" utility to perform reconnaissance on installed drivers, you should: Monitor process creation logs on Windows systems for instances where the \"driverquery.exe\" tool or its variant \"drvqry.exe\" (as denoted by the original file name) is executed. Specifically, watch for scenarios where these utilities are launched by parent processes commonly used for script execution or command-line activities, such as \"cmd.exe\", \"powershell.exe\", \"pwsh.exe\", \"wscript.exe\", \"cscript.exe\", or \"mshta.exe\". Additionally, scrutinize situations where the parent process's image path includes directories typically associated with suspicious activities, like \"\\AppData\\Local\\\", \"\\Users\\Public\\\", or \"\\Windows\\Temp\\\". All these indicators combined suggest an attempt to stealthily gather information about drivers installed on the system, which could be indicative of reconnaissance activity by an adversary. Be aware, however, that the determination of such activity as malicious may result in unknown false positives, and thus, it demands a high level of alertness."
    }
  },
  {
    "instruction": "How can I detect: Remote desktop is a common feature in operating systems.\nIt allows a user to log into an interactive session with a system desktop graphical user interface on a remote system.\nMicrosoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).\n",
    "context": "",
    "output": "In order to detect unauthorized modifications targeting the registry setting that defines the port number for Remote Desktop Services (RDS), which is Microsoft's implementation of the Remote Desktop Protocol, enabling a user to log into an interactive session with a system's desktop graphical user interface from a remote system, you should monitor Windows registry settings for any SetValue events that alter the TargetObject located at \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\PortNumber\". This indicates an attempt to change the port used by RDP, potentially as part of an effort to bypass security controls or hide malicious activity by using non-standard ports. The detection strategy should exclude the modification events where the Details attribute equals \"DWORD (0x00000d3d)\", as this represents a known configuration and may not indicate malicious activity. However, other modifications to this registry value could be indicative of unauthorized attempts to alter RDP settings, warranting a high alert level. It is noted that there may be unknown false positives, suggesting cautious interpretation of alerts. This monitoring effort relates to tactics and techniques such as Defense Evasion and Persistence, aiming to identify potential security breaches involving remote desktop protocols.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Remote desktop is a common feature in operating systems.\nIt allows a user to log into an interactive session with a system desktop graphical user interface on a remote system.\nMicrosoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).\n",
      "answer": "In order to detect unauthorized modifications targeting the registry setting that defines the port number for Remote Desktop Services (RDS), which is Microsoft's implementation of the Remote Desktop Protocol, enabling a user to log into an interactive session with a system's desktop graphical user interface from a remote system, you should monitor Windows registry settings for any SetValue events that alter the TargetObject located at \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\PortNumber\". This indicates an attempt to change the port used by RDP, potentially as part of an effort to bypass security controls or hide malicious activity by using non-standard ports. The detection strategy should exclude the modification events where the Details attribute equals \"DWORD (0x00000d3d)\", as this represents a known configuration and may not indicate malicious activity. However, other modifications to this registry value could be indicative of unauthorized attempts to alter RDP settings, warranting a high alert level. It is noted that there may be unknown false positives, suggesting cautious interpretation of alerts. This monitoring effort relates to tactics and techniques such as Defense Evasion and Persistence, aiming to identify potential security breaches involving remote desktop protocols."
    }
  },
  {
    "instruction": "Please help me detect the following: use of tools that copy files from or to remote systems",
    "context": "",
    "output": "Sure!\nIn order to detect the use of tools that copy files from or to remote systems, you should monitor log entries generated on Linux systems. Look out for instances where tools such as 'scp', 'rsync', and 'sftp' are used, as these are common utilities for copying files across systems. Additionally, ensure that the log entries contain characters like '@' and ':', which typically indicate a remote destination or source in the context of these tools. However, be aware that the appearance of these tools and characters in logs might also stem from legitimate administration activities, so this method of detection is considered to have a low level of confidence. Focus on the interplay between the presence of the mentioned tools and specific characters to identify potential unauthorised file copying activities effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of tools that copy files from or to remote systems",
      "answer": "In order to detect the use of tools that copy files from or to remote systems, you should monitor log entries generated on Linux systems. Look out for instances where tools such as 'scp', 'rsync', and 'sftp' are used, as these are common utilities for copying files across systems. Additionally, ensure that the log entries contain characters like '@' and ':', which typically indicate a remote destination or source in the context of these tools. However, be aware that the appearance of these tools and characters in logs might also stem from legitimate administration activities, so this method of detection is considered to have a low level of confidence. Focus on the interplay between the presence of the mentioned tools and specific characters to identify potential unauthorised file copying activities effectively."
    }
  },
  {
    "instruction": "How can I detect: deletion of files with extensions often used for backup files. Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.",
    "context": "",
    "output": "In order to detect deletion of files with extensions often used for backup files, as adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery, you should: Monitor Windows file deletion events for actions initiated by command line interfaces such as cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Terminal (wt.exe), and DLL or application loading programs like rundll32.exe and regsvr32.exe. Specifically, pay attention to the deletion of files with extensions that are commonly associated with backups and system recovery, including .VHD, .bac, .bak, .wbcat, .bkf, .set, .win, and .dsk. Any occurrence of these file deletion activities should be investigated to ensure they are not part of a malicious attempt to hinder system recovery efforts. Be aware that there can be legitimate reasons for these actions, thus it\u2019s crucial to differentiate between genuine system or user-initiated processes and potentially harmful activities. This monitoring approach is of medium importance level and aligns with tactics to disrupt system recovery processes by eliminating backup or system recovery files.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deletion of files with extensions often used for backup files. Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.",
      "answer": "In order to detect deletion of files with extensions often used for backup files, as adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery, you should: Monitor Windows file deletion events for actions initiated by command line interfaces such as cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Terminal (wt.exe), and DLL or application loading programs like rundll32.exe and regsvr32.exe. Specifically, pay attention to the deletion of files with extensions that are commonly associated with backups and system recovery, including .VHD, .bac, .bak, .wbcat, .bkf, .set, .win, and .dsk. Any occurrence of these file deletion activities should be investigated to ensure they are not part of a malicious attempt to hinder system recovery efforts. Be aware that there can be legitimate reasons for these actions, thus it\u2019s crucial to differentiate between genuine system or user-initiated processes and potentially harmful activities. This monitoring approach is of medium importance level and aligns with tactics to disrupt system recovery processes by eliminating backup or system recovery files."
    }
  },
  {
    "instruction": "Please help me detect the following: (failed) outbound connection attempts to internet facing SMB servers. This could be a sign of potential exploitation attempts of CVE-2023-23397.",
    "context": "",
    "output": "Sure!\nIn order to detect (failed) outbound connection attempts to internet facing SMB servers, which could be a sign of potential exploitation attempts of CVE-2023-23397, you should: Monitor Windows SMB client connectivity logs for specific events that indicate a network connection failure, disconnection, or re-establishment with a server. Pay attention to events with IDs 30803 (indicating a failed network connection), 30804 (indicating a network disconnection), and 30806 (indicating re-establishment of a session to the server). It is crucial to filter out connections to main local IP addresses to reduce noise and increase the focus on outbound connections to internet-facing servers. This involves excluding IP addresses that start with '10.', indicating they are part of a private network within the 10.0.0.0/8 range, '192.168.', for the 192.168.0.0/16 private network range, and '172.16.' through '172.31.', covering the private network ranges from 172.16.0.0/12 to 172.31.0.0/12. Connections to loopback addresses ('127.') and link-local addresses ('169.254.') should also be ignored. Be aware that there may be false positives, especially from trusted external servers, and consider applying additional filters to refine detections. This detection process focuses on network connection issues to SMB servers which could be indicative of an attempted exploitation, specifically addressing concerns related to CVE-2023-23397.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "(failed) outbound connection attempts to internet facing SMB servers. This could be a sign of potential exploitation attempts of CVE-2023-23397.",
      "answer": "In order to detect (failed) outbound connection attempts to internet facing SMB servers, which could be a sign of potential exploitation attempts of CVE-2023-23397, you should: Monitor Windows SMB client connectivity logs for specific events that indicate a network connection failure, disconnection, or re-establishment with a server. Pay attention to events with IDs 30803 (indicating a failed network connection), 30804 (indicating a network disconnection), and 30806 (indicating re-establishment of a session to the server). It is crucial to filter out connections to main local IP addresses to reduce noise and increase the focus on outbound connections to internet-facing servers. This involves excluding IP addresses that start with '10.', indicating they are part of a private network within the 10.0.0.0/8 range, '192.168.', for the 192.168.0.0/16 private network range, and '172.16.' through '172.31.', covering the private network ranges from 172.16.0.0/12 to 172.31.0.0/12. Connections to loopback addresses ('127.') and link-local addresses ('169.254.') should also be ignored. Be aware that there may be false positives, especially from trusted external servers, and consider applying additional filters to refine detections. This detection process focuses on network connection issues to SMB servers which could be indicative of an attempted exploitation, specifically addressing concerns related to CVE-2023-23397."
    }
  },
  {
    "instruction": "How to detect: modification to the \"Default\" value of the \"MyComputer\" key and subkeys to point to a custom binary that will be launched whenever the associated action is executed (see reference section for example)",
    "context": "",
    "output": "In order to detect modification to the \"Default\" value of the \"MyComputer\" key and subkeys to point to a custom binary that will be launched whenever the associated action is executed, you should: Focus on monitoring registry set events within Windows systems. Specifically, look out for events where the \"EventType\" is set to \"SetValue\". This indicates that a value within the registry is being changed. Pay close attention to changes targeting the registry path including '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer', especially modifications to values that end in '(Default)'. Such alterations could indicate an attempt to modify system behavior to execute potentially malicious binaries when certain actions are taken concerning \"MyComputer\". Given this context, the detection of such modifications is treated with a high level of concern. However, it is acknowledged that while false positives are unlikely, they can occur. In instances where false positives are observed, it is advised to refine monitoring by excluding specific processes and registry locations known to be benign or part of legitimate operations. This approach aims at ensuring the accuracy and relevance of detection efforts, keeping the security posture tight yet flexible to accommodate necessary system functionalities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification to the \"Default\" value of the \"MyComputer\" key and subkeys to point to a custom binary that will be launched whenever the associated action is executed (see reference section for example)",
      "answer": "In order to detect modification to the \"Default\" value of the \"MyComputer\" key and subkeys to point to a custom binary that will be launched whenever the associated action is executed, you should: Focus on monitoring registry set events within Windows systems. Specifically, look out for events where the \"EventType\" is set to \"SetValue\". This indicates that a value within the registry is being changed. Pay close attention to changes targeting the registry path including '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer', especially modifications to values that end in '(Default)'. Such alterations could indicate an attempt to modify system behavior to execute potentially malicious binaries when certain actions are taken concerning \"MyComputer\". Given this context, the detection of such modifications is treated with a high level of concern. However, it is acknowledged that while false positives are unlikely, they can occur. In instances where false positives are observed, it is advised to refine monitoring by excluding specific processes and registry locations known to be benign or part of legitimate operations. This approach aims at ensuring the accuracy and relevance of detection efforts, keeping the security posture tight yet flexible to accommodate necessary system functionalities."
    }
  },
  {
    "instruction": "How can I detect: creation of a new service.",
    "context": "",
    "output": "In order to detect the creation of a new service, you should monitor Windows process creation logs for specific patterns that indicate such activity. Look for instances where the process image ends with '\\sc.exe' combined with command lines that include both 'create' and 'binPath'. Additionally, pay attention to the use of PowerShell commands containing 'New-Service' together with '-BinaryPathName'. This monitoring helps in identifying potentially unauthorized service creation, which could be indicative of malicious activity. However, be aware that there might be false positives, such as legitimate service creation by administrators or users for non-malicious purposes. Given these considerations, the detection level for such activities is categorized as low.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new service.",
      "answer": "In order to detect the creation of a new service, you should monitor Windows process creation logs for specific patterns that indicate such activity. Look for instances where the process image ends with '\\sc.exe' combined with command lines that include both 'create' and 'binPath'. Additionally, pay attention to the use of PowerShell commands containing 'New-Service' together with '-BinaryPathName'. This monitoring helps in identifying potentially unauthorized service creation, which could be indicative of malicious activity. However, be aware that there might be false positives, such as legitimate service creation by administrators or users for non-malicious purposes. Given these considerations, the detection level for such activities is categorized as low."
    }
  },
  {
    "instruction": "How to detect: Detect set Notification_Suppress to 1 to disable the Windows security center notification",
    "context": "",
    "output": "In order to detect set Notification_Suppress to 1 to disable the Windows security center notification, you should: Monitor registry modifications on Windows systems, specifically targeting the event where a value is being set (EventType: SetValue). Focus your surveillance on changes made to the 'SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration\\Notification_Suppress' registry path. Look for instances where this particular registry key's value is changed to DWORD (0x00000001), which effectively disables notifications from the Windows Security Center. This activity should be closely watched as it could indicate an attempt to suppress important security alerts, potentially as part of a broader strategy to hide the presence of malicious activities on the system. Keep in mind that such modifications might not always represent malicious behavior, and the source of changes should be investigated to rule out false positives. This approach is crucial for maintaining the integrity of your system's security alerts and ensuring that potential threats do not go unnoticed.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect set Notification_Suppress to 1 to disable the Windows security center notification",
      "answer": "In order to detect set Notification_Suppress to 1 to disable the Windows security center notification, you should: Monitor registry modifications on Windows systems, specifically targeting the event where a value is being set (EventType: SetValue). Focus your surveillance on changes made to the 'SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration\\Notification_Suppress' registry path. Look for instances where this particular registry key's value is changed to DWORD (0x00000001), which effectively disables notifications from the Windows Security Center. This activity should be closely watched as it could indicate an attempt to suppress important security alerts, potentially as part of a broader strategy to hide the presence of malicious activities on the system. Keep in mind that such modifications might not always represent malicious behavior, and the source of changes should be investigated to rule out false positives. This approach is crucial for maintaining the integrity of your system's security alerts and ensuring that potential threats do not go unnoticed."
    }
  },
  {
    "instruction": "Can you explain how to detect: specific techniques often seen used inside of PowerShell scripts to obfscuate Alias creation",
    "context": "",
    "output": "Certainly!\n\nIn order to detect specific techniques often seen used inside of PowerShell scripts to obfuscate Alias creation, you should: analyze PowerShell script logs, focusing on the enabled Script Block Logging feature in Windows environments. Look for instances where the script text contains both '-Alias' (this would indicate the presence of either \"New-Alias\" or \"Set-Alias\" commands) and ' -Value (-join(' patterns together. This particular combination often suggests attempts at obfuscating the creation of aliases within PowerShell scripts, which can be indicative of malicious activity or attempts to evade detection. Bear in mind, however, that such detections could occasionally lead to unknown false positives and are considered to have a low risk level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific techniques often seen used inside of PowerShell scripts to obfscuate Alias creation",
      "answer": "In order to detect specific techniques often seen used inside of PowerShell scripts to obfuscate Alias creation, you should: analyze PowerShell script logs, focusing on the enabled Script Block Logging feature in Windows environments. Look for instances where the script text contains both '-Alias' (this would indicate the presence of either \"New-Alias\" or \"Set-Alias\" commands) and ' -Value (-join(' patterns together. This particular combination often suggests attempts at obfuscating the creation of aliases within PowerShell scripts, which can be indicative of malicious activity or attempts to evade detection. Bear in mind, however, that such detections could occasionally lead to unknown false positives and are considered to have a low risk level."
    }
  },
  {
    "instruction": "How to detect: exploitation attempt of the CVE-2021-27905 which affects all Apache Solr versions prior to and including 8.8.1.",
    "context": "",
    "output": "In order to detect exploitation attempts of the CVE-2021-27905, which affects all Apache Solr versions prior to and including 8.8.1, you should focus on monitoring the web server logs for specific request patterns. Look for HTTP requests that include query parameters indicating an attempt to exploit the vulnerability. Specifically, watch for two types of request patterns:\n\n1. Requests containing the '/solr/' path, the '/debug/dump?' directive, and the parameter 'param=ContentStream', which must also return an HTTP status code of 200, indicating a successful interaction with the server. This pattern suggests an attacker is attempting to debug or dump information from the Solr server using a crafted request.\n\n2. HTTP GET requests that contain the '/solr/' path, the 'command=fetchindex' instruction, and a 'masterUrl=' parameter. These requests also need to return an HTTP status code of 200. This pattern suggests an attempt to fetch the index from the Solr server, possibly indicating unauthorized data exfiltration or manipulation.\n\nIt's important to consider that vulnerability scanners might also trigger these patterns, so they should be carefully analyzed to differentiate between legitimate scanning activities and actual exploitation attempts. The detection of such requests should be treated with a medium level of concern, due to their potential indication of an ongoing attack targeting the known vulnerability CVE-2021-27905 in Apache Solr. Be sure to pay attention to both detection scenarios to effectively monitor and identify possible exploitation activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempt of the CVE-2021-27905 which affects all Apache Solr versions prior to and including 8.8.1.",
      "answer": "In order to detect exploitation attempts of the CVE-2021-27905, which affects all Apache Solr versions prior to and including 8.8.1, you should focus on monitoring the web server logs for specific request patterns. Look for HTTP requests that include query parameters indicating an attempt to exploit the vulnerability. Specifically, watch for two types of request patterns:\n\n1. Requests containing the '/solr/' path, the '/debug/dump?' directive, and the parameter 'param=ContentStream', which must also return an HTTP status code of 200, indicating a successful interaction with the server. This pattern suggests an attacker is attempting to debug or dump information from the Solr server using a crafted request.\n\n2. HTTP GET requests that contain the '/solr/' path, the 'command=fetchindex' instruction, and a 'masterUrl=' parameter. These requests also need to return an HTTP status code of 200. This pattern suggests an attempt to fetch the index from the Solr server, possibly indicating unauthorized data exfiltration or manipulation.\n\nIt's important to consider that vulnerability scanners might also trigger these patterns, so they should be carefully analyzed to differentiate between legitimate scanning activities and actual exploitation attempts. The detection of such requests should be treated with a medium level of concern, due to their potential indication of an ongoing attack targeting the known vulnerability CVE-2021-27905 in Apache Solr. Be sure to pay attention to both detection scenarios to effectively monitor and identify possible exploitation activities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Identifies IPs from which users grant access to other users on azure resources and alerts when a previously unseen source IP address is used.",
    "context": "",
    "output": "In order to identify IPs from which users grant access to other users on Azure resources and alert when a previously unseen source IP address is used, you should monitor Azure Activity logs for any instances of role assignments being created or modified. Specifically, keep an eye out for events containing the keyword \"Microsoft.Authorization/roleAssignments/write\". This indicates that a user has been granted access to an Azure resource, which could potentially be a security concern if originating from an unfamiliar or unauthorized source IP. Bear in mind that legitimate adjustments to role assignments can trigger this alert, so it's important to differentiate between normal administrative behavior and potentially malicious actions. The security level for this type of activity is considered medium, implying that while not every instance is an immediate threat, unusual or unexpected occurrences should be investigated to ensure they are not indicative of a compromised account or insider threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies IPs from which users grant access to other users on azure resources and alerts when a previously unseen source IP address is used.",
      "answer": "In order to identify IPs from which users grant access to other users on Azure resources and alert when a previously unseen source IP address is used, you should monitor Azure Activity logs for any instances of role assignments being created or modified. Specifically, keep an eye out for events containing the keyword \"Microsoft.Authorization/roleAssignments/write\". This indicates that a user has been granted access to an Azure resource, which could potentially be a security concern if originating from an unfamiliar or unauthorized source IP. Bear in mind that legitimate adjustments to role assignments can trigger this alert, so it's important to differentiate between normal administrative behavior and potentially malicious actions. The security level for this type of activity is considered medium, implying that while not every instance is an immediate threat, unusual or unexpected occurrences should be investigated to ensure they are not indicative of a compromised account or insider threat."
    }
  },
  {
    "instruction": "How to detect: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system.\nAdversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors,\nincluding whether or not the adversary fully infects the target and/or attempts specific actions.\n",
    "context": "",
    "output": "In order to detect adversaries who are enumerating files and directories or searching specific locations on a host or network share for certain information within a file system, you should monitor for specific PowerShell script activities indicative of [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) techniques. Look for PowerShell scripts that contain commands commonly used to list or find files and directories, such as `ls`, `get-childitem`, or the alias `gci`. Additionally, pay attention to scripts that include the `-recurse` parameter, which is used to search through directories recursively. This monitoring requires Script Block Logging to be enabled on Windows systems. Be aware that detecting these activities at a low level of alert may result in unknown false positives, indicating that while these script commands can be used for legitimate purposes, their presence could also signify nefarious file and directory discovery activities by an adversary.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system.\nAdversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors,\nincluding whether or not the adversary fully infects the target and/or attempts specific actions.\n",
      "answer": "In order to detect adversaries who are enumerating files and directories or searching specific locations on a host or network share for certain information within a file system, you should monitor for specific PowerShell script activities indicative of [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) techniques. Look for PowerShell scripts that contain commands commonly used to list or find files and directories, such as `ls`, `get-childitem`, or the alias `gci`. Additionally, pay attention to scripts that include the `-recurse` parameter, which is used to search through directories recursively. This monitoring requires Script Block Logging to be enabled on Windows systems. Be aware that detecting these activities at a low level of alert may result in unknown false positives, indicating that while these script commands can be used for legitimate purposes, their presence could also signify nefarious file and directory discovery activities by an adversary."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of SDelete to erase a file not the free space",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of SDelete to erase a file not the free space, you should monitor the process creation logs on Windows systems for instances where the original file name is identified as `sdelete.exe`. However, it's important to exclude any command line instances that contain the parameters '-h', '-c', '-z', or '/\\?', as these are indicative of operations that do not target file erasure but rather pertain to free space cleansing or help commands. Focus on gathering information such as the computer name, user, full command line input, and parent command line input to thoroughly analyze potentially malicious activity. This approach is crucial for identifying the misuse of SDelete in a manner that aims to permanently delete files, bypassing recycle bin or standard delete functions, which could be indicative of an attempt to conceal illicit activities or remove evidence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of SDelete to erase a file not the free space",
      "answer": "In order to detect the use of SDelete to erase a file not the free space, you should monitor the process creation logs on Windows systems for instances where the original file name is identified as `sdelete.exe`. However, it's important to exclude any command line instances that contain the parameters '-h', '-c', '-z', or '/\\?', as these are indicative of operations that do not target file erasure but rather pertain to free space cleansing or help commands. Focus on gathering information such as the computer name, user, full command line input, and parent command line input to thoroughly analyze potentially malicious activity. This approach is crucial for identifying the misuse of SDelete in a manner that aims to permanently delete files, bypassing recycle bin or standard delete functions, which could be indicative of an attempt to conceal illicit activities or remove evidence."
    }
  },
  {
    "instruction": "Explain how should I detect the following: various indicators of Microsoft Connection Manager Profile Installer execution",
    "context": "",
    "output": "In order to detect various indicators of Microsoft Connection Manager Profile Installer execution, you should: focus on monitoring process access logs within Windows environments. Specifically, look for any process access events where the call trace includes a reference to 'cmlua.dll', as this is indicative of the Microsoft Connection Manager Profile Installer's activity. Important fields to examine for suspicious activity include the CommandLine, ParentCommandLine, and Details associated with the event. While it's important to be aware that there are legitimate uses of the Connection Manager Profile Installer, these are considered unlikely in modern enterprise environments, and any detection should be treated with a high level of suspicion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "various indicators of Microsoft Connection Manager Profile Installer execution",
      "answer": "In order to detect various indicators of Microsoft Connection Manager Profile Installer execution, you should: focus on monitoring process access logs within Windows environments. Specifically, look for any process access events where the call trace includes a reference to 'cmlua.dll', as this is indicative of the Microsoft Connection Manager Profile Installer's activity. Important fields to examine for suspicious activity include the CommandLine, ParentCommandLine, and Details associated with the event. While it's important to be aware that there are legitimate uses of the Connection Manager Profile Installer, these are considered unlikely in modern enterprise environments, and any detection should be treated with a high level of suspicion."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential exploitation of CVE-2021-260841 a Confluence RCE using OGNL injection",
    "context": "",
    "output": "In order to detect potential exploitation of CVE-2021-260841, a Confluence Remote Code Execution (RCE) using Object-Graph Navigation Language (OGNL) injection, you should focus on monitoring web server logs for specific patterns that indicate an attack attempt. Look for HTTP POST requests, which are typically used to submit data from a client to your server. Specifically, you're interested in those that respond with a status code of 200, indicating a successful request, where the username is set to 'anonymous'. This helps to identify unauthorized attempts to exploit the vulnerability while potentially reducing false positives by excluding authenticated attempts.\n\nPay close attention to the requested URLs. You're looking for queries that contain '/pages/createpage-entervariables.action' along with a parameter 'SpaceKey=x'. This specific pattern suggests an attacker is attempting to exploit the RCE by injecting malicious OGNL expressions due to the inability to have a space ID of \"X\", which is not a typical behavior under normal circumstances.\n\nAdditionally, monitor for requests to '/doenterpagevariables.action' that also include the keyword 'u0027' within the post body under the parameter \"queryString\". This represents an attempt to exploit the vulnerability through a different vector, where 'u0027' (a unicode representation of a single quote) could indicate manipulation of OGNL expressions, commonly used in injection attacks.\n\nThese detection mechanisms are mapped to MITRE ATT&CK tactics and techniques such as execution and command and control, specifically via the exploitation of a remote service. The high level of scrutiny is due to the critical nature of the vulnerability, allowing for arbitrary code execution on the Confluence server.\n\nThe combination of these detection options focuses on identifying exploitation attempts that leverage the specific vulnerability CVE-2021-260841. It's crucial to remember that unknown false positives may occur and it's important to validate and investigate alerts to confirm the exploitation attempts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential exploitation of CVE-2021-260841 a Confluence RCE using OGNL injection",
      "answer": "In order to detect potential exploitation of CVE-2021-260841, a Confluence Remote Code Execution (RCE) using Object-Graph Navigation Language (OGNL) injection, you should focus on monitoring web server logs for specific patterns that indicate an attack attempt. Look for HTTP POST requests, which are typically used to submit data from a client to your server. Specifically, you're interested in those that respond with a status code of 200, indicating a successful request, where the username is set to 'anonymous'. This helps to identify unauthorized attempts to exploit the vulnerability while potentially reducing false positives by excluding authenticated attempts.\n\nPay close attention to the requested URLs. You're looking for queries that contain '/pages/createpage-entervariables.action' along with a parameter 'SpaceKey=x'. This specific pattern suggests an attacker is attempting to exploit the RCE by injecting malicious OGNL expressions due to the inability to have a space ID of \"X\", which is not a typical behavior under normal circumstances.\n\nAdditionally, monitor for requests to '/doenterpagevariables.action' that also include the keyword 'u0027' within the post body under the parameter \"queryString\". This represents an attempt to exploit the vulnerability through a different vector, where 'u0027' (a unicode representation of a single quote) could indicate manipulation of OGNL expressions, commonly used in injection attacks.\n\nThese detection mechanisms are mapped to MITRE ATT&CK tactics and techniques such as execution and command and control, specifically via the exploitation of a remote service. The high level of scrutiny is due to the critical nature of the vulnerability, allowing for arbitrary code execution on the Confluence server.\n\nThe combination of these detection options focuses on identifying exploitation attempts that leverage the specific vulnerability CVE-2021-260841. It's crucial to remember that unknown false positives may occur and it's important to validate and investigate alerts to confirm the exploitation attempts."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of default named pipe used by the DiagTrackEoP POC",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of default named pipe used by the DiagTrackEoP POC, you should focus on monitoring Windows named pipe creation events. This involves configuring logging specifically for named pipe events in Sysmon, specifically watching for Event ID 17 (pipe created) and Event ID 18 (pipe connected). It's important to ensure your Sysmon configuration is up to date and includes monitoring for named pipe events, utilizing popular Sysmon configurations found online as a starting point. The detection mechanism is set to trigger an alert when a pipe with the name \"thisispipe\" is created, which is a characteristic used by the DiagTrackEoP proof of concept. Given that this activity is closely associated with a known exploit, false positives are considered unlikely, and such detections should be treated with a high level of urgency.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of default named pipe used by the DiagTrackEoP POC",
      "answer": "In order to detect the creation of default named pipe used by the DiagTrackEoP POC, you should focus on monitoring Windows named pipe creation events. This involves configuring logging specifically for named pipe events in Sysmon, specifically watching for Event ID 17 (pipe created) and Event ID 18 (pipe connected). It's important to ensure your Sysmon configuration is up to date and includes monitoring for named pipe events, utilizing popular Sysmon configurations found online as a starting point. The detection mechanism is set to trigger an alert when a pipe with the name \"thisispipe\" is created, which is a characteristic used by the DiagTrackEoP proof of concept. Given that this activity is closely associated with a known exploit, false positives are considered unlikely, and such detections should be treated with a high level of urgency."
    }
  },
  {
    "instruction": "Please help me detect the following: use of WinAPI Functions in PowerShell scripts",
    "context": "",
    "output": "Sure!\nIn order to detect the use of WinAPI functions in PowerShell scripts, you should focus on monitoring Windows script activity, specifically PowerShell scripts. The detection approach requires Script Block Logging to be enabled. Look for PowerShell script contents that contain any of the following suspicious function calls: 'AddSecurityPackage', 'AdjustTokenPrivileges', 'CloseHandle', 'CreateProcessWithToken', 'CreateRemoteThread', 'CreateThread', 'CreateUserThread', 'DangerousGetHandle', 'DuplicateTokenEx', 'EnumerateSecurityPackages', 'FreeLibrary', 'GetDelegateForFunctionPointer', 'GetLogonSessionData', 'GetModuleHandle', 'GetProcAddress', 'GetProcessHandle', 'GetTokenInformation', 'ImpersonateLoggedOnUser', 'kernel32', 'LoadLibrary', 'memcpy', 'MiniDumpWriteDump', 'msvcrt', 'ntdll', 'OpenDesktop', 'OpenProcess', 'OpenProcessToken', 'OpenThreadToken', 'OpenWindowStation', 'QueueUserApc', 'ReadProcessMemory', 'RevertToSelf', 'RtlCreateUserThread', 'secur32', 'SetThreadToken', 'VirtualAlloc', 'VirtualFree', 'VirtualProtect', 'WaitForSingleObject', 'WriteInt32', 'WriteProcessMemory', and 'ZeroFreeGlobalAllocUnicode'. Note that scripts starting with a specific copyright line related to Amazon.com, Inc., or those that include certain function imports from 'KernelBase.dll' related to Amazon AWS scripts, should be considered as potential legitimate uses and therefore may be excluded from alerts to reduce false positives. Additionally, be aware of other known benign uses, such as the Carbon PowerShell Module, which might also contribute to false positives. This monitoring is crucial as the aforementioned function calls in PowerShell scripts could indicate attempts to abuse Windows APIs for malicious purposes such as privilege escalation, executing code, and other unauthorized actions on the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of WinAPI Functions in PowerShell scripts",
      "answer": "In order to detect the use of WinAPI functions in PowerShell scripts, you should focus on monitoring Windows script activity, specifically PowerShell scripts. The detection approach requires Script Block Logging to be enabled. Look for PowerShell script contents that contain any of the following suspicious function calls: 'AddSecurityPackage', 'AdjustTokenPrivileges', 'CloseHandle', 'CreateProcessWithToken', 'CreateRemoteThread', 'CreateThread', 'CreateUserThread', 'DangerousGetHandle', 'DuplicateTokenEx', 'EnumerateSecurityPackages', 'FreeLibrary', 'GetDelegateForFunctionPointer', 'GetLogonSessionData', 'GetModuleHandle', 'GetProcAddress', 'GetProcessHandle', 'GetTokenInformation', 'ImpersonateLoggedOnUser', 'kernel32', 'LoadLibrary', 'memcpy', 'MiniDumpWriteDump', 'msvcrt', 'ntdll', 'OpenDesktop', 'OpenProcess', 'OpenProcessToken', 'OpenThreadToken', 'OpenWindowStation', 'QueueUserApc', 'ReadProcessMemory', 'RevertToSelf', 'RtlCreateUserThread', 'secur32', 'SetThreadToken', 'VirtualAlloc', 'VirtualFree', 'VirtualProtect', 'WaitForSingleObject', 'WriteInt32', 'WriteProcessMemory', and 'ZeroFreeGlobalAllocUnicode'. Note that scripts starting with a specific copyright line related to Amazon.com, Inc., or those that include certain function imports from 'KernelBase.dll' related to Amazon AWS scripts, should be considered as potential legitimate uses and therefore may be excluded from alerts to reduce false positives. Additionally, be aware of other known benign uses, such as the Carbon PowerShell Module, which might also contribute to false positives. This monitoring is crucial as the aforementioned function calls in PowerShell scripts could indicate attempts to abuse Windows APIs for malicious purposes such as privilege escalation, executing code, and other unauthorized actions on the system."
    }
  },
  {
    "instruction": "Can you explain how to detect: an image load pattern as seen when a tool named PRIVATELOG is used and rarely observed under legitimate circumstances",
    "context": "",
    "output": "Certainly!\n\nIn order to Detects an image load pattern as seen when a tool named PRIVATELOG is used and rarely observed under legitimate circumstances, you should: Focus on monitoring image load activities within Windows. Specifically, watch for instances where the executable 'svchost.exe' loads the dynamic link library 'clfsw32.dll'. This particular pattern of behavior is associated with the use of the tool PRIVATELOG, and it's seldom seen in normal operations, indicating a potentially malicious action. Despite being a strong indicator of suspicious activity, be mindful that it might occur in rare legitimate scenarios. Thus, it's classified with a high level of concern due to its unusual nature and potential security implications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an image load pattern as seen when a tool named PRIVATELOG is used and rarely observed under legitimate circumstances",
      "answer": "In order to Detects an image load pattern as seen when a tool named PRIVATELOG is used and rarely observed under legitimate circumstances, you should: Focus on monitoring image load activities within Windows. Specifically, watch for instances where the executable 'svchost.exe' loads the dynamic link library 'clfsw32.dll'. This particular pattern of behavior is associated with the use of the tool PRIVATELOG, and it's seldom seen in normal operations, indicating a potentially malicious action. Despite being a strong indicator of suspicious activity, be mindful that it might occur in rare legitimate scenarios. Thus, it's classified with a high level of concern due to its unusual nature and potential security implications."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential arbitrary file download using a Microsoft Office application",
    "context": "",
    "output": "In order to detect potential arbitrary file download using a Microsoft Office application, you should: Monitor the process creation logs on Windows systems for instances where Microsoft Office applications such as Excel (EXCEL.EXE), PowerPoint (POWERPNT.EXE), and Word (WINWORD.exe) are initiated with command lines that contain HTTP or HTTPS requests. This involves looking for exact matches of the executable names, including their original filenames like 'Excel.exe', 'POWERPNT.EXE', and 'WinWord.exe', to accurately identify the processes. Additionally, inspect the command line for URLs starting with 'http://' or 'https://', as this could indicate an attempt to download files from the internet arbitrarily. The detection requires all these conditions to be met simultaneously. The importance of this detection is rated high, although it's acknowledged that there could be unknown scenarios that may lead to false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential arbitrary file download using a Microsoft Office application",
      "answer": "In order to detect potential arbitrary file download using a Microsoft Office application, you should: Monitor the process creation logs on Windows systems for instances where Microsoft Office applications such as Excel (EXCEL.EXE), PowerPoint (POWERPNT.EXE), and Word (WINWORD.exe) are initiated with command lines that contain HTTP or HTTPS requests. This involves looking for exact matches of the executable names, including their original filenames like 'Excel.exe', 'POWERPNT.EXE', and 'WinWord.exe', to accurately identify the processes. Additionally, inspect the command line for URLs starting with 'http://' or 'https://', as this could indicate an attempt to download files from the internet arbitrarily. The detection requires all these conditions to be met simultaneously. The importance of this detection is rated high, although it's acknowledged that there could be unknown scenarios that may lead to false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: write of an Exchange CSR to an untypical directory or with aspx name suffix which can be used to place a webshell",
    "context": "",
    "output": "In order to detect a write of an Exchange Certificate Signing Request (CSR) to an untypical directory or with an aspx name suffix which can be used to place a webshell, you should monitor the Microsoft Exchange Management service on Windows systems for specific command lines that indicate the generation and export of an Exchange certificate request. Look for the command 'New-ExchangeCertificate' combined with parameters such as '-GenerateRequest', '-BinaryEncoded', and '-RequestFile'. Additionally, be alert for the request being written to suspicious file paths or using file names with an '.aspx' suffix, which are common indicators of an attempt to place a webshell. These paths include '\\\\\\\\localhost\\\\C$', '\\\\\\\\127.0.0.1\\\\C$', and 'C:\\\\inetpub'. The combination of these command options and file paths serves as a critical indicator of a potentially malicious activity related to the manipulation or exploitation of Microsoft Exchange services. Monitoring for these activities with minimal false positives is crucial for defending against threats aiming to establish persistence or gain unauthorized access through webshells.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "write of an Exchange CSR to an untypical directory or with aspx name suffix which can be used to place a webshell",
      "answer": "In order to detect a write of an Exchange Certificate Signing Request (CSR) to an untypical directory or with an aspx name suffix which can be used to place a webshell, you should monitor the Microsoft Exchange Management service on Windows systems for specific command lines that indicate the generation and export of an Exchange certificate request. Look for the command 'New-ExchangeCertificate' combined with parameters such as '-GenerateRequest', '-BinaryEncoded', and '-RequestFile'. Additionally, be alert for the request being written to suspicious file paths or using file names with an '.aspx' suffix, which are common indicators of an attempt to place a webshell. These paths include '\\\\\\\\localhost\\\\C$', '\\\\\\\\127.0.0.1\\\\C$', and 'C:\\\\inetpub'. The combination of these command options and file paths serves as a critical indicator of a potentially malicious activity related to the manipulation or exploitation of Microsoft Exchange services. Monitoring for these activities with minimal false positives is crucial for defending against threats aiming to establish persistence or gain unauthorized access through webshells."
    }
  },
  {
    "instruction": "Please help me detect the following: Show when a monitor or a span/rspan is setup or modified",
    "context": "",
    "output": "Sure!\nIn order to show when a monitor or a span/rspan is setup or modified, you should monitor Cisco AAA (Authentication, Authorization, and Accounting) service logs for specific command occurrences. Detecting this activity involves looking for logs containing any of the following phrases: \"monitor capture point\", \"set span\", or \"set rspan\". These commands are pivotal in configuring or changing monitoring settings that could indicate either legitimate administrative activities or potential unauthorized network monitoring setup by attackers.\n\nThe detection process primarily focuses on the command set (CmdSet) field within the logs, identifying any instance of the aforementioned keywords. It is important to bear in mind that these detections could sometimes trigger on legitimate administrative actions. Instances where administrators are setting up new monitoring points, modifying existing spans, or utilizing monitor commands for troubleshooting purposes are considered normal operations and therefore, can be marked as false positives. This necessitates a thorough review of the context in which these commands are executed to discern between routine maintenance and potential security incidents.\n\nThis approach is designed to safeguard against unauthorized network surveillance activities, aligning with the understanding and mitigation efforts against certain tactics and techniques cataloged by MITRE ATT&CK, specifically those involving the manipulation of network monitoring tools to eavesdrop or gather data unlawfully. By scrutinizing logs for these specific commands, organization can bolster their cyber defense mechanism against such adversarial tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Show when a monitor or a span/rspan is setup or modified",
      "answer": "In order to show when a monitor or a span/rspan is setup or modified, you should monitor Cisco AAA (Authentication, Authorization, and Accounting) service logs for specific command occurrences. Detecting this activity involves looking for logs containing any of the following phrases: \"monitor capture point\", \"set span\", or \"set rspan\". These commands are pivotal in configuring or changing monitoring settings that could indicate either legitimate administrative activities or potential unauthorized network monitoring setup by attackers.\n\nThe detection process primarily focuses on the command set (CmdSet) field within the logs, identifying any instance of the aforementioned keywords. It is important to bear in mind that these detections could sometimes trigger on legitimate administrative actions. Instances where administrators are setting up new monitoring points, modifying existing spans, or utilizing monitor commands for troubleshooting purposes are considered normal operations and therefore, can be marked as false positives. This necessitates a thorough review of the context in which these commands are executed to discern between routine maintenance and potential security incidents.\n\nThis approach is designed to safeguard against unauthorized network surveillance activities, aligning with the understanding and mitigation efforts against certain tactics and techniques cataloged by MITRE ATT&CK, specifically those involving the manipulation of network monitoring tools to eavesdrop or gather data unlawfully. By scrutinizing logs for these specific commands, organization can bolster their cyber defense mechanism against such adversarial tactics."
    }
  },
  {
    "instruction": "Please help me detect the following: access to processes by other suspicious processes which have reflectively loaded libraries in their memory space.\nAn example is SilentTrinity C2 behaviour. Generally speaking, when Sysmon EventID 10 cannot reference a stack call to a dll loaded from disk (the standard way),\nit will display \"UNKNOWN\" as the module name. Usually this means the stack call points to a module that was reflectively loaded in memory.\nAdding to this, it is not common to see such few calls in the stack (ntdll.dll --> kernelbase.dll --> unknown) which essentially means that\nmost of the functions required by the process to execute certain routines are already present in memory, not requiring any calls to external libraries.\nThe latter should also be considered suspicious.\n",
    "context": "",
    "output": "Sure!\nIn order to detect the access to processes by other suspicious processes which have reflectively loaded libraries in their memory space, you should: Monitor Windows process access logs for specific patterns signaling potentially malicious behavior. Look for process call traces containing a sequence starting from `ntdll.dll`, going through `KERNELBASE.dll`, and then involving unknown modules, which might indicate the use of reflectively loaded libraries\u2014a common way for adversaries to avoid detection. Additionally, any granted access codes like `0x1F0FFF` and other specific hexadecimal values should raise suspicion as they often correspond to high privilege levels used by malicious processes to manipulate other processes. Ensure to exclude certain legitimate system and software processes that may share similar behavior, such as `sdiagnhost.exe`, `procexp64.exe`, and development tools like Microsoft Visual Studio, to minimize false positives. Also, specific patterns involving files like `taskhostw.exe`, `ctfmon.exe` and certain behavior involving `RuntimeBroker.exe` and `Microsoft VS Code` should be monitored, but with the awareness that these might be part of legitimate application activity. This approach helps in identifying SilentTrinity C2 behavior and other malware types that execute routines directly from memory, bypassing the normal loading of library files from disk., thus improving the detection of sophisticated stealth techniques used during a cyber attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "access to processes by other suspicious processes which have reflectively loaded libraries in their memory space.\nAn example is SilentTrinity C2 behaviour. Generally speaking, when Sysmon EventID 10 cannot reference a stack call to a dll loaded from disk (the standard way),\nit will display \"UNKNOWN\" as the module name. Usually this means the stack call points to a module that was reflectively loaded in memory.\nAdding to this, it is not common to see such few calls in the stack (ntdll.dll --> kernelbase.dll --> unknown) which essentially means that\nmost of the functions required by the process to execute certain routines are already present in memory, not requiring any calls to external libraries.\nThe latter should also be considered suspicious.\n",
      "answer": "In order to detect the access to processes by other suspicious processes which have reflectively loaded libraries in their memory space, you should: Monitor Windows process access logs for specific patterns signaling potentially malicious behavior. Look for process call traces containing a sequence starting from `ntdll.dll`, going through `KERNELBASE.dll`, and then involving unknown modules, which might indicate the use of reflectively loaded libraries\u2014a common way for adversaries to avoid detection. Additionally, any granted access codes like `0x1F0FFF` and other specific hexadecimal values should raise suspicion as they often correspond to high privilege levels used by malicious processes to manipulate other processes. Ensure to exclude certain legitimate system and software processes that may share similar behavior, such as `sdiagnhost.exe`, `procexp64.exe`, and development tools like Microsoft Visual Studio, to minimize false positives. Also, specific patterns involving files like `taskhostw.exe`, `ctfmon.exe` and certain behavior involving `RuntimeBroker.exe` and `Microsoft VS Code` should be monitored, but with the awareness that these might be part of legitimate application activity. This approach helps in identifying SilentTrinity C2 behavior and other malware types that execute routines directly from memory, bypassing the normal loading of library files from disk., thus improving the detection of sophisticated stealth techniques used during a cyber attack."
    }
  },
  {
    "instruction": "How can I detect: process, such as mimikatz, accesses the memory of svchost to dump credentials",
    "context": "",
    "output": "In order to detect when a process, such as mimikatz, accesses the memory of svchost to dump credentials, you should: Focus on Windows process access logs and look for events where a process targets the 'svchost.exe' file. Specifically, you should look for any process that has been granted access with the permissions '0x143a' to the memory of 'svchost.exe'. However, you must exclude any access instances where the source of the access is a known and trusted process, notably 'services.exe' or 'msiexec.exe'. This approach is designed to elevate the detection accuracy by minimizing false positives from legitimate executable accesses while ensuring high sensitivity to potentially malicious activities like credential dumping by targeting system processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process, such as mimikatz, accesses the memory of svchost to dump credentials",
      "answer": "In order to detect when a process, such as mimikatz, accesses the memory of svchost to dump credentials, you should: Focus on Windows process access logs and look for events where a process targets the 'svchost.exe' file. Specifically, you should look for any process that has been granted access with the permissions '0x143a' to the memory of 'svchost.exe'. However, you must exclude any access instances where the source of the access is a known and trusted process, notably 'services.exe' or 'msiexec.exe'. This approach is designed to elevate the detection accuracy by minimizing false positives from legitimate executable accesses while ensuring high sensitivity to potentially malicious activities like credential dumping by targeting system processes."
    }
  },
  {
    "instruction": "How to detect: a suspicious crash of the Microsoft Malware Protection Engine",
    "context": "",
    "output": "In order to detect a suspicious crash of the Microsoft Malware Protection Engine, you should monitor application logs from Windows-based systems for events that indicate an application error with specific characteristics. Look for events where the Provider Name is identified as 'Application Error' and the EventID is 1000. These criteria alone aren't enough to confirm suspicious activity, so you must also analyze the data section of the event for the presence of both 'MsMpEng.exe' and 'mpengine.dll'. This combination of criteria is indicative of the Microsoft Malware Protection Engine encountering issues, which could be due to an attack.\n\nBe mindful that there are scenarios where MsMpEng.exe might crash which are not related to malicious activities. A known benign scenario includes the crash occurring when the \"C:\\\" partition on the system is full. Such instances should be considered when evaluating the alerts to reduce false positives.\n\nThis detection strategy is associated with tactics and techniques that involve impacts on system services and processes, commonly linked with the disruption of security features on a host. Monitoring for and analyzing these specific log details are critical steps in identifying and mitigating potential threats targeting the malware protection capabilities of Windows systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "a suspicious crash of the Microsoft Malware Protection Engine",
      "answer": "In order to detect a suspicious crash of the Microsoft Malware Protection Engine, you should monitor application logs from Windows-based systems for events that indicate an application error with specific characteristics. Look for events where the Provider Name is identified as 'Application Error' and the EventID is 1000. These criteria alone aren't enough to confirm suspicious activity, so you must also analyze the data section of the event for the presence of both 'MsMpEng.exe' and 'mpengine.dll'. This combination of criteria is indicative of the Microsoft Malware Protection Engine encountering issues, which could be due to an attack.\n\nBe mindful that there are scenarios where MsMpEng.exe might crash which are not related to malicious activities. A known benign scenario includes the crash occurring when the \"C:\\\" partition on the system is full. Such instances should be considered when evaluating the alerts to reduce false positives.\n\nThis detection strategy is associated with tactics and techniques that involve impacts on system services and processes, commonly linked with the disruption of security features on a host. Monitoring for and analyzing these specific log details are critical steps in identifying and mitigating potential threats targeting the malware protection capabilities of Windows systems."
    }
  },
  {
    "instruction": "Please help me detect the following: enabling TurnOffCheck which can be used to bypass defense of MSDT Follina vulnerability",
    "context": "",
    "output": "Sure!\nIn order to detect enabling TurnOffCheck which can be used to bypass defense of MSDT Follina vulnerability, you should: Monitor Windows Registry settings modification events, specifically focusing on the 'SetValue' EventType. Look for changes aimed at the registry path ending with '\\Policies\\Microsoft\\Windows\\ScriptedDiagnostics\\TurnOffCheck'. The modification of interest involves setting a DWORD value to '0x00000001'. It's crucial to be aware that legitimate administrator actions might also trigger such changes, so these should be considered as potential false positives. This detection operates under a medium threat level and aids in identifying tactics and techniques associated with bypassing security mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "enabling TurnOffCheck which can be used to bypass defense of MSDT Follina vulnerability",
      "answer": "In order to detect enabling TurnOffCheck which can be used to bypass defense of MSDT Follina vulnerability, you should: Monitor Windows Registry settings modification events, specifically focusing on the 'SetValue' EventType. Look for changes aimed at the registry path ending with '\\Policies\\Microsoft\\Windows\\ScriptedDiagnostics\\TurnOffCheck'. The modification of interest involves setting a DWORD value to '0x00000001'. It's crucial to be aware that legitimate administrator actions might also trigger such changes, so these should be considered as potential false positives. This detection operates under a medium threat level and aids in identifying tactics and techniques associated with bypassing security mechanisms."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of an Office application that points to a document that is located in a trusted location. Attackers often used this to avoid macro security and execute their malicious code.",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of an Office application that points to a document that is located in a trusted location, which attackers often use to avoid macro security and execute their malicious code, you should monitor process creation events on Windows systems. Specifically, check for processes started (children) from common user shells like Explorer.exe or Directory Opus (dopus.exe) that indicate a user-initiated action. Focus on the execution of Microsoft Office applications such as Excel (EXCEL.EXE), PowerPoint (POWERPNT.EXE), and Word (WINWORD.exe), including their respective original file names (Excel.exe, POWERPNT.EXE, WinWord.exe).\n\nIt is important to examine the command line paths used to launch these applications, ensuring they originate from well-known, trusted locations such as various default Microsoft Office Templates directories under `\\AppData\\Roaming\\Microsoft\\` and `\\Microsoft Office\\` (both x86 and root directories). This verification helps in identifying processes that are trying to execute code from what appears to be legitimate, trusted locations\u2014a common technique used by attackers to bypass macro security features.\n\nHowever, to reduce false positives and avoid flagging benign user activities, such as opening legitimate template files, exclude command lines that end with typical template file extensions like `.dotx` (Word), `.xltx` (Excel), and `.potx` (PowerPoint). Paying attention to these details enhances the detection accuracy of potential malicious activities exploiting trusted locations to execute harmful code, while minimizing the chances of misidentifying normal user behavior as suspicious.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of an Office application that points to a document that is located in a trusted location. Attackers often used this to avoid macro security and execute their malicious code.",
      "answer": "In order to detect the execution of an Office application that points to a document that is located in a trusted location, which attackers often use to avoid macro security and execute their malicious code, you should monitor process creation events on Windows systems. Specifically, check for processes started (children) from common user shells like Explorer.exe or Directory Opus (dopus.exe) that indicate a user-initiated action. Focus on the execution of Microsoft Office applications such as Excel (EXCEL.EXE), PowerPoint (POWERPNT.EXE), and Word (WINWORD.exe), including their respective original file names (Excel.exe, POWERPNT.EXE, WinWord.exe).\n\nIt is important to examine the command line paths used to launch these applications, ensuring they originate from well-known, trusted locations such as various default Microsoft Office Templates directories under `\\AppData\\Roaming\\Microsoft\\` and `\\Microsoft Office\\` (both x86 and root directories). This verification helps in identifying processes that are trying to execute code from what appears to be legitimate, trusted locations\u2014a common technique used by attackers to bypass macro security features.\n\nHowever, to reduce false positives and avoid flagging benign user activities, such as opening legitimate template files, exclude command lines that end with typical template file extensions like `.dotx` (Word), `.xltx` (Excel), and `.potx` (PowerPoint). Paying attention to these details enhances the detection accuracy of potential malicious activities exploiting trusted locations to execute harmful code, while minimizing the chances of misidentifying normal user behavior as suspicious."
    }
  },
  {
    "instruction": "Explain how should I detect the following: LDP failures which may be indicative of brute force attacks to manipulate MPLS labels",
    "context": "",
    "output": "In order to detect LDP failures which may be indicative of brute force attacks to manipulate MPLS labels, you should: monitor Cisco's Label Distribution Protocol (LDP) service logs for specific incidents. Focus on analyzing log data that captures the LDP as the protocol being utilized. Look for log entries containing keywords such as \"SOCKET_TCP_PACKET_MD5_AUTHEN_FAIL\" or \"TCPMD5AuthenFail,\" which indicate failed attempts at TCP MD5 authentication. These failures can be essential indicators of malicious attempts to brute-force MPLS label manipulation. Ensure that the TCP connection local and remote addresses (`tcpConnLocalAddress` and `tcpConnRemAddress`) are also scrutinized to identify the source and target of the suspicious activity. While false positives are rare and mainly attributed to misconfigurations, maintaining vigilance in tracking these specific indicators can help preempt and mitigate potential attacks targeting the MPLS infrastructure.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "LDP failures which may be indicative of brute force attacks to manipulate MPLS labels",
      "answer": "In order to detect LDP failures which may be indicative of brute force attacks to manipulate MPLS labels, you should: monitor Cisco's Label Distribution Protocol (LDP) service logs for specific incidents. Focus on analyzing log data that captures the LDP as the protocol being utilized. Look for log entries containing keywords such as \"SOCKET_TCP_PACKET_MD5_AUTHEN_FAIL\" or \"TCPMD5AuthenFail,\" which indicate failed attempts at TCP MD5 authentication. These failures can be essential indicators of malicious attempts to brute-force MPLS label manipulation. Ensure that the TCP connection local and remote addresses (`tcpConnLocalAddress` and `tcpConnRemAddress`) are also scrutinized to identify the source and target of the suspicious activity. While false positives are rare and mainly attributed to misconfigurations, maintaining vigilance in tracking these specific indicators can help preempt and mitigate potential attacks targeting the MPLS infrastructure."
    }
  },
  {
    "instruction": "How to detect: creation of a new office macro files on the systems via an application (browser, mail client).",
    "context": "",
    "output": "In order to detect the creation of new office macro files on the systems via an application (browser, mail client), you should: Monitor file events on Windows systems focusing on the processes associated with email clients and browsers, such as RuntimeBroker.exe, outlook.exe, thunderbird.exe for email clients, and various common browsers including brave.exe, chrome.exe, firefox.exe, among others. Specifically, this involves tracking the creation of files with macro-enabled extensions like .docm, .dotm, .xlsm, .xltm, .potm, .pptm. It also includes detecting these macro files when they contain specific markers indicating they were downloaded from the internet (e.g., '.docm:Zone'). However, it is important to remember that not all detections are malicious. Legitimate macro files downloaded from the internet or sent as email attachments can trigger false positives. The overall risk level associated with these detections is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new office macro files on the systems via an application (browser, mail client).",
      "answer": "In order to detect the creation of new office macro files on the systems via an application (browser, mail client), you should: Monitor file events on Windows systems focusing on the processes associated with email clients and browsers, such as RuntimeBroker.exe, outlook.exe, thunderbird.exe for email clients, and various common browsers including brave.exe, chrome.exe, firefox.exe, among others. Specifically, this involves tracking the creation of files with macro-enabled extensions like .docm, .dotm, .xlsm, .xltm, .potm, .pptm. It also includes detecting these macro files when they contain specific markers indicating they were downloaded from the internet (e.g., '.docm:Zone'). However, it is important to remember that not all detections are malicious. Legitimate macro files downloaded from the internet or sent as email attachments can trigger false positives. The overall risk level associated with these detections is considered medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: VPN Tunnel Modified or Deleted in Google Cloud.",
    "context": "",
    "output": "Certainly!\n\nIn order to identify when a VPN Tunnel Modified or Deleted in Google Cloud, you should: Monitor logs from Google Cloud Platform, specifically focusing on the audit service logs. Watch for instances where the audit method names include \"compute.vpnTunnels.insert\" and \"compute.vpnTunnels.delete\" as these actions indicate modifications to or deletions of VPN tunnels within the Google Cloud environment. Recognizing these operations is essential for detecting potentially unauthorized changes that could impact network security configurations. \n\nIt is important to be aware that there are legitimate reasons for these operations, such as a system administrator performing routine or necessary maintenance. Therefore, when these activities are detected, verify that the changes are being made by authorized individuals by checking the user identity, the user agent, and the hostname involved in the operations. \n\nAny modifications or deletions by unfamiliar users should be thoroughly investigated to determine if they represent malicious activity or unauthorized access. If certain activities are known to be part of standard operations and are causing unnecessary alerts, they can be configured to be exempt from monitoring to reduce false positives. This cautious approach aims to balance security monitoring with operational efficiency, maintaining vigilance for unauthorized changes while accommodating legitimate administrative actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "VPN Tunnel Modified or Deleted in Google Cloud.",
      "answer": "In order to identify when a VPN Tunnel Modified or Deleted in Google Cloud, you should: Monitor logs from Google Cloud Platform, specifically focusing on the audit service logs. Watch for instances where the audit method names include \"compute.vpnTunnels.insert\" and \"compute.vpnTunnels.delete\" as these actions indicate modifications to or deletions of VPN tunnels within the Google Cloud environment. Recognizing these operations is essential for detecting potentially unauthorized changes that could impact network security configurations. \n\nIt is important to be aware that there are legitimate reasons for these operations, such as a system administrator performing routine or necessary maintenance. Therefore, when these activities are detected, verify that the changes are being made by authorized individuals by checking the user identity, the user agent, and the hostname involved in the operations. \n\nAny modifications or deletions by unfamiliar users should be thoroughly investigated to determine if they represent malicious activity or unauthorized access. If certain activities are known to be part of standard operations and are causing unnecessary alerts, they can be configured to be exempt from monitoring to reduce false positives. This cautious approach aims to balance security monitoring with operational efficiency, maintaining vigilance for unauthorized changes while accommodating legitimate administrative actions."
    }
  },
  {
    "instruction": "How can I detect: Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE privileges",
    "context": "",
    "output": "In order to detect child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE privileges, you should monitor Windows process creation events. Focus specifically on processes where the parent process runs under either the 'NT AUTHORITY\\NETWORK SERVICE' or 'NT AUTHORITY\\LOCAL SERVICE' accounts, and the child process runs under the 'NT AUTHORITY\\SYSTEM' account. However, it's important to exclude any instances where the child process is 'rundll32.exe' involving the command line containing 'DavSetCookie,' as these are known exceptions. This approach aims to identify potential malicious activities where higher privilege processes are initiated by lower privilege services, a technique often exploited by attackers to escalate privileges or maintain persistence. The detection relies on enriched Sysmon events with additional information about the processes, particularly in regard to parent and user accounts involved. Be aware that some legitimate activities might trigger this detection, so unknown false positives can occur. Enhance this monitoring strategy by using the recommended enrichments for Sysmon event ID 1, to provide a more comprehensive context around the creation of new processes on Windows systems. This detection mechanism is categorized under high severity due to the implications of a successful attack exploiting this behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE privileges",
      "answer": "In order to detect child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE privileges, you should monitor Windows process creation events. Focus specifically on processes where the parent process runs under either the 'NT AUTHORITY\\NETWORK SERVICE' or 'NT AUTHORITY\\LOCAL SERVICE' accounts, and the child process runs under the 'NT AUTHORITY\\SYSTEM' account. However, it's important to exclude any instances where the child process is 'rundll32.exe' involving the command line containing 'DavSetCookie,' as these are known exceptions. This approach aims to identify potential malicious activities where higher privilege processes are initiated by lower privilege services, a technique often exploited by attackers to escalate privileges or maintain persistence. The detection relies on enriched Sysmon events with additional information about the processes, particularly in regard to parent and user accounts involved. Be aware that some legitimate activities might trigger this detection, so unknown false positives can occur. Enhance this monitoring strategy by using the recommended enrichments for Sysmon event ID 1, to provide a more comprehensive context around the creation of new processes on Windows systems. This detection mechanism is categorized under high severity due to the implications of a successful attack exploiting this behavior."
    }
  },
  {
    "instruction": "Please help me detect the following: an executable, which is not an internet browser, making DNS request to legit popular websites, which were seen to be used as dead drop resolvers in previous attacks.",
    "context": "",
    "output": "Sure!\nIn order to detect an executable, which is not an internet browser, making DNS request to legit popular websites, which were seen to be used as dead drop resolvers in previous attacks, you should monitor network connections on Windows products for instances where an executable initiates a connection to certain popular and legitimate websites. These websites include cloudflare.com, githubusercontent.com, cdn.discordapp.com, docs.google.com, facebook.com, feeds.rapidfeeds.com, fotolog.com, imgur.com, livejournal.com, paste.ee, pastebin.com, pastebin.pl, pastetext.net, reddit.com, steamcommunity.com, technet.microsoft.com, twitter.com, and youtube.com. It's crucial to exclude connections initiated by common internet browsers such as Brave, Chrome, Firefox, Internet Explorer, Maxthon, Edge, Opera, Safari, SeaMonkey, Vivaldi, and Whale. Additionally, exceptions should be made for specific non-browser applications like Microsoft Defender, Windows Defender Advanced Threat Protection Service, PRTG Network Monitor, and Qlik.com app, which may legitimately contact these domains. The detection is determined by observing network connections that are neither initiated by identified browser executables nor the listed exceptions. This method helps in identifying suspicious activities indicative of malware or other malicious executables using legitimate websites for command and control or data exfiltration purposes, while reducing false positives by excluding known and expected behaviors from internet browsers and selected non-browser applications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an executable, which is not an internet browser, making DNS request to legit popular websites, which were seen to be used as dead drop resolvers in previous attacks.",
      "answer": "In order to detect an executable, which is not an internet browser, making DNS request to legit popular websites, which were seen to be used as dead drop resolvers in previous attacks, you should monitor network connections on Windows products for instances where an executable initiates a connection to certain popular and legitimate websites. These websites include cloudflare.com, githubusercontent.com, cdn.discordapp.com, docs.google.com, facebook.com, feeds.rapidfeeds.com, fotolog.com, imgur.com, livejournal.com, paste.ee, pastebin.com, pastebin.pl, pastetext.net, reddit.com, steamcommunity.com, technet.microsoft.com, twitter.com, and youtube.com. It's crucial to exclude connections initiated by common internet browsers such as Brave, Chrome, Firefox, Internet Explorer, Maxthon, Edge, Opera, Safari, SeaMonkey, Vivaldi, and Whale. Additionally, exceptions should be made for specific non-browser applications like Microsoft Defender, Windows Defender Advanced Threat Protection Service, PRTG Network Monitor, and Qlik.com app, which may legitimately contact these domains. The detection is determined by observing network connections that are neither initiated by identified browser executables nor the listed exceptions. This method helps in identifying suspicious activities indicative of malware or other malicious executables using legitimate websites for command and control or data exfiltration purposes, while reducing false positives by excluding known and expected behaviors from internet browsers and selected non-browser applications."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when the MSSQL \"xp_cmdshell\" stored procedure setting is changed",
    "context": "",
    "output": "In order to detect when the MSSQL \"xp_cmdshell\" stored procedure setting is changed, you should monitor application logs from Windows systems, specifically looking for events generated by the MSSQLSERVER provider. Focus on entries with EventID 15457, which indicate changes in server configurations. One of the critical aspects to watch for within these events is any reference to \"xp_cmdshell\". This text string suggests modifications to the enabled status of the `xp_cmdshell` stored procedure, a powerful feature that allows execution of command line statements from the SQL environment. \n\nIt's essential to be aware of both enabling and disabling actions regarding `xp_cmdshell`, as the detection mechanism will trigger on changes in either direction. This broad detection range is due to the consideration that manipulating this setting, in any capacity, can be indicative of malicious activity, specifically aiming to execute commands or scripts for various attacks. Yet, remember that there will be occasions where these modifications are legitimate, stemming from administrative tasks or maintenance requirements. \n\nThe potential for false positives exists, particularly in environments where changes to `xp_cmdshell` settings are part of regular operations or security controls. Detection should be considered high importance due to the significant security implications associated with the misuse of `xp_cmdshell`. Being vigilant about changes to this setting is crucial in identifying and mitigating threats that leverage direct access to the operating system's command shell from SQL Server, reflecting tactics and techniques such as Execution and Command and Scripting Interpreter within security frameworks like MITRE ATT&CK.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when the MSSQL \"xp_cmdshell\" stored procedure setting is changed",
      "answer": "In order to detect when the MSSQL \"xp_cmdshell\" stored procedure setting is changed, you should monitor application logs from Windows systems, specifically looking for events generated by the MSSQLSERVER provider. Focus on entries with EventID 15457, which indicate changes in server configurations. One of the critical aspects to watch for within these events is any reference to \"xp_cmdshell\". This text string suggests modifications to the enabled status of the `xp_cmdshell` stored procedure, a powerful feature that allows execution of command line statements from the SQL environment. \n\nIt's essential to be aware of both enabling and disabling actions regarding `xp_cmdshell`, as the detection mechanism will trigger on changes in either direction. This broad detection range is due to the consideration that manipulating this setting, in any capacity, can be indicative of malicious activity, specifically aiming to execute commands or scripts for various attacks. Yet, remember that there will be occasions where these modifications are legitimate, stemming from administrative tasks or maintenance requirements. \n\nThe potential for false positives exists, particularly in environments where changes to `xp_cmdshell` settings are part of regular operations or security controls. Detection should be considered high importance due to the significant security implications associated with the misuse of `xp_cmdshell`. Being vigilant about changes to this setting is crucial in identifying and mitigating threats that leverage direct access to the operating system's command shell from SQL Server, reflecting tactics and techniques such as Execution and Command and Scripting Interpreter within security frameworks like MITRE ATT&CK."
    }
  },
  {
    "instruction": "How to detect: usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services",
    "context": "",
    "output": "In order to detect the usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services, you should: focus on monitoring process creation events within Linux systems. Specifically, watch for processes that are being initiated whose image names end with '/service', '/systemctl', or '/chkconfig'. Furthermore, scrutinize the command line arguments of these processes for the presence of strings such as 'stop' or 'disable', which indicate an attempt to halt or deactivate certain system services or tools. Be mindful, however, that such activities could also originate from legitimate administration tasks. This detection operates at a medium severity level, suggesting a balanced approach to alerting to avoid overwhelming security personnel with false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services",
      "answer": "In order to detect the usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services, you should: focus on monitoring process creation events within Linux systems. Specifically, watch for processes that are being initiated whose image names end with '/service', '/systemctl', or '/chkconfig'. Furthermore, scrutinize the command line arguments of these processes for the presence of strings such as 'stop' or 'disable', which indicate an attempt to halt or deactivate certain system services or tools. Be mindful, however, that such activities could also originate from legitimate administration tasks. This detection operates at a medium severity level, suggesting a balanced approach to alerting to avoid overwhelming security personnel with false positives."
    }
  },
  {
    "instruction": "How can I detect: suspicious scheduled task creation events. Based on attributes such as paths, commands line flags, etc.",
    "context": "",
    "output": "In order to detect suspicious scheduled task creation events, based on attributes such as paths, commands line flags, etc., you should: Analyze Windows security logs, specifically looking for events with a focus on scheduled tasks. The detection requires that the Advanced Audit Policy setting for Object Access > Audit Other Object Access Events is enabled. This allows for the capture of relevant data.\n\nPay particular attention to event ID 4698, which is indicative of a scheduled task being created. Also, scrutinize the content within the TaskContent field for certain paths and commands that are commonly leveraged by attackers. This includes paths such as `\\AppData\\Local\\Temp\\`, `\\AppData\\Roaming\\`, `\\Users\\Public\\`, `\\WINDOWS\\Temp\\`, `C:\\Temp\\`, `\\Desktop\\`, `\\Downloads\\`, and `\\Temporary Internet`, as well as others that might suggest the task is being set up in locations commonly used for malicious activities.\n\nAdditionally, be on the lookout for commands within the task content that are often used in attacks, including `regsvr32`, `rundll32`, `cmd.exe`, `cmd`, commands that start with `<Arguments>/c `, `<Arguments>/k `, and `<Arguments>/r `, along with `powershell`, `pwsh`, `mshta`, `wscript`, `cscript`, `certutil`, `bitsadmin`, `bash.exe`, `bash `, `scrcons`, `wmic`, `wmic.exe`, `forfiles`, `scriptrunner`, and `hh.exe`. These commands in the context of a scheduled task could indicate an attempt to execute malicious activities on the system.\n\nThis analysis should consider the combined appearance of suspicious paths and commands within the scheduled task configuration as an indicator of compromise or an active attack. Be aware that there might be unknown false positives, and the alert level for these detections is considered high due to the potential impact of the activities involved.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious scheduled task creation events. Based on attributes such as paths, commands line flags, etc.",
      "answer": "In order to detect suspicious scheduled task creation events, based on attributes such as paths, commands line flags, etc., you should: Analyze Windows security logs, specifically looking for events with a focus on scheduled tasks. The detection requires that the Advanced Audit Policy setting for Object Access > Audit Other Object Access Events is enabled. This allows for the capture of relevant data.\n\nPay particular attention to event ID 4698, which is indicative of a scheduled task being created. Also, scrutinize the content within the TaskContent field for certain paths and commands that are commonly leveraged by attackers. This includes paths such as `\\AppData\\Local\\Temp\\`, `\\AppData\\Roaming\\`, `\\Users\\Public\\`, `\\WINDOWS\\Temp\\`, `C:\\Temp\\`, `\\Desktop\\`, `\\Downloads\\`, and `\\Temporary Internet`, as well as others that might suggest the task is being set up in locations commonly used for malicious activities.\n\nAdditionally, be on the lookout for commands within the task content that are often used in attacks, including `regsvr32`, `rundll32`, `cmd.exe`, `cmd`, commands that start with `<Arguments>/c `, `<Arguments>/k `, and `<Arguments>/r `, along with `powershell`, `pwsh`, `mshta`, `wscript`, `cscript`, `certutil`, `bitsadmin`, `bash.exe`, `bash `, `scrcons`, `wmic`, `wmic.exe`, `forfiles`, `scriptrunner`, and `hh.exe`. These commands in the context of a scheduled task could indicate an attempt to execute malicious activities on the system.\n\nThis analysis should consider the combined appearance of suspicious paths and commands within the scheduled task configuration as an indicator of compromise or an active attack. Be aware that there might be unknown false positives, and the alert level for these detections is considered high due to the potential impact of the activities involved."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of attrib with the \"+s\" option to set scripts or executables located in suspicious locations as system files to hide them from users and make them unable to be deleted with simple rights. The rule limits the search to specific extensions and directories to avoid FPs\n",
    "context": "",
    "output": "Sure!\nIn order to detect the usage of attrib with the \"+s\" option to set scripts or executables located in suspicious locations as system files to hide them from users and make them unable to be deleted with simple rights, you should monitor the creation of processes on Windows systems. Specifically, look for instances where the attrib.exe utility is executed, as indicated either by the image name ending with '\\attrib.exe' or the original filename being 'ATTRIB.EXE'. Pay close attention to the command line arguments to identify the use of the '+s' option, which denotes an attempt to change the file attribute to a system file. Additionally, scrutinize the command line for references to specific directories that are commonly targeted for such activities, including user public folders, application data locations, temporary files directories, and download folders. Be wary of attempts to manipulate files with extensions that are commonly associated with scripts and executables, such as '.bat', '.dll', '.exe', '.hta', '.ps1', '.vbe', and '.vbs'. Exclude from detection any commands that are specifically running an executable from the '\\Windows\\TEMP\\' directory to minimize false positives. This approach is designed to pinpoint suspicious use of the attrib command which can be indicative of an attempt to conceal malware or unauthorized scripts by marking them as system files, aligning with tactics and techniques like Defense Evasion and Persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of attrib with the \"+s\" option to set scripts or executables located in suspicious locations as system files to hide them from users and make them unable to be deleted with simple rights. The rule limits the search to specific extensions and directories to avoid FPs\n",
      "answer": "In order to detect the usage of attrib with the \"+s\" option to set scripts or executables located in suspicious locations as system files to hide them from users and make them unable to be deleted with simple rights, you should monitor the creation of processes on Windows systems. Specifically, look for instances where the attrib.exe utility is executed, as indicated either by the image name ending with '\\attrib.exe' or the original filename being 'ATTRIB.EXE'. Pay close attention to the command line arguments to identify the use of the '+s' option, which denotes an attempt to change the file attribute to a system file. Additionally, scrutinize the command line for references to specific directories that are commonly targeted for such activities, including user public folders, application data locations, temporary files directories, and download folders. Be wary of attempts to manipulate files with extensions that are commonly associated with scripts and executables, such as '.bat', '.dll', '.exe', '.hta', '.ps1', '.vbe', and '.vbs'. Exclude from detection any commands that are specifically running an executable from the '\\Windows\\TEMP\\' directory to minimize false positives. This approach is designed to pinpoint suspicious use of the attrib command which can be indicative of an attempt to conceal malware or unauthorized scripts by marking them as system files, aligning with tactics and techniques like Defense Evasion and Persistence."
    }
  },
  {
    "instruction": "Please help me detect the following: Number of VM creations or deployment activities occur in Azure via the azureactivity log.",
    "context": "",
    "output": "Sure!\nIn order to detect a number of VM creations or deployment activities occurring in Azure via the azureactivity log, you should monitor Azure Activity logs for specific activities that involve changes to virtual machines or deployments. This involves looking for any logs containing the keywords \"Microsoft.Compute/virtualMachines/write\" or \"Microsoft.Resources/deployments/write\", which signify that a virtual machine has been created or modified, or that a deployment has occurred. When such activities are identified from the logs, it can indicate potential unauthorized or malicious activities related to creating or deploying virtual machines within Azure. It is important to consider that there might be legitimate reasons for these activities (tagged as valid changes), so any detection should be followed by a review to ascertain the context and legitimacy of the activity. The severity level for these kinds of detections is considered medium, indicating that while they are of concern, they may not always represent critical security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Number of VM creations or deployment activities occur in Azure via the azureactivity log.",
      "answer": "In order to detect a number of VM creations or deployment activities occurring in Azure via the azureactivity log, you should monitor Azure Activity logs for specific activities that involve changes to virtual machines or deployments. This involves looking for any logs containing the keywords \"Microsoft.Compute/virtualMachines/write\" or \"Microsoft.Resources/deployments/write\", which signify that a virtual machine has been created or modified, or that a deployment has occurred. When such activities are identified from the logs, it can indicate potential unauthorized or malicious activities related to creating or deploying virtual machines within Azure. It is important to consider that there might be legitimate reasons for these activities (tagged as valid changes), so any detection should be followed by a review to ascertain the context and legitimacy of the activity. The severity level for these kinds of detections is considered medium, indicating that while they are of concern, they may not always represent critical security threats."
    }
  },
  {
    "instruction": "How can I detect: calls to cmdlets inside of PowerShell scripts that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.",
    "context": "",
    "output": "In order to detect calls to cmdlets inside of PowerShell scripts that are used to export certificates from the local certificate store, which threat actors were seen abusing this to steal private keys from compromised machines, you should: Monitor Windows PowerShell script logs, specifically looking for any script activity that involves the use of the cmdlets 'Export-PfxCertificate' or 'Export-Certificate'. This requires that Script Block Logging is enabled on the system to capture the relevant script execution details. It's important to note that there could be legitimate uses of these cmdlets by administrators for exporting certificates; therefore, the detection strategy should allow for an optional filter to exclude cases where the export is part of a module export, identifiable when 'CmdletsToExport = @(' is found in the script text. This should form part of a balanced approach to identifying potentially malicious activity while minimizing false positives, given the detection has been set at a medium level of confidence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "calls to cmdlets inside of PowerShell scripts that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.",
      "answer": "In order to detect calls to cmdlets inside of PowerShell scripts that are used to export certificates from the local certificate store, which threat actors were seen abusing this to steal private keys from compromised machines, you should: Monitor Windows PowerShell script logs, specifically looking for any script activity that involves the use of the cmdlets 'Export-PfxCertificate' or 'Export-Certificate'. This requires that Script Block Logging is enabled on the system to capture the relevant script execution details. It's important to note that there could be legitimate uses of these cmdlets by administrators for exporting certificates; therefore, the detection strategy should allow for an optional filter to exclude cases where the export is part of a module export, identifiable when 'CmdletsToExport = @(' is found in the script text. This should form part of a balanced approach to identifying potentially malicious activity while minimizing false positives, given the detection has been set at a medium level of confidence."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of the LiveKD driver, which is used for live kernel debugging",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of the LiveKD driver, which is used for live kernel debugging, you should: Focus on monitoring file events in Windows environments, specifically watching for the creation of a file named \"C:\\Windows\\System32\\drivers\\LiveKdD.SYS.\" Additionally, the execution of processes that end with '\\livekd.exe' or '\\livek64.exe' should be tracked. This is crucial because such activities are indicators of the use of LiveKD, a tool designed for live kernel debugging. Be aware that genuine debugging efforts using LiveKD will also match these criteria, therefore, such legitimate usage should be considered as potential false positives. This monitoring is categorized under a medium severity level due to its potential implications for live kernel debugging activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of the LiveKD driver, which is used for live kernel debugging",
      "answer": "In order to detect the creation of the LiveKD driver, which is used for live kernel debugging, you should: Focus on monitoring file events in Windows environments, specifically watching for the creation of a file named \"C:\\Windows\\System32\\drivers\\LiveKdD.SYS.\" Additionally, the execution of processes that end with '\\livekd.exe' or '\\livek64.exe' should be tracked. This is crucial because such activities are indicators of the use of LiveKD, a tool designed for live kernel debugging. Be aware that genuine debugging efforts using LiveKD will also match these criteria, therefore, such legitimate usage should be considered as potential false positives. This monitoring is categorized under a medium severity level due to its potential implications for live kernel debugging activities."
    }
  },
  {
    "instruction": "Please help me detect the following: Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe",
    "context": "",
    "output": "Sure!\nIn order to detect executables in the Downloads folder likely created with py2exe and lacking FileVersion, Description, Product, and Company metadata, you should focus on monitoring Windows process creation logs. Look specifically for instances where an executable in the Downloads folder is initiated but lacks details in its metadata fields such as Description, FileVersion, Product, or Company. This means any process creation event where the executable's metadata fields are queried but return questionable or empty values (represented by '?') should be flagged. This detection effort concentrates on the 'Image' field containing a path that includes '\\Downloads\\', indicating the executable was launched from the Downloads directory.\n\nIt is essential to capture the command line used to initiate the process and, if available, the parent process's command line. This information can be crucial for further investigation, especially in understanding the context or the chain of events leading to the execution of the suspicious file.\n\nBe aware of potential false positives, as not all executables lacking these metadata details and located in the Downloads folder are malicious. The alert level for this type of detection is set to medium, indicating a balanced approach between sensitivity and the potential for false alarms.\n\nMonitoring should be attuned to these specifics to effectively identify possibly malicious activity, especially activities that align with tactics and techniques associated with delivery and execution phases of an attack, without directly referencing predefined attack patterns. This approach aims to capture a broad spectrum of potentially malicious behaviors tied to executables that might have been compiled using utilities like py2exe, which could evade basic metadata analysis.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe",
      "answer": "In order to detect executables in the Downloads folder likely created with py2exe and lacking FileVersion, Description, Product, and Company metadata, you should focus on monitoring Windows process creation logs. Look specifically for instances where an executable in the Downloads folder is initiated but lacks details in its metadata fields such as Description, FileVersion, Product, or Company. This means any process creation event where the executable's metadata fields are queried but return questionable or empty values (represented by '?') should be flagged. This detection effort concentrates on the 'Image' field containing a path that includes '\\Downloads\\', indicating the executable was launched from the Downloads directory.\n\nIt is essential to capture the command line used to initiate the process and, if available, the parent process's command line. This information can be crucial for further investigation, especially in understanding the context or the chain of events leading to the execution of the suspicious file.\n\nBe aware of potential false positives, as not all executables lacking these metadata details and located in the Downloads folder are malicious. The alert level for this type of detection is set to medium, indicating a balanced approach between sensitivity and the potential for false alarms.\n\nMonitoring should be attuned to these specifics to effectively identify possibly malicious activity, especially activities that align with tactics and techniques associated with delivery and execution phases of an attack, without directly referencing predefined attack patterns. This approach aims to capture a broad spectrum of potentially malicious behaviors tied to executables that might have been compiled using utilities like py2exe, which could evade basic metadata analysis."
    }
  },
  {
    "instruction": "Can you explain how to detect: Transferring files with well-known filenames (sensitive files with credential data) using network shares",
    "context": "",
    "output": "Certainly!\n\nIn order to detect activities involving transferring files with well-known filenames (sensitive files with credential data) using network shares, you should monitor SMB (Server Message Block) file share activities on systems using Zeek, focusing on file names that are commonly associated with sensitive information. These filenames include system and security files that attackers might target to obtain credential data, such as 'mimidrv', 'lsass', 'windows\\minidump\\', 'hiberfil', 'sqldmpr', 'sam', 'ntds.dit', and 'security'. A detection mechanism should be in place to flag activities involving these files when they are being accessed or transferred over the network.\n\nIt is essential to consider that there are legitimate reasons why an administrator might transfer such files during routine administration tasks. Therefore, while monitoring for these file name patterns, it is necessary to differentiate between malicious activities and legitimate administrative operations to reduce false positives. The detection level for this activity is medium, indicating that while it is not uncommon, careful analysis is recommended to accurately distinguish between normal and suspicious activities. Identifying such transfers can be pivotal in early detection of credential theft or other preliminary steps by attackers leveraging SMB file shares.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Transferring files with well-known filenames (sensitive files with credential data) using network shares",
      "answer": "In order to detect activities involving transferring files with well-known filenames (sensitive files with credential data) using network shares, you should monitor SMB (Server Message Block) file share activities on systems using Zeek, focusing on file names that are commonly associated with sensitive information. These filenames include system and security files that attackers might target to obtain credential data, such as 'mimidrv', 'lsass', 'windows\\minidump\\', 'hiberfil', 'sqldmpr', 'sam', 'ntds.dit', and 'security'. A detection mechanism should be in place to flag activities involving these files when they are being accessed or transferred over the network.\n\nIt is essential to consider that there are legitimate reasons why an administrator might transfer such files during routine administration tasks. Therefore, while monitoring for these file name patterns, it is necessary to differentiate between malicious activities and legitimate administrative operations to reduce false positives. The detection level for this activity is medium, indicating that while it is not uncommon, careful analysis is recommended to accurately distinguish between normal and suspicious activities. Identifying such transfers can be pivotal in early detection of credential theft or other preliminary steps by attackers leveraging SMB file shares."
    }
  },
  {
    "instruction": "How can I detect: command line usage of \"findstr\" to search for the \"passwords\" keyword in a variety of different languages",
    "context": "",
    "output": "In order to detect command line usage of \"findstr\" to search for the \"passwords\" keyword in a variety of different languages, you should: Focus on monitoring process creation activities within Windows operating systems. Specifically, look for instances where the process \"findstr.exe\" is initiated, which can also be identified through its original filename \"FINDSTR.EXE\". Additionally, scrutinize the command line inputs associated with these processes for occurrences of words that denote \"password\" in several languages, including Spanish (\"contrase\u00f1a\"), Polish (\"has\u0142o\"), Czech (\"heslo\"), Italian (\"parola\"), French (\"passe\"), German and English (\"passw\"), Portuguese (\"senha\"), Swedish (\"senord\"), and Cantonese (\"\u5bc6\u78bc\"). This comprehensive detection approach is crucial for identifying attempts to misuse the \"findstr\" utility in order to search for sensitive information, such as passwords, within files on a Windows system. The level of concern for these findings is considered medium, although it's important to note that there might be instances where such activity is legitimate, and thus could lead to unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "command line usage of \"findstr\" to search for the \"passwords\" keyword in a variety of different languages",
      "answer": "In order to detect command line usage of \"findstr\" to search for the \"passwords\" keyword in a variety of different languages, you should: Focus on monitoring process creation activities within Windows operating systems. Specifically, look for instances where the process \"findstr.exe\" is initiated, which can also be identified through its original filename \"FINDSTR.EXE\". Additionally, scrutinize the command line inputs associated with these processes for occurrences of words that denote \"password\" in several languages, including Spanish (\"contrase\u00f1a\"), Polish (\"has\u0142o\"), Czech (\"heslo\"), Italian (\"parola\"), French (\"passe\"), German and English (\"passw\"), Portuguese (\"senha\"), Swedish (\"senord\"), and Cantonese (\"\u5bc6\u78bc\"). This comprehensive detection approach is crucial for identifying attempts to misuse the \"findstr\" utility in order to search for sensitive information, such as passwords, within files on a Windows system. The level of concern for these findings is considered medium, although it's important to note that there might be instances where such activity is legitimate, and thus could lead to unknown false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: pattern of UAC Bypass via WSReset usable by default sysmon-config",
    "context": "",
    "output": "In order to detect the pattern of UAC Bypass via WSReset usable by default sysmon-config, you should monitor process creation events within Windows operating systems. Specifically, look for processes that end with the '\\wsreset.exe' in their image paths. This executable is particularly interesting as it is commonly involved in User Account Control (UAC) bypass techniques. The processes to pay close attention to are those running at High or System integrity levels, which indicates they have elevated privileges. It is essential to react swiftly to alerts regarding such activity given the high threat level, although it's important to note that the nature of false positives in this context is currently unknown. This approach aligns with understanding techniques related to privilege escalation and evasion tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass via WSReset usable by default sysmon-config",
      "answer": "In order to detect the pattern of UAC Bypass via WSReset usable by default sysmon-config, you should monitor process creation events within Windows operating systems. Specifically, look for processes that end with the '\\wsreset.exe' in their image paths. This executable is particularly interesting as it is commonly involved in User Account Control (UAC) bypass techniques. The processes to pay close attention to are those running at High or System integrity levels, which indicates they have elevated privileges. It is essential to react swiftly to alerts regarding such activity given the high threat level, although it's important to note that the nature of false positives in this context is currently unknown. This approach aligns with understanding techniques related to privilege escalation and evasion tactics."
    }
  },
  {
    "instruction": "Please help me detect the following: modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence.",
    "context": "",
    "output": "Sure!\nIn order to detect the modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence, you should: Monitor Windows process creation logs for specific command-line patterns that indicate such modifications. Look for usage of the 'sc' command in combination with 'config' and 'binpath=', or 'failure' and 'command=' which can be used to change service configurations or set up custom failure actions - a common technique for establishing persistence by ensuring a payload executes under certain conditions. Additionally, watch for the 'reg add' command modifying 'FailureCommand' or 'ImagePath' registry keys, as this also signifies attempts to alter service behavior or execution paths. Also, be vigilant for commands that involve file extensions typically associated with executable and script files, such as '.exe', '.dll', '.bat', '.cmd', '.ps', and others, as these often indicate the introduction or modification of files to carry malicious payloads. This detection focuses on medium-level threats and, while there might be legitimate uses, any matches should be investigated to confirm whether they are part of a potential attack involving persistence mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence.",
      "answer": "In order to detect the modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence, you should: Monitor Windows process creation logs for specific command-line patterns that indicate such modifications. Look for usage of the 'sc' command in combination with 'config' and 'binpath=', or 'failure' and 'command=' which can be used to change service configurations or set up custom failure actions - a common technique for establishing persistence by ensuring a payload executes under certain conditions. Additionally, watch for the 'reg add' command modifying 'FailureCommand' or 'ImagePath' registry keys, as this also signifies attempts to alter service behavior or execution paths. Also, be vigilant for commands that involve file extensions typically associated with executable and script files, such as '.exe', '.dll', '.bat', '.cmd', '.ps', and others, as these often indicate the introduction or modification of files to carry malicious payloads. This detection focuses on medium-level threats and, while there might be legitimate uses, any matches should be investigated to confirm whether they are part of a potential attack involving persistence mechanisms."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files",
    "context": "",
    "output": "In order to detect the execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files, you should: Monitor Windows process creation logs for any instances where the name of the created process ends with '\\PowerTool.exe' or '\\PowerTool64.exe', or where the original filename is explicitly 'PowerTool.exe'. These indicators are highly suggestive of the PowerTool utility being executed on the system, which is known for its capabilities to interact dangerously with processes and drivers. Given the nature of these activities, occurrences are unlikely to be false positives and should be treated with a high level of suspicion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files",
      "answer": "In order to detect the execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files, you should: Monitor Windows process creation logs for any instances where the name of the created process ends with '\\PowerTool.exe' or '\\PowerTool64.exe', or where the original filename is explicitly 'PowerTool.exe'. These indicators are highly suggestive of the PowerTool utility being executed on the system, which is known for its capabilities to interact dangerously with processes and drivers. Given the nature of these activities, occurrences are unlikely to be false positives and should be treated with a high level of suspicion."
    }
  },
  {
    "instruction": "Explain how should I detect the following: addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder",
    "context": "",
    "output": "In order to detect the addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder, you should: \n\nMonitor the Windows firewall activity, particularly on Windows 10 and 11 platforms. Keep an eye out for event IDs 2004 and 2071, which indicate that a new rule has been added to the Windows Defender Firewall exception list. Specifically, focus on applications added to the exception list that are located within the '\\AppData\\' or '\\Temp\\' directories. These locations are often used by malicious software because they are user-accessible and frequently overlooked by users and some security programs.\n\nIt's important to exclude from alerts any changes that involve a predefined list of applications that might normally operate from those directories for benign reasons. These include well-known applications such as Microsoft Teams, Keybase, Messenger, and Opera Browser if they are exactly located in their usual application paths like '\\AppData\\local\\microsoft\\teams\\current\\teams.exe' for Teams, '\\AppData\\Local\\Keybase\\keybase.exe' for Keybase, etc.\n\nYou need to be cautious and consider any legitimate application that runs from the AppData user directory as a potential false positive. Such applications may also add firewall exceptions as part of their normal operations. Therefore, while maintaining a high level of alertness for suspicious activity associated with these event IDs and paths, careful investigation of each incident is advised to distinguish between legitimate and malicious activities.\n\nThis monitoring approach targets tactics associated with Persistence and Privilege Escalation, where attackers attempt to maintain their presence on a system and potentially elevate their control by making their malicious software harder to block by adding it to the firewall's exception list.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder",
      "answer": "In order to detect the addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder, you should: \n\nMonitor the Windows firewall activity, particularly on Windows 10 and 11 platforms. Keep an eye out for event IDs 2004 and 2071, which indicate that a new rule has been added to the Windows Defender Firewall exception list. Specifically, focus on applications added to the exception list that are located within the '\\AppData\\' or '\\Temp\\' directories. These locations are often used by malicious software because they are user-accessible and frequently overlooked by users and some security programs.\n\nIt's important to exclude from alerts any changes that involve a predefined list of applications that might normally operate from those directories for benign reasons. These include well-known applications such as Microsoft Teams, Keybase, Messenger, and Opera Browser if they are exactly located in their usual application paths like '\\AppData\\local\\microsoft\\teams\\current\\teams.exe' for Teams, '\\AppData\\Local\\Keybase\\keybase.exe' for Keybase, etc.\n\nYou need to be cautious and consider any legitimate application that runs from the AppData user directory as a potential false positive. Such applications may also add firewall exceptions as part of their normal operations. Therefore, while maintaining a high level of alertness for suspicious activity associated with these event IDs and paths, careful investigation of each incident is advised to distinguish between legitimate and malicious activities.\n\nThis monitoring approach targets tactics associated with Persistence and Privilege Escalation, where attackers attempt to maintain their presence on a system and potentially elevate their control by making their malicious software harder to block by adding it to the firewall's exception list."
    }
  },
  {
    "instruction": "Can you explain how to detect: The attacker might use LOLBAS nltest.exe for discovery of domain controllers, domain trusts, parent domain and the current user permissions.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect an attacker using LOLBAS nltest.exe for the discovery of domain controllers, domain trusts, parent domain, and the current user permissions, you should monitor Windows security service logs for specific activities. Focus on identifying events with Event ID 4689, which indicates a process has exited, especially concerning the process nltest.exe. This utility, when part of a command execution that successfully completes (indicated by Status '0x0'), could be employed by an adversary to gather sensitive information about the network's architecture and access rights. Pay particular attention to the logs capturing the 'SubjectUserName' and 'SubjectDomainName' fields, as these will provide context about who initiated the process. Be aware that while high alert levels are justified due to the potential for malicious intent, there could be false positives such as red team activities or rare legitimate uses by administrators. Through this focused monitoring, malicious activities related to domain discovery can be effectively flagged and investigated.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The attacker might use LOLBAS nltest.exe for discovery of domain controllers, domain trusts, parent domain and the current user permissions.",
      "answer": "In order to detect an attacker using LOLBAS nltest.exe for the discovery of domain controllers, domain trusts, parent domain, and the current user permissions, you should monitor Windows security service logs for specific activities. Focus on identifying events with Event ID 4689, which indicates a process has exited, especially concerning the process nltest.exe. This utility, when part of a command execution that successfully completes (indicated by Status '0x0'), could be employed by an adversary to gather sensitive information about the network's architecture and access rights. Pay particular attention to the logs capturing the 'SubjectUserName' and 'SubjectDomainName' fields, as these will provide context about who initiated the process. Be aware that while high alert levels are justified due to the potential for malicious intent, there could be false positives such as red team activities or rare legitimate uses by administrators. Through this focused monitoring, malicious activities related to domain discovery can be effectively flagged and investigated."
    }
  },
  {
    "instruction": "How can I detect: loading of diagcab packages from a remote path, as seen in DogWalk vulnerability",
    "context": "",
    "output": "In order to detect loading of diagcab packages from a remote path, as seen in DogWalk vulnerability, you should focus on monitoring diagnosis-scripted services on Windows systems. Specifically, you should look for event ID 101, which may indicate an attempt to load a diagcab package. A critical sign of a potential attack involves the PackagePath field containing double backslashes, suggesting a remote path is being used, such as in cases where the path looks similar to '\\\\webdav-test.herokuapp.com@ssl\\DavWWWRoot\\package'. This pattern is a strong indicator of a potential exploitation attempt, given that diagcab packages should not typically be loaded from remote locations in a secure environment.\n\nHowever, it is important to note that not all instances flagged by these criteria are malicious. Legitimate scenarios may include packages hosted on known and authorized remote locations. Therefore, while the detection level is high, indicating a serious concern, careful analysis and verification of the context in which these diagcab packages are being loaded from remote paths are essential to reduce the risk of false positives.\n\nThis analysis connects to various tactics and techniques, emphasizing the importance of vigilance in monitoring and controlling diagnostic scripts and remote package loading activities as part of a comprehensive cybersecurity strategy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loading of diagcab packages from a remote path, as seen in DogWalk vulnerability",
      "answer": "In order to detect loading of diagcab packages from a remote path, as seen in DogWalk vulnerability, you should focus on monitoring diagnosis-scripted services on Windows systems. Specifically, you should look for event ID 101, which may indicate an attempt to load a diagcab package. A critical sign of a potential attack involves the PackagePath field containing double backslashes, suggesting a remote path is being used, such as in cases where the path looks similar to '\\\\webdav-test.herokuapp.com@ssl\\DavWWWRoot\\package'. This pattern is a strong indicator of a potential exploitation attempt, given that diagcab packages should not typically be loaded from remote locations in a secure environment.\n\nHowever, it is important to note that not all instances flagged by these criteria are malicious. Legitimate scenarios may include packages hosted on known and authorized remote locations. Therefore, while the detection level is high, indicating a serious concern, careful analysis and verification of the context in which these diagcab packages are being loaded from remote paths are essential to reduce the risk of false positives.\n\nThis analysis connects to various tactics and techniques, emphasizing the importance of vigilance in monitoring and controlling diagnostic scripts and remote package loading activities as part of a comprehensive cybersecurity strategy."
    }
  },
  {
    "instruction": "How to detect: Obfuscated use of stdin to execute PowerShell",
    "context": "",
    "output": "In order to detect obfuscated use of stdin to execute PowerShell, you should: Monitor Windows PowerShell script block logging for specific patterns indicating unusual use. The focus is on identifying execution scenarios where command prompt (`cmd`) is used in combination with PowerShell in a manner that suggests obfuscation. Specifically, look for script block texts that involve the `cmd` command with switches `/c` or `/r` followed closely (within five characters) by `powershell` and further include either the presence of `${input}`, `input`, or the `noexit` flag within a string. This pattern suggests an attempt to execute PowerShell commands or scripts in a way that might obscure their purpose or origin, representing a potential security risk. Such activities are tagged with tactics and techniques commonly associated with malicious actions, including \"Execution\" and \"Defense Evasion\". Monitoring for these specific script block texts requires that Script Block Logging be enabled on the Windows system, ensuring that detailed records of PowerShell execution are available for analysis. Be aware that there might be unknown scenarios that could trigger similar patterns without malicious intent; however, given the high level of concern, each detection should be investigated thoroughly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should: Monitor Windows PowerShell script block logging for specific patterns indicating unusual use. The focus is on identifying execution scenarios where command prompt (`cmd`) is used in combination with PowerShell in a manner that suggests obfuscation. Specifically, look for script block texts that involve the `cmd` command with switches `/c` or `/r` followed closely (within five characters) by `powershell` and further include either the presence of `${input}`, `input`, or the `noexit` flag within a string. This pattern suggests an attempt to execute PowerShell commands or scripts in a way that might obscure their purpose or origin, representing a potential security risk. Such activities are tagged with tactics and techniques commonly associated with malicious actions, including \"Execution\" and \"Defense Evasion\". Monitoring for these specific script block texts requires that Script Block Logging be enabled on the Windows system, ensuring that detailed records of PowerShell execution are available for analysis. Be aware that there might be unknown scenarios that could trigger similar patterns without malicious intent; however, given the high level of concern, each detection should be investigated thoroughly."
    }
  },
  {
    "instruction": "Please help me detect the following: image load events with revoked certificates by code integrity.",
    "context": "",
    "output": "Sure!\nIn order to detect image load events with revoked certificates by code integrity, you should monitor for specific events within the Windows Code Integrity operational logs. Look for occurrences when a revoked image is loaded into the system, identified by Event IDs 3032 and 3035. Event ID 3032 indicates that Code Integrity determined a revoked image is being loaded into the system, and it's recommended to check with the publisher if a new signed version of the image is available. Meanwhile, Event ID 3035 means that a revoked image is loaded but allowed because a kernel mode debugger is attached. These detections are critical as they help in identifying potential malicious or compromised software being executed on the system which could be a part of various attack techniques. The likelihood of these events being false positives is low, indicating a high level of confidence in these alerts when they trigger. Monitoring for these events can aid in defending against tactics such as Persistence, Privilege Escalation, and Defense Evasion where attackers might leverage revoked or untrusted certificates to execute malicious payloads.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "image load events with revoked certificates by code integrity.",
      "answer": "In order to detect image load events with revoked certificates by code integrity, you should monitor for specific events within the Windows Code Integrity operational logs. Look for occurrences when a revoked image is loaded into the system, identified by Event IDs 3032 and 3035. Event ID 3032 indicates that Code Integrity determined a revoked image is being loaded into the system, and it's recommended to check with the publisher if a new signed version of the image is available. Meanwhile, Event ID 3035 means that a revoked image is loaded but allowed because a kernel mode debugger is attached. These detections are critical as they help in identifying potential malicious or compromised software being executed on the system which could be a part of various attack techniques. The likelihood of these events being false positives is low, indicating a high level of confidence in these alerts when they trigger. Monitoring for these events can aid in defending against tactics such as Persistence, Privilege Escalation, and Defense Evasion where attackers might leverage revoked or untrusted certificates to execute malicious payloads."
    }
  },
  {
    "instruction": "How can I detect: modification of Outlook security setting to allow unprompted execution of macros.",
    "context": "",
    "output": "In order to detect the modification of Outlook security setting to allow unprompted execution of macros, you should: Monitor registry setting modifications on Windows systems, specifically focusing on events where a value change occurs (`SetValue` event type). The key area of interest is within the registry path ending with `\\Outlook\\Security\\Level`. Significant attention should be given to modifications where the details of the change include '0x00000001', which indicates that the security setting has been altered to enable all Macros. Such a configuration adjustment is essential to identify because it lowers the security threshold, potentially allowing malicious macros to run without any prompts to the user, thus posing a high risk. False positives for this kind of monitoring are deemed unlikely, indicating the specificity of the detection criteria is quite high and closely associated with malicious intent or significant security policy alterations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of Outlook security setting to allow unprompted execution of macros.",
      "answer": "In order to detect the modification of Outlook security setting to allow unprompted execution of macros, you should: Monitor registry setting modifications on Windows systems, specifically focusing on events where a value change occurs (`SetValue` event type). The key area of interest is within the registry path ending with `\\Outlook\\Security\\Level`. Significant attention should be given to modifications where the details of the change include '0x00000001', which indicates that the security setting has been altered to enable all Macros. Such a configuration adjustment is essential to identify because it lowers the security threshold, potentially allowing malicious macros to run without any prompts to the user, thus posing a high risk. False positives for this kind of monitoring are deemed unlikely, indicating the specificity of the detection criteria is quite high and closely associated with malicious intent or significant security policy alterations."
    }
  },
  {
    "instruction": "How to detect: registration of a new ODBC driver.",
    "context": "",
    "output": "In order to detect the registration of a new ODBC driver, you should monitor Windows Registry changes, specifically focusing on registry sets associated with setting values. Look for events where the `EventType` is `SetValue` and the targeted object contains the path `\\SOFTWARE\\ODBC\\ODBCINST.INI\\` ending with `\\Driver`. This helps in identifying attempts to register new ODBC drivers which could be leveraged for malicious purposes, such as establishing persistence or data exfiltration pathways.\n\nHowever, it's important to filter out legitimate changes to the registry, particularly those involving SQL Server and Office products like Access and Excel. Specifically, ignore changes where the targeted object contains `\\SQL Server\\` and the details path includes `%WINDIR%\\System32\\SQLSRV32.dll`, which is a known path for legitimate SQL Server ODBC drivers. Additionally, disregard changes where the targeted object involves `\\Microsoft Access ` or `\\Microsoft Excel Driver` and the details path starts with `C:\\Progra` and ends with `\\ACEODBC.DLL`, paths commonly associated with legitimate Office software installations.\n\nBe mindful that while monitoring for such registry changes can help in detecting suspicious activity, there is a likelihood of false positives, suggesting that detected changes might not always indicate a threat. This detection strategy is categorized at a low level of alert severity, implying that while useful for highlighting potential risks, it requires further investigation to accurately discern malicious activities.\n\nThe focus on ODBC driver registration, especially through specific registry path manipulations while excluding common legitimate configurations, aligns with tactics and techniques used in cyber attacks aimed at manipulating software to gain unauthorized access or control.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registration of a new ODBC driver.",
      "answer": "In order to detect the registration of a new ODBC driver, you should monitor Windows Registry changes, specifically focusing on registry sets associated with setting values. Look for events where the `EventType` is `SetValue` and the targeted object contains the path `\\SOFTWARE\\ODBC\\ODBCINST.INI\\` ending with `\\Driver`. This helps in identifying attempts to register new ODBC drivers which could be leveraged for malicious purposes, such as establishing persistence or data exfiltration pathways.\n\nHowever, it's important to filter out legitimate changes to the registry, particularly those involving SQL Server and Office products like Access and Excel. Specifically, ignore changes where the targeted object contains `\\SQL Server\\` and the details path includes `%WINDIR%\\System32\\SQLSRV32.dll`, which is a known path for legitimate SQL Server ODBC drivers. Additionally, disregard changes where the targeted object involves `\\Microsoft Access ` or `\\Microsoft Excel Driver` and the details path starts with `C:\\Progra` and ends with `\\ACEODBC.DLL`, paths commonly associated with legitimate Office software installations.\n\nBe mindful that while monitoring for such registry changes can help in detecting suspicious activity, there is a likelihood of false positives, suggesting that detected changes might not always indicate a threat. This detection strategy is categorized at a low level of alert severity, implying that while useful for highlighting potential risks, it requires further investigation to accurately discern malicious activities.\n\nThe focus on ODBC driver registration, especially through specific registry path manipulations while excluding common legitimate configurations, aligns with tactics and techniques used in cyber attacks aimed at manipulating software to gain unauthorized access or control."
    }
  },
  {
    "instruction": "Please help me detect the following: SQL error messages that indicate probing for an injection attack",
    "context": "",
    "output": "Sure!\nIn order to detect SQL error messages that indicate probing for an injection attack, you should monitor application error logs, specifically from SQL databases including Oracle, MySQL, SQL Server, and SQLite. These logs must be of LOG_LEVEL ERROR or above. The key error messages to watch for include:\n\n- For Oracle, look for messages stating \"quoted string not properly terminated\".\n- In MySQL environments, the error message \"You have an error in your SQL syntax\" should raise alerts.\n- On SQL Server, an \"Unclosed quotation mark\" is indicative of possible SQL injection attempts.\n- SQLite error messages such as \"near \"*\": syntax error\" and \"SELECTs to the left and right of UNION do not have the same number of result columns\" are red flags for potential injection probing.\n\nBe mindful of false positives, such as a syntax error in MySQL queries that might occur in non-dynamic (thus, safe) queries if there is an empty IN() clause. This high-level monitoring approach is essential for identifying attempts to exploit SQL injections, which can compromise the integrity and availability of your database systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "SQL error messages that indicate probing for an injection attack",
      "answer": "In order to detect SQL error messages that indicate probing for an injection attack, you should monitor application error logs, specifically from SQL databases including Oracle, MySQL, SQL Server, and SQLite. These logs must be of LOG_LEVEL ERROR or above. The key error messages to watch for include:\n\n- For Oracle, look for messages stating \"quoted string not properly terminated\".\n- In MySQL environments, the error message \"You have an error in your SQL syntax\" should raise alerts.\n- On SQL Server, an \"Unclosed quotation mark\" is indicative of possible SQL injection attempts.\n- SQLite error messages such as \"near \"*\": syntax error\" and \"SELECTs to the left and right of UNION do not have the same number of result columns\" are red flags for potential injection probing.\n\nBe mindful of false positives, such as a syntax error in MySQL queries that might occur in non-dynamic (thus, safe) queries if there is an empty IN() clause. This high-level monitoring approach is essential for identifying attempts to exploit SQL injections, which can compromise the integrity and availability of your database systems."
    }
  },
  {
    "instruction": "Can you explain how to detect: an a non-browser process interacting with the Telegram API which could indicate use of a covert C2",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a non-browser process interacting with the Telegram API which could indicate the use of a covert command and control (C2) channel, you should monitor network connections specifically targeting Windows as the operating system. Focus on identifying any destination hostname within network connections that contains 'api.telegram.org'. This is because telegram.org is often used for legitimate communications, but when a non-browser application attempts to engage with it, it could suggest a covert operation.\n\nHowever, not all communications with 'api.telegram.org' are inherently suspicious. Applications like web browsers regularly communicate with the Telegram API for various legitimate reasons. Therefore, exclude known web browsers from triggering an alert by checking the process image path against a list of common browsers. This list includes multiple versions and install locations of Chrome, Firefox, Internet Explorer, Microsoft Edge, Safari, Opera, and others like Brave, Maxthon, SeaMonkey, Vivaldi, and Whale. If the process initiating the connection is not one of these browsers, as indicated by the image path, it may suggest a non-browser application is being used potentially to establish a covert command and control (C2) channel through Telegram's APIs.\n\nTake note that there can be false positives, such as legitimate applications not listed as exceptions which also use the Telegram API. Therefore, while this detection process indicates potential covert C2 communication, each alert should be investigated to confirm the nature of the interaction. The severity of these detections is considered medium, underscoring the need for cautious analysis of alerts generated by this detection logic.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an a non-browser process interacting with the Telegram API which could indicate use of a covert C2",
      "answer": "In order to detect a non-browser process interacting with the Telegram API which could indicate the use of a covert command and control (C2) channel, you should monitor network connections specifically targeting Windows as the operating system. Focus on identifying any destination hostname within network connections that contains 'api.telegram.org'. This is because telegram.org is often used for legitimate communications, but when a non-browser application attempts to engage with it, it could suggest a covert operation.\n\nHowever, not all communications with 'api.telegram.org' are inherently suspicious. Applications like web browsers regularly communicate with the Telegram API for various legitimate reasons. Therefore, exclude known web browsers from triggering an alert by checking the process image path against a list of common browsers. This list includes multiple versions and install locations of Chrome, Firefox, Internet Explorer, Microsoft Edge, Safari, Opera, and others like Brave, Maxthon, SeaMonkey, Vivaldi, and Whale. If the process initiating the connection is not one of these browsers, as indicated by the image path, it may suggest a non-browser application is being used potentially to establish a covert command and control (C2) channel through Telegram's APIs.\n\nTake note that there can be false positives, such as legitimate applications not listed as exceptions which also use the Telegram API. Therefore, while this detection process indicates potential covert C2 communication, each alert should be investigated to confirm the nature of the interaction. The severity of these detections is considered medium, underscoring the need for cautious analysis of alerts generated by this detection logic."
    }
  },
  {
    "instruction": "Please help me detect the following: creation or modification of a vscode related powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence",
    "context": "",
    "output": "Sure!\nIn order to detect the creation or modification of a vscode related powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence, you should: Monitor Windows file events for any instances where a file ends with the name '\\Microsoft.VSCode_profile.ps1'. This specific file pertains to the Visual Studio Code editor's PowerShell profile, which can be leveraged by attackers to establish persistence by executing malicious scripts every time the PowerShell is opened with Visual Studio Code. It's important to note, however, that developers and administrators might legitimately modify this file as part of their routine use of Visual Studio Code for script development or system management. Given the potentially benign nature of modifications to this file, any detection carries a medium level of concern, suggesting that while monitoring this activity is important, each instance should be investigated to distinguish between legitimate use and malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation or modification of a vscode related powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence",
      "answer": "In order to detect the creation or modification of a vscode related powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence, you should: Monitor Windows file events for any instances where a file ends with the name '\\Microsoft.VSCode_profile.ps1'. This specific file pertains to the Visual Studio Code editor's PowerShell profile, which can be leveraged by attackers to establish persistence by executing malicious scripts every time the PowerShell is opened with Visual Studio Code. It's important to note, however, that developers and administrators might legitimately modify this file as part of their routine use of Visual Studio Code for script development or system management. Given the potentially benign nature of modifications to this file, any detection carries a medium level of concern, suggesting that while monitoring this activity is important, each instance should be investigated to distinguish between legitimate use and malicious activity."
    }
  },
  {
    "instruction": "How to detect: An application has been removed. Check if it is critical.",
    "context": "",
    "output": "In order to check if a critical application has been removed, you should monitor Windows Application Event logs for specific events related to the Microsoft Installer (MsiInstaller). Focus on events with the Provider Name 'MsiInstaller' and look for Event IDs 11724 and 1034. Event ID 11724 indicates that an application removal has been initiated, and Event ID 1034 confirms the application has been uninstalled successfully. These IDs provide valuable insights into application management activities, potentially flagging unauthorized or malicious removal of critical software. \n\nKeep in mind that the volume of events generated can be quite high, as application installation and removal are common activities. Therefore, this approach is marked with a low level of urgency, implying it might generate more information than necessary for some contexts. To efficiently manage this, consider narrowing your focus to the top or fewer than 10 product names that are critical to your environment for a quick overview. Attention to these details enables proactive detection and response to actions that could undermine system integrity or security posture. This monitoring aligns with MITRE ATT&CK tactics and techniques, including \"Impact\" through unauthorized removal of essential applications, but always validate the context of uninstallation events to differentiate between routine management tasks and malicious actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "An application has been removed. Check if it is critical.",
      "answer": "In order to check if a critical application has been removed, you should monitor Windows Application Event logs for specific events related to the Microsoft Installer (MsiInstaller). Focus on events with the Provider Name 'MsiInstaller' and look for Event IDs 11724 and 1034. Event ID 11724 indicates that an application removal has been initiated, and Event ID 1034 confirms the application has been uninstalled successfully. These IDs provide valuable insights into application management activities, potentially flagging unauthorized or malicious removal of critical software. \n\nKeep in mind that the volume of events generated can be quite high, as application installation and removal are common activities. Therefore, this approach is marked with a low level of urgency, implying it might generate more information than necessary for some contexts. To efficiently manage this, consider narrowing your focus to the top or fewer than 10 product names that are critical to your environment for a quick overview. Attention to these details enables proactive detection and response to actions that could undermine system integrity or security posture. This monitoring aligns with MITRE ATT&CK tactics and techniques, including \"Impact\" through unauthorized removal of essential applications, but always validate the context of uninstallation events to differentiate between routine management tasks and malicious actions."
    }
  },
  {
    "instruction": "How to detect: creation of files which are the results of executing the built-in reconnaissance script \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\".",
    "context": "",
    "output": "In order to detect creation of files which are the results of executing the built-in reconnaissance script \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\", you should: Monitor file events within the Windows operating system, specifically targeting the file creation activity in the directory \"C:\\Windows\\System32\\config\". Look out for files that are newly created and have names that start with this directory path and end with one of the following specific file names: 'Hotfixinfo.txt', 'netiostate.txt', 'sysportslog.txt', or 'VmSwitchLog.evtx'. The creation of these files could indicate the execution of the \"gatherNetworkInfo.vbs\" script, which is known for gathering network information and could be utilized for reconnaissance purposes by attackers. It's important to closely observe such activities, although one should be aware that there might be unknown cases that could trigger false positives. This detection falls under a medium severity level due to the potential implications of unauthorized reconnaissance activity within the targeted environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of files which are the results of executing the built-in reconnaissance script \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\".",
      "answer": "In order to detect creation of files which are the results of executing the built-in reconnaissance script \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\", you should: Monitor file events within the Windows operating system, specifically targeting the file creation activity in the directory \"C:\\Windows\\System32\\config\". Look out for files that are newly created and have names that start with this directory path and end with one of the following specific file names: 'Hotfixinfo.txt', 'netiostate.txt', 'sysportslog.txt', or 'VmSwitchLog.evtx'. The creation of these files could indicate the execution of the \"gatherNetworkInfo.vbs\" script, which is known for gathering network information and could be utilized for reconnaissance purposes by attackers. It's important to closely observe such activities, although one should be aware that there might be unknown cases that could trigger false positives. This detection falls under a medium severity level due to the potential implications of unauthorized reconnaissance activity within the targeted environment."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious processes including shells spawnd from WinRM host process",
    "context": "",
    "output": "In order to detect suspicious processes including shells spawned from WinRM host process, you should: Identify the creation of processes on Windows systems with a focus on instances where certain command-line tools or shells (such as cmd.exe, sh.exe, bash.exe, powershell.exe, pwsh.exe, wsl.exe, schtasks.exe, certutil.exe, whoami.exe, or bitsadmin.exe) are initiated from a parent process named wsmprovhost.exe. This activity is significant as it might indicate an attacker leveraging Windows Remote Management (WinRM) to execute commands or scripts remotely, which can be a part of various attack tactics like execution, privilege escalation, or lateral movement. It is crucial, however, to consider that not all matches will indicate malicious activity; legitimate administrative use of WinRM which includes similar process creation patterns could be erroneously detected, thus, being mindful of potential legitimate uses of WinRM in the environment is essential. The rule carries a high level of importance due to the severity of the underlying behavior it aims to detect.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious processes including shells spawnd from WinRM host process",
      "answer": "In order to detect suspicious processes including shells spawned from WinRM host process, you should: Identify the creation of processes on Windows systems with a focus on instances where certain command-line tools or shells (such as cmd.exe, sh.exe, bash.exe, powershell.exe, pwsh.exe, wsl.exe, schtasks.exe, certutil.exe, whoami.exe, or bitsadmin.exe) are initiated from a parent process named wsmprovhost.exe. This activity is significant as it might indicate an attacker leveraging Windows Remote Management (WinRM) to execute commands or scripts remotely, which can be a part of various attack tactics like execution, privilege escalation, or lateral movement. It is crucial, however, to consider that not all matches will indicate malicious activity; legitimate administrative use of WinRM which includes similar process creation patterns could be erroneously detected, thus, being mindful of potential legitimate uses of WinRM in the environment is essential. The rule carries a high level of importance due to the severity of the underlying behavior it aims to detect."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of a renamed Adfind.exe. AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.",
    "context": "",
    "output": "In order to detect the use of a renamed AdFind.exe, which continues to be seen across the majority of breaches and is used for domain trust discovery to plan out subsequent steps in the attack chain, you should monitor for the creation of processes on Windows systems that exhibit specific characteristics indicative of such reconnaissance activities. Key indicators include command lines containing references to domain information querying such as 'domainlist,' 'trustdmp,' 'dcmodes,' 'adinfo,' 'dclist,' 'computer_pwdnotreqd,' 'objectcategory=,' '-subnets -f,' 'name=\"Domain Admins\",' '-sc u:,' 'domainncs,' 'dompol,' 'oudmp,' 'subnetdmp,' 'gpodmp,' 'fspdmp,' 'users_noexpire,' 'computers_active,' and 'computers_pwdnotreqd.' Additionally, detection can be bolstered by identifying processes with specific hash values known to be associated with AdFind, specifically bca5675746d13a1f246e2da3c2217492 and 53e117a96057eaf19c41380d0e87f1c2, or processes where the original file name is 'AdFind.exe,' while ensuring to exclude legitimate instances of AdFind.exe. This approach aims at minimizing the risk of overlooking a potentially malicious activity designed to gain insights into domain trusts and facilitate the planning of further malicious operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of a renamed Adfind.exe. AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.",
      "answer": "In order to detect the use of a renamed AdFind.exe, which continues to be seen across the majority of breaches and is used for domain trust discovery to plan out subsequent steps in the attack chain, you should monitor for the creation of processes on Windows systems that exhibit specific characteristics indicative of such reconnaissance activities. Key indicators include command lines containing references to domain information querying such as 'domainlist,' 'trustdmp,' 'dcmodes,' 'adinfo,' 'dclist,' 'computer_pwdnotreqd,' 'objectcategory=,' '-subnets -f,' 'name=\"Domain Admins\",' '-sc u:,' 'domainncs,' 'dompol,' 'oudmp,' 'subnetdmp,' 'gpodmp,' 'fspdmp,' 'users_noexpire,' 'computers_active,' and 'computers_pwdnotreqd.' Additionally, detection can be bolstered by identifying processes with specific hash values known to be associated with AdFind, specifically bca5675746d13a1f246e2da3c2217492 and 53e117a96057eaf19c41380d0e87f1c2, or processes where the original file name is 'AdFind.exe,' while ensuring to exclude legitimate instances of AdFind.exe. This approach aims at minimizing the risk of overlooking a potentially malicious activity designed to gain insights into domain trusts and facilitate the planning of further malicious operations."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect use of ie4uinit.exe to execute commands from a specially prepared ie4uinit.inf file from a directory other than the usual directories",
    "context": "",
    "output": "Sure!\nIn order to detect the use of ie4uinit.exe to execute commands from a specially prepared ie4uinit.inf file from a directory other than the usual directories, you should focus on monitoring process creation logs within Windows environments. Look for instances where the process image ends with \"\\ie4uinit.exe\" or where the OriginalFileName is identified as \"IE4UINIT.EXE.\" These binaries are legitimate Windows components, often referred to as living off the land binaries (LOLBINs), which can be exploited to execute malicious commands.\n\nTo reduce false positives and ensure accurate detection, it is important to disregard events where the process's current directory matches the typical system directories, specifically \"c:\\windows\\system32\\\" and \"c:\\windows\\sysWOW64\\\". The absence of a CurrentDirectory field should also not trigger an alert, as it may indicate normal, non-suspicious activity.\n\nIt's worth noting that certain legitimate applications, such as the ViberPC updater, may call ie4uinit.exe with the command line argument \"-ClearIconCache\". Such activities should be considered when evaluating potential false positives to avoid unnecessary alerts.\n\nOverall, this monitoring strategy is essential in identifying suspicious usage of ie4uinit.exe that diverges from standard system behavior, suggesting an attempt to execute unauthorized or malicious commands through abuse of system tools. This approach leverages the Windows process creation logs as a source, aiding in the detection of adversarial tactics and techniques without relying on abnormal file paths alone.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect use of ie4uinit.exe to execute commands from a specially prepared ie4uinit.inf file from a directory other than the usual directories",
      "answer": "In order to detect the use of ie4uinit.exe to execute commands from a specially prepared ie4uinit.inf file from a directory other than the usual directories, you should focus on monitoring process creation logs within Windows environments. Look for instances where the process image ends with \"\\ie4uinit.exe\" or where the OriginalFileName is identified as \"IE4UINIT.EXE.\" These binaries are legitimate Windows components, often referred to as living off the land binaries (LOLBINs), which can be exploited to execute malicious commands.\n\nTo reduce false positives and ensure accurate detection, it is important to disregard events where the process's current directory matches the typical system directories, specifically \"c:\\windows\\system32\\\" and \"c:\\windows\\sysWOW64\\\". The absence of a CurrentDirectory field should also not trigger an alert, as it may indicate normal, non-suspicious activity.\n\nIt's worth noting that certain legitimate applications, such as the ViberPC updater, may call ie4uinit.exe with the command line argument \"-ClearIconCache\". Such activities should be considered when evaluating potential false positives to avoid unnecessary alerts.\n\nOverall, this monitoring strategy is essential in identifying suspicious usage of ie4uinit.exe that diverges from standard system behavior, suggesting an attempt to execute unauthorized or malicious commands through abuse of system tools. This approach leverages the Windows process creation logs as a source, aiding in the detection of adversarial tactics and techniques without relying on abnormal file paths alone."
    }
  },
  {
    "instruction": "Explain how should I detect the following: change the the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library",
    "context": "",
    "output": "In order to detect changes to the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library, you should: Focus on monitoring registry set actions within Windows environments, specifically looking at event types that involve the setting of a value. The main event to look out for is when the value of \"AutodialDLL\" located within the \"\\Services\\WinSock2\\Parameters\" registry path is modified. This specific action is indicative of attempts to establish persistence on a system by loading a custom DLL through the \"ws2_32\" library, which is a legitimate library commonly used for network-related functions. Such modifications are rarely benign in nature and are therefore considered highly suspicious, with very limited scenarios under which they would be considered false positives. Essentially, detecting changes to this registry key can help identify and thwart attempts to maintain unauthorized access or control over a system through custom payloads leveraging the networking functionalities of Windows.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "change the the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library",
      "answer": "In order to detect changes to the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library, you should: Focus on monitoring registry set actions within Windows environments, specifically looking at event types that involve the setting of a value. The main event to look out for is when the value of \"AutodialDLL\" located within the \"\\Services\\WinSock2\\Parameters\" registry path is modified. This specific action is indicative of attempts to establish persistence on a system by loading a custom DLL through the \"ws2_32\" library, which is a legitimate library commonly used for network-related functions. Such modifications are rarely benign in nature and are therefore considered highly suspicious, with very limited scenarios under which they would be considered false positives. Essentially, detecting changes to this registry key can help identify and thwart attempts to maintain unauthorized access or control over a system through custom payloads leveraging the networking functionalities of Windows."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect set UseActionCenterExperience to 0 to disable the Windows security center notification",
    "context": "",
    "output": "Certainly!\n\nIn order to detect set UseActionCenterExperience to 0 to disable the Windows security center notification, you should: Monitor registry modifications in Windows environments, particularly focusing on the setting of registry values. This detection process involves watching for the SetValue EventType within the registry settings domain, which indicates a change or newly established registry value. Specifically, the focus should be on modifications to the registry key path that ends with 'Windows\\CurrentVersion\\ImmersiveShell\\UseActionCenterExperience'. The detection criterion is met when this specific registry key path has its value explicitly set to 'DWORD (0x00000000)', which effectively disables the Windows security center notifications. This activity is relevant for cyber-security as it potentially indicates an attempt to reduce the visibility of system security health, a tactic often employed by malicious entities to avoid detection. The level of concern for such detections is categorized as medium, acknowledging that while there potentially could be legitimate reasons for such changes, they remain unusual and warrant further investigation due to the lack of known benign use-cases \u2013 thus no specific false positives can be confidently identified. This monitoring approach associates with tactics and techniques that aim at evasion and subversion of system security functionalities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect set UseActionCenterExperience to 0 to disable the Windows security center notification",
      "answer": "In order to detect set UseActionCenterExperience to 0 to disable the Windows security center notification, you should: Monitor registry modifications in Windows environments, particularly focusing on the setting of registry values. This detection process involves watching for the SetValue EventType within the registry settings domain, which indicates a change or newly established registry value. Specifically, the focus should be on modifications to the registry key path that ends with 'Windows\\CurrentVersion\\ImmersiveShell\\UseActionCenterExperience'. The detection criterion is met when this specific registry key path has its value explicitly set to 'DWORD (0x00000000)', which effectively disables the Windows security center notifications. This activity is relevant for cyber-security as it potentially indicates an attempt to reduce the visibility of system security health, a tactic often employed by malicious entities to avoid detection. The level of concern for such detections is categorized as medium, acknowledging that while there potentially could be legitimate reasons for such changes, they remain unusual and warrant further investigation due to the lack of known benign use-cases \u2013 thus no specific false positives can be confidently identified. This monitoring approach associates with tactics and techniques that aim at evasion and subversion of system security functionalities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Detect use of the Windows 8.3 short name. Which could be used as a method to avoid Image based detection",
    "context": "",
    "output": "In order to detect the use of the Windows 8.3 short name, which could be used as a method to avoid Image-based detection, you should: Monitor process creation events on Windows systems for the execution of files that utilize Windows 8.3 short naming convention, potentially indicative of an attempt to evade detection. This involves looking for executable files (e.g., .exe, .bat, .msi, .dll, .ps1, etc.) that have a shortened name format, typically represented with a tilde (~) followed by a number (e.g., ~1.exe, ~2.bat). It's important to exclude certain parent processes from triggering alerts, such as 'C:\\Windows\\explorer.exe', processes starting under the 'WebEx' or 'thor' directories, any process with '-installer.exe' in its name, the specific WinZip launch process 'C:\\PROGRA~1\\WinZip\\WZPREL~1.EXE', and any application path containing '\\vcredi'. These exclusions help reduce false positives by filtering out known legitimate uses of short names by certain applications or installation processes. The focus is on capturing anomalous or suspicious uses of short names that could signify an attempt to disguise malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect use of the Windows 8.3 short name. Which could be used as a method to avoid Image based detection",
      "answer": "In order to detect the use of the Windows 8.3 short name, which could be used as a method to avoid Image-based detection, you should: Monitor process creation events on Windows systems for the execution of files that utilize Windows 8.3 short naming convention, potentially indicative of an attempt to evade detection. This involves looking for executable files (e.g., .exe, .bat, .msi, .dll, .ps1, etc.) that have a shortened name format, typically represented with a tilde (~) followed by a number (e.g., ~1.exe, ~2.bat). It's important to exclude certain parent processes from triggering alerts, such as 'C:\\Windows\\explorer.exe', processes starting under the 'WebEx' or 'thor' directories, any process with '-installer.exe' in its name, the specific WinZip launch process 'C:\\PROGRA~1\\WinZip\\WZPREL~1.EXE', and any application path containing '\\vcredi'. These exclusions help reduce false positives by filtering out known legitimate uses of short names by certain applications or installation processes. The focus is on capturing anomalous or suspicious uses of short names that could signify an attempt to disguise malicious activities."
    }
  },
  {
    "instruction": "How can I detect: usage of the \"msedge.exe\" binary as a LOLBIN to download arbitrary file via the CLI",
    "context": "",
    "output": "In order to detect the usage of the \"msedge.exe\" binary as a LOLBIN to download arbitrary files via the CLI, you should: monitor for the creation of processes on Windows systems where the process image name ends with \"\\msedge.exe\" or the OriginalFileName is exactly \"msedge.exe\". Additionally, watch for command line executions that contain '.exe http' or 'msedge http'. Both conditions, related to the image name and the command line parameters, need to be met for a potential detection. Be aware of legitimate software that might use MsEdge to download components in the background, as these could be falsely flagged by this detection method. This monitoring is set to a medium level of concern due to the potential for legitimate use cases that could trigger false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"msedge.exe\" binary as a LOLBIN to download arbitrary file via the CLI",
      "answer": "In order to detect the usage of the \"msedge.exe\" binary as a LOLBIN to download arbitrary files via the CLI, you should: monitor for the creation of processes on Windows systems where the process image name ends with \"\\msedge.exe\" or the OriginalFileName is exactly \"msedge.exe\". Additionally, watch for command line executions that contain '.exe http' or 'msedge http'. Both conditions, related to the image name and the command line parameters, need to be met for a potential detection. Be aware of legitimate software that might use MsEdge to download components in the background, as these could be falsely flagged by this detection method. This monitoring is set to a medium level of concern due to the potential for legitimate use cases that could trigger false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: that a powershell code is written to the registry as a service.",
    "context": "",
    "output": "In order to detect that a PowerShell code is written to the registry as a service, you should focus on monitoring registry set events on Windows products. Specifically, look out for events where the EventType is marked as SetValue. These events are indicative of changes being made to the registry values. Next, narrow down the observations to where the TargetObject contains the path '\\Services\\' and ends with '\\ImagePath'. This specific pathway is crucial as it commonly denotes service-related configurations in Windows registries.\n\nFurther refine your detection by filtering for the inclusion of 'powershell' or 'pwsh' in the Details field of the registry set event. This detail is critical because the presence of these terms suggests that PowerShell code, which is a powerful scripting language used for automation and configuration management, is being registered as a part of a service's configuration. This could potentially be malicious if the PowerShell is being used to execute unauthorized commands or scripts.\n\nIt is important to note that while this detection mechanism is high in its threat level due to the potential misuse of PowerShell within service configurations, there may still be unknown false positives. These are instances where legitimate uses of PowerShell in services could inadvertently trigger the detection criteria. Hence, while this method is effective in identifying possible malicious activity associated with PowerShell code written to the registry as a service, each alert should be investigated to confirm the nature of the activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "that a powershell code is written to the registry as a service.",
      "answer": "In order to detect that a PowerShell code is written to the registry as a service, you should focus on monitoring registry set events on Windows products. Specifically, look out for events where the EventType is marked as SetValue. These events are indicative of changes being made to the registry values. Next, narrow down the observations to where the TargetObject contains the path '\\Services\\' and ends with '\\ImagePath'. This specific pathway is crucial as it commonly denotes service-related configurations in Windows registries.\n\nFurther refine your detection by filtering for the inclusion of 'powershell' or 'pwsh' in the Details field of the registry set event. This detail is critical because the presence of these terms suggests that PowerShell code, which is a powerful scripting language used for automation and configuration management, is being registered as a part of a service's configuration. This could potentially be malicious if the PowerShell is being used to execute unauthorized commands or scripts.\n\nIt is important to note that while this detection mechanism is high in its threat level due to the potential misuse of PowerShell within service configurations, there may still be unknown false positives. These are instances where legitimate uses of PowerShell in services could inadvertently trigger the detection criteria. Hence, while this method is effective in identifying possible malicious activity associated with PowerShell code written to the registry as a service, each alert should be investigated to confirm the nature of the activity."
    }
  },
  {
    "instruction": "How can I detect: potential command line flag anomaly related to \"regsvr32\" in which the \"/i\" flag is used without the \"/n\" which should be uncommon.",
    "context": "",
    "output": "In order to detect a potential command line flag anomaly related to \"regsvr32\" in which the \"/i\" flag is used without the \"/n\" which should be uncommon, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where \"regsvr32.exe\" is executed. Pay attention to the command line arguments passed along with \"regsvr32.exe\", especially looking for the usage of \"/i\" or \"-i\" flags. It's important to note that legitimate usage of \"regsvr32\" typically includes the \"/n\" flag along with \"/i\"; therefore, command lines without the \"/n\" flag but with \"/i\" are of interest. Exclude detections where the \"/n\" flag is present alongside \"/i\" to minimize false positives, as the absence of \"/n\" with \"/i\" is indicative of unusual or potentially malicious activity. Be aware that false positives may occur due to administrator typos. This approach is aimed at identifying command execution patterns that deviate from the norm, suggesting an anomaly that could be indicative of an attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential command line flag anomaly related to \"regsvr32\" in which the \"/i\" flag is used without the \"/n\" which should be uncommon.",
      "answer": "In order to detect a potential command line flag anomaly related to \"regsvr32\" in which the \"/i\" flag is used without the \"/n\" which should be uncommon, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where \"regsvr32.exe\" is executed. Pay attention to the command line arguments passed along with \"regsvr32.exe\", especially looking for the usage of \"/i\" or \"-i\" flags. It's important to note that legitimate usage of \"regsvr32\" typically includes the \"/n\" flag along with \"/i\"; therefore, command lines without the \"/n\" flag but with \"/i\" are of interest. Exclude detections where the \"/n\" flag is present alongside \"/i\" to minimize false positives, as the absence of \"/n\" with \"/i\" is indicative of unusual or potentially malicious activity. Be aware that false positives may occur due to administrator typos. This approach is aimed at identifying command execution patterns that deviate from the norm, suggesting an anomaly that could be indicative of an attack."
    }
  },
  {
    "instruction": "Explain how should I detect the following: command that clears or disables any ETW trace log which could indicate a logging evasion.",
    "context": "",
    "output": "In order to detect a command that clears or disables any ETW (Event Tracing for Windows) trace log which could indicate a logging evasion, you should monitor for certain command line activities on Windows systems, specifically within the process creation logs. Look for commands issued to the system that include combinations of strings suggesting the clearing or disabling of ETW tracing. These commands are critical to identify because they can represent efforts by malicious actors to evade logging and monitoring mechanisms, thereby hiding their activities.\n\nFirstly, observe for the command line inclinations which aim to clear ETW logs. These inclinations are marked by the presence of 'cl' and '/Trace' or 'clear-log' and '/Trace' within a single command line execution. The intention here is to clear or reset the state of ETW logging, potentially erasing evidence of malicious activity.\n\nIn addition, pay attention to commands designed to disable ETW tracing. These are identified by the presence of strings like 'sl' and '/e:false', 'set-log' and '/e:false', or a combination of 'logman', 'update', 'trace', '--p', and '-ets'. These commands are usually structured to change the state or properties of ETW logging to disable or stop logging.\n\nFurthermore, specifically for PowerShell commands, look for 'Remove-EtwTraceProvider', indicating removal of an ETW provider, and 'Set-EtwTraceProvider' alongside '0x11', which suggests modification of a provider\u2019s \"Enable\" property to likely disable it.\n\nBeing vigilant for these commands is imperative as they can have a high impact on security monitoring mechanisms by evading detection. The lack of ETW logs might provide an attacker with a blind spot to conduct their activities unnoticed. Such actions are usually not part of regular system administration tasks and thus, while false positives are a possibility, they are unknown under normal circumstances.\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "command that clears or disables any ETW trace log which could indicate a logging evasion.",
      "answer": "In order to detect a command that clears or disables any ETW (Event Tracing for Windows) trace log which could indicate a logging evasion, you should monitor for certain command line activities on Windows systems, specifically within the process creation logs. Look for commands issued to the system that include combinations of strings suggesting the clearing or disabling of ETW tracing. These commands are critical to identify because they can represent efforts by malicious actors to evade logging and monitoring mechanisms, thereby hiding their activities.\n\nFirstly, observe for the command line inclinations which aim to clear ETW logs. These inclinations are marked by the presence of 'cl' and '/Trace' or 'clear-log' and '/Trace' within a single command line execution. The intention here is to clear or reset the state of ETW logging, potentially erasing evidence of malicious activity.\n\nIn addition, pay attention to commands designed to disable ETW tracing. These are identified by the presence of strings like 'sl' and '/e:false', 'set-log' and '/e:false', or a combination of 'logman', 'update', 'trace', '--p', and '-ets'. These commands are usually structured to change the state or properties of ETW logging to disable or stop logging.\n\nFurthermore, specifically for PowerShell commands, look for 'Remove-EtwTraceProvider', indicating removal of an ETW provider, and 'Set-EtwTraceProvider' alongside '0x11', which suggests modification of a provider\u2019s \"Enable\" property to likely disable it.\n\nBeing vigilant for these commands is imperative as they can have a high impact on security monitoring mechanisms by evading detection. The lack of ETW logs might provide an attacker with a blind spot to conduct their activities unnoticed. Such actions are usually not part of regular system administration tasks and thus, while false positives are a possibility, they are unknown under normal circumstances.\n"
    }
  },
  {
    "instruction": "How can I detect: file ending in jse, vbe, js, vba, vbs written by cscript.exe or wscript.exe",
    "context": "",
    "output": "In order to detect a file ending in jse, vbe, js, vba, vbs written by cscript.exe or wscript.exe, you should: focus on monitoring file events within a Windows environment. Specifically, keep an eye out for instances where either the cscript.exe or wscript.exe processes are writing files. The files of interest are those with extensions .jse, .vbe, .js, .vba, or .vbs, indicating they are script files which could potentially be malicious. These file activities should primarily be looked for in user directories such as \"C:\\Users\\\" or common data storage directories like \"C:\\ProgramData\". You should track and log the process image path and the target filenames of these operations due to their potential high-security risk, despite the lack of known false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "file ending in jse, vbe, js, vba, vbs written by cscript.exe or wscript.exe",
      "answer": "In order to detect a file ending in jse, vbe, js, vba, vbs written by cscript.exe or wscript.exe, you should: focus on monitoring file events within a Windows environment. Specifically, keep an eye out for instances where either the cscript.exe or wscript.exe processes are writing files. The files of interest are those with extensions .jse, .vbe, .js, .vba, or .vbs, indicating they are script files which could potentially be malicious. These file activities should primarily be looked for in user directories such as \"C:\\Users\\\" or common data storage directories like \"C:\\ProgramData\". You should track and log the process image path and the target filenames of these operations due to their potential high-security risk, despite the lack of known false positives."
    }
  },
  {
    "instruction": "How can I detect: DNS query initiated from a \"wscript\" process for domains matching a specific pattern that was seen being used by SocGholish for its Command and Control traffic",
    "context": "",
    "output": "In order to detect a DNS query initiated from a \"wscript\" process for domains matching a specific pattern that was seen being used by SocGholish for its Command and Control traffic, you should monitor DNS query logs from Windows systems. Look for any DNS queries that originate from a process ending with `\\wscript.exe`. The focus should be on detecting domain names in these queries that fit a particular pattern, specifically, domain names consisting of hexadecimal characters ranging from 4 to 8 characters long followed by at least two domain parts (e.g., abcdef01.example.com). These characteristics are indicative of domain names that might be used by the SocGholish malware for Command and Control (C2) communication. It's important to be aware of potential false positives, which can arise from legitimate domain names that accidentally match the regex pattern, such as those belonging to domain controllers or legitimate services. This detection is critical, as it pertains to high-level security threats involving SocGholish's C2 activities, and involves deeply analyzing DNS query patterns for suspicious behavior indicative of malware communication.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DNS query initiated from a \"wscript\" process for domains matching a specific pattern that was seen being used by SocGholish for its Command and Control traffic",
      "answer": "In order to detect a DNS query initiated from a \"wscript\" process for domains matching a specific pattern that was seen being used by SocGholish for its Command and Control traffic, you should monitor DNS query logs from Windows systems. Look for any DNS queries that originate from a process ending with `\\wscript.exe`. The focus should be on detecting domain names in these queries that fit a particular pattern, specifically, domain names consisting of hexadecimal characters ranging from 4 to 8 characters long followed by at least two domain parts (e.g., abcdef01.example.com). These characteristics are indicative of domain names that might be used by the SocGholish malware for Command and Control (C2) communication. It's important to be aware of potential false positives, which can arise from legitimate domain names that accidentally match the regex pattern, such as those belonging to domain controllers or legitimate services. This detection is critical, as it pertains to high-level security threats involving SocGholish's C2 activities, and involves deeply analyzing DNS query patterns for suspicious behavior indicative of malware communication."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of the 'chattr' utility to remove immutable file attribute.",
    "context": "",
    "output": "Sure!\nIn order to detect usage of the 'chattr' utility to remove immutable file attribute, you should: Monitor Linux system process creation logs for any instances where the 'chattr' command is executed with the '-i' flag in its command line. This flag is specifically used to modify file attributes, including making files immutable or removing such immutability. This behavior can be indicative of an attempt to alter protected system files or to tamper with files that have been secured, potentially as a part of malicious activities. Be aware that there are legitimate use cases for this command, such as when an administrator needs to interact with backup files or perform system maintenance tasks. Hence, not all detections should be treated as malicious without further investigation. The detection level for this activity is considered medium due to the potential for legitimate use.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the 'chattr' utility to remove immutable file attribute.",
      "answer": "In order to detect usage of the 'chattr' utility to remove immutable file attribute, you should: Monitor Linux system process creation logs for any instances where the 'chattr' command is executed with the '-i' flag in its command line. This flag is specifically used to modify file attributes, including making files immutable or removing such immutability. This behavior can be indicative of an attempt to alter protected system files or to tamper with files that have been secured, potentially as a part of malicious activities. Be aware that there are legitimate use cases for this command, such as when an administrator needs to interact with backup files or perform system maintenance tasks. Hence, not all detections should be treated as malicious without further investigation. The detection level for this activity is considered medium due to the potential for legitimate use."
    }
  },
  {
    "instruction": "Please help me detect the following: pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)",
    "context": "",
    "output": "Sure!\nIn order to detect the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52), you should monitor Windows process creation logs for specific conditions indicating a potential UAC (User Account Control) bypass attempt. The criteria for detection include processes that are created at a High or System integrity level, which may signify that a process is executing with elevated privileges. Additionally, if the parent process image path ends with '\\AppData\\Local\\Temp\\system32\\winsat.exe' or if the parent process's command line contains 'C:\\Windows\\system32\\winsat.exe', it is an indicator of the specific technique leveraging the Windows System Assessment Tool (winsat.exe) in an unconventional location to bypass UAC. This behavior aligns with tactics and techniques such as Privilege Escalation and Defense Evasion, exploiting the UAC mechanism designed to prevent unauthorized changes to the operating system. Monitoring for these conditions in process creation logs is critical to identifying and mitigating instances of this UAC bypass technique.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)",
      "answer": "In order to detect the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52), you should monitor Windows process creation logs for specific conditions indicating a potential UAC (User Account Control) bypass attempt. The criteria for detection include processes that are created at a High or System integrity level, which may signify that a process is executing with elevated privileges. Additionally, if the parent process image path ends with '\\AppData\\Local\\Temp\\system32\\winsat.exe' or if the parent process's command line contains 'C:\\Windows\\system32\\winsat.exe', it is an indicator of the specific technique leveraging the Windows System Assessment Tool (winsat.exe) in an unconventional location to bypass UAC. This behavior aligns with tactics and techniques such as Privilege Escalation and Defense Evasion, exploiting the UAC mechanism designed to prevent unauthorized changes to the operating system. Monitoring for these conditions in process creation logs is critical to identifying and mitigating instances of this UAC bypass technique."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious process related to rundll32 based on arguments",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious process related to rundll32 based on arguments, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, watch for the command line invocation of 'rundll32', a legitimate Windows command, which is being misused in this context. Pay attention to command line arguments that include either 'mshtml,RunHTMLApplication', 'mshtml,#135', which indicate an attempt to execute HTML applications or scripts, a common technique in various attacks. Additionally, be wary of command lines containing 'javascript:' or 'vbscript:', as these are scripting languages often used maliciously when combined with 'rundll32' to execute code directly in memory or perform other unauthorized actions. Remember that false positives may arise from legitimate administration scripts or tools, so these detections should be considered within the context of your environment's normal behavior. The detection of such activities is crucial in identifying and mitigating attacks that leverage 'rundll32' for malicious purposes, falling under tactics and techniques that involve the abuse of system features and scripted languages to execute commands, conduct reconnaissance, or achieve execution persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious process related to rundll32 based on arguments",
      "answer": "In order to detect suspicious process related to rundll32 based on arguments, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, watch for the command line invocation of 'rundll32', a legitimate Windows command, which is being misused in this context. Pay attention to command line arguments that include either 'mshtml,RunHTMLApplication', 'mshtml,#135', which indicate an attempt to execute HTML applications or scripts, a common technique in various attacks. Additionally, be wary of command lines containing 'javascript:' or 'vbscript:', as these are scripting languages often used maliciously when combined with 'rundll32' to execute code directly in memory or perform other unauthorized actions. Remember that false positives may arise from legitimate administration scripts or tools, so these detections should be considered within the context of your environment's normal behavior. The detection of such activities is crucial in identifying and mitigating attacks that leverage 'rundll32' for malicious purposes, falling under tactics and techniques that involve the abuse of system features and scripted languages to execute commands, conduct reconnaissance, or achieve execution persistence."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of \"dotnet-dump\" with the \"collect\" flag. The execution could indicate potential process dumping of critical processes such as LSASS",
    "context": "",
    "output": "In order to detect the execution of \"dotnet-dump\" with the \"collect\" flag, which could indicate potential process dumping of critical processes such as LSASS, you should: Look for the creation of processes on Windows systems where the process image ends with '\\dotnet-dump.exe' or the original file name is identified as 'dotnet-dump.dll'. Additionally, check if the command line used for launching these processes includes the term 'collect'. This detection mechanism is set to flag any occurrences that meet these conditions. However, be aware that the use of 'dotnet-dump' for process dumping can also be part of legitimate debugging activities, so it's important to further investigate the process ID or name of the process being dumped to differentiate between malicious activities and acceptable use. This approach is of a medium level of urgency in identifying potential malicious behavior related to process dumping tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"dotnet-dump\" with the \"collect\" flag. The execution could indicate potential process dumping of critical processes such as LSASS",
      "answer": "In order to detect the execution of \"dotnet-dump\" with the \"collect\" flag, which could indicate potential process dumping of critical processes such as LSASS, you should: Look for the creation of processes on Windows systems where the process image ends with '\\dotnet-dump.exe' or the original file name is identified as 'dotnet-dump.dll'. Additionally, check if the command line used for launching these processes includes the term 'collect'. This detection mechanism is set to flag any occurrences that meet these conditions. However, be aware that the use of 'dotnet-dump' for process dumping can also be part of legitimate debugging activities, so it's important to further investigate the process ID or name of the process being dumped to differentiate between malicious activities and acceptable use. This approach is of a medium level of urgency in identifying potential malicious behavior related to process dumping tactics."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation or patching of potential malicious RoleBinding/ClusterRoleBinding.",
    "context": "",
    "output": "In order to detect the creation or patching of potential malicious RoleBinding/ClusterRoleBinding, you should monitor Azure Activity Logs for specific operations related to Kubernetes. These operations include writing and deleting both ClusterRoleBindings and RoleBindings within the Microsoft Kubernetes Connected Clusters RBAC (Role-Based Access Control). The activities to watch for explicitly are the operation names: MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLEBINDINGS/WRITE, MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLEBINDINGS/DELETE, MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLEBINDINGS/WRITE, and MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLEBINDINGS/DELETE.\n\nThis monitoring activity is crucial as unauthorized modifications could indicate a compromise or an attempt to elevate privileges within a Kubernetes environment. It's important to note that while modifications to RoleBindings and ClusterRoleBindings can often be genuine administrative actions, any modifications or deletions from unfamiliar users should be swiftly investigated to confirm whether these actions are expected and legitimate within your operational environment. Known administrator actions might occasionally cause false positives; hence, verification of user identity, user agent, and hostname is recommended to discern whether modifications should raise alerts. Identifying unexpected changes in these areas could be indicative of malicious activity and warrants further investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation or patching of potential malicious RoleBinding/ClusterRoleBinding.",
      "answer": "In order to detect the creation or patching of potential malicious RoleBinding/ClusterRoleBinding, you should monitor Azure Activity Logs for specific operations related to Kubernetes. These operations include writing and deleting both ClusterRoleBindings and RoleBindings within the Microsoft Kubernetes Connected Clusters RBAC (Role-Based Access Control). The activities to watch for explicitly are the operation names: MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLEBINDINGS/WRITE, MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLEBINDINGS/DELETE, MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLEBINDINGS/WRITE, and MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLEBINDINGS/DELETE.\n\nThis monitoring activity is crucial as unauthorized modifications could indicate a compromise or an attempt to elevate privileges within a Kubernetes environment. It's important to note that while modifications to RoleBindings and ClusterRoleBindings can often be genuine administrative actions, any modifications or deletions from unfamiliar users should be swiftly investigated to confirm whether these actions are expected and legitimate within your operational environment. Known administrator actions might occasionally cause false positives; hence, verification of user identity, user agent, and hostname is recommended to discern whether modifications should raise alerts. Identifying unexpected changes in these areas could be indicative of malicious activity and warrants further investigation."
    }
  },
  {
    "instruction": "How can I detect: SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
    "context": "",
    "output": "In order to detect SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Monitor Windows PowerShell script blocks logs to identify instances where 'SyncAppvPublishingServer.exe' is mentioned. This monitoring is predicated on Script Block Logging being enabled on the system. When 'SyncAppvPublishingServer.exe' is detected within these script block texts, it may indicate an attempt to bypass PowerShell execution restrictions typically employed by adversaries. It's important to note, however, that legitimate App-V clients may also trigger this detection, so these instances should be considered as potential false positives. This strategy is aimed at identifying medium-level security threats associated with this particular tactic.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
      "answer": "In order to detect SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Monitor Windows PowerShell script blocks logs to identify instances where 'SyncAppvPublishingServer.exe' is mentioned. This monitoring is predicated on Script Block Logging being enabled on the system. When 'SyncAppvPublishingServer.exe' is detected within these script block texts, it may indicate an attempt to bypass PowerShell execution restrictions typically employed by adversaries. It's important to note, however, that legitimate App-V clients may also trigger this detection, so these instances should be considered as potential false positives. This strategy is aimed at identifying medium-level security threats associated with this particular tactic."
    }
  },
  {
    "instruction": "How can I detect: Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft \u201cRoslyn\u201d Community Technology Preview was named 'rcsi.exe'",
    "context": "",
    "output": "In order to detect potential abuse of the 'csi.exe' and 'rcsi.exe' binaries which are legitimate Microsoft-signed executables from Visual Studio and are intended for running C# code interactively, often through the command line, you should:\n\nMonitor for the creation of processes that are named 'csi.exe' or 'rcsi.exe'. This can be identified when the executable image ends with these specific names or when the original file name matches 'csi.exe' or 'rcsi.exe'. Additionally, any command-line invocation of these executables coming from an entity identified as 'Microsoft Corporation' should be closely scrutinized. It's essential to capture key details such as the computer name, user account, full command line used to launch the process, and the parent command line if available. This allows for a comprehensive understanding of the context surrounding potential misuse. However, it\u2019s important to note that these utilities might be legitimately used by software developers; thus, some alerts might represent false positives. The monitoring approach should consider the balance between detecting malicious activity and minimizing interruptions to legitimate software development practices. These checks mainly focus on the tactics and techniques related to the execution phase of an attack, specifically monitoring the execution of Windows processes that could potentially be abused by attackers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft \u201cRoslyn\u201d Community Technology Preview was named 'rcsi.exe'",
      "answer": "In order to detect potential abuse of the 'csi.exe' and 'rcsi.exe' binaries which are legitimate Microsoft-signed executables from Visual Studio and are intended for running C# code interactively, often through the command line, you should:\n\nMonitor for the creation of processes that are named 'csi.exe' or 'rcsi.exe'. This can be identified when the executable image ends with these specific names or when the original file name matches 'csi.exe' or 'rcsi.exe'. Additionally, any command-line invocation of these executables coming from an entity identified as 'Microsoft Corporation' should be closely scrutinized. It's essential to capture key details such as the computer name, user account, full command line used to launch the process, and the parent command line if available. This allows for a comprehensive understanding of the context surrounding potential misuse. However, it\u2019s important to note that these utilities might be legitimately used by software developers; thus, some alerts might represent false positives. The monitoring approach should consider the balance between detecting malicious activity and minimizing interruptions to legitimate software development practices. These checks mainly focus on the tactics and techniques related to the execution phase of an attack, specifically monitoring the execution of Windows processes that could potentially be abused by attackers."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities. Notable capabilities could be \"OpenSSH\" and others.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities, notably OpenSSH among others, you should: Monitor for process creation events within Windows systems, specifically focusing on executions of PowerShell (either the traditional PowerShell.exe or the newer pwsh.exe, which can also be identified by the original file names PowerShell.EXE and pwsh.dll). Additionally, it's critical to examine the command lines of these instances for specific indicators. Look for the presence of the 'Add-WindowsCapability' cmdlet which signifies an attempt to add new capabilities to the system. Furthermore, pay attention to command lines containing references to 'OpenSSH.', encompassing both \"OpenSSH.Server\" and \"OpenSSH.Client\" installations. This method captures a broad spectrum of potentially unauthorized or malicious modifications to the system's capabilities. However, be aware that there may be legitimate reasons for users or administrators to use these commands and capabilities, necessitating refined filters or verification steps to distinguish between malignant and benign activities. The detected activities are associated with MITRE ATT&CK tactics and techniques related to system privileges escalation and persistence through adding new software or capabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities. Notable capabilities could be \"OpenSSH\" and others.",
      "answer": "In order to detect the usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities, notably OpenSSH among others, you should: Monitor for process creation events within Windows systems, specifically focusing on executions of PowerShell (either the traditional PowerShell.exe or the newer pwsh.exe, which can also be identified by the original file names PowerShell.EXE and pwsh.dll). Additionally, it's critical to examine the command lines of these instances for specific indicators. Look for the presence of the 'Add-WindowsCapability' cmdlet which signifies an attempt to add new capabilities to the system. Furthermore, pay attention to command lines containing references to 'OpenSSH.', encompassing both \"OpenSSH.Server\" and \"OpenSSH.Client\" installations. This method captures a broad spectrum of potentially unauthorized or malicious modifications to the system's capabilities. However, be aware that there may be legitimate reasons for users or administrators to use these commands and capabilities, necessitating refined filters or verification steps to distinguish between malignant and benign activities. The detected activities are associated with MITRE ATT&CK tactics and techniques related to system privileges escalation and persistence through adding new software or capabilities."
    }
  },
  {
    "instruction": "How to detect: registry key established after masqueraded .scr file execution using Rundll32 through desk.cpl",
    "context": "",
    "output": "In order to detect registry key established after masqueraded .scr file execution using Rundll32 through desk.cpl, you should: Monitor Windows registry settings changes, focusing specifically on the event where a value is being set. Look out for instances where the 'rundll32.exe' process is involved in modifying registry settings. Pay special attention to changes in the registry targeting the '\\Control Panel\\Desktop\\SCRNSAVE.EXE' path. These modifications often involve the setting or alteration of a screen saver executable (.scr file), which could be indicative of an attack. It is essential to note that modifications ending with '.scr' in the 'Details' of the registry change should raise suspicion. However, changes that include files located within the 'C:\\Windows\\System32\\' or 'C:\\Windows\\SysWOW64\\' directories should be considered with less suspicion, as these could represent legitimate use of screen savers. This method is associated with techniques that involve persistence and masquerading to disguise malicious activities through trusted processes and files. The scrutiny level for these activities is medium due to potential legitimate uses of screen saver settings changes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registry key established after masqueraded .scr file execution using Rundll32 through desk.cpl",
      "answer": "In order to detect registry key established after masqueraded .scr file execution using Rundll32 through desk.cpl, you should: Monitor Windows registry settings changes, focusing specifically on the event where a value is being set. Look out for instances where the 'rundll32.exe' process is involved in modifying registry settings. Pay special attention to changes in the registry targeting the '\\Control Panel\\Desktop\\SCRNSAVE.EXE' path. These modifications often involve the setting or alteration of a screen saver executable (.scr file), which could be indicative of an attack. It is essential to note that modifications ending with '.scr' in the 'Details' of the registry change should raise suspicion. However, changes that include files located within the 'C:\\Windows\\System32\\' or 'C:\\Windows\\SysWOW64\\' directories should be considered with less suspicion, as these could represent legitimate use of screen savers. This method is associated with techniques that involve persistence and masquerading to disguise malicious activities through trusted processes and files. The scrutiny level for these activities is medium due to potential legitimate uses of screen saver settings changes."
    }
  },
  {
    "instruction": "How to detect: loaded kernel modules that did not meet the WHQL signing requirements.",
    "context": "",
    "output": "In order to detect loaded kernel modules that did not meet the WHQL signing requirements, you should monitor the Windows Code Integrity operational logs. Specifically, focus on events with IDs 3082 and 3083, which indicate that a kernel module that doesn't meet the Windows Hardware Quality Labs (WHQL) requirements has been loaded into the system. For Event ID 3082, it's noted that although the kernel module did not meet WHQL requirements, due to the code integrity auditing policy, the image was allowed to load. Event ID 3083, on the other hand, advises checking with the publisher to see if a WHQL compliant kernel module is available because the loaded one did not meet the necessary requirements. \n\nHowever, it's important to apply a filter to exclude certain files associated with VMware tools - specifically `system32\\drivers\\vsock.sys` and `System32\\drivers\\vmci.sys` - as these are known to generate false positives in this context. The detection is highly reliable with few expected false positives, making it an effective measure for identifying potentially malicious or unauthorized kernel modules that could compromise the integrity of the operating system. \n\nThis detection strategy aligns with MITRE ATT&CK tactics related to persistence, privilege escalation, and defense evasion by capturing attempts to load unsigned or unverified kernel modules, which adversaries might exploit to execute malicious payloads or bypass security controls.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loaded kernel modules that did not meet the WHQL signing requirements.",
      "answer": "In order to detect loaded kernel modules that did not meet the WHQL signing requirements, you should monitor the Windows Code Integrity operational logs. Specifically, focus on events with IDs 3082 and 3083, which indicate that a kernel module that doesn't meet the Windows Hardware Quality Labs (WHQL) requirements has been loaded into the system. For Event ID 3082, it's noted that although the kernel module did not meet WHQL requirements, due to the code integrity auditing policy, the image was allowed to load. Event ID 3083, on the other hand, advises checking with the publisher to see if a WHQL compliant kernel module is available because the loaded one did not meet the necessary requirements. \n\nHowever, it's important to apply a filter to exclude certain files associated with VMware tools - specifically `system32\\drivers\\vsock.sys` and `System32\\drivers\\vmci.sys` - as these are known to generate false positives in this context. The detection is highly reliable with few expected false positives, making it an effective measure for identifying potentially malicious or unauthorized kernel modules that could compromise the integrity of the operating system. \n\nThis detection strategy aligns with MITRE ATT&CK tactics related to persistence, privilege escalation, and defense evasion by capturing attempts to load unsigned or unverified kernel modules, which adversaries might exploit to execute malicious payloads or bypass security controls."
    }
  },
  {
    "instruction": "How to detect: creation of a file named \"wpbbin\" in the \"%systemroot%\\system32\\\" directory. Which could be indicative of UEFI based persistence method",
    "context": "",
    "output": "In order to detect creation of a file named \"wpbbin\" in the \"%systemroot%\\system32\\\" directory, which could be indicative of UEFI based persistence method, you should: Monitor the Windows file event logs for any instances where a file named \"wpbbin.exe\" is created in the C:\\Windows\\System32 directory. This activity requires careful observation as it might suggest an attempt at establishing persistence on the system through UEFI manipulation. However, it's important to note that in some cases, this file creation could be a legitimate action performed by hardware manufacturers, such as Lenovo. The alert generated from this monitoring is considered high severity due to the potential for it being a part of a more complex attack strategy aiming at persistent access at a low system level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a file named \"wpbbin\" in the \"%systemroot%\\system32\\\" directory. Which could be indicative of UEFI based persistence method",
      "answer": "In order to detect creation of a file named \"wpbbin\" in the \"%systemroot%\\system32\\\" directory, which could be indicative of UEFI based persistence method, you should: Monitor the Windows file event logs for any instances where a file named \"wpbbin.exe\" is created in the C:\\Windows\\System32 directory. This activity requires careful observation as it might suggest an attempt at establishing persistence on the system through UEFI manipulation. However, it's important to note that in some cases, this file creation could be a legitimate action performed by hardware manufacturers, such as Lenovo. The alert generated from this monitoring is considered high severity due to the potential for it being a part of a more complex attack strategy aiming at persistent access at a low system level."
    }
  },
  {
    "instruction": "Please help me detect the following: access to a file share with a naming schema seen being used during exploitation of CVE-2023-36884",
    "context": "",
    "output": "Sure!\nIn order to detect access to a file share with a naming schema seen being used during exploitation of CVE-2023-36884, you should: focus on monitoring Windows security event logs, especially looking for event ID 5140 which indicates an attempt to access a file share. Essential criteria include the configuration of the advanced audit policy setting for Object Access to Audit File Share for both Success and Failure events. Look specifically for file shares named or paths containing the marker '\\MSHTML_C7\\' or those that match an IP address format (expressed as four groups of numbers ranging from 0 to 255, separated by periods). This detection is crucial as it signals potential exploitation attempts of a specific vulnerability identified as CVE-2023-36884. It's important to note that any hits on these criteria should be treated with caution due to the potential high impact of the threat, though there could be unknown false positives. The approach encapsulates vigilance against tactics and techniques that exploit vulnerabilities in network services, aiming to intercept or manipulate information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "access to a file share with a naming schema seen being used during exploitation of CVE-2023-36884",
      "answer": "In order to detect access to a file share with a naming schema seen being used during exploitation of CVE-2023-36884, you should: focus on monitoring Windows security event logs, especially looking for event ID 5140 which indicates an attempt to access a file share. Essential criteria include the configuration of the advanced audit policy setting for Object Access to Audit File Share for both Success and Failure events. Look specifically for file shares named or paths containing the marker '\\MSHTML_C7\\' or those that match an IP address format (expressed as four groups of numbers ranging from 0 to 255, separated by periods). This detection is crucial as it signals potential exploitation attempts of a specific vulnerability identified as CVE-2023-36884. It's important to note that any hits on these criteria should be treated with caution due to the potential high impact of the threat, though there could be unknown false positives. The approach encapsulates vigilance against tactics and techniques that exploit vulnerabilities in network services, aiming to intercept or manipulate information."
    }
  },
  {
    "instruction": "How can I detect: suspicious process spawning a Chromium based browser process with the 'load-extension' flag to start a instance with custom extensions",
    "context": "",
    "output": "In order to detect a suspicious process spawning a Chromium based browser process with the 'load-extension' flag to start an instance with custom extensions, you should focus on monitoring the creation of processes on Windows systems. Specifically, look out for any instance where a known browser application such as Brave, Chrome, Microsoft Edge, Opera, or Vivaldi (all of which are Chromium-based) is initiated by a parent process commonly associated with script execution or command-line activity. These parent processes include cmd.exe, cscript.exe, mshta.exe, powershell.exe, pwsh.exe, regsvr32.exe, rundll32.exe, and wscript.exe.\n\nThe key aspect to watch for in the command line is the use of `--load-extension=` in conjunction with a path that includes `\\AppData\\Local\\`, indicating an attempt to start the browser with a custom extension, likely for malicious purposes. This activity is considered suspicious and warrants a high level of alert due to the potential for these browsers to be used in a compromise or attack, leveraging unauthorized or dangerous browser extensions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious process spawning a Chromium based browser process with the 'load-extension' flag to start a instance with custom extensions",
      "answer": "In order to detect a suspicious process spawning a Chromium based browser process with the 'load-extension' flag to start an instance with custom extensions, you should focus on monitoring the creation of processes on Windows systems. Specifically, look out for any instance where a known browser application such as Brave, Chrome, Microsoft Edge, Opera, or Vivaldi (all of which are Chromium-based) is initiated by a parent process commonly associated with script execution or command-line activity. These parent processes include cmd.exe, cscript.exe, mshta.exe, powershell.exe, pwsh.exe, regsvr32.exe, rundll32.exe, and wscript.exe.\n\nThe key aspect to watch for in the command line is the use of `--load-extension=` in conjunction with a path that includes `\\AppData\\Local\\`, indicating an attempt to start the browser with a custom extension, likely for malicious purposes. This activity is considered suspicious and warrants a high level of alert due to the potential for these browsers to be used in a compromise or attack, leveraging unauthorized or dangerous browser extensions."
    }
  },
  {
    "instruction": "How can I detect: user has potentially entered their password into the\nusername field, which will cause the password to be retained in log files.\n",
    "context": "",
    "output": "In order to detect when a user has potentially entered their password into the username field, which will cause the password to be retained in log files, you should monitor for failed login attempts in the Okta service. Specifically, look for log entries labeled with the event type 'core.user_auth.login_failed'. However, it is crucial to filter out entries that might falsely trigger the detection. This involves excluding entries where the 'actor_alternateid' appears to be a service account (typically starting with '0oa') or resembles a valid email address format. The rationale behind this exclusion is that Okta service account names and user names usually follow specific formatting rules, and legitimate account names are often structured like email addresses. Therefore, by excluding these patterns, the focus is narrowed down to anomalous entries that could indicate a user mistakenly inputting their password into the username field. \n\nBe mindful of potential false negatives, especially in scenarios where failed login attempts include input that looks like a valid email address in the password field. Despite these considerations, false positives are deemed unlikely. Given the potential security risk posed by passwords being stored in logs due to such input mistakes, the severity level for this detection scenario is classified as high.\n\nThis approach aligns with MITRE ATT&CK tactics and techniques, although they are not explicitly mentioned in the provided context, the underlying concern relates to credential access attempts and improper handling of credentials, which could inadvertently expose sensitive information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user has potentially entered their password into the\nusername field, which will cause the password to be retained in log files.\n",
      "answer": "In order to detect when a user has potentially entered their password into the username field, which will cause the password to be retained in log files, you should monitor for failed login attempts in the Okta service. Specifically, look for log entries labeled with the event type 'core.user_auth.login_failed'. However, it is crucial to filter out entries that might falsely trigger the detection. This involves excluding entries where the 'actor_alternateid' appears to be a service account (typically starting with '0oa') or resembles a valid email address format. The rationale behind this exclusion is that Okta service account names and user names usually follow specific formatting rules, and legitimate account names are often structured like email addresses. Therefore, by excluding these patterns, the focus is narrowed down to anomalous entries that could indicate a user mistakenly inputting their password into the username field. \n\nBe mindful of potential false negatives, especially in scenarios where failed login attempts include input that looks like a valid email address in the password field. Despite these considerations, false positives are deemed unlikely. Given the potential security risk posed by passwords being stored in logs due to such input mistakes, the severity level for this detection scenario is classified as high.\n\nThis approach aligns with MITRE ATT&CK tactics and techniques, although they are not explicitly mentioned in the provided context, the underlying concern relates to credential access attempts and improper handling of credentials, which could inadvertently expose sensitive information."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of a new office macro files on the systems",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation of new office macro files on the systems, you should:\nMonitor file events on Windows systems, specifically looking for the creation of files with extensions that indicate they are macro-enabled office documents. These extensions include '.docm' (macro-enabled Word documents), '.dotm' (macro-enabled Word templates), '.xlsm' (macro-enabled Excel workbooks), '.xltm' (macro-enabled Excel templates), '.potm' (macro-enabled PowerPoint templates), and '.pptm' (macro-enabled PowerPoint presentations). It's important to note that such detections could be common in environments where using macro-enabled documents is a regular practice, thus this activity is considered to have a low-level threat indication.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new office macro files on the systems",
      "answer": "In order to detect the creation of new office macro files on the systems, you should:\nMonitor file events on Windows systems, specifically looking for the creation of files with extensions that indicate they are macro-enabled office documents. These extensions include '.docm' (macro-enabled Word documents), '.dotm' (macro-enabled Word templates), '.xlsm' (macro-enabled Excel workbooks), '.xltm' (macro-enabled Excel templates), '.potm' (macro-enabled PowerPoint templates), and '.pptm' (macro-enabled PowerPoint presentations). It's important to note that such detections could be common in environments where using macro-enabled documents is a regular practice, thus this activity is considered to have a low-level threat indication."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.",
    "context": "",
    "output": "In order to detect the execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti, you should monitor the process creation logs on Windows systems. Specifically, look for processes where the original filename was \"megasync.exe\" but the actual image path does not end with \"\\megasync.exe\". This indicates that the executable, typically associated with the legitimate MegaSync application, has been renamed, a tactic commonly observed in ransomware attacks to evade detection. Be aware of potential false positives, which may arise from software that includes MegaSync functionality under a different name or from administrators who have legitimate reasons to rename the MegaSync executable. This detection strategy is of high importance due to its association with significant ransomware threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.",
      "answer": "In order to detect the execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti, you should monitor the process creation logs on Windows systems. Specifically, look for processes where the original filename was \"megasync.exe\" but the actual image path does not end with \"\\megasync.exe\". This indicates that the executable, typically associated with the legitimate MegaSync application, has been renamed, a tactic commonly observed in ransomware attacks to evade detection. Be aware of potential false positives, which may arise from software that includes MegaSync functionality under a different name or from administrators who have legitimate reasons to rename the MegaSync executable. This detection strategy is of high importance due to its association with significant ransomware threats."
    }
  },
  {
    "instruction": "How can I detect: exploitation of Zoho ManageEngine Desktop Central Java Deserialization vulnerability reported as CVE-2020-10189",
    "context": "",
    "output": "In order to detect the exploitation of Zoho ManageEngine Desktop Central Java Deserialization vulnerability reported as CVE-2020-10189, you should monitor Windows process creation logs for any instances where the Java executable associated with the Desktop Central Server ('DesktopCentral_Server\\jre\\bin\\java.exe') launches a series of potentially malicious executables. These include command line tools and utilities such as 'cmd.exe', 'powershell.exe', 'pwsh.exe' (PowerShell Core), 'bitsadmin.exe', 'systeminfo.exe', 'net.exe', 'net1.exe', 'reg.exe', and 'query.exe'. The initiation of these processes by the Java executable could indicate an exploitation attempt, where attackers may be endeavoring to execute commands, manipulate systems, or extract sensitive information subsequent to exploiting the CVE-2020-10189 vulnerability. Considering the high-risk level associated with this behavior, any detections warrant immediate investigation despite the possibility of unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation of Zoho ManageEngine Desktop Central Java Deserialization vulnerability reported as CVE-2020-10189",
      "answer": "In order to detect the exploitation of Zoho ManageEngine Desktop Central Java Deserialization vulnerability reported as CVE-2020-10189, you should monitor Windows process creation logs for any instances where the Java executable associated with the Desktop Central Server ('DesktopCentral_Server\\jre\\bin\\java.exe') launches a series of potentially malicious executables. These include command line tools and utilities such as 'cmd.exe', 'powershell.exe', 'pwsh.exe' (PowerShell Core), 'bitsadmin.exe', 'systeminfo.exe', 'net.exe', 'net1.exe', 'reg.exe', and 'query.exe'. The initiation of these processes by the Java executable could indicate an exploitation attempt, where attackers may be endeavoring to execute commands, manipulate systems, or extract sensitive information subsequent to exploiting the CVE-2020-10189 vulnerability. Considering the high-risk level associated with this behavior, any detections warrant immediate investigation despite the possibility of unknown false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: successful export of an Exchange mailbox to untypical directory or with aspx name suffix which can be used to place a webshell or the needed role assignment for it",
    "context": "",
    "output": "In order to detect a successful export of an Exchange mailbox to an untypical directory or with an aspx name suffix which can be used to place a webshell or the needed role assignment for it, you should monitor the Microsoft Exchange Management service on Windows systems for specific suspicious activities. Look for the execution of the 'New-MailboxExportRequest' command, especially when it is coupled with the '-Mailbox' parameter. This command is critical to watch for because it's the primary way mailboxes are exported. Attention should be paid to exports that specify a file path leading to a network share location or have a file name ending with '.aspx'. The latter is particularly concerning as '.aspx' files are dynamic web pages, which could indicate an attempt to deploy a webshell.\n\nAdditionally, monitor for the creation of new management role assignments using the 'New-ManagementRoleAssignment' command together with parameters specifying the \"Mailbox Import Export\" role and a user. This role assignment is a prerequisite for a user to export mailboxes, thus an attacker might assign it to a compromised account to exfiltrate mailbox data.\n\nThese activities are critical to observe because they could indicate an attacker's attempt to steal or manipulate mailbox data by exporting it to a location under their control or by preparing the environment to do so through role assignments. This behavior is tagged under tactics and techniques such as Credential Access, Exfiltration, and Persistence, which are commonly part of broader attack campaigns targeting organizational data.\n\nConsidering these activities yield a low likelihood of being legitimate and are flagged as critical, immediate investigation and remediation actions should be taken upon detection to mitigate potential security breaches or data exfiltration efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "successful export of an Exchange mailbox to untypical directory or with aspx name suffix which can be used to place a webshell or the needed role assignment for it",
      "answer": "In order to detect a successful export of an Exchange mailbox to an untypical directory or with an aspx name suffix which can be used to place a webshell or the needed role assignment for it, you should monitor the Microsoft Exchange Management service on Windows systems for specific suspicious activities. Look for the execution of the 'New-MailboxExportRequest' command, especially when it is coupled with the '-Mailbox' parameter. This command is critical to watch for because it's the primary way mailboxes are exported. Attention should be paid to exports that specify a file path leading to a network share location or have a file name ending with '.aspx'. The latter is particularly concerning as '.aspx' files are dynamic web pages, which could indicate an attempt to deploy a webshell.\n\nAdditionally, monitor for the creation of new management role assignments using the 'New-ManagementRoleAssignment' command together with parameters specifying the \"Mailbox Import Export\" role and a user. This role assignment is a prerequisite for a user to export mailboxes, thus an attacker might assign it to a compromised account to exfiltrate mailbox data.\n\nThese activities are critical to observe because they could indicate an attacker's attempt to steal or manipulate mailbox data by exporting it to a location under their control or by preparing the environment to do so through role assignments. This behavior is tagged under tactics and techniques such as Credential Access, Exfiltration, and Persistence, which are commonly part of broader attack campaigns targeting organizational data.\n\nConsidering these activities yield a low likelihood of being legitimate and are flagged as critical, immediate investigation and remediation actions should be taken upon detection to mitigate potential security breaches or data exfiltration efforts."
    }
  },
  {
    "instruction": "How to detect: suspicious curl process start the adds a file to a web request",
    "context": "",
    "output": "In order to detect a suspicious curl process start that adds a file to a web request, you should: Monitor Linux-based systems for the initiation of curl processes that are employing command-line flags indicative of web requests containing file data. Specifically, look for curl commands concluding with '/curl' and command line options that signify file upload or data inclusion in the web request. These options include '--form' (or '--form-string'), '--upload-file', '--data', '--data-' (to catch variants like '--data-ascii', '--data-binary', '--data-raw', '--data-urlencode'), and also short-hand flags matched using a regular expression to find '-F', '-T', '-d' with a space following. However, curl commands targeting 'localhost' or '127.0.0.1' should be considered optional filters and their appearances could exempt an event from being flagged to reduce the incidence of false positives, which might often originate from scripts developed internally by administrators or developers. The analysis is of medium importance level and contributes towards identifying potential data exfiltration or malware communication efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious curl process start the adds a file to a web request",
      "answer": "In order to detect a suspicious curl process start that adds a file to a web request, you should: Monitor Linux-based systems for the initiation of curl processes that are employing command-line flags indicative of web requests containing file data. Specifically, look for curl commands concluding with '/curl' and command line options that signify file upload or data inclusion in the web request. These options include '--form' (or '--form-string'), '--upload-file', '--data', '--data-' (to catch variants like '--data-ascii', '--data-binary', '--data-raw', '--data-urlencode'), and also short-hand flags matched using a regular expression to find '-F', '-T', '-d' with a space following. However, curl commands targeting 'localhost' or '127.0.0.1' should be considered optional filters and their appearances could exempt an event from being flagged to reduce the incidence of false positives, which might often originate from scripts developed internally by administrators or developers. The analysis is of medium importance level and contributes towards identifying potential data exfiltration or malware communication efforts."
    }
  },
  {
    "instruction": "Can you explain how to detect: volume shadow copy service initialization and processing via esentutl. Registry keys such as HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\VSS\\\\Diag\\\\VolSnap\\\\Volume are captured.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the initiation and execution of the attack on the mitigation process using the Sigma rule focus on locating the detection of the application of the detection strategy to detecting the initiation and processing of the sigma rules. The attack is the modification of the log file data, and the execution of detection involves examining memory and CPU the representation of the detection issue. This detection of security should be the examination of the combination of the detection on the detection on the initiation and the processing of software and hardware on the detection action, you should analyze the log entries for registry events on Windows systems. Look for any occurrences where the registry key path includes 'System\\CurrentCertSet\\Services\\VSC\\Scheduled\\TaskName' activities involving the file 'VSS'.\n\nConcentrate specifically on instances where the TargetObject attribute contains the path 'System\\CurrentSet\\Services\\VSS' and the operation involves the execution of 'exe'. However, you need to filter out any events where the TargetObject refers to 'System\\CurrentSet\\Services\\VSS\\Start' to reduce the detection of false positives. This approach is necessary for identifying attempts to make unauthorized modifications to the registry paths associated with the Volume Shadow Copy Service (VSS). These tactics are usually associated with adversarial actions such as persistence, privilege escalation, and defense evasion, aiming to maintain access or avoid detection. \n\nHowever, always be mindful of the potential for false positives in these detections.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "volume shadow copy service initialization and processing via esentutl. Registry keys such as HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\VSS\\\\Diag\\\\VolSnap\\\\Volume are captured.",
      "answer": "In order to detect the initiation and execution of the attack on the mitigation process using the Sigma rule focus on locating the detection of the application of the detection strategy to detecting the initiation and processing of the sigma rules. The attack is the modification of the log file data, and the execution of detection involves examining memory and CPU the representation of the detection issue. This detection of security should be the examination of the combination of the detection on the detection on the initiation and the processing of software and hardware on the detection action, you should analyze the log entries for registry events on Windows systems. Look for any occurrences where the registry key path includes 'System\\CurrentCertSet\\Services\\VSC\\Scheduled\\TaskName' activities involving the file 'VSS'.\n\nConcentrate specifically on instances where the TargetObject attribute contains the path 'System\\CurrentSet\\Services\\VSS' and the operation involves the execution of 'exe'. However, you need to filter out any events where the TargetObject refers to 'System\\CurrentSet\\Services\\VSS\\Start' to reduce the detection of false positives. This approach is necessary for identifying attempts to make unauthorized modifications to the registry paths associated with the Volume Shadow Copy Service (VSS). These tactics are usually associated with adversarial actions such as persistence, privilege escalation, and defense evasion, aiming to maintain access or avoid detection. \n\nHowever, always be mindful of the potential for false positives in these detections."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of a new bits job by PowerShell",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation of a new bits job by PowerShell, you should focus on monitoring Windows Background Intelligent Transfer Service (BITS) client logs. Specifically, look for events with EventID 3, which signifies the creation of a new BITS transfer job. You'll want to zero in on those jobs that are initiated by PowerShell, identifiable by the process path ending with either '\\powershell.exe' or '\\pwsh.exe'. While this detection mechanism is in place, it's important to remember that there could be legitimate administrator use of PowerShell scripts that also create BITS jobs. Therefore, these instances might be flagged as false positives. The severity level for this type of detection is considered low. The techniques tagged with this activity align with the execution and command and control tactics, focusing on the technique that involves the use of BITS jobs for malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new bits job by PowerShell",
      "answer": "In order to detect the creation of a new bits job by PowerShell, you should focus on monitoring Windows Background Intelligent Transfer Service (BITS) client logs. Specifically, look for events with EventID 3, which signifies the creation of a new BITS transfer job. You'll want to zero in on those jobs that are initiated by PowerShell, identifiable by the process path ending with either '\\powershell.exe' or '\\pwsh.exe'. While this detection mechanism is in place, it's important to remember that there could be legitimate administrator use of PowerShell scripts that also create BITS jobs. Therefore, these instances might be flagged as false positives. The severity level for this type of detection is considered low. The techniques tagged with this activity align with the execution and command and control tactics, focusing on the technique that involves the use of BITS jobs for malicious activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: This detection excludes known namped pipes accessible remotely and notify on newly observed ones, may help to detect lateral movement and remote exec using named pipes",
    "context": "",
    "output": "Certainly!\n\nIn order to detect lateral movement and remote execution using named pipes, while excluding known named pipes that are accessible remotely to avoid false positives, you should focus on monitoring Windows security audit logs. Specifically, adjust the advanced audit policy setting for \"Object Access > Audit Detailed File Share\" to log both Success and Failure events. Look for events with an ID of 5145 that indicate an attempt to access the special IPC$ share, which is used for inter-process communication. This detection is crucial as unauthorized access to the IPC$ share might indicate an attempt for lateral movement or remote execution.\n\nHowever, to minimize false positives, it's important to exclude events related to access attempts on a list of known legitimate named pipes like 'atsvc', 'samr', 'lsarpc', 'lsass', 'winreg', 'netlogon', 'srvsvc', 'protected_storage', 'wkssvc', 'browser', 'netdfs', 'svcctl', 'spoolss', 'ntsvcs', 'LSM_API_service', 'HydraLsPipe', 'TermSrv_API_service', 'MsFteWds', 'sql\\\\query', and 'eventlog'. These named pipes are commonly used by legitimate processes and services for normal operations.\n\nTo further ensure accuracy, it's advised to periodically update the excluded named pipes list with any new legitimate named pipes observed, as this aids in maintaining an effective detection strategy that accurately identifies suspicious activities related to lateral movement and remote execution while minimizing false alarms. Detecting such activities is aligned with the tactics and techniques of lateral movement and execution, providing an important layer in defending against sophisticated attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This detection excludes known namped pipes accessible remotely and notify on newly observed ones, may help to detect lateral movement and remote exec using named pipes",
      "answer": "In order to detect lateral movement and remote execution using named pipes, while excluding known named pipes that are accessible remotely to avoid false positives, you should focus on monitoring Windows security audit logs. Specifically, adjust the advanced audit policy setting for \"Object Access > Audit Detailed File Share\" to log both Success and Failure events. Look for events with an ID of 5145 that indicate an attempt to access the special IPC$ share, which is used for inter-process communication. This detection is crucial as unauthorized access to the IPC$ share might indicate an attempt for lateral movement or remote execution.\n\nHowever, to minimize false positives, it's important to exclude events related to access attempts on a list of known legitimate named pipes like 'atsvc', 'samr', 'lsarpc', 'lsass', 'winreg', 'netlogon', 'srvsvc', 'protected_storage', 'wkssvc', 'browser', 'netdfs', 'svcctl', 'spoolss', 'ntsvcs', 'LSM_API_service', 'HydraLsPipe', 'TermSrv_API_service', 'MsFteWds', 'sql\\\\query', and 'eventlog'. These named pipes are commonly used by legitimate processes and services for normal operations.\n\nTo further ensure accuracy, it's advised to periodically update the excluded named pipes list with any new legitimate named pipes observed, as this aids in maintaining an effective detection strategy that accurately identifies suspicious activities related to lateral movement and remote execution while minimizing false alarms. Detecting such activities is aligned with the tactics and techniques of lateral movement and execution, providing an important layer in defending against sophisticated attacks."
    }
  },
  {
    "instruction": "How to detect: DNS queries to \"ufile.io\". Which is often abused by malware for upload and exfiltration",
    "context": "",
    "output": "In order to detect DNS queries to \"ufile.io\", which is often abused by malware for upload and exfiltration, you should focus on monitoring DNS client events within Windows environments. This involves ensuring that the Microsoft-Windows-DNS Client Events/Operational Event Log is enabled and collected. Specifically, look for events with an EventID of 3008, which indicate DNS queries. Within these events, pay close attention to queries that contain the domain 'ufile.io', as this is a known vector for malicious activity, specifically related to malware's use of the domain for uploading and exfiltrating data. However, it's important to consider that there can be legitimate DNS queries and usages of Ufile, which are identified as potential false positives in analyzing these events. The level of concern for such detections is categorized as high, underlining the importance and potential severity associated with these activities. \n\nMonitoring for these specific DNS query events will aid in identifying possible malicious activities related to common tactics and techniques used by adversaries, such as \"Exfiltration Over Command and Control Channel\". This aligns with understanding and mitigating threats that leverage DNS queries to domains known for malicious use, thus enhancing the security posture against such malware-related activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DNS queries to \"ufile.io\". Which is often abused by malware for upload and exfiltration",
      "answer": "In order to detect DNS queries to \"ufile.io\", which is often abused by malware for upload and exfiltration, you should focus on monitoring DNS client events within Windows environments. This involves ensuring that the Microsoft-Windows-DNS Client Events/Operational Event Log is enabled and collected. Specifically, look for events with an EventID of 3008, which indicate DNS queries. Within these events, pay close attention to queries that contain the domain 'ufile.io', as this is a known vector for malicious activity, specifically related to malware's use of the domain for uploading and exfiltrating data. However, it's important to consider that there can be legitimate DNS queries and usages of Ufile, which are identified as potential false positives in analyzing these events. The level of concern for such detections is categorized as high, underlining the importance and potential severity associated with these activities. \n\nMonitoring for these specific DNS query events will aid in identifying possible malicious activities related to common tactics and techniques used by adversaries, such as \"Exfiltration Over Command and Control Channel\". This aligns with understanding and mitigating threats that leverage DNS queries to domains known for malicious use, thus enhancing the security posture against such malware-related activities."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of a macro file for Outlook.",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of a macro file for Outlook, you should focus on monitoring file event logs on Windows systems. Specifically, look for events where the target file name ends with '\\Microsoft\\Outlook\\VbaProject.OTM', which indicates the creation or modification of an Outlook macro file. However, it's important to exclude any events triggered by the legitimate Outlook application itself, which can be identified if the image path ends with '\\outlook.exe'. This approach helps in pinpointing potentially malicious activities while minimizing the likelihood of false positives, which are considered unlikely in this context. The detection of such activities is crucial as it is related to tactics and techniques like Execution, Persistence, and Privilege Escalation, often used by attackers to gain or maintain access to systems via malicious macros.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a macro file for Outlook.",
      "answer": "In order to detect the creation of a macro file for Outlook, you should focus on monitoring file event logs on Windows systems. Specifically, look for events where the target file name ends with '\\Microsoft\\Outlook\\VbaProject.OTM', which indicates the creation or modification of an Outlook macro file. However, it's important to exclude any events triggered by the legitimate Outlook application itself, which can be identified if the image path ends with '\\outlook.exe'. This approach helps in pinpointing potentially malicious activities while minimizing the likelihood of false positives, which are considered unlikely in this context. The detection of such activities is crucial as it is related to tactics and techniques like Execution, Persistence, and Privilege Escalation, often used by attackers to gain or maintain access to systems via malicious macros."
    }
  },
  {
    "instruction": "How can I detect: attempts to remove Windows Defender configuration using the 'MpPreference' cmdlet",
    "context": "",
    "output": "In order to detect attempts to remove Windows Defender configuration using the 'MpPreference' cmdlet, you should: Monitor PowerShell script executions within Windows environments, ensuring that Script Block Logging is active for detailed analysis. Specifically, lookout for scripts indicating an attempt to delete or modify Windows Defender configurations. This includes any script text containing 'Remove-MpPreference', which directly attempts to alter Defender settings. Further, pay attention to modifications targeting Defender's protective features, like altering controlled folder access, attack surface reduction rules, or the process of checking for signatures before running scans. These actions can significantly weaken a system's defenses and are usually executed via PowerShell scripts. It's crucial to discern between malicious attempts and legitimate administrative use of such scripts to adjust security settings, as both can appear similar in logs. The importance of monitoring for these specific script contents is underscored by the high priority level assigned, reflecting the potential risk to system security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to remove Windows Defender configuration using the 'MpPreference' cmdlet",
      "answer": "In order to detect attempts to remove Windows Defender configuration using the 'MpPreference' cmdlet, you should: Monitor PowerShell script executions within Windows environments, ensuring that Script Block Logging is active for detailed analysis. Specifically, lookout for scripts indicating an attempt to delete or modify Windows Defender configurations. This includes any script text containing 'Remove-MpPreference', which directly attempts to alter Defender settings. Further, pay attention to modifications targeting Defender's protective features, like altering controlled folder access, attack surface reduction rules, or the process of checking for signatures before running scans. These actions can significantly weaken a system's defenses and are usually executed via PowerShell scripts. It's crucial to discern between malicious attempts and legitimate administrative use of such scripts to adjust security settings, as both can appear similar in logs. The importance of monitoring for these specific script contents is underscored by the high priority level assigned, reflecting the potential risk to system security."
    }
  },
  {
    "instruction": "Explain how should I detect the following: service binary running in a suspicious directory",
    "context": "",
    "output": "In order to detect a service binary running in a suspicious directory, you should: Monitor the process creation events on Windows systems, specifically looking for any processes that are initiated from directories that are uncommon for regular service binaries to execute from. This includes directories like \"\\Users\\Public\\\", \"\\$Recycle.bin\", \"\\Users\\All Users\\\", \"\\Users\\Default\\\", \"\\Users\\Contacts\\\", \"\\Users\\Searches\\\", \"C:\\Perflogs\\\", \"\\config\\systemprofile\\\", \"\\Windows\\Fonts\\\", \"\\Windows\\IME\\\", and \"\\Windows\\addins\\\". Furthermore, pay close attention when these processes are spawned by service management processes typically found in legitimate scenarios, namely \"services.exe\" and \"svchost.exe\". Any such occurrence should be treated with a high level of suspicion as it may indicate a malicious activity where an attacker is trying to execute or masquerade malware as a legitimate service in unusual directories, often to evade detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "service binary running in a suspicious directory",
      "answer": "In order to detect a service binary running in a suspicious directory, you should: Monitor the process creation events on Windows systems, specifically looking for any processes that are initiated from directories that are uncommon for regular service binaries to execute from. This includes directories like \"\\Users\\Public\\\", \"\\$Recycle.bin\", \"\\Users\\All Users\\\", \"\\Users\\Default\\\", \"\\Users\\Contacts\\\", \"\\Users\\Searches\\\", \"C:\\Perflogs\\\", \"\\config\\systemprofile\\\", \"\\Windows\\Fonts\\\", \"\\Windows\\IME\\\", and \"\\Windows\\addins\\\". Furthermore, pay close attention when these processes are spawned by service management processes typically found in legitimate scenarios, namely \"services.exe\" and \"svchost.exe\". Any such occurrence should be treated with a high level of suspicion as it may indicate a malicious activity where an attacker is trying to execute or masquerade malware as a legitimate service in unusual directories, often to evade detection."
    }
  },
  {
    "instruction": "Please help me detect the following: powershell script installed as a Service",
    "context": "",
    "output": "Sure!\nIn order to detect a PowerShell script installed as a Service, you should focus on monitoring Windows Security logs, specifically looking for events with Event ID 4697. This ID indicates a service has been installed on the system. It's crucial that the 'System Security Extension' audit subcategory is enabled, as this allows for logging of Event ID 4697, which is pivotal for detection.\n\nLook for instances where the ServiceFileName attribute contains references to 'powershell' or 'pwsh'. This indicates that a PowerShell script has been installed as a service, which could be potentially malicious or unauthorized.\n\nBe aware that there may be instances where such detections are false positives, as the use of PowerShell or PowerShell Core (pwsh) scripts installed as services could be part of legitimate administrative tasks or applications. These detections are categorized with a high level of severity due to the potential misuse of PowerShell scripts to execute malicious activities on Windows systems.\n\nThe tactic associated with this activity is Persistence, with the technique being Create or Modify System Process. Understanding and monitoring for this behavior is crucial in identifying and mitigating potential threats leveraging PowerShell scripts installed as services for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "powershell script installed as a Service",
      "answer": "In order to detect a PowerShell script installed as a Service, you should focus on monitoring Windows Security logs, specifically looking for events with Event ID 4697. This ID indicates a service has been installed on the system. It's crucial that the 'System Security Extension' audit subcategory is enabled, as this allows for logging of Event ID 4697, which is pivotal for detection.\n\nLook for instances where the ServiceFileName attribute contains references to 'powershell' or 'pwsh'. This indicates that a PowerShell script has been installed as a service, which could be potentially malicious or unauthorized.\n\nBe aware that there may be instances where such detections are false positives, as the use of PowerShell or PowerShell Core (pwsh) scripts installed as services could be part of legitimate administrative tasks or applications. These detections are categorized with a high level of severity due to the potential misuse of PowerShell scripts to execute malicious activities on Windows systems.\n\nThe tactic associated with this activity is Persistence, with the technique being Create or Modify System Process. Understanding and monitoring for this behavior is crucial in identifying and mitigating potential threats leveraging PowerShell scripts installed as services for malicious purposes."
    }
  },
  {
    "instruction": "How can I detect: An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.",
    "context": "",
    "output": "In order to detect when an adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network, you should: Monitor Windows PowerShell script activity, specifically looking for scripts that contain the operations \"-Recurse\", \"|\", and \"Compress-Archive\" in sequence. This set of commands suggests the script is being used to search through directories recursively, pipe the results, and then compress the findings into an archive. It's essential to have Script Block Logging enabled to capture these detailed script executions. However, be aware that this detection could generate false positives, especially in environments where archival operations via PowerShell are common. The security concern level for this activity is considered low, indicating it might often be legitimate but could be abused for malicious purposes during advanced stages of cyber attacks. This approach aligns with identifying potential tactics and techniques used for data exfiltration efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.",
      "answer": "In order to detect when an adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network, you should: Monitor Windows PowerShell script activity, specifically looking for scripts that contain the operations \"-Recurse\", \"|\", and \"Compress-Archive\" in sequence. This set of commands suggests the script is being used to search through directories recursively, pipe the results, and then compress the findings into an archive. It's essential to have Script Block Logging enabled to capture these detailed script executions. However, be aware that this detection could generate false positives, especially in environments where archival operations via PowerShell are common. The security concern level for this activity is considered low, indicating it might often be legitimate but could be abused for malicious purposes during advanced stages of cyber attacks. This approach aligns with identifying potential tactics and techniques used for data exfiltration efforts."
    }
  },
  {
    "instruction": "How can I detect: specific process characteristics of Winnti Pipemon malware reported by ESET",
    "context": "",
    "output": "In order to detect specific process characteristics of Winnti Pipemon malware reported by ESET, you should: focus on the creation of processes within Windows environments. The detection mechanism should look for processes that are initiated with command lines containing 'setup0.exe -p' or 'setup.exe'. Additionally, for those processes started with 'setup.exe', further scrutiny is needed if the command line ends with '-x:0', '-x:1', or '-x:2'. These specific patterns are indicative of the attack strategy employed by the Winnti Pipemon malware. It is crucial, however, to be aware that there might be legitimate software installation processes that use similar command line parameters, which could lead to false positives. The severity of this detection is considered critical due to the malicious nature of the involved software.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific process characteristics of Winnti Pipemon malware reported by ESET",
      "answer": "In order to detect specific process characteristics of Winnti Pipemon malware reported by ESET, you should: focus on the creation of processes within Windows environments. The detection mechanism should look for processes that are initiated with command lines containing 'setup0.exe -p' or 'setup.exe'. Additionally, for those processes started with 'setup.exe', further scrutiny is needed if the command line ends with '-x:0', '-x:1', or '-x:2'. These specific patterns are indicative of the attack strategy employed by the Winnti Pipemon malware. It is crucial, however, to be aware that there might be legitimate software installation processes that use similar command line parameters, which could lead to false positives. The severity of this detection is considered critical due to the malicious nature of the involved software."
    }
  },
  {
    "instruction": "How to detect: suspicious WMI event filter and command line event consumer based on WMI and Security Logs.",
    "context": "",
    "output": "In order to detect suspicious WMI event filter and command line event consumer based on WMI and Security Logs, you should: Monitor Windows security logs for instances where the event ID is 4662, which indicates an operation was performed on an object. Specifically, focus on scenarios where the object type is related to \"WMI Namespace\" and the object name contains the term \"subscription\u201d. These instances can signal potentially malicious activities since attackers might exploit WMI subscriptions to execute arbitrary code or maintain persistence on a host. Be aware that the reliability of detections might vary as the dataset being analyzed could be too small or not sufficiently varied; hence, further testing might be needed to reduce false positives. The severity level for this activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious WMI event filter and command line event consumer based on WMI and Security Logs.",
      "answer": "In order to detect suspicious WMI event filter and command line event consumer based on WMI and Security Logs, you should: Monitor Windows security logs for instances where the event ID is 4662, which indicates an operation was performed on an object. Specifically, focus on scenarios where the object type is related to \"WMI Namespace\" and the object name contains the term \"subscription\u201d. These instances can signal potentially malicious activities since attackers might exploit WMI subscriptions to execute arbitrary code or maintain persistence on a host. Be aware that the reliability of detections might vary as the dataset being analyzed could be too small or not sufficiently varied; hence, further testing might be needed to reduce false positives. The severity level for this activity is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: an unexpected file being modified by dns.exe which my indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)",
    "context": "",
    "output": "Sure!\nIn order to detect an unexpected file being modified by dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed), you should: Monitor the file system for changes on Windows systems, focusing on files that are modified by processes named dns.exe. However, it's important to exclude any modifications to files named dns.log, as these are likely normal activity. This kind of monitoring aims to identify potentially malicious activity where dns.exe, which should not typically modify arbitrary files, is possibly being exploited. The significance of this monitoring is underscored by its high severity level, underscoring the critical nature of detecting such anomalies which could denote exploitation attempts similar to those observed in the wild with CVE-2020-1350, aka SigRed. Detecting modifications by dns.exe to files other than dns.log contributes to an organization's broader efforts to safeguard against remote code execution attacks and other exploitation techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an unexpected file being modified by dns.exe which my indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)",
      "answer": "In order to detect an unexpected file being modified by dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed), you should: Monitor the file system for changes on Windows systems, focusing on files that are modified by processes named dns.exe. However, it's important to exclude any modifications to files named dns.log, as these are likely normal activity. This kind of monitoring aims to identify potentially malicious activity where dns.exe, which should not typically modify arbitrary files, is possibly being exploited. The significance of this monitoring is underscored by its high severity level, underscoring the critical nature of detecting such anomalies which could denote exploitation attempts similar to those observed in the wild with CVE-2020-1350, aka SigRed. Detecting modifications by dns.exe to files other than dns.log contributes to an organization's broader efforts to safeguard against remote code execution attacks and other exploitation techniques."
    }
  },
  {
    "instruction": "Can you explain how to detect: network connections made by the \"hh.exe\" process, which could indicate the execution/download of remotely hosted .chm files",
    "context": "",
    "output": "Certainly!\n\nIn order to detect network connections made by the \"hh.exe\" process, which could indicate the execution/download of remotely hosted .chm files, you should: Monitor network connections made by Windows systems, focusing on those initiated by the \"hh.exe\" process. Notably, this process should raise suspicion if it initiates connections to common web or network service ports such as 80 (HTTP), 443 (HTTPS), 135 (RPC), and 445 (SMB/CIFS). These connections are indicative of potential unauthorized or malicious activities, particularly involving the execution or download of CHM (Compiled HTML Help) files remotely. It\u2019s critical to be aware, however, that not all activities flagged by this criterion are inherently malicious, and there may be unknown, benign cases leading to false positives. The severity of detections based on this criterion is considered medium, underscoring the importance of further investigation into each flagged event to confirm malicious intent or benign nature. This monitoring strategy aligns with understanding the tactics and techniques of adversaries as outlined by MITRE ATT&CK, notably those involving execution and command and control, highlighting the emphasis on vigilance against methods used to execute or download malicious files.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "network connections made by the \"hh.exe\" process, which could indicate the execution/download of remotely hosted .chm files",
      "answer": "In order to detect network connections made by the \"hh.exe\" process, which could indicate the execution/download of remotely hosted .chm files, you should: Monitor network connections made by Windows systems, focusing on those initiated by the \"hh.exe\" process. Notably, this process should raise suspicion if it initiates connections to common web or network service ports such as 80 (HTTP), 443 (HTTPS), 135 (RPC), and 445 (SMB/CIFS). These connections are indicative of potential unauthorized or malicious activities, particularly involving the execution or download of CHM (Compiled HTML Help) files remotely. It\u2019s critical to be aware, however, that not all activities flagged by this criterion are inherently malicious, and there may be unknown, benign cases leading to false positives. The severity of detections based on this criterion is considered medium, underscoring the importance of further investigation into each flagged event to confirm malicious intent or benign nature. This monitoring strategy aligns with understanding the tactics and techniques of adversaries as outlined by MITRE ATT&CK, notably those involving execution and command and control, highlighting the emphasis on vigilance against methods used to execute or download malicious files."
    }
  },
  {
    "instruction": "How to detect: creation of diagcab file, which could be caused by some legitimate installer or is a sign of exploitation (review the filename and its location)",
    "context": "",
    "output": "In order to detect the creation of diagcab file, which could be caused by some legitimate installer or is a sign of exploitation (review the filename and its location), you should: Monitor Windows file event logs for the creation of files ending with the '.diagcab' extension. This activity can indicate a potential threat, as diagcab files are often associated with diagnostics and can be exploited by attackers. It's important to review the filename and its location to differentiate between legitimate use and potential malicious activity. Be aware that there might be false positives, such as legitimate Microsoft diagcab files, hence the importance of context in assessing security alerts. The sensitivity level for this type of detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of diagcab file, which could be caused by some legitimate installer or is a sign of exploitation (review the filename and its location)",
      "answer": "In order to detect the creation of diagcab file, which could be caused by some legitimate installer or is a sign of exploitation (review the filename and its location), you should: Monitor Windows file event logs for the creation of files ending with the '.diagcab' extension. This activity can indicate a potential threat, as diagcab files are often associated with diagnostics and can be exploited by attackers. It's important to review the filename and its location to differentiate between legitimate use and potential malicious activity. Be aware that there might be false positives, such as legitimate Microsoft diagcab files, hence the importance of context in assessing security alerts. The sensitivity level for this type of detection is considered medium."
    }
  },
  {
    "instruction": "How to detect: suspicious outbound network activity via kerberos default port indicating possible lateral movement or first stage PrivEsc via delegation.",
    "context": "",
    "output": "In order to detect suspicious outbound network activity via kerberos default port indicating possible lateral movement or first stage PrivEsc via delegation, you should focus on monitoring network connections on Windows systems. Specifically, look for network activities where the destination port is 88, which is the default port for Kerberos, with the connection being initiated from the source. However, it is crucial to exclude any activity initiated by common web browsers or processes such as 'C:\\Windows\\System32\\lsass.exe' for Local Security Authority Subsystem Service, 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' for Google Chrome, and 'C:\\Program Files\\Mozilla Firefox\\firefox.exe' for Mozilla Firefox, as these could lead to false positives.\n\nThis approach aims at identifying potentially malicious activities associated with lateral movement tactics or privilege escalation attempts through delegation, by focusing on unusual use of the Kerberos protocol. Lateral movement techniques often involve authenticating to other systems within a network, and Kerberos is a common target due to its role in network authentication. Privilege escalation via delegation involves exploiting Kerberos for unauthorized access elevation. The exclusion of known browser executables reduces the likelihood of flagging benign activity as suspicious. Common false positives in such detection may arise from legitimate use of web browsers, hence their exclusion from the monitoring criteria. The detection criteria follow a high level of suspicion due to the specifics of the port and initiation status, aligned with tactics and techniques observed in network-based attacks aiming at lateral movement or privilege escalation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious outbound network activity via kerberos default port indicating possible lateral movement or first stage PrivEsc via delegation.",
      "answer": "In order to detect suspicious outbound network activity via kerberos default port indicating possible lateral movement or first stage PrivEsc via delegation, you should focus on monitoring network connections on Windows systems. Specifically, look for network activities where the destination port is 88, which is the default port for Kerberos, with the connection being initiated from the source. However, it is crucial to exclude any activity initiated by common web browsers or processes such as 'C:\\Windows\\System32\\lsass.exe' for Local Security Authority Subsystem Service, 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' for Google Chrome, and 'C:\\Program Files\\Mozilla Firefox\\firefox.exe' for Mozilla Firefox, as these could lead to false positives.\n\nThis approach aims at identifying potentially malicious activities associated with lateral movement tactics or privilege escalation attempts through delegation, by focusing on unusual use of the Kerberos protocol. Lateral movement techniques often involve authenticating to other systems within a network, and Kerberos is a common target due to its role in network authentication. Privilege escalation via delegation involves exploiting Kerberos for unauthorized access elevation. The exclusion of known browser executables reduces the likelihood of flagging benign activity as suspicious. Common false positives in such detection may arise from legitimate use of web browsers, hence their exclusion from the monitoring criteria. The detection criteria follow a high level of suspicion due to the specifics of the port and initiation status, aligned with tactics and techniques observed in network-based attacks aiming at lateral movement or privilege escalation."
    }
  },
  {
    "instruction": "How can I detect: user has been elevated to manage all Azure Subscriptions.\nThis change should be investigated immediately if it isn't planned.\nThis setting could allow an attacker access to Azure subscriptions in your environment.\n",
    "context": "",
    "output": "In order to detect when a user has been elevated to manage all Azure Subscriptions, you should: Focus on monitoring the Azure activity logs specifically for instances where the `operationName` is marked as `MICROSOFT.AUTHORIZATION/ELEVATEACCESS/ACTION`. This particular operation indicates that a user's permissions have been elevated to manage all Azure subscriptions. Such a change is significant and should be investigated promptly unless it has been previously approved by a System Administrator. This action is tagged under tactics and techniques that typically relate to privilege escalation and potentially unauthorized access within an organization's cloud environment. Given that this permission elevation could allow an attacker to gain extensive access to Azure subscriptions, it is marked with a high level of criticality. Instances detected without prior approval are considered suspicious and warrant immediate review to ensure they are not part of a malicious attempt to gain elevated access within your environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user has been elevated to manage all Azure Subscriptions.\nThis change should be investigated immediately if it isn't planned.\nThis setting could allow an attacker access to Azure subscriptions in your environment.\n",
      "answer": "In order to detect when a user has been elevated to manage all Azure Subscriptions, you should: Focus on monitoring the Azure activity logs specifically for instances where the `operationName` is marked as `MICROSOFT.AUTHORIZATION/ELEVATEACCESS/ACTION`. This particular operation indicates that a user's permissions have been elevated to manage all Azure subscriptions. Such a change is significant and should be investigated promptly unless it has been previously approved by a System Administrator. This action is tagged under tactics and techniques that typically relate to privilege escalation and potentially unauthorized access within an organization's cloud environment. Given that this permission elevation could allow an attacker to gain extensive access to Azure subscriptions, it is marked with a high level of criticality. Instances detected without prior approval are considered suspicious and warrant immediate review to ensure they are not part of a malicious attempt to gain elevated access within your environment."
    }
  },
  {
    "instruction": "Can you explain how to detect: when an API access service account is granted domain authority.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when an API access service account is granted domain authority, you should: Monitor logs from Google Workspace, specifically focusing on the admin service within Google Workspace products. Look for events where the service is identified as 'admin.googleapis.com' and the event name is 'AUTHORIZE_API_CLIENT_ACCESS'. This indicates that a service account has been granted access with domain-wide authority, which could pose a security risk if not intended. This activity is particularly of interest as it relates to techniques associated with Persistence, Privilege Escalation, and Initial Access by allowing potentially malicious actors to maintain their foothold, escalate privileges, or gain initial access through the misuse of API service accounts within a domain. Keep in mind that there might be legitimate cases where this activity is unknown or not documented, thus considered as potential false positives. The level of concern for such detections is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an API access service account is granted domain authority.",
      "answer": "In order to detect when an API access service account is granted domain authority, you should: Monitor logs from Google Workspace, specifically focusing on the admin service within Google Workspace products. Look for events where the service is identified as 'admin.googleapis.com' and the event name is 'AUTHORIZE_API_CLIENT_ACCESS'. This indicates that a service account has been granted access with domain-wide authority, which could pose a security risk if not intended. This activity is particularly of interest as it relates to techniques associated with Persistence, Privilege Escalation, and Initial Access by allowing potentially malicious actors to maintain their foothold, escalate privileges, or gain initial access through the misuse of API service accounts within a domain. Keep in mind that there might be legitimate cases where this activity is unknown or not documented, thus considered as potential false positives. The level of concern for such detections is considered medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: One of the Windows Eventlogs has been cleared. e.g. caused by \"wevtutil cl\" command execution",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when one of the Windows Eventlogs has been cleared, potentially as a consequence of \"wevtutil cl\" command execution, you should monitor Windows system logs, specifically focusing on events related to the Microsoft-Windows-Eventlog provider. The critical indicator of this activity is Event ID 104, which signifies that an event log was cleared. It is important, however, to exclude events originating from channels such as Application, Microsoft-Windows-PowerShell/Operational, Microsoft-Windows-Sysmon/Operational, PowerShellCore/Operational, Security, System, and Windows PowerShell, as these are already covered by another monitoring mechanism. \n\nBe aware that there could be legitimate reasons for these logs to be cleared, such as during the rollout of log collection agents or system provisioning before the creation of a 'golden' system image. These activities might generate false positives, which are situations where normal or expected actions are misinterpreted as malicious. This monitoring activity is of a medium level importance in identifying potential security incidents related to the clearing of event logs, which can be an indicator of an attacker's attempt to cover their tracks or interfere with system logging capabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "One of the Windows Eventlogs has been cleared. e.g. caused by \"wevtutil cl\" command execution",
      "answer": "In order to detect when one of the Windows Eventlogs has been cleared, potentially as a consequence of \"wevtutil cl\" command execution, you should monitor Windows system logs, specifically focusing on events related to the Microsoft-Windows-Eventlog provider. The critical indicator of this activity is Event ID 104, which signifies that an event log was cleared. It is important, however, to exclude events originating from channels such as Application, Microsoft-Windows-PowerShell/Operational, Microsoft-Windows-Sysmon/Operational, PowerShellCore/Operational, Security, System, and Windows PowerShell, as these are already covered by another monitoring mechanism. \n\nBe aware that there could be legitimate reasons for these logs to be cleared, such as during the rollout of log collection agents or system provisioning before the creation of a 'golden' system image. These activities might generate false positives, which are situations where normal or expected actions are misinterpreted as malicious. This monitoring activity is of a medium level importance in identifying potential security incidents related to the clearing of event logs, which can be an indicator of an attacker's attempt to cover their tracks or interfere with system logging capabilities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when an user account is locked or suspended.",
    "context": "",
    "output": "In order to detect when a user account is locked or suspended, you should: Monitor Onelogin event logs for specific event types that indicate such activities have occurred. Focus on Onelogin's events log source, where you'll primarily be looking for three types of events. First, look for events with an event type ID of 532, which signals that an account has been locked via API. Secondly, watch out for events marked with an event type ID of 553, indicating an account was also locked through API interactions. Thirdly, be aware of events with an event type ID of 551, which points towards an account suspension carried out via API.\n\nThese activities might sometimes generate false positives, as the system may legitimately lock or suspend user accounts for various non-malicious reasons. Therefore, the level of threat associated with these detections is considered low. Focus your efforts on examining these specific event IDs in the Onelogin's events logs to effectively identify cases where a user account might be at risk, aligning with associated detection practices linked to account manipulation and abuse of authentication processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an user account is locked or suspended.",
      "answer": "In order to detect when a user account is locked or suspended, you should: Monitor Onelogin event logs for specific event types that indicate such activities have occurred. Focus on Onelogin's events log source, where you'll primarily be looking for three types of events. First, look for events with an event type ID of 532, which signals that an account has been locked via API. Secondly, watch out for events marked with an event type ID of 553, indicating an account was also locked through API interactions. Thirdly, be aware of events with an event type ID of 551, which points towards an account suspension carried out via API.\n\nThese activities might sometimes generate false positives, as the system may legitimately lock or suspend user accounts for various non-malicious reasons. Therefore, the level of threat associated with these detections is considered low. Focus your efforts on examining these specific event IDs in the Onelogin's events logs to effectively identify cases where a user account might be at risk, aligning with associated detection practices linked to account manipulation and abuse of authentication processes."
    }
  },
  {
    "instruction": "Can you explain how to detect: access to a webshell dropped into a keystore folder on the WebLogic server",
    "context": "",
    "output": "Certainly!\n\nIn order to detect access to a webshell dropped into a keystore folder on the WebLogic server, you should monitor web server logs for any requests targeting JavaScript files (.js) located within the \"/config/keystore/\" directory path. Pay particular attention to the 'cs-uri-query' field in the logs, which should match the pattern '*/config/keystore/*.js*'. It's crucial to capture and scrutinize both the client IP ('c-ip') and client DNS name ('c-dns') to trace the source of the request. Despite potential unknowns that may initially not seem malicious, the critical nature of this activity demands undivided attention due to its association with techniques commonly employed during cyber attacks. This approach is essential in identifying potentially malicious activities targeting sensitive parts of a WebLogic server infrastructure.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "access to a webshell dropped into a keystore folder on the WebLogic server",
      "answer": "In order to detect access to a webshell dropped into a keystore folder on the WebLogic server, you should monitor web server logs for any requests targeting JavaScript files (.js) located within the \"/config/keystore/\" directory path. Pay particular attention to the 'cs-uri-query' field in the logs, which should match the pattern '*/config/keystore/*.js*'. It's crucial to capture and scrutinize both the client IP ('c-ip') and client DNS name ('c-dns') to trace the source of the request. Despite potential unknowns that may initially not seem malicious, the critical nature of this activity demands undivided attention due to its association with techniques commonly employed during cyber attacks. This approach is essential in identifying potentially malicious activities targeting sensitive parts of a WebLogic server infrastructure."
    }
  },
  {
    "instruction": "How can I detect: Detect usage of the \"sqlite\" binary to query databases in Chromium-based browsers for potential data stealing.",
    "context": "",
    "output": "In order to detect usage of the \"sqlite\" binary to query databases in Chromium-based browsers for potential data stealing, you should: Monitor Windows process creation logs for instances where the SQLite binary is executed, indicated by the appearance of 'sqlite.exe' or 'sqlite3.exe' in the process image path. Pay close attention to processes that involve command lines referencing common folders associated with user profile data of Chromium-based browsers, such as '\\User Data\\', '\\Opera Software\\', and '\\ChromiumViewer\\'. These folders are typically used by browsers like Google Chrome, Opera, and Sleipnir (Fenrir), respectively. It is critical to further scrutinize any command line activity that involves accessing or querying database files that contain sensitive information. This would include strings in the command line that point to 'Login Data' (where passwords might be stored), 'Cookies', 'Web Data' (which could include credit card information and autofill data), 'History', and 'Bookmarks'. Altogether, detecting such activities with specific attention to the mentioned criteria is crucial for identifying potential data theft attempts utilizing SQLite within Chromium-based browsers. It is important to note that while this method aims to identify malicious activities, there might be unknown cases leading to false positives, and the severity level for this type of detection has been classified as high.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect usage of the \"sqlite\" binary to query databases in Chromium-based browsers for potential data stealing.",
      "answer": "In order to detect usage of the \"sqlite\" binary to query databases in Chromium-based browsers for potential data stealing, you should: Monitor Windows process creation logs for instances where the SQLite binary is executed, indicated by the appearance of 'sqlite.exe' or 'sqlite3.exe' in the process image path. Pay close attention to processes that involve command lines referencing common folders associated with user profile data of Chromium-based browsers, such as '\\User Data\\', '\\Opera Software\\', and '\\ChromiumViewer\\'. These folders are typically used by browsers like Google Chrome, Opera, and Sleipnir (Fenrir), respectively. It is critical to further scrutinize any command line activity that involves accessing or querying database files that contain sensitive information. This would include strings in the command line that point to 'Login Data' (where passwords might be stored), 'Cookies', 'Web Data' (which could include credit card information and autofill data), 'History', and 'Bookmarks'. Altogether, detecting such activities with specific attention to the mentioned criteria is crucial for identifying potential data theft attempts utilizing SQLite within Chromium-based browsers. It is important to note that while this method aims to identify malicious activities, there might be unknown cases leading to false positives, and the severity level for this type of detection has been classified as high."
    }
  },
  {
    "instruction": "Please help me detect the following: many failed connection attempts to different ports or hosts",
    "context": "",
    "output": "Sure!\nIn order to detect many failed connection attempts to different ports or hosts, you should: focus on analyzing firewall logs to identify patterns of denied actions within a 24-hour timeframe. Specifically, you are looking for instances where more than ten different destination ports are involved in failed connection attempts from the same source IP address. This activity is recorded in the logs with the 'action' field marked as 'denied'. By aggregating this data, specifically counting the number of unique destination ports ('dst_port') associated with each source IP address ('src_ip'), you can identify potential malicious behavior indicative of scanning or enumeration efforts. It is important to monitor these events, as they can signal an attacker attempting to discover open ports or vulnerable hosts within a network. However, be aware that certain legitimate tools, such as inventory systems and vulnerability scans, might also generate similar traffic patterns, which could be mistaken as false positives. The key fields to observe in the logs for this analysis are the source IP ('src_ip'), destination IP ('dst_ip'), and destination port ('dst_port'). This monitoring approach is of medium priority and is aligned with identifying behaviors associated with reconnaissance tactics, where attackers attempt to gain information about the network and its hosts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "many failed connection attempts to different ports or hosts",
      "answer": "In order to detect many failed connection attempts to different ports or hosts, you should: focus on analyzing firewall logs to identify patterns of denied actions within a 24-hour timeframe. Specifically, you are looking for instances where more than ten different destination ports are involved in failed connection attempts from the same source IP address. This activity is recorded in the logs with the 'action' field marked as 'denied'. By aggregating this data, specifically counting the number of unique destination ports ('dst_port') associated with each source IP address ('src_ip'), you can identify potential malicious behavior indicative of scanning or enumeration efforts. It is important to monitor these events, as they can signal an attacker attempting to discover open ports or vulnerable hosts within a network. However, be aware that certain legitimate tools, such as inventory systems and vulnerability scans, might also generate similar traffic patterns, which could be mistaken as false positives. The key fields to observe in the logs for this analysis are the source IP ('src_ip'), destination IP ('dst_ip'), and destination port ('dst_port'). This monitoring approach is of medium priority and is aligned with identifying behaviors associated with reconnaissance tactics, where attackers attempt to gain information about the network and its hosts."
    }
  },
  {
    "instruction": "How to detect: execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys. Often used by attacker to allow the ransomware to work in safe mode as some security products do not",
    "context": "",
    "output": "In order to detect execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys, often used by attacker to allow the ransomware to work in safe mode as some security products do not, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the \"reg.exe\" program is executed, indicated either by the program's image name ending with 'reg.exe' or the original file name being 'reg.exe'. Additionally, pay attention to the command line arguments accompanying the execution of \"reg.exe\". It's critical to identify instances where the command line includes references to the system's safe boot configuration, specifically paths containing '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot'. Moreover, detect command lines that include the use of 'copy' or 'add' commands, which are red flags for potential malicious activity aimed at modifying the registry to ensure malware persistence even in safe mode. Given the unlikely chance of false positives and the high severity of such an action, prompt and thorough investigation is warranted upon detection of these criteria.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys. Often used by attacker to allow the ransomware to work in safe mode as some security products do not",
      "answer": "In order to detect execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys, often used by attacker to allow the ransomware to work in safe mode as some security products do not, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the \"reg.exe\" program is executed, indicated either by the program's image name ending with 'reg.exe' or the original file name being 'reg.exe'. Additionally, pay attention to the command line arguments accompanying the execution of \"reg.exe\". It's critical to identify instances where the command line includes references to the system's safe boot configuration, specifically paths containing '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot'. Moreover, detect command lines that include the use of 'copy' or 'add' commands, which are red flags for potential malicious activity aimed at modifying the registry to ensure malware persistence even in safe mode. Given the unlikely chance of false positives and the high severity of such an action, prompt and thorough investigation is warranted upon detection of these criteria."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious user agent strings used in APT malware in proxy logs",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious user agent strings used in APT malware in proxy logs, you should closely monitor your network's proxy logs for any occurrences of specific user agent strings that are commonly associated with Advanced Persistent Threat (APT) malware. These user agent strings, when detected, indicate a high likelihood of a cybersecurity threat. The monitoring process should focus on a wide array of user agent strings that have been linked to various APT groups and malware campaigns. These include, but are not limited to, strings that mimic older versions of Internet Explorer, Firefox, and other browsers, or that contain peculiar identifiers which suggest a deliberate attempt to disguise malicious traffic as legitimate.\n\nThe detection encompasses a variety of user-agent strings known to be used by sophisticated adversaries. Some of these strings are designed to imitate outdated browsers or unusual configurations that, while potentially legitimate in very rare circumstances, are predominantly indicative of malicious activities. These activities are often related to reconnaissance, malware distribution, exploiting vulnerabilities, or maintaining persistence on a network.\n\nWhen these suspicious user-agent strings are identified within proxy logs, it is crucial to conduct a further examination of the source IP, requested URLs, and any additional metadata available to ascertain the nature of the requests being made. This investigation could provide insights into potential security breaches or ongoing attacks.\n\nIt's important to note, however, that occasionally legitimate but outdated browser versions might generate false positives. Therefore, while the detection of these user-agent strings should elevate security scrutiny, it should not automatically be assumed as malicious without further corroboration.\n\nGiven the high stakes associated with APT-related intrusions and the sophistication of the adversaries, organizations are advised to maintain a high level of vigilance. Monitoring for these indicators should be part of a comprehensive cybersecurity strategy including, but not limited to, regular system and network monitoring, employing up-to-date security measures, and conducting continual security awareness training.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious user agent strings used in APT malware in proxy logs",
      "answer": "In order to detect suspicious user agent strings used in APT malware in proxy logs, you should closely monitor your network's proxy logs for any occurrences of specific user agent strings that are commonly associated with Advanced Persistent Threat (APT) malware. These user agent strings, when detected, indicate a high likelihood of a cybersecurity threat. The monitoring process should focus on a wide array of user agent strings that have been linked to various APT groups and malware campaigns. These include, but are not limited to, strings that mimic older versions of Internet Explorer, Firefox, and other browsers, or that contain peculiar identifiers which suggest a deliberate attempt to disguise malicious traffic as legitimate.\n\nThe detection encompasses a variety of user-agent strings known to be used by sophisticated adversaries. Some of these strings are designed to imitate outdated browsers or unusual configurations that, while potentially legitimate in very rare circumstances, are predominantly indicative of malicious activities. These activities are often related to reconnaissance, malware distribution, exploiting vulnerabilities, or maintaining persistence on a network.\n\nWhen these suspicious user-agent strings are identified within proxy logs, it is crucial to conduct a further examination of the source IP, requested URLs, and any additional metadata available to ascertain the nature of the requests being made. This investigation could provide insights into potential security breaches or ongoing attacks.\n\nIt's important to note, however, that occasionally legitimate but outdated browser versions might generate false positives. Therefore, while the detection of these user-agent strings should elevate security scrutiny, it should not automatically be assumed as malicious without further corroboration.\n\nGiven the high stakes associated with APT-related intrusions and the sophistication of the adversaries, organizations are advised to maintain a high level of vigilance. Monitoring for these indicators should be part of a comprehensive cybersecurity strategy including, but not limited to, regular system and network monitoring, employing up-to-date security measures, and conducting continual security awareness training."
    }
  },
  {
    "instruction": "How to detect: when an application exports a certificate (and potentially the private key as well) from the local Windows certificate store.",
    "context": "",
    "output": "In order to detect when an application exports a certificate (and potentially the private key as well) from the local Windows certificate store, you should: Monitor the Windows Certificate Services Client Lifecycle logs, specifically focusing on Event ID 1007, which indicates that a certificate has been exported. Be aware that legitimate applications may also request certificate exports, so you might need to apply additional filters to distinguish between benign and potentially malicious activity. This monitoring is considered to have a medium level of importance in identifying potential security incidents related to certificate exportation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an application exports a certificate (and potentially the private key as well) from the local Windows certificate store.",
      "answer": "In order to detect when an application exports a certificate (and potentially the private key as well) from the local Windows certificate store, you should: Monitor the Windows Certificate Services Client Lifecycle logs, specifically focusing on Event ID 1007, which indicates that a certificate has been exported. Be aware that legitimate applications may also request certificate exports, so you might need to apply additional filters to distinguish between benign and potentially malicious activity. This monitoring is considered to have a medium level of importance in identifying potential security incidents related to certificate exportation."
    }
  },
  {
    "instruction": "Please help me detect the following: automated lateral movement by Turla group",
    "context": "",
    "output": "Sure!\nIn order to detect automated lateral movement by Turla group, you should: Monitor process creation logs on Windows systems for the execution of specific network-related command lines within a short timeframe. Specifically, look for the execution of 'net view /DOMAIN', 'net session', and 'net share' commands. These commands are typically used by attackers to view domain information, list or disconnect sessions on a computer, and list or manage shared resources, respectively. To accurately identify potential lateral movement activities associated with the Turla group, these command executions should occur in close succession, specifically within a 1-minute timeframe. Although there may be legitimate uses of these commands, their grouped execution within such a short period should be scrutinized for potential malicious activity. This detection mechanism is crucial in identifying tactics and techniques related to reconnaissance and lateral movement, aiding in the timely response to and mitigation of such threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "automated lateral movement by Turla group",
      "answer": "In order to detect automated lateral movement by Turla group, you should: Monitor process creation logs on Windows systems for the execution of specific network-related command lines within a short timeframe. Specifically, look for the execution of 'net view /DOMAIN', 'net session', and 'net share' commands. These commands are typically used by attackers to view domain information, list or disconnect sessions on a computer, and list or manage shared resources, respectively. To accurately identify potential lateral movement activities associated with the Turla group, these command executions should occur in close succession, specifically within a 1-minute timeframe. Although there may be legitimate uses of these commands, their grouped execution within such a short period should be scrutinized for potential malicious activity. This detection mechanism is crucial in identifying tactics and techniques related to reconnaissance and lateral movement, aiding in the timely response to and mitigation of such threats."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may establish persistence by executing malicious content triggered by user inactivity.\nScreensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension\n",
    "context": "",
    "output": "In order to establish persistence by executing malicious content triggered by user inactivity specifically through screensavers, which are programs that run after a period of user inactivity and consist of Portable Executable (PE) files with a .scr file extension, you should: detect when a file with a '.scr' extension is created or modified on Windows systems. However, it is important to exclude certain benign files from triggering alerts. Specifically, ignore files if they are associated with 'Kindle.exe' or 'ccSvcHst.exe', which is related to Symantec Endpoint Protection, to reduce false positives. Also, ignore occurrences involving 'TiWorker.exe' with a target filename of 'uwfservicingscr.scr', as this might be part of a legitimate system process. This approach aims to balance sensitivity and specificity, maintaining vigilance for potential threats without overwhelming security teams with false alarms. The detection operates under a medium level of alert, indicating a notable risk that requires attention without assuming an immediate critical threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may establish persistence by executing malicious content triggered by user inactivity.\nScreensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension\n",
      "answer": "In order to establish persistence by executing malicious content triggered by user inactivity specifically through screensavers, which are programs that run after a period of user inactivity and consist of Portable Executable (PE) files with a .scr file extension, you should: detect when a file with a '.scr' extension is created or modified on Windows systems. However, it is important to exclude certain benign files from triggering alerts. Specifically, ignore files if they are associated with 'Kindle.exe' or 'ccSvcHst.exe', which is related to Symantec Endpoint Protection, to reduce false positives. Also, ignore occurrences involving 'TiWorker.exe' with a target filename of 'uwfservicingscr.scr', as this might be part of a legitimate system process. This approach aims to balance sensitivity and specificity, maintaining vigilance for potential threats without overwhelming security teams with false alarms. The detection operates under a medium level of alert, indicating a notable risk that requires attention without assuming an immediate critical threat."
    }
  },
  {
    "instruction": "Can you explain how to detect: FlowCloud malware from threat group TA410.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect FlowCloud malware from threat group TA410, you should monitor the Windows Registry for interactions with very specific keys. These interactions involve looking for any activities targeting the registry keys: 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}', 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}', and 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'. In addition to these specific keys, attention should also be given to any registry operations involving keys that begin with 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'. This approach is crucial in the effort to intercept and identify actions that could be related to the FlowCloud malware's operational footprint within an infected system. Given the critical nature of this detection, vigilance is advised, although one should be aware of the possibility of encountering unknown false positives during monitoring.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "FlowCloud malware from threat group TA410.",
      "answer": "In order to detect FlowCloud malware from threat group TA410, you should monitor the Windows Registry for interactions with very specific keys. These interactions involve looking for any activities targeting the registry keys: 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}', 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}', and 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'. In addition to these specific keys, attention should also be given to any registry operations involving keys that begin with 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'. This approach is crucial in the effort to intercept and identify actions that could be related to the FlowCloud malware's operational footprint within an infected system. Given the critical nature of this detection, vigilance is advised, although one should be aware of the possibility of encountering unknown false positives during monitoring."
    }
  },
  {
    "instruction": "Explain how should I detect the following: specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Honk Kong universities",
    "context": "",
    "output": "In order to detect specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Hong Kong universities, you should monitor Windows process creations for specific patterns indicative of this malware activity. Look for processes that are initiated from certain suspicious locations or exhibit unusual behaviors, such as:\n\n1. Processes that are launched from the Windows Temp directory or by 'hpqhvind.exe', and those creating files in 'C:\\ProgramData\\DRM'.\n2. Instances where 'C:\\ProgramData\\DRM' is the starting location of a parent process that launches 'wmplayer.exe'.\n3. Processes that are started by 'Test.exe' and also create an instance of 'wmplayer.exe'.\n4. The specific creation of a process named 'C:\\ProgramData\\DRM\\CLR\\CLR.exe'.\n5. Processes begun by any executables located in 'C:\\ProgramData\\DRM\\Windows' that subsequently start 'SearchFilterHost.exe'.\n\nMonitoring for such process creation events will help in identifying activities associated with the Winnti malware. Generally, there should be minimal false positives for these detection criteria, indicating a high level of confidence in these as indicators of compromise. This approach is critical for ensuring the cybersecurity of systems, particularly in environments that are known targets of this malware, such as universities in Hong Kong.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Honk Kong universities",
      "answer": "In order to detect specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Hong Kong universities, you should monitor Windows process creations for specific patterns indicative of this malware activity. Look for processes that are initiated from certain suspicious locations or exhibit unusual behaviors, such as:\n\n1. Processes that are launched from the Windows Temp directory or by 'hpqhvind.exe', and those creating files in 'C:\\ProgramData\\DRM'.\n2. Instances where 'C:\\ProgramData\\DRM' is the starting location of a parent process that launches 'wmplayer.exe'.\n3. Processes that are started by 'Test.exe' and also create an instance of 'wmplayer.exe'.\n4. The specific creation of a process named 'C:\\ProgramData\\DRM\\CLR\\CLR.exe'.\n5. Processes begun by any executables located in 'C:\\ProgramData\\DRM\\Windows' that subsequently start 'SearchFilterHost.exe'.\n\nMonitoring for such process creation events will help in identifying activities associated with the Winnti malware. Generally, there should be minimal false positives for these detection criteria, indicating a high level of confidence in these as indicators of compromise. This approach is critical for ensuring the cybersecurity of systems, particularly in environments that are known targets of this malware, such as universities in Hong Kong."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of a signed binary dropped by Kaspersky Lab Products Remover (kavremover) which can be abused as a LOLBIN to execute arbitrary commands and binaries.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of a signed binary dropped by Kaspersky Lab Products Remover (kavremover) which can be abused as a LOLBIN to execute arbitrary commands and binaries, you should focus on monitoring process creation logs within Windows environments. Specifically, watch for command lines containing the sequence ' run run-cmd '. However, it's important to exclude any instances where this activity originates from known and legitimate processes associated with Kaspersky products, such as when the command is initiated by 'kavremover.exe' or 'cleanapi.exe'. This refined approach helps to identify when a trusted, signed binary is potentially being misused for defense evasion purposes, in a manner consistent with the technique known as Trusted Developer Utilities Proxy Execution (T1127). Due to the nature of this detection and the specificity of the conditions, instances identified outside of the filtered parameters are considered highly suspicious and warrant further investigation, with a low likelihood of false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a signed binary dropped by Kaspersky Lab Products Remover (kavremover) which can be abused as a LOLBIN to execute arbitrary commands and binaries.",
      "answer": "In order to detect the execution of a signed binary dropped by Kaspersky Lab Products Remover (kavremover) which can be abused as a LOLBIN to execute arbitrary commands and binaries, you should focus on monitoring process creation logs within Windows environments. Specifically, watch for command lines containing the sequence ' run run-cmd '. However, it's important to exclude any instances where this activity originates from known and legitimate processes associated with Kaspersky products, such as when the command is initiated by 'kavremover.exe' or 'cleanapi.exe'. This refined approach helps to identify when a trusted, signed binary is potentially being misused for defense evasion purposes, in a manner consistent with the technique known as Trusted Developer Utilities Proxy Execution (T1127). Due to the nature of this detection and the specificity of the conditions, instances identified outside of the filtered parameters are considered highly suspicious and warrant further investigation, with a low likelihood of false positives."
    }
  },
  {
    "instruction": "How can I detect: potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework",
    "context": "",
    "output": "In order to detect potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework, you should: focus on monitoring PowerShell script activities within Windows environments where Script Block Logging is enabled. Specifically, look for the presence of any of these indicative keywords or phrases within the script text: usage of 'System.Reflection.Assembly.Load($', '[System.Reflection.Assembly]::Load($', '[Reflection.Assembly]::Load($' for dynamically loading assemblies, references to 'System.Reflection.AssemblyName' for dealing with assembly names, 'Reflection.Emit.AssemblyBuilderAccess' and 'Reflection.Emit.CustomAttributeBuilder' that are associated with the creation of assemblies and custom attributes at runtime, 'Runtime.InteropServices.UnmanagedType' and 'Runtime.InteropServices.DllImportAttribute' related to invoking unmanaged code, 'SuspendThread' indicating potential thread manipulation, and 'rundll32', a utility that can be used maliciously to execute code. It's important to be vigilant about these indicators as they might be employed in crafting PowerShell-based exploits, although be aware that there can be legitimate uses of these terms, so unknown false positives can occur. The detection is of a medium risk level, suggesting that while these indicators are not definitively malicious on their own, their presence warrants further investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework",
      "answer": "In order to detect potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework, you should: focus on monitoring PowerShell script activities within Windows environments where Script Block Logging is enabled. Specifically, look for the presence of any of these indicative keywords or phrases within the script text: usage of 'System.Reflection.Assembly.Load($', '[System.Reflection.Assembly]::Load($', '[Reflection.Assembly]::Load($' for dynamically loading assemblies, references to 'System.Reflection.AssemblyName' for dealing with assembly names, 'Reflection.Emit.AssemblyBuilderAccess' and 'Reflection.Emit.CustomAttributeBuilder' that are associated with the creation of assemblies and custom attributes at runtime, 'Runtime.InteropServices.UnmanagedType' and 'Runtime.InteropServices.DllImportAttribute' related to invoking unmanaged code, 'SuspendThread' indicating potential thread manipulation, and 'rundll32', a utility that can be used maliciously to execute code. It's important to be vigilant about these indicators as they might be employed in crafting PowerShell-based exploits, although be aware that there can be legitimate uses of these terms, so unknown false positives can occur. The detection is of a medium risk level, suggesting that while these indicators are not definitively malicious on their own, their presence warrants further investigation."
    }
  },
  {
    "instruction": "Can you explain how to detect: specific command line execution used by FIN7 as reported by WithSecureLabs for reconnaissance and POWERTRASH execution",
    "context": "",
    "output": "Certainly!\n\nIn order to detect specific command line execution used by FIN7 as reported by WithSecureLabs for reconnaissance and POWERTRASH execution, you should monitor process creation logs on Windows systems for command line executions that match specific patterns indicating a probable attack. The detection focuses on two main command line patterns. \n\nThe first pattern to watch out for includes command lines that contain all of the following elements: '-noni -nop -exe bypass -f \\\\', and also reference 'ADMIN$'. This pattern suggests an attempt to bypass execution policies, likely aiming at remote execution or elevation of privileges, part of reconnaissance activities or initial execution phases of an attack.\n\nThe second pattern of interest includes command lines that contain all elements: '-ex bypass -noprof -nolog -nonint -f', followed by a reference to 'C:\\Windows\\Temp\\'. This pattern indicates an attempt to execute scripts or commands in a way that avoids logging and profiling, reducing the visibility of the attack. The use of the Windows temporary directory implies an attempt to execute or drop malicious scripts or payloads, which is typical for initial access or execution phases of an attack, including the deployment of the POWERTRASH malware.\n\nGiven the specific and sophisticated nature of these command line executions, detections tied to these patterns are considered high level, with false positives being unlikely. Monitoring for these patterns can significantly aid in identifying activities associated with the FIN7 group, focusing on reconnaissance, and execution tactics, techniques, and procedures.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific command line execution used by FIN7 as reported by WithSecureLabs for reconnaissance and POWERTRASH execution",
      "answer": "In order to detect specific command line execution used by FIN7 as reported by WithSecureLabs for reconnaissance and POWERTRASH execution, you should monitor process creation logs on Windows systems for command line executions that match specific patterns indicating a probable attack. The detection focuses on two main command line patterns. \n\nThe first pattern to watch out for includes command lines that contain all of the following elements: '-noni -nop -exe bypass -f \\\\', and also reference 'ADMIN$'. This pattern suggests an attempt to bypass execution policies, likely aiming at remote execution or elevation of privileges, part of reconnaissance activities or initial execution phases of an attack.\n\nThe second pattern of interest includes command lines that contain all elements: '-ex bypass -noprof -nolog -nonint -f', followed by a reference to 'C:\\Windows\\Temp\\'. This pattern indicates an attempt to execute scripts or commands in a way that avoids logging and profiling, reducing the visibility of the attack. The use of the Windows temporary directory implies an attempt to execute or drop malicious scripts or payloads, which is typical for initial access or execution phases of an attack, including the deployment of the POWERTRASH malware.\n\nGiven the specific and sophisticated nature of these command line executions, detections tied to these patterns are considered high level, with false positives being unlikely. Monitoring for these patterns can significantly aid in identifying activities associated with the FIN7 group, focusing on reconnaissance, and execution tactics, techniques, and procedures."
    }
  },
  {
    "instruction": "Please help me detect the following: Octopus Scanner Malware.",
    "context": "",
    "output": "Sure!\nIn order to detect Octopus Scanner Malware, you should: Monitor file events on Windows systems, focusing on operations involving specific target filenames. Watch for activities such as the creation, modification, or deletion involving files with the paths ending in '\\AppData\\Local\\Microsoft\\Cache134.dat' or '\\AppData\\Local\\Microsoft\\ExplorerSync.db'. These specific file paths are indicative of Octopus Scanner Malware activity on a system. Since false positives are currently unknown, any detection based on these criteria should be treated with a high level of suspicion and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Octopus Scanner Malware.",
      "answer": "In order to detect Octopus Scanner Malware, you should: Monitor file events on Windows systems, focusing on operations involving specific target filenames. Watch for activities such as the creation, modification, or deletion involving files with the paths ending in '\\AppData\\Local\\Microsoft\\Cache134.dat' or '\\AppData\\Local\\Microsoft\\ExplorerSync.db'. These specific file paths are indicative of Octopus Scanner Malware activity on a system. Since false positives are currently unknown, any detection based on these criteria should be treated with a high level of suspicion and investigated promptly."
    }
  },
  {
    "instruction": "How can I detect: changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet.",
    "context": "",
    "output": "In order to detect changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet, you should monitor Windows Registry settings specifically for \"SetValue\" events. Focus on changes made under the `\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\` path with particular attention to any modifications ending with '\\Internet', '\\LocalIntranet', '\\MyComputer', '\\TrustedSites', or '\\UntrustedSites'. The critical detail to look for is the 'Enabled' status in these registry settings. These changes might signal an attempt to lower security measures and facilitate installations from less secure or trusted locations. However, be aware that some legitimate internal requirements might necessitate such modifications, leading to possible false positives. The severity of this detection is considered medium, emphasizing its importance without suggesting it signals an immediate and critical threat. Understanding these modifications can play a crucial role in identifying potential security risks associated with the weakening of ClickOnce trust prompts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet.",
      "answer": "In order to detect changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet, you should monitor Windows Registry settings specifically for \"SetValue\" events. Focus on changes made under the `\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\` path with particular attention to any modifications ending with '\\Internet', '\\LocalIntranet', '\\MyComputer', '\\TrustedSites', or '\\UntrustedSites'. The critical detail to look for is the 'Enabled' status in these registry settings. These changes might signal an attempt to lower security measures and facilitate installations from less secure or trusted locations. However, be aware that some legitimate internal requirements might necessitate such modifications, leading to possible false positives. The severity of this detection is considered medium, emphasizing its importance without suggesting it signals an immediate and critical threat. Understanding these modifications can play a crucial role in identifying potential security risks associated with the weakening of ClickOnce trust prompts."
    }
  },
  {
    "instruction": "Can you explain how to detect: code execution via Pester.bat (Pester - Powershell Modulte for testing)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect code execution via Pester.bat (Pester - PowerShell Module for testing), you should monitor for specific patterns of command-line arguments and process creations on Windows systems. Focus on observations of processes being created, especially those instances initiating PowerShell (powershell.exe or pwsh.exe) or Command Prompt (cmd.exe). Look for the presence of the PowerShell module or script 'Pester' being invoked alongside 'Get-Help' in the command line when PowerShell is used. This combination indicates an attempt to execute code through the Pester testing framework, which may be utilized maliciously.\n\nWhen Command Prompt is the process being created, ensure to check for the usage of 'pester' in the command line, particularly where there is a semicolon ';' involved in the command, which may suggest a sequence of commands being executed, and the word 'pester' appears. This is another potential indicator of an attack leveraging Pester.\n\nAdditionally, pay attention to any command-line argument containing help-related keywords such as 'help' or '?', in conjunction with the previous indicators. These might be used in attempts to disguise malicious activity under the guise of seemingly benign help requests.\n\nBe aware of legitimate scenarios where Pester is used for its intended purpose - writing tests for PowerShell scripts and modules. Such legitimate activities could lead to false positives if not considered carefully.\n\nThis method relies on tagging activities with relevant MITRE ATT&CK tactics and techniques. Specifically, monitor for tactics like Execution and techniques that entail the execution of code through command-line interfaces or PowerShell, as these are common vectors attackers use in conjunction with tools like Pester.bat.\n\nBy ensuring comprehensive monitoring of both PowerShell and Command Prompt for the specified patterns and conditions, you can effectively identify potentially malicious activities involving the misuse of Pester for code execution attempts while also considering the context to minimize the false positives associated with legitimate testing practices.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "code execution via Pester.bat (Pester - Powershell Modulte for testing)",
      "answer": "In order to detect code execution via Pester.bat (Pester - PowerShell Module for testing), you should monitor for specific patterns of command-line arguments and process creations on Windows systems. Focus on observations of processes being created, especially those instances initiating PowerShell (powershell.exe or pwsh.exe) or Command Prompt (cmd.exe). Look for the presence of the PowerShell module or script 'Pester' being invoked alongside 'Get-Help' in the command line when PowerShell is used. This combination indicates an attempt to execute code through the Pester testing framework, which may be utilized maliciously.\n\nWhen Command Prompt is the process being created, ensure to check for the usage of 'pester' in the command line, particularly where there is a semicolon ';' involved in the command, which may suggest a sequence of commands being executed, and the word 'pester' appears. This is another potential indicator of an attack leveraging Pester.\n\nAdditionally, pay attention to any command-line argument containing help-related keywords such as 'help' or '?', in conjunction with the previous indicators. These might be used in attempts to disguise malicious activity under the guise of seemingly benign help requests.\n\nBe aware of legitimate scenarios where Pester is used for its intended purpose - writing tests for PowerShell scripts and modules. Such legitimate activities could lead to false positives if not considered carefully.\n\nThis method relies on tagging activities with relevant MITRE ATT&CK tactics and techniques. Specifically, monitor for tactics like Execution and techniques that entail the execution of code through command-line interfaces or PowerShell, as these are common vectors attackers use in conjunction with tools like Pester.bat.\n\nBy ensuring comprehensive monitoring of both PowerShell and Command Prompt for the specified patterns and conditions, you can effectively identify potentially malicious activities involving the misuse of Pester for code execution attempts while also considering the context to minimize the false positives associated with legitimate testing practices."
    }
  },
  {
    "instruction": "Please help me detect the following: Upload file, credentials or data exfiltration with Binary part of Windows Defender",
    "context": "",
    "output": "Sure!\nIn order to upload file, credentials or data exfiltration with Binary part of Windows Defender, you should: identify processes created on Windows systems that exhibit suspicious behavior associated with the misuse of the ConfigSecurityPolicy.exe binary, which is a part of Windows Defender. Specifically, look for instances where the command line execution or image path of a process involves ConfigSecurityPolicy.exe. Additionally, pay attention to processes that execute commands containing internet URLs, indicated by the presence of 'https://', 'http://', or 'ftp://' in the command line. This combination of using ConfigSecurityPolicy.exe alongside commands that reach out to the internet is indicative of an attempt to use trusted Windows utilities to facilitate malicious activities such as uploading files, exfiltrating credentials, or other data exfiltration efforts. Be aware that some legitimate activities may trigger this detection, although such occurrences are currently unknown. The severity level of this type of suspicious activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Upload file, credentials or data exfiltration with Binary part of Windows Defender",
      "answer": "In order to upload file, credentials or data exfiltration with Binary part of Windows Defender, you should: identify processes created on Windows systems that exhibit suspicious behavior associated with the misuse of the ConfigSecurityPolicy.exe binary, which is a part of Windows Defender. Specifically, look for instances where the command line execution or image path of a process involves ConfigSecurityPolicy.exe. Additionally, pay attention to processes that execute commands containing internet URLs, indicated by the presence of 'https://', 'http://', or 'ftp://' in the command line. This combination of using ConfigSecurityPolicy.exe alongside commands that reach out to the internet is indicative of an attempt to use trusted Windows utilities to facilitate malicious activities such as uploading files, exfiltrating credentials, or other data exfiltration efforts. Be aware that some legitimate activities may trigger this detection, although such occurrences are currently unknown. The severity level of this type of suspicious activity is considered medium."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Obfuscated use of Clip.exe to execute PowerShell",
    "context": "",
    "output": "In order to detect obfuscated use of Clip.exe to execute PowerShell, you should focus on monitoring the PowerShell module activity within the Windows environment. Specifically, look for events where the command line execution patterns match the use of 'cmd' followed by either '/c' or '/r' parameters, and closely thereafter, involves 'clip.exe' or 'clip' command. The detection becomes particularly specific with the inclusion of patterns that combine 'clip' with PowerShell commands that seem to manipulate the clipboard content in a sophisticated manner, indicated by the complex regex pattern provided. These patterns also include the use of '&&' operator, suggesting an attempt to chain commands in a manner that's not typical for regular system or user operations. \n\nMonitoring should be performed with high sensitivity due to the high level of potential impact, but it\u2019s important to note that as of now, the potential for unknown false positives exists, indicating that not all matched patterns could lead to genuine threats. However, given the obfuscated nature of the execution method, any hits on these patterns should be considered with a degree of caution. \n\nThis activity aligns with techniques known in cybersecurity frameworks which describe tactics such as Execution, Defense Evasion, and Command and Control, showing the attacker's efforts to execute commands covertly, evade detection mechanisms, and maintain control over the compromised system through unusual use of system utilities like Clip.exe in conjunction with PowerShell scripting.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated use of Clip.exe to execute PowerShell",
      "answer": "In order to detect obfuscated use of Clip.exe to execute PowerShell, you should focus on monitoring the PowerShell module activity within the Windows environment. Specifically, look for events where the command line execution patterns match the use of 'cmd' followed by either '/c' or '/r' parameters, and closely thereafter, involves 'clip.exe' or 'clip' command. The detection becomes particularly specific with the inclusion of patterns that combine 'clip' with PowerShell commands that seem to manipulate the clipboard content in a sophisticated manner, indicated by the complex regex pattern provided. These patterns also include the use of '&&' operator, suggesting an attempt to chain commands in a manner that's not typical for regular system or user operations. \n\nMonitoring should be performed with high sensitivity due to the high level of potential impact, but it\u2019s important to note that as of now, the potential for unknown false positives exists, indicating that not all matched patterns could lead to genuine threats. However, given the obfuscated nature of the execution method, any hits on these patterns should be considered with a degree of caution. \n\nThis activity aligns with techniques known in cybersecurity frameworks which describe tactics such as Execution, Defense Evasion, and Command and Control, showing the attacker's efforts to execute commands covertly, evade detection mechanisms, and maintain control over the compromised system through unusual use of system utilities like Clip.exe in conjunction with PowerShell scripting."
    }
  },
  {
    "instruction": "Can you explain how to detect: restricted access to applications by the Software Restriction Policies (SRP) policy",
    "context": "",
    "output": "Certainly!\n\nIn order to detect restricted access to applications by the Software Restriction Policies (SRP) policy, you should monitor application event logs on Windows systems, focusing on events generated by the Microsoft-Windows-SoftwareRestrictionPolicies provider. Key events to watch include:\n\n- Event ID 865, which indicates that access to a certain application has been restricted by the Administrator using the default software restriction policy level.\n- Event ID 866, signaling that access to an application was restricted based on its location, with a specific policy rule applied to its path.\n- Event ID 867, which occurs when access is restricted due to a software publisher policy.\n- Event ID 868 and 882, both of which denote that access was restricted by an Administrator through a specific policy rule.\n\nMonitoring for these events can help identify attempts to execute unauthorized software or modifications to software restriction policies, potentially signaling malicious activity. It's important to be aware that while these detections are crucial, false positives may occur, and unknown circumstances could trigger these events without malicious intent. This detection strategy is classified as high level, emphasizing its importance in maintaining secure and compliant systems.\n\nThis approach aligns with several MITRE ATT&CK tactics and techniques, including execution policy prevention, which is part of the defense evasion category, and software restriction policies, relevant for detecting and mitigating unauthorized applications and scripts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "restricted access to applications by the Software Restriction Policies (SRP) policy",
      "answer": "In order to detect restricted access to applications by the Software Restriction Policies (SRP) policy, you should monitor application event logs on Windows systems, focusing on events generated by the Microsoft-Windows-SoftwareRestrictionPolicies provider. Key events to watch include:\n\n- Event ID 865, which indicates that access to a certain application has been restricted by the Administrator using the default software restriction policy level.\n- Event ID 866, signaling that access to an application was restricted based on its location, with a specific policy rule applied to its path.\n- Event ID 867, which occurs when access is restricted due to a software publisher policy.\n- Event ID 868 and 882, both of which denote that access was restricted by an Administrator through a specific policy rule.\n\nMonitoring for these events can help identify attempts to execute unauthorized software or modifications to software restriction policies, potentially signaling malicious activity. It's important to be aware that while these detections are crucial, false positives may occur, and unknown circumstances could trigger these events without malicious intent. This detection strategy is classified as high level, emphasizing its importance in maintaining secure and compliant systems.\n\nThis approach aligns with several MITRE ATT&CK tactics and techniques, including execution policy prevention, which is part of the defense evasion category, and software restriction policies, relevant for detecting and mitigating unauthorized applications and scripts."
    }
  },
  {
    "instruction": "How can I detect: when an attacker create a similar folder structure to windows system folders such as (Windows, Program Files...)\nbut with a space in order to trick DLL load search order and perform a \"DLL Search Order Hijacking\" attack\n",
    "context": "",
    "output": "In order to detect when an attacker creates a similar folder structure to Windows system folders such as (Windows, Program Files...) but with a space in order to trick DLL load search order and perform a \"DLL Search Order Hijacking\" attack, you should monitor file events on Windows systems, specifically focusing on the creation of .dll files that begin with paths closely resembling 'C:\\Windows \\', 'C:\\Program Files \\', or 'C:\\Program Files (x86) \\' but with an additional space. This approach aims to identify attempts to exploit the DLL search order hijacking technique by placing malicious DLLs in directories that might be searched before the legitimate ones. It's critical to pay high attention to such activities due to their high threat level, although it's acknowledged that determining false positives can be challenging in this context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker create a similar folder structure to windows system folders such as (Windows, Program Files...)\nbut with a space in order to trick DLL load search order and perform a \"DLL Search Order Hijacking\" attack\n",
      "answer": "In order to detect when an attacker creates a similar folder structure to Windows system folders such as (Windows, Program Files...) but with a space in order to trick DLL load search order and perform a \"DLL Search Order Hijacking\" attack, you should monitor file events on Windows systems, specifically focusing on the creation of .dll files that begin with paths closely resembling 'C:\\Windows \\', 'C:\\Program Files \\', or 'C:\\Program Files (x86) \\' but with an additional space. This approach aims to identify attempts to exploit the DLL search order hijacking technique by placing malicious DLLs in directories that might be searched before the legitimate ones. It's critical to pay high attention to such activities due to their high threat level, although it's acknowledged that determining false positives can be challenging in this context."
    }
  },
  {
    "instruction": "How to detect: creation of files with an executable or script extension by an Office application.",
    "context": "",
    "output": "In order to detect the creation of files with an executable or script extension by an Office application, you should: Monitor Windows file events for specific behaviors associated with Office applications creating potentially malicious files. Focus on instances where executable file names end with paths related to Office applications (Excel, Access, Publisher, PowerPoint, Visio, or Word). Additionally, be alert for the creation of files ending in extensions typically associated with executable or script files, such as '.bat', '.cmd', '.com', '.dll', '.exe', '.hta', '.ocx', '.proj', '.ps1', '.scf', '.scr', '.sys', '.vbe', '.vbs', '.wsf', or '.wsh'. Exclude file creation events in certain directories that are known to trigger false positives, especially those involving temporary directories used by web services or the WebEx application, and focus instead on unusual file creation events in locations not typically associated with benign activity, such as the 'assembly\\tmp\\' directory inside the user's local AppData. This helps in pinpointing potentially malicious activities where Office applications may be misused to deliver or execute malware within a system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of files with an executable or script extension by an Office application.",
      "answer": "In order to detect the creation of files with an executable or script extension by an Office application, you should: Monitor Windows file events for specific behaviors associated with Office applications creating potentially malicious files. Focus on instances where executable file names end with paths related to Office applications (Excel, Access, Publisher, PowerPoint, Visio, or Word). Additionally, be alert for the creation of files ending in extensions typically associated with executable or script files, such as '.bat', '.cmd', '.com', '.dll', '.exe', '.hta', '.ocx', '.proj', '.ps1', '.scf', '.scr', '.sys', '.vbe', '.vbs', '.wsf', or '.wsh'. Exclude file creation events in certain directories that are known to trigger false positives, especially those involving temporary directories used by web services or the WebEx application, and focus instead on unusual file creation events in locations not typically associated with benign activity, such as the 'assembly\\tmp\\' directory inside the user's local AppData. This helps in pinpointing potentially malicious activities where Office applications may be misused to deliver or execute malware within a system."
    }
  },
  {
    "instruction": "Please help me detect the following: registration of a new ODBC driver where the driver is located in a potentially suspicious location",
    "context": "",
    "output": "Sure!\nIn order to detect the registration of a new ODBC driver where the driver is located in a potentially suspicious location, you should monitor modifications to the Windows Registry specifically targeting the creation or setting of registry keys associated with ODBC drivers. Focus on registry activities where the event type is 'SetValue', and the registry keys being modified are within the path '\\SOFTWARE\\ODBC\\ODBCINST.INI\\' and end with either '\\Driver' or '\\Setup'. These registry keys are indicative of ODBC driver configuration.\n\nAdditionally, pay close attention to the details field of the registry modification for any paths that fall under suspicious directory locations. Such locations include various system and temporary directories like '\\PerfLogs\\', '\\ProgramData\\', '\\Temp\\', '\\Users\\Public\\', and several others that span across system32, SysWOW64, and user profile directories. These are locations where malicious actors might drop payloads or attempt to disguise malicious processes as legitimate system tasks.\n\nGiven the critical role ODBC drivers play in database connectivity, any modifications to these settings originating from or pointing to unexpected directories should be treated with suspicion. The tactic here aligns with Persistence, Defense Evasion, and Execution, as attackers might be aiming to maintain a foothold on the system, evade detection mechanisms, or execute unauthorized commands respectively. Any detections related to these indicators should be considered high priority due to the unlikely nature of false positives in this specific context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registration of a new ODBC driver where the driver is located in a potentially suspicious location",
      "answer": "In order to detect the registration of a new ODBC driver where the driver is located in a potentially suspicious location, you should monitor modifications to the Windows Registry specifically targeting the creation or setting of registry keys associated with ODBC drivers. Focus on registry activities where the event type is 'SetValue', and the registry keys being modified are within the path '\\SOFTWARE\\ODBC\\ODBCINST.INI\\' and end with either '\\Driver' or '\\Setup'. These registry keys are indicative of ODBC driver configuration.\n\nAdditionally, pay close attention to the details field of the registry modification for any paths that fall under suspicious directory locations. Such locations include various system and temporary directories like '\\PerfLogs\\', '\\ProgramData\\', '\\Temp\\', '\\Users\\Public\\', and several others that span across system32, SysWOW64, and user profile directories. These are locations where malicious actors might drop payloads or attempt to disguise malicious processes as legitimate system tasks.\n\nGiven the critical role ODBC drivers play in database connectivity, any modifications to these settings originating from or pointing to unexpected directories should be treated with suspicion. The tactic here aligns with Persistence, Defense Evasion, and Execution, as attackers might be aiming to maintain a foothold on the system, evade detection mechanisms, or execute unauthorized commands respectively. Any detections related to these indicators should be considered high priority due to the unlikely nature of false positives in this specific context."
    }
  },
  {
    "instruction": "Can you explain how to detect: tools such as UACMe used to bypass UAC with computerdefaults.exe (UACMe 59)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect tools such as UACMe used to bypass UAC with computerdefaults.exe (UACMe 59), you should monitor for the creation of processes within Windows systems that originate from \"C:\\Windows\\System32\\ComputerDefaults.exe\" running at a high integrity level or as system processes. Specifically, attention should be paid to these process creations that do not originate from the usual parent processes located in \"C:\\Windows\\System32\" or \"C:\\Program Files\" directories. This approach helps in identifying potential unauthorized or unintended actions that leverage the 'ComputerDefaults.exe' for elevating permissions without triggering User Account Control (UAC). This kind of surveillance is critical for pinpointing activities associated with certain attack techniques aimed at elevating privileges or bypassing security controls.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "tools such as UACMe used to bypass UAC with computerdefaults.exe (UACMe 59)",
      "answer": "In order to detect tools such as UACMe used to bypass UAC with computerdefaults.exe (UACMe 59), you should monitor for the creation of processes within Windows systems that originate from \"C:\\Windows\\System32\\ComputerDefaults.exe\" running at a high integrity level or as system processes. Specifically, attention should be paid to these process creations that do not originate from the usual parent processes located in \"C:\\Windows\\System32\" or \"C:\\Program Files\" directories. This approach helps in identifying potential unauthorized or unintended actions that leverage the 'ComputerDefaults.exe' for elevating permissions without triggering User Account Control (UAC). This kind of surveillance is critical for pinpointing activities associated with certain attack techniques aimed at elevating privileges or bypassing security controls."
    }
  },
  {
    "instruction": "How can I detect: update to a scheduled task event that contain suspicious keywords.",
    "context": "",
    "output": "In order to detect updates to a scheduled task event that contain suspicious keywords, you should monitor security logs generated by the Windows operating system, specifically focusing on the security service logs. The detection relies on having the Advanced Audit Policy configured to audit Other Object Access Events. This configuration is essential for identifying potential security threats related to scheduled task modifications.\n\nLook for event ID 4702, which signifies updates made to scheduled tasks. The modification details in these events are critical for analysis. Pay special attention to tasks that have been updated to include paths commonly associated with temporary or commonly exploited directories, such as \"\\AppData\\Local\\Temp\\\", \"\\AppData\\Roaming\\\", \"\\Users\\Public\\\", \"\\WINDOWS\\Temp\\\", \"C:\\Temp\\\", \"\\Desktop\\\", \"\\Downloads\\\", \"\\Temporary Internet Files\\\", \"C:\\ProgramData\\\", and \"C:\\Perflogs\\\". These paths are often used by attackers to execute malicious scripts or programs without drawing attention.\n\nAdditionally, analyze the commands associated with the updated tasks. Suspicious commands include but are not limited to \"regsvr32\", \"rundll32\", \"cmd.exe\", \"powershell\", \"pwsh\", \"mshta\", \"wscript\", \"cscript\", \"certutil\", \"bitsadmin\", \"bash.exe\", \"scrcons\", \"wmic\", \"forfiles\", \"scriptrunner\", and \"hh.exe\". These commands are commonly utilized in various attack techniques to execute scripts, manipulate processes, or download and run malicious payloads.\n\nThe detection of such activities in scheduled task updates is associated with several tactics and techniques, including Execution, Persistence, Privilege Escalation, and Defense Evasion. Identifying these modifications and command executions in the specified paths can be indicative of malicious activities attempting to gain a foothold, maintain persistence, escalate privileges, or evade detection mechanisms within a network.\n\nIt's important to exercise caution and thoroughly investigate these detections, as there can be unknown false positives due to legitimate administrative tasks that may use similar methods for valid purposes. The level of threat associated with these findings is considered high, emphasizing the importance of prompt and detailed investigation to prevent potential security breaches or system compromise.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "update to a scheduled task event that contain suspicious keywords.",
      "answer": "In order to detect updates to a scheduled task event that contain suspicious keywords, you should monitor security logs generated by the Windows operating system, specifically focusing on the security service logs. The detection relies on having the Advanced Audit Policy configured to audit Other Object Access Events. This configuration is essential for identifying potential security threats related to scheduled task modifications.\n\nLook for event ID 4702, which signifies updates made to scheduled tasks. The modification details in these events are critical for analysis. Pay special attention to tasks that have been updated to include paths commonly associated with temporary or commonly exploited directories, such as \"\\AppData\\Local\\Temp\\\", \"\\AppData\\Roaming\\\", \"\\Users\\Public\\\", \"\\WINDOWS\\Temp\\\", \"C:\\Temp\\\", \"\\Desktop\\\", \"\\Downloads\\\", \"\\Temporary Internet Files\\\", \"C:\\ProgramData\\\", and \"C:\\Perflogs\\\". These paths are often used by attackers to execute malicious scripts or programs without drawing attention.\n\nAdditionally, analyze the commands associated with the updated tasks. Suspicious commands include but are not limited to \"regsvr32\", \"rundll32\", \"cmd.exe\", \"powershell\", \"pwsh\", \"mshta\", \"wscript\", \"cscript\", \"certutil\", \"bitsadmin\", \"bash.exe\", \"scrcons\", \"wmic\", \"forfiles\", \"scriptrunner\", and \"hh.exe\". These commands are commonly utilized in various attack techniques to execute scripts, manipulate processes, or download and run malicious payloads.\n\nThe detection of such activities in scheduled task updates is associated with several tactics and techniques, including Execution, Persistence, Privilege Escalation, and Defense Evasion. Identifying these modifications and command executions in the specified paths can be indicative of malicious activities attempting to gain a foothold, maintain persistence, escalate privileges, or evade detection mechanisms within a network.\n\nIt's important to exercise caution and thoroughly investigate these detections, as there can be unknown false positives due to legitimate administrative tasks that may use similar methods for valid purposes. The level of threat associated with these findings is considered high, emphasizing the importance of prompt and detailed investigation to prevent potential security breaches or system compromise."
    }
  },
  {
    "instruction": "Can you explain how to detect: cmstp loading \"dll\" or \"ocx\" files from suspicious locations",
    "context": "",
    "output": "Certainly!\n\nIn order to detect cmstp loading \"dll\" or \"ocx\" files from suspicious locations, you should monitor the image load events on Windows systems. Specifically, watch for instances where the cmstp.exe process is executing and loading either dll or ocx files. These files should be additionally scrutinized if they are being loaded from paths that are not typically associated with legitimate activity, such as \"\\PerfLogs\\\", \"\\ProgramData\\\", \"\\Users\\\", \"\\Windows\\Temp\\\", and \"C:\\Temp\\\" directories. This monitoring is crucial as loading files from these locations is often a red flag for suspicious behavior, possibly indicating an attempt to exploit or bypass security mechanisms. Given the high potential for abuse with minimal chance of false positives, identifying such activities should be treated with a high level of concern.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "cmstp loading \"dll\" or \"ocx\" files from suspicious locations",
      "answer": "In order to detect cmstp loading \"dll\" or \"ocx\" files from suspicious locations, you should monitor the image load events on Windows systems. Specifically, watch for instances where the cmstp.exe process is executing and loading either dll or ocx files. These files should be additionally scrutinized if they are being loaded from paths that are not typically associated with legitimate activity, such as \"\\PerfLogs\\\", \"\\ProgramData\\\", \"\\Users\\\", \"\\Windows\\Temp\\\", and \"C:\\Temp\\\" directories. This monitoring is crucial as loading files from these locations is often a red flag for suspicious behavior, possibly indicating an attempt to exploit or bypass security mechanisms. Given the high potential for abuse with minimal chance of false positives, identifying such activities should be treated with a high level of concern."
    }
  },
  {
    "instruction": "How to detect: Obfuscated Powershell via Stdin in Scripts",
    "context": "",
    "output": "In order to detect obfuscated PowerShell via Stdin in scripts, you should focus on monitoring Windows Security Logs, particularly ensuring that the 'System Security Extension' audit subcategory is enabled. This is necessary to capture Event ID 4697, which logs the creation of a new service. The detection should specifically look for service file names containing indications of obfuscation or suspicious activity, such as the use of 'set' in conjunction with '&&', or file names containing the words 'environment', 'invoke', or '${input)'. These indicators suggest an attempt to execute obfuscated commands or scripts, which is a common tactic used in stealthy PowerShell attacks. The detection of these activities is considered of high importance due to the potential severity of PowerShell-based attacks, which can range from unauthorized system access to data exfiltration. Since the method for this detection might also intercept legitimate activities involving complex service creation commands, it's acknowledged that there could be unknown false positives. However, in the context of cybersecurity defenses, the presence of these specific patterns in service file names should prompt a closer investigation, as they commonly relate to malicious attempts to leverage obfuscated PowerShell scripts, aiming to evade detection mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via Stdin in Scripts",
      "answer": "In order to detect obfuscated PowerShell via Stdin in scripts, you should focus on monitoring Windows Security Logs, particularly ensuring that the 'System Security Extension' audit subcategory is enabled. This is necessary to capture Event ID 4697, which logs the creation of a new service. The detection should specifically look for service file names containing indications of obfuscation or suspicious activity, such as the use of 'set' in conjunction with '&&', or file names containing the words 'environment', 'invoke', or '${input)'. These indicators suggest an attempt to execute obfuscated commands or scripts, which is a common tactic used in stealthy PowerShell attacks. The detection of these activities is considered of high importance due to the potential severity of PowerShell-based attacks, which can range from unauthorized system access to data exfiltration. Since the method for this detection might also intercept legitimate activities involving complex service creation commands, it's acknowledged that there could be unknown false positives. However, in the context of cybersecurity defenses, the presence of these specific patterns in service file names should prompt a closer investigation, as they commonly relate to malicious attempts to leverage obfuscated PowerShell scripts, aiming to evade detection mechanisms."
    }
  },
  {
    "instruction": "Please help me detect the following: This method detects mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups)",
    "context": "",
    "output": "Sure!\nIn order to detect mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups), you should: Monitor Windows event logs for specific keywords that are indicative of Mimikatz use. These keywords include 'dpapi::masterkey', 'eo.oe.kiwi', 'event::clear', 'event::drop', 'gentilkiwi.com', 'kerberos::golden', 'kerberos::ptc', 'kerberos::ptt', 'kerberos::tgt', 'Kiwi Legit Printer', 'lsadump::', 'mimidrv.sys', '\\mimilib.dll', 'misc::printnightmare', 'misc::shadowcopies', 'misc::skeleton', 'privilege::backup', 'privilege::debug', 'privilege::driver', and 'sekurlsa::'. It is vital to exclude false positives that could trigger these alerts, such as actions by system administrators, antivirus signature updates, or files innocently named after Mimikatz. These criteria mainly concern monitoring Sysmon's FileStream events, specifically avoiding EventID 15 due to its potential for false positives. The focus on these specific keywords and exclusions is because they are tied with various tactics and techniques used in attacks, like credential dumping, obtaining sensitive information, and privilege escalation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This method detects mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups)",
      "answer": "In order to detect mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups), you should: Monitor Windows event logs for specific keywords that are indicative of Mimikatz use. These keywords include 'dpapi::masterkey', 'eo.oe.kiwi', 'event::clear', 'event::drop', 'gentilkiwi.com', 'kerberos::golden', 'kerberos::ptc', 'kerberos::ptt', 'kerberos::tgt', 'Kiwi Legit Printer', 'lsadump::', 'mimidrv.sys', '\\mimilib.dll', 'misc::printnightmare', 'misc::shadowcopies', 'misc::skeleton', 'privilege::backup', 'privilege::debug', 'privilege::driver', and 'sekurlsa::'. It is vital to exclude false positives that could trigger these alerts, such as actions by system administrators, antivirus signature updates, or files innocently named after Mimikatz. These criteria mainly concern monitoring Sysmon's FileStream events, specifically avoiding EventID 15 due to its potential for false positives. The focus on these specific keywords and exclusions is because they are tied with various tactics and techniques used in attacks, like credential dumping, obtaining sensitive information, and privilege escalation."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious DNS queries known from Cobalt Strike beacons",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious DNS queries known from Cobalt Strike beacons, you should: Monitor DNS logs for queries that begin with 'aaa.stage.' or 'post.1'. Additionally, keep an eye out for queries containing the pattern '.stage.123456.' within them. These specific patterns in DNS queries are indicative of Cobalt Strike beacon communication, which is a common tool used in cyber attacks to establish a backdoor for persistent access or to exfiltrate data. Any detection of these query patterns should be considered critical, as they are a strong signal of an ongoing or imminent threat. Given the critical nature of these detections, there are no known benign causes for these query patterns (no known false positives), implying that investigations should be prioritized when alerts are triggered. This analysis focuses on DNS logs, highlighting the importance of monitoring and analyzing DNS traffic to uncover potential malicious activities related to Cobalt Strike beacons.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious DNS queries known from Cobalt Strike beacons",
      "answer": "In order to detect suspicious DNS queries known from Cobalt Strike beacons, you should: Monitor DNS logs for queries that begin with 'aaa.stage.' or 'post.1'. Additionally, keep an eye out for queries containing the pattern '.stage.123456.' within them. These specific patterns in DNS queries are indicative of Cobalt Strike beacon communication, which is a common tool used in cyber attacks to establish a backdoor for persistent access or to exfiltrate data. Any detection of these query patterns should be considered critical, as they are a strong signal of an ongoing or imminent threat. Given the critical nature of these detections, there are no known benign causes for these query patterns (no known false positives), implying that investigations should be prioritized when alerts are triggered. This analysis focuses on DNS logs, highlighting the importance of monitoring and analyzing DNS traffic to uncover potential malicious activities related to Cobalt Strike beacons."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect activation of DisableRestrictedAdmin to desable RestrictedAdmin mode.\nRestrictedAdmin mode prevents the transmission of reusable credentials to the remote system to which you connect using Remote Desktop.\nThis prevents your credentials from being harvested during the initial connection process if the remote server has been compromise\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect activation of DisableRestrictedAdmin to disable RestrictedAdmin mode, you should: Monitor the Windows Registry setting changes, focusing specifically on the event where a value is being set (SetValue event type). This particular monitoring should be aimed at the registry key path ending with 'System\\CurrentControlSet\\Control\\Lsa\\DisableRestrictedAdmin'. The significant indicator for detection would be the setting of this registry key to a DWORD value of 0x00000001. Such a configuration change disables the RestrictedAdmin mode, which is crucial for preventing the transmission of reusable credentials during the initial connection process of a Remote Desktop session. This mode is essential to safeguard against credential harvesting in the event that the remote server is compromised. The detection level for this activity is considered high due to the potential security implications of disabling RestrictedAdmin mode. Keep in mind that while monitoring for this activity, there may be unknown instances that could trigger false positives; thus, each alert should be thoroughly investigated.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect activation of DisableRestrictedAdmin to desable RestrictedAdmin mode.\nRestrictedAdmin mode prevents the transmission of reusable credentials to the remote system to which you connect using Remote Desktop.\nThis prevents your credentials from being harvested during the initial connection process if the remote server has been compromise\n",
      "answer": "In order to detect activation of DisableRestrictedAdmin to disable RestrictedAdmin mode, you should: Monitor the Windows Registry setting changes, focusing specifically on the event where a value is being set (SetValue event type). This particular monitoring should be aimed at the registry key path ending with 'System\\CurrentControlSet\\Control\\Lsa\\DisableRestrictedAdmin'. The significant indicator for detection would be the setting of this registry key to a DWORD value of 0x00000001. Such a configuration change disables the RestrictedAdmin mode, which is crucial for preventing the transmission of reusable credentials during the initial connection process of a Remote Desktop session. This mode is essential to safeguard against credential harvesting in the event that the remote server is compromised. The detection level for this activity is considered high due to the potential security implications of disabling RestrictedAdmin mode. Keep in mind that while monitoring for this activity, there may be unknown instances that could trigger false positives; thus, each alert should be thoroughly investigated."
    }
  },
  {
    "instruction": "How to detect: Storing files in Alternate Data Stream (ADS) similar to Astaroth malware.",
    "context": "",
    "output": "In order to store files in Alternate Data Stream (ADS) similar to Astaroth malware, you should: focus on monitoring Windows PowerShell scripts. Ensure that Script Block Logging is enabled on your systems, which is crucial for capturing potentially malicious activities. Specifically, be vigilant for scripts that demonstrate the execution of the Start-Process cmdlet in conjunction with using \"$env:comspec\" for specifying the command processor path. This technique often encompasses the use of '-ArgumentList ' alongside redirection symbols '>', indicative of operations that might be attempting to hide files in an Alternate Data Stream, a tactic seen in threats like the Astaroth malware. Keep a medium-level alertness for such activities, though be aware that not all instances may be malevolent in nature, and there might be unknown benign uses that could trigger false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Storing files in Alternate Data Stream (ADS) similar to Astaroth malware.",
      "answer": "In order to store files in Alternate Data Stream (ADS) similar to Astaroth malware, you should: focus on monitoring Windows PowerShell scripts. Ensure that Script Block Logging is enabled on your systems, which is crucial for capturing potentially malicious activities. Specifically, be vigilant for scripts that demonstrate the execution of the Start-Process cmdlet in conjunction with using \"$env:comspec\" for specifying the command processor path. This technique often encompasses the use of '-ArgumentList ' alongside redirection symbols '>', indicative of operations that might be attempting to hide files in an Alternate Data Stream, a tactic seen in threats like the Astaroth malware. Keep a medium-level alertness for such activities, though be aware that not all instances may be malevolent in nature, and there might be unknown benign uses that could trigger false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location.",
    "context": "",
    "output": "In order to detect potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location, you should: Look for instances where \"SystemResetPlatform.exe\" loads a DLL named \"RjvPlatform.dll\" in the Windows environment, specifically within the image loading category. It is vital to ensure that the \"SystemResetPlatform.exe\" process is not operating from its legitimate path, which is typically \"C:\\Windows\\System32\\SystemResetPlatform\\\". The detection focuses on identifying unusual or suspicious behavior that deviates from the norm, such as the loading of \"RjvPlatform.dll\" from paths other than the designated legitimate one. This is indicative of an attempt to exploit the legitimate \"SystemResetPlatform.exe\" process for malicious purposes, commonly seen in techniques involving DLL sideloading. The effectiveness of this detection is deemed high, with false positives being unlikely, signifying a strong indicator of malicious activity when such criteria are met.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location.",
      "answer": "In order to detect potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location, you should: Look for instances where \"SystemResetPlatform.exe\" loads a DLL named \"RjvPlatform.dll\" in the Windows environment, specifically within the image loading category. It is vital to ensure that the \"SystemResetPlatform.exe\" process is not operating from its legitimate path, which is typically \"C:\\Windows\\System32\\SystemResetPlatform\\\". The detection focuses on identifying unusual or suspicious behavior that deviates from the norm, such as the loading of \"RjvPlatform.dll\" from paths other than the designated legitimate one. This is indicative of an attempt to exploit the legitimate \"SystemResetPlatform.exe\" process for malicious purposes, commonly seen in techniques involving DLL sideloading. The effectiveness of this detection is deemed high, with false positives being unlikely, signifying a strong indicator of malicious activity when such criteria are met."
    }
  },
  {
    "instruction": "How to detect: when someone is adding or removing applications or folder from exploit guard \"ProtectedFolders\" and \"AllowedApplications\"",
    "context": "",
    "output": "In order to detect when someone is adding or removing applications or folder from exploit guard \"ProtectedFolders\" and \"AllowedApplications\", you should: focus on monitoring Windows Defender events, specifically for changes in the antimalware platform configuration. This involves looking for EventID 5007, which indicates a configuration change. Attention should be directed towards modifications in the \"AllowedApplications\" and \"ProtectedFolders\" settings within Windows Defender Exploit Guard. You must check for new values that include paths to \"\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\AllowedApplications\\\", which would suggest the addition of applications to the allowed list. Furthermore, be vigilant of any paths added that appear suspicious or unconventional, such as '\\Users\\Public\\', '\\AppData\\Local\\Temp\\', '\\Desktop\\', '\\PerfLogs\\', or '\\Windows\\Temp\\', as these are not typical locations for trusted applications and could indicate potential malicious activity.\n\nAdditionally, it's crucial to monitor for any removal of folders from the \"ProtectedFolders\" list. This would be flagged by the same EventID but would require inspecting the 'OldValue' for paths suggesting the removal of protection from certain folders. This activity could weaken the security posture by making previously guarded folders vulnerable to exploitation.\n\nGiven that false positives are unlikely, any hits on these criteria should be investigated with high priority. Such monitoring efforts align with defense evasion and privilege escalation tactics, as adversaries might attempt to bypass security measures by manipulating protected folders or whitelisting malicious applications. This approach ensures that any attempt to tamper with the configurations of crucial Windows Defender Exploit Guard features is promptly identified and addressed.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when someone is adding or removing applications or folder from exploit guard \"ProtectedFolders\" and \"AllowedApplications\"",
      "answer": "In order to detect when someone is adding or removing applications or folder from exploit guard \"ProtectedFolders\" and \"AllowedApplications\", you should: focus on monitoring Windows Defender events, specifically for changes in the antimalware platform configuration. This involves looking for EventID 5007, which indicates a configuration change. Attention should be directed towards modifications in the \"AllowedApplications\" and \"ProtectedFolders\" settings within Windows Defender Exploit Guard. You must check for new values that include paths to \"\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\AllowedApplications\\\", which would suggest the addition of applications to the allowed list. Furthermore, be vigilant of any paths added that appear suspicious or unconventional, such as '\\Users\\Public\\', '\\AppData\\Local\\Temp\\', '\\Desktop\\', '\\PerfLogs\\', or '\\Windows\\Temp\\', as these are not typical locations for trusted applications and could indicate potential malicious activity.\n\nAdditionally, it's crucial to monitor for any removal of folders from the \"ProtectedFolders\" list. This would be flagged by the same EventID but would require inspecting the 'OldValue' for paths suggesting the removal of protection from certain folders. This activity could weaken the security posture by making previously guarded folders vulnerable to exploitation.\n\nGiven that false positives are unlikely, any hits on these criteria should be investigated with high priority. Such monitoring efforts align with defense evasion and privilege escalation tactics, as adversaries might attempt to bypass security measures by manipulating protected folders or whitelisting malicious applications. This approach ensures that any attempt to tamper with the configurations of crucial Windows Defender Exploit Guard features is promptly identified and addressed."
    }
  },
  {
    "instruction": "Please help me detect the following: Normally, DNS logs contain a limited amount of different dns queries for a single domain. a high amount of queries for a single domain, which can be an indicator that DNS is used to transfer data.",
    "context": "",
    "output": "Sure!\nIn order to normally detect a high amount of queries for a single domain, which can be an indicator that DNS is used to transfer data, you should: monitor DNS logs for an unusually high volume of DNS queries targeting a single parent domain. If the count of DNS queries for any parent domain exceeds 1000, it might indicate a potential misuse of the DNS protocol, possibly for data exfiltration or other nefarious activities. It\u2019s crucial to note, however, that some legitimate software applications also use DNS for data transferring purposes, and such activities might generate false positives by appearing as if DNS is being used for malicious reasons. This detection strategy emphasizes the importance of closely observing DNS requests and querying patterns, as they can provide insights into malicious activities that utilize DNS for data leakage or as a channel for command and control communications. The underlying tactic associated with this activity includes Exfiltration Over Alternative Protocol, with a focus on ensuring the security of the dns category of log sources.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Normally, DNS logs contain a limited amount of different dns queries for a single domain. a high amount of queries for a single domain, which can be an indicator that DNS is used to transfer data.",
      "answer": "In order to normally detect a high amount of queries for a single domain, which can be an indicator that DNS is used to transfer data, you should: monitor DNS logs for an unusually high volume of DNS queries targeting a single parent domain. If the count of DNS queries for any parent domain exceeds 1000, it might indicate a potential misuse of the DNS protocol, possibly for data exfiltration or other nefarious activities. It\u2019s crucial to note, however, that some legitimate software applications also use DNS for data transferring purposes, and such activities might generate false positives by appearing as if DNS is being used for malicious reasons. This detection strategy emphasizes the importance of closely observing DNS requests and querying patterns, as they can provide insights into malicious activities that utilize DNS for data leakage or as a channel for command and control communications. The underlying tactic associated with this activity includes Exfiltration Over Alternative Protocol, with a focus on ensuring the security of the dns category of log sources."
    }
  },
  {
    "instruction": "How to detect: Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels\nEnsure that an encryption is used for all sensitive information in transit.\nEnsure that an encrypted channels is used for all administrative account access.\n",
    "context": "",
    "output": "In order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that an encrypted channel is used for all administrative account access, you should monitor network flow logs for traffic to specific ports which are commonly associated with unencrypted or potentially insecure communications. These ports include 8080, 21 (FTP), 80 (HTTP), 23 (Telnet), 50000, 1521 (Oracle database), 27017 (MongoDB), 1433 (Microsoft SQL Server), 11211 (Memcached), 3306 (MySQL), 15672 (RabbitMQ), and VNC ports 5900 to 5904. Communications to these ports might indicate that sensitive or administrative data is being transmitted without encryption, which could lead to exposure of confidential information. Be aware that there might be false positive detections, signifying legitimate use of these ports under certain circumstances. Nonetheless, it is critical to treat any activity detected on these ports with scrutiny to maintain the security and integrity of data in transit.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels\nEnsure that an encryption is used for all sensitive information in transit.\nEnsure that an encrypted channels is used for all administrative account access.\n",
      "answer": "In order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that an encrypted channel is used for all administrative account access, you should monitor network flow logs for traffic to specific ports which are commonly associated with unencrypted or potentially insecure communications. These ports include 8080, 21 (FTP), 80 (HTTP), 23 (Telnet), 50000, 1521 (Oracle database), 27017 (MongoDB), 1433 (Microsoft SQL Server), 11211 (Memcached), 3306 (MySQL), 15672 (RabbitMQ), and VNC ports 5900 to 5904. Communications to these ports might indicate that sensitive or administrative data is being transmitted without encryption, which could lead to exposure of confidential information. Be aware that there might be false positive detections, signifying legitimate use of these ports under certain circumstances. Nonetheless, it is critical to treat any activity detected on these ports with scrutiny to maintain the security and integrity of data in transit."
    }
  },
  {
    "instruction": "How to detect: suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec)",
    "context": "",
    "output": "In order to detect suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec), you should monitor the creation of processes on Windows systems, paying particular attention to the execution of the sysprep.exe application. Specifically, look for instances where sysprep.exe is launched and its command line arguments include references to the '\\AppData\\' directory. This behavior can be indicative of suspicious activity, such as attempts to leverage the sysprep process for malicious purposes, matching tactics and techniques associated with malicious software like the Trojan Syndicasec. It's important to note that while monitoring for this activity, one might encounter legitimate administrative uses of sysprep.exe that also interact with the AppData folder, hence, some alerts might not represent actual threats. The level of concern for such detections is considered medium, reflecting a balance between the potential for genuine threat and the possibility of legitimate usage.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec)",
      "answer": "In order to detect suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec), you should monitor the creation of processes on Windows systems, paying particular attention to the execution of the sysprep.exe application. Specifically, look for instances where sysprep.exe is launched and its command line arguments include references to the '\\AppData\\' directory. This behavior can be indicative of suspicious activity, such as attempts to leverage the sysprep process for malicious purposes, matching tactics and techniques associated with malicious software like the Trojan Syndicasec. It's important to note that while monitoring for this activity, one might encounter legitimate administrative uses of sysprep.exe that also interact with the AppData folder, hence, some alerts might not represent actual threats. The level of concern for such detections is considered medium, reflecting a balance between the potential for genuine threat and the possibility of legitimate usage."
    }
  },
  {
    "instruction": "How to detect: Microsoft Cloud App Security reported when a user uploads files to the cloud that might be infected with ransomware.",
    "context": "",
    "output": "In order to detect when a Microsoft Cloud App Security reported when a user uploads files to the cloud that might be infected with ransomware, you should: Monitor logs from the threat management service, specifically targeting the Microsoft 365 product. Focus on logs generated by the SecurityComplianceCenter, and look for events named 'Potential ransomware activity' where the status is reported as success. This approach aims to capture instances where the system identifies activities that resemble the upload of files possibly carrying ransomware into the cloud environment. It is important to consider that some detections might be false positives, as these activities could occur under legitimate scenarios not intended to be harmful, and the detection confidence is considered medium. This monitoring closely aligns with understanding ransomware tactics and spotting potential breaches or threats in cloud security compliance efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported when a user uploads files to the cloud that might be infected with ransomware.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported when a user uploads files to the cloud that might be infected with ransomware, you should: Monitor logs from the threat management service, specifically targeting the Microsoft 365 product. Focus on logs generated by the SecurityComplianceCenter, and look for events named 'Potential ransomware activity' where the status is reported as success. This approach aims to capture instances where the system identifies activities that resemble the upload of files possibly carrying ransomware into the cloud environment. It is important to consider that some detections might be false positives, as these activities could occur under legitimate scenarios not intended to be harmful, and the detection confidence is considered medium. This monitoring closely aligns with understanding ransomware tactics and spotting potential breaches or threats in cloud security compliance efforts."
    }
  },
  {
    "instruction": "How to detect: TOKEN OBFUSCATION technique from Invoke-Obfuscation",
    "context": "",
    "output": "In order to detect TOKEN OBFUSCATION technique from Invoke-Obfuscation, you should focus on monitoring process creation events in Windows systems. Look for instances where the command line demonstrates the use of obfuscation techniques. Specifically, be on the lookout for command lines containing the following patterns:\n\n1. Words reconstructed with backticks (`) between letters or symbols, as well as dashes (-). This might appear as an attempt to evade simple detection methods by breaking up keywords, commands, or PowerShell cmdlets. Examples include constructs that appear fragmented yet form legitimate PowerShell expressions or commands when the backtick is used as an escape character in PowerShell.\n\n2. Usage of the format operator (-f) with a pattern that utilizes numbered placeholders (\"{0}\" \"{1}\" etc.) followed by \"-f\". This operator is often used in PowerShell to format strings, but in this context, it might be part of an obfuscation strategy to disguise the actual command being run. It reconstructs the command in a way that's not readily apparent without resolving the format operation.\n\n3. Complex expressions that leverage variable constructs, especially those using `${...}` with slight modifications or obfuscations within the variable name. This includes environment variables that have been deliberately obfuscated, like `${env:path}` but with additional characters or unnecessary complexity aiming to hide the true intent or make static analysis harder.\n\nThese detection patterns are essential for identifying activities associated with the Invoke-Obfuscation framework, which employs various obfuscation techniques to evade detection. This kind of activity is often a red flag for malicious operations, as obfuscation is commonly used by attackers to hide the presence of malware, scripts, or commands that could harm the system or compromise data.\n\nThis monitoring approach falls under the broader category of defense strategies against tactics and techniques like Defense Evasion and Execution, as it helps in unveiling attempts to execute obfuscated scripts or commands that could be part of an attack. However, it's important to note that due to the nature of obfuscation, there might be unknown false positives, and each detection should be investigated to confirm the nature of the activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "TOKEN OBFUSCATION technique from Invoke-Obfuscation",
      "answer": "In order to detect TOKEN OBFUSCATION technique from Invoke-Obfuscation, you should focus on monitoring process creation events in Windows systems. Look for instances where the command line demonstrates the use of obfuscation techniques. Specifically, be on the lookout for command lines containing the following patterns:\n\n1. Words reconstructed with backticks (`) between letters or symbols, as well as dashes (-). This might appear as an attempt to evade simple detection methods by breaking up keywords, commands, or PowerShell cmdlets. Examples include constructs that appear fragmented yet form legitimate PowerShell expressions or commands when the backtick is used as an escape character in PowerShell.\n\n2. Usage of the format operator (-f) with a pattern that utilizes numbered placeholders (\"{0}\" \"{1}\" etc.) followed by \"-f\". This operator is often used in PowerShell to format strings, but in this context, it might be part of an obfuscation strategy to disguise the actual command being run. It reconstructs the command in a way that's not readily apparent without resolving the format operation.\n\n3. Complex expressions that leverage variable constructs, especially those using `${...}` with slight modifications or obfuscations within the variable name. This includes environment variables that have been deliberately obfuscated, like `${env:path}` but with additional characters or unnecessary complexity aiming to hide the true intent or make static analysis harder.\n\nThese detection patterns are essential for identifying activities associated with the Invoke-Obfuscation framework, which employs various obfuscation techniques to evade detection. This kind of activity is often a red flag for malicious operations, as obfuscation is commonly used by attackers to hide the presence of malware, scripts, or commands that could harm the system or compromise data.\n\nThis monitoring approach falls under the broader category of defense strategies against tactics and techniques like Defense Evasion and Execution, as it helps in unveiling attempts to execute obfuscated scripts or commands that could be part of an attack. However, it's important to note that due to the nature of obfuscation, there might be unknown false positives, and each detection should be investigated to confirm the nature of the activity."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential COM object hijacking where the \"Server\" (In/Out) is pointing to a supsicious or unsuale location",
    "context": "",
    "output": "In order to detect potential COM object hijacking where the \"Server\" (In/Out) is pointing to a suspicious or unusual location, you should focus on monitoring registry set actions within the Windows operating system where the event type is a 'SetValue' operation. This involves paying close attention to the TargetObject's starting path, which could be one of four key initial paths: 'HKCR\\CLSID\\', 'HKEY_CLASSES_ROOT\\CLSID\\', 'HKCU\\Software\\Classes\\CLSID\\', or 'HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\'. Additionally, the TargetObject should end with either '\\InprocServer32\\(Default)' or '\\LocalServer32\\(Default)', indicating it is targeting the default server locations for COM object registration.\n\nEqually important is to scrutinize the details field of the log for paths known to be commonly used by malicious actors, such as '\\Users\\Public\\', '\\Desktop\\', '\\AppData\\Local\\Temp\\', '\\Downloads\\', '\\Windows\\Temp\\', '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\', and '\\System32\\spool\\drivers\\color\\', the latter being specifically mentioned in relation to the Knotweed campaign. Placeholders like '%temp%', '%tmp%', and '%appdata%' are also considered suspicious and should be carefully evaluated.\n\nIt's critical to approach this detection with an understanding that there could be false positives, primarily due to legitimate applications that might use similar registry paths or operations. These instances should be meticulously validated and, if proven benign, added to an exclusion list to refine the detection process further.\n\nThis detection strategy aligns with the MITRE ATT&CK framework's tactics concerning persistence and privilege escalation, by exploiting the Windows COM object system to hijack the server process path, pointing it instead to a location controlled by the attacker, thereby achieving unauthorized persistence or elevated privileges on the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential COM object hijacking where the \"Server\" (In/Out) is pointing to a supsicious or unsuale location",
      "answer": "In order to detect potential COM object hijacking where the \"Server\" (In/Out) is pointing to a suspicious or unusual location, you should focus on monitoring registry set actions within the Windows operating system where the event type is a 'SetValue' operation. This involves paying close attention to the TargetObject's starting path, which could be one of four key initial paths: 'HKCR\\CLSID\\', 'HKEY_CLASSES_ROOT\\CLSID\\', 'HKCU\\Software\\Classes\\CLSID\\', or 'HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\'. Additionally, the TargetObject should end with either '\\InprocServer32\\(Default)' or '\\LocalServer32\\(Default)', indicating it is targeting the default server locations for COM object registration.\n\nEqually important is to scrutinize the details field of the log for paths known to be commonly used by malicious actors, such as '\\Users\\Public\\', '\\Desktop\\', '\\AppData\\Local\\Temp\\', '\\Downloads\\', '\\Windows\\Temp\\', '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\', and '\\System32\\spool\\drivers\\color\\', the latter being specifically mentioned in relation to the Knotweed campaign. Placeholders like '%temp%', '%tmp%', and '%appdata%' are also considered suspicious and should be carefully evaluated.\n\nIt's critical to approach this detection with an understanding that there could be false positives, primarily due to legitimate applications that might use similar registry paths or operations. These instances should be meticulously validated and, if proven benign, added to an exclusion list to refine the detection process further.\n\nThis detection strategy aligns with the MITRE ATT&CK framework's tactics concerning persistence and privilege escalation, by exploiting the Windows COM object system to hijack the server process path, pointing it instead to a location controlled by the attacker, thereby achieving unauthorized persistence or elevated privileges on the system."
    }
  },
  {
    "instruction": "Can you explain how to detect: installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required), you should: Monitor Windows registry settings modifications with a focus on any events where the type is set to SetValue indicating a change or addition. Specifically, watch for changes to the registry path that ends with '\\services\\DNS\\Parameters\\ServerLevelPluginDll'. This path is critical as it is used to configure DLLs that the DNS service will load, potentially leading to code execution in the context of the DNS server after a restart. This activity is flagged with a high level of concern due to the sensitivity and potential impact of unauthorized modifications in this part of the registry. False positives are flagged as unknown, suggesting close scrutiny of detected events. This monitoring is significant for identifying possible malicious activities associated with techniques aiming to exploit the DNS server\u2019s functionality or integrity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)",
      "answer": "In order to detect the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required), you should: Monitor Windows registry settings modifications with a focus on any events where the type is set to SetValue indicating a change or addition. Specifically, watch for changes to the registry path that ends with '\\services\\DNS\\Parameters\\ServerLevelPluginDll'. This path is critical as it is used to configure DLLs that the DNS service will load, potentially leading to code execution in the context of the DNS server after a restart. This activity is flagged with a high level of concern due to the sensitivity and potential impact of unauthorized modifications in this part of the registry. False positives are flagged as unknown, suggesting close scrutiny of detected events. This monitoring is significant for identifying possible malicious activities associated with techniques aiming to exploit the DNS server\u2019s functionality or integrity."
    }
  },
  {
    "instruction": "How can I detect: BITS transfer job downloading files from a file sharing domain.",
    "context": "",
    "output": "In order to detect BITS transfer job downloading files from a file sharing domain, you should monitor for specific activities within the Windows Background Intelligent Transfer Service (BITS) client logs. Particularly, you need to look out for events with the ID 16403, as these indicate BITS transfer jobs. The focus of the detection should be on any instances where files are being downloaded from known file sharing or content hosting domains. Such domains include, but are not limited to, '.ghostbin.co/', '.hastebin.com', '.paste.ee', 'anonfiles.com', 'cdn.discordapp.com/attachments/', 'ddns.net', 'gist.githubusercontent.com', 'mediafire.com', 'mega.nz', 'paste.ee', 'pastebin.com', 'pastebin.pl', 'pastetext.net', 'privatlab.com', 'privatlab.net', 'raw.githubusercontent.com', 'send.exploit.in', 'sendspace.com', 'storage.googleapis.com', 'transfer.sh', and 'ufile.io'. Monitoring for such activities is crucial as it can indicate the unauthorized downloading or uploading of files, which might be associated with malicious operations like malware distribution or data exfiltration. This type of monitoring is essential for identifying potentially harmful behavior and mitigating possible security threats associated with these activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "BITS transfer job downloading files from a file sharing domain.",
      "answer": "In order to detect BITS transfer job downloading files from a file sharing domain, you should monitor for specific activities within the Windows Background Intelligent Transfer Service (BITS) client logs. Particularly, you need to look out for events with the ID 16403, as these indicate BITS transfer jobs. The focus of the detection should be on any instances where files are being downloaded from known file sharing or content hosting domains. Such domains include, but are not limited to, '.ghostbin.co/', '.hastebin.com', '.paste.ee', 'anonfiles.com', 'cdn.discordapp.com/attachments/', 'ddns.net', 'gist.githubusercontent.com', 'mediafire.com', 'mega.nz', 'paste.ee', 'pastebin.com', 'pastebin.pl', 'pastetext.net', 'privatlab.com', 'privatlab.net', 'raw.githubusercontent.com', 'send.exploit.in', 'sendspace.com', 'storage.googleapis.com', 'transfer.sh', and 'ufile.io'. Monitoring for such activities is crucial as it can indicate the unauthorized downloading or uploading of files, which might be associated with malicious operations like malware distribution or data exfiltration. This type of monitoring is essential for identifying potentially harmful behavior and mitigating possible security threats associated with these activities."
    }
  },
  {
    "instruction": "How can I detect: when Okta FastPass prevents a known phishing site.",
    "context": "",
    "output": "In order to detect when Okta FastPass prevents a known phishing site, you should monitor Okta authentication logs for specific events where the FastPass authentication method declines a login attempt due to a phishing threat. Look for records where the outcome reason is marked as 'FastPass declined phishing attempt' and the outcome result is a FAILURE, specifically during multi-factor authentication processes denoted by the event type 'user.authentication.auth_via_mfa'. Such incidents are flagged with a high-level severity due to the critical nature of thwarting phishing attempts. This detection mechanism is crucial for identifying and reacting to phishing threats that have been recognized and blocked by the Okta FastPass system, ensuring the security of user accounts and the integrity of the authentication process. False positives are considered unlikely, indicating a strong confidence in the specificity of these detection criteria for identifying phishing-related security incidents.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when Okta FastPass prevents a known phishing site.",
      "answer": "In order to detect when Okta FastPass prevents a known phishing site, you should monitor Okta authentication logs for specific events where the FastPass authentication method declines a login attempt due to a phishing threat. Look for records where the outcome reason is marked as 'FastPass declined phishing attempt' and the outcome result is a FAILURE, specifically during multi-factor authentication processes denoted by the event type 'user.authentication.auth_via_mfa'. Such incidents are flagged with a high-level severity due to the critical nature of thwarting phishing attempts. This detection mechanism is crucial for identifying and reacting to phishing threats that have been recognized and blocked by the Okta FastPass system, ensuring the security of user accounts and the integrity of the authentication process. False positives are considered unlikely, indicating a strong confidence in the specificity of these detection criteria for identifying phishing-related security incidents."
    }
  },
  {
    "instruction": "How can I detect: PowerShell execution to set the ACL of a file or a folder",
    "context": "",
    "output": "In order to detect PowerShell execution to set the ACL of a file or a folder, you should: focus on monitoring process creation events on Windows systems. Specifically, identify instances where either the PowerShell executable (powershell.exe) or the PowerShell DLL (pwsh.dll) is invoked. Look for command lines that include the invocation of the 'Set-Acl' cmdlet, which is used to modify the Access Control List (ACL) of a file or a folder. Ensure that the command line also contains both '-AclObject' and '-Path' parameters, as these are essential for specifying the ACL to modify and the target file or folder path. Treat any activity fitting these criteria as potentially malicious, given its high level of sensitivity, but remain aware of possible unknown benign cases that might trigger similar conditions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell execution to set the ACL of a file or a folder",
      "answer": "In order to detect PowerShell execution to set the ACL of a file or a folder, you should: focus on monitoring process creation events on Windows systems. Specifically, identify instances where either the PowerShell executable (powershell.exe) or the PowerShell DLL (pwsh.dll) is invoked. Look for command lines that include the invocation of the 'Set-Acl' cmdlet, which is used to modify the Access Control List (ACL) of a file or a folder. Ensure that the command line also contains both '-AclObject' and '-Path' parameters, as these are essential for specifying the ACL to modify and the target file or folder path. Treat any activity fitting these criteria as potentially malicious, given its high level of sensitivity, but remain aware of possible unknown benign cases that might trigger similar conditions."
    }
  },
  {
    "instruction": "How can I detect: Obfuscated Powershell via RUNDLL LAUNCHER",
    "context": "",
    "output": "In order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should: Monitor Windows security event logs, specifically focusing on enabling the 'System Security Extension' audit subcategory to capture Event ID 4697. This event ID is critical for detecting instances where services are being installed, which could be indicative of malicious activity, especially when certain file names and command lines are involved. The detection hinges on spotting any service installation attempts that involve the combination of 'rundll32.exe', 'shell32.dll', 'shellexec_rundll', and 'powershell' in the Service File Name field. These particular command-line arguments are often used in obfuscation techniques to hide the true nature of a PowerShell script execution, which can be a common tactic in various attack scenarios. Given this method's stealthy nature, it's been tagged with tactics and techniques that include Execution, Persistence, and Defense Evasion, without directly indicating these by their MITRE ATT&CK identifiers. While there's acknowledgement of unknown false positives, the level of concern is set at medium, suggesting a balanced approach to vigilance against these types of threats. This approach underscores the importance of detailed monitoring and analysis of security logs for indicators of sophisticated PowerShell usage that could evade simpler detection methods.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via RUNDLL LAUNCHER",
      "answer": "In order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should: Monitor Windows security event logs, specifically focusing on enabling the 'System Security Extension' audit subcategory to capture Event ID 4697. This event ID is critical for detecting instances where services are being installed, which could be indicative of malicious activity, especially when certain file names and command lines are involved. The detection hinges on spotting any service installation attempts that involve the combination of 'rundll32.exe', 'shell32.dll', 'shellexec_rundll', and 'powershell' in the Service File Name field. These particular command-line arguments are often used in obfuscation techniques to hide the true nature of a PowerShell script execution, which can be a common tactic in various attack scenarios. Given this method's stealthy nature, it's been tagged with tactics and techniques that include Execution, Persistence, and Defense Evasion, without directly indicating these by their MITRE ATT&CK identifiers. While there's acknowledgement of unknown false positives, the level of concern is set at medium, suggesting a balanced approach to vigilance against these types of threats. This approach underscores the importance of detailed monitoring and analysis of security logs for indicators of sophisticated PowerShell usage that could evade simpler detection methods."
    }
  },
  {
    "instruction": "Can you explain how to detect: process spawned by the terminal service server process (this could be an indicator for an exploitation of CVE-2019-0708)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a process spawned by the terminal service server process (this could be an indicator for an exploitation of CVE-2019-0708), you should monitor the creation of processes on Windows systems. Specifically, look for processes that are created by the parent command line associated with 'svchost.exe' and include 'termsvcs' in their command line arguments. However, it's important to exclude any process where the image ends with '\\rdpclip.exe', ':\\Windows\\System32\\csrss.exe', ':\\Windows\\System32\\wininit.exe', or ':\\Windows\\System32\\winlogon.exe', as well as any instances where the image is null, to avoid false positives. This detection is critical, given the high severity of potential exploitation attempts, and requires vigilance in monitoring for unusual process hierarchy related to terminal services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process spawned by the terminal service server process (this could be an indicator for an exploitation of CVE-2019-0708)",
      "answer": "In order to detect a process spawned by the terminal service server process (this could be an indicator for an exploitation of CVE-2019-0708), you should monitor the creation of processes on Windows systems. Specifically, look for processes that are created by the parent command line associated with 'svchost.exe' and include 'termsvcs' in their command line arguments. However, it's important to exclude any process where the image ends with '\\rdpclip.exe', ':\\Windows\\System32\\csrss.exe', ':\\Windows\\System32\\wininit.exe', or ':\\Windows\\System32\\winlogon.exe', as well as any instances where the image is null, to avoid false positives. This detection is critical, given the high severity of potential exploitation attempts, and requires vigilance in monitoring for unusual process hierarchy related to terminal services."
    }
  },
  {
    "instruction": "Explain how should I detect the following: attempts to remove Windows Defender configurations using the 'MpPreference' cmdlet",
    "context": "",
    "output": "In order to detect attempts to remove Windows Defender configurations using the 'MpPreference' cmdlet, you should monitor Windows system process creation logs. Specifically, look for instances where the command line contains attempts to modify or remove settings related to Windows Defender through the 'Remove-MpPreference' command. Additionally, watch for modifications to crucial Defender configurations such as Protected Folders, Attack Surface Reduction Rules including their IDs and Actions, and the Check for Signatures Before Running Scan setting. These modifications can serve as indicators of malicious tampering with Defender's protective measures. It's crucial to note that while these detections are robust indicators of potential security policy tampering, there could be legitimate reasons for these actions to be performed through PowerShell scripts, so careful analysis is required to distinguish between benign and malicious intent. The severity level for these detections is considered high due to the potential impact on the system's security posture.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to remove Windows Defender configurations using the 'MpPreference' cmdlet",
      "answer": "In order to detect attempts to remove Windows Defender configurations using the 'MpPreference' cmdlet, you should monitor Windows system process creation logs. Specifically, look for instances where the command line contains attempts to modify or remove settings related to Windows Defender through the 'Remove-MpPreference' command. Additionally, watch for modifications to crucial Defender configurations such as Protected Folders, Attack Surface Reduction Rules including their IDs and Actions, and the Check for Signatures Before Running Scan setting. These modifications can serve as indicators of malicious tampering with Defender's protective measures. It's crucial to note that while these detections are robust indicators of potential security policy tampering, there could be legitimate reasons for these actions to be performed through PowerShell scripts, so careful analysis is required to distinguish between benign and malicious intent. The severity level for these detections is considered high due to the potential impact on the system's security posture."
    }
  },
  {
    "instruction": "How can I detect: exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint",
    "context": "",
    "output": "In order to detect exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC, which uses the OWA endpoint to access the PowerShell backend endpoint, you should monitor proxy logs for specific criteria. Look for requests where the user agent matches 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.54 Safari/537.36', and the method used is 'POST' leading to a successful response indicated by the status code 200. Additionally, the requests should contain URLs that have both '/owa/mastermailbox' and '/powershell' in their paths, suggesting an effort to exploit OWA to execute PowerShell commands. Such activities are critical indicators of a potential compromise, exploiting Exchange servers using a method publicly documented in proof of concept (POC) examples. False positives for this detection strategy are considered unlikely, indicating the high confidence in these specific criteria as indicative of a malicious attempt to exploit the OWASSRF variant.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint",
      "answer": "In order to detect exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC, which uses the OWA endpoint to access the PowerShell backend endpoint, you should monitor proxy logs for specific criteria. Look for requests where the user agent matches 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.54 Safari/537.36', and the method used is 'POST' leading to a successful response indicated by the status code 200. Additionally, the requests should contain URLs that have both '/owa/mastermailbox' and '/powershell' in their paths, suggesting an effort to exploit OWA to execute PowerShell commands. Such activities are critical indicators of a potential compromise, exploiting Exchange servers using a method publicly documented in proof of concept (POC) examples. False positives for this detection strategy are considered unlikely, indicating the high confidence in these specific criteria as indicative of a malicious attempt to exploit the OWASSRF variant."
    }
  },
  {
    "instruction": "How to detect: segmentation fault error message caused by a crashing apache worker process",
    "context": "",
    "output": "In order to detect a segmentation fault error message caused by a crashing Apache worker process, you should analyze Apache server's error.log files, which necessitates the capability to collect and scrutinize this specific log file. You will be specifically looking for occurrences of the phrase \"exit signal Segmentation Fault\" within these logs. This phrase typically indicates that an Apache worker process has encountered a critical issue leading to a crash, which can be symptomatic of a potential exploit attempt. It's important to proceed with a high level of caution, as false positives are unknown, indicating that any hit on this search might be significant and should be investigated promptly. Understanding and responding to these indicators form a crucial aspect of safeguarding against attacks that exploit vulnerabilities within Apache processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "segmentation fault error message caused by a crashing apache worker process",
      "answer": "In order to detect a segmentation fault error message caused by a crashing Apache worker process, you should analyze Apache server's error.log files, which necessitates the capability to collect and scrutinize this specific log file. You will be specifically looking for occurrences of the phrase \"exit signal Segmentation Fault\" within these logs. This phrase typically indicates that an Apache worker process has encountered a critical issue leading to a crash, which can be symptomatic of a potential exploit attempt. It's important to proceed with a high level of caution, as false positives are unknown, indicating that any hit on this search might be significant and should be investigated promptly. Understanding and responding to these indicators form a crucial aspect of safeguarding against attacks that exploit vulnerabilities within Apache processes."
    }
  },
  {
    "instruction": "How to detect: execution of \"rundll32\" calling \"advpack.dll\" with potential obfuscated ordinal calls in order to leverage the \"RegisterOCX\" function",
    "context": "",
    "output": "In order to detect execution of \"rundll32\" calling \"advpack.dll\" with potential obfuscated ordinal calls in order to leverage the \"RegisterOCX\" function, you should: monitor Windows process creation logs for the execution of \"rundll32.exe\". Specifically, look for processes where the image name ends with '\\rundll32.exe', the original file name is explicitly stated as 'RUNDLL32.EXE', and the command line contains the string 'rundll32'. Additionally, check for command lines that include the string 'advpack', indicating the invocation of \"advpack.dll\". Pay special attention to command lines containing both '#+' and '12', or '#-', as these could be indicators of obfuscated ordinal calls to \"RegisterOCX\" or similar functions. The detection parameters are rigorous due to the high level of threat this behavior represents, and the occurrence of false positives is considered unlikely.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"rundll32\" calling \"advpack.dll\" with potential obfuscated ordinal calls in order to leverage the \"RegisterOCX\" function",
      "answer": "In order to detect execution of \"rundll32\" calling \"advpack.dll\" with potential obfuscated ordinal calls in order to leverage the \"RegisterOCX\" function, you should: monitor Windows process creation logs for the execution of \"rundll32.exe\". Specifically, look for processes where the image name ends with '\\rundll32.exe', the original file name is explicitly stated as 'RUNDLL32.EXE', and the command line contains the string 'rundll32'. Additionally, check for command lines that include the string 'advpack', indicating the invocation of \"advpack.dll\". Pay special attention to command lines containing both '#+' and '12', or '#-', as these could be indicators of obfuscated ordinal calls to \"RegisterOCX\" or similar functions. The detection parameters are rigorous due to the high level of threat this behavior represents, and the occurrence of false positives is considered unlikely."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of schtasks with the delete flag and the asterisk symbole to delete all tasks from the schedule of the local computer, including tasks scheduled by other users.",
    "context": "",
    "output": "In order to detect the usage of schtasks with the delete flag and the asterisk symbol to delete all tasks from the schedule of the local computer, including tasks scheduled by other users, you should look for process creation events on Windows systems. Specifically, you need to identify instances where the process image name ends with '\\schtasks.exe', and the command line includes the arguments ' /delete ', '/tn *', and ' /f'. This combination of conditions is indicative of a command being executed to forcibly delete every scheduled task on the system, regardless of who scheduled them. This activity is considered highly suspicious and is unlikely to be a false positive, given its nature.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of schtasks with the delete flag and the asterisk symbole to delete all tasks from the schedule of the local computer, including tasks scheduled by other users.",
      "answer": "In order to detect the usage of schtasks with the delete flag and the asterisk symbol to delete all tasks from the schedule of the local computer, including tasks scheduled by other users, you should look for process creation events on Windows systems. Specifically, you need to identify instances where the process image name ends with '\\schtasks.exe', and the command line includes the arguments ' /delete ', '/tn *', and ' /f'. This combination of conditions is indicative of a command being executed to forcibly delete every scheduled task on the system, regardless of who scheduled them. This activity is considered highly suspicious and is unlikely to be a false positive, given its nature."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential DLL sideloading using comctl32.dll to obtain system privileges",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential DLL sideloading using comctl32.dll to obtain system privileges, you should monitor for the loading of certain images within the Windows operating system. Specifically, look out for events where images are loaded from locations that start with paths indicating they might be related to legitimate Windows system processes, such as 'C:\\Windows\\System32\\logonUI.exe.local\\', 'C:\\Windows\\System32\\werFault.exe.local\\', 'C:\\Windows\\System32\\consent.exe.local\\', 'C:\\Windows\\System32\\narrator.exe.local\\', or 'C:\\windows\\system32\\wermgr.exe.local\\'. Moreover, the detection focus is on identifying when these images are loaded in conjunction with a file ending in '\\comctl32.dll'. This specific DLL, when loaded from these peculiar locations, could signal a technique known as DLL sideloading, which can be exploited by an attacker to escalate privileges on the system. The likelihood of these observations being false positives is considered low, and the severity level is regarded as high. This detection strategy is built with a focus on Windows environments, leveraging the category of image loading events for insights.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading using comctl32.dll to obtain system privileges",
      "answer": "In order to detect potential DLL sideloading using comctl32.dll to obtain system privileges, you should monitor for the loading of certain images within the Windows operating system. Specifically, look out for events where images are loaded from locations that start with paths indicating they might be related to legitimate Windows system processes, such as 'C:\\Windows\\System32\\logonUI.exe.local\\', 'C:\\Windows\\System32\\werFault.exe.local\\', 'C:\\Windows\\System32\\consent.exe.local\\', 'C:\\Windows\\System32\\narrator.exe.local\\', or 'C:\\windows\\system32\\wermgr.exe.local\\'. Moreover, the detection focus is on identifying when these images are loaded in conjunction with a file ending in '\\comctl32.dll'. This specific DLL, when loaded from these peculiar locations, could signal a technique known as DLL sideloading, which can be exploited by an attacker to escalate privileges on the system. The likelihood of these observations being false positives is considered low, and the severity level is regarded as high. This detection strategy is built with a focus on Windows environments, leveraging the category of image loading events for insights."
    }
  },
  {
    "instruction": "How to detect: Detect successful authentications from countries you do not operate out of.",
    "context": "",
    "output": "In order to detect successful authentications from countries you do not operate out of, you should focus on monitoring Azure sign-in logs. Specifically, you should look for log entries that indicate a successful sign-in status. However, it is crucial to exclude sign-ins originating from locations or countries where your organization operates. This means if the sign-in attempt comes from any of the countries you do operate out of, these sign-ins should not trigger any alerts. Only successful authentications that originate from countries outside of your operational locations should be considered suspicious. It is important to note that some legitimate activities may sometimes be flagged if they fall outside the expected parameters, such as an approved action by a System Administrator. Therefore, it's vital to review such alerts with a medium level of priority to ascertain their validity. This approach helps in identifying potentially unauthorized or malicious access attempts from geographic locations inconsistent with your organization's normal operational footprint.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect successful authentications from countries you do not operate out of.",
      "answer": "In order to detect successful authentications from countries you do not operate out of, you should focus on monitoring Azure sign-in logs. Specifically, you should look for log entries that indicate a successful sign-in status. However, it is crucial to exclude sign-ins originating from locations or countries where your organization operates. This means if the sign-in attempt comes from any of the countries you do operate out of, these sign-ins should not trigger any alerts. Only successful authentications that originate from countries outside of your operational locations should be considered suspicious. It is important to note that some legitimate activities may sometimes be flagged if they fall outside the expected parameters, such as an approved action by a System Administrator. Therefore, it's vital to review such alerts with a medium level of priority to ascertain their validity. This approach helps in identifying potentially unauthorized or malicious access attempts from geographic locations inconsistent with your organization's normal operational footprint."
    }
  },
  {
    "instruction": "How can I detect: suspicious child processes spawning from microsoft office suite applications such as word or excel. This could indicates malicious macro execution",
    "context": "",
    "output": "In order to detect suspicious child processes spawning from Microsoft Office suite applications such as Word or Excel, which could indicate malicious macro execution, you should: Monitor your macOS systems for the creation of processes that originate from common Microsoft Office applications (Word, Excel, PowerPoint, OneNote) and subsequently initiate specific scripts or command-line tools. Specifically, be vigilant for the launching of bash, curl, dash, fish, osacompile, osascript, sh, zsh, python, or python3 as child processes of these Office applications. Such occurrences are unusual and may signal an attempt to execute malicious commands or scripts following the enabling of macros or other content. This criteria serves as a red flag, denoting a potentially high-risk activity that necessitates immediate attention.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious child processes spawning from microsoft office suite applications such as word or excel. This could indicates malicious macro execution",
      "answer": "In order to detect suspicious child processes spawning from Microsoft Office suite applications such as Word or Excel, which could indicate malicious macro execution, you should: Monitor your macOS systems for the creation of processes that originate from common Microsoft Office applications (Word, Excel, PowerPoint, OneNote) and subsequently initiate specific scripts or command-line tools. Specifically, be vigilant for the launching of bash, curl, dash, fish, osacompile, osascript, sh, zsh, python, or python3 as child processes of these Office applications. Such occurrences are unusual and may signal an attempt to execute malicious commands or scripts following the enabling of macros or other content. This criteria serves as a red flag, denoting a potentially high-risk activity that necessitates immediate attention."
    }
  },
  {
    "instruction": "How can I detect: OilRig registry persistence as reported by Nyotron in their March 2018 report",
    "context": "",
    "output": "In order to detect OilRig registry persistence as reported by Nyotron in their March 2018 report, you should: monitor Windows registry events for changes to specific keys. Focus on the registry keys ending with 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\UMe' and 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\UT'. These keys are indicative of the persistence mechanism used by the OilRig threat group to maintain access to a compromised system. Given the nature of the changes being monitored and the tactics used by this group, it's highly unlikely to encounter false positives with this approach. Therefore, any alert triggered by these conditions should be treated as critical and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "OilRig registry persistence as reported by Nyotron in their March 2018 report",
      "answer": "In order to detect OilRig registry persistence as reported by Nyotron in their March 2018 report, you should: monitor Windows registry events for changes to specific keys. Focus on the registry keys ending with 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\UMe' and 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\UT'. These keys are indicative of the persistence mechanism used by the OilRig threat group to maintain access to a compromised system. Given the nature of the changes being monitored and the tactics used by this group, it's highly unlikely to encounter false positives with this approach. Therefore, any alert triggered by these conditions should be treated as critical and investigated promptly."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious or uncommon parent processes of PowerShell",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a suspicious or uncommon parent processes of PowerShell, you should monitor process creation events on Windows systems with specific attention to parent-child relationships involving the PowerShell executable or PowerShell Core 6 (also known as pwsh). Key indicators include situations where the PowerShell (powershell.exe or pwsh.exe) process is initiated by a process that typically does not do so, particularly web servers (like Tomcat, HTTPD, Nginx), web browsers (such as Chrome, Firefox, Internet Explorer, Edge, Safari, Vivaldi), common Microsoft Office applications (like Outlook), various database server processes (like SQL Server), and specific system or scripting processes (like services.exe, regsvr32.exe, rundll32.exe). Additionally, any instance where a command line contains '/c powershell' or '/c pwsh' invokes PowerShell directly in a manner suggesting an attempt to execute PowerShell commands or scripts in a stealthy or potentially malicious way. Monitoring for these condiitons is crucial as they are often tactics employed by attackers to execute malicious code, maintain persistence, or move laterally within a network undetected. Tagging these activities can involve tags related to Execution, Persistence, Privilege Escalation, and Defense Evasion tactics. It's essential to note that false positives can occur, particularly with scripts or legitimate administrative activity that might use PowerShell in non-standard ways for benign purposes. Any such detection should be set at a high level of importance due to the potential severity but verified carefully to avoid misidentification of legitimate activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious or uncommon parent processes of PowerShell",
      "answer": "In order to detect a suspicious or uncommon parent processes of PowerShell, you should monitor process creation events on Windows systems with specific attention to parent-child relationships involving the PowerShell executable or PowerShell Core 6 (also known as pwsh). Key indicators include situations where the PowerShell (powershell.exe or pwsh.exe) process is initiated by a process that typically does not do so, particularly web servers (like Tomcat, HTTPD, Nginx), web browsers (such as Chrome, Firefox, Internet Explorer, Edge, Safari, Vivaldi), common Microsoft Office applications (like Outlook), various database server processes (like SQL Server), and specific system or scripting processes (like services.exe, regsvr32.exe, rundll32.exe). Additionally, any instance where a command line contains '/c powershell' or '/c pwsh' invokes PowerShell directly in a manner suggesting an attempt to execute PowerShell commands or scripts in a stealthy or potentially malicious way. Monitoring for these condiitons is crucial as they are often tactics employed by attackers to execute malicious code, maintain persistence, or move laterally within a network undetected. Tagging these activities can involve tags related to Execution, Persistence, Privilege Escalation, and Defense Evasion tactics. It's essential to note that false positives can occur, particularly with scripts or legitimate administrative activity that might use PowerShell in non-standard ways for benign purposes. Any such detection should be set at a high level of importance due to the potential severity but verified carefully to avoid misidentification of legitimate activities."
    }
  },
  {
    "instruction": "Please help me detect the following: an appx package added the pipeline of the \"to be processed\" packages which is downloaded from a suspicious domain",
    "context": "",
    "output": "Sure!\nIn order to detect an appx package added to the pipeline of the \"to be processed\" packages which is downloaded from a suspicious domain, you should monitor Windows AppX Deployment Server logs for Event ID 854. This event indicates the addition of an appx package. Pay special attention to the path from which the package is downloaded. If the path contains URLs known for hosting suspicious activities, such as 'transfer.sh', 'raw.githubusercontent.com', 'gist.githubusercontent.com', 'pastebin.com', 'cdn.discordapp.com/attachments/', 'mediafire.com', 'mega.nz', 'ddns.net', '.paste.ee', '.hastebin.com', '.ghostbin.co/', 'ufile.io', 'storage.googleapis.com', 'anonfiles.com', 'send.exploit.in', 'privatlab.net', 'privatlab.com', 'sendspace.com', 'pastetext.net', 'pastebin.pl', or 'paste.ee', it might indicate a security risk. This monitoring strategy is crucial for identifying potentially harmful appx packages being processed, thereby mitigating the risk associated with executing malicious software obtained from these suspicious domains.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an appx package added the pipeline of the \"to be processed\" packages which is downloaded from a suspicious domain",
      "answer": "In order to detect an appx package added to the pipeline of the \"to be processed\" packages which is downloaded from a suspicious domain, you should monitor Windows AppX Deployment Server logs for Event ID 854. This event indicates the addition of an appx package. Pay special attention to the path from which the package is downloaded. If the path contains URLs known for hosting suspicious activities, such as 'transfer.sh', 'raw.githubusercontent.com', 'gist.githubusercontent.com', 'pastebin.com', 'cdn.discordapp.com/attachments/', 'mediafire.com', 'mega.nz', 'ddns.net', '.paste.ee', '.hastebin.com', '.ghostbin.co/', 'ufile.io', 'storage.googleapis.com', 'anonfiles.com', 'send.exploit.in', 'privatlab.net', 'privatlab.com', 'sendspace.com', 'pastetext.net', 'pastebin.pl', or 'paste.ee', it might indicate a security risk. This monitoring strategy is crucial for identifying potentially harmful appx packages being processed, thereby mitigating the risk associated with executing malicious software obtained from these suspicious domains."
    }
  },
  {
    "instruction": "How to detect: group membership removal of groups that have CA policy modification access",
    "context": "",
    "output": "In order to monitor and alert on group membership removal of groups that have CA policy modification access, you should: focus on auditing logs within the Azure platform, specifically targeting the audit logs service. You\u2019ll be looking for events where a user is removed from a group. This operation is identified by the message content \"Remove member from group\" in the properties of the log entry. It's important to consider scenarios where a user's removal is planned and authorized as known exceptions to reduce false-positive alerts. The perceived severity of this action is classified as medium, underscoring the need for attention without implying immediate critical impact. This detection process is essential in ensuring that unauthorized modifications in group memberships, particularly those with Conditional Access (CA) policy modification rights, are quickly identified and addressed, helping mitigate potential security risks associated with unauthorized access or changes to sensitive policies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "group membership removal of groups that have CA policy modification access",
      "answer": "In order to monitor and alert on group membership removal of groups that have CA policy modification access, you should: focus on auditing logs within the Azure platform, specifically targeting the audit logs service. You\u2019ll be looking for events where a user is removed from a group. This operation is identified by the message content \"Remove member from group\" in the properties of the log entry. It's important to consider scenarios where a user's removal is planned and authorized as known exceptions to reduce false-positive alerts. The perceived severity of this action is classified as medium, underscoring the need for attention without implying immediate critical impact. This detection process is essential in ensuring that unauthorized modifications in group memberships, particularly those with Conditional Access (CA) policy modification rights, are quickly identified and addressed, helping mitigate potential security risks associated with unauthorized access or changes to sensitive policies."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of whoami.exe with suspicious parent processes.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of whoami.exe with suspicious parent processes, you should: monitor Windows process creation logs for instances where 'whoami.exe' is executed (either directly or implied through its original filename matching 'whoami.exe'). It's crucial to exclude typical, expected parent processes such as 'cmd.exe', 'powershell.exe', 'pwsh.exe', and 'powershell_ise.exe', which are generally considered legitimate contexts for 'whoami.exe' to run from. Additionally, executions originating from 'C:\\Program Files\\Microsoft Monitoring Agent\\Agent\\MonitoringHost.exe', or cases where 'whoami.exe' is executed without any parent process information (indicated by null or empty 'ParentImage' values) should also be disregarded to reduce false positives. False positives might include regular administrative activities, the use of scripts and administrative tools present in the environment, or monitoring tasks. This detection strategy has a high importance due to its potential to unveil suspicious activities, such as attempts by malicious entities to scout and gather information about user privileges or system details, typically in the early or middle stages of an attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of whoami.exe with suspicious parent processes.",
      "answer": "In order to detect the execution of whoami.exe with suspicious parent processes, you should: monitor Windows process creation logs for instances where 'whoami.exe' is executed (either directly or implied through its original filename matching 'whoami.exe'). It's crucial to exclude typical, expected parent processes such as 'cmd.exe', 'powershell.exe', 'pwsh.exe', and 'powershell_ise.exe', which are generally considered legitimate contexts for 'whoami.exe' to run from. Additionally, executions originating from 'C:\\Program Files\\Microsoft Monitoring Agent\\Agent\\MonitoringHost.exe', or cases where 'whoami.exe' is executed without any parent process information (indicated by null or empty 'ParentImage' values) should also be disregarded to reduce false positives. False positives might include regular administrative activities, the use of scripts and administrative tools present in the environment, or monitoring tasks. This detection strategy has a high importance due to its potential to unveil suspicious activities, such as attempts by malicious entities to scout and gather information about user privileges or system details, typically in the early or middle stages of an attack."
    }
  },
  {
    "instruction": "How to detect: execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc.",
    "context": "",
    "output": "In order to detect execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc., you should: Monitor the creation of processes on Windows systems, specifically focusing on the execution of the ntdsutil.exe file. This utility can be identified either by its image path ending in '\\ntdsutil.exe' or by its original filename 'ntdsutil.exe'. Pay special attention to the command line used during execution, looking for two critical activities: the first involves commands containing both 'snapshot' and 'mount', which indicates the mounting of a specific snapshot, a potential indicator of an attack. The second activity focuses on variations of the command line containing fragments like 'ac', ' i', and ' ntds', showcasing attempts to activate instances related to NTDS, which is the AD database. These signs can be indicators of malicious actions, although be aware that they might also stem from legitimate administrative tasks such as snapshot restoration. The detection is tagged with medium level importance due to its potential for false positives, including legitimate administrative or restoration activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc.",
      "answer": "In order to detect execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc., you should: Monitor the creation of processes on Windows systems, specifically focusing on the execution of the ntdsutil.exe file. This utility can be identified either by its image path ending in '\\ntdsutil.exe' or by its original filename 'ntdsutil.exe'. Pay special attention to the command line used during execution, looking for two critical activities: the first involves commands containing both 'snapshot' and 'mount', which indicates the mounting of a specific snapshot, a potential indicator of an attack. The second activity focuses on variations of the command line containing fragments like 'ac', ' i', and ' ntds', showcasing attempts to activate instances related to NTDS, which is the AD database. These signs can be indicators of malicious actions, although be aware that they might also stem from legitimate administrative tasks such as snapshot restoration. The detection is tagged with medium level importance due to its potential for false positives, including legitimate administrative or restoration activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: user manipulates with Firmward Password on MacOS. NOTE - this command has been disabled on silicon-based apple computers.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when a user manipulates with Firmware Password on MacOS, you should: Monitor process creation logs on MacOS devices, especially focusing on activities involving the '/usr/sbin/firmwarepasswd' executable. Look for command line arguments that include 'setpasswd', 'full', 'delete', or 'check', which are indicative of operations that manipulate the firmware password. These actions might signify unauthorized attempts to change or query the firmware settings. However, be aware that activities related to these detections could sometimes originate from legitimate administrative tasks. The severity level of this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user manipulates with Firmward Password on MacOS. NOTE - this command has been disabled on silicon-based apple computers.",
      "answer": "In order to detect when a user manipulates with Firmware Password on MacOS, you should: Monitor process creation logs on MacOS devices, especially focusing on activities involving the '/usr/sbin/firmwarepasswd' executable. Look for command line arguments that include 'setpasswd', 'full', 'delete', or 'check', which are indicative of operations that manipulate the firmware password. These actions might signify unauthorized attempts to change or query the firmware settings. However, be aware that activities related to these detections could sometimes originate from legitimate administrative tasks. The severity level of this detection is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code",
    "context": "",
    "output": "Sure!\nIn order to detect adversaries abusing the Windows Task Scheduler for the initial or recurring execution of malicious code, you should focus on monitoring PowerShell script activities, specifically targeting script block logging on Windows systems. This is crucial as script block logging must be enabled to catch the execution of specific cmdlets and methods that are often leveraged during such attacks.\n\nYour detection efforts should concentrate on identifying any use of PowerShell commands associated with the Task Scheduler, such as creating new scheduled tasks (`New-ScheduledTaskAction`, `New-ScheduledTaskTrigger`, `New-ScheduledTaskPrincipal`, `New-ScheduledTaskSettingsSet`, `New-ScheduledTask`) or registering these tasks (`Register-ScheduledTask`). Additionally, pay attention to instances where the `Invoke-CimMethod` command is used in conjunction with parameters pointing to the Task Scheduler, namely `-ClassName PS_ScheduledTask` and `-NameSpace Root\\Microsoft\\Windows\\TaskScheduler`. These commands and parameters are key indicators that an attacker might be attempting to schedule tasks for malicious purposes.\n\nIt's important to approach the monitoring of these indicators with an understanding that not all use of these commands is nefarious. However, in the context of detecting potential misuse of the Windows Task Scheduler for executing malicious code, these PowerShell cmdlets and CIM methods stand out as critical points of interest.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code",
      "answer": "In order to detect adversaries abusing the Windows Task Scheduler for the initial or recurring execution of malicious code, you should focus on monitoring PowerShell script activities, specifically targeting script block logging on Windows systems. This is crucial as script block logging must be enabled to catch the execution of specific cmdlets and methods that are often leveraged during such attacks.\n\nYour detection efforts should concentrate on identifying any use of PowerShell commands associated with the Task Scheduler, such as creating new scheduled tasks (`New-ScheduledTaskAction`, `New-ScheduledTaskTrigger`, `New-ScheduledTaskPrincipal`, `New-ScheduledTaskSettingsSet`, `New-ScheduledTask`) or registering these tasks (`Register-ScheduledTask`). Additionally, pay attention to instances where the `Invoke-CimMethod` command is used in conjunction with parameters pointing to the Task Scheduler, namely `-ClassName PS_ScheduledTask` and `-NameSpace Root\\Microsoft\\Windows\\TaskScheduler`. These commands and parameters are key indicators that an attacker might be attempting to schedule tasks for malicious purposes.\n\nIt's important to approach the monitoring of these indicators with an understanding that not all use of these commands is nefarious. However, in the context of detecting potential misuse of the Windows Task Scheduler for executing malicious code, these PowerShell cmdlets and CIM methods stand out as critical points of interest."
    }
  },
  {
    "instruction": "Please help me detect the following: download of certain file types from hosts in suspicious TLDs",
    "context": "",
    "output": "Sure!\nIn order to detect download of certain file types from hosts in suspicious TLDs, you should focus on monitoring proxy server logs for download activities involving specific file extensions and originating from hosts in certain Top-Level Domains (TLDs) deemed suspicious. The log source of interest is primarily proxy logs, which can provide insights into web requests and the contents being downloaded. The detection process involves identifying web requests for files with particular extensions known to be commonly used in malicious activities or for malware propagation. These extensions include executable files (.exe), scripts (.vbs, .bat, .ps1), compressed archives (.rar, .zip), document files that can contain malicious macros (.doc, .docm, .xls, .xlsm, .pptm), and other types that might be abused for cyber-attacks (.rtf, .hta, .dll, .ws, .wsf, .sct).\n\nAdditionally, the detection focuses on the source of the downloads, specifically looking for hosts within TLDs that have been associated with suspicious activities or are frequently used by attackers. This list includes a wide range of TLDs, such as .country, .stream, .gdn, and many others, which have been identified through various analyses and reports from cybersecurity organizations like Symantec, McAfee, and Spamhaus. This comprehensive list of suspicious TLDs aims to cover a broad spectrum of domains that could be potentially harmful.\n\nThe condition for detection is the occurrence of web requests that match both the specified file extensions and originate from the listed suspicious TLDs. To accurately identify and investigate potential threats, the fields of interest that should be extracted from the logs include the ClientIP address and the full URI (Uniform Resource Identifier) of the requested file. \n\nIt is important to note that while this detection method aims to spotlight potentially malicious activities, it may also yield false positives. Such false positives could stem from legitimate software downloads that coincidentally match the criteria. Thus, a low severity level is suggested for alerts generated by this detection method to encourage further investigation rather than immediate drastic action.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "download of certain file types from hosts in suspicious TLDs",
      "answer": "In order to detect download of certain file types from hosts in suspicious TLDs, you should focus on monitoring proxy server logs for download activities involving specific file extensions and originating from hosts in certain Top-Level Domains (TLDs) deemed suspicious. The log source of interest is primarily proxy logs, which can provide insights into web requests and the contents being downloaded. The detection process involves identifying web requests for files with particular extensions known to be commonly used in malicious activities or for malware propagation. These extensions include executable files (.exe), scripts (.vbs, .bat, .ps1), compressed archives (.rar, .zip), document files that can contain malicious macros (.doc, .docm, .xls, .xlsm, .pptm), and other types that might be abused for cyber-attacks (.rtf, .hta, .dll, .ws, .wsf, .sct).\n\nAdditionally, the detection focuses on the source of the downloads, specifically looking for hosts within TLDs that have been associated with suspicious activities or are frequently used by attackers. This list includes a wide range of TLDs, such as .country, .stream, .gdn, and many others, which have been identified through various analyses and reports from cybersecurity organizations like Symantec, McAfee, and Spamhaus. This comprehensive list of suspicious TLDs aims to cover a broad spectrum of domains that could be potentially harmful.\n\nThe condition for detection is the occurrence of web requests that match both the specified file extensions and originate from the listed suspicious TLDs. To accurately identify and investigate potential threats, the fields of interest that should be extracted from the logs include the ClientIP address and the full URI (Uniform Resource Identifier) of the requested file. \n\nIt is important to note that while this detection method aims to spotlight potentially malicious activities, it may also yield false positives. Such false positives could stem from legitimate software downloads that coincidentally match the criteria. Thus, a low severity level is suggested for alerts generated by this detection method to encourage further investigation rather than immediate drastic action."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious Rundll32 execution from control.exe as used by Equation Group and Exploit Kits",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious Rundll32 execution from control.exe as used by Equation Group and Exploit Kits, you should: Monitor the process creation logs in Windows for instances where the parent process image ends with '\\System32\\control.exe'. The detection requires scrutinizing if either the image path ends with '\\rundll32.exe' or the original filename is identified as 'RUNDLL32.EXE'. Additionally, ascertain that these conditions are met without the presence of 'Shell32.dll' in the command line arguments. The focus should be on extracting fields related to CommandLine and ParentCommandLine. It's important to note that some occurrences might not indicate a threat, thus classified as unknown false positives. This detection process aligns with identifying tactics and techniques associated with privilege escalation and execution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious Rundll32 execution from control.exe as used by Equation Group and Exploit Kits",
      "answer": "In order to detect suspicious Rundll32 execution from control.exe as used by Equation Group and Exploit Kits, you should: Monitor the process creation logs in Windows for instances where the parent process image ends with '\\System32\\control.exe'. The detection requires scrutinizing if either the image path ends with '\\rundll32.exe' or the original filename is identified as 'RUNDLL32.EXE'. Additionally, ascertain that these conditions are met without the presence of 'Shell32.dll' in the command line arguments. The focus should be on extracting fields related to CommandLine and ParentCommandLine. It's important to note that some occurrences might not indicate a threat, thus classified as unknown false positives. This detection process aligns with identifying tactics and techniques associated with privilege escalation and execution."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of the powerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations",
    "context": "",
    "output": "Sure!\nIn order to detect usage of the PowerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations, you should monitor the creation of processes on Windows systems. Focus specifically on command lines that include the usage of the New-MailboxExportRequest cmdlet together with the parameters '-Mailbox' and a file path starting with double backslashes '\\\\', indicating an attempt to export a mailbox to either a remote or local share. Such activities should trigger high-level alerts due to their critical nature and potential association with ProxyShell exploit attempts.\n\nIn monitoring, ensure that you capture the full command line argument as well as the parent command line from which the process was created for deeper analysis. However, be mindful of potential false positives, as there can be legitimate uses of these command lines in administrative contexts that are unknown or unique to specific environments.\n\nBy focusing on this detection mechanic, efforts will align with identifying tactics and techniques used in initial access and execution phases of cyber attacks, particularly those relating to the manipulation of PowerShell to export mailboxes illicitly, which is a known vector in advanced persistent threat activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the powerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations",
      "answer": "In order to detect usage of the PowerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations, you should monitor the creation of processes on Windows systems. Focus specifically on command lines that include the usage of the New-MailboxExportRequest cmdlet together with the parameters '-Mailbox' and a file path starting with double backslashes '\\\\', indicating an attempt to export a mailbox to either a remote or local share. Such activities should trigger high-level alerts due to their critical nature and potential association with ProxyShell exploit attempts.\n\nIn monitoring, ensure that you capture the full command line argument as well as the parent command line from which the process was created for deeper analysis. However, be mindful of potential false positives, as there can be legitimate uses of these command lines in administrative contexts that are unknown or unique to specific environments.\n\nBy focusing on this detection mechanic, efforts will align with identifying tactics and techniques used in initial access and execution phases of cyber attacks, particularly those relating to the manipulation of PowerShell to export mailboxes illicitly, which is a known vector in advanced persistent threat activities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: user bypasses Defender by renaming a tool to dump64.exe and placing it in a Visual Studio folder",
    "context": "",
    "output": "In order to detect when a user bypasses Defender by renaming a tool to dump64.exe and placing it in a Visual Studio folder, you should monitor Windows process creation logs for any instances where a process called dump64.exe is initiated. Specifically, look out for cases where the process image path ends with '\\dump64.exe', indicating that the executable has potentially been renamed and placed in a likely suspect folder to evade detection. This action becomes particularly suspicious if the command line used to initiate the process includes flags such as '-ma' or 'accepteula', which are associated with behaviors of dumping utilities like procdump, that are used for extracting process memory contents, often for malicious purposes.\n\nHowever, it's also important to apply a level of discernment by filtering out instances where dump64.exe is running from a directory path that includes '\\Installer\\Feedback\\', as this might be a legitimate usage scenario not associated with this specific attack technique.\n\nWith this detection strategy, it's possible to catch malicious activities where attackers are attempting to leverage renamed tools to bypass security measures, specifically by monitoring for the execution patterns and command arguments typical to memory dumping tools but are now masked under a different, perhaps seemingly benign, process name like dump64.exe. This rule, therefore, aids in identifying potential security bypass techniques which involve renaming and executing tools in specific directories that might not be monitored as closely by Defender, with a high level of attention due to the considerable chance of malicious intent when such criteria are met.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user bypasses Defender by renaming a tool to dump64.exe and placing it in a Visual Studio folder",
      "answer": "In order to detect when a user bypasses Defender by renaming a tool to dump64.exe and placing it in a Visual Studio folder, you should monitor Windows process creation logs for any instances where a process called dump64.exe is initiated. Specifically, look out for cases where the process image path ends with '\\dump64.exe', indicating that the executable has potentially been renamed and placed in a likely suspect folder to evade detection. This action becomes particularly suspicious if the command line used to initiate the process includes flags such as '-ma' or 'accepteula', which are associated with behaviors of dumping utilities like procdump, that are used for extracting process memory contents, often for malicious purposes.\n\nHowever, it's also important to apply a level of discernment by filtering out instances where dump64.exe is running from a directory path that includes '\\Installer\\Feedback\\', as this might be a legitimate usage scenario not associated with this specific attack technique.\n\nWith this detection strategy, it's possible to catch malicious activities where attackers are attempting to leverage renamed tools to bypass security measures, specifically by monitoring for the execution patterns and command arguments typical to memory dumping tools but are now masked under a different, perhaps seemingly benign, process name like dump64.exe. This rule, therefore, aids in identifying potential security bypass techniques which involve renaming and executing tools in specific directories that might not be monitored as closely by Defender, with a high level of attention due to the considerable chance of malicious intent when such criteria are met."
    }
  },
  {
    "instruction": "How to detect: Atbroker executing non-deafualt Assistive Technology applications",
    "context": "",
    "output": "In order to detect Atbroker executing non-default Assistive Technology applications, you should focus on monitoring process creation events in Windows systems. Specifically, watch for instances where the process image name ends with 'AtBroker.exe' and its command line includes the text 'start'. However, it is crucial to filter out any command line options that are associated with legitimate, default assistive technology applications, such as various accessibility settings (e.g., animations, high contrast, Narrator, etc.). By applying this approach, you aim to identify potentially malicious activities involving AtBroker.exe while minimizing false positives related to legitimate use of assistive technologies. This method is instrumental in protecting against attacks leveraging Atbroker for executing unauthorized applications under the guise of assistive technologies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Atbroker executing non-deafualt Assistive Technology applications",
      "answer": "In order to detect Atbroker executing non-default Assistive Technology applications, you should focus on monitoring process creation events in Windows systems. Specifically, watch for instances where the process image name ends with 'AtBroker.exe' and its command line includes the text 'start'. However, it is crucial to filter out any command line options that are associated with legitimate, default assistive technology applications, such as various accessibility settings (e.g., animations, high contrast, Narrator, etc.). By applying this approach, you aim to identify potentially malicious activities involving AtBroker.exe while minimizing false positives related to legitimate use of assistive technologies. This method is instrumental in protecting against attacks leveraging Atbroker for executing unauthorized applications under the guise of assistive technologies."
    }
  },
  {
    "instruction": "How to detect: remote RPC calls to MS-DRSR from non DC hosts, which could indicate DCSync / DCShadow attacks.",
    "context": "",
    "output": "In order to detect remote RPC calls to MS-DRSR from non DC hosts, which could indicate DCSync / DCShadow attacks, you should: Monitor the RPC firewall logs specifically for application logs emanating from a product designed to secure RPC communication. Focus on log entries marked with the Event Log identifier \"RPCFW\" and an Event ID of 3. These entries must relate to instances where RPC calls are made using the Interface UUID of e3514235-4b06-11d1-ab04-00c04fc2dcd2, which is critical for detecting potential abusive behaviors tied to Directory Replication Service Remote Protocol (MS-DRSR). However, be aware that legitimate operations might use operation numbers 0, 1, and 12; hence, any calls using these opcodes should be excluded from your alert criteria to minimize false positives. This targeted monitoring is crucial as it helps in identifying unusual or unauthorized attempts to use DRSR, which could signify an adversary's intent to exploit replication services to fetch sensitive information from the directory services, common in DCSync or DCShadow attack scenarios. Given the complexity and potential impact of these attacks, the sensitivity of this detection mechanism is set to a high level, underlining the criticality of closely scrutinizing such RPC call patterns while remaining cautious about the uncertainties of false positives in this detection logic.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls to MS-DRSR from non DC hosts, which could indicate DCSync / DCShadow attacks.",
      "answer": "In order to detect remote RPC calls to MS-DRSR from non DC hosts, which could indicate DCSync / DCShadow attacks, you should: Monitor the RPC firewall logs specifically for application logs emanating from a product designed to secure RPC communication. Focus on log entries marked with the Event Log identifier \"RPCFW\" and an Event ID of 3. These entries must relate to instances where RPC calls are made using the Interface UUID of e3514235-4b06-11d1-ab04-00c04fc2dcd2, which is critical for detecting potential abusive behaviors tied to Directory Replication Service Remote Protocol (MS-DRSR). However, be aware that legitimate operations might use operation numbers 0, 1, and 12; hence, any calls using these opcodes should be excluded from your alert criteria to minimize false positives. This targeted monitoring is crucial as it helps in identifying unusual or unauthorized attempts to use DRSR, which could signify an adversary's intent to exploit replication services to fetch sensitive information from the directory services, common in DCSync or DCShadow attack scenarios. Given the complexity and potential impact of these attacks, the sensitivity of this detection mechanism is set to a high level, underlining the criticality of closely scrutinizing such RPC call patterns while remaining cautious about the uncertainties of false positives in this detection logic."
    }
  },
  {
    "instruction": "Can you explain how to detect: remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).",
    "context": "",
    "output": "Certainly!\n\nIn order to detect remote PowerShell sessions by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session), you should monitor Windows process creation logs for entries where the process image or its parent image ends with '\\wsmprovhost.exe'. It's essential to pay attention to the computer name, user, and command line used in the creation of these processes. However, be aware that there may be false positives, such as the legitimate usage of remote PowerShell, for instance, for monitoring purposes. This monitoring has a medium importance level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).",
      "answer": "In order to detect remote PowerShell sessions by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session), you should monitor Windows process creation logs for entries where the process image or its parent image ends with '\\wsmprovhost.exe'. It's essential to pay attention to the computer name, user, and command line used in the creation of these processes. However, be aware that there may be false positives, such as the legitimate usage of remote PowerShell, for instance, for monitoring purposes. This monitoring has a medium importance level."
    }
  },
  {
    "instruction": "How can I detect: file deletion using \"rm\", \"shred\" or \"unlink\" commands which are used often by adversaries to delete files left behind by the actions of their intrusion activity",
    "context": "",
    "output": "In order to detect file deletion using \"rm\", \"shred\" or \"unlink\" commands which are used often by adversaries to delete files left behind by the actions of their intrusion activity, you should: Focus on Linux-based systems and monitor the creation process logs. Specifically, you should keep an eye out for processes that end with '/rm', which covers the use of both the 'rm' command and its variant 'rmdir', as well as processes that conclude with '/shred' or '/unlink'. These commands are frequently employed by attackers to remove traces of their presence or activities. It's important to note, however, that these commands can also be used for legitimate administrative activities, so some occurrences might be false positives. The information level for this type of detection is classified as informational, indicating that while it's useful for understanding system activity, it should be validated in the context of other suspicious activities to accurately identify malicious behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "file deletion using \"rm\", \"shred\" or \"unlink\" commands which are used often by adversaries to delete files left behind by the actions of their intrusion activity",
      "answer": "In order to detect file deletion using \"rm\", \"shred\" or \"unlink\" commands which are used often by adversaries to delete files left behind by the actions of their intrusion activity, you should: Focus on Linux-based systems and monitor the creation process logs. Specifically, you should keep an eye out for processes that end with '/rm', which covers the use of both the 'rm' command and its variant 'rmdir', as well as processes that conclude with '/shred' or '/unlink'. These commands are frequently employed by attackers to remove traces of their presence or activities. It's important to note, however, that these commands can also be used for legitimate administrative activities, so some occurrences might be false positives. The information level for this type of detection is classified as informational, indicating that while it's useful for understanding system activity, it should be validated in the context of other suspicious activities to accurately identify malicious behavior."
    }
  },
  {
    "instruction": "Explain how should I detect the following: encoded base64 MZ header in the commandline",
    "context": "",
    "output": "In order to detect encoded base64 MZ header in the commandline, you should: monitor the creation of processes on Windows systems for command lines that contain specific base64 encoded strings that correlate with the MZ header indicative of executable files. These strings include 'TVqQAAMAAAAEAAAA', 'TVpQAAIAAAAEAA8A', 'TVqAAAEAAAAEABAA', 'TVoAAAAAAAAAAAAA', and 'TVpTAQEAAAAEAAAA'. Given these conditions are met, the activity is considered highly suspicious with a low likelihood of being a false positive, suggesting an attempt to execute potentially malicious code or evade detection mechanisms by disguising executable files.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "encoded base64 MZ header in the commandline",
      "answer": "In order to detect encoded base64 MZ header in the commandline, you should: monitor the creation of processes on Windows systems for command lines that contain specific base64 encoded strings that correlate with the MZ header indicative of executable files. These strings include 'TVqQAAMAAAAEAAAA', 'TVpQAAIAAAAEAA8A', 'TVqAAAEAAAAEABAA', 'TVoAAAAAAAAAAAAA', and 'TVpTAQEAAAAEAAAA'. Given these conditions are met, the activity is considered highly suspicious with a low likelihood of being a false positive, suggesting an attempt to execute potentially malicious code or evade detection mechanisms by disguising executable files."
    }
  },
  {
    "instruction": "How can I detect: Detect changes of syslog daemons configuration files",
    "context": "",
    "output": "In order to detect changes of syslog daemons configuration files, you should focus on identifying modifications to critical system logging configuration files within a Linux environment, particularly by monitoring audit trails provided by auditd. Look for any auditd logs that indicate a 'PATH' type of record, specifically pointing to changes made to the following important configuration files: '/etc/syslog.conf', '/etc/rsyslog.conf', and '/etc/syslog-ng/syslog-ng.conf'. These logs should capture relevant fields such as the executable (exe), the command (comm), and a key identifier for the event (key), which can help in further analysis. Be aware that modifications to these files could occur as part of regular administrative tasks, so it is important to distinguish between routine updates and potentially malicious activity. Such activities should be treated with a high level of suspicion due to their critical role in system logging and monitoring.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect changes of syslog daemons configuration files",
      "answer": "In order to detect changes of syslog daemons configuration files, you should focus on identifying modifications to critical system logging configuration files within a Linux environment, particularly by monitoring audit trails provided by auditd. Look for any auditd logs that indicate a 'PATH' type of record, specifically pointing to changes made to the following important configuration files: '/etc/syslog.conf', '/etc/rsyslog.conf', and '/etc/syslog-ng/syslog-ng.conf'. These logs should capture relevant fields such as the executable (exe), the command (comm), and a key identifier for the event (key), which can help in further analysis. Be aware that modifications to these files could occur as part of regular administrative tasks, so it is important to distinguish between routine updates and potentially malicious activity. Such activities should be treated with a high level of suspicion due to their critical role in system logging and monitoring."
    }
  },
  {
    "instruction": "Explain how should I detect the following: scenario where if a user is assigned the SeEnableDelegationPrivilege right in Active Directory it would allow control of other AD user objects.",
    "context": "",
    "output": "In order to detect a scenario where a user is assigned the SeEnableDelegationPrivilege right in Active Directory, which would allow control of other AD user objects, you should monitor Windows Security logs for specific Event ID and keyword criteria. Focus on logs generated by the Security service of Windows products, especially those that fall under the requirements of having Audit Policy for Policy Change and Audit Authorization Policy Change actions enabled. Specifically, seek out Event ID 4704, which is pivotal for identifying changes in user rights assignments. The critical condition to watch for within these logs is the assignment of the 'SeEnableDelegationPrivilege'. This privilege allows a user to mark other user accounts for delegation, potentially enabling control over those accounts. Monitoring for the assignment of such privileges is essential as it could indicate an attempt to exploit Active Directory systems by gaining unauthorized control over multiple user objects. Due to the sensitive nature of this detection, any occurrence should be considered a high alert, although it's important to note that the determination of unknown cases might present as false positives. This alerting mechanism taps into various tactics and techniques, such as Privilege Escalation and Credential Access, by mitigating unauthorized attempts to gain elevated control within an organization's Active Directory environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scenario where if a user is assigned the SeEnableDelegationPrivilege right in Active Directory it would allow control of other AD user objects.",
      "answer": "In order to detect a scenario where a user is assigned the SeEnableDelegationPrivilege right in Active Directory, which would allow control of other AD user objects, you should monitor Windows Security logs for specific Event ID and keyword criteria. Focus on logs generated by the Security service of Windows products, especially those that fall under the requirements of having Audit Policy for Policy Change and Audit Authorization Policy Change actions enabled. Specifically, seek out Event ID 4704, which is pivotal for identifying changes in user rights assignments. The critical condition to watch for within these logs is the assignment of the 'SeEnableDelegationPrivilege'. This privilege allows a user to mark other user accounts for delegation, potentially enabling control over those accounts. Monitoring for the assignment of such privileges is essential as it could indicate an attempt to exploit Active Directory systems by gaining unauthorized control over multiple user objects. Due to the sensitive nature of this detection, any occurrence should be considered a high alert, although it's important to note that the determination of unknown cases might present as false positives. This alerting mechanism taps into various tactics and techniques, such as Privilege Escalation and Credential Access, by mitigating unauthorized attempts to gain elevated control within an organization's Active Directory environment."
    }
  },
  {
    "instruction": "How to detect: renamed SysInternals tool execution with a binary named ps.exe as used by Dragonfly APT group and documented in TA17-293A report",
    "context": "",
    "output": "In order to detect renamed SysInternals tool execution with a binary named ps.exe as used by Dragonfly APT group and documented in TA17-293A report, you should: focus on monitoring process creation events within Windows environments. Look specifically for instances where the command line includes both the 'ps.exe -accepteula' and '-s cmd /c netstat' parameters. This combination indicates an attempt to utilize a possibly renamed SysInternals tool, aligning with techniques used by the Dragonfly APT group. The presence of these specific command line parameters suggests a higher likelihood of malicious activity, though be aware that legitimate activities might sometimes mirror this behavior under certain conditions, such as when SysInternals tools have been intentionally renamed for benign purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "renamed SysInternals tool execution with a binary named ps.exe as used by Dragonfly APT group and documented in TA17-293A report",
      "answer": "In order to detect renamed SysInternals tool execution with a binary named ps.exe as used by Dragonfly APT group and documented in TA17-293A report, you should: focus on monitoring process creation events within Windows environments. Look specifically for instances where the command line includes both the 'ps.exe -accepteula' and '-s cmd /c netstat' parameters. This combination indicates an attempt to utilize a possibly renamed SysInternals tool, aligning with techniques used by the Dragonfly APT group. The presence of these specific command line parameters suggests a higher likelihood of malicious activity, though be aware that legitimate activities might sometimes mirror this behavior under certain conditions, such as when SysInternals tools have been intentionally renamed for benign purposes."
    }
  },
  {
    "instruction": "How can I detect: filename indicators that contain a specific typo seen used by the Small Sieve malware.",
    "context": "",
    "output": "In order to detect filename indicators that contain a specific typo seen used by the Small Sieve malware, you should: focus on monitoring Windows file events, specifically looking out for file names that navigate through the user directories and into either the Roaming or Local subfolders within the AppData directory. Key to identifying potential intrusions by the Small Sieve malware is the presence of a distinctive typo where 'Microsoft' is misspelled as 'Microsift'. Additionally, lookout for filenames that culminate precisely with '\\AppData\\Local\\MicrosoftWindowsOutlookDataPlus.txt', as this is a direct indicator of compromise. The criteria for this detection are either the presence of the typo in file paths that traverse through the specified user directories or the specific IOC filename. It is important to consider this rule to have a high level of accuracy with unlikely chances of false positives, thereby necessitating immediate investigation upon alerts. This approach is aligned with identifying tactics and techniques associated with malware deployment and execution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "filename indicators that contain a specific typo seen used by the Small Sieve malware.",
      "answer": "In order to detect filename indicators that contain a specific typo seen used by the Small Sieve malware, you should: focus on monitoring Windows file events, specifically looking out for file names that navigate through the user directories and into either the Roaming or Local subfolders within the AppData directory. Key to identifying potential intrusions by the Small Sieve malware is the presence of a distinctive typo where 'Microsoft' is misspelled as 'Microsift'. Additionally, lookout for filenames that culminate precisely with '\\AppData\\Local\\MicrosoftWindowsOutlookDataPlus.txt', as this is a direct indicator of compromise. The criteria for this detection are either the presence of the typo in file paths that traverse through the specified user directories or the specific IOC filename. It is important to consider this rule to have a high level of accuracy with unlikely chances of false positives, thereby necessitating immediate investigation upon alerts. This approach is aligned with identifying tactics and techniques associated with malware deployment and execution."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of PowerShell scripts located in the \"C:\\Users\\Public\" folder",
    "context": "",
    "output": "Sure!\nIn order to detect execution of PowerShell scripts located in the \"C:\\Users\\Public\" folder, you should focus on monitoring the process creation events within Windows systems. Particularly, you should look out for the instances where either 'powershell.exe' or 'pwsh.exe' is executed. In the command line used to launch these processes, check for the presence of flags that indicate a script is being executed from the \"C:\\Users\\Public\" directory. These flags include variations of the '-f' and '-file' arguments pointing directly to the \"C:\\Users\\Public\" path or using the \"%Public%\" environment variable, with or without double quotes around the paths. \n\nMonitoring for these specific command line arguments serves as a high accuracy method for identifying potentially malicious activities, as it's unlikely for legitimate scripts to be frequently executed from the \"C:\\Users\\Public\" folder with such specific patterns. This approach thus significantly reduces the chances of false positives, enabling a focused and effective detection of unauthorized script executions which could be indicative of a cybersecurity threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of PowerShell scripts located in the \"C:\\Users\\Public\" folder",
      "answer": "In order to detect execution of PowerShell scripts located in the \"C:\\Users\\Public\" folder, you should focus on monitoring the process creation events within Windows systems. Particularly, you should look out for the instances where either 'powershell.exe' or 'pwsh.exe' is executed. In the command line used to launch these processes, check for the presence of flags that indicate a script is being executed from the \"C:\\Users\\Public\" directory. These flags include variations of the '-f' and '-file' arguments pointing directly to the \"C:\\Users\\Public\" path or using the \"%Public%\" environment variable, with or without double quotes around the paths. \n\nMonitoring for these specific command line arguments serves as a high accuracy method for identifying potentially malicious activities, as it's unlikely for legitimate scripts to be frequently executed from the \"C:\\Users\\Public\" folder with such specific patterns. This approach thus significantly reduces the chances of false positives, enabling a focused and effective detection of unauthorized script executions which could be indicative of a cybersecurity threat."
    }
  },
  {
    "instruction": "How to detect: handles requested to SAM registry hive",
    "context": "",
    "output": "In order to detect handles requested to SAM registry hive, you should monitor security logs from Windows systems. Look specifically for event ID 4656, which indicates an attempt to request a handle. Focus on instances where the object type is 'Key' and the name of the object ends with '\\SAM', as this suggests the Security Accounts Manager (SAM) registry hive is being targeted. Capture details such as the computer name, the domain name of the subject, the username of the subject, the process name, and the exact name of the object involved in the event. Be aware that while this detection is crucial for identifying potential security breaches, there may be cases where legitimate processes trigger these alerts, although such instances are not well-documented and thus labeled as unknown false positives. The severity level for these detections is considered high due to the sensitivity of the SAM registry hive, which stores critical system and user account information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "handles requested to SAM registry hive",
      "answer": "In order to detect handles requested to SAM registry hive, you should monitor security logs from Windows systems. Look specifically for event ID 4656, which indicates an attempt to request a handle. Focus on instances where the object type is 'Key' and the name of the object ends with '\\SAM', as this suggests the Security Accounts Manager (SAM) registry hive is being targeted. Capture details such as the computer name, the domain name of the subject, the username of the subject, the process name, and the exact name of the object involved in the event. Be aware that while this detection is crucial for identifying potential security breaches, there may be cases where legitimate processes trigger these alerts, although such instances are not well-documented and thus labeled as unknown false positives. The severity level for these detections is considered high due to the sensitivity of the SAM registry hive, which stores critical system and user account information."
    }
  },
  {
    "instruction": "Please help me detect the following: Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate.\nKubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs.\nAn Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n",
    "context": "",
    "output": "Sure!\nIn order to identify when a Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. An Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster, you should: Monitor Azure activity logs for specific operation names that indicate interaction with Kubernetes connected clusters and managed clusters, particularly those operation names that start with 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH' or 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH' and end with '/CRONJOBS/WRITE' or '/JOBS/WRITE'. These logs are indicative of activities related to the creation or modification of Kubernetes Jobs and CronJobs, which can be used for legitimate batch processing tasks but might also be utilized by adversaries for malicious purposes. It is essential to consider that some detected activities may be legitimate administrative actions. Hence, known benign behaviors may need to be filtered out to reduce false positives. This approach leverages Azure's logging capabilities to identify potential misuse of Kubernetes CronJobs and Jobs, ensuring that only those activities that deviate from expected patterns are flagged for further investigation. The associated tactics and techniques for this kind of monitoring include Execution and Persistence, as managing and scheduling tasks like CronJobs and Jobs can be abused by attackers to execute malicious code or maintain their presence within a cluster.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate.\nKubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs.\nAn Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n",
      "answer": "In order to identify when a Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. An Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster, you should: Monitor Azure activity logs for specific operation names that indicate interaction with Kubernetes connected clusters and managed clusters, particularly those operation names that start with 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH' or 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH' and end with '/CRONJOBS/WRITE' or '/JOBS/WRITE'. These logs are indicative of activities related to the creation or modification of Kubernetes Jobs and CronJobs, which can be used for legitimate batch processing tasks but might also be utilized by adversaries for malicious purposes. It is essential to consider that some detected activities may be legitimate administrative actions. Hence, known benign behaviors may need to be filtered out to reduce false positives. This approach leverages Azure's logging capabilities to identify potential misuse of Kubernetes CronJobs and Jobs, ensuring that only those activities that deviate from expected patterns are flagged for further investigation. The associated tactics and techniques for this kind of monitoring include Execution and Persistence, as managing and scheduling tasks like CronJobs and Jobs can be abused by attackers to execute malicious code or maintain their presence within a cluster."
    }
  },
  {
    "instruction": "Can you explain how to detect: Initial execution of malicious document calls wmic to execute the file with regsvr32",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the initial execution of a malicious document that calls wmic to execute the file with regsvr32, you should: monitor Windows process creation logs for instances where the Windows Management Instrumentation Command-line (WMIC.exe) is initiated, specifically looking for commands containing 'wmic '. Additionally, pay close attention to the parent processes initiating these commands, which should include common Office applications such as Word (winword.exe), Excel (excel.exe), PowerPoint (powerpnt.exe), Access (msaccess.exe), Publisher (mspub.exe), Equation Editor (eqnedt32.exe), and Visio (visio.exe). This combination of events indicates a high likelihood of a malicious document attempting to leverage WMIC for execution, a tactic commonly associated with initial system compromise. Be mindful that false positives are currently unknown, suggesting the need for manual verification of detections.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Initial execution of malicious document calls wmic to execute the file with regsvr32",
      "answer": "In order to detect the initial execution of a malicious document that calls wmic to execute the file with regsvr32, you should: monitor Windows process creation logs for instances where the Windows Management Instrumentation Command-line (WMIC.exe) is initiated, specifically looking for commands containing 'wmic '. Additionally, pay close attention to the parent processes initiating these commands, which should include common Office applications such as Word (winword.exe), Excel (excel.exe), PowerPoint (powerpnt.exe), Access (msaccess.exe), Publisher (mspub.exe), Equation Editor (eqnedt32.exe), and Visio (visio.exe). This combination of events indicates a high likelihood of a malicious document attempting to leverage WMIC for execution, a tactic commonly associated with initial system compromise. Be mindful that false positives are currently unknown, suggesting the need for manual verification of detections."
    }
  },
  {
    "instruction": "How to detect: activity when a security-enabled global group is deleted",
    "context": "",
    "output": "In order to detect activity when a security-enabled global group is deleted, you should monitor the security logs from Windows systems for events with Event ID 4730 or 634. These specific Event IDs indicate that a security-enabled global group was deleted. By tracking these Event IDs within the Windows security service logs, it's possible to identify when such significant changes occur within group management activities. It's important to note, however, that the confidence in these detections might be considered low due to the potential for unknown false positives. This activity can be linked with tactics and techniques focused on undermining security control and manipulating user group configurations, which could be indicative of unauthorized access or malicious influence on security protocols.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "activity when a security-enabled global group is deleted",
      "answer": "In order to detect activity when a security-enabled global group is deleted, you should monitor the security logs from Windows systems for events with Event ID 4730 or 634. These specific Event IDs indicate that a security-enabled global group was deleted. By tracking these Event IDs within the Windows security service logs, it's possible to identify when such significant changes occur within group management activities. It's important to note, however, that the confidence in these detections might be considered low due to the potential for unknown false positives. This activity can be linked with tactics and techniques focused on undermining security control and manipulating user group configurations, which could be indicative of unauthorized access or malicious influence on security protocols."
    }
  },
  {
    "instruction": "How can I detect: use of SharpUp, a tool for local privilege escalation",
    "context": "",
    "output": "In order to detect the use of SharpUp, a tool for local privilege escalation, you should:\n\nMonitor Windows process creation logs for activities indicative of SharpUp execution. Specifically, look for any process creation events where the image name ends with '\\SharpUp.exe' or where the process description explicitly mentions 'SharpUp'. Also, scrutinize the command line arguments of process creation events for the presence of keywords associated with typical SharpUp utilization, such as 'HijackablePaths', 'UnquotedServicePath', 'ProcessDLLHijack', 'ModifiableServiceBinaries', 'ModifiableScheduledTask', 'DomainGPPPassword', and 'CachedGPPPassword'. These indicators point to attempts at exploiting vulnerabilities for escalating privileges on the local system.\n\nGiven the critical level of this detection, it is important to have robust monitoring in place for these specific patterns within process creation logs. Identifying such activities could indicate malicious attempts to escalate privileges, leveraging the capabilities of SharpUp. While the potential for false positives exists and is acknowledged to be unknown, the severity of this threat necessitates vigilant surveillance. \n\nThis detection strategy aligns with understanding and mitigating techniques commonly employed in privilege escalation attacks, as these are common tactics attackers use to gain higher level access on compromised systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of SharpUp, a tool for local privilege escalation",
      "answer": "In order to detect the use of SharpUp, a tool for local privilege escalation, you should:\n\nMonitor Windows process creation logs for activities indicative of SharpUp execution. Specifically, look for any process creation events where the image name ends with '\\SharpUp.exe' or where the process description explicitly mentions 'SharpUp'. Also, scrutinize the command line arguments of process creation events for the presence of keywords associated with typical SharpUp utilization, such as 'HijackablePaths', 'UnquotedServicePath', 'ProcessDLLHijack', 'ModifiableServiceBinaries', 'ModifiableScheduledTask', 'DomainGPPPassword', and 'CachedGPPPassword'. These indicators point to attempts at exploiting vulnerabilities for escalating privileges on the local system.\n\nGiven the critical level of this detection, it is important to have robust monitoring in place for these specific patterns within process creation logs. Identifying such activities could indicate malicious attempts to escalate privileges, leveraging the capabilities of SharpUp. While the potential for false positives exists and is acknowledged to be unknown, the severity of this threat necessitates vigilant surveillance. \n\nThis detection strategy aligns with understanding and mitigating techniques commonly employed in privilege escalation attacks, as these are common tactics attackers use to gain higher level access on compromised systems."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious RDP session redirect using tscon.exe",
    "context": "",
    "output": "In order to detect a suspicious RDP session redirect using tscon.exe, you should: Focus on monitoring the creation of processes within Windows systems. Specifically, look for instances where the command line invocation includes the parameter ' /dest:rdp-tcp#' which is indicative of an attempt to redirect a Remote Desktop Protocol (RDP) session using the utility tscon.exe. Such activity is usually not common in day-to-day operations and could signify malicious intent, especially tactics that involve gaining or exercising control over remote systems. The importance of identifying this behavior is marked as high due to the potential for unauthorized access and control over targeted systems. There are no known benign instances automatically associated with this behavior, but care should be taken to verify the context of detections to minimize false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious RDP session redirect using tscon.exe",
      "answer": "In order to detect a suspicious RDP session redirect using tscon.exe, you should: Focus on monitoring the creation of processes within Windows systems. Specifically, look for instances where the command line invocation includes the parameter ' /dest:rdp-tcp#' which is indicative of an attempt to redirect a Remote Desktop Protocol (RDP) session using the utility tscon.exe. Such activity is usually not common in day-to-day operations and could signify malicious intent, especially tactics that involve gaining or exercising control over remote systems. The importance of identifying this behavior is marked as high due to the potential for unauthorized access and control over targeted systems. There are no known benign instances automatically associated with this behavior, but care should be taken to verify the context of detections to minimize false positives."
    }
  },
  {
    "instruction": "How can I detect: usage of powershell cmdlets to disable or remove ETW trace sessions",
    "context": "",
    "output": "In order to detect usage of powershell cmdlets to disable or remove ETW trace sessions, you should: Focus on monitoring PowerShell script actions within Windows environments, specifically looking for Script Block Logging entries. Ensure Script Block Logging is enabled for in-depth insight. Watch for specific patterns within the ScriptBlockText: the command 'Remove-EtwTraceProvider ' indicating an attempt to remove Event Tracing for Windows (ETW) trace providers, and sequences involving 'Set-EtwTraceProvider ' combined with '0x11', which are indicative of attempts to modify the \"Enable\" property of a provider, potentially disabling it. The detection strategy relies on catching either one of these behaviors as a sign of the attack. It is crucial to be vigilant for false positives, although they are currently unspecified. This monitoring stands at a high level of importance due to the nature of the actions being indicative of attempts to undermine system logging and monitoring capabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of powershell cmdlets to disable or remove ETW trace sessions",
      "answer": "In order to detect usage of powershell cmdlets to disable or remove ETW trace sessions, you should: Focus on monitoring PowerShell script actions within Windows environments, specifically looking for Script Block Logging entries. Ensure Script Block Logging is enabled for in-depth insight. Watch for specific patterns within the ScriptBlockText: the command 'Remove-EtwTraceProvider ' indicating an attempt to remove Event Tracing for Windows (ETW) trace providers, and sequences involving 'Set-EtwTraceProvider ' combined with '0x11', which are indicative of attempts to modify the \"Enable\" property of a provider, potentially disabling it. The detection strategy relies on catching either one of these behaviors as a sign of the attack. It is crucial to be vigilant for false positives, although they are currently unspecified. This monitoring stands at a high level of importance due to the nature of the actions being indicative of attempts to undermine system logging and monitoring capabilities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of the Windows Update Client binary (wuauclt.exe) to proxy execute code and making a network connections.\nOne could easily make the DLL spawn a new process and inject to it to proxy the network connection and bypass this rule.\n",
    "context": "",
    "output": "In order to detect the use of the Windows Update Client binary (wuauclt.exe) to proxy execute code and making a network connections, you should be aware of a detection mechanism tailored for networks connections within Windows environments. This mechanism is designed to identify instances where the executable `wuauclt`, a legitimate Windows Update Client binary, is potentially being misused to execute code through proxy. Specifically, it looks for scenarios where `wuauclt` engages in network activities that are not characteristic of its standard operation, such as when it is invoked with command line arguments pointing to a malicious `UpdateDeploy.dll` or similar patterns indicating an attempt to load and execute unauthorized code.\n\nThe detection criteria focus on network connections initiated by `wuauclt`, paying particular attention to the command line used to execute it. Indicators of compromise include the use of specific arguments that load a custom DLL, an action that typically does not occur during regular updates. To reduce false positives and hone in on potentially malicious activity, this detection also includes filters based on destination IP ranges, narrowing the focus to a subset of network addresses that are more likely to be associated with malicious operations.\n\nHowever, it's important to note that `wuauclt.exe` can legitimately make network connections as part of its function to download updates from Microsoft. The distinction here lies in the context and parameters used, especially the involvement of unusual DLLs and IP ranges. Therefore, legitimate uses of `wuauclt.exe` that correspond with Windows Update activities but fall outside the specified malicious patterns are considered false positives and should be treated with caution. The overall goal is to balance vigilance against cyber threats with the recognition of `wuauclt.exe`'s legitimate network activities within a Windows setting.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of the Windows Update Client binary (wuauclt.exe) to proxy execute code and making a network connections.\nOne could easily make the DLL spawn a new process and inject to it to proxy the network connection and bypass this rule.\n",
      "answer": "In order to detect the use of the Windows Update Client binary (wuauclt.exe) to proxy execute code and making a network connections, you should be aware of a detection mechanism tailored for networks connections within Windows environments. This mechanism is designed to identify instances where the executable `wuauclt`, a legitimate Windows Update Client binary, is potentially being misused to execute code through proxy. Specifically, it looks for scenarios where `wuauclt` engages in network activities that are not characteristic of its standard operation, such as when it is invoked with command line arguments pointing to a malicious `UpdateDeploy.dll` or similar patterns indicating an attempt to load and execute unauthorized code.\n\nThe detection criteria focus on network connections initiated by `wuauclt`, paying particular attention to the command line used to execute it. Indicators of compromise include the use of specific arguments that load a custom DLL, an action that typically does not occur during regular updates. To reduce false positives and hone in on potentially malicious activity, this detection also includes filters based on destination IP ranges, narrowing the focus to a subset of network addresses that are more likely to be associated with malicious operations.\n\nHowever, it's important to note that `wuauclt.exe` can legitimately make network connections as part of its function to download updates from Microsoft. The distinction here lies in the context and parameters used, especially the involvement of unusual DLLs and IP ranges. Therefore, legitimate uses of `wuauclt.exe` that correspond with Windows Update activities but fall outside the specified malicious patterns are considered false positives and should be treated with caution. The overall goal is to balance vigilance against cyber threats with the recognition of `wuauclt.exe`'s legitimate network activities within a Windows setting."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may search for common password storage locations to obtain user credentials.\nPasswords are stored in several places on a system, depending on the operating system or application holding the credentials.\n",
    "context": "",
    "output": "In order to detect adversaries searching for common password storage locations to obtain user credentials, you should monitor PowerShell scripts for specific indicators of this malicious activity. Since passwords can be stored in various places depending on the system or application, attackers might use PowerShell to access these secure locations. \n\nFirstly, focus on scripts that attempt to use the functions 'Get-PasswordVaultCredentials' or 'Get-CredManCreds'. These are indicative of attempts to access credentials stored within Windows Credential Manager or the Password Vault.\n\nAdditionally, watch for scripts that involve the creation of new objects related to the Windows.Security.Credentials.PasswordVault or the use of 'Microsoft.CSharp.CSharpCodeProvider'. This could represent an attempt to manipulate or access the Password Vault or Credential Manager programmatically. Specifically, the combination of creating new objects, using 'System.Runtime.InteropServices.RuntimeEnvironment' to get runtime directories, and referring to 'Collections.ArrayList' and 'System.CodeDom.Compiler.CompilerParameters' are red flags for attempts to interact with stored credentials in an unconventional or malicious manner.\n\nThis monitoring is applicable to environments where PowerShell script logging (Script Block Logging) is enabled, as it requires visibility into the execution of PowerShell commands and scripts. The activity described could lead to credential theft if not detected and mitigated, posing a significant security threat. Tags associated with this behavior include Credential Access, indicating attempts to gain access to credential storage locations or mechanisms on the Windows operating system.\n\nBe cautious of false positives, as the specific usage of these commands or objects might be part of legitimate scripts or administrative activities. Therefore, it is necessary to investigate the context in which these indicators appear to differentiate between malicious activities and benign use cases.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may search for common password storage locations to obtain user credentials.\nPasswords are stored in several places on a system, depending on the operating system or application holding the credentials.\n",
      "answer": "In order to detect adversaries searching for common password storage locations to obtain user credentials, you should monitor PowerShell scripts for specific indicators of this malicious activity. Since passwords can be stored in various places depending on the system or application, attackers might use PowerShell to access these secure locations. \n\nFirstly, focus on scripts that attempt to use the functions 'Get-PasswordVaultCredentials' or 'Get-CredManCreds'. These are indicative of attempts to access credentials stored within Windows Credential Manager or the Password Vault.\n\nAdditionally, watch for scripts that involve the creation of new objects related to the Windows.Security.Credentials.PasswordVault or the use of 'Microsoft.CSharp.CSharpCodeProvider'. This could represent an attempt to manipulate or access the Password Vault or Credential Manager programmatically. Specifically, the combination of creating new objects, using 'System.Runtime.InteropServices.RuntimeEnvironment' to get runtime directories, and referring to 'Collections.ArrayList' and 'System.CodeDom.Compiler.CompilerParameters' are red flags for attempts to interact with stored credentials in an unconventional or malicious manner.\n\nThis monitoring is applicable to environments where PowerShell script logging (Script Block Logging) is enabled, as it requires visibility into the execution of PowerShell commands and scripts. The activity described could lead to credential theft if not detected and mitigated, posing a significant security threat. Tags associated with this behavior include Credential Access, indicating attempts to gain access to credential storage locations or mechanisms on the Windows operating system.\n\nBe cautious of false positives, as the specific usage of these commands or objects might be part of legitimate scripts or administrative activities. Therefore, it is necessary to investigate the context in which these indicators appear to differentiate between malicious activities and benign use cases."
    }
  },
  {
    "instruction": "How can I detect: execution of the PUA/Recon tool Seatbelt via PE information of command line parameters",
    "context": "",
    "output": "In order to detect the execution of the PUA/Recon tool Seatbelt via PE information of command line parameters, you should: focus on monitoring process creations within Windows environments. Specifically, be vigilant for the initiation of processes where the image name ends with '\\Seatbelt.exe', the original file name is identified as 'Seatbelt.exe', or the description directly mentions 'Seatbelt'. Furthermore, scrutinizing the command line parameters is crucial as Seatbelt can be executed with various commands that signify different reconnaissance activities, such as gathering information about DPAPI master keys, processes, files deemed interesting, certificate thumbprints, Chromium bookmarks and history, presence of Chromium, cloud credentials, credentials enumeration and Credential Guard, Firefox history, and process creation events among others.\n\nAdditionally, pay attention to the execution of Seatbelt with parameters indicating the use of grouped commands like '-group=misc', '-group=remote', '-group=chromium', '-group=slack', '-group=system', '-group=user', or '-group=all'. These grouped commands likely encapsulate multiple reconnaissance operations in one execution. Detection efforts should also encompass cases where Seatbelt is executed with an intent to output the gathered information to a file, identifiable by command line parameters containing ' -outputfile='.\n\nGiven the nature of these indicators, it's considered highly unlikely to encounter false positives, indicating that occurrences matching these descriptions should be treated with a high level of scrutiny. The methodology here focuses on the detection of malicious reconnaissance activities, commonly associated with tactics and techniques like discovery, Credential Access, and Collection within MITRE ATT&CK's framework for understanding adversary behaviors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the PUA/Recon tool Seatbelt via PE information of command line parameters",
      "answer": "In order to detect the execution of the PUA/Recon tool Seatbelt via PE information of command line parameters, you should: focus on monitoring process creations within Windows environments. Specifically, be vigilant for the initiation of processes where the image name ends with '\\Seatbelt.exe', the original file name is identified as 'Seatbelt.exe', or the description directly mentions 'Seatbelt'. Furthermore, scrutinizing the command line parameters is crucial as Seatbelt can be executed with various commands that signify different reconnaissance activities, such as gathering information about DPAPI master keys, processes, files deemed interesting, certificate thumbprints, Chromium bookmarks and history, presence of Chromium, cloud credentials, credentials enumeration and Credential Guard, Firefox history, and process creation events among others.\n\nAdditionally, pay attention to the execution of Seatbelt with parameters indicating the use of grouped commands like '-group=misc', '-group=remote', '-group=chromium', '-group=slack', '-group=system', '-group=user', or '-group=all'. These grouped commands likely encapsulate multiple reconnaissance operations in one execution. Detection efforts should also encompass cases where Seatbelt is executed with an intent to output the gathered information to a file, identifiable by command line parameters containing ' -outputfile='.\n\nGiven the nature of these indicators, it's considered highly unlikely to encounter false positives, indicating that occurrences matching these descriptions should be treated with a high level of scrutiny. The methodology here focuses on the detection of malicious reconnaissance activities, commonly associated with tactics and techniques like discovery, Credential Access, and Collection within MITRE ATT&CK's framework for understanding adversary behaviors."
    }
  },
  {
    "instruction": "Please help me detect the following: enumeration of local or remote network services.",
    "context": "",
    "output": "Sure!\nIn order to detect enumeration of local or remote network services, you should: Look for the creation of processes on macOS that indicate the use of utility tools commonly associated with scanning or networking functionalities. Specifically, be alert for processes ending with '/nc' or '/netcat', which are indicative of Netcat usage, a versatile networking utility for reading from and writing to network connections. However, if these processes also contain the command line argument 'l', it is less likely to be malicious as this can be common in legitimate administration activities. On the other hand, processes ending with '/nmap' or '/telnet' should also raise alerts as these tools, Nmap for network exploration or security auditing and Telnet for remote control service, can be used for scanning and potentially malicious activities. It is important to differentiate between legitimate administrative activities and potential threats, especially since the detection level is considered low, indicating that there might be false positives such as legitimate use of these tools for network management.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "enumeration of local or remote network services.",
      "answer": "In order to detect enumeration of local or remote network services, you should: Look for the creation of processes on macOS that indicate the use of utility tools commonly associated with scanning or networking functionalities. Specifically, be alert for processes ending with '/nc' or '/netcat', which are indicative of Netcat usage, a versatile networking utility for reading from and writing to network connections. However, if these processes also contain the command line argument 'l', it is less likely to be malicious as this can be common in legitimate administration activities. On the other hand, processes ending with '/nmap' or '/telnet' should also raise alerts as these tools, Nmap for network exploration or security auditing and Telnet for remote control service, can be used for scanning and potentially malicious activities. It is important to differentiate between legitimate administrative activities and potential threats, especially since the detection level is considered low, indicating that there might be false positives such as legitimate use of these tools for network management."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect possible persistence using Fax DLL load when service restart",
    "context": "",
    "output": "Certainly!\n\nIn order to detect possible persistence using Fax DLL load when service restart, you should:\nMonitor Windows registry settings particularly related to service restart mechanisms. Specifically, focus on registry entries modification under the '\\Software\\Microsoft\\Fax\\Device Providers\\' path. Look for any changes that include the '\\ImageName' value. This observation points out an attempt to achieve persistence by exploiting Fax services, commonly overlooked in Windows environments. However, to reduce false positives and ensure accuracy, it's essential to exclude any modifications that involve the '%systemroot%\\system32\\fxst30.dll', as this is a legitimate usage scenario on Windows 10 systems. Given the high potential impact of such persistence techniques, any deviations from normal behavior under these parameters should be treated with heightened scrutiny. This detection is aligned with recognized attack tactics focusing on achieving persistence through manipulation of system processes or services.\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect possible persistence using Fax DLL load when service restart",
      "answer": "In order to detect possible persistence using Fax DLL load when service restart, you should:\nMonitor Windows registry settings particularly related to service restart mechanisms. Specifically, focus on registry entries modification under the '\\Software\\Microsoft\\Fax\\Device Providers\\' path. Look for any changes that include the '\\ImageName' value. This observation points out an attempt to achieve persistence by exploiting Fax services, commonly overlooked in Windows environments. However, to reduce false positives and ensure accuracy, it's essential to exclude any modifications that involve the '%systemroot%\\system32\\fxst30.dll', as this is a legitimate usage scenario on Windows 10 systems. Given the high potential impact of such persistence techniques, any deviations from normal behavior under these parameters should be treated with heightened scrutiny. This detection is aligned with recognized attack tactics focusing on achieving persistence through manipulation of system processes or services.\n"
    }
  },
  {
    "instruction": "How to detect: Detect use of Get-GPO to get one GPO or all the GPOs in a domain.",
    "context": "",
    "output": "In order to detect use of Get-GPO to get one GPO or all the GPOs in a domain, you should: Monitor Windows PowerShell scripts for the presence of the \"Get-GPO\" command. This involves analyzing script block log entries, which requires Script Block Logging to be enabled on the system. If the text \"Get-GPO\" is found within a PowerShell script block, it suggests an attempt to retrieve Group Policy Objects (GPOs) from the domain, which can be a part of reconnaissance activities within an environment. However, be aware that there might be legitimate uses of this command in administrative PowerShell scripts, and such instances are considered as potential false positives. The severity of this detection is considered low, due to the possibility of legitimate use and the necessity of further investigation to confirm malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect use of Get-GPO to get one GPO or all the GPOs in a domain.",
      "answer": "In order to detect use of Get-GPO to get one GPO or all the GPOs in a domain, you should: Monitor Windows PowerShell scripts for the presence of the \"Get-GPO\" command. This involves analyzing script block log entries, which requires Script Block Logging to be enabled on the system. If the text \"Get-GPO\" is found within a PowerShell script block, it suggests an attempt to retrieve Group Policy Objects (GPOs) from the domain, which can be a part of reconnaissance activities within an environment. However, be aware that there might be legitimate uses of this command in administrative PowerShell scripts, and such instances are considered as potential false positives. The severity of this detection is considered low, due to the possibility of legitimate use and the necessity of further investigation to confirm malicious intent."
    }
  },
  {
    "instruction": "How can I detect: creation of a scheduled task using the \"-XML\" flag with a file without the '.xml' extension. This behavior could be indicative of potential defense evasion attempt during persistence",
    "context": "",
    "output": "In order to detect the creation of a scheduled task using the \"-XML\" flag with a file without the '.xml' extension, which could be indicative of a potential defense evasion attempt during persistence, you should:\n\nMonitor process creation events within Windows environments, specifically looking for instances of the 'schtasks.exe' utility. This utility is typically used for scheduling tasks to be executed at a later time or on a regular schedule. Focus on command lines that include '/create' or '-create', indicating the creation of a new task, and '/xml' or '-xml', suggesting the use of XML for defining the task. However, ensure that the command line also contains a reference to an '.xml' file, as the absence of such might indicate an attempt to misuse the utility for evasive purposes.\n\nIt's crucial to filter out legitimate system and scheduled processes that might share similar characteristics. Exclude command lines executed with an integrity level of 'System' and those initiated by 'rundll32.exe' with a specific set of parameters related to Windows Installer temporary actions. Additionally, consider excluding parent processes that belong to known third-party utilities, which might legitimately execute similar commands as part of their operation, like various setup or update programs listed in the rule.\n\nThis monitoring strategy aligns with identifying potential defense evasion tactics where adversaries attempt to blend in their malicious tasks with normal administrative activities, all while maintaining persistence within the compromised system by ensuring their task is executed regularly or under certain conditions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a scheduled task using the \"-XML\" flag with a file without the '.xml' extension. This behavior could be indicative of potential defense evasion attempt during persistence",
      "answer": "In order to detect the creation of a scheduled task using the \"-XML\" flag with a file without the '.xml' extension, which could be indicative of a potential defense evasion attempt during persistence, you should:\n\nMonitor process creation events within Windows environments, specifically looking for instances of the 'schtasks.exe' utility. This utility is typically used for scheduling tasks to be executed at a later time or on a regular schedule. Focus on command lines that include '/create' or '-create', indicating the creation of a new task, and '/xml' or '-xml', suggesting the use of XML for defining the task. However, ensure that the command line also contains a reference to an '.xml' file, as the absence of such might indicate an attempt to misuse the utility for evasive purposes.\n\nIt's crucial to filter out legitimate system and scheduled processes that might share similar characteristics. Exclude command lines executed with an integrity level of 'System' and those initiated by 'rundll32.exe' with a specific set of parameters related to Windows Installer temporary actions. Additionally, consider excluding parent processes that belong to known third-party utilities, which might legitimately execute similar commands as part of their operation, like various setup or update programs listed in the rule.\n\nThis monitoring strategy aligns with identifying potential defense evasion tactics where adversaries attempt to blend in their malicious tasks with normal administrative activities, all while maintaining persistence within the compromised system by ensuring their task is executed regularly or under certain conditions."
    }
  },
  {
    "instruction": "Can you explain how to detect: Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage",
    "context": "",
    "output": "Certainly!\n\nIn order to detect adversaries attempting to disable or modify system firewalls to bypass controls limiting network usage, you should monitor registry modifications targeting the Windows Firewall settings. This involves tracking events where registry values are set (EventType: SetValue) under the Windows product category, specifically within the Registry Set log source. Pay close attention to any changes made to the registry paths that control the enabling of the firewall in the domain, public, and standard profiles, which are found under \"HKLM\\System\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\\" and end with \"\\EnableFirewall\". The critical modification to look out for is the setting of these registry values to 'DWORD (0x00000000)', which effectively disables the firewall. It's important to note that there could be rare cases where changes to these settings might not indicate malicious activity, and these should be considered as potential false positives. The severity of such modifications is generally considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage",
      "answer": "In order to detect adversaries attempting to disable or modify system firewalls to bypass controls limiting network usage, you should monitor registry modifications targeting the Windows Firewall settings. This involves tracking events where registry values are set (EventType: SetValue) under the Windows product category, specifically within the Registry Set log source. Pay close attention to any changes made to the registry paths that control the enabling of the firewall in the domain, public, and standard profiles, which are found under \"HKLM\\System\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\\" and end with \"\\EnableFirewall\". The critical modification to look out for is the setting of these registry values to 'DWORD (0x00000000)', which effectively disables the firewall. It's important to note that there could be rare cases where changes to these settings might not indicate malicious activity, and these should be considered as potential false positives. The severity of such modifications is generally considered medium."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users.\nAccounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.\n",
    "context": "",
    "output": "In order to prevent adversaries from interrupting the availability of system and network resources by inhibiting access to accounts utilized by legitimate users through actions such as deleting, locking, or manipulating accounts (e.g., changing credentials), you should focus on monitoring PowerShell script logs on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture detailed logging information. Look for scripts that contain the commands `Remove-ADGroupMember` along with both parameters `-Identity ` and `-Members `. This combination indicates an attempt to remove members from Active Directory groups, which could be part of an attack to deny access to certain accounts or resources. Be aware that there may be instances where these commands are used legitimately, though such scenarios are considered unknown false positives. The severity level of this activity is medium, implying that while it may not directly indicate a breach, it is suspicious enough to warrant investigation. Understanding these signs and being proactive in detection can help in mitigating threats aimed at disrupting legitimate user access to network resources and accounts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users.\nAccounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.\n",
      "answer": "In order to prevent adversaries from interrupting the availability of system and network resources by inhibiting access to accounts utilized by legitimate users through actions such as deleting, locking, or manipulating accounts (e.g., changing credentials), you should focus on monitoring PowerShell script logs on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture detailed logging information. Look for scripts that contain the commands `Remove-ADGroupMember` along with both parameters `-Identity ` and `-Members `. This combination indicates an attempt to remove members from Active Directory groups, which could be part of an attack to deny access to certain accounts or resources. Be aware that there may be instances where these commands are used legitimately, though such scenarios are considered unknown false positives. The severity level of this activity is medium, implying that while it may not directly indicate a breach, it is suspicious enough to warrant investigation. Understanding these signs and being proactive in detection can help in mitigating threats aimed at disrupting legitimate user access to network resources and accounts."
    }
  },
  {
    "instruction": "How can I detect: persistence via Visual Studio Tools for Office (VSTO) add-ins in Office applications.",
    "context": "",
    "output": "In order to detect persistence via Visual Studio Tools for Office (VSTO) add-ins in Office applications, you should: Monitor the Windows Registry for specific events where values are being set within registry paths associated with Office add-ins. This includes paths for Outlook, Word, Excel, PowerPoint add-ins, and Visual Studio Tools for Office (VSTO) security inclusions. Any event where a 'SetValue' EventType is recorded targeting these paths should be scrutinized.\n\nIt is crucial to exclude events generated by known system and application processes that might interact with these registry paths under legitimate circumstances. Such exclusions include actions initiated by 'msiexec.exe', 'regsvr32.exe' which might be part of legitimate software installations or updates, including default Office installation scenarios like usage of 'excel.exe', 'integrator.exe', 'OfficeClickToRun.exe', and 'winword.exe'. An additional specific filter should be set to exclude actions from 'C:\\Program Files\\AVG\\Antivirus\\RegSvr.exe' targeting the Outlook Addins registry path for AVG's antivirus, as this represents a known legitimate use case.\n\nHowever, attentiveness to false positives is necessary, as legitimate add-in installations will trigger these monitoring rules. These installation actions should be contextualized within your environment's regular operations and change management procedures to accurately distinguish between benign and malicious activity.\n\nThe detection strategy is aligned with MITRE ATT&CK tactics and techniques such as Persistent, Execution, and Privilege Escalation, providing a comprehensive approach to identifying potentially malicious activities that leverage Office Add-ins for persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "persistence via Visual Studio Tools for Office (VSTO) add-ins in Office applications.",
      "answer": "In order to detect persistence via Visual Studio Tools for Office (VSTO) add-ins in Office applications, you should: Monitor the Windows Registry for specific events where values are being set within registry paths associated with Office add-ins. This includes paths for Outlook, Word, Excel, PowerPoint add-ins, and Visual Studio Tools for Office (VSTO) security inclusions. Any event where a 'SetValue' EventType is recorded targeting these paths should be scrutinized.\n\nIt is crucial to exclude events generated by known system and application processes that might interact with these registry paths under legitimate circumstances. Such exclusions include actions initiated by 'msiexec.exe', 'regsvr32.exe' which might be part of legitimate software installations or updates, including default Office installation scenarios like usage of 'excel.exe', 'integrator.exe', 'OfficeClickToRun.exe', and 'winword.exe'. An additional specific filter should be set to exclude actions from 'C:\\Program Files\\AVG\\Antivirus\\RegSvr.exe' targeting the Outlook Addins registry path for AVG's antivirus, as this represents a known legitimate use case.\n\nHowever, attentiveness to false positives is necessary, as legitimate add-in installations will trigger these monitoring rules. These installation actions should be contextualized within your environment's regular operations and change management procedures to accurately distinguish between benign and malicious activity.\n\nThe detection strategy is aligned with MITRE ATT&CK tactics and techniques such as Persistent, Execution, and Privilege Escalation, providing a comprehensive approach to identifying potentially malicious activities that leverage Office Add-ins for persistence."
    }
  },
  {
    "instruction": "How to detect: WebDav DownloadCradle",
    "context": "",
    "output": "In order to detect WebDav DownloadCradle, you should monitor proxy logs for any GET requests where the client's user agent starts with 'Microsoft-WebDAV-MiniRedir/'. This method of detection is crucial as it helps identify potentially malicious activities where WebDav is used as a DownloadCradle. In the process of scrutiny, ensure to observe and document the client IP, the URI requested, the client user agent, and the method used for the request. However, be mindful of certain legitimate activities that could trigger false positives, such as administrative scripts that either download files from the internet or retrieve certain website contents, and legitimate WebDav administration tasks. Given the high level of threat this activity could represent, it's classified at a high level of concern.\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "WebDav DownloadCradle",
      "answer": "In order to detect WebDav DownloadCradle, you should monitor proxy logs for any GET requests where the client's user agent starts with 'Microsoft-WebDAV-MiniRedir/'. This method of detection is crucial as it helps identify potentially malicious activities where WebDav is used as a DownloadCradle. In the process of scrutiny, ensure to observe and document the client IP, the URI requested, the client user agent, and the method used for the request. However, be mindful of certain legitimate activities that could trigger false positives, such as administrative scripts that either download files from the internet or retrieve certain website contents, and legitimate WebDav administration tasks. Given the high level of threat this activity could represent, it's classified at a high level of concern.\n"
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of suspicious files and folders inside the user's AppData folder but not inside any of the common and well known directories (Local, Romaing, LocalLow). This method could be used as a method to bypass detection who exclude the AppData folder in fear of FPs",
    "context": "",
    "output": "In order to detect the creation of suspicious files and folders inside the user's AppData folder but not inside any of the common and well-known directories (Local, Roaming, LocalLow), which could be used as a method to bypass detection mechanisms that exclude the AppData folder fearing false positives, you should: monitor for the creation of files with specific extensions (.bat, .cmd, .cpl, .dll, .exe, .hta, .iso, .lnk, .msi, .ps1, .psm1, .scr, .vbe, .vbs) within the AppData directory of a user's profile on Windows, but specifically exclude those created in the more frequently used subdirectories such as AppData\\Local, AppData\\LocalLow, and AppData\\Roaming. This approach aims to highlight potentially malicious activities occurring outside the typical usage patterns, by focusing on less commonly watched folders within AppData, thereby increasing the likelihood of detecting attempts to evade standard security measures.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of suspicious files and folders inside the user's AppData folder but not inside any of the common and well known directories (Local, Romaing, LocalLow). This method could be used as a method to bypass detection who exclude the AppData folder in fear of FPs",
      "answer": "In order to detect the creation of suspicious files and folders inside the user's AppData folder but not inside any of the common and well-known directories (Local, Roaming, LocalLow), which could be used as a method to bypass detection mechanisms that exclude the AppData folder fearing false positives, you should: monitor for the creation of files with specific extensions (.bat, .cmd, .cpl, .dll, .exe, .hta, .iso, .lnk, .msi, .ps1, .psm1, .scr, .vbe, .vbs) within the AppData directory of a user's profile on Windows, but specifically exclude those created in the more frequently used subdirectories such as AppData\\Local, AppData\\LocalLow, and AppData\\Roaming. This approach aims to highlight potentially malicious activities occurring outside the typical usage patterns, by focusing on less commonly watched folders within AppData, thereby increasing the likelihood of detecting attempts to evade standard security measures."
    }
  },
  {
    "instruction": "How can I detect: different loaders as described in various threat reports on Lazarus group activity",
    "context": "",
    "output": "In order to detect different loaders as described in various threat reports on Lazarus group activity, you should: Monitor process creation logs on Windows systems for specific command line patterns that indicate potential malicious activity. Specifically, look for instances where `cmd.exe` is executed with a command line containing both '/c' and '-p 0x', which might suggest an attempt to execute commands or scripts in a particular manner often associated with malicious loaders. Additionally, be on the alert for processes that involve file paths pointing to `C:\\ProgramData\\` or `C:\\RECYCLER\\`, as these directories can be used by attackers to discreetly place and execute malicious payloads. Furthermore, pay close attention to the execution of `rundll32.exe` with command lines that include `C:\\ProgramData\\`, paired with file extensions such as `.bin`, `.tmp`, `.dat`, `.io`, `.ini`, and `.db`. These patterns can indicate the use of specific file types for loading malicious code, which is a tactic known in reports on activities by threat groups like Lazarus. The detection of these criteria in the command execution paths should raise alerts due to their critical nature and potential relation to sophisticated threat actor behaviors.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "different loaders as described in various threat reports on Lazarus group activity",
      "answer": "In order to detect different loaders as described in various threat reports on Lazarus group activity, you should: Monitor process creation logs on Windows systems for specific command line patterns that indicate potential malicious activity. Specifically, look for instances where `cmd.exe` is executed with a command line containing both '/c' and '-p 0x', which might suggest an attempt to execute commands or scripts in a particular manner often associated with malicious loaders. Additionally, be on the alert for processes that involve file paths pointing to `C:\\ProgramData\\` or `C:\\RECYCLER\\`, as these directories can be used by attackers to discreetly place and execute malicious payloads. Furthermore, pay close attention to the execution of `rundll32.exe` with command lines that include `C:\\ProgramData\\`, paired with file extensions such as `.bin`, `.tmp`, `.dat`, `.io`, `.ini`, and `.db`. These patterns can indicate the use of specific file types for loading malicious code, which is a tactic known in reports on activities by threat groups like Lazarus. The detection of these criteria in the command execution paths should raise alerts due to their critical nature and potential relation to sophisticated threat actor behaviors."
    }
  },
  {
    "instruction": "How to detect: Detect use of scrobj.dll as this DLL looks for the ScriptletURL key to get the location of the script to execute",
    "context": "",
    "output": "In order to detect use of scrobj.dll as this DLL looks for the ScriptletURL key to get the location of the script to execute, you should: Monitor Windows registry modifications where the event type indicates a value being set (SetValue) within the Windows registry. Specifically, pay attention to changes in the registry targeting objects ending with 'InprocServer32\\(Default)'. If the modification details explicitly involve 'C:\\WINDOWS\\system32\\scrobj.dll', this is an indicator of a potential security threat. It is crucial to be aware that there might be legitimate uses of this DLL file, so not every detection will represent a malicious activity. The detection focuses on registry settings related to Windows, highlighting the manipulation of critical areas where malicious actors might attempt to execute scripts through the misuse of the scrobj.dll. The activities to monitor are categorized under techniques and tactics that involve modification of system registry to establish persistence or execute malicious scripts, signifying the need for medium-level alertness.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect use of scrobj.dll as this DLL looks for the ScriptletURL key to get the location of the script to execute",
      "answer": "In order to detect use of scrobj.dll as this DLL looks for the ScriptletURL key to get the location of the script to execute, you should: Monitor Windows registry modifications where the event type indicates a value being set (SetValue) within the Windows registry. Specifically, pay attention to changes in the registry targeting objects ending with 'InprocServer32\\(Default)'. If the modification details explicitly involve 'C:\\WINDOWS\\system32\\scrobj.dll', this is an indicator of a potential security threat. It is crucial to be aware that there might be legitimate uses of this DLL file, so not every detection will represent a malicious activity. The detection focuses on registry settings related to Windows, highlighting the manipulation of critical areas where malicious actors might attempt to execute scripts through the misuse of the scrobj.dll. The activities to monitor are categorized under techniques and tactics that involve modification of system registry to establish persistence or execute malicious scripts, signifying the need for medium-level alertness."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Commandlet names from ShellIntel exploitation scripts.",
    "context": "",
    "output": "In order to detect Commandlet names from ShellIntel exploitation scripts, you should: focus on monitoring Windows PowerShell scripts, ensuring that Script Block Logging is enabled to capture the necessary data. Specifically, lookout for the presence of any of the following commandlet names within the script blocks: 'Invoke-SMBAutoBrute', 'Invoke-GPOLinks', and 'Invoke-Potato'. These particular commandlets indicate a high likelihood of malicious activity related to exploitation techniques. It's important to understand that these detections are highly indicative of compromise or attack attempts, although false positives are considered unknown. This highlights the necessity for immediate investigation upon detection to mitigate potential threats effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Commandlet names from ShellIntel exploitation scripts.",
      "answer": "In order to detect Commandlet names from ShellIntel exploitation scripts, you should: focus on monitoring Windows PowerShell scripts, ensuring that Script Block Logging is enabled to capture the necessary data. Specifically, lookout for the presence of any of the following commandlet names within the script blocks: 'Invoke-SMBAutoBrute', 'Invoke-GPOLinks', and 'Invoke-Potato'. These particular commandlets indicate a high likelihood of malicious activity related to exploitation techniques. It's important to understand that these detections are highly indicative of compromise or attack attempts, although false positives are considered unknown. This highlights the necessity for immediate investigation upon detection to mitigate potential threats effectively."
    }
  },
  {
    "instruction": "How to detect: execution of WMIC in order to get a list of firewall and antivirus products",
    "context": "",
    "output": "In order to detect the execution of WMIC in order to get a list of firewall and antivirus products, you should: Monitor process creation logs on Windows systems for occurrences where the process image name ends with '\\wmic.exe' or the original file name is 'wmic.exe'. Additionally, check if the command line used for executing these processes contains the term 'Product'. Both criteria\u2014relating to the process image name and the command line\u2014must be met to consider the activity suspicious. While this detection is set at a medium level of urgency, be aware that not all instances may represent genuine threats, as false positives can occur without known patterns to exclude them reliably. This approach is crucial for identifying potential reconnaissance activities, where attackers use Windows Management Instrumentation Command-line (WMIC) to gather information about installed firewall and antivirus products on a target system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of WMIC in order to get a list of firewall and antivirus products",
      "answer": "In order to detect the execution of WMIC in order to get a list of firewall and antivirus products, you should: Monitor process creation logs on Windows systems for occurrences where the process image name ends with '\\wmic.exe' or the original file name is 'wmic.exe'. Additionally, check if the command line used for executing these processes contains the term 'Product'. Both criteria\u2014relating to the process image name and the command line\u2014must be met to consider the activity suspicious. While this detection is set at a medium level of urgency, be aware that not all instances may represent genuine threats, as false positives can occur without known patterns to exclude them reliably. This approach is crucial for identifying potential reconnaissance activities, where attackers use Windows Management Instrumentation Command-line (WMIC) to gather information about installed firewall and antivirus products on a target system."
    }
  },
  {
    "instruction": "How can I detect: modification of autostart extensibility point (ASEP) in registry.",
    "context": "",
    "output": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring registry setting activities on Windows systems specifically. You need to look for events where the registry has been modified to set new values under the path `\\Software\\Policies\\Microsoft\\Windows\\System\\Scripts`. These modifications can involve setting values related to startup, shutdown, logon, and logoff scripts. Furthermore, you should only consider modifications that do not have \"(Empty)\" in the Details field as part of the suspicious activity, filtering out potential false positives.\n\nFor tracking, the key pieces of information to log would be the Security ID of the account making the change, the name of the object modified, and both the old and new value types of the registry. \n\nHowever, it's crucial to keep in mind common false positives which might arise from legitimate software, which often sets autorun keys during installation, or from legitimate administrator activities where changes to autorun keys are made for benign reasons. This scenario has a medium level of urgency in terms of addressing potential threats.\n\nThe related MITRE ATT&CK tactics and techniques you are dealing with include Persistence, Privilege Escalation, and Execution. Monitoring for this type of modification helps in identifying unauthorized or malicious changes that could allow malware or an attacker to automatically execute scripts during various system states, aiding in maintaining persistence, elevating privileges, or executing malicious programs without direct user initiation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring registry setting activities on Windows systems specifically. You need to look for events where the registry has been modified to set new values under the path `\\Software\\Policies\\Microsoft\\Windows\\System\\Scripts`. These modifications can involve setting values related to startup, shutdown, logon, and logoff scripts. Furthermore, you should only consider modifications that do not have \"(Empty)\" in the Details field as part of the suspicious activity, filtering out potential false positives.\n\nFor tracking, the key pieces of information to log would be the Security ID of the account making the change, the name of the object modified, and both the old and new value types of the registry. \n\nHowever, it's crucial to keep in mind common false positives which might arise from legitimate software, which often sets autorun keys during installation, or from legitimate administrator activities where changes to autorun keys are made for benign reasons. This scenario has a medium level of urgency in terms of addressing potential threats.\n\nThe related MITRE ATT&CK tactics and techniques you are dealing with include Persistence, Privilege Escalation, and Execution. Monitoring for this type of modification helps in identifying unauthorized or malicious changes that could allow malware or an attacker to automatically execute scripts during various system states, aiding in maintaining persistence, elevating privileges, or executing malicious programs without direct user initiation."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential registry persistence technique using the Event Viewer \"Events.asp\" technique",
    "context": "",
    "output": "In order to detect potential registry persistence technique using the Event Viewer \"Events.asp\" technique, you should monitor for specific registry modifications in Windows environments, focusing mainly on changes that involve Event Viewer configurations. Specifically, keep an eye on the registry paths associated with the Event Viewer, particularly those under the `\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer` hierarchy. Look for modifications to the `MicrosoftRedirectionProgram` and `MicrosoftRedirectionURL` keys within this path. These keys might be altered as a method to maintain persistence by redirecting Event Viewer help requests to malicious URLs or programs.\n\nYou should exclude certain known benign configurations from triggering alerts. Specifically, ignore any changes that involve setting the `MicrosoftRedirectionProgram` to `C:\\WINDOWS\\system32\\svchost.exe` via Group Policy Objects (GPO) with the specific detail of pointing to `%%SystemRoot%%\\PCHealth\\HelpCtr\\Binaries\\HelpCtr.exe`. Similarly, exclude configurations pointing the `MicrosoftRedirectionProgramCommandLineParameters` to `-url hcp://services/centers/support?topic=%%s` with the same `svchost.exe` image path. Moreover, any changes that simply set the redirection URL to 'http://go.microsoft.com/fwlink/events.asp' or clear the details (making them empty) should not be considered suspicious.\n\nThis monitoring focuses on registry settings alterations, a critical log source in detecting this type of persistence technique. The key identifiers for detection are the specific registry paths and keys involved, the conditions under which changes should be excluded from suspicion, and the broader context of such modifications indicating potential malicious activity. This detection strategy is associated with persistence tactics and potentially unwanted modifications of system configuration to redirect and manipulate Event Viewer functionality, which may aid an attacker in maintaining a foothold or executing malicious payloads unnoticed.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential registry persistence technique using the Event Viewer \"Events.asp\" technique",
      "answer": "In order to detect potential registry persistence technique using the Event Viewer \"Events.asp\" technique, you should monitor for specific registry modifications in Windows environments, focusing mainly on changes that involve Event Viewer configurations. Specifically, keep an eye on the registry paths associated with the Event Viewer, particularly those under the `\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer` hierarchy. Look for modifications to the `MicrosoftRedirectionProgram` and `MicrosoftRedirectionURL` keys within this path. These keys might be altered as a method to maintain persistence by redirecting Event Viewer help requests to malicious URLs or programs.\n\nYou should exclude certain known benign configurations from triggering alerts. Specifically, ignore any changes that involve setting the `MicrosoftRedirectionProgram` to `C:\\WINDOWS\\system32\\svchost.exe` via Group Policy Objects (GPO) with the specific detail of pointing to `%%SystemRoot%%\\PCHealth\\HelpCtr\\Binaries\\HelpCtr.exe`. Similarly, exclude configurations pointing the `MicrosoftRedirectionProgramCommandLineParameters` to `-url hcp://services/centers/support?topic=%%s` with the same `svchost.exe` image path. Moreover, any changes that simply set the redirection URL to 'http://go.microsoft.com/fwlink/events.asp' or clear the details (making them empty) should not be considered suspicious.\n\nThis monitoring focuses on registry settings alterations, a critical log source in detecting this type of persistence technique. The key identifiers for detection are the specific registry paths and keys involved, the conditions under which changes should be excluded from suspicion, and the broader context of such modifications indicating potential malicious activity. This detection strategy is associated with persistence tactics and potentially unwanted modifications of system configuration to redirect and manipulate Event Viewer functionality, which may aid an attacker in maintaining a foothold or executing malicious payloads unnoticed."
    }
  },
  {
    "instruction": "Please help me detect the following: process creation events that use the Sysnative folder (common for CobaltStrike spawns)",
    "context": "",
    "output": "Sure!\nIn order to detect process creation events that use the Sysnative folder (common for CobaltStrike spawns), you should: Monitor process creation logs in Windows environments, specifically focusing on instances where the command line starts with 'C:\\Windows\\Sysnative\\'. This detection method is crucial for identifying suspicious activity associated with CobaltStrike or similar threats, as attackers often leverage the Sysnative directory to execute 32-bit applications on 64-bit systems in an effort to evade detection. Always include both the command line and parent command line in the monitoring process to enhance context understanding. Be aware that there might be legitimate uses of this technique, although they are typically unknown, thus requiring a medium level of scrutiny when such activities are detected.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process creation events that use the Sysnative folder (common for CobaltStrike spawns)",
      "answer": "In order to detect process creation events that use the Sysnative folder (common for CobaltStrike spawns), you should: Monitor process creation logs in Windows environments, specifically focusing on instances where the command line starts with 'C:\\Windows\\Sysnative\\'. This detection method is crucial for identifying suspicious activity associated with CobaltStrike or similar threats, as attackers often leverage the Sysnative directory to execute 32-bit applications on 64-bit systems in an effort to evade detection. Always include both the command line and parent command line in the monitoring process to enhance context understanding. Be aware that there might be legitimate uses of this technique, although they are typically unknown, thus requiring a medium level of scrutiny when such activities are detected."
    }
  },
  {
    "instruction": "Can you explain how to detect: modification of autostart extensibility point (ASEP) in registry.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect modification of autostart extensibility point (ASEP) in registry, you should monitor for specific activities within the Windows registry where applications might configure themselves to automatically start upon system boot or user login. This is achieved by focusing on registry key modifications within the Windows registry, specifically targeting the 'Wow6432Node' path under the 'Microsoft\\Windows\\CurrentVersion' directory. The detection strategy involves looking for 'SetValue' events that alter registry keys related to autostart functionality, such as 'Run', 'RunOnce', 'Explorer\\ShellServiceObjects', and several others that can be leveraged by both benign and malicious software to ensure execution at startup.\n\nKey points to focus on include:\n- Monitoring registry modifications, especially 'SetValue' events targeting paths within '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion'.\n- Paying attention to changes in autostart registry keys like 'Run', 'RunOnce', among others.\n- Excluding events related to known legitimate software updates or installations that might use these registry keys for benign purposes. This includes certain Microsoft Office and Edge update activities, Dropbox installation behaviors, Evernote, .NET runtime setups, Visual C++ Redistributable installations, Windows SDK, and Win desktop runtime upgrades, among others. Activities that resemble legitimate software behavior but occurring in unusual or unexpected registry keys should be scrutinized.\n- Excluding changes made by known uninstallers or the 'msiexec.exe' process when it interacts with specific registry keys that might be altered during legitimate software updates or uninstallation processes.\n\nThe logging source for these activities is primarily registry set logs from Windows products, allowing for the monitoring of these critical changes. While investigating these modifications, it's crucial to differentiate between legitimate and malicious uses to avoid false positives, such as legitimate software installations or administrative actions setting up autostart keys for valid reasons. The associated fields to observe include the SecurityID, ObjectName, OldValueType, and NewValueType which provide details about the registry operation.\n\nUnderstanding and identifying these modifications are significant in the context of security because autostart extensibility points are often leveraged by malware to ensure persistence on infected systems, executing malicious payloads without user intervention at system startup or login. Monitoring and analyzing changes in these areas help in early detection of potential threats ensuring better preventative measures against unauthorized or malicious activities aiming to gain persistence on Windows systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should monitor for specific activities within the Windows registry where applications might configure themselves to automatically start upon system boot or user login. This is achieved by focusing on registry key modifications within the Windows registry, specifically targeting the 'Wow6432Node' path under the 'Microsoft\\Windows\\CurrentVersion' directory. The detection strategy involves looking for 'SetValue' events that alter registry keys related to autostart functionality, such as 'Run', 'RunOnce', 'Explorer\\ShellServiceObjects', and several others that can be leveraged by both benign and malicious software to ensure execution at startup.\n\nKey points to focus on include:\n- Monitoring registry modifications, especially 'SetValue' events targeting paths within '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion'.\n- Paying attention to changes in autostart registry keys like 'Run', 'RunOnce', among others.\n- Excluding events related to known legitimate software updates or installations that might use these registry keys for benign purposes. This includes certain Microsoft Office and Edge update activities, Dropbox installation behaviors, Evernote, .NET runtime setups, Visual C++ Redistributable installations, Windows SDK, and Win desktop runtime upgrades, among others. Activities that resemble legitimate software behavior but occurring in unusual or unexpected registry keys should be scrutinized.\n- Excluding changes made by known uninstallers or the 'msiexec.exe' process when it interacts with specific registry keys that might be altered during legitimate software updates or uninstallation processes.\n\nThe logging source for these activities is primarily registry set logs from Windows products, allowing for the monitoring of these critical changes. While investigating these modifications, it's crucial to differentiate between legitimate and malicious uses to avoid false positives, such as legitimate software installations or administrative actions setting up autostart keys for valid reasons. The associated fields to observe include the SecurityID, ObjectName, OldValueType, and NewValueType which provide details about the registry operation.\n\nUnderstanding and identifying these modifications are significant in the context of security because autostart extensibility points are often leveraged by malware to ensure persistence on infected systems, executing malicious payloads without user intervention at system startup or login. Monitoring and analyzing changes in these areas help in early detection of potential threats ensuring better preventative measures against unauthorized or malicious activities aiming to gain persistence on Windows systems."
    }
  },
  {
    "instruction": "Explain how should I detect the following: users trying to exploit sudo vulnerability reported in CVE-2019-14287",
    "context": "",
    "output": "In order to detect users trying to exploit the sudo vulnerability reported in CVE-2019-14287, you should: Monitor process creation logs on Linux systems for commands that contain the pattern ' -u#' in their command line. This specific string pattern is indicative of an attempt to exploit the mentioned sudo vulnerability, where unauthorized command execution might be attempted by specifying a user ID of -1 or 4294967295, effectively allowing a user to run commands with root privileges. Due to the specificity of the command pattern exploitation attempt, false positives are considered unlikely. The detection of such activity should be treated with a high level of concern due to its potential impact.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "users trying to exploit sudo vulnerability reported in CVE-2019-14287",
      "answer": "In order to detect users trying to exploit the sudo vulnerability reported in CVE-2019-14287, you should: Monitor process creation logs on Linux systems for commands that contain the pattern ' -u#' in their command line. This specific string pattern is indicative of an attempt to exploit the mentioned sudo vulnerability, where unauthorized command execution might be attempted by specifying a user ID of -1 or 4294967295, effectively allowing a user to run commands with root privileges. Due to the specificity of the command pattern exploitation attempt, false positives are considered unlikely. The detection of such activity should be treated with a high level of concern due to its potential impact."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\". Which could indicates possible persistence",
    "context": "",
    "output": "Certainly!\n\nIn order to detect creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\", which could indicate possible persistence, you should: Monitor Windows file event logs for any new \".dll\" files being created or added to the Notepad++ plugins directory. This detection focuses on identifying \".dll\" files because these can be utilized by adversaries to maintain persistence on a compromised system by executing malicious code. Important to note, any occurrences where the process responsible for creating or modifying these \".dll\" files is not 'gup.exe', the updater for Notepad++, should be scrutinized. The rule specifically excludes files added or modified by 'gup.exe', as well as during initial installation procedures or when sourcing from 'C:\\Users\\' within '\\AppData\\Local\\Temp\\' directory, aiming to reduce false positives such as legitimate updates or plugin expansions initiated by users. Detection of such activity is flagged with a medium level of concern due to the potential misuse of legitimate software to sustain unauthorized access or control within a targeted environment. Be aware, legitimate use of custom plugins or initial installation of Notepad++ may also trigger alerts under this criterion, which are considered potential false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\". Which could indicates possible persistence",
      "answer": "In order to detect creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\", which could indicate possible persistence, you should: Monitor Windows file event logs for any new \".dll\" files being created or added to the Notepad++ plugins directory. This detection focuses on identifying \".dll\" files because these can be utilized by adversaries to maintain persistence on a compromised system by executing malicious code. Important to note, any occurrences where the process responsible for creating or modifying these \".dll\" files is not 'gup.exe', the updater for Notepad++, should be scrutinized. The rule specifically excludes files added or modified by 'gup.exe', as well as during initial installation procedures or when sourcing from 'C:\\Users\\' within '\\AppData\\Local\\Temp\\' directory, aiming to reduce false positives such as legitimate updates or plugin expansions initiated by users. Detection of such activity is flagged with a medium level of concern due to the potential misuse of legitimate software to sustain unauthorized access or control within a targeted environment. Be aware, legitimate use of custom plugins or initial installation of Notepad++ may also trigger alerts under this criterion, which are considered potential false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of format.com with a suspicious filesystem selection that could indicate a defense evasion activity in which format.com is used to load malicious DLL files or other programs",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of format.com with a suspicious filesystem selection that could indicate a defense evasion activity in which format.com is used to load malicious DLL files or other programs, you should: Monitor Windows process creation logs for the execution of the \"format.com\" process. Specifically, look for command lines that include the \"/fs:\" parameter, which is used to specify the file system type. However, exclude instances where the command line specifies common file systems such as FAT, exFAT, NTFS, UDF, or ReFS with the \"/fs:\" parameter. This focus helps in identifying uncommon or suspicious file system formats being specified, which could be indicative of an attempt at defense evasion. The detection of such activity is considered high priority, although it's important to be aware that there may be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of format.com with a suspicious filesystem selection that could indicate a defense evasion activity in which format.com is used to load malicious DLL files or other programs",
      "answer": "In order to detect the execution of format.com with a suspicious filesystem selection that could indicate a defense evasion activity in which format.com is used to load malicious DLL files or other programs, you should: Monitor Windows process creation logs for the execution of the \"format.com\" process. Specifically, look for command lines that include the \"/fs:\" parameter, which is used to specify the file system type. However, exclude instances where the command line specifies common file systems such as FAT, exFAT, NTFS, UDF, or ReFS with the \"/fs:\" parameter. This focus helps in identifying uncommon or suspicious file system formats being specified, which could be indicative of an attempt at defense evasion. The detection of such activity is considered high priority, although it's important to be aware that there may be unknown false positives."
    }
  },
  {
    "instruction": "How can I detect: suspicious command line reg.exe tool adding key to RUN key in Registry",
    "context": "",
    "output": "In order to detect suspicious command line reg.exe tool adding key to RUN key in Registry, you should monitor Windows process creation logs for instances when the command line includes the 'reg' command specifically adding entries to the 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' registry path. This is often indicative of an attempt to achieve persistence by ensuring a malicious program runs each time the system starts. It is important to be aware that there are legitimate reasons for software or administrators to add keys to this registry location, such as during software installation or for legitimate administrative tasks. Moreover, popular applications like Discord might also perform similar actions, which are considered benign. The detection should be viewed with medium severity, balancing vigilance with awareness of potential legitimate use cases.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious command line reg.exe tool adding key to RUN key in Registry",
      "answer": "In order to detect suspicious command line reg.exe tool adding key to RUN key in Registry, you should monitor Windows process creation logs for instances when the command line includes the 'reg' command specifically adding entries to the 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' registry path. This is often indicative of an attempt to achieve persistence by ensuring a malicious program runs each time the system starts. It is important to be aware that there are legitimate reasons for software or administrators to add keys to this registry location, such as during software installation or for legitimate administrative tasks. Moreover, popular applications like Discord might also perform similar actions, which are considered benign. The detection should be viewed with medium severity, balancing vigilance with awareness of potential legitimate use cases."
    }
  }
]